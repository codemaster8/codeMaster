<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="3cafb042-5d22-433b-b019-aa76a3256bc3" activeEnvironment="Default" name="FlakyDemo" resourceRoot="" soapui-version="5.1.2" xmlns:con="http://eviware.com/soapui/config">
  <con:settings/>
  <con:testSuite id="b3708afb-928e-416e-bdd7-37a20d472554" name="DISABLER">
    <con:settings/>
    <con:runType>
      SEQUENTIAL
    </con:runType>
    
    
    <con:testCase id="c8ff4240-4ea6-476c-997f-42656a944c56" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FlakyDemo" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Disabler_old" id="fef9ea85-8197-4340-8615-3d49695eddac">
        <con:settings/>
        <con:config><script>def xmlFile="C:\\Users\\utkarsh.sinha\\Desktop\\FlakyDemo\\FlakyDemo.xml"
def projectLocation= context.expand( '${#Project#ProjectLocation}' )
log.info "PROCESSING LOCATION : " + projectLocation;
//new File(projectLocation).eachFileRecurse{ log.info it.name}

new File(projectLocation).eachFileRecurse 
{ 
	log.info "### Processing file : " + projectLocation+"\\"+it.name
	if(it.name.contains('.xml') )
	{
		xmlFile=it.name.toString()
		
		String fileContents = new File(projectLocation+"\\"+xmlFile).text
		
		def myXml= new XmlSlurper().parseText(fileContents)
		myXml.each
		{Suites->
		
			if(Suites.toString().contains('testSuite'))
			{log.info "Suite " + Suites.@name
				
				Suites.each
				{cases->	
					
					if(cases.toString().contains('testCase') &amp;&amp; cases.toString().contains("FLAKY"))
					{log.info "TCase " + cases.@name
						cases.@disabled="true"
						demo="!!!!!!!!! Disabled  " +  cases.@name +" "+ cases.@disabled;
						log.info demo
					}
				}
			}
		}
	log.info "Printing File#" + projectLocation+"\\"+xmlFile
		new XmlNodePrinter(new PrintWriter(new FileWriter(projectLocation+"\\"+xmlFile))).print(myXml)
      
}
}


log.info "############## EXECUTED &amp; SUCCESS";</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="test" id="31e66a6c-8911-4a0f-bdaa-a399b3afbd95">
        <con:settings/>
        <con:config><script>
            def xmlFile="C:\\Users\\utkarsh.sinha\\Desktop\\FlakyDemo\\TEST\\R15_AccountCreate.xml"
String fileContents = new File(xmlFile).text
//log.info fileContents;

def myXml= new XmlParser().parseText(fileContents)
myXml.each
{Suites->
	if(Suites.toString().contains('testSuite'))
	{
		
		Suites.each
		{cases->	
			if(cases.toString().contains('testCase') &amp;&amp; cases.toString().contains("FLAKY"))
			{
				cases.@disabled="true"
				demo="##  " +  cases.@name +" "+ cases.@disabled;
				log.info demo
			}
		}
	}
}


new XmlNodePrinter(new PrintWriter(new FileWriter(xmlFile))).print(myXml)
          </script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="DISABLER NEW" id="82eadbfa-23f1-40ae-8112-56cd54d6d733"><con:settings/><con:config><script>import groovy.xml.StreamingMarkupBuilder


def xmlFile="C:\\Users\\utkarsh.sinha\\Desktop\\FlakyDemo\\FlakyDemo.xml"
def projectLocation= context.expand( '${#Project#ProjectLocation}' )
log.info "PROCESSING LOCATION : " + projectLocation;
new File(projectLocation).eachFileRecurse{ log.info it.name}

new File(projectLocation).eachFileRecurse 
{ 
	if(it.toString().contains('.xml'))
	{
		log.info "# PROCESSING FILE : " + it
		input = it.text
		
		def root = new XmlSlurper().parseText(input)
		root.each{
			log.info "!!!!!!!!!!!!  " + it 
			it.each{Suites->
			log.info "processing suite" + Suites.@name;
				if(Suites.toString().contains('testSuite'))
				{
					log.info "processing suite " + Suites.@name;
					Suites.each
					{cases->	
					log.info "processing case " + cases.@name;
//						if(cases.toString().contains('testCase') &amp;&amp; cases.@name.toString().contains("FLAKY"))
//						{
//							cases.@disabled="true"
//							demo="#Disabled  " +  cases.@name +" "+ cases.@disabled;
//							log.info demo
//						}
					}
				}
			}
	
		def outputBuilder = new StreamingMarkupBuilder()
		String updatedXml = outputBuilder.bind{ mkp.yield root }
		log.info "updated XML : " +  updatedXml 
		log.info "Printing FIle  : " + it
		def writer = new FileWriter(it)
		groovy.xml.XmlUtil.serialize( updatedXml, writer) 
		//new XmlNodePrinter(new PrintWriter(new FileWriter(it))).print(updatedXml)
			}
	}
	

}</script></con:config></con:testStep><con:testStep type="groovy" name="OldPOC" id="b0e3b0f4-5cfa-4444-b59c-6919dbb597de"><con:settings/><con:config><script>
def xmlFile="C:\\Users\\utkarsh.sinha\\OneDrive - Sears Global Technologies\\FlakyDemo\\TEST\\test.xml"
String fileContents = new File(xmlFile).text
//log.info fileContents;

def myXml= new XmlParser().parseText(fileContents)
myXml.each
{Suites->
	if(Suites.toString().contains('testSuite'))
	{
		
		Suites.each
		{cases->	
			if(cases.toString().contains('testCase') &amp;&amp; cases.toString().contains("FLAKY"))
			{
				cases.@disabled="true"
				demo="##  " +  cases.@name +" "+ cases.@disabled;
				log.info demo
			}
		}
	}
}
log.info "Updating File " + xmlFile

new XmlNodePrinter(new PrintWriter(new FileWriter(xmlFile))).print(myXml)
          </script></con:config></con:testStep><con:testStep type="groovy" name="rnd" id="3303461c-816e-42d3-82b5-89d35087e1fe"><con:settings/><con:config><script>import groovy.xml.StreamingMarkupBuilder

//Open file
def myXml = new XmlSlurper().parse('C:\\Users\\utkarsh.sinha\\Desktop\\FlakyDemo\\TEST\\test.xml')

log.info "bef0re:  "+myXml



//Save File


//Option 1: Write XML all on one line
def builder = new StreamingMarkupBuilder()

String sAfter =  "after " + builder.bind {  mkp.yieldUnescaped  myXml.toString() - "&amp;lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&amp;gt;" };
log.info sAfter
//writer &lt;&lt; builder.bind {
//  mkp.yield myXml
//}
def writer = new FileWriter('C:\\Users\\utkarsh.sinha\\Desktop\\FlakyDemo\\OUTPUT\\test.xml')
//Option 2: Pretty print XML
XmlUtil.serialize(sAfter, writer)</script></con:config></con:testStep><con:properties/>
      <con:reportParameters/>
    </con:testCase>
    <con:properties/>
    <con:reportParameters/>
  </con:testSuite>
  <con:requirements/>
  <con:properties><con:property><con:name>ProjectLocation</con:name><con:value>C:\\Users\\utkarsh.sinha\\OneDrive - Sears Global Technologies\\FlakyDemo\\TEST</con:value></con:property></con:properties>
  <con:wssContainer/>
  <con:databaseConnectionContainer/>
  <con:oAuth2ProfileContainer/>
  <con:reporting>
    <con:reportTemplates/>
    <con:xmlTemplates/>
    <con:parameters/>
  </con:reporting>
  <con:sensitiveInformation/>
</con:soapui-project>