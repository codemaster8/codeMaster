<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="R15_UVTC_DTC" resourceRoot="${projectDir}" soapui-version="4.6.1" defaultScriptLanguage="Groovy" activeEnvironment="Default" id="54e89bbd-f1a9-4acd-a454-afad37d40d27" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="true"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Save After" value="true"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">/opt/dece/Reports/Reports_LP1/STSAPI_Payload_NodeOId_TCs_R4_LP1</con:setting></con:settings><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Account" type="rest" id="8252ba06-b20f-4a82-a0b6-fd7f3523ede0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="AccountCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" id="ed70a636-717d-4786-b6de-deabd446719b"><con:settings/><con:parameters/><con:method name="AccountCreate" method="POST" id="09857898-3271-43d8-a451-d5bf44ce4858"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400 500</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 500 405 403 503</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#coordinatorSchema}">proj:Account</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AccountCreate" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" sslKeystore="80080010.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="AccountGET" method="GET" id="09857898-3271-43d8-a451-d5bf44ce4858"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201 303 200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400 500 401</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 500 405 403</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AccountGET_BasicAuth" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" sslKeystore="500500.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:username>${#Project#UserName}</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="AccountGET_SAML" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" sslKeystore="500500.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:username/><con:password/><con:domain/></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Account" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" id="bda852c0-5ccd-41d2-911c-bdec0459e462"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="AccountGet" method="GET" id="5cccdc43-2b89-4e8c-88a3-390b7ef3f239"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 401 400</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AccountGet" mediaType="application/xml;charset=UTF-8" sslKeystore="500500.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request><con:request name="AccountGet_BasicAuth" mediaType="application/xml;charset=UTF-8" sslKeystore="500580.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:username>${#Project#UserName}</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="AB1E09D1A009474DE0401F0A07995BBC" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountDelete" method="DELETE" id="3dd5e135-f342-47db-9631-1bec111dba45"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" sslKeystore="80080010.pem" id="7e19750b-606f-4d7d-bda7-cfa0c9074a64"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountUpdate" method="PUT" id="5cccdc43-2b89-4e8c-88a3-390b7ef3f239"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AccountUpdate" mediaType="application/xml;charset=UTF-8" sslKeystore="80080010.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="FirstUserCreate" type="rest" id="63e68881-a234-4670-82d0-16b5421c30a4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="FirstUserCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" id="9ed9c404-b207-4c25-a786-7bd711105b44"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="UserAPI" path="/{UserID}" id="8c72fe92-42e8-4bcc-bfc3-29cb8a3ca9cb"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value>UserID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>UserID</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:resource name="User_StatusUpdate" path="/ResourceStatus/Current/Update" id="b0f04600-c6bc-42f8-b382-bdb9ef258eee"><con:settings/><con:parameters/><con:method name="UserStatusUpdate" method="PUT" id="5e4818b9-48a0-429e-aa1a-3379298d12be"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ResourceStatus</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>303</con:status><con:params/></con:representation><con:request name="UserStatusUpdate" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="ae263fb2-2f71-4002-b6e4-7831863b5d6f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#NODEACCID}"/>
  <con:entry key="UserID" value="${#Project#NODEUSERID}"/>
</con:parameters></con:request></con:method></con:resource><con:method name="UserGet" method="GET" id="55de7616-71c0-4cac-bade-e9aa4166e711"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:User</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserGet" mediaType="application/xml;charset=UTF-8" id="86860311-fe06-418d-9e53-0c4d81aa0896" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserList" path="/List" id="16a08242-2ac7-42a8-b9c6-ca954b9794d4"><con:settings/><con:parameters/><con:method name="UserList" method="GET" id="e58e8f42-4a16-498a-86e7-a405a0125794"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:UserList</con:element></con:representation><con:request name="UserList" mediaType="application/xml;charset=UTF-8" id="869ab87f-d5fa-4e59-8a29-1bca986023a1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:method name="FirstUserCreate" method="POST" id="557bc5f3-c2ce-4146-81fc-71cdc6358536"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>404 403 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503 502</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 405 400 500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#coordinatorSchema}">proj:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="FirstUserCreate" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="54c781b4-bf2d-4e55-ab6c-fc7337e96457" sslKeystore="80080010.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>shikha.gupta@neustar.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>shikha82@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
       <Credentials> 
		<Username>NewnameShikha</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn%3Adece%3Aaccountid%3Aorg%%3A${#TestCase#NODE_ACCOUNT_ID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="UserDelete" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" id="b4da2587-c2fe-45c4-aa0b-7bfdda8db2c0"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value>${#TestCase#NODE_ACCOUNT_ID}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#NODE_ACCOUNT_ID}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value>${#TestCase#NODE_USER_ID}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#NODE_USER_ID}</con:default></con:parameter></con:parameters><con:method name="DeleteUser" method="DELETE" id="02c9752d-c22c-4713-874a-3f6c2b982142"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" id="0f18fdda-5e02-4f21-8def-a3f312f61ac8"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="AccountUserCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" id="9ed9c404-b207-4c25-a786-7bd711105b44"><con:settings/><con:parameters/><con:method name="AccountUserCreate" method="POST" id="557bc5f3-c2ce-4146-81fc-71cdc6358536"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>404 403 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503 502</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 405 400 500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#coordinatorSchema}">proj:User</con:element></con:representation><con:request name="AccountUserCreate" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="54c781b4-bf2d-4e55-ab6c-fc7337e96457" sslKeystore="80080010.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>shikha.gupta@neustar.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>shikha82@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
       <Credentials> 
		<Username>NewnameShikha</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AddNewUser" type="rest" id="785934cf-6e29-492d-9dd8-504d1aeb0b28" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#HostName}</con:endpoint></con:endpoints><con:resource name="AddUser" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" id="a8f8ca6d-db1b-4090-9ffc-68be2d519618"><con:settings/><con:parameters/><con:resource name="UserAPI" path="/{UserID}" id="20cfed44-6bef-4e69-8937-8a0ed4466e50"><con:settings/><con:parameters><con:parameter><con:name>UserID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserDelete" method="DELETE" id="ec0bb443-5d9b-4e69-b1d5-c6cf6535c7e4"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:style>TEMPLATE</con:style></con:parameter><con:parameter><con:name>UserID</con:name><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserDelete" mediaType="application/xml;charset=UTF-8" sslKeystore="80080010.pem" id="d0bc938e-dbab-4193-8cc9-85cb4f10c8bf"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:${#Project#NODEUSERID1}"/>
</con:parameters></con:request></con:method><con:method name="UserGet" method="GET" id="b4c52e6c-50f0-4ebf-b8e3-ab596e55b443"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 404 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 400 405</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserGet" mediaType="application/xml;charset=UTF-8" sslKeystore="80080010.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="UserUpdate" method="PUT" id="b4c52e6c-50f0-4ebf-b8e3-ab596e55b443"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:${#Project#NODEACCID}</con:value><con:style>TEMPLATE</con:style><con:default>urn:dece:accountid:org:dece:${#Project#NODEACCID}</con:default></con:parameter><con:parameter><con:name>UserID</con:name><con:value>urn:dece:userid:org:dece:${#Project#NODEUSERID}</con:value><con:style>TEMPLATE</con:style><con:default>urn:dece:userid:org:dece:${#Project#NODEUSERID}</con:default></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400 500 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 503</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserUpdate" mediaType="application/xml;charset=UTF-8" sslKeystore="500500.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>shikha.gupta@neustar.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>shikha82@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
       <Credentials> 
		<Username>${#Project#UserName}</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="AddUser" method="POST" id="c8e33bf9-7e9a-4fc7-a85d-b9258d44e3b4"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AddUser" mediaType="application/xml;charset=UTF-8" postQueryString="false" sslKeystore="80080010.pem" id="8f456815-cfce-46c5-9b39-907b23b9d134"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>shikha.gupta@neustar.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>shikha82@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
       <Credentials> 
		<Username>${#Project#UserName}</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>
]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="PolicyCreate" type="rest" basePath="" definitionUrl="" id="6c3d536c-c34c-4909-b68e-c56202e901a4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="PolicyCreate_UserPolicy" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="8ea94816-f6ab-4fdb-a7cf-e216079a2d87"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>NodeAccountId</con:name><con:value>${#TestProject#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestProject#NodeAccountId}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>NodeUserId</con:name><con:value>${#TestProject#NodeUserId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestProject#NodeUserId}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>PolicyClass</con:name><con:value>${#TestCase#PolicyClass}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#PolicyClass}</con:default></con:parameter></con:parameters><con:method name="PolicyCreateSinglePolicyPost" method="POST" id="1852f785-6b55-4441-927b-2090f020122a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#coordinatorSchema}">proj:PolicyList</con:element></con:representation><con:request name="PolicyCreateSinglePolicyPost" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="999901_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:EndUserLicenseAgreement "/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:request></con:method><con:method name="UserPolicyGET" method="GET" id="1852f785-6b55-4441-927b-2090f020122a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="PolicyGET" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="999901_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:EndUserLicenseAgreement "/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:request></con:method><con:method name="UserPolicy_DELETE" method="DELETE" id="1852f785-6b55-4441-927b-2090f020122a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="PolicyDELETE" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="999901_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:EndUserLicenseAgreement "/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="PolicyCreate_AccountPolicy" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="8ea94816-f6ab-4fdb-a7cf-e216079a2d87"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>${#TestProject#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestProject#NodeAccountId}</con:default></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value>${#TestCase#PolicyClass}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#PolicyClass}</con:default></con:parameter></con:parameters><con:method name="PolicyCreateSinglePolicyPost" method="POST" id="1852f785-6b55-4441-927b-2090f020122a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="PolicyCreateSinglePolicyPost" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="999901_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:EndUserLicenseAgreement "/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:request></con:method><con:method name="AccountPolicyGET" method="GET" id="c23d9652-8201-4a6d-a343-8eaeb0193004"><con:settings/><con:parameters/><con:request name="AccountPolicyGET" mediaType="application/xml;charset=UTF-8" id="846a1ca0-681d-46b1-a5d8-0a63053da965"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="PolicyClass" value="List" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountPolicyDELETE" method="DELETE" id="33e2e7d9-2b5b-406b-ba40-cad2d4922d0a"><con:settings/><con:parameters/><con:request name="AccountPolicyDELETE" mediaType="application/xml;charset=UTF-8" id="7926fdfc-6744-494b-ad3f-86dbd869e045"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="PolicyClass" value="List" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="STSGet1" type="rest" basePath="" definitionUrl="" id="0d466ce1-3de8-42e3-961c-b6b7455ababe" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="STSGET" path="" id="99df4a85-065b-4c55-9ed4-1c36a09ff13a"><con:settings/><con:parameters/><con:method name="STS GET" method="GET" id="45528b05-353f-48ae-9d78-8e25ff114049"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="2b213a05-ac30-47a9-ac13-39f2e3c51051"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="STS PUT" method="PUT" id="fd7de7df-c945-4473-8217-81a54ba483ea"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="728a70a4-f861-4b3f-8754-ba4f2bfd1018"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="STS POST" method="POST" id="9d7cec1a-a937-4992-a7ac-9364f31beea4"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="095fa567-7940-4c43-9f64-5e78b15b079d"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="STS DELETE" method="DELETE" id="39dbec8d-b76c-40f1-a75f-1bd1ddbd57da"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" id="42645f07-513f-4fe9-8054-412ee6ce74d1"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="STS HEAD" method="HEAD" id="66316bdf-76ca-4bb3-8760-1998c7d348b6"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" id="a80cb9fb-e2fc-4a4a-8b6a-4c407c3badd9"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="STS TRACE" method="TRACE" id="fafdb64a-91e1-4ee5-a19d-7feabd02cf65"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="05d8d1f1-ed64-4621-913e-6a5ca9afa44d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="STS OPTIONS" method="OPTIONS" id="bd81df4e-4b8d-4766-9e7e-f6a0ac2ed830"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="8040d20f-b587-4b9b-91ff-abc06ef70e8b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="STS PATCH" method="PATCH" id="e7b8a4b3-a85b-4db1-90c7-9ec7d3e77324"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="55fa8493-0185-4029-91a1-5f717ea32008"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountStatusUpdate" type="rest" basePath="${#Project#Provision_HostName}" definitionUrl="" id="ef3df03c-364e-4634-8d44-c4f876c1dda0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountStatusUpdate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/ResourceStatus/Current/Update" id="22209bd2-fa00-4d86-81b2-9ecd6016abc0"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="AccountStatusUpdate - AccountStatusUpdate" method="PUT" id="f702eff3-f742-4f87-bb66-84d3d9621937"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 404 405 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>303</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/html</con:mediaType><con:status>303</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>400 404 413 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="3807313e-557d-4607-a7ea-f6bff82751b4"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="UserStatusUpdate" type="rest" basePath="" definitionUrl="" id="86f9c09b-48e1-4290-9630-c1524e9ef55a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="UserStatusUpdate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update" id="e68fc385-8020-4968-bd7d-076e92053164"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default></con:parameter><con:parameter><con:name>UserID</con:name><con:value>UserID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>UserID</con:default></con:parameter></con:parameters><con:method name="UserStatusUpdate - UserStatusUpdate" method="PUT" id="f45d4ca2-6a72-4eb6-9e8f-a5f2b00406de"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>303</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>303</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#coordinatorSchema}">proj:ResourceStatus</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" id="6d60a729-fa7c-48f3-b662-1cb4bcf63cdf" mediaType="application/xml;charset=UTF-8"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Rights Token" type="rest" id="2cc5edf0-44c3-45c0-af0b-d6e19735bdd5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="Rights Token Get_List" path="${#TestCase#endPoint}" id="80183adb-1c5a-4de7-9d84-191f16c47def"><con:settings/><con:parameters/><con:method name="Rights Token Get" method="GET" id="8b4cec3d-fe23-4572-9b38-8f6059da115f"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 404 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:RightsTokenList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:RightsToken</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" id="dc5964a7-d54c-453b-85c8-f1cc8f5c4976"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Rights Token Create" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{RIGHTSTOKEN}/RightsToken" id="483f410c-4aec-4f56-bdb8-b53566c9bb97"><con:settings/><con:parameters><con:parameter><con:name>RIGHTSTOKEN</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Rights Token Create" method="POST" id="1c20f275-4760-4c4b-994f-d981d038615c"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:RightsTokenData</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="0565a9cc-8569-46e9-a479-f8aacc70fa3f"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Stream" type="rest" basePath="" definitionUrl="" id="233e54e8-cd77-4d4d-8f1e-6d240a4b070f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="StreamView" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Stream/{STREAM}" id="0931ace2-e7f3-4c79-968d-a04d73600c30"><con:settings/><con:parameters><con:parameter><con:name>STREAM</con:name><con:value>${#Project#urnstream}1234</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#urnstream}1234</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:value>${#Project#urnaccount}${#TestCase#assertionAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#urnaccount}${#TestCase#assertionAccountId}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="9683ed0f-6cc9-4f65-847b-0f131541e354"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>0 200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Stream</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="bcfd0ffb-67ca-4ab7-94f1-27b7e0a4af61" mediaType="application/json"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Stream" id="cf353486-e4bd-4e29-9fa0-16678ce3ed16"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="8e9894cd-2bd1-4e02-ab04-37036dd75fc6"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status/><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>0 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="f8992888-776a-4588-8ff0-130c8c626196"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DeviceAuthTokenCreate - DeviceString" type="rest" basePath="" definitionUrl="" id="890e42ef-6efe-4e91-9cb4-fa744271ccec" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="DeviceAuthTokenCreate - DeviceString" path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/DeviceAuthToken/DeviceString" id="53a391a0-23c2-428d-92a3-eccc9c99bc76"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#versionMajor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#versionMinor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMinor}</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="57a25293-67c7-4aa6-8149-57d647475829"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status/><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>0 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="f558a5aa-9fcc-4257-874b-f75591c75953" mediaType="application/xml;charset=UTF-8"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DeviceAuthTokenCreate - JoinCode" type="rest" basePath="" definitionUrl="" id="eb22de80-fc92-4400-b569-1c9075bfaad6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://${#Project#targetURL}</con:endpoint></con:endpoints><con:resource name="DeviceAuthTokenCreate - JoinCode" path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/DeviceAuthToken/JoinCode" id="26fb08d7-ab96-48ae-b4b5-293747247a46"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#versionMajor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#versionMinor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMinor}</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="1e47d24f-e6c1-493b-adef-a28c3c20559a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status/><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>0 201</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="ca63061e-e9ce-4a30-a57c-7aa02e8f4c97" mediaType="application/xml;charset=UTF-8"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMergeTest" type="rest" id="6ba05ee5-e87a-41e2-93b7-5fac7723d364" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountMergeTest" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/Test/{RetiredAccountID}" id="d3ab43df-328b-4e09-8562-58a80596481d"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:style>TEMPLATE</con:style></con:parameter><con:parameter><con:name>RetiredAccountID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="449e438d-5c8b-4814-8ea3-5b23b2d9c7fc"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="cfd0be42-a0ab-4e51-972d-c4a67c9d1208"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMerge" type="rest" id="38577162-173b-4e3b-b7a4-7084681116dd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountMerge" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/{RetiredAccountID}" id="6ecab418-a971-4402-baea-c83b2ded7efc"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:value>SurvivingAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>SurvivingAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>RetiredAccountID</con:name><con:value>RetiredAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>RetiredAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="4659148b-17e0-4ad5-a68e-924d516aa757"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="acbfb94a-f132-4a9c-8d15-8b85ecc78c8c" sslKeystore="7600.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 Assertion=nVdbc6pKE333V1juR8twUVSsnVQNFwlGNCBeX77CYQSUizIg6K8/A26NZif77PM9pMw00z2ruxfNmp/YCny2BzBGceJFYVWVnmv/23Sam9a6YzWasAUbLR7BRpffWOS/Lt1imSYNrU2tqmKcIjXEiRUmzzWWZpoNutlgeJNu91psj2s9sXR3VavOUIxJaLLlia5V88APca889rmWxmEvsrCHe6EVINxLYG8CtGGP7OxZV0y1l58XlOWB8YubJPseRcEnG0Hk+/AJRgH1k3rY89PGvYnnhFaSxujXmTZ+rv3yzbLsKWs+RbFDsTRNUzRPkT029pwftZfK1RnZariJLmvRCqPQg5bvna0ClIYSN7KrwHei2Evc4JvQDMXQRegGymEDMq3wR436OKBE95eRHkDG2Gpg12KuwQy0QTEKIapODfW59uPvOnjxNWMrxJsoDvCn9X+DhMIj8qM9shv4mtkV3d9H/KJcLz8R7Kkh9FPsHdGooMnegghX32O08fKhhwn5bFwt21/N8ZVhCP6Xlvyk7nES2NQXlZE8B+Hk/+nXfa8uUWaWn6KXXI2d8M2SxtrQmeTjlQnoLZx0ZnLmPJcQ7jdfQN1a/Wv9mag3Xv1y0jZd+lCfxpvhCEFXOq60bmBxC44fs4o/PATjZTte8trIkUzROvLteYtdjsRkNqGwzw0RPzeNFd1nopVOwQpKjrtOyAz4oLudniXVW2AtXEfZajaM11x/O2VSHDj1MUoWM+s4YrtuwmC3Xp/X1abHRqyhHzkNrKEB17OKQYtma7v1vZYKzJXbByl4/sjpPocirzd0KpMs/l9wNC9ZiXVbiMWk2JDXM0EvmqpK6VkUwWnigEwVgEP+tmAkOLuDu/MUPqMFoOt9IImCv5WHGtgpgJnKgquJs5mWi2cwEJzRjDiaFeCvBM2QMylbSjNdf5Uz17SV2Wmt+OnqLI80gEtn0dVkQ55JhilrGogutlyT1kq+1SZapupLqUICSHK+P9sKnyAl9yCrctqEY5cTLl0tZsTePw2D0XFtyr4maoo4OSgTdd2UdHkAjOUcsv2U+J6HwT6qLKfCndNgj7YA9TOanAnOmrnLNHPKjiTDKm3mo01TlYGm40zUy6yUipwNZtPzRy1EQRPtQM5lE7xfagFNsT+iV4sBtuZcqBkgk5zS+U3O7PEViKbTWUW81GooZ4ZsTEd9zVAzGZQ2Sc58vGZH7lpxj7Cp5wMTbO8bI+ryvB+S56FxhCfuULGUPlgHMwY2DRd6nGctosxZdTNJXw7eopVKwoyALguCDgggGhSpkfoLYCjMuPHe41kPDTf9KEBuXNGY6G13POd012uOnffRnJM2u8674r03LdulVB+y2+YOqCqy3xhXt2xjSRlS6J3b47fpAnnx8pyMOJ1pe12uYszT6UKK/I79ulhO3+r5Eurm+H0ynb+f83x02HbPfvI6Fl7jyUCTnPEIoXcM6xRt9QWzK3Hi8nVL+LQxaMRVgKMJAChbx5E9QmDhdXsh4auhyYS8QBMzRZyLygQoSl1WBUnXN32XeYfKLJ0yI02VbZ+U6bRcGH5lJQoS6RRtzVf7JdunyVixy2B6S+47+pSrDxZopY98c5aAbD/bhAxDK3v9daNlDtQKBthqNhHIWyRUUhVMrfF+QOdvszbNHHTbH0x4MG3mE3aXj11nddo5qx1pyvLu1VmawJ+ZdxxTCcXmFd2UDQ10L+9brqnTpuHDIN+vA5hLJulZ6RyZgmz0dXqaSxJ4u9iwCdgcL8/yVhPl0r8Ccs0itDiuFy5ehiNvbMopIW16R5ftmqX/lWMFxSqPHDuIQAefOSZfOCaDzaGudiUGc21xj+eZIyjyQe/MhgN+T+uL4a4i1PuUk3h+axx2M/OtPmdOWcfd6vM5r0quWA83S7e5TgTaOkMdDXYdxTN2Uthu+SdtqOnc1KP8E71FhwwPKyOVCeVmcu5TfJzWhWDlBedzs8VOg/dJelSn1htmTu76MOez7ftrm6Ji5cSdO6uj3l9EcHn5jnwekjfjZYxS9wP2YQJftdckXW8RTK7L4jusStU++ThayZ91XGHx7Mam3NrbF2IQJyhMai+FV6HheilRep7dI1/Oy1rqttg2x8gCw3dlwLZkukUzfRrQHZ5vcm3uKvYuKD5BFKNw4xVnFXL28rH+M0AY9DAKbRQ3jlEKXYRrf4hY1KuqhgZRIVGIkRkRudzuCu12h5VZmZY7Qr9NS0QLyy0R8C2O4UW+Vh1FyTgcx2CToPhRKvMPUtlA0Nt7qNDThajARFXghJTkYB3TxGeejtZTiFKiuONC9PbYVpejsBfsfVQApoLITn30tHf3ZYEofPllGxbEpbXTpulS7Xyb3+dn11KQPbZXbMBFMgIi7URfiP7WNZNvM2bY+4yv4UFqe4WoIXVNYg9ekDw++qBLwZMbV4qUrphvWz8bHsJSnzO6nWQfPXhj/O1ORCQ1EV0v14YcrKfDU3o8pmULOoWgjEl4iqHoNjVBMCWq8GRGOxRStxDUXwnyG+pPJ9/sj/jSxA0nCXmbA0KYarn8i9vYBOHiNqYSwud/e9V7OJLULUF58pVN9MmlrUD8x3sd7MFiHzG/k58siu2Pdn0R6+4ckmcxvrzQKVaF/D59wwoYkbAeGWFRfB/8qwBfHf5ovBX5hiUhbFqnCfr+SbWYTc81C8IoDRNVqpWG+3lZ4kxOe9T72PRbmFIA/7rR5PjbG81CG07I5Aqs2m2v9++bG15JF4iIF/ZKLM+1nFzOyeGhczeffwH8ekR3/ziiHzN5+c38u+Wupp/fh5d/AA=="/>
  &lt;con:entry key="Authorization" value="SAML2 Assertion=nVdbc6pKE333V1juR8twUbxVkqrhKioqiNeXrxBGQBGQAUF//RkwGs1O9tnne0iZaaZ7VncvmjWvyDh4dBcgBKPYDfyyzL9V/mcxDNmuG62a0aq3aw0S1msdkyFrcEM2yLphkpZBVcoyQgmUfRQbfvxWoUmqXiPrNaqjk81uo9UlqZdOg1lXynMYIRwab3khK+Xs4PmoWxz7VkkivxsYyEVd3zhA1I3N7hQowy7e2TVumCrvr1eUxYHRuxPHYZcgzBcLmtDzzBczOBCvxNOeVwt1p67tG3ESwY8zLfRW+fBN0/Qlrb8EkU3QJEkSZIfAeyzk2r8q76WbM7Rkfxtc15zhB75rGp57MXJQCoydwCoDzw4iN3YOP4SmCIrMQ9dgZtZMquH/qhCfBxTo/jLSE8gIGTXk4CZ8BNPgFkbQN2F5pslvlV9/18Grrx4ZPtoG0QF9Wf83SNA/QS8IoVVDt8xu6P4+4jflen+FZlf2TS9B7gmOcpqEhglReRLBrZsNXYTJZ6Fy0f5yhm4Mg+Z/ackr8YgTwya+qQzv2hDF/0+/Hnt1jTI3vAS+E+LO8wZue+P0U6XPu5zTm874yXaBuVpAeNx8BXVv9cf6K1HvvPpw0mxHlY2YllqTem9z1vn2xmukVRZcQMsm6bS9jjsWN5A3l3GgR0q23ynygW5yQ1hN5mGk9IdNi/ZW8upgqSXTQWF/GEI/JAVlOgonhNpL25BYDw9xXal6kqbOm5Pjxc/801gC88H5aFFeqrfQuLpTdmF6Jlc7bxbF9Hxbaqh9jWH98dbaj+utrXsh0NtnTo855HkN4LlIMv9/yZAd3oiN+4LLJ8UWv54xfFdkmU8uHAfOUxukMgts/LcDI9beH529K3VSkgWqKgKeY72dMFTAXgLUTGAdhZvPlYy7gD5rj+bYUS8Bb80qmpDy6Yqfq2pPSB3dkubnjeQl64swUgAqnDlHETRhzmu6oCgguNoyhd9I2U6ZKqmsrvgSDsALWXixpE4Mpcw1aZlRpgy9mjLJejnHdvE8PIxOG13wFE6RuOlRmsqbOq8KfaCtFiYtJtj3MjyEQWk1Yx+c+iHcASimJD4TXBR9nyr6jB7xmlHY9GebIkt9RUUppxZZSSUh7c9nl89acKzCWQchE3QwudbC1DlxRK6XfWQsGF/RQMrbhfNASK3xDYiikmmJu9ZqKKSaoM1GoqLJqQAKGy+kHtrQI2cjOSezrmZ9HeweG8OpwkL08XNfO5ln5lgyJBFsDnPKrGuO6TKusQxSe91OeXXVHwRrGYcZAVVgWRVgQCTIU8P1Z8GQnTPj0O3QLhxuxeAAnaikUMFgf7pkZNutj+3JaMHw231rIrmTumE5hOyZ9K6+B7IMrQHlqIalrQiN991LczyYLaEbrS7xiFGppttmStoimS35wGtZveVqNqhmK1PVx5PpbDG5ZNnouGtfvLg3ZnvRtK/w9ngE4QSZVYI0RFZv8wy36u0wn7YaCZkSsBUWAGln24KLCcz2dlcS9jRFwOQFCpdK3IKTpkCSqoLM8qq6FR1qYkrzZEaNFFmwPFym82qpeaU1x/K4U6SxWIcrWiTXOrCKYGpDEG11xlT7S7hWR54+j0Eazrc+RZFSqPa2SmqbSs4AS06nLH6L2FIig5kxDvtkNpg3SeqoWl5/2gGzejal99nYsdfnvb3e46asHl6dlQ68uf7AMRlTbFFSdUFTQPv6vmWKPKtrnnnIws3BzHgd96xwDnRW0ESVnGU8DwZXG9IBnaHVRdgpnFD4l0CmGJgWp83SQSt/5I51IcGkTR7ostvQ5L9yLKdY6ZljRw6o4CvHhCvHBLA9VuU2TyGmyYVokdqsJBzV1nzY74SkuhzuS2xVJOzY9Rpjv53qg+qCOqctZ6cuFh2Zd7iqv1059U3MksbFVGF/35Jcbc/7zYZ3VoaKysxcwjuTO3hM0bA0kilfqMcXkehESZU9rN3D5VJv0LPDZJqc5JkxQNTZ2RwXnXQ36TUJIpLOzKW1PqniMjBX1+/I1yF5N17HKPE4YJ8m8E17TZPNDprxbZl/h2W+LOKPoxH/WcflFteqbYut3TAXgyiGflx5z71yDddNsNJzrS7+cl7XfLtBt9oUAKABKKEpCli0UCIJyFanwzQ74Cb2rii+QOQCf+vmZ+Vy9vqx/jNA89BF0LdgVDsFielAVPlDxLxeZdnXsAoJfAT1AMtljmRYQHIt/E43WiLbFltNsQMYkRE4ssPUhUp5FMRjfxyBbQyjZ6nceZLKGjTd0IW5ns5FBcKqAsW4JEfjlMQe9XIyXnyYYMUd5aK3SzfaDIHcQ+jBHDBxCKzEgy+hExYFItD1l64ZJiqsrSZJFmrnx/y+PruVAu+x3HwDypNhIW4n/E30N7vMLZMfM6box4xv4UFiubmowXWNI9e8Inl+9EmXnCd3ruQp3TDft341PIUlvmZ0P8k6uead8fc7EZbUWHS93xpyNF6OL8nplBQtaOWCMsLhCYogm8QUmglWhWc92EOfuIcg/kqQ31F/Ofluf8aXxI4/jfHbfMCEKRfLv7iNTSHKb2MyJnz2t1e9pyNx3WKYxd/ZOA9f2nLEf7zXmV0z34fNE/yTBpH12a5vYj2cg/PMx5fr2/kql9/nH1hhBjisi0dYED0G/y7Ad4c/G+9FvmOJMZs2SQx/flLOZ9NbxTDNIPFjma8Uhsd5WeCMzyHsfm76LUwhgD9uNBn68UazVIZTPLkORuW+1/33zTW3oIsJsRdyCyxvlQxfzvHhvv0wnz8Afj+i6+yfRvRzJu+/mX+3PNT06/vw/g8="/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:AccountMerge xmlns:dece="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/schema/md/v1.2/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.decellc.org/schema/2012/12/coordinator dece.xsd ">
<dece:UserReference ResourceDisposition="urn:dece:type:status:active">urn:dece:userid:org:dece:D842651EB198EA24E0401F0A07993565</dece:UserReference>                
<dece:UserReference ResourceDisposition="urn:dece:type:status:active">urn:dece:userid:org:dece:D842781AAA4A1E6FE0401F0A0799569A</dece:UserReference>                
</dece:AccountMerge>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="SurvivingAccountID" value="urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD842651EB188EA24E0401F0A07993565"/>
  <con:entry key="RetiredAccountID" value="urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD842781AAA3B1E6FE0401F0A0799569A"/>
</con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMergeUndo" type="rest" id="216cdb32-edc4-42ff-940d-0a24ddc5b6ef" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountMergeUndo" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/Undo" id="a3a07d2e-db6c-4d70-a443-af62d5a50a00"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:value>SurvivingAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>SurvivingAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="4995638c-d575-4d0f-a861-2a267308a8d9"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="9f81ce2b-c5b6-493d-9b1f-7c101faacf30"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="UserValidationTokenCreate" type="rest" basePath="/" definitionUrl="" id="5575b29b-097f-4768-a174-b18ae6ae5c84" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:endpoint>https://qa.p.uvvu.com:7001</con:endpoint></con:endpoints><con:resource name="UserValidationTokenCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/VerificationToken/${#TestCase#tokenType}?subject=${#TestCase#subject}&amp;responseType=${#TestCase#responseType}" id="9101bb7f-43f7-45ea-af3f-109c17188d14"><con:settings/><con:parameters/><con:method name="UserValidationTokenCreate" method="POST" id="f490a06c-e93d-4a0b-9bf9-e794091cb136"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404 500</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404 502 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403 404 415 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404 500 415</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>text/xml</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>multipart/form-data</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>sdasdasdsafsaf</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="86bc01a8-8e9d-4127-a25c-ef0e5aaa1846"><con:settings/><con:endpoint>https://lp2.dev.p.uvvu.com:8443</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="STSCreate" type="rest" basePath="" definitionUrl="" id="a598883c-0101-4959-b45c-8958344aee01" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="STSCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange" id="93161d6d-a7cc-4adf-84e2-f3f76a1d582e"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>audience</con:name><con:value>${#TestCase#audienceList}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#audienceList}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>tokentype</con:name><con:value>${#TestCase#tokenType}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#tokenType}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="443324e4-c9a8-4c9d-a1dd-569424902577"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#schemaNameSpace}">proj:Credentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#schemaNameSpace}">proj:Credentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="a3add857-c58d-4381-be66-716f5a3b13b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="STSGet" type="rest" basePath="" definitionUrl="C:\Users\raju.ganji\Desktop\STSGet_1.wadl" id="435a96ce-d52f-48b4-bd79-d94aa271b40a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/raju.ganji/Desktop/STSGet_1.wadl"><con:part><con:url>file:/C:/Users/raju.ganji/Desktop/STSGet_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="STSGet"/>
  <resources base="https://${#Project#targetHostQ}:${#Project#targetPort}">
    <resource path="rest/{MAJOR}/{MINOR}/SecurityToken/Assertion/{assertionUUID}" id="STSGet">
      <doc xml:lang="en" title="STSGet"/>
      <param name="MAJOR" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MINOR" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="assertionUUID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="GET">
        <doc xml:lang="en" title="GET"/>
        <request/>
        <response status="404">
          <representation mediaType="text/html; charset=iso-8859-1"/>
        </response>
        <response status="403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="401">
          <representation mediaType="text/xml"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
        <response status="200">
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="STSGet" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{assertionUUID}" id="6920509e-f060-47f3-a02f-46d142a3823c"><con:settings/><con:parameters><con:parameter><con:name>assertionUUID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="GET" method="GET" id="2464ac51-87bf-4ecd-aac7-70fe5665c4c9"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="d450578b-8c72-4834-a16d-5c81ae2e3239"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite name="CommonTestSteps" disabled="true" id="be246c17-ca18-4fb2-bf11-ca8cdb017b9d"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountCreate" searchProperties="true" id="07bbb4ed-52a3-441b-ae9c-e5cf72f64fda"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="38ccb869-b4a3-4050-bf3d-ab076c790f6b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("AccountName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="03e1c5e2-89df-4423-beb7-a8bbeb3d4664"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Generate AccountName" id="12d201cb-8628-4ef1-8b14-955488d52d07"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def today= System.currentTimeMillis();

tC.setPropertyValue("AccountName","dtcapi_107_"+today);</script></con:config></con:testStep><con:testStep type="groovy" name="Set Coordinator Schema" id="5f25fe0a-1a8e-4da8-ad39-4e9c42852b96"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "versionMinor: "+tP.getPropertyValue("versionMinor");

def v2 = context.expand( '${#Project#versionMinor}' )
def schema = tP.getPropertyValue("coordinatorSchema_"+v2);

tP.setPropertyValue("coordinatorSchema",schema);
log.info "Setting the coordinatorSchema value ---- "+schema;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="c0a771f9-3505-4224-b3b6-af8c55282a84"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem");
myTC.setPropertyValue("NODE_ID",tC.getPropertyValue("NODE_ID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Account_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create" id="dd0a9e1a-6271-4e56-a361-96c27ff39788"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" methodName="AccountCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" accept="" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/xml;charset=UTF-8" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#coordinatorSchema}"> 
<DisplayName>${#TestCase#AccountName}</DisplayName>
<Country>${#Project#AccountCountry}</Country>
</Account>]]></con:request><con:originalUri>https://qa1.p.uvvu.com/rest/1/11/Account</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="947149be-7bb0-4a3f-9591-1927886d48ad"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="84832a8a-edd8-48f6-924f-167387217434"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate Response" id="dd8ec3f1-b8a6-419d-8d0c-91b282fd957c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
		
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
		
		int lastColon = urlStr.lastIndexOf(':');
		int lastSlash = urlStr.lastIndexOf('/');
		accountid     = urlStr.substring(lastColon + 1);
		accountidfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
		tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountidfull);
	} else {
		assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*");
		int lastColon = urlStr.lastIndexOf('%3A');
		int lastSlash = urlStr.lastIndexOf('/');
		accountid     = urlStr.substring(lastColon + 3);
		accountidfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
		tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountidfull);
	}
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId to the Calling Test Case" id="e5a8890c-44c9-4c6c-96d5-720d273c0719"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep><con:properties><con:property><con:name>AccountName</con:name><con:value>dtcapi_107_1433916605756</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:18245C6DC8DD1F28E0533E991F0A053B</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_004_DTCreate_Verify_UUID_status_for_deletion_of_ULC</con:value></con:property><con:property><con:name>sName</con:name><con:value>3_DTCreate_and_SAML_Exchange_FUNC</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">18245C6DC8DD1F28E0533E991F0A053B</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:18245C6DC8DD1F28E0533E991F0A053B</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b8ba87db-df08-4f36-8c88-c580bb3ec25b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ce61892-9d8a-4055-b161-e19938292410</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c50a4409-da80-4892-a2c3-07a22e674bd0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fd13479c-f25a-495b-8c94-31e5557a93a8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FirstUserCreate" searchProperties="true" id="bf559fac-c1e3-4dde-b5e3-31e01f288f4d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="470780f8-6b6a-47d4-b67b-774ed600d80c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("FirstFullUsername",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("XMLbody",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="b14cf753-dbfa-4682-be2b-4cbe951f9cee"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("PrimaryEmail", callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("AlternateEmail", callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("VerificationNodeId", tP.getPropertyValue("urnNode")+callTC.getPropertyValue("NODE_ID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Generate UserName" id="9e2c55c7-dfc4-49b2-947d-a7e6848c78a2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def today= System.currentTimeMillis();

tC.setPropertyValue("FirstFullUsername","dtcapi_107_"+today);

tC.setPropertyValue("AccountName","dtcapi_accname"+today);</script></con:config></con:testStep><con:testStep type="groovy" name="Set Coordinator Schema"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "versionMinor: "+tP.getPropertyValue("versionMinor");

def v2 = context.expand( '${#Project#versionMinor}' )
def schema = tP.getPropertyValue("coordinatorSchema_"+v2);

tP.setPropertyValue("coordinatorSchema",schema);
log.info "Setting the coordinatorSchema value ---- "+schema;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="bebc946c-4996-48ae-b18a-3c57bcac5341"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID",tC.getPropertyValue("NODE_ID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="5547b84d-f869-4a01-a1f7-db10ba2c2094"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" methodName="AccountUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml;charset=UTF-8" postQueryString="false" accept="" sslKeystore="RET_concat.pem" id="1e6ce323-23b9-4b3d-957c-66cec745e2ed"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/xml;charset=UTF-8" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#coordinatorSchema}"> 
<DisplayName>${#TestCase#AccountName}</DisplayName>
<Country>${#Project#AccountCountry}</Country>
<UserList>
<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#coordinatorSchema}">
	<Name>
        	<GivenName>${#TestCase#FirstFullUsername}</GivenName>
		<SurName>surname</SurName>
	</Name>	
	<ContactInfo>
     <PrimaryEmail ID="645645" verified="true" verificationDateTime="2009-10-26T21:32:52" verificationEntity="${#TestCase#VerificationNodeId}" VerificationStatus="urn:dece:type:status:success">		
	 <Value>${#TestCase#PrimaryEmail}</Value>
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail ID="645645" verified="true" verificationDateTime="2009-10-26T21:32:52" verificationEntity="${#TestCase#VerificationNodeId}" VerificationStatus="urn:dece:type:status:success">			
        <Value>${#TestCase#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
       <Credentials> 
               <Username>${#TestCase#FirstFullUsername}</Username>	
              <Password>${#Project#UserPassword}</Password>
	</Credentials>
</User>
</UserList>
</Account>]]></con:request><con:originalUri>https://qa1.p.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:16E4390AB5F649F6E05307991F0AB206/User</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="b101f327-f4c9-415f-a434-a34067a0e35c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="8c424c80-9b50-455e-aeac-92875c06ae7a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#NODE_ID_RetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#NODE_ID_RetailerforDeviceAuthToken}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

                if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
                {                              
                                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");                             
                } else {
                                assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
                }

                urlStr = URLDecoder.decode(urlStr);
                def arrayString = urlStr.split("Account/");
			      arrayString= arrayString[1].split("/User/");
			      log.info "Node_User_ID=="+arrayString[1]
			      log.info "Node_Account_ID=="+arrayString[0]

			       int lastColon = arrayString[1].lastIndexOf(':');
			       accountid     = arrayString[0].substring(lastColon+4);
			       userid     = arrayString[1].substring(lastColon +1);
			       def useridfull = arrayString[1];    
			       def accountidfull = arrayString[0];       
			                                         
                 tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
                 tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountidfull);

                 tC.setPropertyValue("NODE_USER_ID",userid);
                 tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" id="75044cc8-03cc-4138-b33c-6c03c6f33775"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("Username",tC.getPropertyValue("FirstFullUsername"));
callTC.setPropertyValue("UserPassword",tP.getPropertyValue("UserPassword"));
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:18245C6DC8F61F28E0533E991F0A053B/User/urn:dece:userid:org:dece:18245C6DC8F71F28E0533E991F0A053B</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_004_DTCreate_Verify_UUID_status_for_deletion_of_ULC</con:value></con:property><con:property><con:name>sName</con:name><con:value>3_DTCreate_and_SAML_Exchange_FUNC</con:value></con:property><con:property><con:name>UserName</con:name><con:value>username_20130122_051451</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">18245C6DC8F71F28E0533E991F0A053B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">18245C6DC8F61F28E0533E991F0A053B</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn:dece:accountid:org:dece:E512F62E62104344E0401F0A07994421</con:value></con:property><con:property><con:name>FirstFullUsername</con:name><con:value>dtcapi_107_1433916607228</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:18245C6DC8F71F28E0533E991F0A053B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:18245C6DC8F61F28E0533E991F0A053B</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433916605756@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>VerificationNodeId</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>AccountName</con:name><con:value>dtcapi_accname1433916607228</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FirstUserCreatewithoutPassword" searchProperties="true" id="633e4b17-04f3-461e-987c-37e6871eab8f"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="27136573-0480-454d-9ca2-9303e404c64e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("FirstFullUsername",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);

tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("XMLbody",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="b9040540-5954-42ca-a45c-fd5d157b85b7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Generate UserName" id="f0e71938-2f01-42d3-9cf8-f48055f5e710"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def today= System.currentTimeMillis();

tC.setPropertyValue("FirstFullUsername","stsapi_107_"+today);</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="166631ca-b273-474a-9c06-1169a0d343e7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID_",tC.getPropertyValue("NODE_ID_"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="b4d62c61-3ddc-4bd0-8d5f-dad15c845818"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml;charset=UTF-8" postQueryString="false" accept="" sslKeystore="RET_concat.pem" id="560e8771-b128-4a51-8090-84558a14e270"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/xml;charset=UTF-8" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#FirstFullUsername}</GivenName>
		<SurName>surname</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	 <Value>${#Project#PrimaryEmail}</Value>
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
       <Credentials> 
               <Username>${#TestCase#FirstFullUsername}</Username>	
<!--              <Password>${#Project#UserPassword}</Password>-->
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="8d601d63-df65-4a48-bb0e-863d0c02672d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="ce1a2517-a2b8-4a18-8e71-51a4fd96ef67"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#NODE_ID_RetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#NODE_ID_RetailerforDeviceAuthToken}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
		
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
		
		int lastColon = urlStr.lastIndexOf(':');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 1);
		useridfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_USER_ID",userid);
		tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);
	} else {
		assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
		int lastColon = urlStr.lastIndexOf('%3A');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 3);
		useridfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_USER_ID",userid);
		tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);
	}
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" id="ed17e407-f697-4714-8538-6d1621f88575"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("Username",tC.getPropertyValue("FirstFullUsername"));
callTC.setPropertyValue("UserPassword",tP.getPropertyValue("UserPassword"));
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E9CCC856D1C92FB6E0401F0A05990823/User/urn:dece:userid:org:dece:E9CCCEF0D7E58218E0401F0A05990817</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_16018 - STSCreate - Device:CS - unamepasswd - Requesting without Password - User created by node RTL - P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>6_STS Create - Node Role - RANDOM_PWD set to Y</con:value></con:property><con:property><con:name>UserName</con:name><con:value>username_20130122_051451</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E9CCCEF0D7E58218E0401F0A05990817</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E45D0EC0720B7C4FE0401F0A05992ED6</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE45D0EC0720B7C4FE0401F0A05992ED6</con:value></con:property><con:property><con:name>FirstFullUsername</con:name><con:value>stsapi_107_1382961484377</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/soapUIProjects/STSAPIProjects_LP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E9CCC856D1C92FB6E0401F0A05990823</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E9CCCEF0D7E58218E0401F0A05990817</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserCreate" searchProperties="true" id="205bfa82-d75c-4168-849d-5569f7757a0b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="8e396eee-1237-4ce3-a531-fcc28b60a8aa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("SecondUserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="5da943d6-1090-4e8a-b32f-72355de2e61e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));

tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));

if (tP.getPropertyValue("versionMinor")!="02"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Generate UserName" id="3e637bf7-15b4-4c47-a81c-ca3ff4ca17d6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def today= System.currentTimeMillis();

tC.setPropertyValue("SecondUserName","stsapi_107_"+today);</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="bfb31b95-da2f-4d53-ace1-0a49fceea51f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID_",tC.getPropertyValue("NODE_ID_"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="8629409d-a2e7-4f60-a9d1-e4ac2e53dd1c"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml;charset=UTF-8" postQueryString="false" accept="" sslKeystore="7600.pem" id="f725b9c9-27bd-4784-8cc8-0d3576a70512"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml;charset=UTF-8"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#SecondUserName}</GivenName>
		<SurName>Ganji</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#PrimaryEmail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>UK</Country>
	</Address-->
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
      <LegalGuardian>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#SecondUserName}</Username>	
                <Password>${#Project#UserPassword}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="76bd2bbb-250f-463d-a6fe-8cae51cf49ff"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="089fa19c-ae64-4e84-b814-18b9e744fbba"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def NODE_ID        = tC.getPropertyValue("NODE_ID");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#NODE_ID_RetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#NODE_ID_RetailerforDeviceAuthToken}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
		
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
		
		int lastColon = urlStr.lastIndexOf(':');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 1);
		useridfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_USER_ID",userid);
		tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);
	} else {
		assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
		int lastColon = urlStr.lastIndexOf('%3A');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 3);
		useridfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_USER_ID",userid);
		tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);
	}
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" id="664c22d6-3b8c-4409-aaaa-76f3b2c1d1b8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL1",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("SecondUserName",tC.getPropertyValue("SecondUserName"));
callTC.setPropertyValue("UserPassword",tP.getPropertyValue("UserPassword"));
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D3DF73AA839B4C42E0401F0A07996A55/User/urn:dece:userid:org:dece:D3DF7BAE6D161DAEE0401F0A05993EE0</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>SEC054_COO_DelegationAndUserStatus</con:value></con:property><con:property><con:name>sName</con:name><con:value>ISC_TestCases</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>7600</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D3DF73AA839B4C42E0401F0A07996A55</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbZcuI4FH3vr3A5j5SRvMXgClQZSLqdzjYs6aRfphRZgNJGJpLsQL5+JBMTICRD54GidH2XcxedqxOBZqkTRkIQLmnGjLjXMv/1m2gceARa0Euw5bl+w2rabtMaB4nnNhzoPuDENGIhchIzIRGTLdOBtmtB23KcoW2HEIa+XW/4zd+mcUu4UK6VSh2axmKWMhGWYVtmzlmYIUFFyNCMiFDicBBdXoRKM0QVJrN9skJZBuTtqZTzEABcTwgmaYrrOJuBE7Clc5KIcEAnDMmck9eYiWiZr7bPz8/1Z7ee8QlwIIQANoHSSQSdHJntb5UxSWI2zlbnLmIZoxil9AVpUJdETrPEiNJJxqmczj5wbQMbatcWWWAL2x47MsFbgBLdgZ62QHKBLDFFduWsT8aEE4aJMerHLfPosA6ubIccMTHO+EzsnP8OEmEFSbM5SSxRZVahO9zjnnK1TwgOY4bTXNCCXOkxmSNMhHHDyZguLqhQw5cIo2y/sRDVhBH8Ny05AZs4FWywpzI9OiFCfqVfm71aeblFaU7ay+K68PwR7Y5ui+ThInHEUzPrBy8vx8+tEsKm8grUutWv591BXc/Vq9Hw9M51zsWDH0ww/qdZu+83/pz/atr++dly5A+HsON0IEW1u+Jq3K31US3+6WV2Jyq69/BieTkS7Hv3B7DTe/j9/hvp1/rp3Ju/5N3jm0jYSXQVP+a0EdgXBXNrix+/8pH87i98zEbcTqcvvfvlaBo7tcYV988Hp3338Yr/PnsYxNPbbwOwOM14B6Rg5k3zYsjjRustp80ctoUVHQzyh0eCZXXUoxH3jDPVLyQ/pxYtoYk1LlXDueYnIQmTZltbaVoJc0U+NAlVM1fnnts7C9woaqif1/WcU+hB+wxGMGg2jyPfr/hnhWIHYjdjY6pjaYZdzc/nAPEsFIQlhFtFluMpEeYnHntIIiNmfXUxMibIMFMM3uvaju9FXQcGp14Q+G7kNvxGxw/OgsjuHndM4yqT1+yaR2NJ+DZ7e1vs3SeYzinRFK/nXKhBF1KV5AkVuUzteoHqjORqCXDNw6HjNXwg6GyeEg0YzLIkT0l9Pp2XBQJi9e9YCItSGhxDWF7AD/Pb/VaVQukkVCsInUyHqHaSPXvIqzL5OONgM+PKfZQnVN8zVVfJKV4h2f70Ni56TtazolKyK8xr1YNNna+bul839b5uCt+bgk9KCHa7t46UFHQjbrX+1UZTnNeuhu8J1Z/qeVHk5bgFms+5cg9sAI/BgOBckfJymP0hDKxdgIP24Rr1TuS1fBtfLqdsIJEkM3U5jPJ4wGNoQIR+DMXqci8OfWlthVR1k2Qh98m6qXozacSfPqtwiLWeEt+ov+eMvyW+z9dGHJWnegFJyib6pLff8oOpwJlySxVdZ3zT+T4H+4JvC9dFXmORapoeckk+/mJoHm6ZCOMsZzLumaVgczeUOOVyTsI3pXduyv3z+qBYiA8fFHeXFwPF0jNkrnXp/ytbtBwXTJSVoCWWlrlQb2MVnE02dtErwP3rqNn5bB1tZ9J+J34v2ajp7n1o/wc=</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D3DF7BAE6D161DAEE0401F0A05993EE0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3DF73AA839B4C42E0401F0A07996A55</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StandardUserCreate" searchProperties="true" id="18a72797-2027-45e9-85b7-0a56b7464bed"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="52e223e0-f980-4dbf-831a-1507f22e7bf9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("StandardUserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("PrimaryEmail", null);
tC.setPropertyValue("AlternateEmail", null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="e659607e-fc12-4f2d-9e82-4aaf47cc2656"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("PrimaryEmail", callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("AlternateEmail", callTC.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Generate UserName" id="6d9e91c7-0cb2-4b78-8c8b-90f21e0fc4c3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def today= System.currentTimeMillis();

tC.setPropertyValue("StandardUserName","dtcapi_107_"+today);</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="94bfea08-7343-4976-9d8f-b2e682169840"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID",tC.getPropertyValue("NODE_ID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="965f75df-ced3-4971-a42c-c2bac4ca9818"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml;charset=UTF-8" postQueryString="false" accept="" sslKeystore="RET_concat.pem" id="a372c72c-5dcd-4c86-9878-00d314e73bcf"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml;charset=UTF-8"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:standard" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#StandardUserName}</GivenName>
		<SurName>surname</SurName>
	</Name>	
	<ContactInfo>
     <PrimaryEmail ID="645645" verified="true" verificationDateTime="2009-10-26T21:32:52" verificationEntity="urn:dece:org:org:dece:${#TestCase#NODE_ID}" VerificationStatus="urn:dece:type:status:success">		
	       <Value>${#TestCase#PrimaryEmail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#TestCase#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
      <LegalGuardian>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#StandardUserName}</Username>	
                <Password>${#Project#UserPassword}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:originalUri>https://qa1.p.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:16E4390ABB2449F6E05307991F0AB206/User</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="3c7cd9fc-67fd-431f-b921-7a4fc7a07505"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="6370e0a9-4593-4d6b-99e2-be61bb01e85c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def NODE_ID        = tC.getPropertyValue("NODE_ID");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#NODE_ID_RetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#NODE_ID_RetailerforDeviceAuthToken}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
		
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
		
		int lastColon = urlStr.lastIndexOf(':');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 1);
		useridfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_USER_ID",userid);
		tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);
	} else {
		assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
		int lastColon = urlStr.lastIndexOf('%3A');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 3);
		useridfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_USER_ID",userid);
		tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);
	}
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" id="cdb3a6ad-9af7-426b-a3b2-2d1f2cf20d23"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("UserName",tC.getPropertyValue("StandardUserName"));
callTC.setPropertyValue("UserPassword",tP.getPropertyValue("UserPassword"));
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:18230D4675D6E984E0533E991F0A5883/User/urn:dece:userid:org:dece:18230D467647E984E0533E991F0A5883</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_021_DTCreate_Forbidden_LinkedLaspAccountBindingLimitReached_for_user_without_ULC</con:value></con:property><con:property><con:name>sName</con:name><con:value>3_DTCreate_and_SAML_Exchange_FUNC</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E4D562F749DAA667E0401F0A059948E2</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=nVZtU+o6EP4rTP3olL5QoHSEGQW94lFRQA/65U5MtxBPm0KSluKvv0mBShG93Pupk+1m99ndJ09yxlEU2t4558AEiWkli0LKvdza1hJGvRhxwj2KIuCewN7o/O7Ws6umh7ZbtEq/19b+NmumY7stW3eDlqs7DQvrqGH7es3B2EYt2/HrtnTlPIE+5QJR0dZs06rrZkO3zLHpeHbLs+xqy3JftcozMC5jS5eqqW1AZbytzYSYe4axXC6ry1o1ZlPDNk3LmNzdjvAMIqR1ztYV5YlYZ+OPqz5gCENcxXFknBklnzOfeyMypUgkDDa5/O9ymYbZMqSPz8n0RCv2gt+nQZwvu4jGlGAUkg+k+nMHYhb7lfNwGjMiZtG3RVimCqxDhnVsOfREM8rQjgxUQsg40vkMWZtYQwiAAcVQeRr229rJcVPLt44ZojyIWcTLy/+GB2gKYTwHX+fbsjbQjg94oFOdM8Ben+Iw4SSFe0XWOcLAN9MEfHyoygODgGS3hEuCZlyhM3bh7S3X3eiRKXDxfwa0M5x1kGcUJtC5Pr1Ob1AsLk67lzfXjekbmdir0ap3wR7bOYBd59xQjHa93CNlQaL1jsHd641RXzUb3SHUaYt36x+DlLFH1HsZTbPBxAqvJsn9y+1t3YBR8oyyVtBo/kLx3c1bfcjTq0ejeSpm02D8GGVi/j4lL+Gkm3I3SJbZ+OV9Och6j/70LXoXA2K/zsPVq7NYPLlvdw/OtfF02ht/BOliGF9c/4qWwW9r4i5PF1n4iF9+AyPXzb+aMPE/Lq+M1cxtF+Xs4C/btmd+lLy9AxbbpaJBv1e5klNC4mcxUxbi60Hu6s2V+HABVGgdtUtph5dIuSO+J2e4XluuXTN7TqPZsJuXLde5NOu12mWrZV2Z53XXrW1FZo1iD2I3pgFRuZTkrmnzM0AceRyoD0xP40QqHdd+iNhDAlX6dCgPQUw5jGMpz9astnpfUOzHS/MPW7Ss1Fqi90VTq9zHYkAH7DwQwMqS3CxJ8hAwmRNQuq1ozSWvuZCtWKA0EaFVTVGVQiKVnSmR9WzHrRucRPMQFFAjiv0khOp8Ns8bY/D119YR5rl1eDnOD9u3Ze3/23ZA+vhEOXBVywXIKcKBu8XcFvJtwZa5W/A2/HniE3WuZDsFI3iNpPzrkyWKHgVFZEVbyIXnvqEU1dgvqEjkpwQXPC9uayni8th3tuNYIKu6qCZpmuQTcJyawWR4Q6qcZYwAJ1KVVuP4D1CjCGEcdQUUqPcyF/YyvkTM6EggAZGkSyVfHnHnj4CrO78vaZ4d+6AopZR9E5CJQ7ZuKN8rCvGPTxrsYeUnzQ/ys4yZ/zmuA7F28sg65ZUvCJ2qlZL/1TekwLEMS6RwxWw3+KEAh5KXjUWTCyxCsuktEfD9n4pSpLaGMI4TKvo9LTfsqmSOU6zm4H06fQmTC3HxMiP//jTTSU4BDPI9x0keX12wnuI/ne4o7SbpQbGt9xo/iW0ZXeeL+atlp0/7HO/8Aw==</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">18230D467647E984E0533E991F0A5883</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE4D562F749DAA667E0401F0A059948E2</con:value></con:property><con:property><con:name>StandardUserName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dtcapi_107_1433910787652</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:18230D467647E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:18230D4675D6E984E0533E991F0A5883</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">test_1433910787633@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">test_sts123@uvvutesting.biz</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="BasicUserCreate" searchProperties="true" id="f1fef79c-b667-4836-941e-9f0ad3c64a59"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d1e45130-3742-41e3-b20f-423daa8199e9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("BasicUserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="5211c73f-facc-42d7-b63f-397ad3edae67"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("PrimaryEmail", callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("AlternateEmail", callTC.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Generate UserName" id="b9d3689c-0f14-4f44-a37c-e4545ef15397"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def today= System.currentTimeMillis();

tC.setPropertyValue("BasicUserName","dtcapi_107_"+today);</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="2ec6ba8f-876d-4989-8797-4498e00f8945"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID_",tC.getPropertyValue("NODE_ID_"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="845b19f3-7843-4711-9c75-661566726f31"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml;charset=UTF-8" postQueryString="false" accept="" sslKeystore="RET_concat.pem" id="d59005d3-70d5-4215-bb7e-c8b0f7950974"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml;charset=UTF-8"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:basic" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#BasicUserName}</GivenName>
		<SurName>surname</SurName>
	</Name>	
	<ContactInfo>
     <PrimaryEmail ID="645645" verified="true" verificationDateTime="2009-10-26T21:32:52" verificationEntity="urn:dece:org:org:dece:${#TestCase#NODE_ID}" VerificationStatus="urn:dece:type:status:success">		
	       <Value>${#TestCase#PrimaryEmail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#TestCase#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
      <LegalGuardian>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#BasicUserName}</Username>	
                <Password>${#Project#UserPassword}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="7e8080f7-3012-4eb7-851e-d98f60b446f6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="beb2ac2e-14f4-468f-95f8-1f902c2072a4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def NODE_ID        = tC.getPropertyValue("NODE_ID");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#NODE_ID_RetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#NODE_ID_RetailerforDeviceAuthToken}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
		
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
		
		int lastColon = urlStr.lastIndexOf(':');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 1);
		useridfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_USER_ID",userid);
		tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);
	} else {
		assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
		int lastColon = urlStr.lastIndexOf('%3A');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 3);
		useridfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_USER_ID",userid);
		tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);
	}
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" id="6bfc8d3c-c21f-4bc0-8d7c-78a2b7d2dca5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("UserName",tC.getPropertyValue("BasicUserName"));
callTC.setPropertyValue("UserPassword",tP.getPropertyValue("UserPassword"));
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:18230D467509E984E0533E991F0A5883/User/urn:dece:userid:org:dece:18230D46754BE984E0533E991F0A5883</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_019_DTCreate_Forbidden_user_is_basic_and_affiliate_node_is_lasp:linked</con:value></con:property><con:property><con:name>sName</con:name><con:value>3_DTCreate_and_SAML_Exchange_FUNC</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D8D0BEDF02E3C4F5E0401F0A07997056</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+o6EP4rTM/HM6UvgNCOMIMC156jooAe9cudkCwQbZPSpLz4629SoFIUL/d+6mS72X1298mTnAsUha7fFgISSTkrraKQCT+zNo00YT5HggqfoQiEL7E/bN9c+27Z9tFui1EKOk3j74pNcN11xyZxGsSsjj3PbHgeMT0M2B03xu641lCuQqQQMCERk03DtZ2aaZ+Zjj2yq7575lfrZbfmvBilR0iEiq1cyraxBbUSTWMmZexb1nK5LC8rZZ5MLde2Hevp5nqIZxAho3W+qShLlLS2/rhMAEMY4jLmkXVuFXzOifCHdMqQTBPY5iLHctmW7VnKhwg6/WHke4EEbMKz5SVinFGMQvqOdH9uQM44KbXDKU+onEVHi3BsHdiEFTaxU2U/DKsI7cRABYSJQKaYIWcbawATSIBhKD0Mgqbx47SpZVtHCWJiwpNIFJf/DQ+wBYQ8BmKKXVlbaKcH/KJTrXPAfsBwmAq6gFtN1hhhENtpAj49VOkugQldXVOhCLoSGp21D+9guelGh05ByP8zoL3hbII8ojCFFgku6TV+fVqOXhfvT223g9O3+1m3ffHroZkB2HfODPloN8sDUuYk2ux4pPe3V7g/T+5m79wiVw/BtB9Y3XZvOHt+efPGzyMWMvpX/368fnip89ceiWFoDec96EWj5Oc7ckeLp4urs5ck+v08eKnO3XVtckH7o+s/tbj/K/jDu0/8yRq/cL763X/sBewSV+LpzR1vrDAfIdKHyd1o8TgY1Gvd9XSyxsvkcRkvJLHbPyUjsb1K6s/y8v562czL2cNftO3O/DAdvwKWu6WmQdAp9dSUkPxezLSFEnOSufqxFh8hgUmjpXdp7fBTJXeU+GqGm7XTcCt2p3pWr9ntrteodu1apdL1PKdnt2uNRmUnMhsUBxAvOZtQnUtL7oY23wPEkS+AEUjMBU+V0gnjm4gdJFEpYAN1CDgTMOJKnomLOAhYvr7NptKTq7jihbbqvFG65bLP+kl7IiEpSnK9IMkDwDSmoHVb01ooXgupWjFHi1SGTnmBygxSpeyJFlnfrTZqlqBRHIIGakWcpCGU41mcNcYSm69rIiwy66A7yg7b0bIO/+06oHwI1Q5C13IBaorwxd1S2RVytGDH3i94F76dEqrPlWqnTCjeICn++mCJpkdOEVXRDnLueWgoRLUOC8oTkQXFOc/z21qJuDr2rd045sgpz8vpYpFmE6hWK1aiwltK5RxrCDhVqrQe8TdgVh7COukKyFEfZM7tRXypnLGhRBIiRZdStjzhzh+C0Hd+oGi+OvVBUUip+iZhJb+yXYbqvaIRf/ukwT7Wfsp8pz5LnpCPcX0Ray+PqlNd+ZKyqV5p+V8fIQXmKixVwsWT/eBfBfgqedGYNznHIhWbxqmE439KWpGaBsKYp0wGHSMz7KtkhlOuY/A/nD6FyYQ4f5nRf3+amTSjAAb1nhM0i68vWF/zn033lHab9IjYet+JbRFd65P5s2WvT4ccb/0D</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>18230D46754BE984E0533E991F0A5883</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8D0BEDF02E3C4F5E0401F0A07997056</con:value></con:property><con:property><con:name>BasicUserName</con:name><con:value>dtcapi_107_1433910602943</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:18230D467509E984E0533E991F0A5883</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433910602921@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:18230D46754BE984E0533E991F0A5883</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserGet" searchProperties="true" id="e2edb44b-f945-47e6-93f8-ba64b6249b6c"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="dafb902f-b7f0-4d35-aa9a-ac87bcf65872"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="e097b613-5371-48d4-a4ca-67f8f1fc33c0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("UserGetResponseType"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="1eea27c3-d8a4-4dd0-b6c0-2b9a1ab1ace7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID_",tC.getPropertyValue("NODE_ID_"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserGET");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserGET" id="b21418bc-ad6a-4743-a78d-fe2c03f1b1d9"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserGET" mediaType="application/xml;charset=UTF-8" id="86860311-fe06-418d-9e53-0c4d81aa0896" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="ec0dd296-3d8c-4416-8d9d-183db468c7dd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserGET');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="3ca10c2c-3b9f-4540-82a8-a36f928ff03a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
//if (XMLbodynull) {
//           assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
//} else {
//           assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
//}
 
//Location Header
if (httpLocationHeader) {
      assert context.expand( '${#TestCase#httpLocation}') != null;
                 
} else 
{
      assert context.expand( '${#TestCase#httpLocation}') == "";
}
 


 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {      
    log.info "response body validation completed."
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>DTCreate_with_ULC_for_RTL_User_created_by_node_PORTAL_ULC_Deleted_for_RTL</con:value></con:property><con:property><con:name>sName</con:name><con:value>COORD-155</con:value></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:securitycontext:unauthorized">
      <Reason Language="en">The request is not authorized.</Reason>
      <OriginalRequest/>
      <ErrorLink/>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DC2F5A7DD002454AE0401F0A0799394E</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DC2F5A7DCFDE454AE0401F0A0799394E</con:value></con:property><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=nVZdc9o6EP0rjPuYMZY/wMYTmHEwpE4hKR9J077cEfICSo1MLBlIfn0lE1wgJJd7nzxar84e7a6O9pLjRWL5AeeQCZqyymaRMO4X1qaWZ8xPMafcZ3gB3BfEHwX9nm9VkY93W7RKFDa1f7BLoGG5Uz123bruAICOp3WsO8RGpge2ixGSrpznEDEuMBNNzUJmTUeWbjljE/mm7ddQ1XNqv7TKA2RcYkuXqty1JbXhTW0uxNI3jPV6XV3b1TSbGRZCpvHY743IHBZYa11uT1QEylpv/qQaA4EkIVWSLoxL48DnMub+iM4YFnkGb7Hij2IhAzUM6RNzOvuilXshjtg0LZZtzFJGCU7oK1b56YOYp3ElSGZpRsV88eEhTKSAddgQnZgO+6IZh9TOBDpgmHGs8zk237CGMIUMGIHK/TBqal/Oq1qxdZxhxqdptuCHy//GB9gKknQJsc53x3qjdj7giUy1LoH4ESNJzukKblWzLjEB/lZNIOdDVb5nMKWbHuWyQTdcsTP26R0tt9kI6Qy4+D8F2ivOFuQBJzm0kv7Xh/vJC4qGDnp6eIy7Ql7Rzjr4+eo0CwL7zoWhLO12edSUZRNtd4T4eZz8cLMH0ru7NnOvsXjp13rBvF4fbZLb+zlt35jpb0S+jnvPF9njAIfhRQ/P8Zy8DOLB+rpjx79Gov+1h4PNj4xM68zp1NwojTtiubp5+nbvpZHDf94/PL0SIeKBPUuurp3xjWs+hX02XDXE4Lp2E03g8cK9Cue3m6jxLfkZXtRup5bRJZ1n5l7MZ3eTwWDQLI+zx//Qtrvzo3zyBETslqoNorDSlVXC4nMxUxYa69PC1V8q8eECmNBaapfSDj+XckdjX9Zwu0bd0G47QTsIGoFlu2EH1WzkNhpmFwW1oNbZicyWxRHFdsqmVMVSkrttm88JkoXPgcWQ6as0l0rHtU8QQyxwJWJDeQlSxmGcNrUJnjQcbNd1NLU83XE8rOOJ5+l1bDvmBCNSqze0ym0q7thdFkwFZIfqbB+o8xAIXVJQEq46nMsW50Jm5RmvcpGY1RWuMsilyGdKb33L8WoGp4tlAoqzsUjjPIHqcr4scmTw7dfSMeGFtY3ana7XQV67Y7bdsN5BDlJ5RTWZXwtdFZfyw+Mf/9tlSvrEVDlwddArkNWGE2+Qszvlu2zUT75VO/ggj6m6fzLtIqNky+Tw199uUm1UttKwM95RLj2PDQeoxvGBykDxipLyPpSvuhR7KQ+tXa2ecfW5mq9WeVEdFyHLyCS8IdXQNEZAcqleL+P0NzCjhDDOeipK1keRS/shv1zM2UhgAQvZS5ViecZsMAKuZoNIXofNuYPHQUiZNwEbccrWTuRcoxh/OvoQnyg/af4uP+s0i/+W6wTWXhx5TjkaCMpmaqWeiZcPmoKkEpZKgUuzffBTAKeCHxrLJJdchOymSS7g4z8VpVxNDROS5kxEoVYY9tW04CleluD/dXoHUwh2OcHRfx/hdFq0AAE593Fa4KuH2Ff9z2Z7ivwW9IQodz3HqVu219gXZdfxGmVSDti13pnfW/bydNzjrT8=</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADC2F5A7DD002454AE0401F0A0799394E</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADC2F5A7DCFDE454AE0401F0A0799394E</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP2/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0FD3C4ACAA9A237DE05307991F0A5A5E</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0FD3C4AF84462389E05307991F0A7489</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserDelete API" searchProperties="true" id="6788c568-5dce-4798-a154-cf1817eb64ca"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2b525e57-a0ed-440b-bb16-63f441373f2c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="577b948a-6208-4637-8077-aff1ac7a76f6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="de5e315b-d479-4e72-b87d-7110e9a18ba5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID_",tC.getPropertyValue("NODE_ID_"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserDelete" id="3a18be4a-5062-40bc-87ed-fdebd70da6ed"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="DeleteUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserDelete" mediaType="application/xml;charset=UTF-8" id="86860311-fe06-418d-9e53-0c4d81aa0896" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="bfe7d9cc-25a6-48b7-960f-008cd20506d5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserDelete');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="2c3dbe6c-4d1e-41d2-8c12-d45f200b889e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                //assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 


 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_006_DTCreate_Verify_UUID_status_for_deletion_of_user</con:value></con:property><con:property><con:name>sName</con:name><con:value>3_DTCreate_and_SAML_Exchange_FUNC</con:value></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D8410B6358BACFE4E0401F0A079949A2</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D84111534290CF09E0401F0A05993165</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynmcMr6CwRWo4pp4NzAk5LKTly0hy0aJLRlLNpCvX8mABxOSZffJpXbr9FF366ivGYgj0+0xhlKOKalt4ogwt7B2lCwlLgUMM5eAGDGXQ3fem9y5Zl13wWGLUvOGHeVvaAY6hCZQA8taqHbTclRgmkg1FrqxgE3Lb/uOcGUsQx5hHBDeUUzdaKh6UzX0R912jaZrWXWj7bwqtWeUMoEtXOq6sie1YR1lyXniatp6va6vrTpNQ83UdUP7a3I3h0sUA6V7vTtRESjt7v1h3UcQRRGsQxpr11rF59pn7hyHBPAsRftY/lexdE1va8LHZzi8Usq9yPdIQIvlABBKMAQR/gAyPxPEl9Sv9aKQppgv4y8PYegSWEUbqELDJleKVqV2IVCFYcqAypbA2GM9oACliEBUe3rwOsrVZVUrtj6mgLCApjGrLv8bH0RyFNEE+So7HGtP7XLAM5nqXiPoegRGGcM5mspmTQBEbF9NBC+Hqs1SFODNHWaiQTdMstOO6Z0sd9kY4hAx/n8KdFScHcgziDLUbT8N/ZYxnTnbN7/PwcsgnelB9O6HmHYKAsfOhaEs7W550pRlE+123L4u0hEE4c32B/7RmtJt8+YP81ffzBaT+etsYY4Ns7GhELXYvT8L3+zn28S7v532UQJv33om7Ifbm81K+3AmvXVj8jRt9z+ex/xuDTfBx8vSuA1aEzvMyYv+liTjEVvns9G7P6QzLzVBI7x5iRvb/JfxkPAsy+fvfMHmP7fen/ergK7m1i1HKy9PwvR+qsdPnfI4R/yrtsOdn2eLNwT5YSnbwBvWxqJKgH8vZtKCfTUoXN1Eig/jiHClK3dJ7XAzIXfYd0UNd2ujZZpjy2iNnf646Tjjkd6wrFG7bYz1ntUa9A8is2NxQnFASYBlLCm5u7b5niCMXYaIj1I1p5lQOqZ8gzgEHNQ88iAuASUMPdKOYuu2ZfnAUO0GNFU7sEwVtPW2uvCbhtNuGdCyhc5OKf9Jfqa9gKO0qs5ORZ0fEMQJRlLCZYcz0eKMi6ysQJ7xyKjnoE5QJkQ+lXrrmnaroTEcJxGSnLWY+lmE6skyKXKksd1XUIKssBpOyx6ZZnPgDKyh3jCL3A53ubUtxyku5ZfHP/13yJTw8bF0YPKgfSSqjc68QebhlJ+y0Tz7Vh3ge5mP5f0Taecphjsm1V+/u0m2UdlKD6PHA+XS89RQQdVOD1QG8nMMy/tQvupC7IU8dA+1WgGjvqpneZ4V5bFtS0sFvCbU0NDmCGZCvbaP9B0RrYTQLnoqStYnkUt7lV/Gl2TOAUex6KVasbxgNpgjJmcDT1yHzaWDRyWkyBtHG37ONojEXCMZfzv6QBdKP2Geic+apv7vcp3BOoojzilGA45JKFfymdh+0RSQClgsBI6mx+DnAM4FrxrLJJdcuOimRcbR139qUrk6CoCQZoR7Q6UwHKtpwZNvE+T+dvoEUwh2OcHhfx/hVFy0AERi7mO4wJcPsSv7n4RHirwPel6UneF3olxl1/1k/mw5ytNpj3f/AQ==</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD8410B6358BACFE4E0401F0A079949A2</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD84111534290CF09E0401F0A05993165</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:1822F318F7BF677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1822F318F77D677FE0533E991F0A38CB</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SecondUserGet" searchProperties="true" id="d8410cfa-10df-4c43-bbcf-24706e4b8d55"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e8c51681-f74b-46ad-8782-0fbde91b57c9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="88fea6b5-dae1-4bab-82d7-9f1ea3cfe4d4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("UserGetResponseType"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="fc001be8-fb6e-439f-9dca-ee445a4401b1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID_",tC.getPropertyValue("NODE_ID_"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserGET");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserGET" id="35eef7ac-4cdc-407a-a0e3-7d5583e4ab19"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserGET" mediaType="application/xml;charset=UTF-8" id="86860311-fe06-418d-9e53-0c4d81aa0896" sslKeystore="7600.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="841eccb8-a4ae-4f42-ace7-7868c166bcbb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserGET');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="62552c04-9a72-4429-ad31-91744e837c20"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                //assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                //assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 


 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>SEC054_COO_DelegationAndUserStatus</con:value></con:property><con:property><con:name>sName</con:name><con:value>ISC_TestCases</con:value></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>754</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>7600</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:securitycontext:unauthorized">
      <Reason Language="en">The request is not authorized.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/06/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD859377B3AB642F1E0401F0A07996476/User/urn%3Adece%3Auserid%3Aorg%3Adece%3AD3DF7BAE6D161DAEE0401F0A05993EE0</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/deceerrors/error/error_response.html</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D3DF7BAE6D161DAEE0401F0A05993EE0</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D859377B3AB642F1E0401F0A07996476</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc6o6FH7vr2DoYwe5KzLVGRQ9m27tDW3teTmThqhpMVgSFPvrd4KFqr0cd8cHJ4t1+dYl38o5BYvYcD1KUcpwQqTAb8n/Wc7UQU7dVBp1W1MsO4IKqFuR4mgmaEATmo4DZCmgNEMBoQwQ1pINTTcVTVcMY6TrrmG4mlbTmua/snSHUspdc5WaJkv5IibULcK25CwlbgIopi4BC0RdBt3QGw5crumCEpPcPt+iLAKm7TljS1dVYS1CEMUxrMFkoZ6rezrnEXVDPCOAZSl6ixnRlvxmu16va2uzlqQz1dA0TdWaKteJKJ6dyu2T0hhFAZkm23MXkIRgCGL8CgSoIWLzJJK8eJakmM0XX7jWVV0TrhWUQwXqFjmV1fcABbojPe2BTClQ6BzopbNbNEUpIhBJ49ugJZ8e18Gt7SgFhE6TdEEPzn8HCZEVipMlihRaZlaiO97jJ+VqnyPoBgTGGcUrdCnGZAkgotJ1iqY4H2DKhy+iUtF+KaflhCH4Ny05V3dxctjqJ5Xx8QxR9pN+7fZq6+UOxBlqP/z6nYXj6zAJ+q+bmZ114coY1J+Cs8G4VUDYVd6Cqlr9dj4c1Gqu3ow6F+a953XDs+xsNB70Lif5Kp+ouhVmz3ik3vduiOM8NUbr6wHpGtaF/rDkH1b3w9fVIKRXdv912lS99aXdX2eTk7v8lulZ3cx7zX8ewrrvP76Or3D/yoPj5195c3MzGF1Not8XsX1pvIy72o1xz2NGg2YyZBf3NJ7Hk8adNSE3r5vGSY7Di7PNNL6Mh3MK9ZclDVrvOe3msC8s6SDMHp8QZOVRjEbgS33eL8C+pxYhwZEyLVTdpeAnyhBhcltYCVpxM04+OHJ5M7dn3/T7jY7Xq/t6Xfe9Xk+zNL2veZrdbJr8VPLPFsUBxG5CpljEEgy7nZ/vAcKFSxGJUKqskgzOEZW/8egDBqSA3PKLkRCKRgln8F5Ha3S6um45dafT03y76zni12/4RtcwbVm6TNgVuUq9KUPpPntbe+x9iyBeYiQoXsw55YNOGS/JC1hlLNZrK1AjKONLIBU87BqWY6sUL5YxEoDVRRJlMaot58uiQCrd/hsKgLSQNuqaVlzAL/M7/FaWgutEWChQkUwH8XaiD3tId+0yk68zbuxmXLr3sgiLe8brylIMt0j2P72Pi5iTalZ4SnqJuVI92tT4uan5c1Pr56baR1P1mxKqh92rIkUrvBO3XP98o3HOa5fD9wJqL7VstcqKcWsIPk+5e1VXtboaIphxUt6MkmdE1MqFetQ+rFAfRK7k+/gyNichAwwt+OWQiuMRj6EQUfEYCvjlzo99ae2F5HVjKGefyboxfzMJxN8+q6ALhR4XX/O/dZJG7+36xNdOHJ4nfwExTGbiJLbf5oupgAl3izldJ+mu888cfBZ8X1gVucLC+DQ9Zgx9/UUSPNySAYRJRljgy4VgdzcUONlmidx3pQ9uiv3z9qDI6ZcPislwEHKWXgC50sX/r6zgYlwg4lYUF1hacs7fxjw4me3sojeAH9aR6XmO2exYXcuo1lGj2ax7tl0VcC+T9gfxR8lOTQ/vQ/sP</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3DF7BAE6D161DAEE0401F0A05993EE0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD859377B3AB642F1E0401F0A07996476</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateTOU" searchProperties="true" id="6a161020-0b13-4003-b25e-29f718f9e994"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="60e76d62-eb29-47e6-a920-ba51bbfe5661"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="0f3c0a92-994a-475c-95bd-84ee714b69bc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));

tC.setPropertyValue("expectErrType","SUCCESS");

if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:TermsOfUse");
}else{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:TermsOfUse", "UTF-8"));
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="15590368-524b-47c8-b442-f5affd1ee41f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID_",tC.getPropertyValue("NODE_ID_"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");

def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="700c8e27-53bb-450a-b200-caed98082eec"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml;charset=UTF-8"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">    <dece:Policy>       <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>       <dece:Resource>${#Project#TOUPolicyResource}</dece:Resource>       <dece:RequestingEntity>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:RequestingEntity>       <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>       <dece:ResourceStatus>          <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">             <dece:Value>urn:dece:type:status:active</dece:Value>          </dece:Current>       </dece:ResourceStatus>    </dece:Policy> </dece:PolicyList>]]></con:request><con:originalUri>https://qa1.p.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:16E4390AB5F649F6E05307991F0AB206/User/urn:dece:userid:org:dece:16E4390AB60249F6E05307991F0AB206/Policy/urn:dece:type:policy:TermsOfUse</con:originalUri><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="c19a8f90-4d3f-448b-81ad-81582e68e0bb">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_TOU');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="1c296447-91f9-4415-9ba4-6885a6b545f3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";


if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_004_DTCreate_Verify_UUID_status_for_deletion_of_ULC</con:value></con:property><con:property><con:name>sName</con:name><con:value>3_DTCreate_and_SAML_Exchange_FUNC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>18245C6DC8F71F28E0533E991F0A053B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>18245C6DC8F61F28E0533E991F0A053B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:18245C6DC8F71F28E0533E991F0A053B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:18245C6DC8F61F28E0533E991F0A053B</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZXzBXOwKVBFIJsyQwHDJhrxsCbkNmtgSsWQw+fqVDDiYhCy7Vakiare6T3cfHemKoyi0vTbnEAvCaCmNQsq9zNrUkph6DHHCPYoi4J7A3rh93/fssumhwxat1Os2tb/dKq7adtXRUeDPdSdwXd2tuUhHlTqqQL1ec3AgXTlPoEe5QFQ0Ndu0qrpZ0y1zYtY8sy7/ypW69ayVHiHmMrZ0KZvaHlTKm9pSiJVnGJvNpryplFm8MGzTtIyn+/4YLyFCWutqV1GWKG7t/XHZBwxhiMuYRcaVUfC58rk3JguKRBLDPpd/LpdpmK4hfXxOFt+0fC/4PRqwbNlBlFGCUUjekOrPPYgl80vtcMFiIpbR2SIsUwXWIcU6thz6TTOK0C4MVEAYc6TzJbL2sUYQQAwUQ2k66jW1b5dNLds6iRHlAYsjXlz+NzxA1xCyFfg6P5S1h3Z5wE861boC7PUoDhNO1vCgyLpCGPh+moAvD1UaxhCQtE+4JGjKFTrjGN7JcteNLlkAF/9nQEfD2QV5RGECre/8xa7C203j7TmAcR+NJned9K/xooF7zQzAsXNmyEe7W56QMifRbgevE7fRffo18TdDGAbDm7TSSF9c/7lW+9Fftd+CXv/1wfbD5RyxRvC0tmfzn9NpezC446tJivCgPZo8LhbDPx37ae6MxuNBlaexHf16Hj46XXdjPbG3Qa09QItpcD+fMpYs7+bboB9vv8PIqSHLn1y/0HramG5vf25m985wOjNmwWrTD3/jKQ1fZ7/tx9n6x93PWTMv5wh/0XY48+Nk/gewOCwVDXrd0q2cEhJfi5myEF8PMldvpcSHC6BCa6ldSju8RMod8T05w93aathOtVPrdhq3devWbtyY1UrlxnWtW7Mt/70+iMwOxQnEDqMBUbmU5O5o8zVAHHkcqA+xvmaJVDqufRGxiwQq9ehIHgJGOUyYlGcLp1uHAl1WeCQsd7l5jRITB2+VUCs9MDGgg7gdCIiLouwWRHkEmKwIKOVWxOaS2VzIZryidSJCq7xGZQqJ1PZYyaxnO42qwUm0CkFBNSLmJyGUV8tV1hqD735tHWGeWUc3k+y4nS3s9NuhB9LHJ8qBq1quQc4RPtwuNa96KORswZZ9XPAhfDvxiTpZsqEiJniHpPjpnSeKIDlJZEUHyLnnqaEQ1TgtKE/krwnOmZ7f11LG5cFvHcbxiqzyazlZr5NsAo5TMWIZ3pA6ZxljwInUpe2EvQA18hDGRZdAjvokc24v4kvEko4FEhBJupSy5QW3/hi4uvV7kujppU+KQkrZNwGp+MzWCeWLRSH+8lGDPaz8pHkofzYs9t/H9UmsozyyTnnpC0IXaqUugO0ZUmAmwxIpXSw+Dv5ZgM+SF415k3MsQrJpngg4/6WkNKmpIYxZQkWvq2WGY53McIrtCrx3pw9hMinO32bk3x9nOskogEG+6DjJ4qsr1lP8p4sjrd0nPSO3ta/ktoiu9cH80XLUp1OOt/4B</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:18245C6DC8F61F28E0533E991F0A053B/User/urn:dece:userid:org:dece:18245C6DC8F71F28E0533E991F0A053B/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateULC" searchProperties="true" id="24560bf5-fc59-4a07-8c43-1c722723918a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="83587755-8556-4d0e-ad3a-f9983063e7c5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="1e8c9abd-32c2-464c-a39f-431309d2882f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));

if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:UserLinkConsent");
}else{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:UserLinkConsent", "UTF-8"));
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="e3bf18dd-a921-4b0e-a4ba-3709cf12e678"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID",tC.getPropertyValue("NODE_ID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_ULC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ULC" id="bf0c5b31-f984-4811-bb24-5de89d45589c"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ULC" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml;charset=UTF-8"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#NODE_ID}</dece:RequestingEntity>
      <dece:RequestingEntity>urn:dece:org:org:dece:LLASP</dece:RequestingEntity>
      <dece:RequestingEntity>urn:dece:org:org:dece:DLASP</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="d3fe810c-9d7c-4100-854e-782ec9880d5a">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_ULC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                               contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="3b77b212-3f1d-4cb3-9416-718af90de0fa">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMjY25uIKVDEQAjMh4RZC8rIl5DZoMTJYsjHz9SsZcDCBLLu8UGq3Tp++6Ej3DK08w24wBgEnPs3FK48yO7HWlDCgto8YYTZFK2A2x/ao0Xuyjbxuo+MWJddt1ZS/zAouFHVw1aruVtWiUS2pyLR01aoWHRNKM92pzIQrYyF0KeOI8ppi6AVL1QuqYY71qm0atlnN60bpQ8lNIGACW7jkdeVAKmY1ZcH52ta07Xab35p5P5hrhq4XtGnvaYQXsEJK/X6fURIoqB/8cd4BDJ6H89hfafdaxufeYfaIzCniYQCHWM61WLqmVzXh4zAy/6Gke8HpUtdPlk1EfUow8sgfJOvTA77wnVzDm/sB4YvV1SQKugRWIcaqKCX9oWhZajcCZRgGDKlsgQoHrCG4EADFkHsddmvKj9u6lmwdB4gy1w9WLLv8b3yARuD5a3BUdkzrQO12wAuVqt8DtrsUeyEjETzLYV0jDOzQTcC3Q+X6AbgkfiJMDGjMJDvtlN7Zcl+NFpkD4/+nQSfN2YNMkBdC3e2Hcaj9jEfTZfTOoUxapQ5q3T3OTL2WEDh1Tgxpa/fLs6FMh2i/ozsbd9q76Zj2+oN5tOzwVzSsTJ8ni0Y/WL6th513OphuJ9QNdr3Fx0dnNmg3Jh9bF/qvE+5O7ui6WdwN4vHS2HXv8Hg68Byr/NJaTn6NTW7gd80y/kyfyNu7Mdtuqrj74jnQRBDG+tPv9sx/eexE+MOdWr3XOzJ6iydGJ/bfeWNSYo/hZPNrMHSiynPnYes1cS1N54R/1nY886Nw9jdgflzKMei2cm3RJcS/FzNpIY7qJq72WooP40C5Upe7pHbYoZA74tiih/u13iq2y+JnWYVK0WoWHnTL1MvVaqGtNwyrYR1FZs/ijGLTpy6RsaTk7sfme4J4ZTOgDgRq5IdC6ZjyDWILcZTr0qE4BD5lMPaFPBdoifpeVNls3bAYGLjqLNxy2SBCvp99/kJfgobLIchocsHIaPIQMFkTkMIt55qJwWZc1GKDopB7hXyE8hRCIe2BVFnbKFYsjZHV2gPJVFv5TuhBfr1YJ5XR2P7fUBFmiXX4ME5O29W8zr8dSyB8HCIdmMzlJ4g2woXLxTgmcj1h6zThI3wjdIg8WKKePCB4zyT76XNM5HykMyIyOlJOPc8NGVTtPKE0kBMRnA56el0LFRfnvn5sxwblN/kwisKkAWWpb4GA12SKmm5oI8ChUKbd2F8C1VIU7aZrICV+Fjy1ZymGfEFHHHFYiYnJJcsb7v0RMHnvd8Wox7c+KjIhRek4xPySremJN4tk/O2zBttY+glzX/xt/cD57NgFrJM4Ik9x7XNC53Ilr4DdlbnAvoAlQrz84BT8EsCl4FljWuSUCxcDNQs5XP+Sk6pUUxDGfkh5t6UkhlOlTHjy3RrsT6cvMIkYp68z8u/PM5UkI4BBvOkYSfDlJWvLI0DnJ2p7CPpVcM1mxWyZQnDLp4JbNkvttCgZdvUv5q+Wkzqdz3j9Hw==</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_008_DTCreate_retailer_Grant_blocked:tou_full_user_with_ULC</con:value></con:property><con:property><con:name>sName</con:name><con:value>6_DTCreate_RTL</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0D4F7777551845C1E05307991F0A25A5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0D4F773C83D345C7E05307991F0A736F</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value>close</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D14403889CD0F3ECE0401F0A07992161/User/urn:dece:userid:org:dece:D14403889CDFF3ECE0401F0A07992161/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>policyId</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">879</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3DD6C150D6CC4DCE0401F0A0799470D</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE45D4D6F9253AED6E0401F0A07991A6C</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE45D4D6F9265AED6E0401F0A07991A6C</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0D4F7777551845C1E05307991F0A25A5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0D4F773C83D345C7E05307991F0A736F</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMAC" searchProperties="true" id="c5b92648-ee03-471a-88d8-cac9688a743c"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" disabled="true" id="429481b8-0630-4d1c-9a23-92c0e32e3139"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" disabled="true" id="80acfd3b-ad3d-4ce1-950c-4d83c26fc346"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));

if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:ManageAccountConsent");
}else{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageAccountConsent", "UTF-8"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" disabled="true" id="0d09b06f-05be-4242-80ea-eb783de432dd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID_",tC.getPropertyValue("NODE_ID_"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MAC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_MAC" disabled="true" id="f24d5af2-5034-4f1f-af46-4c2ed6b20500"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_MAC" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml;charset=UTF-8"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageAccountConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:accountid:org:dece:${#TestCase#NODE_ACCOUNT_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#NODE_ID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" disabled="true" id="9ecabb65-ced2-4b78-ac1d-e5dc8ef46eb0">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_MAC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                               contentLocation = value[0];
                                                
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" disabled="true" id="131a2126-7abe-411e-9302-01848dca4e11">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZkqrKEn33KwzPo2EziCBGd0cUAo44gePLDSwKRJmkQNCvv4W2brt397773CetrKzMlQNZq16x6XtsC2CM4sQNg3JPfqv8p8nZTbu+5WtQbIg1TmTF2pbmYc0yBZpDvA23datS7mGcol6AEzNI3ioszdRrdLPG8gYttGi+RbMvPCdsKuUFijExTVRe6Eo5970At65u3yppHLRCE7u4FZg+wq0EtnSgDVtEs2XeMVXeX28orw7j912SRC2Kgi8Wgsjz4AsMfeqV+qTzauGW7jqBmaQx+vBp4bfKx9ksy16y+ksYOxRL0zRFixTRsbDr/FN5L90PI6sX2OFt3TaDMHCh6bkXswCloWQXWmXgOWHsJjv/B9MMxdCF6RrKYQ0yXPBPhfrl4IruLy19Ahljs4Z3JnM3NkM2ilEAUXk+671V/vm7Ct7OGrEZYDuMffxl/e8goeCEvDBCVg3fI7uj+3uL36Tr/RXBVi+AXordExoVbRKZEOHyJEa2mw9dTJrPwuVr+cs5vncYgv+mJK/UM04Cm/omM7LrIJz8P/V6rtXNysL0UvRuzoVjdz4YNaHDeOFWto6x19f8aLLk3q4QnpVvoB6l/lh/bdRHX30cSlfJcNs4bJ1mUzxcjvKMSwwW05t11wtGoeG1bVi/6NPRBdFiO5qoi8XJHML+QdZ4qS9Wh1Vjm62ALvbZfF6qNhf9tCmzkW42zuJFNbP0DMZzoQOc3DvGyiyOqcmaqocACQOL3sOgM+iqSwosubmAFwcqS1iu0z3Qi8GstG7vOca0usdFYNOdzo7dHd5+xfQcQxHXAJ2vQRb/Vw1alM3EfCzaxaSwyeeZoHet12tX5XYboLYDsp4EnJ40vICR5ByOu4PbETNaAtO5CmRw1mYgk521vJhOB0pmLRbeZtFTVUmbcVkXrOUS2ZCVfCFvVn3aXG6iNavSG12SrNUs3Nb7kdU9ZN0dHGmGlo2M3lnbK/nIUOjlVebkZH3R9hozNub10nIvidpMyeTs6lFWst1os5xF67mYwYsy1QDXAcxcae+0ruEvGFif7eBeGWrgcJVLO629WGi5YoBJSXJGCxKb0VY3EfStaOt7uyfjXWLcsDqL87bjpZuLstfaSqetHzt6b1uXp0ofzNbz7XJxMJfqqQS7I7C9e3QbrrkKM2fTzOTpuj8IN73dCY7AVJGkKSDpooHW6/RB2JGAxgE3v7T3Eh+2LTWj+iwuVUWvw6/O7nGFzQ7tmUyzyayHS35y5GUlqG4G6Xa/03YrdVwd6NZpLibiZY1P1RNvugzMI3u6UrrJILe7U720ncj5CnarltOnvIuoxprQB/HlvPM0Z5Ys+TE+b13bXkqrMecJtqfVZ5Ht2dEZV41weohpXkJ1llqfT4OkBBxNAqCzn++lqSY1i6RavWy61iQTqEqSgsueTQbs4tjvnjy4roMwHyzH+8NHYSw5UyQqmyqkrZRSUwZWUYSuPlfUPZhLjhNLjqJKUyiD6bo3yNYkX/MuUf6aR/WaR0eRgFLfAF7slupzWkzGic5x4BxI80AVd9oxX1q8TwtHpAz1UcRlGh7ZwWYZHjTfjedxqs8Hg9Ew3xpp57Ans8qm9cGpvikpp0ME3NHA2B3kUDYn0XqdRNUAxjDpRb7Wyy/jDd433a1P96sNRprQMhTYub/N5h1T2QxiR2cG3VkwqQtiCaf2uetX981sWTV0PhKsdmDL5zO1iRd0CEJVnDWOVs6yh908G/KZ3QeHrcmOck+UzqIy2Bgwm00HS92vNkqN03Do0xeD4kbRONM7GadMp9W6JRldA0exu06bTh6PA4tdmwl/2tAL3o28g8imB4OL6gvHJ8WanKxI0CalKbeCG98RItinZtQJKII97HXO24t5ifwxvA3Qr9PhIbzND+p5snwaPXfSoZNuRTC5L4sLqCeXVXIrmMmfCUwhca2afVVtRQULwgkKksp7caogL62UUBzXapEr47ZWOLnBs6rAiYoCeF5QaI5mVBrQDVHkmgp7Zzk3FF8gtsPAdgtfBY+73VJ/Bgj9FkaBheLaKUzhDuHKHywW+Sr3ghm5fsMAIyMkPLFdByLfENQmx4htuc0IKsOrggJUUWQUoDCV8ihMxsE4BnaC4k8ckaE/ccQZgm7kooJIFrcpJtcpTkhKjuYpTTzm5WS+BCglVDMu2F6L5ZoNCrt+5KECMOWHVuqhl2gXXRNE4dsvWzMhvkoFnqav1/yP8X3du6eC6FhuoYCLYCREyol+Y7uNVuMeyc8R158jvpsHqeUWtznJaxK78Ibk89avdin65NErRUh3zA/Vr4JPZqmvET08WScXPjr+8RggXJKwjfd7QY7my/ElPZ3SawmEgknFxDzFULRA6QimhA6djfCAAuphgvorJvpA/cXzQ/4ZX5rsAj0hX7NPGqZ8Xf7FM0RHuHiG9EjD53/7xvnkkuQtQXnynaztkddKgfiPDxrYgoUeEU/ITxbGvwL/ztaTHxJnMb7cwClWBe88/9AVMCRmXTLCwvjZ+HcGvnP+WfhI8gNLQrppmybo551yMZveKiaEYRokPblyFTzPyyvO5Byh1i+l38xcmd8Hlc/xj1R+pQ11Mrl8s/LQdf+3cs29tgtE5BR2r1jeKjl5lRLngfM0nz8Afj+iZfCnEf05kvffxL9LnnL69Xt4/y8=</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_12018 - STSCreate - retailer - saml2 - Different users on same account share same node accountID - P0</con:value></con:property><con:property><con:name>sName</con:name><con:value>2_STS Create Tokentype saml2 - Payload</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E4D562F749EEA667E0401F0A059948E2</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E4D562F749DAA667E0401F0A059948E2</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>829</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE4D562F749DAA667E0401F0A059948E2/Policy/urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE45C6DE4D4DBC56FE0401F0A05994A49</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\STSAPIProjects/7600_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE4D562F749EEA667E0401F0A059948E2</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE4D562F749DAA667E0401F0A059948E2</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMUC" searchProperties="true" id="ffeba788-2769-4376-a264-2ae7849c6ff6"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a232a97e-45a0-4c0c-b52b-7f3243ff2fa5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="adbf2ad0-7068-4db1-aa98-f6fbd956b84e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));

if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:ManageUserConsent");
}else{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageUserConsent", "UTF-8"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="d0e6172c-f3f6-474f-9e4f-3b5ed17fa748"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID_",tC.getPropertyValue("NODE_ID_"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MUC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_MUC" id="934c3ae1-56a5-451c-80ce-0c0056d8ca91"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_MUC" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml;charset=UTF-8"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#NODE_ID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:originalUri>https://qa1.p.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:16E4390ABB2449F6E05307991F0AB206/User/urn:dece:userid:org:dece:16E43398C7BC5576E05305991F0AC9D4/Policy/urn:dece:type:policy:ManageUserConsent</con:originalUri><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="c7056a3e-ada9-4e1d-890b-be0af83b8e5d">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_MUC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                              contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="d7dcd6d4-3632-4817-90d6-e0ff4eeeb306">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+o6EP4rTP3olL5QoHSEGQW94lFRQA/65U5MtxBPm0KSluKvv0mBShG93Pupk+1m99ndJ09yxlEU2t4558AEiWkli0LKvdza1hJGvRhxwj2KIuCewN7o/O7Ws6umh7ZbtEq/19b+NmumY7stW3eDlqs7DQvrqGH7es3B2EYt2/HrtnTlPIE+5QJR0dZs06rrZkO3zLHpeHbLs+xqy3JftcozMC5jS5eqqW1AZbytzYSYe4axXC6ry1o1ZlPDNk3LmNzdjvAMIqR1ztYV5YlYZ+OPqz5gCENcxXFknBklnzOfeyMypUgkDDa5/O9ymYbZMqSPz8n0RCv2gt+nQZwvu4jGlGAUkg+k+nMHYhb7lfNwGjMiZtG3RVimCqxDhnVsOfREM8rQjgxUQsg40vkMWZtYQwiAAcVQeRr229rJcVPLt44ZojyIWcTLy/+GB2gKYTwHX+fbsjbQjg94oFOdM8Ben+Iw4SSFe0XWOcLAN9MEfHyoygODgGS3hEuCZlyhM3bh7S3X3eiRKXDxfwa0M5x1kGcUJtC5Pr1Ob1AsLk67lzfXjekbmdir0ap3wR7bOYBd59xQjHa93CNlQaL1jsHd641RXzUb3SHUaYt36x+DlLFH1HsZTbPBxAqvJsn9y+1t3YBR8oyyVtBo/kLx3c1bfcjTq0ejeSpm02D8GGVi/j4lL+Gkm3I3SJbZ+OV9Och6j/70LXoXA2K/zsPVq7NYPLlvdw/OtfF02ht/BOliGF9c/4qWwW9r4i5PF1n4iF9+AyPXzb+aMPE/Lq+M1cxtF+Xs4C/btmd+lLy9AxbbpaJBv1e5klNC4mcxUxbi60Hu6s2V+HABVGgdtUtph5dIuSO+J2e4XluuXTN7TqPZsJuXLde5NOu12mWrZV2Z53XXrW1FZo1iD2I3pgFRuZTkrmnzM0AceRyoD0xP40QqHdd+iNhDAlX6dCgPQUw5jGMpz9astnpfUOzHS/MPW7Ss1Fqi90VTq9zHYkAH7DwQwMqS3CxJ8hAwmRNQuq1ozSWvuZCtWKA0EaFVTVGVQiKVnSmR9WzHrRucRPMQFFAjiv0khOp8Ns8bY/D119YR5rl1eDnOD9u3Ze3/23ZA+vhEOXBVywXIKcKBu8XcFvJtwZa5W/A2/HniE3WuZDsFI3iNpPzrkyWKHgVFZEVbyIXnvqEU1dgvqEjkpwQXPC9uayni8th3tuNYIKu6qCZpmuQTcJyawWR4Q6qcZYwAJ1KVVuP4D1CjCGEcdQUUqPcyF/YyvkTM6EggAZGkSyVfHnHnj4CrO78vaZ4d+6AopZR9E5CJQ7ZuKN8rCvGPTxrsYeUnzQ/ys4yZ/zmuA7F28sg65ZUvCJ2qlZL/1TekwLEMS6RwxWw3+KEAh5KXjUWTCyxCsuktEfD9n4pSpLaGMI4TKvo9LTfsqmSOU6zm4H06fQmTC3HxMiP//jTTSU4BDPI9x0keX12wnuI/ne4o7SbpQbGt9xo/iW0ZXeeL+atlp0/7HO/8Aw==</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_021_DTCreate_Forbidden_LinkedLaspAccountBindingLimitReached_for_user_without_ULC</con:value></con:property><con:property><con:name>sName</con:name><con:value>3_DTCreate_and_SAML_Exchange_FUNC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>18230D467627E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>18230D4675D6E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:18230D4675D6E984E0533E991F0A5883/User/urn:dece:userid:org:dece:18230D467627E984E0533E991F0A5883/Policy/urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE45C6DE4D4EFC56FE0401F0A05994A49</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE45C6DE4D4DBC56FE0401F0A05994A49</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:18230D467627E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:18230D4675D6E984E0533E991F0A5883</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyGet" searchProperties="true" id="b27a26ae-b573-4ee1-a344-177663f00da0"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1b614380-9e45-46ac-b933-9a0364d9a8b0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
tC.setPropertyValue("policyCLASS",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="32faf642-d8b5-4e28-8bcc-ad2971256db0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("ResponseTypePolicyGet",callTC.getPropertyValue("ResponseTypePolicyGet"));




if (tP.getPropertyValue("versionMinor") == tP.getPropertyValue("versionURLEncode")){	
	tC.setPropertyValue("policyClass", URLEncoder.encode("urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"), "UTF-8"));
}else{
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"));
}

			
if (tC.getPropertyValue("expectErrType") == null ||
	tC.getPropertyValue("expectErrType") == "") {
		tC.setPropertyValue("expectErrType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="4ddad7c4-758b-4347-85c0-65673385fab8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID",tC.getPropertyValue("NODE_ID"));
//myTC.setPropertyValue("NODE_ID","DLASP");
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Policy Get");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy Get" id="506397ec-1663-4d1b-8741-a6264d044a76"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="UserPolicyGET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy Get" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#policyClass}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="187e1ee3-5e45-4e8b-9435-a29118f60287">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Policy Get');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}


tC.setPropertyValue("XMLbody", expXML);

tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);


 </script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="9a501983-ddd8-4f96-824a-3e9c292fdc57">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseTypePolicyGet}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
//Location Header
if (httpLocationHeader) {
      assert context.expand( '${#TestCase#httpLocation}') != null;
                 
} else 
{
      assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {      
    log.info "response body validation completed."
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return policyId" id="151b8ce3-35a3-471c-a0ad-40b2479c2550"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));
tP.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));


log.info tP.getPropertyValue("PolicyID");
//if(tC.getPropertyValue("policyClass")=="urn:dece:type:policy:ManageUserConsent")
//{
//callTC.setPropertyValue("status",tC.getPropertyValue("status"));
//}
//
//tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_USER_ID</con:name><con:value>D84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZSxfsMEVqPJCkiFDCIuTbDIvW4rcGDG2DJZMyHz9SgY8mJAsuy8hardOn77oSBccp4nlB5xDLmjGGps0YdwvrV2tyJmfYU65z3AK3BfED4PbkW81kY/3W7TGcNDV/u5ELrJIC+lt9DLTHdKx9Y7tWrqDzLbngtvCYElXzgsYMi4wE13NQmZLR65uonvk+sjzTa/pmc4PrfEIOZfY0qWJtB2pDe9qcyGWvmG8vr42X+1mlseGhZBpPN2OQjKHFGu9i21GZaC8t/MnzQgIJAlpkiw1Loyaz0XE/ZDGDIsih12s6KNYyEAdQ/pEnMZftGovREM2y8plH7OMUYIT+gur+tyCmGdRI0jiLKdinn6YhIkUsA4bohPTYV80o07tTKAaw5xjnc+xucOawgxyYAQaD9NhV/tyXtfKrfc5ZnyW5SmvL/8bH2BrSLIlRDrfp7Wjdj7giUr1LoD4Q0aSgtM1jNWwLjEBvusmkPOhGpMcZnQzolwO6IYrdsYhvaPlthoDGgMX/6dBB83ZgjzipIDeLPh2nWbBQ+tt8KdxfTtb3sXO9OHyr5vRc7ckcOhcGqrWbpdHQ1kN0XZH+GNCFihdvbnX9+Lr3WbxEAY39uLueYTssQjk+QhurkaG89Ue5TcM8n5o3E1Ch1qPi2e78/xwOR1b3F2srOdfP+x4nvDHp+vb4OfEfBreBKsRtFdR0hnm7Dre/DL763Y/tJ+9NR7D09e39Pu3YJZ9L8I+nrBlPI+Hg0GWj6PF95Slk5/jJxsNnjyB12gRf+O33SqdA/512/7Mh8XLAojYL9UYDAeNK9klLD4XM2WhkT4rXf2lEh8ugAmtp3Yp7fALKXc08mUPt2uzbTmtvjvot68888pqX6KWbV92OuYVCuS/f+xFZsviiGI/YzOqYinJ3Y7N5wRJ6nNgEeT6Oiuk0nHtE8QBFrgxZFN5CDLG4T7rarjd9kgHeTp5QS3dwfLPC8CLboEXyTPecdvQ0hrjTNyxuzyYCcjr6typqfMUCF1SUBKuJpzLEedCVmWF14VIzOYaNxkUUuRzpbe+5bRbBqfpMgHF2UizqEiguZwvyxoZfPtr6Zjw0mp6befSsty+17cHqGWVtR1sa+vYnlceyg/TP/62r5T0iahy4CrRP0B2G07cQWif5btquCfvqj18UERUnT9ZdpFTsmVS//R7mtQYVaM0vbzfU648jw01VOM4oSpQtKakOg/VrS7FXspDb9+rFTabq2axXhdlexzHNnIJb0g1NI0QSCHV6+0++wnMqCCMs66KivVR5Mpe51eIOQsFFpDKWWqUyzPeBiFw9TYYyuOwOffhUQsp6yZgI07Z+ol81yjGnz59iE+UnzRP5M9rlke/23UC6yCOzFM+DQRlsVqpa+Ltg6EgmYSlUuCy/BD8FMCp4HVjVeSKi5DT9FII+PhLQymXVA5CsoKJ4UArDYdqWvIUb0vwfzu9gykFu3rB0X9/wum0HAEC8t3HaYmvLmJfzT+LDxR5F/QDUXY/E+U6u94783vLQZ2OZ7z3Dw==</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value/></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_004_DTCreate_Verify_UUID_status_for_deletion_of_ULC</con:value></con:property><con:property><con:name>sName</con:name><con:value>3_DTCreate_and_SAML_Exchange_FUNC</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>837</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:18245C6DC9391F28E0533E991F0A053B">
      <PolicyClass>urn:dece:type:policy:UserLinkConsent</PolicyClass>
      <Resource>urn:dece:userid:org:dece:18245C6DC8F71F28E0533E991F0A053B</Resource>
      <RequestingEntity>urn:dece:org:org:dece:RET</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-06-10T06:07:18.000Z" CreatedBy="urn:dece:userid:org:dece:18245C6DC8F71F28E0533E991F0A053B">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>true</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:13BC58846BFA5DE7E05305991F0A40A4</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:18245C6DC8F71F28E0533E991F0A053B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:18245C6DC8F61F28E0533E991F0A053B</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>ResponseTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5935459c-5982-4cb1-9974-1d4d88038a65</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9bbb88e5-07dd-4d4f-ba3c-1c734ce9be3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STSGet - ReplacementTokenUri" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="065e2590-f2a4-42d6-ab2e-01670a218cf9">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="b6c4b52f-a007-453f-92ce-07b704f4b452">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("actionAuthHeader",null);
tC.setPropertyValue("actionIgnoreAuthTokenStatus",null);
tC.setPropertyValue("actionSkipNodeUserCheck",null);
tC.setPropertyValue("actionSkipNodeIDCheck",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("isDeviceFlag",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("authHeaderString",null);
tC.setPropertyValue("affilNODE_ID",null);
tC.setPropertyValue("assertCreatingNodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("stsIgnoreAssertTimesFlag",null);
tC.setPropertyValue("stsExpectedAffiliationListSize",null);
tC.setPropertyValue("expectErrTypeSTSGet",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("authHeaderValue",null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("rauthToken",null);
tC.setPropertyValue("stsaudienceIgnoreAll",null);
tC.setPropertyValue("stsaudience",null);
tC.setPropertyValue("stsaudienceIgnoreNodes",null);
tC.setPropertyValue("NODE_IDFULL",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("contentLocation",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="27758c53-5f8f-47d8-a192-e0c8df930ce7">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("assertCreatingNodeid",callTC.getPropertyValue("assertCreatingNodeid"));
tC.setPropertyValue("affilNODE_ID",callTC.getPropertyValue("affilNODE_ID"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("USER_OID",callTC.getPropertyValue("USER_OID"));
tC.setPropertyValue("expectNodeUserRowCount",callTC.getPropertyValue("expectNodeUserRowCount"));
tC.setPropertyValue("expectCreateExpireHoursDiff",callTC.getPropertyValue("expectCreateExpireHoursDiff"));
tC.setPropertyValue("expectErrTypeSTSGet",callTC.getPropertyValue("expectErrTypeSTSGet"));
tC.setPropertyValue("stsIgnoreAssertTimesFlag",callTC.getPropertyValue("stsIgnoreAssertTimesFlag"));
tC.setPropertyValue("authHeaderString",callTC.getPropertyValue("authHeaderString"));
tC.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
tC.setPropertyValue("deviceAuthToken",callTC.getPropertyValue("deviceAuthToken"));
tC.setPropertyValue("rauthToken",callTC.getPropertyValue("rauthToken"));
tC.setPropertyValue("actionAuthHeader",callTC.getPropertyValue("actionAuthHeader"));
tC.setPropertyValue("actionIgnoreAuthTokenStatus",callTC.getPropertyValue("actionIgnoreAuthTokenStatus"));
tC.setPropertyValue("actionSkipNodeUserCheck",callTC.getPropertyValue("actionSkipNodeUserCheck"));
tC.setPropertyValue("actionSkipNodeIDCheck",callTC.getPropertyValue("actionSkipNodeIDCheck"));
tC.setPropertyValue("stsaudience",callTC.getPropertyValue("stsaudience"));
tC.setPropertyValue("stsaudienceIgnoreAll",callTC.getPropertyValue("stsaudienceIgnoreAll"));
tC.setPropertyValue("stsaudienceIgnoreNodes",callTC.getPropertyValue("stsaudienceIgnoreNodes"));
tC.setPropertyValue("isDeviceFlag",callTC.getPropertyValue("isDeviceFlag"));
tC.setPropertyValue("username",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("password",callTC.getPropertyValue("Password"));
tC.setPropertyValue("contentLocation",callTC.getPropertyValue("contentLocation"));

if (tC.getPropertyValue("expectErrTypeSTSGet") == null ||
	tC.getPropertyValue("expectErrTypeSTSGet") == "") {
		tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
}
if (tC.getPropertyValue("stsIgnoreAssertTimesFlag") == null ||
	tC.getPropertyValue("stsIgnoreAssertTimesFlag") == "") {
		tC.setPropertyValue("stsIgnoreAssertTimesFlag","false");
}
if (tC.getPropertyValue("tokentype") == null ||
	tC.getPropertyValue("tokentype") == "") {
		tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
}

if (tC.getPropertyValue("isDeviceFlag") == null ||
	tC.getPropertyValue("isDeviceFlag") == 'null') {
		tC.setPropertyValue("isDeviceFlag","false");
}

if (tC.getPropertyValue("actionSkipNodeIDCheck") == null ||
	tC.getPropertyValue("actionSkipNodeIDCheck") == 'null') {
		tC.setPropertyValue("actionSkipNodeIDCheck","false");
}
if (tC.getPropertyValue("NODE_ID") != 'null' || tC.getPropertyValue("NODE_ID") != null) {
		tC.setPropertyValue("NODE_IDFULL", tP.getPropertyValue("urnNode") + tC.getPropertyValue("NODE_ID"));
}

/*
*  ONLY pull the current TC assertion of the tokentype is saml2 (needed for the exchange)
*/
if (tC.getPropertyValue("tokentype") == tP.getPropertyValue("urntokenType_saml")) {
	log.info "Extracting assertion";
	tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
}

/*
*  Construct the expected Affiliation list
*/
def affiliationList = [tC.getPropertyValue("NODE_IDFULL").toString()];
def ignoreNodesList = [];
def stsaudienceList = [];
	
if (tC.getPropertyValue("stsaudienceIgnoreAll").toString() == "false") {
	if (tC.getPropertyValue("stsaudience") != 'null') {
		stsaudienceList = tC.getPropertyValue("stsaudience").toString().tokenize(",");

		/*
		*  Now remove the ingnorenodes 
		*/
		if (tC.getPropertyValue("stsaudienceIgnoreNodes") != 'null') {
			ignoreNodesList = tC.getPropertyValue("stsaudienceIgnoreNodes").toString().tokenize(",");
			ignoreNodesList.each {
				if (stsaudienceList.contains(it)) {
					stsaudienceList = stsaudienceList.minus(it);
				}
			}
		}
	}

	if (stsaudienceList.size() >= 1) {
		log.info "DEBUG: Adding stsaudienceList";
		affiliationList.addAll(stsaudienceList);
	}
} 

tC.setPropertyValue("stsExpectedAffiliationListSize",affiliationList.size().toString());

log.info "DEBUG: affiliationList size is " + affiliationList.size();
affiliationList.each {
	log.info "DEBUG afflicationList Member: " + it;
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish attributes based on NodeID" id="89c568c2-fdf9-4538-8676-c9b0f01b44db">
        <con:settings/>
        <con:config>
          <script>import java.util.StringTokenizer; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String NODE_ID = tC.getPropertyValue("NODE_ID").toString();

/*
*  See if we are a device
*/
switch (NODE_ID) {
	case tP.getPropertyValue("nodeIdDEV").toString():
		urlEndPoint = "device";
		tC.setPropertyValue("isDeviceFlag","true");
		break;
	default:
		urlEndPoint = "coordinator";
		tC.setPropertyValue("isDeviceFlag","false");
		break;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Construct URL" id="56f2439c-340f-4a80-9cd5-ebb9834e8bc4">
        <con:settings/>
        <con:config><script>import java.util.StringTokenizer; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

Boolean appliedFirstNode = false;
String url = "";
String anode = "";
String urlEndPoint = "";
String NODE_ID = tC.getPropertyValue("NODE_ID").toString();

log.info "NODE_ID[$NODE_ID]";

if (tC.getPropertyValue("isDeviceFlag") == "true") {
	urlEndPoint = "device";
}

log.info "urlEndPoint: " + urlEndPoint;

/*
*  Set the endpoint
*/
switch (urlEndPoint) {
	case "device":
			url = "https://" + tP.getPropertyValue("targetDeviceDomain").toString() + 
			"/rest/" + tP.getPropertyValue("versionMajor").toString() +
			"/" + tP.getPropertyValue("versionMinor").toString() +
			"/SecurityToken/Assertion/" +
			tC.getPropertyValue("assertionUUID").toString();
		break;
	case "coordinator":
	default:
		url = "https://" + tP.getPropertyValue("targetHostq").toString() + 
			":" + tP.getPropertyValue("targetPortq").toString() + 
			"/rest/" + tP.getPropertyValue("versionMajor").toString() +
			"/" + tP.getPropertyValue("versionMinor").toString() +
			"/SecurityToken/Assertion/" +
			tC.getPropertyValue("assertionUUID").toString();
	break;
}

log.info "url[$url]";

testRunner.testCase.getTestStepByName('GET - STS').httpRequest.setEndpoint(url);


</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Construct Authorization Header if necessary" id="b2ce14c6-3883-4f89-b3b6-12c872311981">
        <con:settings/>
        <con:config>
          <script>import org.apache.commons.codec.binary.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Device auth token requires the authorization header be
*  included with the device code
*/
if (tC.getPropertyValue("tokentype") == tP.getPropertyValue("urntokenType_deviceauthtoken")) {
	String authHeaderValue = "DeviceCode value=\"" + tC.getPropertyValue("deviceAuthToken") + "\"";

	tC.setPropertyValue("authHeaderValue",authHeaderValue);

	log.info "Property authHeaderValue is - " + tC.getPropertyValue("authHeaderValue");
} else if (tC.getPropertyValue("isDeviceFlag").toString() == "true") {
	/*
	*  construct the basic auth header
	*/
	String combo = tC.getPropertyValue("username").toString() + ":" + tC.getPropertyValue("password").toString();
	String authHeaderValue = "Basic " + combo.bytes.encodeBase64().toString()

	log.info "combo[$combo] - authHeaderValue[$authHeaderValue]";

	tC.setPropertyValue("authHeaderValue",authHeaderValue);
}

/*
*  Overrides
*/
if (tC.getPropertyValue("actionAuthHeader") == "EXCLUDE") {
	tC.setPropertyValue("authHeaderValue",null);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish PEM" id="bbc9613d-9b1a-418e-853a-cad653277e25">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID_",tC.getPropertyValue("NODE_ID_"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - STS");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Obtain current sysdate from DB" id="7dea4c8e-cf5b-46cb-8d5f-594c4d3b0d43">
        <con:settings/>
        <con:config>
          <script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("currentDBTOD",null);

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
String sqlResultXML = "";
String cDate = "";
String tod = "";

try {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
	sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
	log.info "sqlResultXML[$sqlResultXML]";

	if (sqlResultXML.length() > 0) {
		def myXML = new XmlSlurper().parseText(sqlResultXML);
		tod = myXML.ResultSet.Row.TOD;
		log.info "tod[$tod]";
	}

}
catch (Throwable e) {
	log.info "sql[$sql]";
	log.info "dbUtils request failed! - " + e;
	assert 1 == 2;
}
finally {
	if (tod.length() > 0) {
		tC.setPropertyValue("currentDBTOD", tod);
	}
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="GET - STS" id="aa66c6f6-022e-4578-96d3-d93c2043cbdb"><con:settings/><con:config service="STSGet1" resourcePath="" methodName="STS GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STS" mediaType="application/xml;charset=UTF-8" sslKeystore="7600.pem" accept="" id="3685537a-fc46-499f-8d97-6f6244cfc58b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#authHeaderValue}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa.q.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_4dad1071-c3a1-4283-a883-2ea7f9454943</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="assertionUUID" value="${#TestCase#assertionUUID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="bfa22706-d856-4de8-aaec-af9af3b6f20a">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('GET - STS');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");
String XMLbody = "";

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();

rawResp = new ByteArrayOutputStream();

rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;
log.info "PATTY " + strVal.indexOf("&lt;?xml version=\"1.0\" ")

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
if (startAssert > 0) {
	XMLbody  = strVal.substring(startAssert, strVal.length());
}

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Key Elements from &lt;Assertion> Body" id="78adc108-9fa9-4628-b44a-c69ab21f0343">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");

int lastColon = 0;
int lastSlash = 0;

if (expectErrType == "" || expectErrType == "SUCCESS") {
	tC.setPropertyValue("assertionAccountIdFULL",null);
	tC.setPropertyValue("assertionUserIdFULL",null);
	tC.setPropertyValue("assertionNotBefore",null);
	tC.setPropertyValue("assertionNotOnOrAfter",null);
	tC.setPropertyValue("assertionAudienceRestriction",null);
	tC.setPropertyValue("assertionUserId",null);
	tC.setPropertyValue("assertionAccountId",null);
	
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			def accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			def userId    = myXML."saml2:Subject"."saml2:NameID";
			def NotBefore = myXML."saml2:Conditions".@NotBefore.text();
			def NotOnOrAfter = myXML."saml2:Conditions".@NotOnOrAfter.text();
			def AudienceRestriction = myXML."saml2:Conditions".AudienceRestriction;
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";
			this.log.info "NotBefore [$NotBefore]";
			this.log.info "NotOnOrAfter [$NotOnOrAfter]";
			this.log.info "AudienceRestriction [$AudienceRestriction]";
						
			tC.setPropertyValue("assertionAccountIdFULL",accountId.toString());
			tC.setPropertyValue("assertionUserIdFULL",userId.toString());
			tC.setPropertyValue("assertionNotBefore",NotBefore.toString());
			tC.setPropertyValue("assertionNotOnOrAfter",NotOnOrAfter.toString());
			tC.setPropertyValue("assertionAudienceRestriction",NotBefore.toString());
			tC.setPropertyValue("assertionAccountId",accountId.toString().substring(accountId.toString().lastIndexOf(':') + 1).toString());
			tC.setPropertyValue("assertionUserId",userId.toString().substring(userId.toString().lastIndexOf(':') + 1).toString());
	} else {
		return false;
	}
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Verify Response Body and Headers" id="86f27f44-dde2-425b-9b82-c21b610f0bf4">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def url = tP.getPropertyValue("targetURL");
def assertionUUID = tC.getPropertyValue("assertionUUID");

def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection = "Keep-Alive";

String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
	tC.setPropertyValue("expectErrTypeSTSGet",expectErrType);
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
		case "FORBIDDEN_INVALID_ROLE":
		errorReason = "forbidden";
		errorID = "urn:dece:errorid:org:dece:securitycontext:Forbidden:1120";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
		break;
	case "FORBIDDEN_INVALID_USER_STATUS":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:InvalidUserStatus";
		errorReason = "User does not have proper status to build token";
		
		break;
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1119";
		//errorReason = "Exception Encountered during STS process";
		//errorID = "Forbidden";
		errorReason = "forbidden";
	break;
	case "Unauthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorID = "Forbidden";
			expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
				errorReason = "Unknown Error";
		
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = false;
		
	break;
	case "INVALID_ASSERTION":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "text/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorReason = "assertion_not_found";
		break;
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	

if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

this.log.info "expectErrType [$expectErrType]";

if (dobodyXML) {
	if (XMLbody.length() > 0) {
			def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", ds: "http://www.w3.org/2000/09/xmldsig#");
		if (expectErrType == "SUCCESS") {
			// Verify response sizes...
			this.log.info "Assertion size: " + myXML.size();
			
			assert myXML.size() == 1;
			assert myXML."ds:Signature".size()    == 1;
			assert myXML."ds:Signature"."ds:SignedInfo".size()   == 1;
			assert myXML."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
			assert myXML."ds:Signature"."ds:SignatureValue".size()  == 1;
			//assert myXML."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
			assert myXML."saml2:Subject"."saml2:NameID".size() == 1;
			assert myXML."saml2:Advice"."saml2:AssertionURIRef".size() == 1;
			
			def samlRespNodeAccount = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
				def ExpeAssertionURIRef = "$url/rest/$major/$minor/SecurityToken/Assertion/$assertionUUID";
				
				this.log.info "AssertionURIRef: Expect[$ExpeAssertionURIRef] Received: " + myXML."saml2:Advice"."saml2:AssertionURIRef".toString();
				assert myXML.Error.Reason.toString() == ExpeAssertionURIRef;
		} else {
			// ErrorCode
			this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
			assert myXML.Error.@ErrorID.toString() == errorID;
	
			// ErrorReason
			
			this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
			assert myXML.Error.Reason.toString() == errorReason;
			
		
			// ErrorLink
			/*
			this.log.info "ErrorLink: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
			assert myXML.Error.ErrorLink.toString() == errorLink;
			*/
		}
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Validate NODE_ACCOUNT row entry" id="b0c54511-fdad-46e2-9868-3de2deca5bf1">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));

String acct = tC.getPropertyValue("assertionAccountId").toString();
String nodeUser = tC.getPropertyValue("assertionUserId").toString();
String nodeoid = tC.getPropertyValue("NODE_ID").toString();
String resultsDB = "";

/*
*  If this is a device, adjust the NODE_ID
*/
if (tC.getPropertyValue("isDeviceFlag").toString() == "true") {
	nodeoid = tP.getPropertyValue("nodeDeviceDefault").toString();
}


String sql = """SELECT 
to_char(rawtohex(ACCOUNT_OID)) ACCOUNT_OID,
to_char(rawtohex(NODE_ID)) NODE_ID 
FROM NODE_ACCOUNT where NODE_ACCOUNT_ID = '$acct' 
and NODE_ID = '$nodeoid'""";

try {
	log.info "sql is [$sql]";
	resultsDB = dbUtils.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
} catch (Throwable e) {
	log.info "ERROR - SelectFromDB issue! - $e";
} finally {
	log.info "results is [$resultsDB]";
}

try {
	def myXML = new XmlSlurper().parseText(resultsDB);

	String dbAccountOID = myXML.ResultSet.Row[0].ACCOUNT_OID;
	String dbNodeOID = myXML.ResultSet.Row[0].NODE_ID;
}
catch(Throwable e) {
	log.info "ERROR - XmlSlurper Problem - $e";
}
finally {
	if (tC.getPropertyValue("expectErrTypeSTSGet").toString() == "SUCCESS") {
		log.info "Assert DB ACCOUNT_OID [$dbAccountOID] == [" + tC.getPropertyValue("accountOID") + "]";
		assert dbAccountOID == tC.getPropertyValue("accountOID").toString();

		if (tC.getPropertyValue("actionSkipNodeIDCheck").toString() == "false") {
			log.info "Assert DB NODE_ID [$dbNodeOID] == [$nodeoid]";
			assert dbNodeOID == nodeoid;
		}
	} 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Validate DEVICE_AUTH_TOKEN.STATUS deleted if tokentype:DeviceAuthToken" id="bcc53c1d-12f7-430a-930f-836c8958be0e">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbutils;

String expectstatus = "deleted";
String dbstatus = "";

if (tC.getPropertyValue("tokentype") == tP.getPropertyValue("urntokenType_deviceauthtoken") &amp;&amp;
	tC.getPropertyValue("actionIgnoreAuthTokenStatus") != "true") {
	if (tC.getPropertyValue("expectErrTypeSTSGet") != "SUCCESS") {
		expectstatus = "active";
	}
	try {
		dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
		dbstatus = dbUtils.deviceAuthTokenGetStatus(tC.getPropertyValue("rauthToken"));	
	}
	catch (Throwable e) {
		log.info "ERROR - dbUtils.deviceAuthTokenGetStatus - $e";
	}
	finally {
		log.info "Asserting dbstatus[$dbstatus] == expectstatus[$expectstatus] - " + 
			tC.getPropertyValue("rauthToken").toString();
		assert dbstatus == expectstatus  ;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Fetch NODE_USER_SAML_ASSERTION Row" id="7f9eff72-d820-44b7-9263-8ea1681cfa0c">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;
def myXML;

tC.setPropertyValue("assertionROW",null);

String arow = "";

if (tC.getPropertyValue("expectErrTypeSTSGet") == "SUCCESS") {
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		String uuid = tC.getPropertyValue("assertionUUID").toString();
		
		/*
		*  Assert we have a location header value..
		*/
		assert uuid.length() > 1;

		log.info "uuid [$uuid]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		arow = dbUtils.samlGetAssertionRow(uuid);

		assert arow.length() > 0;

		log.info "arow is [$arow]";

		tC.setPropertyValue("assertionROW",arow);
	}

	/*
	*  Parse the XML
	*/
	try {
		myXML = new XmlSlurper().parseText(arow);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify only one row was returned..
		*/
		log.info "ASSERT - Row Size is 1";
		assert myXML.ResultSet.Row.size() == 1;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Validate NODE_USER_SAML_ASSERTION.NODE_USER_SAML_ASSERTION matches response body" id="8e01c67c-03f8-4a2f-b560-a158d1124876">
        <con:settings/>
        <con:config>
          <script>import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def dbUtils;
def dbUtilsUser;

tC.setPropertyValue("computedAssertionXML",null);
tC.setPropertyValue("dbassertionNodeaccountid",null);
tC.setPropertyValue("dbassertionNodeuserid",null);

String assertionXML = "";
String arow = tC.getPropertyValue("assertionROW");

if (tC.getPropertyValue("expectErrTypeSTSGet") == "SUCCESS") {
	/*
	*  Make sure we have data in arow
	*/
	assert arow.length() > 1;

	/*
	*  Get a handle for the saml class.
	*/
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	/*
	*  Get a handle for the user class.
	*/
	try {
		dbUtilsUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbUser - $e";
		assert 1 == 2;
	}
	
	try {
		myXML = new XmlSlurper().parseText(arow);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify only one row was returned..
		*/
		log.info "ASSERT - Row Size is 1";
		assert myXML.ResultSet.Row.size() == 1;

		String assertRaw = myXML.ResultSet.Row.NODE_USER_SAML_ASSERTION_PART1.text() +
				myXML.ResultSet.Row.NODE_USER_SAML_ASSERTION_PART2.text();

		/*
		*  Base64 decode the assertion clob
		*/
		byte [] xmlBytes = Base64.decode(assertRaw);
		assertionXML = new String(xmlBytes, "UTF8");

		assert assertionXML.length() > 1;

		tC.setPropertyValue("computedAssertionXML", assertionXML);
	}
	/*
	*  Now parse the assertion XML
	*/
	try {
		myXML = new XmlSlurper().parseText(assertionXML).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", saml2p: "urn:oasis:names:tc:SAML:2.0:protocol");
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify the assertion body matches that contained in
		*  NODE_USER_SAML_ASSERTION table
		*/
		log.info "Asserting STSGET Body XML matches NODE_USER_SAML_ASSERTION.NODE_USER_SAML_ASSERTION";
		assert tC.getPropertyValue("computedAssertionXML").toString() == tC.getPropertyValue("computedAssertionXML").toString()
		
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Validate DEVICE_AUTH_TOKEN row" id="0b5b0838-a335-4113-b0ce-f3fea9220e8b">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbutils;

String expectstatus = "deleted";
String dbstatus = "";

if (tC.getPropertyValue("tokentype") == tP.getPropertyValue("urntokenType_deviceauthtoken") &amp;&amp;
	tC.getPropertyValue("actionIgnoreAuthTokenStatus") != "true") {
	if (tC.getPropertyValue("expectErrTypeSTSGet") != "SUCCESS") {
		expectstatus = "active";
	}
	try {
		dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
		dbstatus = dbUtils.deviceAuthTokenGetStatus(tC.getPropertyValue("rauthToken"));	
	}
	catch (Throwable e) {
		log.info "ERROR - dbUtils.deviceAuthTokenGetStatus - $e";
	}
	finally {
		log.info "Asserting dbstatus[$dbstatus] == expectstatus[$expectstatus] - " + 
			tC.getPropertyValue("rauthToken").toString();
		assert dbstatus == expectstatus  ;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="b60e0496-5f2f-4d6f-81ab-e4c262a4305b">
        <con:settings/>
        <con:config>
          <script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
//import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	
int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/
byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("assert", base64encodeStr);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return extracted Properties back to calling Test Case" id="5d8fb731-9da3-450e-8057-3f5a00b71774">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertXML",tC.getPropertyValue("assertXML"));
callTC.setPropertyValue("assert",tC.getPropertyValue("assert"));
callTC.setPropertyValue("assertId",tC.getPropertyValue("assertId"));

String acctID = tC.getPropertyValue("assertionAccountId");
String userID = tC.getPropertyValue("assertionUserId");

if (acctID != null &amp;&amp; acctID.length() > 0) {
	callTC.setPropertyValue("assertionAccountId",acctID.substring(acctID.lastIndexOf(":")+1,acctID.length()));
	callTC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue("assertionAccountIdFULL"));
} else {
	callTC.setPropertyValue("assertionAccountId","ERROR");
}
if (userID != null &amp;&amp; userID.length() > 0) {
	callTC.setPropertyValue("assertionUserId",userID.substring(userID.lastIndexOf(":")+1,userID.length()));
	callTC.setPropertyValue("assertionUserIdFULL",tC.getPropertyValue("assertionUserIdFULL"));
} else {
	callTC.setPropertyValue("assertionUserId","ERROR");
}
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep>
      
      <con:properties>
        
        
        <con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D3DDE07D9379A73FE0401F0A079918A0</con:value></con:property><con:property><con:name>actionAuthHeader</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionIgnoreAuthTokenStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionSkipNodeIDCheck</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>actionSkipNodeUserCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affilNODE_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZbV+o6EH7fv6KrPrpK04IUuoS1QEDr9spNjy9nxXSAaJuWJuXir99JsRUQPe7z1JXpZOabmS9fcspxGNhui3NIBI2Y5nUa+r8WQTWngiyjAk7VqEzqjoFPLMfwLb+KnmvP5UoNdM3jPAWPcYGZaOg2ssqG3GLbQ1R3UdW1yqWKU3/StTEkXIaWLiWka6swYNzN0jb0NGFuhDnlLsMhcFcQd9C6vnKlp4tzTHrzdIMyS5g0Z0LErmmSkg8EgoCUSBSap+aOz6nP3QGdMizSBN5z+ryhv+9dLpelZbkUJVPTRgiZqG5KH5/T6ZHe/JVvBt9jk2izPsMsYpTggL5hBeoaxCzytVYwjRIqZuEXoS3TQiq0AStiEKvCjnTzI0GG7oeRdkAmHBt8hq08WB8mkAAjoI36XkM/+tkEN3uHCWZ8EiUh31v/HSRgCwiiGHyD55Xl6H4e8UC7mqdAXI+RIOV0ATeKJjEmwLW7BCZ0dUW5JJ/PtWz82ornDAPyNyM5NbdxStjmgc506BS4+D/z2p7VJsoYByk0V92Z93xupjaC8Gx8/nTbCwRazG8nj6NGBmHbeQOqGPX7ep+oBa/eN10EtWvf+efikT6EYToQSXs+IpeX5/fTCpu0X6dn0eLYTAmsCaDj9svD2Brdza3jkd2OT9ZnV2/e+u3urnzxcjxdi1+L4H7Jhi9ea/zW7xM6Gt0Tk1w+vVivN+sxrKqvb0+XT8NWkPYq3YE/CoPffcQeeh2zf7N8jY8v8NC+o6OLKojw8lccn6P0fBL8pp3jF68XIF5rfNS0XcOuMZeDQfr8AkTkS0UNr6P15Lyw+F5alIX6xiRzdWOlT1wAE3pT7VKy4qZSfKjvymFu1p1yp9NFTqderlVaTrnXRfJ09VALOfW6VWuhXH82KPYgnkVsQlUupbAb/nwPkIQuB+ZDYiyilMyA699E7GCBNY/15cGIGIdhJBW8a1frJ+VWu1e1UbfsoE6li9p2tVrrdWsnTtvRtZtI3LLbpDURkOyot2XvqHcfCI0pKIlXPOeS6FzIlszxIhWBVVrgEoNUXgKJ0mHXrtROTE7DOAAF2AwjPw2gFM/irEEm33xtAxOeWZ0qQtkB/LK+/X95K6SPT5UDV8W0QY4TDtxDKK/k64pPtivOw7dSn6pzJvsqEko2SHZ/fdBF8aTgiiopx1y47ht2wpr7FRWZ/AUlBeOLa1qqvNSBZj6QOS7NS+likWYjcJTGJTK8aZmoag6ApFKo1sPoFZhZhDB/dEcUqPcyF/ZdfKmYsYHAAkJJGC1b/uCBMACuHgieJPzqp6+PnZSybwJW4pDtLJDvCIX426cGcYnyk+Y7+VlGif8xrgOxtvLIOuWrQFA2VSt1I6y/YAWJZFgqJSxKtoMfCnAo+a6xaHKBRUg2PacCvv6jKW1q6JiQKGXC6+iZYVsvM5xiHYP74fQpTKbJ75fsin95yT5eXw2kcoVYL3zpfzsbNKMLkc9L6Z9haegr+V6Uydl0S5/fAR6WaOdbid6tpPnJ/Nmy1dP989D8Aw==</con:value></con:property>
        
        
        
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>assertCreatingNodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value>_322f5cc3-b2eb-4012-b56f-bf7765fb3c1b</con:value></con:property>
        
        
        
        
        
        
        <con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D3DDE07D9374A73FE0401F0A079918A0</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:D3DDE07D9374A73FE0401F0A079918A0</con:value></con:property><con:property><con:name>assertionAudienceRestriction</con:name><con:value>2013-01-22T09:07:38.605Z</con:value></con:property><con:property><con:name>assertionNotBefore</con:name><con:value>2013-01-22T09:07:38.605Z</con:value></con:property><con:property><con:name>assertionNotOnOrAfter</con:name><con:value>2013-01-22T15:07:48.605Z</con:value></con:property><con:property><con:name>assertionROW</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <NODE_USER_SAML_ASSERTION_OID>D14403889CF4F3ECE0401F0A07992161</NODE_USER_SAML_ASSERTION_OID>
      <NODE_ID>7600</NODE_ID>
      <NODE_USER_SAML_ASSERTION_PART1>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHNhbWwycDpSZXNwb25zZSBDb25zZW50PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDp1bnNwZWNpZmllZCIgRGVzdGluYXRpb249Imh0dHBzOi8vc3RkZWNxYXZ1dGwxLnZhLm5ldXN0YXIuY29tOjI0ODUvc2ltcGxlc2FtbC9tb2R1bGUucGhwL3NhbWwvc3Avc2FtbDItYWNzLnBocC83NjAwIiBJRD0iXzdjN2U5YmZlLTE1ZWMtNDM2YS1iNjIyLTk1OTdlOWQxNjc3MCIgSW5SZXNwb25zZVRvPSJfNjI0RDQ5MUMwRjVFMzBBQjEzQ0EzRTk4MjE4RjhBRjUiIElzc3VlSW5zdGFudD0iMjAxMi0xMi0yMFQwNjo0NTo1My45NzNaIiBWZXJzaW9uPSIyLjAiIHhtbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIj48c2FtbDI6SXNzdWVyIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj5odHRwOi8vYy5kZWNlbGxjLmNvbS88L3NhbWwyOklzc3Vlcj48c2FtbDJwOlN0YXR1cz48c2FtbDJwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIvPjwvc2FtbDJwOlN0YXR1cz48c2FtbDI6QXNzZXJ0aW9uIElEPSJfMzIyZjVjYzMtYjJlYi00MDEyLWI1NmYtYmY3NzY1ZmIzYzFiIiBJc3N1ZUluc3RhbnQ9IjIwMTItMTItMjBUMDY6NDU6NTMuOTczWiIgVmVyc2lvbj0iMi4wIiB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+PHNhbWwyOklzc3Vlcj5odHRwOi8vYy5kZWNlbGxjLmNvbS88L3NhbWwyOklzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj4KPGRzOlNpZ25lZEluZm8+CjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+CjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz4KPGRzOlJlZmVyZW5jZSBVUkk9IiNfMzIyZjVjYzMtYjJlYi00MDEyLWI1NmYtYmY3NzY1ZmIzYzFiIj4KPGRzOlRyYW5zZm9ybXM+CjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPgo8ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIj48ZWM6SW5jbHVzaXZlTmFtZXNwYWNlcyBQcmVmaXhMaXN0PSJkcyBzYW1sMiB4cyIgeG1sbnM6ZWM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvZHM6VHJhbnNmb3JtPgo8L2RzOlRyYW5zZm9ybXM+CjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIvPgo8ZHM6RGlnZXN0VmFsdWU+SWdLTEIrK3JMbnhuY1BFckNpc3FNOVBVb3BvPTwvZHM6RGlnZXN0VmFsdWU+CjwvZHM6UmVmZXJlbmNlPgo8L2RzOlNpZ25lZEluZm8+CjxkczpTaWduYXR1cmVWYWx1ZT4KTjJnYTF5cG4xeHpHUTFMZFFLOFVTKys0blpwd1lkSGlYNGpjYndwZ0lqTklQMWw2MlFod0ZRUllqcWhIQVZZUm4zTWtUQWtYRHI3TgpFQno1c2hiSzFIbERLZ0V5MVBVdXVwWFc3Ly9uversionMajorpRS0xWZUR0OVV0a205eEplNXplNERPakYwNjcwZTE5S0FkeWVoR09HTzJFek90CnNjNlRZSWROOUVZRHAzWC9RTzg9CjwvZHM6U2lnbmF0dXJlVmFsdWU+CjwvZHM6U2lnbmF0dXJlPjxzYW1sMjpTdWJqZWN0PjxzYW1sMjpOYW1lSUQgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDpwZXJzaXN0ZW50Ij51cm46ZGVjZTp1c2VyaWQ6b3JnOmRlY2U6RDE0NDAzODg5Q0RGRjNFQ0UwNDAxRjBBMDc5OTIxNjE8L3NhbWwyOk5hbWVJRD48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjbTpzZW5kZXItdm91Y2hlcyI+PHNhbWwyOlN1YmplY3RDb25maXJtYXRpb25EYXRhIEluUmVzcG9uc2VUbz0iXzYyNEQ0OTFDMEY1RTMwQUIxM0NBM0U5ODIxOEY4QUY1IiBOb3RPbk9yQWZ0ZXI9IjIwMTItMTItMjBUMDk6NDU6NTMuOTczWiIgUmVjaXBpZW50PSJodHRwczovL3N0ZGVjcWF2dXRsMS52YS5uZXVzdGFyLmNvbToyNDg1L3NpbXBsZXNhbWwvbW9kdWxlLnBocC9zYW1sL3NwL3NhbWwyLWFjcy5waHAvNzYwMCIvPjwvc2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbj48L3NhbWwyOlN1YmplY3Q+PHNhbWwyOkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDEyLTEyLTIwVDA2OjQ1OjQzLjk3M1oiIE5vdE9uT3JBZnRlcj0iMjAxMi0xMi0yMFQxMjo0NTo1My45NzNaIj48c2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48c2FtbDI6QXVkaWVuY2U+dXJuOmRlY2U6b3JnOm9yZzpkZWNlOjc2MDE8L3NhbWwyOkF1ZGllbmNlPjxzYW1sMjpBdWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6NzYwMjwvc2FtbDI6QXVkaWVuY2U+PHNhbWwyOkF1ZGllbmNlPnVybjpkZWNlOm9yZzpvcmc6ZGVjZTo3NjAzPC9zYW1sMjpBdWRpZW5jZT48c2FtbDI6QXVkaWVuY2U+dXJuOmRlY2U6b3JnOm9yZzpkZWNlOjc2MDQ8L3NhbWwyOkF1ZGllbmNlPjxzYW1sMjpBdWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6NzYwMDwvc2FtbDI6QXVkaWVuY2U+PC9zYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPjwvc2FtbDI6Q29uZGl0aW9ucz48c2FtbDI6QWR2aWNlPjxzYW1sMjpBc3NlcnRpb25VUklSZWY+aHR0cHM6Ly9xYS5xLnversionMinordnUuY29tOjcwMDEvcmVzdC8xLzA2L1NlY3VyaXR5VG9rZW4vQXNzZXJ0aW9uL18zMjJmNWNjMy1iMmViLTQwMTItYjU2Zi1iZjc3NjVmYjNjMWI8L3NhbWwyOkFzc2VydGlvblVSSVJlZj48L3NhbWwyOkFkdmljZT48c2FtbDI6QXV0aG5TdGF0ZW1lbnQgQXV0</NODE_USER_SAML_ASSERTION_PART1>
      <NODE_USER_SAML_ASSERTION_PART2>aG5JbnN0YW50PSIyMDEyLTEyLTIwVDA2OjQ1OjUzLjk3M1oiIFNlc3Npb25JbmRleD0iXzMyMmY1Y2MzLWIyZWItNDAxMi1iNTZmLWJmNzc2NWZiM2MxYiI+PHNhbWwyOkF1dGhuQ29udGV4dD48c2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY+dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6UGFzc3dvcmQ8L3NhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPjxzYW1sMjpBdXRoZW50aWNhdGluZ0F1dGhvcml0eT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6Y29vcmRpbmF0b3I8L3NhbWwyOkF1dGhlbnRpY2F0aW5nQXV0aG9yaXR5Pjwvc2FtbDI6QXV0aG5Db250ZXh0Pjwvc2FtbDI6QXV0aG5TdGF0ZW1lbnQ+PHNhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48c2FtbDI6QXR0cmlidXRlIE5hbWU9ImFjY291bnRJRCIgTmFtZUZvcm1hdD0idXJuOmRlY2U6dHlwZTphY2NvdW50SUQiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJ4czpzdHJpbmciPnVybjpkZWNlOmFjY291bnRpZDpvcmc6ZGVjZTpEMTQ0MDM4ODlDRDBGM0VDRTA0MDFGMEEwNzk5MjE2MTwvc2FtbDI6QXR0cmlidXRlVmFsdWU+PC9zYW1sMjpBdHRyaWJ1dGU+PC9zYW1sMjpBdHRyaWJ1dGVTdGF0ZW1lbnQ+PC9zYW1sMjpBc3NlcnRpb24+PC9zYW1sMnA6UmVzcG9uc2U+</NODE_USER_SAML_ASSERTION_PART2>
      <NODE_USER_SAML_UUID>_322f5cc3-b2eb-4012-b56f-bf7765fb3c1b</NODE_USER_SAML_UUID>
      <CREATED_DATE>2012-12-20 06:45:54.0</CREATED_DATE>
      <NODE_USER_ID>D14403889CE5F3ECE0401F0A07992161</NODE_USER_ID>
      <NODE_ACCOUNT_ID>D14403889CD7F3ECE0401F0A07992161</NODE_ACCOUNT_ID>
      <STATUS>active</STATUS>
      <EXPIRATION_DATE>2012-12-20 12:45:54.0</EXPIRATION_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D3DDE07D9384A73FE0401F0A079918A0</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:D3DDE07D9384A73FE0401F0A079918A0</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_4dad1071-c3a1-4283-a883-2ea7f9454943</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authHeaderString</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authHeaderValue</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>computedAssertionXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2p:Response Consent="urn:oasis:names:tc:SAML:2.0:consent:unspecified" Destination="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/7600" ID="_7c7e9bfe-15ec-436a-b622-9597e9d16770" InResponseTo="_624D491C0F5E30AB13CA3E98218F8AF5" IssueInstant="2012-12-20T06:45:53.973Z" Version="2.0" xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol"><saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">http://c.decellc.com/</saml2:Issuer><saml2p:Status><saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/></saml2p:Status><saml2:Assertion ID="_322f5cc3-b2eb-4012-b56f-bf7765fb3c1b" IssueInstant="2012-12-20T06:45:53.973Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_322f5cc3-b2eb-4012-b56f-bf7765fb3c1b">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>IgKLB++rLnxncPErCisqM9PUopo=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
N2ga1ypn1xzGQ1LdQK8US++4nZpwYdHiX4jcbwpgIjNIP1l62QhwFQRYjqhHAVYRn3MkTAkXDr7N
EBz5shbK1HlDKgEy1PUuupXW7//nWZQKLVeDt9Utkm9xJe5ze4DOjF0670e19KAdyehGOGO2EzOt
sc6TYIdN9EYDp3X/QO8=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:D14403889CDFF3ECE0401F0A07992161</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_624D491C0F5E30AB13CA3E98218F8AF5" NotOnOrAfter="2012-12-20T09:45:53.973Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/7600"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2012-12-20T06:45:43.973Z" NotOnOrAfter="2012-12-20T12:45:53.973Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:7601</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:7602</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:7603</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:7604</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:7600</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_322f5cc3-b2eb-4012-b56f-bf7765fb3c1b</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2012-12-20T06:45:53.973Z" SessionIndex="_322f5cc3-b2eb-4012-b56f-bf7765fb3c1b"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:D14403889CD0F3ECE0401F0A07992161</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></saml2p:Response>]]></con:value></con:property><con:property><con:name>connection</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>3157</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentType</con:name><con:value>text/xml;charset=ISO-8859-1</con:value></con:property><con:property><con:name>currentDBTOD</con:name><con:value>2013/01/22 09:08:52</con:value></con:property><con:property><con:name>dbassertionNodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dbassertionNodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dbCreateExpireHoursDiff</con:name><con:value>723</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <DIFFERENCE_HOURS>720</DIFFERENCE_HOURS>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>deviceAuthToken</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectNodeUserRowCount</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>isDeviceFlag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">7600</con:value></con:property><con:property><con:name>NODE_IDFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:7600</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>QC_Id</con:name><con:value>86717</con:value></con:property><con:property><con:name>rauthToken</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>ISC_TestCases</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property>
        
        
        
        
        
        
        
        
        
      <con:property><con:name>stsaudience</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:7601,urn:dece:org:org:dece:7602,urn:dece:org:org:dece:7603,urn:dece:org:org:dece:7604</con:value></con:property><con:property><con:name>stsaudienceIgnoreAll</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsaudienceIgnoreNodes</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsExpectedAffiliationListSize</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>stsIgnoreAssertTimesFlag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>SEC058_COO_ReplacementTokenUri</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:saml2</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">username_20130122_023616</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C9E2D01D30AFA458DFA4AA553CB451B7</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_4dad1071-c3a1-4283-a883-2ea7f9454943" IssueInstant="2013-01-22T09:07:48.605Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_4dad1071-c3a1-4283-a883-2ea7f9454943">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>W+XqZ8JPxQWlOU7hka5kgjruzFI=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
TF9MuaqRJH03TfTGE3l0t8tVW1G5tFDYhDt4gQo039yrilNj7+UyQmoeCScD3CieFcr63Vm6Xbgh
72PbWYIlBwVL+n8E1s2sXDzhfwETmM/e3L0zuCtEdC41mbbQNMRBxG2cc3YyTHpK8dZZbx8F2TVA
e5zdmkaYTdeaPU9Bnm8=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:D3DDE07D9384A73FE0401F0A079918A0</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_ABBF88162E35742F0906F52D24C71D89" NotOnOrAfter="2013-01-22T12:07:48.605Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/7600"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2013-01-22T09:07:38.605Z" NotOnOrAfter="2013-01-22T15:07:48.605Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:7601</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:7602</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:7603</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:7604</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:7600</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_4dad1071-c3a1-4283-a883-2ea7f9454943</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2013-01-22T09:07:48.605Z" SessionIndex="_4dad1071-c3a1-4283-a883-2ea7f9454943"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:D3DDE07D9374A73FE0401F0A079918A0</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete" searchProperties="true" id="b5b3855e-98c7-40dd-9c0b-97a91ff303ee"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a61c5dad-6180-407b-957c-e5f169529570"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
tC.setPropertyValue("PolicyID",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="e66faa3b-18fb-4d65-966c-0a51c800d309"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyDeleteResponseType"));

			
if (tC.getPropertyValue("expectErrType") == null ||
	tC.getPropertyValue("expectErrType") == "") {
		tC.setPropertyValue("expectErrType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="f4947731-4bf8-44b5-bb39-f398b2ed7643"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID_",tC.getPropertyValue("NODE_ID_"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Policy Delete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy Delete" id="f8de7e4a-227b-4326-88bd-8c259d492f76"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="UserPolicy_DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy Delete" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#Project#PolicyID}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="cebc331a-2673-4bde-b647-257b6b9cfa41">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def tStep  = tC.getTestStepByName('Policy Delete');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
log.info contentLocation;
log.info connection[0];
log.info contentType[0];
log.info contentLength[0];

tC.setPropertyValue("status",status[0]);
tC.setPropertyValue("contentType", contentType[0]);
tC.setPropertyValue("contentLength", contentLength[0]);
//tC.setPropertyValue("contentLocation", contentLocation[0]);

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

	String XMLbody  = strVal.substring(startAssert, strVal.size());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="389c3573-41fc-4a14-a09b-65d654bbcd05">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
def expectErrType = tC.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = tC.getPropertyValue("XMLbody");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";


if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = true;
		doContentLocaton  = false;
		dobodyXML = false;
		
	break;
	case "FORBIDDEN":
	default:
		errorReason = "assertion_not_found";
		errorID = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorLink = "https://qa.q.uvvu.com:7001/deceerrors/error/error_response.html";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
/*if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	

if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
} */
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep><con:properties><con:property><con:name>NODE_USER_ID</con:name><con:value>D84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=nVbbcuI4EP0VyvM4ZSxfsMEVqPJCkiFDCIuTbDIvW4rcGDG2DJZMyHz9SgY8mJAsuy8hardOn77oSBccp4nlB5xDLmjGGps0YdwvrV2tyJmfYU65z3AK3BfED4PbkW81kY/3W7TGcNDV/u5ELrJIC+lt9DLTHdKx9Y7tWrqDzLbngtvCYElXzgsYMi4wE13NQmZLR65uonvk+sjzTa/pmc4PrfEIOZfY0qWJtB2pDe9qcyGWvmG8vr42X+1mlseGhZBpPN2OQjKHFGu9i21GZaC8t/MnzQgIJAlpkiw1Loyaz0XE/ZDGDIsih12s6KNYyEAdQ/pEnMZftGovREM2y8plH7OMUYIT+gur+tyCmGdRI0jiLKdinn6YhIkUsA4bohPTYV80o07tTKAaw5xjnc+xucOawgxyYAQaD9NhV/tyXtfKrfc5ZnyW5SmvL/8bH2BrSLIlRDrfp7Wjdj7giUr1LoD4Q0aSgtM1jNWwLjEBvusmkPOhGpMcZnQzolwO6IYrdsYhvaPlthoDGgMX/6dBB83ZgjzipIDeLPh2nWbBQ+tt8KdxfTtb3sXO9OHyr5vRc7ckcOhcGqrWbpdHQ1kN0XZH+GNCFihdvbnX9+Lr3WbxEAY39uLueYTssQjk+QhurkaG89Ue5TcM8n5o3E1Ch1qPi2e78/xwOR1b3F2srOdfP+x4nvDHp+vb4OfEfBreBKsRtFdR0hnm7Dre/DL763Y/tJ+9NR7D09e39Pu3YJZ9L8I+nrBlPI+Hg0GWj6PF95Slk5/jJxsNnjyB12gRf+O33SqdA/512/7Mh8XLAojYL9UYDAeNK9klLD4XM2WhkT4rXf2lEh8ugAmtp3Yp7fALKXc08mUPt2uzbTmtvjvot68888pqX6KWbV92OuYVCuS/f+xFZsviiGI/YzOqYinJ3Y7N5wRJ6nNgEeT6Oiuk0nHtE8QBFrgxZFN5CDLG4T7rarjd9kgHeTp5QS3dwfLPC8CLboEXyTPecdvQ0hrjTNyxuzyYCcjr6typqfMUCF1SUBKuJpzLEedCVmWF14VIzOYaNxkUUuRzpbe+5bRbBqfpMgHF2UizqEiguZwvyxoZfPtr6Zjw0mp6befSsty+17cHqGWVtR1sa+vYnlceyg/TP/62r5T0iahy4CrRP0B2G07cQWif5btquCfvqj18UERUnT9ZdpFTsmVS//R7mtQYVaM0vbzfU648jw01VOM4oSpQtKakOg/VrS7FXspDb9+rFTabq2axXhdlexzHNnIJb0g1NI0QSCHV6+0++wnMqCCMs66KivVR5Mpe51eIOQsFFpDKWWqUyzPeBiFw9TYYyuOwOffhUQsp6yZgI07Z+ol81yjGnz59iE+UnzRP5M9rlke/23UC6yCOzFM+DQRlsVqpa+Ltg6EgmYSlUuCy/BD8FMCp4HVjVeSKi5DT9FII+PhLQymXVA5CsoKJ4UArDYdqWvIUb0vwfzu9gykFu3rB0X9/wum0HAEC8t3HaYmvLmJfzT+LDxR5F/QDUXY/E+U6u94783vLQZ2OZ7z3Dw==</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>D261A6199541A815E0401F0A07990F36</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_004_DTCreate_Verify_UUID_status_for_deletion_of_ULC</con:value></con:property><con:property><con:name>sName</con:name><con:value>3_DTCreate_and_SAML_Exchange_FUNC</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:18245C6DC8F71F28E0533E991F0A053B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:18245C6DC8F61F28E0533E991F0A053B</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
    <Error ErrorID="urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired">
        <Reason Language="en">The setting of the ManageAccountConsent policy prevents the requested action from being completed.</Reason>
        <OriginalRequest>http://lp2.qa-api-vip1-s01.uvvu.com:8009/rest/1/11/Account/urn:dece:accountid:org:dece:0FE6568B150E175FE05305991F0A76DE/User/urn:dece:userid:org:dece:0FE6568BFE221763E05305991F0A4E84/Policy/urn:dece:policyid:org:dece:0FE656AC7B6462B5E05307991F0A226A</OriginalRequest>
        <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/11/error/en/ErrorList.html#Policy:ManageAccountConsentRequired</ErrorLink>
    </Error>
</ErrorList>
]]></con:value></con:property><con:property><con:name>PolicyClass</con:name><con:value>UserLinkConsent</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5935459c-5982-4cb1-9974-1d4d88038a65</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9bbb88e5-07dd-4d4f-ba3c-1c734ce9be3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenGet API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="9f2b0466-4b7c-43ac-b7a8-5b34f0e87ba9">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="b7ac4020-f7c6-4560-a54a-850a0812c264">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("endPoint",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("expectErrTypeRightsTokenCreate",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenFULL",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="587ac6bc-8689-4ab0-ad8b-cf2016d791af">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("rightstokenFULL",callTC.getPropertyValue("rightstokenFULL"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("assert",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("expectErrTypeRightsTokenCreate",callTC.getPropertyValue("expectErrTypeRightsTokenCreate"));

log.info "expectErrTypeRightsTokenCreate: "+tC.getPropertyValue("expectErrTypeRightsTokenCreate");
if (tC.getPropertyValue("expectErrTypeRightsTokenCreate") == null || tC.getPropertyValue("expectErrTypeRightsTokenCreate") == "null"|| tC.getPropertyValue("expectErrTypeRightsTokenCreate") == "") {
		tC.setPropertyValue("expectErrTypeRightsTokenCreate","RightsTokenNotFound");
}
if (tC.getPropertyValue("rightstokenFULL") == null || tC.getPropertyValue("expectErrTypeRightsTokenCreate") == "null" ) {

	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
		tC.setPropertyValue("rightstokenFULL","urn:dece:rightstokenid:org:dece:D3CD9D93C110059998E0401F0A07992FB8");
	}else{
		tC.setPropertyValue("rightstokenFULL", URLEncoder.encode("urn:dece:rightstokenid:org:dece:D3CD9D93C110059998E0401F0A07992FB8", "UTF-8"));
	}
		
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish attributes based on NodeID" id="f6a5d494-4424-4a2b-8997-63a3508d7d3a">
        <con:settings/>
        <con:config>
          <script>import java.util.StringTokenizer; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String NODE_ID = tC.getPropertyValue("NODE_ID").toString();

/*
*  See if we are a device
*/
switch (NODE_ID) {
	case tP.getPropertyValue("nodeIdDEV").toString():
		urlEndPoint = "device";
		tC.setPropertyValue("isDeviceFlag","true");
		break;
	default:
		urlEndPoint = "coordinator";
		tC.setPropertyValue("isDeviceFlag","false");
		break;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Construct URL" id="1db42d67-4f76-454d-9f01-cc4626f71458">
        <con:settings/>
        <con:config><script>import java.util.StringTokenizer; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

Boolean appliedFirstNode = false;
String url = "";
String anode = "";
String urlEndPoint = "";
String NODE_ID = tC.getPropertyValue("NODE_ID").toString();

log.info "NODE_ID[$NODE_ID]";

if (tC.getPropertyValue("isDeviceFlag") == "true") {
	urlEndPoint = "device";
}

log.info "urlEndPoint: " + urlEndPoint;

/*
*  Set the endpoint
*/
switch (urlEndPoint) {
	case "device":
	tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));
			url =  
			"rest/" + tP.getPropertyValue("versionMajor").toString() +
			"/" + tP.getPropertyValue("versionMinor").toString() +
			"/Account/"+tC.getPropertyValue("NODE_ACCOUNT_ID_FULL")+
			"/RightsToken/"+
			tC.getPropertyValue("rightstokenFULL");
		break;
	case "coordinator":
	default:
	tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));
		url =
			"rest/" + tP.getPropertyValue("versionMajor").toString() +
			"/" + tP.getPropertyValue("versionMinor").toString() +
			"/Account/" +
			tC.getPropertyValue("NODE_ACCOUNT_ID_FULL") +
			"/RightsToken/" +
			tC.getPropertyValue("rightstokenFULL");
	break;
}

log.info "url[$url]";
tC.setPropertyValue("endPoint","$url");
//testRunner.testCase.getTestStepByName('GET - RightsTokenGet').httpRequest.setEndpoint(url)</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PEM Set" id="6ce6d9c2-969e-48b4-b0bb-abc6387bd5b8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID_",tC.getPropertyValue("NODE_ID_"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - RightsTokenGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="GET - RightsTokenGet" id="400d8f84-f777-49a0-8b85-7a5c126c3309"><con:settings/><con:config service="Rights Token" resourcePath="/${#TestCase#endPoint}" methodName="Rights Token Get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - RightsTokenGet" mediaType="application/xml;charset=UTF-8" sslKeystore="RET_concat.pem" accept="" id="66acc5f8-954d-424c-9eea-5a622c65c328"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#assert}"/>
  &lt;con:entry key="x-dece-ApplicationAuthorization" value="dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>https://${#Project#targetURL}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract response Headers and Body" id="555043a9-4266-44ad-b4e0-c04fb2bdd122">
        <con:settings/>
        <con:config><script>import org.xml.sax.SAXException; 
import org.xml.sax.SAXParseException; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep = tC.getTestStepByName('GET - RightsTokenGet');
def myXML;

tC.setPropertyValue("respbody",null);
tP.setPropertyValue("targetURL","qa.p.uvvu.com:7001");

int errSize = 0;
int i = 0;
boolean expectLocation = null;
String xmlData = "";
String errId = "";
String respstatus = null;
String respconnection = null;
String respcontentType = null;
String respcontentLength = null;
String respLocation = null;
String respbody = null;
String expectstatus = null;
String expectconnection = null;
String expectcontentType = null;
String expectcontentLength = null;
String urnError = tP.getPropertyValue("urnError").toString();
String expectErrorResponse = tC.getPropertyValue("expectErrTypeRightsTokenCreate").toString();
String major = tP.getPropertyValue("versionMajor").toString();
String minor = tP.getPropertyValue("versionMinor").toString();


try {
	respbody = tStep.httpRequest.response.getResponseContent().toString();
} catch (e) {
	log.info "getResponseContent failure! - $e";
} finally {
	tStep.httpRequest.response.responseHeaders.each() { header, value ->
		switch (header) {
			case "Location": 
				respLocation = value[0];
				break;
			case "#status#": 
				respstatus = value[0]; 
				break;
			case "Connection": 
				respconnection = value[0]; 
				break;
			case "Content-Type": 
				respcontentType = value[0]; 
				break;
			case "Content-Length": 
				respcontentLength = value[0]; 
				break;
			case "Transfer-Encoding": 
				resphttpContentEncoding = value[0]; 
				break;
		}
	}
}

log.info "expectErrorResponse -- [$expectErrorResponse]";

switch (expectErrorResponse) {
	case "SUCCESS":
		expectstatus = "HTTP/1.1 200 OK";
		errorID = "";
		break;
	case "AccountNotActive":
		expectstatus = "HTTP/1.1 403 Forbidden";
		errorID     = urnError + expectErrorResponse;
		break;
	case "UserNotActive":
		expectstatus = "HTTP/1.1 403 Forbidden";
		errorID     = urnError + expectErrorResponse;
		break;
	case "RoleInvalid":
		expectstatus = "HTTP/1.1 403 Forbidden";
		errorID     = urnError +"Security:" +expectErrorResponse;
		break;
		case "InvalidAssertion":
		expectstatus = "HTTP/1.1 403 Forbidden";
		errorID     = urnError + "securitycontext:unauthorized";
		break;
		case "unauthorized":
		expectstatus = "HTTP/1.1 403 Forbidden";
		errorID     = urnError + "securitycontext:"+expectErrorResponse;
		break;
	case "RightsTokenNotFound":
	default:
		expectstatus = "HTTP/1.1 404 Not Found";
		errorID     = urnError + expectErrorResponse;
		break;
}

/*
*  HTTP Header Checkes...
*/
log.info "----- HTTP Header Validations ------";

log.info "expectstatus[$expectstatus] - respstatus[$respstatus]";
assert expectstatus == respstatus;

/*
*   -------------------- ERROR --------------------
*/
if (tC.getPropertyValue("expectErrorResponse") != "SUCCESS") {
	tC.setPropertyValue("respbody",respbody);
	try {
		myXML = new XmlSlurper().parseText(respbody);
	} catch (IOException e) {
		log.info "ERROR!  XmlSlurper.parseText IOException error -- $e";
	} catch (SAXException e) {
		log.info "ERROR!  XmlSlurper.parseText SAXException error -- $e";
	}
	finally {
		log.info "-----  HTTP BODY VERFICATION for ERROR -------";

		String respErrorID = myXML.Error[0].@ErrorID.toString();

		// ErrorCode
		this.log.info "Expected errorID [$errorID] - respErrorID[$respErrorID]";
		assert errorID == respErrorID;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify &lt;RightsTokenList> AccountID" id="e66f6256-536a-4d16-97c6-773d4fe7088e">
        <con:settings/>
        <con:config><script>import org.xml.sax.SAXException; 
import org.xml.sax.SAXParseException; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;

String accountid = tC.getPropertyValue("assertionAccountIdFULL").toString();
String userid = tC.getPropertyValue("assertionUserIdFULL").toString();

if (tC.getPropertyValue("expectErrTypeRightsTokenCreate") == "SUCCESS") {
	String respbody = tC.getPropertyValue("respbody").toString();
	
	assert accountid.length() > 0;
	assert respbody.length() > 0;
	
	try {
		myXML = new XmlSlurper().parseText(respbody);
	} catch (IOException e) {
		log.info "ERROR!  XmlSlurper.parseText IOException error -- $e";
	} catch (SAXException e) {
		log.info "ERROR!  XmlSlurper.parseText SAXException error -- $e";
	}
	finally {
		/*
		*  They remove user and account info from RTGet  :(
		*/
	}
}
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=nVbbcuI4EP0VyvOYMr4SG1eginDJMgkzBBgm4WVLltugiS0TSzZMvn4lAx5MSJbdJ5fardNH3a2jvmEojkyvwxiknCS0to0jyrzC2lKylHoJYoR5FMXAPI69aWf04Jl13UOHLUpt2Gspf2PXR3CNbdUMbF+1Hd9Xmwb4qovAN0AP7BC7wpWxDIaUcUR5SzF1o6Hq16qhz3TbMxzPdOsN01wotTmkTGALl7qu7EltWUtZcb72NG2z2dQ3Vj1Jl5qp64b2NHqY4hXESGnf7E5UBErbe39cDwBDFOE6TmLtRqv43ATMm5IlRTxLYR8r+CiWrulNTfgEjCy/KOVeCIY0TIplF9GEEowi8oZkfkbAV0lQ60TLJCV8FX94CEOXwCpssYoNm35RtCq1C4EqDFOGVLZCxh5rAiGkQDHUfkyGLeXLZVUrts5SRFmYpDGrLv8bH6A5RMkaApUdjrWndjngmUy1bwB7Q4qjjJEcvslmXSMMbF9NwJdD1cYphGT7QJho0C2T7LRjeifLXTZ6ZAmM/58CHRVnBzJHUQbtsDu18ej1x3yaOfdX7miUThuDn/Z0/thpFQSOnQtDWdrd8qQpyyba7bh7Xrzl5K/FPfidpxdzdXcFTzlfGE5Hf+b+2Hns8Ykz07emb941brkPGV6Yt8ufs0HY3X6dPIxoYs7N+/FL6uZja70ehyS4v2Kvdp9r5KsfLBd3zyPjbRbb8bY5MOjVarC5Miwnv3roO86iRzrP/WFnsvm1upu/zvHkGcfr+xXLb5Mfj91nd8Eam4x9w2NjilvlcY74V22HOz/N/F+A+WEp22DYqw1ElRD/XMykhQRqWLh6ayk+jAPlSlvuktrhZULuSOCJGu7WhmuaA8twB87AunacQV9vWFa/2TQGesdyu7cHkdmxOKHYTWhIZCwpubu2+Zwgjj0GNIBUzZNMKB1TPkHsIY5qQzoRlyChDGZJS3EC8O3rAKuW4xuq7Qa+6jfDpuoG2DdCP2yYYCm1bwn/Tr+nnZBDWlVnp6LOE8BkTUBKuOxwJlqccZGVV5RnPDLqOapTyITIp1JvPdN2Gxoj8ToCyVmLkyCLoL5erYscaWz3NVWEWWE1HNfum+Z11+laPb1hFrnt7XJrW45TXMoPj3/675Ap4RMQ6cDkQW9BVBvOvEHG4ZTvsnF99q06wHeygMj7J9LOU4J3TKq//nSTbKOylSb92YFy6XlqqKBqpwcqAwU5weV9KF91IfZCHtqHWr0io/5az/I8K8pj25aWCnhNqKGhTQFnQr1+z5IXoFoJoV30VJSsTyKX9iq/jK/olCMOseilWrG8YDaYApOzwVBch+2lg0clpMgbhy0/Z+tGYq6RjD8dfbCHpZ8wj8Vnk6TBn3KdwTqKI84pRgNO6FKu5DPx+4OmwImAJULgkvQY/BzAueBVY5nkkgsX3eRnHD7+U5PK1VIQxklG+bCnFIZjNS148t9r8P44vYMpBLuc4Mi/j3AqKVoAg5j7GCnw5UPsyf6nyyNF3gf9QJTNz0S5yq79zvzecpSn0x5v/wM=</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE4D562F749DAA667E0401F0A059948E2</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:E4D56C0148D5ED03E0401F0A05995A44</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RightsTokenNotFound</con:value>
        </con:property>
        <con:property>
          <con:name>isDeviceFlag</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>NODE_ID</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86720</con:value>
        </con:property>
        <con:property>
          <con:name>respbody</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:RightsTokenNotFound">
      <Reason Language="en">The rights token was not found.</Reason>
      <OriginalRequest>http://qa1.p.uvvu.com:443/rest/1/11/Account/urn:dece:accountid:org:dece:1822F318F7F2677FE0533E991F0A38CB/RightsToken/urn:dece:rightstokenid:org:dece:D3CD9D93C110059998E0401F0A07992FB8</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/1/11/error/en/ErrorList.html#RightsTokenNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>3_DTCreate_and_SAML_Exchange_FUNC</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_027_DTCreate_DelegationToken_Create_followed_by_STS_Create</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:D3CD9D93C110059998E0401F0A07992FB8</con:value>
        </con:property>
      <con:property><con:name>endPoint</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">rest/1/11/Account/urn:dece:accountid:org:dece:1822F318F7F2677FE0533E991F0A38CB/RightsToken/urn:dece:rightstokenid:org:dece:D3CD9D93C110059998E0401F0A07992FB8</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1822F318F7F2677FE0533E991F0A38CB</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreate API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6e366074-defb-48f0-a596-6caf2bb26ab9">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="074b8d8d-9968-469f-a777-4051c530b99a">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assert",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("expectErrTypeRightsTokenCreate",null);
tC.setPropertyValue("cid",null);
tC.setPropertyValue("alid",null);
tC.setPropertyValue("rightstokenid",null);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="803cb9d1-5c5c-41a8-8ffb-6d9215e2b453">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("USER_OID",callTC.getPropertyValue("USER_OID"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("SAML"));

tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("expectErrTypeRightsTokenCreate",callTC.getPropertyValue("expectErrTypeRightsTokenCreate"));
tC.setPropertyValue("cid",callTC.getPropertyValue("cid"));
tC.setPropertyValue("alid",callTC.getPropertyValue("alid"));

if (tC.getPropertyValue("cid") == null || tC.getPropertyValue("cid") == "null") {
	tC.setPropertyValue("cid",tP.getPropertyValue("cid"));
}
if (tC.getPropertyValue("alid") == null || tC.getPropertyValue("alid") == "null") {
	tC.setPropertyValue("alid",tP.getPropertyValue("alid"));
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PEM Set" id="801f434e-86ff-48ff-9390-cb6d9d30753a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID_",tC.getPropertyValue("NODE_ID_"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - RightsTokenCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="POST - RightsTokenCreate" id="004c3a64-b773-4548-ba16-9f64997e99fc"><con:settings/><con:config service="Rights Token" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{RIGHTSTOKEN}/RightsToken" methodName="Rights Token Create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - RightsTokenCreate" mediaType="application/xml;charset=UTF-8" postQueryString="false" accept="" sslKeystore="RET_concat.pem" id="97a8661c-2bf2-46c2-a242-113b04430639"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="${#TestCase#alid}" ContentID="${#TestCase#cid}">
                <ns4:SoldAs>
                                <ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName>
                                <ns4:ContentID>${#TestCase#cid}</ns4:ContentID>
                </ns4:SoldAs>
                <ns4:RightsProfiles>
                                <ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
                                                <ns4:CanDownload>true</ns4:CanDownload>
                                                <ns4:CanStream>true</ns4:CanStream>
                                </ns4:PurchaseProfile>
                                <ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
                                                <ns4:CanDownload>true</ns4:CanDownload>
                                                <ns4:CanStream>true</ns4:CanStream>
                                </ns4:PurchaseProfile>
                                <ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd">
                                                <ns4:CanDownload>true</ns4:CanDownload>
                                                <ns4:CanStream>true</ns4:CanStream>
                                </ns4:PurchaseProfile>
                </ns4:RightsProfiles>
                <ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc>
                <ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentWebLoc>
                <ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentWebLoc>
                <ns4:FulfillmentManifestLoc xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location>
                                <ns4:Preference>3</ns4:Preference>
                </ns4:FulfillmentManifestLoc>
                <ns4:FulfillmentManifestLoc  xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentManifestLoc>
                <ns4:PurchaseInfo>
                                <ns4:NodeID>urn:dece:org:org:dece:${#TestCase#NODE_ID}</ns4:NodeID>
                                <ns4:RetailerTransaction>RetailerTransaction_1_node0799_RetailerNode</ns4:RetailerTransaction>
                                <ns4:PurchaseAccount>${#TestCase#assertionAccountIdFULL}</ns4:PurchaseAccount>
                               <ns4:PurchaseUser>${#TestCase#assertionUserIdFULL}</ns4:PurchaseUser>
                                <ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime>
                </ns4:PurchaseInfo>
</ns4:RightsTokenData>]]></con:request><con:originalUri>https://qa1.p.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:16E4763A53C53362E05305991F0A92B5/RightsToken</con:originalUri><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="RIGHTSTOKEN" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="ef889e1f-7e59-4363-8e7c-dda51ffb240a">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep = tC.getTestStepByName("POST - RightsTokenCreate");
def assertionAccountIdFULL  = tC.getPropertyValue("assertionAccountIdFULL");
def urnRightsToken = tP.getPropertyValue("urnRightsToken");

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String XMLbody = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

if (status == "HTTP/1.1 201 Created") {
	String rightsid;
	String rightsidfull;
	
	def b = contentLocation.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}
	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
		assert URLDecoder.decode(b.getPath(), "UTF-8").matches("/rest/$major/$minor/Account/$assertionAccountIdFULL/RightsToken/$urnRightsToken.*");
		int lastSlash = urlStr.lastIndexOf('/');
		int lastColon = urlStr.lastIndexOf(':');
		rightsidfull = urlStr.substring(lastSlash + 1);
		rightsid = urlStr.substring(lastColon + 1);
		log.error rightsidfull
		tC.setPropertyValue("rightstokenid",rightsid);
		tC.setPropertyValue("rightstokenFULL",rightsidfull);	
	}else{
		assert URLDecoder.decode(b.getPath(), "UTF-8").matches("/rest/$major/$minor/Account/$assertionAccountIdFULL/RightsToken/$urnRightsToken.*");
		int lastSlash = urlStr.lastIndexOf('/');
		int lastColon = urlStr.lastIndexOf('%3A');
		rightsidfull = urlStr.substring(lastSlash + 1);
		rightsid = urlStr.substring(lastColon + 3);
	
		tC.setPropertyValue("rightstokenid",rightsid);
		tC.setPropertyValue("rightstokenFULL",rightsidfull);	
	}
	

	log.info "rightsidfull[$rightsidfull] - rightstokenid[$rightsid]";
}

/*
*  Extract the response body
*/
log.info "contentLength[$contentLength]";


	rawResp = new ByteArrayOutputStream();
	rawResp = tStep.httpRequest.response.getRawResponseData();
	strVal  = new String(rawResp);
	
	log.info "strVal[$strVal]";

	int xmlStart = strVal.indexOf("&lt;?xml version=\"1.0\" ");
	log.info "XML body received : " +  xmlStart
	if(xmlStart>=0)
	{
		XMLbody  = strVal.substring(xmlStart, strVal.length());
		log.info "strVal[$strVal]";
		log.info "XMLbody[$XMLbody]";
	}

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers" id="9c746a85-89d0-41b1-ae76-1d524442bb3a">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url           = tP.getPropertyValue("targetURL");
def urnacct       = tP.getPropertyValue("urnaccount");
def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrTypeRightsTokenCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

String expectErrorReason = "";

if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {

	
	case "unauthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectErrorReason = "The request is not authorized.";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = true;
		doContentLocaton  = true;
		doContentTypeHeader = true;
		doConnectionClose   = true;
		dobodyXML = false;
	break;
	case "SecTokenMergeReplacementRequired:1125":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectErrorReason = "The security token replacement is required.";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		doConnectionClose   = true;
		dobodyXML = true;
	break;
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectErrorReason = "I";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = true;
		doContentLocaton  = true;
		doContentTypeHeader = true;
		doConnectionClose   = true;
		dobodyXML = false;
	break;
	case "ASSERTION_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectErrorReason = "Assertion_Not_Found";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		doConnectionClose   = true;
		dobodyXML = true;
		break;
	case "STREAM_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectErrorReason = "Stream handle not found";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		doConnectionClose   = true;
		dobodyXML = true;
	break;
	case "USER_NOT_ACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectErrorReason = "User is not active";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		doConnectionClose   = true;
		dobodyXML = true;
	break;
	case "INVALID_ACCOUNT_ID":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		expectErrorReason = "Invalid Account ID";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		doConnectionClose   = true;
		dobodyXML = true;
	break;
	case "NODE_NOT_ACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectErrorReason = "Node_status_inactive";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		doConnectionClose   = true;
		dobodyXML = true;
		break;
	case "API_NOT_AUTHORIZED":
	default:
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectErrorReason = "API call not authorized";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		doConnectionClose   = true;
		dobodyXML = true;
	break;
	
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection
//
//if (doConnectionClose) {
//	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
//	assert tC.getPropertyValue("connection") == expectHTTPconnection;
//}

//Content-Length
//if (contentLengthZero) {
//	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
//} else {
//	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
//}
	

//if (doContentTypeHeader) {
//	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
//}

// Content-Location

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size()   == 1;
		assert myXML.Error.ErrorLink.size()  == 1;
				
		// ErrorReason
		this.log.info "ErrorReason: Expect[$expectErrorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == expectErrorReason;
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Fetch RIGHTS_TOKEN Row" disabled="true" id="f369a85b-6c47-41b9-a63b-eaaf0c7eccf0">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

tC.setPropertyValue("rightstokenRow",null);

String data = "";
if (tC.getPropertyValue("expectErrTypeRightsTokenCreate") == "SUCCESS"){
try {
	dbUtils = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbRightsToken - $e";
	assert 1 == 2;
}
finally {
	data = dbUtils.rightstokenGetRow(tC.getPropertyValue("rightstokenid").toString());

	assert data.length() > 0;

	tC.setPropertyValue("rightstokenRow",data);
}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RIGHTS_TOKEN.ACCOUNT_OID" disabled="true" id="667d90b6-c0ed-4a36-b830-ce91d83a246e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def dbUtils;

String expectAccountId = tC.getPropertyValue("accountoid").toString();
String XMLbody = tC.getPropertyValue("rightstokenRow").toString();
if (tC.getPropertyValue("expectErrTypeRightsTokenCreate") == "SUCCESS"){
try {
	myXML = new XmlSlurper().parseText(XMLbody);
}
catch(Throwable e) {
	log.info "ERROR - XmlSlurper - $e";
	assert 1 == 2;
}
finally {
	String accountoid = myXML.ResultSet.Row[0].ACCOUNT_OID.text();

	log.info "Assert Received [$accountoid] == Expected [$expectAccountId]";

	assert expectAccountId == accountoid;
}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RIGHTS_TOKEN.USER_OID" disabled="true" id="c5058ef1-f4d5-4fe8-a6de-d29e35309e6d">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def dbUtils;

String expectUserId = tC.getPropertyValue("USER_OID").toString();
String XMLbody = tC.getPropertyValue("rightstokenRow").toString();
if (tC.getPropertyValue("expectErrTypeRightsTokenCreate") == "SUCCESS"){
try {
	myXML = new XmlSlurper().parseText(XMLbody);
}
catch(Throwable e) {
	log.info "ERROR - XmlSlurper - $e";
	assert 1 == 2;
}
finally {
	String USER_OID = myXML.ResultSet.Row[0].USER_OID.text();

	log.info "Assert Received [$USER_OID] == Expected [$expectUserId]";

	assert expectUserId == USER_OID;
}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RIGHTS_TOKEN.CREATED_BY" disabled="true" id="a52a5b3c-4261-4460-ac2b-40778ed089d9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def dbUtils;

String expectNodeId = tC.getPropertyValue("NODE_ID").toString();
String XMLbody = tC.getPropertyValue("rightstokenRow").toString();
if (tC.getPropertyValue("expectErrTypeRightsTokenCreate") == "SUCCESS"){
try {
	myXML = new XmlSlurper().parseText(XMLbody);
}
catch(Throwable e) {
	log.info "ERROR - XmlSlurper - $e";
	assert 1 == 2;
}
finally {
	String NODE_ID = myXML.ResultSet.Row[0].CREATED_BY.text();

	log.info "Assert Received [$expectNodeId] == Expected [$NODE_ID]";

	assert expectNodeId == NODE_ID;
}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return RightsToken" id="cc6c9a48-c783-456a-894e-9d544e0f0df5">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("rightstokenid",tC.getPropertyValue("rightstokenid"));
callTC.setPropertyValue("rightstokenFULL",tC.getPropertyValue("rightstokenFULL"));
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value>SAML2 Assertion=nVZtU+o6EP4rTP3olL5CS0eYQQpHHFCPcET8ciekC0RLWpoU0F9/kgKVInq591Mn282zT3Y3T/aKoUVoek3GIOEkoqXNIqTMy6x1JU2oFyFGmEfRApjHsTdo9nueWdY9tN+ilLp+Xfmn6gSGYwSO6thmTbVNq6a6ABPVsiemW6saJq64wpWxFLqUcUR5XTF1o6LqVdXQh7rtmaZnVMuu7b4opSdImMAWLmVd2ZHasLoy5zz2NG29XpfXVjlKZpqp64b23O8N8BwWSGlcbU+UBUoaO39cDgBDGOIyjhbalVbwuQqYNyAziniawC5W8F0sXdNrmvAJGJldKPleCLp0GmXLFqIRJRiF5APJ/PSBz6Og1AxnUUL4fPHtIQxdAquwwSo2bHqhaEVqZwIVGCYMqWyOjB3WI0whAYqh9OexW1cuzqtatnWYIMqmUbJgxeV/4wN0BWEUQ6Cy/bF21M4HPJGpxhVgr0txmDKygjvZrDHCwHbVBHw+VOkhgSnZ9AgTDbphkp12SO9ouc2GT2bA+P8p0EFxtiBPKEyhEd2Tl+V4cWf50dP4Q/c1fVi90Z8urZlbzwgcOmeGvLTb5VFT5k203dFrRfFkTR4++MPDh+88Xyb30Jtco4+XeD7XWNh6pfB692yTcUyqy5k/7Y07KxLc3I7v2I0fvFc7m0qvrw9odU5+PXTTe3fcAtrsxC/PnY/lHfB2ett+qUCbjNwRzPhLzdpQDr+dyxZNeulzp91z7OF8ubld9x77hp1qm7cR/m0+uX+YW/nlN0d6moxg1Nff6vlxDvgXbfs7P0gnr4D5finboOuXOqJKiP8sZtJCAnWauXqxFB/GgXKlIXdJ7fBSIXck8EQNt2vDNc2OZbidmmNXHafT1iuW1a7VjI7etNzW9V5ktiyOKLYiOiUylpTcbdv8TBAvPAY0gERdRalQOqb8gOgjjkpd+iguQUQZDKO6MnUM13aCimoaurjnk4muTmquo1ZrhjOdWsbEqUyU0l3E7+l90pxySIrq7BTU+REwiQlICZcdzkSLMy6yskSrlIdGeYXKFFIh8onUW8+03YrGyCIOQXLWFlGQhlCO53GWI41tv6aKMMushuPabdOstpyW5esVM8utv82tbTlOdim/Pf7xv32mhE9ApAOTB70GUW048Qbp+1N+yUb15Fu1h2+mAZH3T6SdJwRvmRR/fXaTbKO8lR7bwz3l3PPYUEDVjg+UBwpWBOf3IX/VhdgLeWjsa7VERnlZTlerNCuPbVtaIuA1oYaGNgCcCvV6H0ZvQLUcQjvrqchZH0XO7UV+KZ/TAUccFqKXStnyjNlgAEzOBl1xHTbnDh6FkCJvHDb8lK0VirlGMv5x9MEeln7C/CA+6ygJPst1AusgjjinGA04oTO5ks/E+zdNgSMBS4TARckh+CmAU8GLxjzJORcuummScvj+T0kqV11BGEcp5V1fyQyHaprx5O8xeJ9OX2Aywc4nOPLvI5xKshbAIOY+RjJ8+RB7sv/p7ECRd0G/EWXrJ1Eusmt8MX+1HOTpuMcbfwE=</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D8E50061708A44B2E0401F0A059914FE</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:1822F318F973677FE0533E991F0A38CB</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D8E50F25C2D50E93E0401F0A05993B53</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:1822F318F974677FE0533E991F0A38CB</con:value>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value>close</con:value>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value>application/xml; charset=UTF-8</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>NODE_ID</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>3_DTCreate_and_SAML_Exchange_FUNC</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value>HTTP/1.1 404 Not Found</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_011_DTCreate_with_ULC_at_Org_level_Requesting_with_previously_requested_node</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
    <Error ErrorID="urn:dece:errorid:org:dece:ContentIDNotFound">
        <Reason Language="en">The content ID was not found.</Reason>
        <OriginalRequest>http://qa1.p.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:1822F318F973677FE0533E991F0A38CB/RightsToken</OriginalRequest>
        <ErrorLink>https://qa1.q.uvvu.com/rest/1/11/error/en/ErrorList.html#ContentIDNotFound</ErrorLink>
    </Error>
</ErrorList>
]]></con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86719</con:value>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_740255950.txt</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_237864210.txt</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenRow</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>USER_OID</con:name>
          <con:value>1822F318F97D677FE0533E991F0A38CB</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenFULLid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:AAA17EE0BE7CCEC4E0401F0A059902A0</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenFULL</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:16E79A13B7B43722E05305991F0AEC63</con:value>
        </con:property>
      <con:property><con:name>enassertionAccountIdFULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8E50061708A44B2E0401F0A059914FE</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>1822F318F974677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:1822F318F974677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1822F318F973677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1822F318F973677FE0533E991F0A38CB</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS API - Invoked to Coordinator URL on sHost" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="11ee1195-a8d6-47ac-af24-870040678e4a">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="9f93ca6f-bd70-4548-a574-835d252b9858">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("actionAuthHeader",null);
tC.setPropertyValue("actionDeviceAuthHeader",null);
tC.setPropertyValue("deviceAuthHeaderValue",null);
tC.setPropertyValue("endPoint",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("NODE_IDFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("scenario",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("stsRequestBodyNULL",null);
tC.setPropertyValue("stsRequestUserNameFlag",null);
tC.setPropertyValue("expectErrType",null);
tC.setPropertyValue("expectCreateExpireHoursDiff",null);
tC.setPropertyValue("expectNodeUserRowCount", null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("stsExpire",null);
tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("stsaudience",null);
tC.setPropertyValue("stsduration",null);
tC.setPropertyValue("stsaudienceIgnoreAll",null);
tC.setPropertyValue("stsaudienceIgnoreNodes",null);
tC.setPropertyValue("stsaudiencePrefixDelimiter",null);
tC.setPropertyValue("stsaudienceSuffixedDelimiter",null);
tC.setPropertyValue("stsaudienceEmbeddedDelimiter",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("USER_OID",null);
/*
*  stsaudienceIgnoreAll
*    If this is 'true' then I will ignore the incoming 
*    stsaudience list because it will contain invalid
*	nodes which should not be present in the
*	&lt;saml2:AudienceRestriction> list.
*
*  stsaudiencePrefixDelimiter
*	This is used to start the audience parameter value
*	with a ;
*
*  stsaudienceSuffixedDelimiter
*	This is used to suffix the audience paramter value
*	with a ;
*/</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="902d01c1-8782-473d-8852-0f708c71453f">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("actionAuthHeader",callTC.getPropertyValue("actionAuthHeader"));
tC.setPropertyValue("actionDeviceAuthHeader",callTC.getPropertyValue("actionDeviceAuthHeader"));
tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("username",callTC.getPropertyValue("Username"));
tC.setPropertyValue("password",callTC.getPropertyValue("UserPassword"));
tC.setPropertyValue("USER_OID",callTC.getPropertyValue("USER_OID"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));

log.info "versionMinor: "+tP.getPropertyValue("versionMinor");
if (tP.getPropertyValue("versionMinor")!="02"){
	
			tC.setPropertyValue("tokentype",URLEncoder.encode(callTC.getPropertyValue("tokentype"), "UTF-8"));
	
	}else{
				tC.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
			}
			

tC.setPropertyValue("scenario",callTC.getPropertyValue("scenario"));
tC.setPropertyValue("deviceAuthToken",callTC.getPropertyValue("deviceAuthToken"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));

if (tC.getPropertyValue("expectErrType") == "" || tC.getPropertyValue("expectErrType") == null) {
	tC.setPropertyValue("expectErrType","SUCCESS");
}
tC.setPropertyValue("stsRequestBodyNULL",callTC.getPropertyValue("stsRequestBodyNULL"));
tC.setPropertyValue("stsRequestUserNameFlag",callTC.getPropertyValue("stsRequestUserNameFlag"));
tC.setPropertyValue("stsAction",callTC.getPropertyValue("stsAction"));
tC.setPropertyValue("stsExpire",callTC.getPropertyValue("stsExpire"));
tC.setPropertyValue("USER_OID",callTC.getPropertyValue("USER_OID"));
tC.setPropertyValue("expectCreateExpireHoursDiff",callTC.getPropertyValue("expectCreateExpireHoursDiff"));


tC.setPropertyValue("stsaudience",callTC.getPropertyValue("stsaudience"));

tC.setPropertyValue("stsduration",callTC.getPropertyValue("stsduration"));
tC.setPropertyValue("stsaudienceIgnoreAll",callTC.getPropertyValue("stsaudienceIgnoreAll"));
tC.setPropertyValue("actionSkipPolicyCheck",callTC.getPropertyValue("actionSkipPolicyCheck"));
tC.setPropertyValue("stsaudiencePrefixDelimiter",callTC.getPropertyValue("stsaudiencePrefixDelimiter"));
tC.setPropertyValue("stsaudienceSuffixedDelimiter",callTC.getPropertyValue("stsaudienceSuffixedDelimiter"));
tC.setPropertyValue("stsaudienceIgnoreNodes",callTC.getPropertyValue("stsaudienceIgnoreNodes"));
tC.setPropertyValue("stsaudienceEmbeddedDelimiter",callTC.getPropertyValue("stsaudienceEmbeddedDelimiter"));
tC.setPropertyValue("stsSkipLastLoginCheck",callTC.getPropertyValue("stsSkipLastLoginCheck"));
tC.setPropertyValue("expectNodeUserRowCount",callTC.getPropertyValue("expectNodeUserRowCount"));

if (tC.getPropertyValue("stsRequestUserNameFlag") == null ||
	tC.getPropertyValue("stsRequestUserNameFlag") == "") {
		tC.setPropertyValue("stsRequestUserNameFlag",null);
}
if (tC.getPropertyValue("expectNodeUserRowCount") == null ||
	tC.getPropertyValue("expectNodeUserRowCount") == "") {
		tC.setPropertyValue("expectNodeUserRowCount","0");
}
if (tC.getPropertyValue("stsAction") == null ||
	tC.getPropertyValue("stsAction") == "") {
		tC.setPropertyValue("stsAction",null);
}
if (tC.getPropertyValue("stsExpire") == 'null' ||
	tC.getPropertyValue("stsExpire") == "") {
		tC.setPropertyValue("stsExpire","2012-06-30T09:40:39.0Z");
}
if (tC.getPropertyValue("stsSkipLastLoginCheck") == null ||
	tC.getPropertyValue("stsSkipLastLoginCheck") == 'null') {
		tC.setPropertyValue("stsSkipLastLoginCheck","false");
}
if (tC.getPropertyValue("actionSkipPolicyCheck") == null ||
	tC.getPropertyValue("actionSkipPolicyCheck") == 'null') {
		tC.setPropertyValue("actionSkipPolicyCheck","false");
}
if (tC.getPropertyValue("expectCreateExpireHoursDiff") == null ||
	tC.getPropertyValue("expectCreateExpireHoursDiff") == "") {
		tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActive"));
}
if (tC.getPropertyValue("NODE_ID") != 'null' || tC.getPropertyValue("NODE_ID") != null) {
		tC.setPropertyValue("NODE_IDFULL", tP.getPropertyValue("urnNode") + tC.getPropertyValue("NODE_ID"));
}
if (tC.getPropertyValue("stsaudienceIgnoreAll") == null ||
	tC.getPropertyValue("stsaudienceIgnoreAll") == 'null') {
		tC.setPropertyValue("stsaudienceIgnoreAll","false");
}
if (tC.getPropertyValue("stsaudiencePrefixDelimiter") == null ||
	tC.getPropertyValue("stsaudiencePrefixDelimiter") == 'null') {
		tC.setPropertyValue("stsaudiencePrefixDelimiter","false");
}
if (tC.getPropertyValue("stsaudienceSuffixedDelimiter") == null ||
	tC.getPropertyValue("stsaudienceSuffixedDelimiter") == 'null') {
		tC.setPropertyValue("stsaudienceSuffixedDelimiter","false");
}
if (tC.getPropertyValue("stsaudienceEmbeddedDelimiter") == null ||
	tC.getPropertyValue("stsaudienceEmbeddedDelimiter") == 'null') {
		tC.setPropertyValue("stsaudienceEmbeddedDelimiter","false");
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Construct STS Request Body" id="0256b5a3-2c54-42ed-ad3c-c799400ea817">
        <con:settings/>
        <con:config><script>import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("stsRequestBody", null);

/*
*  XML namespaces
*/
String saml2pNS = "urn:oasis:names:tc:SAML:2.0:protocol";
String saml2NS = "urn:oasis:names:tc:SAML:2.0:assertion";
String mdNS = "urn:oasis:names:tc:SAML:2.0:metadata";
String deceNS = tP.getPropertyValue("coordinatorSchema").toString();
String saml2pPrefix = "saml2p";
String saml2Prefix = "saml2";
String mdPrefix = "md";
String decePrefix = "dece";
String requestBody = "";
String tokentype = tC.getPropertyValue("tokentype").toString();
String scenario = tC.getPropertyValue("scenario").toString();
String deviceAuthToken = tC.getPropertyValue("deviceAuthToken").toString();
String deviceAuthExpires = tC.getPropertyValue("stsExpire").toString();

def username = tC.getPropertyValue("username").toString();
def password = tC.getPropertyValue("password").toString();


/*
*  Elements
*/
Element root;
Element userName;
Element passWord;
Element devicecode;
Element expires;

//if (tokentype != "urn:dece:type:tokentype:saml2") {
if (scenario == "STSCreate") {
	/*
	*  Create an nice clean dom
	*/
	try	{
		//Create instance of DocumentBuilderFactory
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		//Get the DocumentBuilder
		DocumentBuilder parser = factory.newDocumentBuilder();
		//Create blank DOM Document
		doc = parser.newDocument();
	}
	catch(Exception e) {
		log.info "Error during DocumentBuilderFactory create - " + e.getMessage();
	}
	finally {
		log.info "tokentype: "+tokentype;
		if (tokentype == URLEncoder.encode(tP.getPropertyValue("urntokenType_deviceauthtoken"), "UTF-8").toString() || tokentype == tP.getPropertyValue("urntokenType_deviceauthtoken")) {
			root = doc.createElementNS(deceNS, "DeviceAuthToken");

			/*
			*  DeviceAuthCode element
			*/
			switch (tC.getPropertyValue("stsAction").toString()) {
				case "nullDeviceToken":
					devicecode = doc.createElementNS(deceNS,"DeviceAuthCode");
					Text textdcode = doc.createTextNode("");
					devicecode.appendChild(textdcode);			
					break;
				case "tagTerminatedDeviceAuthCode":
					devicecode = doc.createElementNS(deceNS,"DeviceAuthCode");
					Text textdexpire = doc.createTextNode();
					devicecode.appendChild(textdexpire);
					break;
				default:
					devicecode = doc.createElementNS(deceNS,"DeviceAuthCode");
					Text textdcode = doc.createTextNode(deviceAuthToken);
					devicecode.appendChild(textdcode);
					break;
			}

			/*
			*  Expires
			*/
			switch (tC.getPropertyValue("stsAction").toString()) {
				case "nullExpires":
					expires = doc.createElementNS(deceNS,"Expires");
					Text textdexpire = doc.createTextNode("");
					expires.appendChild(textdexpire);
					break;
				case "tagTerminatedExpires":
					expires = doc.createElementNS(deceNS,"Expires");
					Text textdexpire = doc.createTextNode();
					expires.appendChild(textdexpire);
					break;
				default:
					expires = doc.createElementNS(deceNS,"Expires");
					Text textdexpire = doc.createTextNode(deviceAuthExpires);
					expires.appendChild(textdexpire);
					break;
			}

			/*
			* Add DeviceAuthCode element to tree.
			*/
			if (tC.getPropertyValue("stsAction").toString() != "tagMissingDeviceToken") {
				root.appendChild(devicecode);
			}

			/*
			* Add Expires element to tree.
			*/
			if (tC.getPropertyValue("stsAction").toString() != "tagMissingExpires") {
				root.appendChild(expires);
			}
		} else {
			root = doc.createElementNS(deceNS, "Credentials");
		
			/*
			*  Username
			*/
			switch (tC.getPropertyValue("stsRequestUserNameFlag").toString()) {
				case "stsRequestUserNameFlag":
					userName = doc.createElementNS(deceNS,"Username");
					break;
				case "EMPTY_TAG":
					userName = doc.createElementNS(deceNS,"Username");
					break;
				default:
					userName = doc.createElementNS(deceNS,"Username");
					Text textusername = doc.createTextNode(username);
					userName.appendChild(textusername);
					break;
			};

			/*
			*  Password
			*/
			switch (tC.getPropertyValue("stsAction").toString()) {
				case "EMPTY_TAG":
					passWord = doc.createElementNS(deceNS,"Password");
					break;
				default:
					passWord = doc.createElementNS(deceNS,"Password");
					Text textpassword = doc.createTextNode(password);
					passWord.appendChild(textpassword);
					break;
			}

			/*
			* Add Username element to tree.
			*/
			if (tC.getPropertyValue("stsRequestUserNameFlag").toString() != "excluded") {
				root.appendChild(userName);
			}

			/*
			* Add Password element to tree.
			*/
			if (tC.getPropertyValue("stsAction").toString() != "PASSWD_EXCLUDE") {
				root.appendChild(passWord);
			}
		}
	
		/*
		* Add Credentials element to tree.
		*/
		doc.appendChild(root);
	}

	/*
	* Turn the DOM into a String to display here...
	*/
	TransformerFactory factory = TransformerFactory.newInstance();
	Transformer transformer = factory.newTransformer();
	transformer.setOutputProperty(OutputKeys.INDENT, "yes");
	StringWriter writer = new StringWriter();
	Result result = new StreamResult(writer);
	Source source = new DOMSource(doc);
	transformer.transform(source, result);
	writer.close();
	requestBody = writer.toString();
	this.log.info requestBody;

	tC.setPropertyValue("stsRequestBody", requestBody);
}

/*
*  Override the Property if desired
*/
if (tC.getPropertyValue("stsRequestBodyNULL") == "true") {
	tC.setPropertyValue("stsRequestBody", null);
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish attributes based on Node Role" id="99291a86-c796-410b-a151-90786105db3b">
        <con:settings/>
        <con:config>
          <script>import java.util.StringTokenizer; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String NODE_ID = tC.getPropertyValue("NODE_ID").toString();

/*
*  See if we are a device
*/
switch (NODE_ID) {
	case tP.getPropertyValue("nodeIdDEV").toString():
		urlEndPoint = "device";
		tC.setPropertyValue("isDeviceFlag","true");
		break;
	default:
		urlEndPoint = "coordinator";
		tC.setPropertyValue("isDeviceFlag","false");
		break;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Construct URL" id="7ccca799-30f4-4dc3-8668-328bbb18f4c7">
        <con:settings/>
        <con:config><script><![CDATA[import java.util.StringTokenizer; 
import java.net.URLDecoder;
import java.net.URLEncoder;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

Boolean appliedFirstNode = false;
String url = "";
String anode = "";
String urlEndPoint = "";

String stsaudience = tC.getPropertyValue("stsaudience").toString();

String stsduration = tC.getPropertyValue("stsduration").toString();

String NODE_ID = tC.getPropertyValue("NODE_ID").toString();

log.info "NODE_ID[$NODE_ID]";
log.info "stsduration[$stsduration]";
log.info "stsaudience[$stsaudience]";

if (tC.getPropertyValue("isDeviceFlag") == "true") {
	urlEndPoint = "device";
}

log.info "urlEndPoint: " + urlEndPoint;

/*
*  Set the endpoint
*/
switch (urlEndPoint) {
		case "device":
		tP.setPropertyValue("targetURL","qa.d.uvvu.com:7001");
		if (tC.getPropertyValue("scenario").toString() == "STSCreate"){
			url = 
			"rest/" + tP.getPropertyValue("versionMajor").toString() +
			"/" + tP.getPropertyValue("versionMinor").toString() +
			"/SecurityToken/SecurityTokenExchange" +
			"?tokentype=" + tC.getPropertyValue("tokentype").toString();
		}else if (tC.getPropertyValue("scenario").toString() == "SAMLExchange") {
			url = "rest/" + tP.getPropertyValue("versionMajor").toString() +
				"/" + tP.getPropertyValue("versionMinor").toString() +
				"/SecurityToken/Assertion/" +
				tC.getPropertyValue("assertionUUID").toString() + 
				"/SecurityTokenExchange?tokentype="+tC.getPropertyValue("tokentype").toString();
			} 
		
		break;

	case "coordinator":
	default:
	tP.setPropertyValue("targetURL","qa.s.uvvu.com:7001");
	if (tC.getPropertyValue("scenario").toString() == "STSCreate"){
			
			url ="rest/"+ tP.getPropertyValue("versionMajor").toString() +
				"/" + tP.getPropertyValue("versionMinor").toString() +
				"/SecurityToken/SecurityTokenExchange" +
				"?tokentype="+tC.getPropertyValue("tokentype").toString() ;
			
		/*	url = "https://" + tP.getPropertyValue("targetURL").toString() + 
				"/rest/" + tP.getPropertyValue("versionMajor").toString() +
				"/" + tP.getPropertyValue("versionMinor").toString() +
				"/SecurityToken/SecurityTokenExchange" +
				"?tokentype={tokentype}" ;
				//+tC.getPropertyValue("tokentype").toString();*/
		
	}
	else if (tC.getPropertyValue("scenario").toString() == "SAMLExchange") {
		
			
			/*url = "https://" + tP.getPropertyValue("targetURL").toString() + 
				"/rest/" + tP.getPropertyValue("versionMajor").toString() +
				"/" + tP.getPropertyValue("versionMinor").toString() +
				"/SecurityToken/Assertion/" +
				tC.getPropertyValue("assertionUUID").toString() + 
				"/SecurityTokenExchange?tokentype={tokentype}";
				//tC.getPropertyValue("tokentype").toString();*/
				url = "rest/" + tP.getPropertyValue("versionMajor").toString() +
				"/" + tP.getPropertyValue("versionMinor").toString() +
				"/SecurityToken/Assertion/" +
				tC.getPropertyValue("assertionUUID").toString() + 
				"/SecurityTokenExchange?tokentype="+tC.getPropertyValue("tokentype").toString();
			} 
	break;
}

/*
*  Add duration parameters if necessary
*/
if (stsduration.length() > 0 && stsduration != 'null') {
	switch (stsduration.toLowerCase()) {
		case "isnull":
			stsduration = "";
			break;
		case "isalpha":
			stsduration = "Z";
			break;
	}

	url = url + "&duration=$stsduration";
}

/*
*  Add audience parameters if necessary
*/
if (stsaudience.length() > 0 && stsaudience != 'null') {
	switch (stsaudience.toLowerCase()) {
		case "isnull":
			url = url + "&audience=";
			
			break;
		default:
	log.info "stsaudience="+stsaudience;
			StringTokenizer st = new StringTokenizer(stsaudience,",");

			while(st.hasMoreTokens()) { 
				if (!appliedFirstNode) {
					url = url + "&audience=";
					appliedFirstNode = true;

					if (tC.getPropertyValue("stsaudiencePrefixDelimiter") == "true") {

					url = url + ";";

						
					}
				}

				
				anode = st.nextToken();
	if (tP.getPropertyValue("versionMinor")!="02"){
		url = url + URLEncoder.encode(anode, "UTF-8");
	}else{
		url = url + anode;
	}
				
		
				/*
				*  Add the node delimiter if needed
				*/
				if (st.hasMoreTokens()) {
					url = url + ";";
					
					/*
					*  If we wish to embed extra ; we should do that 
					*  now.
					*/
					if (tC.getPropertyValue("stsaudienceEmbeddedDelimiter").toString() == "true") {
						url = url + ";";
					}
				}
				
		
			}

			
			if (tC.getPropertyValue("stsaudienceSuffixedDelimiter") == "true") {
				url = url + ";";
			} 
					
			break;
	}
}	

//log.info "url[$url]";

log.info "endPoint[$url]";
tC.setPropertyValue("endPoint","$url");
//testRunner.testCase.getTestStepByName('POST - STS').httpRequest.setEndpoint(url)]]></script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Construct Authorization Header if necessary" id="3a56320d-63e4-4117-af51-cecbd095268c"><con:settings/><con:config><script>import org.apache.commons.codec.binary.Base64;
import com.eviware.soapui.support.types.StringToStringsMap 
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("isDeviceFlag").toString() == "true" &amp;&amp; tC.getPropertyValue("scenario").toString() == "SAMLExchange") {
	/*
	*  construct the basic auth header
	*/
	String combo = tC.getPropertyValue("username").toString() + ":" + tC.getPropertyValue("password").toString();
	String authHeaderValue = "Basic " + combo.bytes.encodeBase64().toString()

	log.info "combo[$combo] - authHeaderValue[$authHeaderValue]";

	tC.setPropertyValue("authHeaderValue",authHeaderValue);
	tC.setPropertyValue("deviceAuthHeaderValue","dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6");
	

}else if(tC.getPropertyValue("isDeviceFlag").toString() == "true"){
/*
	*  construct the device auth header
	*/

tC.setPropertyValue("deviceAuthHeaderValue","dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6");

	
}

if (tC.getPropertyValue("actionAuthHeader") == "EXCLUDE") {
	tC.setPropertyValue("authHeaderValue",null);
	}


if (tC.getPropertyValue("actionDeviceAuthHeader") == "EXCLUDE") {
	tC.setPropertyValue("deviceAuthHeaderValue",null);
	}</script></con:config></con:testStep><con:testStep type="groovy" name="Compute expected audience list" id="db11921c-585f-4151-bab9-f2c3574d4256">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("stsComputedAudienceList",null);

String affiliates = "";
int i = 0;

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	/*
	*  Construct the expected Affiliation list
	*/
	def affiliationList = [tC.getPropertyValue("NODE_IDFULL").toString()];
	def ignoreNodesList = [];
	def stsaudienceList = [];
	
	if (tC.getPropertyValue("stsaudienceIgnoreAll").toString() == "false") {
		if (tC.getPropertyValue("stsaudience") != 'null') {
			stsaudienceList = tC.getPropertyValue("stsaudience").toString().tokenize(",");

			/*
			*  Now remove the ingnorenodes 
			*/
			if (tC.getPropertyValue("stsaudienceIgnoreNodes") != 'null') {
				ignoreNodesList = tC.getPropertyValue("stsaudienceIgnoreNodes").toString().tokenize(",");
				ignoreNodesList.each {
					if (stsaudienceList.contains(it)) {
						stsaudienceList = stsaudienceList.minus(it);
					}
				}
			}
		}

		if (stsaudienceList.size() >= 1) {
			log.info "DEBUG: Adding stsaudienceList";
			affiliationList.addAll(stsaudienceList);
		}
	} 
	log.info "DEBUG: affiliationList size is " + affiliationList.size();
	affiliationList.each {
		log.info "DEBUG afflicationList Member: " + it;
		affiliates += it;

		i++;
		
		if (i != affiliationList.size()) {
			affiliates += ",";
		}
	}

	tC.setPropertyValue("stsComputedAudienceList",affiliates);

	log.info "stsComputedAudienceList[" + tC.getPropertyValue("stsComputedAudienceList") + "]";
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish pem" id="b8c59228-ca34-4b0e-b575-2d8c2076aa00">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID_",tC.getPropertyValue("NODE_ID_"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - STS");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Decode tokentype" id="fc292e9a-7251-438d-ab29-dce1eb4f450c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tP.getPropertyValue("versionMinor")!="02")
	{
			tC.setPropertyValue("tokentype",URLDecoder.decode(tC.getPropertyValue("tokentype"), "UTF-8"));
	}</script></con:config></con:testStep><con:testStep type="groovy" name="Reset targetURL value" id="bf6cd975-9184-4735-a5c2-8421e769a4de"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("targetURL","qa.p.uvvu.com:7001");</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="78973b99-f924-450b-9c5f-197ae5a4378e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep = tC.getTestStepByName('POST - STS');

tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);


/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tP.setPropertyValue("targetURL","qa.p.uvvu.com:7001");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);

this.log.info "contentLength [$contentLength]";
this.log.info "status [$status]";
this.log.info "contentType [$contentType]";
this.log.info "contentLocation [$contentLocation]";

if (contentLength.toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
     rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);

     int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

	//String XMLbody  = strVal.substring(startAssert, strVal.length());
     
	//tC.setPropertyValue("XMLbody", XMLbody);
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract ERROR table information" id="e586f393-5e35-4d49-b72a-b0f7d150c70c">
        <con:settings/>
        <con:config>
          <script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrType[" + tC.getPropertyValue("expectErrType") + "]";

switch (tC.getPropertyValue("expectErrType")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="23060eaa-4cb7-4102-9bf7-b7600a26ed2f">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def url = tP.getPropertyValue("targetURL");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

tC.setPropertyValue("assertionUUIDprior",tC.getPropertyValue("assertionUUID"));

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;
String errorID = null;
String errorReason = null;
String errorLink = null;
String orgRequest = url + "/rest/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection = "Keep-Alive";

String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {

	case "Not Found":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = false;
		doContentLocaton  = false;
		dobodyXML = false;
		doContentTypeHeader = false;
	break;
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "NODE_STATUS_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = false;
		doContentLocaton  = false;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request"
		errorReason = "The request is not valid.";
		errorLink = "";
	break;
	case "FORBIDDEN_INVALID_ROLE":
		errorReason = "forbidden";
		errorID = "urn:dece:errorid:org:dece:securitycontext:Forbidden:1120";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
	case "FORBIDDEN_INVALID_DURATION":
	errorReason = "The security token's duration is not valid.";
	errorID="urn:dece:errorid:org:dece:invalidDurationvalue";
	errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
	case "FORBIDDEN_INVALID_USER_STATUS":
	errorReason = "The request is not authorized.";
	errorID="urn:dece:errorid:org:dece:securitycontext:InvalidUserStatus";
	errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
	case "FORBIDDEN:1123":
		expectHTTPstatus = 
		errorReason = "The request is not authorized.";
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1123";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
	case "FORBIDDEN:1119":
		errorReason = "The request is not authorized.";
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1119";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
	case "unauthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorReason = "The request is not authorized.";
		break;
	
	case "token_rejected":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "text/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:"+expectErrType;
		errorReason = "The request is not authorized.";
		break;
	case "FORBIDDEN":
	default:
		errorReason="Unknown Error";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	

if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		/*
		// ErrorLink
		this.log.info "ErrorLink: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
		*/
	} else {
		return false;
	}
}
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION row count" disabled="true" id="0887fa03-d07a-4fa0-826e-c497c6c0557b">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

int uuidcnt = 0;

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		String uuid = tC.getPropertyValue("contentLocation").toString();

		/*
		*  Assert we have a location header value..
		*/
		assert uuid.length() > 1;

		/*
		*  Verify the value is a URL
		*/
		def lurl = uuid.toURL();
		def urlStr = lurl.getPath();

		int lastSlash = urlStr.lastIndexOf('/');

		/*
		*  Pull just the assertion UUID from the URL
		*/
		String assertionUUID = urlStr.substring(lastSlash + 1);

		log.info "assertionUUID [$assertionUUID]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		assert dbUtils.samlGetUUIDNodeAssertionRowCount(assertionUUID) == 1;
	}
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION prior assertion removed; tokentype:saml2" disabled="true" id="745eb8fa-5612-4bfc-8ebb-01e099b3191a">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String tokentype = tC.getPropertyValue("tokentype").toString();
String scenario = tC.getPropertyValue("scenario").toString();
String assertionUUIDprior = tC.getPropertyValue("assertionUUIDprior").toString();

int uuidcnt = 0;

if (tC.getPropertyValue("expectErrType") == "SUCCESS" &amp;&amp; tokentype == "urn:dece:type:tokentype:saml2" &amp;&amp; scenario!="STSCreate") {

	assert assertionUUIDprior.length() > 4;
	
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  There should only be on NODE_USER_SAML_ASSERTION row 
		*  with this UUID after API invocation
		*/
		assert dbUtils.samlGetUUIDNodeAssertionRowCount(assertionUUIDprior) == 0;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION STATUS, NODE_ID" disabled="true" id="38b9bfb9-cbad-4da9-b431-507b26e6df4e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;
def myXML;

tC.setPropertyValue("assertionROW",null);

String arow = "";
String NODE_ID = tC.getPropertyValue("NODE_ID").toString();
String deviceNodeID = tP.getPropertyValue("nodeDeviceDefault").toString();

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	/*
	*  Device Node ID override.  All devices are 0200 in 
	*  QA so if the nodeID received is one of our defined
	*  devices change the setting for validation 
	*  purposes.
	*/
	switch (NODE_ID) {
		case tP.getPropertyValue("nodeIdDEV").toString():
			NODE_ID = deviceNodeID;
			break;
	}
	
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		String uuid = tC.getPropertyValue("contentLocation").toString();
		
		/*
		*  Assert we have a location header value..
		*/
		assert uuid.length() > 1;

		/*
		*  Verify the value is a URL
		*/
		def lurl = uuid.toURL();
		def urlStr = lurl.getPath();

		int lastSlash = urlStr.lastIndexOf('/');

		/*
		*  Pull just the assertion UUID from the URL
		*/
		String assertionUUID = urlStr.substring(lastSlash + 1);

		log.info "assertionUUID [$assertionUUID]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		arow = dbUtils.samlGetAssertionRow(assertionUUID);

		assert arow.length() > 0;

		log.info "arow is [$arow]";

		tC.setPropertyValue("assertionROW",arow);
	}

	/*
	*  Parse the XML
	*/
	try {
		myXML = new XmlSlurper().parseText(arow);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify only one row was returned..
		*/
		log.info "ASSERT - Row Size is 1";
		assert myXML.ResultSet.Row.size() == 1;

		/*
		*  Verify NODE_USER_SAML_ASSERTION.STATUS is active
		*/
		log.info "ASSERT - STATUS is active";
		assert myXML.ResultSet.Row.STATUS.text() == "active";

		/*
		*  Verify NODE_USER_SAML_ASSERTION.NODE_ID
		*/
		log.info "ASSERT - NODE_ID Expect[$NODE_ID] Received[" +
			myXML.ResultSet.Row.NODE_OID.text() + "]";
		assert myXML.ResultSet.Row.NODE_OID.text() == NODE_ID;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION.EXPIRATION" disabled="true" id="476d414d-a728-4de4-8b8a-4e909acec78f">
        <con:settings/>
        <con:config><script><![CDATA[import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def a;

int expectTime = tC.getPropertyValue("expectCreateExpireHoursDiff").toInteger();

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	String uname = tC.getPropertyValue("assertionUUID").toString().trim();
	String sys = tP.getPropertyValue("targetSystem").toString();
	String results = "";
	String secs = "";

	String sql = """SELECT (extract(DAY FROM EXPIRATION_DATE - CREATED_DATE)*24) 
		as HOURS FROM NODE_USER_SAML_ASSERTION where NODE_USER_SAML_UUID = '$uname'
	""";

	log.info sql;

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		results = a.SelectFromDB(sql,sys);
		log.info results;
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbUtils - $e"; 
		assert 1 == 2;
	}
	finally {
		try {
			def myXML = new XmlSlurper().parseText(results);
			assert myXML.ResultSet.Row.size() == 1;
			results = myXML.ResultSet.Row[0].HOURS
		}
		catch (Throwable e) {
			log.info "ERROR - XmlSlurper - $e";
			assert 1 == 2;
		} 
		finally {
			/*
			*  There is sometype of bug in oracle where it, at times, screws 
			*  update the date diff up to 24 hours.
			*/
						
			log.info "Expect[$expectTime] - Received[" +  results.toInteger() + "]";
			//assert (results.toInteger() == expectTime);
			assert (results.toInteger() <= expectTime + 06 && results.toInteger() >= expectTime - 06);
			//assert (results.toInteger() <= expectTime + 24 && results.toInteger() >= expectTime - 24);
		}
	}
}]]></script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION.NODE_USER_SAML_ASSERTION" disabled="true" id="07fd1f88-5e94-4f94-aa93-ee659471189e">
        <con:settings/>
        <con:config><script><![CDATA[/*
*  VALIDATIONS PERFORMED
*
*  saml2p:StatusCode == urn:oasis:names:tc:SAML:2.0:status:Success
*
*  <saml2:Issuer> == Project.Property("samlIssuer") (http://c.decellc.com/)
*
*  <saml2:AuthenticatingAuthority> == Project.Property("samlAuthenticatingAuthority") 
*	(urn:dece:org:neustar:coordinator)
*
*  <AudienceRestriction>
*	Verifications include insuring the size of the <AudienceRestriction> matches
*	the number of nodes expected.
*
*	For DEVICES this check will verify NO audience members are included.
*
*	Also verification of the nodes used in assertion creation/affiliation via
*	the STS call are contained within the <AudienceRestriction> node
*/
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def dbUtils;
def dbUtilsUser;

tC.setPropertyValue("computedAssertionXML",null);
tC.setPropertyValue("dbassertionNodeaccountid",null);
tC.setPropertyValue("dbassertionNodeuserid",null);

String assertionXML = "";
String arow = tC.getPropertyValue("assertionROW");
String[] affiliates;

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	def affiliationList = tC.getPropertyValue("stsComputedAudienceList").toString().tokenize(",");
	def ignoreNodesList = tC.getPropertyValue("stsaudienceIgnoreNodes").toString().tokenize(",");
	log.info "affiliationList size is " + affiliationList.size();
		
	/*
	*  Make sure we have data in arow
	*/
	assert arow.length() > 1;

	/*
	*  Get a handle for the saml class.
	*/
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	/*
	*  Get a handle for the user class.
	*/
	try {
		dbUtilsUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbUser - $e";
		assert 1 == 2;
	}
	
	try {
		myXML = new XmlSlurper().parseText(arow);
		log.info 'myXML----------->'+myXML
		log.info 'size------->'+myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".size()
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify only one row was returned..
		*/
		log.info "ASSERT - Row Size is 1";
		assert myXML.ResultSet.Row.size() == 1;

		String assertRaw = myXML.ResultSet.Row.NODE_USER_SAML_ASSERTION_PART1.text() +
				myXML.ResultSet.Row.NODE_USER_SAML_ASSERTION_PART2.text();
			log.info 'assertRaw----->'+assertRaw

		/*
		*  Base64 decode the assertion clob
		*/
		byte [] xmlBytes = Base64.decode(assertRaw);
		assertionXML = new String(xmlBytes, "UTF8");

		assert assertionXML.length() > 1;

		tC.setPropertyValue("computedAssertionXML", assertionXML);
	}
	/*
	*  Now parse the assertion XML
	*/
	try {
		myXML = new XmlSlurper().parseText(assertionXML).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", saml2p: "urn:oasis:names:tc:SAML:2.0:protocol");
		log.info 'myXML----------->'+myXML
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Check the status
		*/
		log.info "ASSERT: Status size 1 == " + myXML."saml2p:Status".size();
		assert 1 == myXML."saml2p:Status".size();

		def s = myXML."saml2p:Status"."saml2p:StatusCode".@Value;
		log.info "ASSERT: Status value is urn:oasis:names:tc:SAML:2.0:status:Success == $s";
		assert "urn:oasis:names:tc:SAML:2.0:status:Success" == s.toString();

		/*
		*  Verify the nodeaccountid.
		*/
		String aname = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute".@Name;
		String anameE = "accountID";
		log.info "ASSERT: NodeAccountID - Name Attribute Value - Expect[$anameE] - Received[$aname]";
		assert anameE == aname;

		String avalue = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
		log.info "ASSERT: Returned Account NodeID length > 0 -- [$avalue]";
		assert avalue.length() > 0;
		tC.setPropertyValue("dbassertionNodeaccountid", avalue);

		/*
		*  Verify the nodeuserid
		*/
		String uvalue = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID".text();
		log.info "ASSERT: Returned Account UserID length > 0 -- [$uvalue]";
	
		//  Not zero length
		assert uvalue.length() > 0;

		//  Save for future
		tC.setPropertyValue("dbassertionNodeuserid", uvalue);
		int lastColon = uvalue.lastIndexOf(':');
		def uvalueid = uvalue.substring(lastColon + 1);

		//  Get USER_OID from NODE_USER table.
		def uvaluedb = dbUtils.samlGetNodeUserIDfromNodeUser(uvalueid);
		def unameval = tC.getPropertyValue("USER_OID").toString();
		log.info "ASSERT: NODE_USER.USER_OID Recv[$uvaluedb] - Expect[$unameval]";
		assert uvaluedb == unameval;

		/*
		* <saml2:Issuer>
		*/
		log.info "ASSERT: <saml2:Issuer> Expect: " +
			tP.getPropertyValue("samlIssuer") +
			" Received:[" + myXML."saml2:Assertion"."saml2:Issuer".text() +
			"]";
		assert tP.getPropertyValue("samlIssuer").toString() == myXML."saml2:Assertion"."saml2:Issuer".text();

		/*
		*  saml2:AuthnStatement
		*/
		log.info "ASSERT: <saml2:AuthenticatingAuthority> Expect [" + 
			tP.getPropertyValue("samlAuthenticatingAuthority") +
			"] Received[" +
			myXML."saml2:Assertion"."saml2:AuthnStatement"."saml2:AuthnContext"."saml2:AuthenticatingAuthority".text() +
			"]";
		assert tP.getPropertyValue("samlAuthenticatingAuthority").toString() ==
			myXML."saml2:Assertion"."saml2:AuthnStatement"."saml2:AuthnContext"."saml2:AuthenticatingAuthority".text()

		/*
		*  AudienceRestriction Processing
		*/
		if (tC.getPropertyValue("isDeviceFlag").toString() == "true") {
			/*
			*  Just empty the list that way we will check
			*  for zero
			*/
			affiliationList = "";
		}
		log.info "ASSERT: AudienceList size Expect[" +
			affiliationList.size() + "] Received[ " +
			myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".size() +
			"]";
	assert affiliationList.size() == myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".size();

		myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".each {
			log.info "ASSERT: <saml2:AudienceRestriction> Contains [" +
				it.text() + "]";
				log.info "affiliationList: "+affiliationList;
			assert affiliationList.contains(it);
		}
		//Make sure none of the ingnoredNodes made it into the affilation list.
		ignoreNodesList.each {
			log.info "ASSERT: <saml2:AudienceRestriction> DOES NOT Contain [" + it + "]";
			assert !affiliationList.contains(it);
		}


		
	}
}]]></script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_ACCOUNT row" disabled="true" id="50a4b9e0-ff94-47ee-a2ea-90befab2cfa7">
        <con:settings/>
        <con:config><script>/*
*  Verifications
*
*	Only one NODE_ACCOUNT row exists for the NODE_ACCOUNT_ID.
*
*	NODE_ID is the nodeOID for the entity node.
*
*	ACCOUNT_OID is correct.
*
*/
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

def myXML;
def nodeXML;

tC.setPropertyValue("assertionAccountId",null);

String assertionAccountId = "";
String arow = "";
String narow = "";
String NODE_ID = tC.getPropertyValue("NODE_ID").toString();

/*
*  if we are a device adjust the 
*  NODE_ID...
*/
if (tC.getPropertyValue("isDeviceFlag") == "true") {
	NODE_ID = tP.getPropertyValue("nodeDeviceDefault").toString();
}

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	
	arow = tC.getPropertyValue("assertionROW").toString();

	assert arow.length() > 0;

	/*
	*  Parse the NODE_USER_SAML_ASSERTION row
	*/
	try {
		myXML = new XmlSlurper().parseText(arow);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		assertionAccountId = myXML.ResultSet.Row.NODE_ACCOUNT_ID.text();

		log.info "assertionAccountId[$assertionAccountId]";
	}

	/*
	*  Get and Prase the NODE_ACCOUNT row..
	*/
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
		narow = dbUtils.samlGetNodeAccountRow(assertionAccountId);

		assert narow.length() > 0;
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		assertionAccountId = myXML.ResultSet.Row.NODE_ACCOUNT_ID.text();

		log.info "assertionAccountId[$assertionAccountId]";

		try {
			nodeXML = new XmlSlurper().parseText(arow);
		}
		catch(Throwable e) {
			log.info "ERROR - XmlSlurper - $e";
			assert 1 == 2;
		}
		finally {
			/*
			*  Only one row should be returned.
			*/
			log.info "ASSERT: Row Size is 1";
			assert nodeXML.ResultSet.Row.size() == 1;
			
			/*
			* ACCOUNT_OID - ugh  :(  for some reason slurper cannot find ACCOUNT_OID
			*	I will fix later  
			*/
			log.info "ASSERT: ACCOUNT_OID Expect[" + tC.getPropertyValue("accountoid") +
				"] Received[" + nodeXML.ResultSet.Row.ACCOUNT_OID.text() + "]";
		//	assert tC.getPropertyValue("accountoid").toString() == nodeXML.ResultSet.Row.ACCOUNT_OID.text();

			/*
			*  NODE_ID is the entity node...
			*/
			
			log.info "ASSERT: NODE_ID Expect[" + NODE_ID +
				"] Received[" + nodeXML.ResultSet.Row.NODE_OID.text() + "]";
			assert NODE_ID == nodeXML.ResultSet.Row.NODE_OID.text();

		}
	}	
}

tC.setPropertyValue("assertionAccountId",assertionAccountId);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER row count" disabled="true" id="7e7dbe3e-f760-4391-9e45-edb8df3a6a0f">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int expectedSize = 1;
int assertionSize = 0;
int stsaudienceSize = 1;  // Start at one as entity nodes is in audience
int stsaudienceIgnoreSize = 0;
int expectNodeUserRowCount = tC.getPropertyValue("expectNodeUserRowCount").toInteger();

tC.setPropertyValue("z_resultNodeUserRowCount",null);

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	if (tC.getPropertyValue("stsaudienceIgnoreAll").toString() == "false") {
		if ( tC.getPropertyValue("stsaudience") != null) {
			stsaudienceSize += tC.getPropertyValue("stsaudience").toString().tokenize(",").size();
			log.info "stsaudienceSize BEFORE [$stsaudienceSize]";
		}
		if ( tC.getPropertyValue("stsaudienceIgnoreNodes") != null) {
			stsaudienceIgnoreSize = tC.getPropertyValue("stsaudienceIgnoreNodes").toString().tokenize(",").size();
			log.info "stsaudienceIgnoreSize BEFORE [$stsaudienceIgnoreSize]";
		}

		stsaudienceSize -= stsaudienceIgnoreSize;
		log.info "stsaudienceSize FINAL [$stsaudienceSize]";
	} else {
		log.info "No changes to count";
	}
	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	assertionSize = a.samlGetUUIDNodeUserRowCountbyUUID(tC.getPropertyValue("assertionUUID"));

	tC.setPropertyValue("z_resultNodeUserRowCount",assertionSize.toString());

	if (expectNodeUserRowCount == 0) {
		log.info "ASSERT: Audience Size[$stsaudienceSize] - Received[$assertionSize]";
		assert assertionSize == stsaudienceSize;
	} else {
		log.info "ASSERT: Audience Size[$stsaudienceSize] - Received[$expectNodeUserRowCount]";
		assert stsaudienceSize == expectNodeUserRowCount;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER rows" disabled="true" id="7cc3dce2-3098-4d21-8074-948cfb5c638f">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));

String uuid = tC.getPropertyValue("assertionUUID").toString();
String nodeUser = tC.getPropertyValue("assertionUserId").toString();
String nodeoid = tC.getPropertyValue("NODE_ID").toString();
String resultsDB = "";
String node = "";
List nodeList;

int indexOfcol = 0;

if (tC.getPropertyValue("actionSkipNodeUserCheck") != "true") {
	if (tC.getPropertyValue("expectErrType").toString() == "SUCCESS") {
		assert tC.getPropertyValue("stsComputedAudienceList").toString() != 'null';

		/*
		*  Devices should not ever be affilated.
		*/
		if (tC.getPropertyValue("isDeviceFlag").toString() != "true") {
			nodeList = tC.getPropertyValue("stsComputedAudienceList").toString().tokenize(",");
		} else {
			nodeList = tP.getPropertyValue("nodeDeviceDefault").toString().tokenize(",");
		}
		
		log.info "nodeList size is " + nodeList.size();

		nodeList.each {
			assert nodeList.isEmpty() == false;
			
			log.info "Processing NODE: $it";
			indexOfcol = it.lastIndexOf(":");
			node = it.substring(indexOfcol + 1);
			log.info "node is $node";

			String sql = """SELECT to_char(rawtohex(USER_OID)) USER_OID,
				to_char(rawtohex(NODE_OID)) NODE_OID, 
				to_char(rawtohex(NODE_USER_ID)) NODE_USER_ID 
				FROM NODE_USER where NODE_USER_SAML_UUID = '$uuid' 
 				and NODE_OID = '$node'""";
			try {
				log.info "sql is [$sql]";
				resultsDB = dbUtils.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
			} catch (Throwable e) {
				log.info "ERROR - SelectFromDB issue! - $e";
			} finally {
				log.info "results is [$resultsDB]";
			}
		
			try {
				def myXML = new XmlSlurper().parseText(resultsDB);
	
				String dbUserOID = myXML.ResultSet.Row[0].USER_OID;
				String dbNodeOID = myXML.ResultSet.Row[0].NODE_OID;
				String dbNodeUserOID = myXML.ResultSet.Row[0].NODE_USER_ID;
			}
			catch(Throwable e) {
				log.info "ERROR - XmlSlurper Problem - $e";
			}
			finally {
				log.info "Assert DB USER_OID [$dbUserOID] == [" + tC.getPropertyValue("userOID") + "]";
				assert dbUserOID == tC.getPropertyValue("userOID").toString();

				log.info "Assert DB NODE_OID [$dbNodeOID] == [$node]";
				assert dbNodeOID == node;

			} 	
		}
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify LVAL EUDU &amp; EMUC row count" disabled="true" id="e2b96f3f-1fb1-4eb3-a001-6ff87d99d2ea"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));

String uuid = tC.getPropertyValue("assertionUUID").toString();
String USER_OID = tC.getPropertyValue("USER_OID").toString();
String resultsDB = "";
String node = "";
List nodeList;
List policyList = "100,103,104".toString().tokenize(",");

int indexOfcol = 0;

if (tC.getPropertyValue("versionMinor") == "06" &amp;&amp; tC.getPropertyValue("actionSkipPolicyCheck") != "true" &amp;&amp; tC.getPropertyValue("tokentype")!= URLEncoder.encode(tP.getPropertyValue("urntokenType_deviceauthtoken"), "UTF-8")) {
	if (tC.getPropertyValue("expectErrType").toString() == "SUCCESS") {
		assert tC.getPropertyValue("stsComputedAudienceList").toString() != 'null';

		/*
		*  Devices should not ever be affilated.
		*/
		if (tC.getPropertyValue("isDeviceFlag").toString() != "true") {
			nodeList = tC.getPropertyValue("stsComputedAudienceList").toString().tokenize(",");
		} else {
			nodeList = tP.getPropertyValue("nodeDeviceDefault").toString().tokenize(",");
		}
		
		log.info "nodeList size is " + nodeList.size();
policyList.each{
	log.info "Verifiying for $it";
	policyClass =  it;
		nodeList.each {
			assert nodeList.isEmpty() == false;
			
			log.info "Processing NODE: $it";
			indexOfcol = it.lastIndexOf(":");
			node = it.substring(indexOfcol + 1);
			log.info "node is $node";

			String sql = """select POLICY_CLASS,STATUS,to_char(rawtohex(CREATED_BY)) CREATED_BY,ENTITY_ID from POLICY P,POLICY_REQUESTING_ENTITY PRE where P.CREATED_BY = (Select USER_OID from NODE_USER where NODE_USER_SAML_UUID = '$uuid' and NODE_OID = '$node') 
and P.POLICY_CLASS = '$policyClass' and P.STATUS = 'active' and P.POLICY_OID = PRE.POLICY_OID and PRE.ENTITY_TYPE = 'node' and PRE.ENTITY_ID = '$node'""";
			try {
				log.info "sql is [$sql]";
				resultsDB = dbUtils.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
			} catch (Throwable e) {
				log.info "ERROR - SelectFromDB issue! - $e";
			} finally {
				log.info "results is [$resultsDB]";
			}
		
			try {
				def myXML = new XmlSlurper().parseText(resultsDB);
	
				String dbUserOID = myXML.ResultSet.Row[0].CREATED_BY;
				
			}
			catch(Throwable e) {
				log.info "ERROR - XmlSlurper Problem - $e";
			}
			finally {
				log.info "DB row count Receved: "+myXML.ResultSet.size();
				assert myXML.ResultSet.size()==1;
				
				log.info "Assert DB USER_OID [$dbUserOID] == [" + tC.getPropertyValue("userOID") + "]";
				assert dbUserOID == tC.getPropertyValue("userOID").toString();
	

			} 	
		}
	}
	}
}else{
	log.info "Second User Policy Check... or token create using auth token oe version 02";
}
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER prior removed; tokentype:saml2" disabled="true" id="9234102d-7f6b-4dd2-8f17-1672d43d3722">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def a;

String tokentype = tC.getPropertyValue("tokentype").toString();
String scenario = tC.getPropertyValue("scenario").toString();
String assertionUUIDprior = tC.getPropertyValue("assertionUUIDprior").toString();

tC.setPropertyValue("z_resultNodeUserRowCount",null);

if (tC.getPropertyValue("expectErrType") == "SUCCESS" &amp;&amp; tokentype == "urn:dece:type:tokentype:saml2" &amp;&amp; scenario != "STSCreate") {

	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	assertionSize = a.samlGetUUIDNodeUserRowCountbyUUID(assertionUUIDprior);

	log.info "ASSERT: No Rows for [$assertionUUIDprior]";
	assert assertionSize == 0;
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return the assertion information to the Calling Test Case" disabled="true" id="19b997fc-371b-458b-9039-cedd6022110e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",null);

callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>z_resultNodeUserRowCount</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" >
<Error ErrorID="urn:dece:errorid:org:dece:securitycontext:forbidden:1123">
       <Reason Language="en">The request is not authorized.</Reason>
        <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/06/SecurityToken/SecurityTokenExchange</OriginalRequest>
       <ErrorLink>https://qa.q.uvvu.com:7001/deceerrors/error/error_response.html</ErrorLink>
    </Error>
</ErrorList>
]]></con:value></con:property><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E9CC9BAA5158A205E0401F0A0799349A</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stsapi_107_1382960736458</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_11026 - STSCreate - retailer - unamepasswd - Not Found - on sHost - P0</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>stsSkipLastLoginCheck</con:name><con:value>false</con:value></con:property><con:property><con:name>stsRequestUserNameFlag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsRequestBodyNULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsRequestBody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<Credentials xmlns="http://www.decellc.org/schema/2013/06/coordinator">
   <Username>stsapi_107_1382960736458</Username>
   <Password>testing</Password>
</Credentials>]]></con:value></con:property><con:property><con:name>stsExpire</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsduration</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsComputedAudienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsaudienceSuffixedDelimiter</con:name><con:value>false</con:value></con:property><con:property><con:name>stsaudiencePrefixDelimiter</con:name><con:value>false</con:value></con:property><con:property><con:name>stsaudienceIgnoreNodes</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsaudienceIgnoreAll</con:name><con:value>false</con:value></con:property><con:property><con:name>stsaudienceEmbeddedDelimiter</con:name><con:value>false</con:value></con:property><con:property><con:name>stsaudience</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>sName</con:name><con:value>1_STS Create Tokentype unamepasswd - Payload</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>86713</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>NODE_IDFULL</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property>
        
        
        
        
        
        <con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>isDeviceFlag</con:name><con:value>false</con:value></con:property><con:property><con:name>expectNodeUserRowCount</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRightsTokenCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Not Found</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property>
        
        
        
        
        
      <con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>deviceAuthToken</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deviceAuthString</con:name><con:value>841321476135740</con:value></con:property><con:property><con:name>dbassertionNodeuserid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:D87D2AF189718B27E0401F0A05993EB9</con:value></con:property><con:property><con:name>dbassertionNodeaccountid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:D87D2AF1896F8B27E0401F0A05993EB9</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/html; charset=iso-8859-1</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLength</con:name><con:value>308</con:value></con:property><con:property><con:name>connection</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>computedAssertionXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2p:Response Consent="urn:oasis:names:tc:SAML:2.0:consent:unspecified" ID="_96ad4bc6-22a6-4353-a3bf-19859152a106" IssueInstant="2013-03-22T04:53:01.147Z" Version="2.0" xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol"><saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">http://c.decellc.com/</saml2:Issuer><saml2p:Status><saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/></saml2p:Status><saml2:Assertion ID="_b5caab0c-35e2-4e9d-8236-200985cdfa1a" IssueInstant="2013-03-22T04:53:01.147Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_b5caab0c-35e2-4e9d-8236-200985cdfa1a">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>jB8D1/pLhrVUDWrUF4IjtCzqJcQ=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
SW5yw1R/rBx63YvtAHknTEIrdCKU/7t9GeYzBJJsst0AFal6urrghVo+5xZvIUaZS9oJ6Te9c8Zd
DnAHHIt9WV066sWLHyBx7vZYZ2AbVveiCCCumYqjO4tWVduX/2Y6VaiFp8kRckJ8UlBk5n06PFky
Pn6swMA78s2xB5kjTHg=
</ds:SignatureValue>
<ds:KeyInfo><ds:X509Data><ds:X509Certificate>MIIDuzCCAySgAwIBAgIBAjANBgkqhkiG9w0BAQQFADCBljELMAkGA1UEBhMCVVMxCzAJBgNVBAgT
AlZBMREwDwYDVQQHEwhTdGVybGluZzENMAsGA1UEChMEREVDRTEMMAoGA1UECxMDbGxjMSMwIQYD
VQQDExpzdG9teGxic2I5MS52YS5uZXVzdGFyLmNvbTElMCMGCSqGSIb3DQEJARYWc2FudG9zLmpo
YUBuZXVzdGFyLmJpejAeFw0xMDAzMTkwMTU2NDRaFw0xMTAzMTkwMTU2NDRaMIGJMQswCQYDVQQG
EwJVUzELMAkGA1UECBMCdmExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQ0w
CwYDVQQLEwRERUNFMRIwEAYDVQQDEwlsb2NhbGhvc3QxJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5q
aGFAbmV1c3Rhci5iaXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALBV5Opi92ieLfFomehr
M1oKkvzx08i3OgPNW5Dfk7PGiP3adh/Ilc2j3kAIIedK1hQadRY/RDniz6OKUXeirYztN5Q16i85
RWuUXDol7dHXYUK+xYcQTOPSUWPzxxNqj8zltHOBHrSJMDgONeePsc+/0aFBT8D5CYHjHEwfR0e5
AgMBAAGjggEiMIIBHjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl
ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU5+JXeZQNlTVtAwpVfn110GpQHfMwgcMGA1UdIwSBuzCB
uIAUaOpJ0xKV601qQdlJS9AU3xS2kxOhgZykgZkwgZYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJW
QTERMA8GA1UEBxMIU3RlcmxpbmcxDTALBgNVBAoTBERFQ0UxDDAKBgNVBAsTA2xsYzEjMCEGA1UE
AxMac3RvbXhsYnNiOTEudmEubmV1c3Rhci5jb20xJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5qaGFA
bmV1c3Rhci5iaXqCAQAwDQYJKoZIhvcNAQEEBQADgYEAfq+I8D1s56CpsWwgBGEqQ7VLJ9p0QXLk
B+F/gtil4On8wTK+W1yw7hjQWW9IDhC+nfYh3btB0azcQeJk7GiRkDn64lyMLMQ5Ui/ly0jeqwsL
NI1nE3tzF/9ru+BmZimzz342UmPSuvIUaKs1yhbqW9wjPH6//rGy5z7ZvQFXocY=</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:D87D2AF189718B27E0401F0A05993EB9</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"><saml2:SubjectConfirmationData NotOnOrAfter="2013-03-22T07:53:01.147Z"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2013-03-22T04:52:51.147Z" NotOnOrAfter="2023-03-22T04:53:01.147Z"/><saml2:Advice><saml2:AssertionURIRef>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_b5caab0c-35e2-4e9d-8236-200985cdfa1a</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2013-03-22T04:53:01.147Z" SessionIndex="_b5caab0c-35e2-4e9d-8236-200985cdfa1a"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:D87D2AF1896F8B27E0401F0A05993EB9</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></saml2p:Response>]]></con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertUserId</con:name><con:value>94B6AE0F85AFC20DE0401F0A0799081F</con:value></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUIDprior</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionROW</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <NODE_USER_SAML_ASSERTION_OID>D87D2AF189738B27E0401F0A05993EB9</NODE_USER_SAML_ASSERTION_OID>
      <NODE_OID>0200</NODE_OID>
      <NODE_USER_SAML_ASSERTION_PART1>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHNhbWwycDpSZXNwb25zZSBDb25zZW50PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDp1bnNwZWNpZmllZCIgSUQ9Il85NmFkNGJjNi0yMmE2LTQzNTMtYTNiZi0xOTg1OTE1MmExMDYiIElzc3VlSW5zdGFudD0iMjAxMy0wMy0yMlQwNDo1MzowMS4xNDdaIiBWZXJzaW9uPSIyLjAiIHhtbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIj48c2FtbDI6SXNzdWVyIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj5odHRwOi8vYy5kZWNlbGxjLmNvbS88L3NhbWwyOklzc3Vlcj48c2FtbDJwOlN0YXR1cz48c2FtbDJwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIvPjwvc2FtbDJwOlN0YXR1cz48c2FtbDI6QXNzZXJ0aW9uIElEPSJfYjVjYWFiMGMtMzVlMi00ZTlkLTgyMzYtMjAwOTg1Y2RmYTFhIiBJc3N1ZUluc3RhbnQ9IjIwMTMtMDMtMjJUMDQ6NTM6MDEuMTQ3WiIgVmVyc2lvbj0iMi4wIiB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+PHNhbWwyOklzc3Vlcj5odHRwOi8vYy5kZWNlbGxjLmNvbS88L3NhbWwyOklzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj4KPGRzOlNpZ25lZEluZm8+CjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+CjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz4KPGRzOlJlZmVyZW5jZSBVUkk9IiNfYjVjYWFiMGMtMzVlMi00ZTlkLTgyMzYtMjAwOTg1Y2RmYTFhIj4KPGRzOlRyYW5zZm9ybXM+CjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPgo8ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIj48ZWM6SW5jbHVzaXZlTmFtZXNwYWNlcyBQcmVmaXhMaXN0PSJkcyBzYW1sMiB4cyIgeG1sbnM6ZWM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvZHM6VHJhbnNmb3JtPgo8L2RzOlRyYW5zZm9ybXM+CjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIvPgo8ZHM6RGlnZXN0VmFsdWU+akI4RDEvcExoclZVRFdyVUY0SWp0Q3pxSmNRPTwvZHM6RGlnZXN0VmFsdWU+CjwvZHM6UmVmZXJlbmNlPgo8L2RzOlNpZ25lZEluZm8+CjxkczpTaWduYXR1cmVWYWx1ZT4KU1c1eXcxUi9yQng2M1l2dEFIa25URUlyZENLVS83dDlHZVl6QkpKc3N0MEFGYWw2dXJyZ2hWbys1eFp2SVVhWlM5b0o2VGU5YzhaZApEbkFISEl0OVdWMDY2c1dMSHlCeDd2WllaMkFiVnZlaUNDQ3VtWXFqTzR0V1ZkdVgvMlk2VmFpRnA4a1Jja0o4VWxCazVuMDZQRmt5ClBuNnN3TUE3OHMyeEI1a2pUSGc9CjwvZHM6U2lnbmF0dXJlVmFsdWU+CjxkczpLZXlJbmZvPjxkczpYNTA5RGF0YT48ZHM6WDUwOUNlcnRpZmljYXRlPk1JSUR1ekNDQXlTZ0F3SUJBZ0lCQWpBTkJna3Foa2lHOXcwQkFRUUZBRENCbGpFTE1Ba0dBMVVFQmhNQ1ZWTXhDekFKQmdOVkJBZ1QKQWxaQk1SRXdEd1lEVlFRSEV3aFRkR1Z5YkdsdVp6RU5NQXNHQTFVRUNoTUVSRVZEUlRFTU1Bb0dBMVVFQ3hNRGJHeGpNU013SVFZRApWUVFERXhwemRHOXRlR3hpYzJJNU1TNTJZUzV1WlhWemRHRnlMbU52YlRFbE1DTUdDU3FHU0liM0RRRUpBUllXYzJGdWRHOXpMbXBvCllVQnVaWFZ6ZEdGeUxtSnBlakFlRncweE1EQXpNVGt3TVRVMk5EUmFGdzB4TVRBek1Ua3dNVFUyTkRSYU1JR0pNUXN3Q1FZRFZRUUcKRXdKVlV6RUxNQWtHQTFVRUNCTUNkbUV4RVRBUEJnTlZCQWNUQ0ZOMFpYSnNhVzVuTVJBd0RnWURWUVFLRXdkT1pYVnpkR0Z5TVEwdwpDd1lEVlFRTEV3UkVSVU5GTVJJd0VBWURWUVFERXdsc2IyTmhiR2h2YzNReEpUQWpCZ2txaGtpRzl3MEJDUUVXRm5OaGJuUnZjeTVxCmFHRkFibVYxYzNSaGNpNWlhWG93Z1o4d0RRWUpLb1pJaHZjTkFRRUJCUUFEZ1kwQU1JR0pBb0dCQUxCVjVPcGk5MmllTGZGb21laHIKTTFvS2t2engwOGkzT2dQTlc1RGZrN1BHaVAzYWRoL0lsYzJqM2tBSUllZEsxaFFhZFJZL1JEbml6Nk9LVVhlaXJZenRONVExNmk4NQpSV3VVWERvbDdkSFhZVUsreFljUVRPUFNVV1B6eHhOcWo4emx0SE9CSHJTSk1EZ09OZWVQc2MrLzBhRkJUOEQ1Q1lIakhFd2ZSMGU1CkFnTUJBQUdqZ2dFaU1JSUJIakFKQmdOVkhSTUVBakFBTUN3R0NXQ0dTQUdHK0VJQkRRUWZGaDFQY0dWdVUxTk1JRWRsYm1WeVlYUmwKWkNCRFpYSjBhV1pwWTJGMFpUQWRCZ05WSFE0RUZnUVU1K0pYZVpRTmxUVnRBd3BWZm4xMTBHcFFIZk13Z2NNR0ExVWRJd1NCdXpDQgp1SUFVYU9wSjB4S1Y2MDFxUWRsSlM5QVUzeFMya3hPaGdaeWtnWmt3Z1pZeEN6QUpCZ05WQkFZVEFsVlRNUXN3Q1FZRFZRUUlFd0pXClFURVJNQThHQTFVRUJ4TUlVM1JsY214cGJtY3hEVEFMQmdOVkJBb1RCRVJGUTBVeEREQUtCZ05WQkFzVEEyeHNZekVqTUNFR0ExVUUKQXhNYWMzUnZiWGhzWW5OaU9URXVkbUV1Ym1WMWMzUmhjaTVqYjIweEpUQWpCZ2txaGtpRzl3MEJDUUVXRm5OaGJuUnZjeTVxYUdGQQpibVYxYzNSaGNpNWlhWHFDQVFBd0RRWUpLb1pJaHZjTkFRRUVCUUFEZ1lFQWZxK0k4RDFzNTZDcHNXd2dCR0VxUTdWTEo5cDBRWExrCkIrRi9ndGlsNE9uOHdUSytXMXl3N2hqUVdXOUlEaEMrbmZZaDNidEIwYXpjUWVKazdHaVJrRG42NGx5TUxNUTVVaS9seTBqZXF3c0wKTkkxbkUzdHpGLzlydStCbVppbXp6MzQyVW1QU3V2SVVhS3MxeWhicVc5d2pQSDYvL3JHeTV6N1p2UUZYb2NZPTwv</NODE_USER_SAML_ASSERTION_PART1>
      <NODE_USER_SAML_ASSERTION_PART2>ZHM6WDUwOUNlcnRpZmljYXRlPjwvZHM6WDUwOURhdGE+PC9kczpLZXlJbmZvPjwvZHM6U2lnbmF0dXJlPjxzYW1sMjpTdWJqZWN0PjxzYW1sMjpOYW1lSUQgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDpwZXJzaXN0ZW50Ij51cm46ZGVjZTp1c2VyaWQ6b3JnOmRlY2U6RDg3RDJBRjE4OTcxOEIyN0UwNDAxRjBBMDU5OTNFQjk8L3NhbWwyOk5hbWVJRD48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjbTpiZWFyZXIiPjxzYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uRGF0YSBOb3RPbk9yQWZ0ZXI9IjIwMTMtMDMtMjJUMDc6NTM6MDEuMTQ3WiIvPjwvc2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbj48L3NhbWwyOlN1YmplY3Q+PHNhbWwyOkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDEzLTAzLTIyVDA0OjUyOjUxLjE0N1oiIE5vdE9uT3JBZnRlcj0iMjAyMy0wMy0yMlQwNDo1MzowMS4xNDdaIi8+PHNhbWwyOkFkdmljZT48c2FtbDI6QXNzZXJ0aW9uVVJJUmVmPmh0dHBzOi8vcWEuZC51dnZ1LmNvbTo3MDAxL3Jlc3QvMS8wNi9TZWN1cml0eVRva2VuL0Fzc2VydGlvbi9fYjVjYWFiMGMtMzVlMi00ZTlkLTgyMzYtMjAwOTg1Y2RmYTFhPC9zYW1sMjpBc3NlcnRpb25VUklSZWY+PC9zYW1sMjpBZHZpY2U+PHNhbWwyOkF1dGhuU3RhdGVtZW50IEF1dGhuSW5zdGFudD0iMjAxMy0wMy0yMlQwNDo1MzowMS4xNDdaIiBTZXNzaW9uSW5kZXg9Il9iNWNhYWIwYy0zNWUyLTRlOWQtODIzNi0yMDA5ODVjZGZhMWEiPjxzYW1sMjpBdXRobkNvbnRleHQ+PHNhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOlBhc3N3b3JkPC9zYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj48c2FtbDI6QXV0aGVudGljYXRpbmdBdXRob3JpdHk+dXJuOmRlY2U6b3JnOm9yZzpkZWNlOmNvb3JkaW5hdG9yPC9zYW1sMjpBdXRoZW50aWNhdGluZ0F1dGhvcml0eT48L3NhbWwyOkF1dGhuQ29udGV4dD48L3NhbWwyOkF1dGhuU3RhdGVtZW50PjxzYW1sMjpBdHRyaWJ1dGVTdGF0ZW1lbnQ+PHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJhY2NvdW50SUQiIE5hbWVGb3JtYXQ9InVybjpkZWNlOnR5cGU6YWNjb3VudElEIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj51cm46ZGVjZTphY2NvdW50aWQ6b3JnOmRlY2U6RDg3RDJBRjE4OTZGOEIyN0UwNDAxRjBBMDU5OTNFQjk8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjwvc2FtbDI6QXR0cmlidXRlU3RhdGVtZW50Pjwvc2FtbDI6QXNzZXJ0aW9uPjwvc2FtbDJwOlJlc3BvbnNlPg==</NODE_USER_SAML_ASSERTION_PART2>
      <NODE_USER_SAML_UUID>_b5caab0c-35e2-4e9d-8236-200985cdfa1a</NODE_USER_SAML_UUID>
      <CREATED_DATE>2013-03-22 04:53:01.0</CREATED_DATE>
      <NODE_USER_ID>D87D2AF189728B27E0401F0A05993EB9</NODE_USER_ID>
      <NODE_ACCOUNT_ID>D87D2AF189708B27E0401F0A05993EB9</NODE_ACCOUNT_ID>
      <STATUS>active</STATUS>
      <EXPIRATION_DATE>2023-03-22 04:53:01.0</EXPIRATION_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>endPoint</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">rest/1/07/SecurityToken/SecurityTokenExchange?tokentype=urn%3Adece%3Atype%3Atokentype%3Ausernamepassword</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>false</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/soapUIProjects/STSAPIProjects_LP1/RET_concat.pem</con:value></con:property><con:property><con:name>authHeaderValue</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deviceAuthHeaderValue</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionAuthHeader</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionDeviceAuthHeader</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>555384c9-6fa2-448b-a38e-713264e945f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserUpdate" searchProperties="true" id="428ad8cb-d99d-40b3-b945-a85cc67a662a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="db4365d2-b12b-429d-ad75-a9815bc6c2c7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("userStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="91bcee03-c4a6-4ba2-9cc7-a3a3c937a8a8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userStatus",callTC.getPropertyValue("userStatus"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="e9feb3d6-83b0-4da7-a35a-0af3dadd5212"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID_",tC.getPropertyValue("NODE_ID_"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Update");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Update" id="e1b55754-5c4a-469e-af2e-67119bbce727"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Update" mediaType="application/xml;charset=UTF-8" sslKeystore="80008000.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#userStatus}" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>Ganji</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#PrimaryEmail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
      <LegalGuardian>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	
                <Password>${#Project#UserPassword}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNTID_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="24686744-f78c-492b-89c1-ebfd90190573"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Update');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="764f3444-a7dd-463b-b48f-2cbabe13c723"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def NODE_ID        = tC.getPropertyValue("NODE_ID");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#NODE_ID_RetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#NODE_ID_RetailerforDeviceAuthToken}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
		
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
		
		int lastColon = urlStr.lastIndexOf(':');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 1);
		useridfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_USER_ID",userid);
		tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);
	} else {
		assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
		int lastColon = urlStr.lastIndexOf('%3A');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 3);
		useridfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_USER_ID",userid);
		tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);
	}
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" disabled="true" id="712b7379-0a06-4b6c-8d54-de71fb5eae65"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("SecondUserName",tC.getPropertyValue("SecondUserName"));
callTC.setPropertyValue("UserPassword",tP.getPropertyValue("UserPassword"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2011/08/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired">
      <Reason Language="en">The setting of the ManageUserConsent policy prevents the requested action from being completed.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/02/Account/urn:dece:accountid:org:dece:D82F859216DC97E2E0401F0A05996483/User/urn:dece:userid:org:dece:D82FA44A8ED2F913E0401F0A05991C65</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/02/error/en/ErrorList.html#Policy:ManageUserConsentRequired</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">853</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_70082 - STSCreate - llasp - unamepasswd - for the user who updated to Standard from Basic</con:value></con:property><con:property><con:name>sName</con:name><con:value>STS Create Tokentype usernamepassword - Linked LASP Test Cases</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>80008000</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D82F859216DC97E2E0401F0A05996483</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdbc6pKE333V1juR8twURK0klQNFxEVlYvXl68QRkARkAFBf/0ZMBrNTvbZ53tImWmme1Z3L5o1r8jc+3QHIATjxAuDqiy81f7HmOb6xWqtG+tWi260mhTbaFsU1SBphmbWFNsmbaZWlRFKoRygxAyStxpNUs0G2WxQrEGyHeqlw7SeSPJ5VavOYIxwaLzliaxV870foE557FstjYNOaCIPdQJzD1EnsTo6UIYdvLNjXjHV3l8vKMsD43c3SaIOQVhPNrSg71tPVrgnXomHPa826uieE5hJGsOPM230VvvwzbLsKWs+hbFD0CRJEmSbwHts5Dm/au+VqzO05WATXta8GYSBZ5m+dzYLUApM3NCuAt8JYy9x9z+EpgiKLEI3YG41LKoV/KoRnweU6P4y0gPIGJkN5JrUNZgGNzCGgQWrU01+q/36uw5efI3YDNAmjPfoy/q/QYLBEfphBO0GumZ2Rff3Eb8p1/srtDpyYPkp8o5wVNAkMi2IqpMYbrx86CFMPhtVy/ZXc3RlGLT+S0teiXucGDbxTWUEz4Eo+X/6dd+rS5SZ6afw/Wxm6cmwxwA2BZCF1sjbnverNZCGrbcSwv3mC6hbqz/WX4l649WH04E/shkvt7dUT+F00wDnvmjx7Ljec5qCA8S0v+WXrak9IbdJbyAJ8DSpHxCSbB91Zwt2nOh0fRWL9VRi/AonECr5HLys3e2BZfaUo4zDSb6uN+cySYA+wUR1uFvtmtMkWfR6ob4Hs9DJgj6yyJNvzpMo1CcrcdOerfNt5ZiuW2mUUe74zLe0QxQenLfPnO5zKPIawFOZZPH/giHbgpmYtwVfTIoNfj0T+K7IspCeeR6cdAdkMgcc/LcFI87ZHdydJ7UzkgOq2gUCz/lbcaiAnQSoqci5Cj+bKTl/Bn3OGc2wo1EB/opTNDETsqUwU9WemLmGLc1Oa8lPV2dxpABUOvOuImriTNAMUVFAeLHlirCW8q2iK5msLoUKDiCIeXS2pXYCpdyzaJlRdIZe6ky6WsywvXsa7kfHtSH6Cq9IvH6QdHndFFSxD7Tl3KK7KfY9D/dRWFlOuTunfgS3AHYzEp8JzoqxyxRjSo8EzSxtxqNNkaW+oqKMV8uspIqY9WfT82cteE7h7b2YiwaYXGphGXx3RK4WfWTOmUDRQCY4pfNAzOzxFYiiklmFv9RqKGaaqE1HXUWTMxGUNkHMfLSmR+5aco9WU837BtjeN4ZXxXk3wM8D7WidmEPFlLpgvZ9RVlNzLY/xzEWYOSs2E9RlfxCuZBxmBFSR41SAAZGgSA3XnwNDbsaMI69Ne3C46YZ76MYVhQoHu+M5J1mvOXYmozkjbHYvE8mbNE3bJWTforfNHZBlaA8oVzVtbUloQuCdn8eD6QJ68fKcjBiVevZYpqLN0+lCCP0Xu7dYTgf1fGmpxniiT+eTc56PDlv27Ce9MdeL9b4iOOMRhBNk1QnS7HIGKzD8srfFfNpoJGQqwFE4AKSt44geJjDX215I2NMUEZMXKHwm8XNe0oEk1UWZE1R103WpiSXN0ik1UmTR9nGZTsuF5ldWPCfgTpHmfBUt6S65MoBdBlNbYtdRp0y9v4ArdeQbswRk0WwTUBQpRWpvo2SOpRQMsOVM5/BbxFVSGUzNcdQn88HsmaQOqu339TaYNnOd3uVj11mdds5qh5uyvHt1lgbwZ8Ydx2RMsXlFNURNAezlfcsVedrUfGufR+u9lQsG7lnpHBqcqHVVcpoLAhhcbMgAdI6WZ3Gr8GLpXwG5YmJaHNcLFy2DkTc2xBSTNr2jy3ZNk//KsYJilUeOHXiggq8cEy8cE8HmUJdZgULMMx+heeZwknhQX2bDfjsi1cVwV+HqXcJJPL81DtjMGNTn1Cl7cbfqfN6WBZevB5ul21wnHGmeLRX2dy+Sp+2E4Lnln5ShojJTj/BP5BYeMjSsjGQqEJvJuUu047TO7Vfe/nxutujpfqKnR3lqDhB1cteHeTvbTnrPBBFLJ+b8sjqq3UVoLS/fka9D8ma8jFHifsA+TOCr9tLT9RZayXVZfIdlodrFH0cz+bOOKyye3diUWztRIQZRAoOk9l54FRquk2Kl59kd/OW8rAWW7rJMm6aexXb7RaRFskVSXRKQTLv93GKbV7F3QfEFIh8GG684q5Czl4/1nwFa+w6CgQ3jxjFMLRei2h8iFvWqyoGGVUgYIGiEhVxuAcAI7HOXBk2aJVtNvOJxaSnAAo7nhVp1FCbjYByDTQLjB6lMUQ9SWYOWF3mw0NOFqEBYVaAEl+RgHtPEp56O5lMAU6y440L0dugWyxDI20c+LAAT+9BOffgUuVFZIAJdfumGaaHSymJdUvyViufHHL8+u5YD77G9YgMqEuIgbin8Rvi3rtn8nHXrPutreJDaXiFscG2T2LMuSB4ffVKm4MqNL9e0rrhv278aHkITX7O6nWYfPevG/NvdCEtrLL7er405mE+Hp/R4TMtWvBTCMsbhCYogaUKHVorV4ckIdzAgbiGIvxLmN9RfTr7ZH/GliRvoCX6r95g41XL5F7cyHaLiViZj4ud/e+V7OBLXLYF58p2N9/HlrUD8x/ud1bGKfdg8wT9ZGNuf7fom1t05OM9ijHmBU6wKGX76gRlWiMN6eJSF8X3w7wJ8d/ij8VbkG5YEs2mdJvDnJ9ViRr3VTMsK0yCRi1mADfdzs8SZnCLY+dz0W5hSCH/cbHL0481moQx1PMH2Zu221/v3zQ2vpIsFsRfySixvtRxf0vHhgXM3pz8Afj+qBf5Po/oxk/ffzL9b7mr69X14/wc=</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D82FA44A8ED2F913E0401F0A05991C65</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn:dece:accountid:org:dece:D82F859216DC97E2E0401F0A05996483</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:D82FA44A8ED2F913E0401F0A05991C65</con:value></con:property><con:property><con:name>UserName</con:name><con:value>basicusername_20130318_01518</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\80008000.pem</con:value></con:property><con:property><con:name>userStatus</con:name><con:value>standard</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SetPem" searchProperties="true" id="86276eeb-d9b5-40a4-b6c7-3d480dd38864"><con:settings/><con:testStep type="groovy" name="Set Pem" id="7e94c4c9-8135-46ee-ba56-615bfdb9746e"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import org.apache.commons.lang.SystemUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def eNV = context.expand( '${#Project#ENV}' )

def propertiesPath = null;

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows OS!!";
    		File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
    		propertiesPath = temp.getCanonicalPath();
	} 
else 
	{
    		log.info "it's Linux OS!!";
    		File temp = new File(projectPath + "/../../../Properties/");
    		propertiesPath = temp.getCanonicalPath();
	}
	
log.info("Properties File Location : '" + propertiesPath+ "'");




def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));

String line;
while ((line = reader.readLine()) != null)
      {
	       if (line.trim().length()==0) continue;
	       if (line.charAt(0)=='#') continue;
	
	       int delimPosition = line.indexOf("=");
	       String key = line.substring(0, delimPosition-0).trim();
	       String value = line.substring(delimPosition+1).trim();
	       propMap.put(key, value);
      }


if (System.properties['os.name'].toLowerCase().contains('windows')) 
      {
            log.info "it's Windows OS!!!";
            File temp = new File( projectPath + "\\..\\..\\..\\Certs\\" + eNV + "\\");
    		  certPath = temp.getCanonicalPath();      
      } 
else 
      {
            log.info "it's Linux OS!!!";
            File temp = new File(projectPath + "/../../../Certs/" + eNV + "/");
    		  certPath = temp.getCanonicalPath();
      }  
      
 log.info("Cert path: " + certPath );  
                  
def nodeId = context.expand( '${#TestCase#NODE_ID}' )

log.info "nodeId: "+nodeId;

 if (nodeId == "dece:cs")
       {
             nodeId = "dececs";
       }
 else if (nodeId == "coord:cs")
       {
             nodeId = "coordcs";
       }
 else
       {
             nodeId = nodeId;
       }


//log.info "~~~~~~~~~~~~" +nodeId
boolean imFine = true;
def pwd = null;
def certMatchesNodeID = context.expand( '${#Project#CertMatchesNodeID}' )
log.info("CertMatchesNodeID : '" + certMatchesNodeID + "'");
if (certMatchesNodeID == "YES")
{
		File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
		File f2 = new File(certPath+"/"+nodeId + ".jks");
		File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");
		File f4 = new File(certPath+"/"+nodeId + ".pem");

	
	// sets the certificate from the specific folder when the certname and NodeId are same
	  if(f1.exists()) 
             {
                   keyStorePath = certPath+"/"+nodeId + "_concat.pem";
                   pwd = "123"
                   log.info("F1 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");      
             }
	  else if(f2.exists())
             {
                  	keyStorePath = certPath+"/"+nodeId + ".jks";
                   	pwd = "abcd1234" 
                   	log.info("F2 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");          
             }
	  else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
                   	pwd = "12elma";
				log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
             }
	  else if(f4.exists()) 
             {
                   	keyStorePath = certPath+"/"+nodeId + ".pem";
                   	pwd = "123";
                   	log.info("F4 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");       
             }
	  else
             {
                  	log.info "No cert file is Found!!!";
                  	imFine = false;
             }
}
else
{
	//to get the certificate name from another property based on the nodeid property.
		
	
       def value = propMap.find{ it.value == nodeId }?.key
       def certName = testProject.getPropertyValue(value+"_cert");       
       log.info "cert name .... " + certName;

		File f1 = new File(certPath+"/"+certName + "_concat.pem");
		File f2 = new File(certPath+"/"+certName + ".jks");
		File f3 = new File(certPath+"/truststore-"+certName + ".jks");
		File f4 = new File(certPath+"/"+certName + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");      
		     
       if(f1.exists()) 
             {
             		
				keyStorePath = certPath+"/"+certName + "_concat.pem";
				pwd = "123";
				log.info("F1 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else if(f2.exists())
             {
				keyStorePath = certPath+"/"+certName + ".jks";
				pwd = "abcd1234";
				log.info("F2 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");           
             }
       else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+certName + ".jks";
                   	pwd = "abcd1234";
                   	log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
                   	         
             }
       else if(f4.exists()) 
             {
				keyStorePath = certPath+"/"+certName + ".pem";
				pwd = "123";  
				log.info("F4 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else
			{
			log.info "No cert file is Found!!!";
			imFine = false;
			}                             
}


if(imFine)
{
      def callTSname = testCase.getPropertyValue("sName");
      def callTCname = testCase.getPropertyValue("tName");
      
      def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
      
      callTC.setPropertyValue("keyStorePath","$keyStorePath");
      testCase.setPropertyValue("keyStorePath","$keyStorePath");
      
      SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
      SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
      log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>PolicyDelete</con:value></con:property><con:property><con:name>sName</con:name><con:value>CommonTestSteps</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ID_</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeviceAuthTokenCreate - JoinCode API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="47d8c855-cfa3-4e54-a016-2e86d3c55c3a">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Properties" id="d0791bf1-8f8e-48fa-90f2-1a5499cafcee">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("counter",null);
tC.setPropertyValue("nodeSavedRole",null);
tC.setPropertyValue("deviceAuthTokenRole",null);
tC.setPropertyValue("expectDeviceTokenCreateResponse",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("accountAuthTokenRowsBefore",null);
tC.setPropertyValue("accountAuthTokenRowsAfter",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Properties from Calling Test Case" id="19566511-8785-4028-9459-7ea5f0f38f6e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("USER_OID",callTC.getPropertyValue("USER_OID"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("expectDeviceTokenCreateResponse",callTC.getPropertyValue("expectDeviceTokenCreateResponse"));
tC.setPropertyValue("deviceAuthTokenRole",callTC.getPropertyValue("deviceAuthTokenRole"));

if (tC.getPropertyValue("expectDeviceTokenCreateResponse") == null ||
	tC.getPropertyValue("expectDeviceTokenCreateResponse") == "null") {
	tC.setPropertyValue("expectDeviceTokenCreateResponse","SUCCESS");
}
if (tC.getPropertyValue("counter") == null ||
	tC.getPropertyValue("counter") == "null") {
	tC.setPropertyValue("counter","1");
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract API Error Information" id="b989ad26-b758-4ad5-ae42-eb6228b3fdad">
        <con:settings/>
        <con:config>
          <script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectDeviceTokenCreateResponse[" + tC.getPropertyValue("expectDeviceTokenCreateResponse") + "]";

switch (tC.getPropertyValue("expectDeviceTokenCreateResponse")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "ACCOUNT_NOT_VALID":
		errId = "AccountIdNotValid";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "DEVICE_EXCEED_MAX":
		errId = "AccountDeviceCountExceedMaxLimit";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "RENEW_EXCEED_MAX_TIME":
		errId = "StreamRenewExceedsMaximumTime";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set PEM file for HTTPS Request" id="f9ee0af2-989d-4f52-86a7-2fa02e663d98">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID_",tC.getPropertyValue("NODE_ID_"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DeviceAuthTokenCreate - JoinCode API");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DeviceAuthTokenCreate - JoinCode API" id="62fb4875-90dd-4173-9054-86d970526921"><con:settings/><con:config service="DeviceAuthTokenCreate - JoinCode" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/DeviceAuthToken/JoinCode" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeviceAuthTokenCreate - JoinCode API" mediaType="application/xml;charset=UTF-8" postQueryString="false" sslKeystore="RET_concat.pem" id="68de3b85-4675-446e-bf2b-c354759b93cc"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>https://${#Project#targetURL}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ACCT" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep>
      <con:testStep type="groovy" name="Verify DeviceAuthTokenCreate Response Headers/Body" id="b383ecfe-f464-4c4a-bec4-aa43a851c7cc">
        <con:settings/>
        <con:config><script>import org.xml.sax.SAXException; 
import org.xml.sax.SAXParseException; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep = tC.getTestStepByName('DeviceAuthTokenCreate - JoinCode API');

tC.setPropertyValue("rauthToken", null);
tC.setPropertyValue("rauthToken_" + tC.getPropertyValue("counter"), null);

boolean expectLocation = null;
boolean performBodyValidations = true;
String respstatus = null;
String respconnection = null;
String respcontentType = null;
String respcontentLength = null;
String respLocation = null;
String respbody = null;
String expectstatus = null;
String expectconnection = null;
String expectcontentType = null;
String expectcontentLength = null;
String urnError = tP.getPropertyValue("urnError").toString();
String major = tP.getPropertyValue("versionMajor").toString();
String minor = tP.getPropertyValue("versionMinor").toString();
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";

try {
	respbody = tStep.httpRequest.response.getResponseContent().toString();
} catch (e) {
	log.info "getResponseContent failure! - $e";
} finally {
	tStep.httpRequest.response.responseHeaders.each() { header, value ->
		switch (header) {
			case "Location": 
				respLocation = value[0];
				break;
			case "#status#": 
				respstatus = value[0]; 
				break;
			case "Connection": 
				respconnection = value[0]; 
				break;
			case "Content-Type": 
				respcontentType = value[0]; 
				break;
			case "Content-Length": 
				respcontentLength = value[0]; 
				break;
			case "Transfer-Encoding": 
				resphttpContentEncoding = value[0]; 
				break;
		}
	}
}

log.info "expectDeviceTokenCreateResponse -- [" + tC.getPropertyValue("expectDeviceTokenCreateResponse") + "]";

switch (tC.getPropertyValue("expectDeviceTokenCreateResponse")) {
	case "SUCCESS":
		expectstatus = "HTTP/1.1 201 Created";
		expectconnection = "Keep-Alive";
		expectcontentType = context.expand('${#Project#expectHTTPcontenttype}');
		//expectcontentType = "text/plain; charset=UTF-8"
		expectcontentLength = "0";
		expectLocation = true;
		break;
	case "Node_status_inactive":
		expectstatus = "HTTP/1.1 403 Forbidden";
		expectconnection = "Keep-Alive";
		expectcontentType = context.expand('${#Project#expectHTTPcontenttype}');
		expectcontentLength = "1";
		expectLocation = false;
		performBodyValidations = false;
		break;
	default:
		errorReasonFlag = true;
		expectstatus = tC.getPropertyValue("errorStatusCode");
		expectconnection = "Keep-Alive";
		expectLocation = false;
		expectcontentLength = "1";
		expectcontentType = context.expand('${#Project#expectHTTPcontenttype}');
		errorID     = urnError + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

/*
*  HTTP Header Checkes...
*/
log.info "----- HTTP Header Validations ------";

log.info "expectstatus[$expectstatus] - respstatus[$respstatus]";
assert expectstatus == respstatus;

log.info "expectconnection[$expectconnection] - respconnection[$respconnection]";
assert expectconnection == respconnection;

if (expectcontentLength == "0") {
	log.info "expectcontentLength[$expectcontentLength] - respcontentLength[$respcontentLength]";
	assert respcontentLength == expectcontentLength;
} else {
	log.info "respcontentLength[$respcontentLength] - Greater than zero";
	assert respcontentLength.toInteger() > 0;
}

if (expectLocation) {
	log.info "respLocation[$respLocation] - Location Header Present in Response";
	assert respLocation.length() > 1;
} else {
	log.info "respLocation[$respLocation] - Location Header NOT Present in Response";
	assert respLocation == null;
}

log.info "expectcontentType[$expectcontentType] - respcontentType[$respcontentType]";
assert expectcontentType == respcontentType;

/*
*  HTTP Body Checkes...
*/
log.info "----- HTTP Body Validations performBodyValidations[$performBodyValidations] ------";

/*
*   -------------------- ERROR --------------------
*/
if (performBodyValidations) {
	if (tC.getPropertyValue("expectDeviceTokenCreateResponse") != "SUCCESS") {
		try {
			def myXML = new XmlSlurper().parseText(respbody);
		} catch (IOException e) {
			log.info "ERROR!  XmlSlurper.parseText IOException error -- $e";
		} catch (SAXException e) {
			log.info "ERROR!  XmlSlurper.parseText SAXException error -- $e";
		}
		finally {
			assert myXML.Error.size() == 1;
			assert myXML.Error.Reason.size() == 1;
			assert myXML.Error.OriginalRequest.size() == 1;
			assert myXML.Error.ErrorLink.size() == 1;

			String respErrorCode = myXML.Error.@ErrorID.toString();
			String respReason = myXML.Error.Reason.toString();
			String respErrorLink = myXML.Error.ErrorLink.toString();
			String expectErrorCode = urnError + tC.getPropertyValue("errorID").toString();
			String expectReason = tC.getPropertyValue("errorReason").toString();
			String expectErrorLink = errorLinkBase + tC.getPropertyValue("errorID").toString();
		
			// ErrorCode
			this.log.info "expectErrorCode [$expectErrorCode] - respErrorCode[$respErrorCode]";
			assert respErrorCode == expectErrorCode;

			// Reason
			this.log.info "expectReason [$expectReason] - respReason[$respReason]";
			assert respReason == expectReason;

			// ErrorLink
			this.log.info "expectErrorLink [$expectErrorLink] - respErrorLink[$respErrorLink]";
			assert respErrorLink == expectErrorLink;
		}
	} else {
		/*
		*   -------------------- SUCCESS --------------------
		*/
		String proto = "";
		String hostie = "";
		String rPort = "";
		String rauthToken = "";
		String rauthTokenFile = "";
		String authTokenFile = "";

		try {
			URL aURL = new URL(respLocation);

			proto = aURL.getProtocol();
			hostie = aURL.getHost();
			rPort = aURL.getPort();
			rauthtokenFile = aURL.getFile();
	
		} catch (MalformedURLException e) {
			log.info "ERROR!  Failed to parse URL - $respLocation - $e";
		} finally {
			log.info "proto[$proto] == https";
			assert proto == "https";

			log.info "hostie[$hostie] == [" + tP.getPropertyValue("targetHostq") + "]";
			assert hostie == tP.getPropertyValue("targetHostq");

			log.info "rPort[$rPort] == [" + tP.getPropertyValue("targetPort") + "]";
			assert rPort == tP.getPropertyValue("targetPort");

			log.info "rauthtokenFile[$rauthtokenFile]";
			if (rauthtokenFile.length() > 0) {
				int lastSlash = rauthtokenFile.lastIndexOf('/');
				rauthToken = rauthtokenFile.substring(lastSlash + 1);
			}
			log.info "rauthToken [$rauthToken]";

			tC.setPropertyValue("rauthToken", rauthToken);
			tC.setPropertyValue("rauthToken_" + tC.getPropertyValue("counter"), rauthToken);
		}
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract the DEVICE_AUTH_TOKEN.DEVICE_AUTH_CODE value" id="7e000e1a-725b-4ce8-8dfd-09969a16cdbf">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String deviceAuthToken = "";

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
	deviceAuthToken = dbUtils.deviceGetAuthCode(tC.getPropertyValue("rauthToken"));
}
catch (Throwable e) {
	log.info "Error in dbUtils.deviceAuthToken - $e";
}
finally {
	log.info "deviceAuthToken [$deviceAuthToken]";

	assert deviceAuthToken.length() > 0;

	tC.setPropertyValue("deviceAuthToken",deviceAuthToken);
}




deviceAuthToken</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return resulting API Attributes" id="1f895cb5-3a0b-4710-a806-f12843ff1a12">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

if (tC.getPropertyValue("expectDeviceTokenCreateResponse") == "SUCCESS") {
	callTC.setPropertyValue("deviceAuthToken",tC.getPropertyValue("deviceAuthToken"));
	callTC.setPropertyValue("authTokenStatus","active");
	callTC.setPropertyValue("authTokenStatus_" + tC.getPropertyValue("counter"),"active");
	callTC.setPropertyValue("rauthToken",tC.getPropertyValue("rauthToken"));
	callTC.setPropertyValue("rauthToken_" + tC.getPropertyValue("counter"),tC.getPropertyValue("rauthToken"));
	callTC.setPropertyValue("authTokenCreatedBy",tC.getPropertyValue("NODE_ID"));
	callTC.setPropertyValue("authTokenCreatedBy_" + tC.getPropertyValue("counter"),tC.getPropertyValue("NODE_ID"));
	callTC.setPropertyValue("authTokenCreatedUser",tC.getPropertyValue("USER_OID"));
	callTC.setPropertyValue("authTokenCreatedUser_" + tC.getPropertyValue("counter"),tC.getPropertyValue("USER_OID"));
	callTC.setPropertyValue("authTokenCreatedAccount",tC.getPropertyValue("accountoid"));
	callTC.setPropertyValue("authTokenCreatedAccount_" + tC.getPropertyValue("counter"),tC.getPropertyValue("accountoid"));
	callTC.setPropertyValue("authTokenisGen","Y");
	callTC.setPropertyValue("authTokenisGen_" + tC.getPropertyValue("counter"),"Y");
}
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep>
      <con:properties>
        
        <con:property><con:name>accountAuthTokenRowsAfter</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        <con:property><con:name>accountAuthTokenRowsBefore</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value>E9CCB68066E375A9E0401F0A05994A8E</con:value></con:property>
        
        <con:property><con:name>assert</con:name><con:value>nVZbc6JKEH7fX0Gxj1vIRVCgolVe95hoLuruunk5NQ6NjgcGZAZi/PVnwEDUmJzsqbKkpunp/rr745u5YigMDLfDGCScRFQa9Vvy306j6Ti2YykmQo748+sKAhsUB5q+5zUalg1NWRoxlsKIMo4ob8mGptcVXVMMe67rrmWIX82o24+y9BMSJkILl5omS7swoMwt0rbkNKFuhBhhLkUhMJdjd9aZjF3h6aISk9y+OqAsEibtNeexq6q45gGGIMA1HIXqlXric+Uxd0ZWFPE0gZecHmvJL3ufnp5qT/ValKxUQ9M0VXNU4eMxsvoqt7+Um8EbUT86rHuIRpRgFJA9ykFNgK8jT+oEqyghfB2+E1pXdS0PrcAOK1g36VdZfU1QoPtkpBOQCUMKWyO9DDYFHxKgGKQf01FL/vq5CR72zhNEmR8lITtb/xkkoBkEUQyewsrKSnSfj3ihXe0rwO6I4iBlJIPbnCYxwsCk+wR8shsTJsjnMakYv7RjJcMA/8lIrtRjnAK2eqEzfbICxv/PvI5ndYjyEwUptJ3b+BaN1tnCih2/k/nj2fM63m50fcBaBYRj5wOoatQv63OiVrx62bS5S5erbpKsTaavfi8fDHUK1+lNjMZr24oHe+8H7qnP6RKmiYHtRfK9v/xh3Pjhxiac/xpHSyvr+NuAWQ8b+mWf7Z9+hX85e950Jotx3E35onHNokdvMnxe3NYfzO+P/QcNZpE5uXtwmpPtaDoy8PX9dv9tE2/G0U1/QRc+6s3n8GUZpN9uFlq0vB/se6ts8ztkrdeajms4NZZyMEuXG8C8XObUGPWloZgX4h9LS24hnuIXrm6c6xPjQLncznflsuKmQnyI54phHtYDp9frNmxDs4YNx+xbA83U9KHW0SzHMTuOWerPAcUZxF5EfZLnyhX2wJ+PAeLQZUA9SJQsSvEamPxBxD7iSBrRqfgwIspgHgkF7w2GvW7d6DYatmlq9V7DsrSu3TCG/U6jb/SGsnQb8Tt6l3R8Dsmpepsn6j0FTGICucTnPGeC6IyLlmxRlvJAr2WoRiEVh0CS67BrmLalMhLGAeSA1TDy0gBq8TouGqSyw9NQEGaFdTqYF9/fu+Wdvys7IXw8kjuwvJYuiGnChWPILAt5v+DmccFl+E7qkfwzE23lCcEHJKevXtmS06SiiqiohFx5nhtOoqrnBVWJvIzgiu/VIS00XqhAuxzHFtW2tTTL0mIAzVzhEhFe1VWtqc4Ap0KmnufRP0DVKoT6qROiQn2WubKf4kv5ms444hAKukjF8hPXgxmw/HowEnTfffbucZJS9I3Djl+y9QJxi8gRf3jRwC7O/YT5XjyeosR7HdeFWEd5RJ3iTsAJXeWr/Dx4focUOBJhiRCwKDkOfinApeSnxqrJFRYu2LRMObz/RsqVqSUjjKOU8lFfLgzHalng5M8xuK9Ob8IUivxyxO7Yu0fsYjKeCd0KkVz5kv92VkhBFwxiFyMFlpa8E7dFkZyujtT5BeAFgdYajYHRtDrOqUDbg6qBJ5W035jfWo56ev49tP8F</con:value></con:property>
        
        
        
        
        <con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE45CAD25EE3E6D9BE0401F0A05995033</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>deviceAuthToken</con:name><con:value>77817786</con:value></con:property><con:property><con:name>deviceAuthTokenRole</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer</con:value></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property>
        
        
        <con:property><con:name>errorStatusCode</con:name><con:value/></con:property>
        
        <con:property><con:name>expectDeviceTokenCreateResponse</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/soapUIProjects/STSAPIProjects_LP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property>
        <con:property><con:name>nodeSavedRole</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>86722</con:value></con:property><con:property><con:name>rauthToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E9CCB67CED2BBCC8E0401F0A079904BE</con:value></con:property><con:property><con:name>rauthToken_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E9CCB67CED2BBCC8E0401F0A079904BE</con:value></con:property><con:property><con:name>rauthToken_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        
        <con:property><con:name>rauthToken_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
      <con:property><con:name>sName</con:name><con:value>3_STS Create and STS Get- MTHD</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_13028 - STS GET - DeviceAuthToken - Method Not Allowed - PATCH Method - P1</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value>E9CCB68205F794D5E0401F0A05994A94</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E9CCB68066E275A9E0401F0A05994A8E</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeviceAuthTokenCreate - DeviceString API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="e1d40aa9-5e63-49ab-9e3d-d8a60c41529e">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Properties" id="ea610fbf-5e1b-4aac-94a1-f5f8070a304e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("counter",null);
tC.setPropertyValue("expectDeviceTokenCreateResponse",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("accountAuthTokenRowsBefore",null);
tC.setPropertyValue("accountAuthTokenRowsAfter",null);
tC.setPropertyValue("deviceDeviceString",null);
tC.setPropertyValue("deviceExpirationMinutes",null);
tC.setPropertyValue("deviceExpirationTime",null);
tC.setPropertyValue("deviceIssuedToUser",null);
tC.setPropertyValue("actionExpires",null);
tC.setPropertyValue("actionDeviceString",null);
tC.setPropertyValue("actionIssuedToUser",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Properties from Calling Test Case" id="dc8f37f9-0d53-44e6-94d7-1328f0bbd4e2">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("USER_OID",callTC.getPropertyValue("USER_OID"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("deviceDeviceString",callTC.getPropertyValue("deviceDeviceString"));
tC.setPropertyValue("deviceIssuedToUser",callTC.getPropertyValue("deviceIssuedToUser"));
tC.setPropertyValue("deviceExpirationTime",callTC.getPropertyValue("deviceExpirationTime"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL")));
tC.setPropertyValue("expectDeviceTokenCreateResponse",callTC.getPropertyValue("expectDeviceTokenCreateResponse"));
tC.setPropertyValue("deviceExpirationMinutes",callTC.getPropertyValue("deviceExpirationMinutes"));
tC.setPropertyValue("actionDeviceString",callTC.getPropertyValue("actionDeviceString"));
tC.setPropertyValue("actionExpires",callTC.getPropertyValue("actionExpires"));
tC.setPropertyValue("actionIssuedToUser",callTC.getPropertyValue("actionIssuedToUser"));

if (tC.getPropertyValue("expectDeviceTokenCreateResponse") == "null" ||
tC.getPropertyValue("expectDeviceTokenCreateResponse") == null) {
	tC.setPropertyValue("expectDeviceTokenCreateResponse","SUCCESS");
}
if (tC.getPropertyValue("counter") == "null" || 
	tC.getPropertyValue("counter") == null) {
	tC.setPropertyValue("counter","1");
}

if (tC.getPropertyValue("deviceDeviceString") == "null" ||
	tC.getPropertyValue("deviceDeviceString") == null) {

	def a = new generalUtils.generalUtils(log);
	def b = a.randomAlphaNumericString(27);
	tC.setPropertyValue("deviceDeviceString",b);
}
if (tC.getPropertyValue("deviceIssuedToUser") == "null" ||
	tC.getPropertyValue("deviceIssuedToUser") == null) {
	tC.setPropertyValue("deviceIssuedToUser",tC.getPropertyValue("assertionUserIdFULL"));
}

if (tC.getPropertyValue("deviceExpirationTime") == "null" ||
	tC.getPropertyValue("deviceExpirationTime") == null) {
	if (tC.getPropertyValue("deviceExpirationMinutes") == "null" ||
		tC.getPropertyValue("deviceExpirationMinutes") == null) {
		tC.setPropertyValue("deviceExpirationMinutes","1440");
		def a = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
		String b = a.deviceGetSysdate(tC.getPropertyValue("deviceExpirationMinutes").toInteger()) + ".0Z";
		b = b.replace(' ','T');
		tC.setPropertyValue("deviceExpirationTime", b);
	} else {
		def a = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
		String b = a.deviceGetSysdate(tC.getPropertyValue("deviceExpirationMinutes").toInteger()) + ".0Z";
		b = b.replace(' ','T');
		tC.setPropertyValue("deviceExpirationTime", b);
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract API Error Information" id="4241427a-a14b-4123-9200-9e848f71ed94">
        <con:settings/>
        <con:config>
          <script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectDeviceTokenCreateResponse[" + tC.getPropertyValue("expectDeviceTokenCreateResponse") + "]";

switch (tC.getPropertyValue("expectDeviceTokenCreateResponse")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "ACCOUNT_NOT_VALID":
		errId = "AccountIdNotValid";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "DEVICE_EXCEED_MAX":
		errId = "AccountDeviceCountExceedMaxLimit";
		break;
	case "DEVICE_TOKEN_REQUIRED":
		errId = "DeviceAuthStringRequired";
		break;
	case "DEVICE_TOKEN_DUPLICATE":
		errId = "DeviceAuthCodeAlreadyExists";
		break;
	case "DEVICE_EXPIRE_DATE_MISSING":
		errId = "DeviceAuthCodeExpirationDateNotFound";
		break;
		DeviceAuthCodeInvalid
	case "DEVICE_AUTH_CODE_INVALID":
		errId = "DeviceAuthCodeInvalid";
		break;	
	case "DEVICE_AUTH_DATE_INVALID":
		errId = "DeviceAuthCodeExpirationDateInvalid";
		break;			
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "RENEW_EXCEED_MAX_TIME":
		errId = "StreamRenewExceedsMaximumTime";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Node's DEVICE_AUTH_TOKEN row count before API" id="890b6fd4-39f2-480c-8a86-b31c800469d3">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def x = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
def y = x.deviceAuthTokenCountByNode(tC.getPropertyValue("accountoid"));

log.info "y is $y";
tC.setPropertyValue("accountAuthTokenRowsBefore", y.toString());</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set PEM file for HTTPS Request" id="85892e2a-13cb-4ac0-93cb-df2b88bac334">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID_",tC.getPropertyValue("NODE_ID_"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - DeviceAuthTokenCreate - DeviceString");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish DeviceAuthTokenCreate Request Body" id="4bc3a4db-d938-45a8-a19c-718b95f08400">
        <con:settings/>
        <con:config>
          <script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String coorxsd = tP.getPropertyValue("coordinatorSchema").toString();
String urnUser = tP.getPropertyValue("urnUser");
String DeviceString = tC.getPropertyValue("deviceDeviceString");
String Expires = tC.getPropertyValue("deviceExpirationTime");
String IssuedToUser = tC.getPropertyValue("deviceIssuedToUser");
String xmlDeviceString = "";
String xmlExpires = "";
String xmlIssuedToUser = "";

log.info "actionDeviceString[actionDeviceString]";

String body = """<?xml version="1.0" encoding="UTF-8"?>
<dece:DeviceAuthToken xmlns:dece="$coorxsd"
	xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md"
	xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.decellc.org/schema/2010/10/dece dece.xsd ">
	%%%DEVICESTRING%%%
	%%%EXPIRES%%%
	%%%USER%%%
</dece:DeviceAuthToken>
""";

/*
*  <dece:DeviceString>
*/
switch (tC.getPropertyValue("actionDeviceString")) {
	case "isMissing":
		xmlDeviceString = "";
	break;
	case "isNullTerminated":
		xmlDeviceString = "<dece:DeviceString/>";
	break;
	case "isNull":
		xmlDeviceString = "<dece:DeviceString></dece:DeviceString>";
	break;
	default:
		xmlDeviceString = "<dece:DeviceString>$DeviceString</dece:DeviceString>";
	break;
}
/*
*  <dece:Expires>
*/
switch (tC.getPropertyValue("actionExpires")) {
	case "isMissing":
		xmlExpires = "";
	break;
	case "isNullTerminated":
		xmlExpires = "<dece:Expires/>";
	break;
	case "isNull":
		xmlExpires = "<dece:Expires></dece:Expires>";
	break;
	case "isMissing":
	default:
		xmlExpires = "<dece:Expires>$Expires</dece:Expires>";
	break;
}
/*
*  <dece:IssuedToUser>
*/
log.info "---actionIssuedToUser[" + tC.getPropertyValue("actionIssuedToUser") + "]";
switch (tC.getPropertyValue("actionIssuedToUser")) {
	case "isMissing":
		xmlIssuedToUser = "";
	break;
	case "isNullTerminated":
		xmlIssuedToUser = "<dece:IssuedToUser/>";
	break;
	case "isNull":
		xmlIssuedToUser = "<dece:IssuedToUser></dece:IssuedToUser>";
	break;
	case "urnOnly":
		xmlIssuedToUser = "<dece:IssuedToUser>$urnUser</dece:IssuedToUser>";
	break;
	case "authtokenuser":
		xmlIssuedToUser = "<dece:IssuedToUser>$urnUser</dece:IssuedToUser>";
	break;
	case "includedeviceIssuedToUser":
		xmlIssuedToUser = "<dece:IssuedToUser>$IssuedToUser</dece:IssuedToUser>";
	break;
	default:
		xmlIssuedToUser = "";
	break;
}

log.info "xmlDeviceString[$xmlDeviceString]";
log.info "xmlExpires[$xmlExpires]";
log.info "xmlIssuedToUser[$xmlIssuedToUser]";

body = body.replaceAll("%%%DEVICESTRING%%%", xmlDeviceString);
body = body.replaceAll("%%%EXPIRES%%%", xmlExpires);
body = body.replaceAll("%%%USER%%%", xmlIssuedToUser);

log.info body;

tC.setPropertyValue("requestBody", body);]]></script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="POST - DeviceAuthTokenCreate - DeviceString" id="c0c23aea-8166-414d-937c-33473fa3cd6e"><con:settings/><con:config service="DeviceAuthTokenCreate - DeviceString" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/DeviceAuthToken/DeviceString" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - DeviceAuthTokenCreate - DeviceString" mediaType="application/xml;charset=UTF-8" postQueryString="false" sslKeystore="7600.pem" id="3da3fd7c-f2d7-4bdb-8967-1ee29a331c9b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>https://${#Project#targetURL}</con:endpoint><con:request>${#TestCase#requestBody}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ACCT" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep>
      <con:testStep type="groovy" name="Verify DeviceAuthTokenCreate Response Headers/Body" id="1fa5d0ec-95fd-4313-a780-48b2209b9940">
        <con:settings/>
        <con:config><script>import org.xml.sax.SAXException; 
import org.xml.sax.SAXParseException; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep = tC.getTestStepByName('POST - DeviceAuthTokenCreate - DeviceString');

tC.setPropertyValue("rauthToken", null);
tC.setPropertyValue("rauthToken_" + tC.getPropertyValue("counter"), null);

boolean expectLocation = null;
boolean performBodyValidations = true;
String respstatus = null;
String respconnection = null;
String respcontentType = null;
String respcontentLength = null;
String respLocation = null;
String respbody = null;
String expectstatus = null;
String expectconnection = null;
String expectcontentType = null;
String expectcontentLength = null;
String urnError = tP.getPropertyValue("urnError").toString();
String major = tP.getPropertyValue("versionMajor").toString();
String minor = tP.getPropertyValue("versionMinor").toString();
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";

try {
	respbody = tStep.httpRequest.response.getResponseContent().toString();
} catch (e) {
	log.info "getResponseContent failure! - $e";
} finally {
	tStep.httpRequest.response.responseHeaders.each() { header, value ->
		switch (header) {
			case "Location": 
				respLocation = value[0];
				break;
			case "#status#": 
				respstatus = value[0]; 
				break;
			case "Connection": 
				respconnection = value[0]; 
				break;
			case "Content-Type": 
				respcontentType = value[0]; 
				break;
			case "Content-Length": 
				respcontentLength = value[0]; 
				break;
			case "Transfer-Encoding": 
				resphttpContentEncoding = value[0]; 
				break;
		}
	}
}

log.info "expectDeviceTokenCreateResponse -- [" + tC.getPropertyValue("expectDeviceTokenCreateResponse") + "]";

switch (tC.getPropertyValue("expectDeviceTokenCreateResponse")) {
	case "SUCCESS":
		expectstatus = "HTTP/1.1 201 Created";
		expectconnection = "Keep-Alive";
		expectcontentType = context.expand('${#Project#expectHTTPcontenttype}');
		expectcontentLength = "0";
		expectLocation = true;
		break;
	case "Node_status_inactive":
		expectstatus = "HTTP/1.1 403 Forbidden";
		expectconnection = "Keep-Alive";
		expectcontentType = context.expand('${#Project#expectHTTPcontenttype}');
		expectcontentLength = "1";
		expectLocation = false;
		performBodyValidations = false;
		break;
	case "SaxParserException":
		expectstatus = "HTTP/1.1 400 Bad Request";
		expectconnection = "Keep-Alive";
		expectcontentType = context.expand('${#Project#expectHTTPcontenttype}');
		expectcontentLength = "1";
		expectLocation = false;
		performBodyValidations = false;
		break;
	default:
		errorReasonFlag = true;
		expectstatus = tC.getPropertyValue("errorStatusCode");
		expectconnection = "Keep-Alive";
		expectLocation = false;
		expectcontentLength = "1";
		expectcontentType = context.expand('${#Project#expectHTTPcontenttype}');
		errorID     = urnError + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

/*
*  HTTP Header Checkes...
*/
log.info "----- HTTP Header Validations ------";

log.info "expectstatus[$expectstatus] - respstatus[$respstatus]";
assert expectstatus == respstatus;

log.info "expectconnection[$expectconnection] - respconnection[$respconnection]";
assert expectconnection == respconnection;

if (expectcontentLength == "0") {
	log.info "expectcontentLength[$expectcontentLength] - respcontentLength[$respcontentLength]";
	assert respcontentLength == expectcontentLength;
} else {
	log.info "respcontentLength[$respcontentLength] - Greater than zero";
	assert respcontentLength.toInteger() > 0;
}

if (expectLocation) {
	log.info "respLocation[$respLocation] - Location Header Present in Response";
	assert respLocation.length() > 1;
} else {
	log.info "respLocation[$respLocation] - Location Header NOT Present in Response";
	assert respLocation == null;
}

log.info "expectcontentType[$expectcontentType] - respcontentType[$respcontentType]";
assert expectcontentType == respcontentType;

/*
*  HTTP Body Checkes...
*/
log.info "----- HTTP Body Validations performBodyValidations[$performBodyValidations] ------";

/*
*   -------------------- ERROR --------------------
*/
if (performBodyValidations) {
	if (tC.getPropertyValue("expectDeviceTokenCreateResponse") != "SUCCESS") {
		try {
			def myXML = new XmlSlurper().parseText(respbody);
		} catch (IOException e) {
			log.info "ERROR!  XmlSlurper.parseText IOException error -- $e";
		} catch (SAXException e) {
			log.info "ERROR!  XmlSlurper.parseText SAXException error -- $e";
		}
		finally {
			assert myXML.Error.size() == 1;
			assert myXML.Error.Reason.size() == 1;
			assert myXML.Error.OriginalRequest.size() == 1;
			assert myXML.Error.ErrorLink.size() == 1;

			String respErrorCode = myXML.Error.@ErrorID.toString();
			String respReason = myXML.Error.Reason.toString();
			String respErrorLink = myXML.Error.ErrorLink.toString();
			String expectErrorCode = urnError + tC.getPropertyValue("errorID").toString();
			String expectReason = tC.getPropertyValue("errorReason").toString();
			String expectErrorLink = errorLinkBase + tC.getPropertyValue("errorID").toString();
		
			// ErrorCode
			this.log.info "expectErrorCode [$expectErrorCode] - respErrorCode[$respErrorCode]";
			assert respErrorCode == expectErrorCode;

			// Reason
			this.log.info "expectReason [$expectReason] - respReason[$respReason]";
			assert respReason == expectReason;

			// ErrorLink
			this.log.info "expectErrorLink [$expectErrorLink] - respErrorLink[$respErrorLink]";
			assert respErrorLink == expectErrorLink;
		}
	} else {
		/*
		*   -------------------- SUCCESS --------------------
		*/
		String proto = "";
		String hostie = "";
		String rPort = "";
		String rauthToken = "";
		String rauthTokenFile = "";
		String authTokenFile = "";

		try {
			URL aURL = new URL(respLocation);

			proto = aURL.getProtocol();
			hostie = aURL.getHost();
			rPort = aURL.getPort();
			rauthtokenFile = aURL.getFile();
	
		} catch (MalformedURLException e) {
			log.info "ERROR!  Failed to parse URL - $respLocation - $e";
		} finally {
			log.info "proto[$proto] == https";
			assert proto == "https";

			log.info "hostie[$hostie] == [" + tP.getPropertyValue("targetHostq") + "]";
			assert hostie == tP.getPropertyValue("targetHostq");

			log.info "rPort[$rPort] == [" + tP.getPropertyValue("targetPort") + "]";
			assert rPort == tP.getPropertyValue("targetPort");

			log.info "rauthtokenFile[$rauthtokenFile]";
			if (rauthtokenFile.length() > 0) {
				int lastSlash = rauthtokenFile.lastIndexOf('/');
				rauthToken = rauthtokenFile.substring(lastSlash + 1);
			}
			log.info "rauthToken [$rauthToken]";

			tC.setPropertyValue("rauthToken", rauthToken);
			tC.setPropertyValue("rauthToken_" + tC.getPropertyValue("counter"), rauthToken);
		}
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Node's  DEVICE_AUTH_TOKEN row count after API" id="db26fdb9-5072-4dcc-b28b-8fba5744a33e">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def x = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
def y = x.deviceAuthTokenCountByNode(tC.getPropertyValue("accountoid"));

tC.setPropertyValue("accountAuthTokenRowsAfter", y.toString());</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify DEVICE_AUTH_TOKEN row" id="866969a1-5a37-4dd6-8ab0-44ced682faac">
        <con:settings/>
        <con:config>
          <script><![CDATA[import org.xml.sax.SAXException; 
import org.xml.sax.SAXParseException; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String row = "";

def a;

if (tC.getPropertyValue("expectDeviceTokenCreateResponse") == "SUCCESS") {

	try {
		a = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
	} catch (Throwable e) {
		log.info "ERROR during dbDeviceAuthToken! -- $e";
	} finally {
		row = a.deviceAuthTokenGetRow(tC.getPropertyValue("rauthToken"));
		assert row.length() > 0;
	}

	try {
		def myXML = new XmlSlurper().parseText(row);

		String rUSER_OID = myXML.ResultSet.Row.USER_OID;
		String raccountoid = myXML.ResultSet.Row.ACCOUNT_OID;
		String rstatus = myXML.ResultSet.Row.STATUS;
		String rcbnode = myXML.ResultSet.Row.CREATED_BY_NODE_OID;
		String rubnode = myXML.ResultSet.Row.UPDATED_BY;
		String risgen = myXML.ResultSet.Row.IS_GENERATED;
		String rauthcode = myXML.ResultSet.Row.DEVICE_AUTH_CODE;
		String rexpiredate = myXML.ResultSet.Row.EXPIRATION_DATE;
			
		String eUSER_OID = tC.getPropertyValue("USER_OID") 
		String eaccountoid = tC.getPropertyValue("accountoid") 
		String estatus = "active";
		String ecbnode = tC.getPropertyValue("NODE_ID") 
		String eubnode = "null";
		String eisgen = "N";
		String eauthcode = tC.getPropertyValue("deviceDeviceString").toString();
		String eexpiredate = tC.getPropertyValue("deviceExpirationTime").toString();

		eauthcode = eauthcode.replaceAll("&amp;","&");
		eauthcode = eauthcode.replaceAll("&lt;","<");
		eauthcode = eauthcode.replaceAll("&gt;",">");
		eauthcode = eauthcode.replaceAll("&quot;","\"");
		eauthcode = eauthcode.replaceAll("&apos;","'");

		log.info "USER_OID: Expect[$eUSER_OID] Received[$rUSER_OID]";
		assert rUSER_OID == eUSER_OID;
	
		log.info "ACCOUNT_OID: Expect[$eaccountoid] Received[$raccountoid]";
		assert raccountoid == eaccountoid;

		log.info "STATUS: Expect[$estatus] Received[$rstatus]";
		assert rstatus == estatus;

		log.info "CREATED_BY_NODE_OID: Expect[$ecbnode] Received[$rcbnode]";
		assert rcbnode == ecbnode;

		log.info "UPDATED_BY: Expect[$eubnode] Received[$rubnode]";
		assert rubnode == eubnode;

		log.info "IS_GENERATED: Expect[$eisgen] Received[$risgen]";
		assert risgen == eisgen;

		float w = a.deviceCreateDateTODdiff(tC.getPropertyValue("rauthToken")).toFloat();
		log.info "CREATED_DATE - Difference between TOD less than 30 seconds - [$w]";
		assert w < 30;

		float x = a.deviceCreateDateExpirediff(tC.getPropertyValue("rauthToken")).toFloat();
		String regx = "[A-Za-z]";
		eexpiredate = eexpiredate.replace("T", " ");
		eexpiredate = eexpiredate.replace("Z", "");
		log.info "EXPIRATION_DATE - Expect[$eexpiredate] Received[$rexpiredate]";
		assert eexpiredate == rexpiredate;

		log.info "DEVICE_AUTH_CODE - Expect[$eauthcode] - Received[$rauthcode]";
		assert eauthcode == rauthcode;
	}
	catch (IOException e) {
		log.info "ERROR!  myXML IOException! -- $e";
	}
	catch (SAXException e) {
		log.info "ERROR!  myXML SAXException! -- $e";
	}
}]]></script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify DEVICE_AUTH_TOKEN row count for Account" id="aacbb042-f1f0-4e97-a92e-563e9630bb8f">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def before = tC.getPropertyValue("accountAuthTokenRowsBefore");
def after = tC.getPropertyValue("accountAuthTokenRowsAfter");

int w = after.toInteger() - before.toInteger();

log.info "expectDeviceTokenCreateResponse[" + tC.getPropertyValue("expectDeviceTokenCreateResponse") + "]";
if (tC.getPropertyValue("expectDeviceTokenCreateResponse") == "SUCCESS") {
	assert w == 1;
} else {
	assert w == 0;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return resulting API Attributes" id="aac79dee-5b45-43d6-abfd-978801d98e3a">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

if (tC.getPropertyValue("expectDeviceTokenCreateResponse") == "SUCCESS") {
	callTC.setPropertyValue("authTokenStatus","active");
	callTC.setPropertyValue("authTokenStatus_" + tC.getPropertyValue("counter"),"active");
	callTC.setPropertyValue("rauthToken",tC.getPropertyValue("rauthToken"));
	callTC.setPropertyValue("rauthToken_" + tC.getPropertyValue("counter"),tC.getPropertyValue("rauthToken"));
	callTC.setPropertyValue("authTokenCreatedBy",tC.getPropertyValue("NODE_ID"));
	callTC.setPropertyValue("authTokenCreatedBy_" + tC.getPropertyValue("counter"),tC.getPropertyValue("NODE_ID"));
	callTC.setPropertyValue("authTokenCreatedUser",tC.getPropertyValue("USER_OID"));
	callTC.setPropertyValue("authTokenCreatedUser_" + tC.getPropertyValue("counter"),tC.getPropertyValue("USER_OID"));
	callTC.setPropertyValue("authTokenCreatedAccount",tC.getPropertyValue("accountoid"));
	callTC.setPropertyValue("authTokenCreatedAccount_" + tC.getPropertyValue("counter"),tC.getPropertyValue("accountoid"));
	callTC.setPropertyValue("authTokenisGen","Y");
	callTC.setPropertyValue("authTokenisGen_" + tC.getPropertyValue("counter"),"Y");
	callTC.setPropertyValue("deviceDeviceString",tC.getPropertyValue("deviceDeviceString"));
	callTC.setPropertyValue("deviceDeviceString_" + tC.getPropertyValue("counter"),tC.getPropertyValue("deviceDeviceString"));
}
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>accountAuthTokenRowsAfter</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value>
        </con:property>
        <con:property>
          <con:name>accountAuthTokenRowsBefore</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D8D091A8BC30B4BFE0401F0A079920C1</con:value>
        </con:property>
        <con:property>
          <con:name>actionDeviceString</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>actionExpires</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>actionIssuedToUser</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVdZc+K6En7nV1DMY4p4Y69JquQVAwa8sL7cMrIwBmODZWPDrz+yGQhkkjlz7kOKqN3d6uVT69NPbO99tgMwRlHshUFZFd8q/2NXawRrDFtd1duNam3NctUWC+tVtramOQ6uIU3blbKKcYLUAMd2EL9VWJrhqjRXZRsW3eowrU698Vqj2WWlPEURJq6JyitdKWd7P8CdYtu3ShIFndDGHu4E9h7hTgw7JtAGHaLZsW8xVd5/XqMsNozeN3F86FAUfHUQRL4PX2G4p35STzo/HdwxPTew4yRCv/Z08Fvll22apq8p9xpGLsXSNE3RbYroONhzf1TeSzdj5KjBOryuBTsIAw/avnex86A0FG9Cpwx8N4y8eLP/xjVDMXTuuooyWIVMLfhRoT42KKL7S09PQUbYruKNzdycGWiNIhRAVJ4Y6lvlx9918GprRXaA12G0x5/W/y0kFJyQHx6QU8W3zG7R/b3HL8r1/hPBjhpAP8HeCQ1zmBxsiHB5HKG1lw08TMDn4HLR/nKGbwhD8L+05Cf1GCcJm/qiMqLnIhz/P/167NXVy9T2E/Q+OHUZ87IIx31LnqLjbAdDXd85daWlvhUhPCpfg7q3+tf6M1DvuPpltF6JE3M7YE5Ju0cbh1mC5uSodJ3QEXoL+fxC6fp2quoXe3lGM06ndWTU1B0bTtoRC8+neH9WRQHtX5JW6JUMVweo0T3ULMq218irz3kNx4IZu33xJM00c9Jq8poDQsOPLd0D7GzHnFbhNplx4niP/KXunHvQM3QumJaaXctAkxkImjIzb1mhZoO3j5wec8jz6qNzkWT+/7xOt0U7tu8LIZ8Ua3I8Y/SuqaqYXAQBnE0XpCoPXPK3BUPe3R03O09ppzQPdF0GosD7W2mggZ0CmInEbzRhOtUy4QJ6vDucEkOrBPwlrxlSKqYLcarrXSndWI4yPa8UP1lepKEGcGEsbDTJkKaiYUmaBsKrLNPElZJtNVNLVX0hlogDUcoOF0dpx0jJPMiqdc2sswuzniznUyKXz4P98LSyJF8TNEUwj4qprjhRl3rAWMwgKyfE9jLYH8LSYsI/GPUOaAuQnNJkT3DRrF2qWRN2KBp2IbOeZZqq9DQdp4JeZKWUpLQ3nVw+aiHwmuDspUyywPhaC2gJ8pBeznvYntUDzQCp6BbGfSl1RrdANJ1OS8K1VgMpNSRjMpQ1Q00lUMhEKfXxih1uVsrmBDk961lg+9gYQZdmckC+B8YJnuvHkq3IYLWfMpAzNtCre/Y8TN1lKxX1Ra8fLlXiZgh0ied1QAKiQZ4aqT8PBvy0Pjp4bdZDg7Uc7tEmKmlM2N+dLhnd8riROx7O6uJ61xwr3piznQ2l+pDdcjugqsjpMxvddowFZYiBd2mM+pM58qLFJR7WdabhteolY5ZM5mLoN53ufDHpv2QLqFujsTmZjS9ZNjxuWxc/7o74bmT2NNEdDREaY/hC0bbMWy2xLiy6W4KntUGjegm4Gg+AsnVdySMA5rvbKwi7hiYR8AJNSBVhJigmUJQXSeVFXV/LG2YMlWkyYYaaKjk+KdN5MTf80lLgRdIp2p4tDwtWppcWcApnek2SXX1Sf+nN0VIf+tY0Bulhug4YhlYOenetpS7UcgQ4amry5BTxpUQFE3t06NFZf9qgmaPu+D2zDSZcZrK7bLRxl+edu9yRpiwejs7CAv7UesCYSiA2K+mWZGigdT1vmaZOOMOH++yw2sNMtEjPCuPQ4iVD1ulJJoqgf5VhC7AZXlykrSZIhX0JZJpNYHFazTd4EQy9kSUlBLTJA1y2K5b+V4zlECs9Y+woAB18xph0xZgE1scXtSUyuN4QDniWurwiHfXmdNBrH2h9PtiV+BeZcmPPr42CVmr1X2bMOW1utvps1lbFjfASrBcbbhXztH2BOurtmopn7MSgUfPP2kDT6xOP8s/0Fh1TPCgNVSaQuPgiU+0oeeH3S29/uXA1drIfm8lJndh9zJw3q+OsnW7H3QZFRcq5fmkuT7o8D+Hieo98HpJ34XWMUo8D9mkC37iXmay2CMa3ZX4Pq2JZJpejHf+Zx+USz6muC9XOISeDOEZBXHnPrXIO10kI0/OcDrk5r2uxJdJtlmWkJs8DsQEkukYzMg3oZrvN0rx4I3vXKD6FKITB2sv3yuns9bL+c4Bw38EocFBUPYUJ3CBc+YPHvF5lNTAICwkDjKyQ0OVWrV0XWFFsNziZbnBtpsG1yJ3WZNttmZMkuVIehvEoGEVgHaPoiSozzBNVNhD0Dh7K+XROKjBhFTgmJTnapyT2mdeT/RqghDDuKCe9HbbWqlPY2x98lAdM7UMn8dHrYXMoCkTh6y9btSEupM0GTRds59v8Pn+7lYLoOF6ugPNkeETaib4g/bVbJt9nXHvM+OYeJI6XkxpS1zjy4DWS508fcMlxcsdKntIt5rvqZ8GTW+pzRvednJMH74i/v4kIpSak6/3WkKP9enxNTqekaEEzJ5QRcU8xFN2gTAQTwgrPVrhDAXV3Qf0VIb9H/Wnnu/w5viTeBGZMTvOeAKZcLP/iNWYinL/GVAL47G+fek9bkrrFKIu/kgk+ebTlEf/xXQc7MNcj4jH5ScPI+WjXF74e9iF55uPLC9x8ldPv8zeogCFx65ERFkaPzr9y8NXmz8J7ke+xxARNqyRG338p57PprWJDGCZBrIqVQvA4L4s44/MBdT6UfnNTEOBfL5oMf/uimWsDk0yuvV2563r/rlz1CrhARKywV8TyVsnI45xsHrgP8/lXgL+NaAa0eIHl+RovP49ogbkX8CmT99/Ev0seavr5PLz/Aw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8D091A8BC2BB4BFE0401F0A079920C1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:D8D09221E7BBAD6AE0401F0A079920BD</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">george</con:value>
        </con:property>
        <con:property>
          <con:name>deviceExpirationMinutes</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1440</con:value>
        </con:property>
        <con:property>
          <con:name>deviceExpirationTime</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2013-03-27T08:20:00.0Z</con:value>
        </con:property>
        <con:property>
          <con:name>deviceIssuedToUser</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:D8D09221E7BBAD6AE0401F0A079920BD</con:value>
        </con:property>
        <con:property>
          <con:name>errorID</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>errorReason</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>errorStatusCode</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectDeviceTokenCreateResponse</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>joinCode</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>NODE_ID</con:name>
          <con:value>7600</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D8D0921CE65BACE3E0401F0A079920BF</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D8D0921CE65BACE3E0401F0A079920BF</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_10</con:name>
          <con:value>D1E6C2ED62DBA684E0401F0A05991A32</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_11</con:name>
          <con:value>A0462DB6E5A1D131E0401F0A059958C0</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_12</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_13</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_14</con:name>
          <con:value>A044A3651455B20BE0401F0A07997DC9</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_15</con:name>
          <con:value>A044A3651458B20BE0401F0A07997DC9</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_16</con:name>
          <con:value>A044A365145BB20BE0401F0A07997DC9</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_17</con:name>
          <con:value>9FCF3B9FBED31C26E0401F0A05997960</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_18</con:name>
          <con:value>9FCF3B9FBED51C26E0401F0A05997960</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_19</con:name>
          <con:value>9FCF3B9FBED71C26E0401F0A05997960</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_2</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D46A9E1B78139627E0401F0A07992D71</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_20</con:name>
          <con:value>9FCF328C4DEF553CE0401F0A07991E14</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_21</con:name>
          <con:value>9FCF3B9FBED91C26E0401F0A05997960</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_22</con:name>
          <con:value>9FCF3B9FBEDB1C26E0401F0A05997960</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_23</con:name>
          <con:value>9FCF3B9FBEDD1C26E0401F0A05997960</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_24</con:name>
          <con:value>9FCF3B9FBEDF1C26E0401F0A05997960</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_25</con:name>
          <con:value>9FCF6EF71A80B3F1E0401F0A079951D5</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_26</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_27</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_28</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_29</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_3</con:name>
          <con:value>D46A9B85D9F6AA16E0401F0A07992D73</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_30</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_31</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_32</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_33</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_34</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_35</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_36</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_37</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_38</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_39</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_4</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D2C58FFDB71E2C2DE0401F0A07991B21</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_40</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_41</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_42</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_43</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_44</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_45</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_46</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_47</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_48</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_49</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_5</con:name>
          <con:value>D1E6A749CF8A9EA7E0401F0A07996774</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_50</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_51</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_52</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_53</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_54</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_55</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_56</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_57</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_58</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_59</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_6</con:name>
          <con:value>D1E6B0F233980DF8E0401F0A0799786C</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_60</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_61</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_62</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_63</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_64</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_65</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_66</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_67</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_68</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_69</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_7</con:name>
          <con:value>D1E6B5B11C65B427E0401F0A07997868</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_70</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_71</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_72</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_73</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_74</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_75</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_76</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_77</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_78</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_79</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_8</con:name>
          <con:value>D1E6B90AA470BDC8E0401F0A07990972</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_80</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_81</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_82</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_83</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_84</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_85</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_86</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_87</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_9</con:name>
          <con:value>D1E6B90AA4A6BDC8E0401F0A07990972</con:value>
        </con:property>
        <con:property>
          <con:name>requestBody</con:name>
          <con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<dece:DeviceAuthToken xmlns:dece="http://www.decellc.org/schema/2012/12/coordinator"
	xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md"
	xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.decellc.org/schema/2010/10/dece dece.xsd ">
	<dece:DeviceString>george</dece:DeviceString>
	<dece:Expires>2013-03-27T08:20:00.0Z</dece:Expires>
	
</dece:DeviceAuthToken>
]]></con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>13_STS Create Tokentype DeviceAuthToken - Device Role - P2</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_03180 - STS GET - DeviceAuthToken DeviceString - FORBIDDEN - ACCOUNT.USER status of 'blocked:clg' POST DeviceAuthToken create</con:value>
        </con:property>
        <con:property>
          <con:name>USER_OID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">91B517CE2E95AEAF9D56CA6FB460A192</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86723</con:value>
        </con:property>
      <con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateULC_nodes" searchProperties="true" id="0ebd8244-03d6-47eb-9764-25ad49574203"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="734f6842-e229-47f4-b102-bc73105a3ba2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="73daccd6-d41b-41ec-bfbb-b3290b718538"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));

if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:UserLinkConsent");
}else{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:UserLinkConsent", "UTF-8"));
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="8704d503-d21a-4ee2-9313-a19d43e21e27"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID_",tC.getPropertyValue("NODE_ID_"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_ULC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ULC" id="84ce304e-c499-433c-85d2-7cbe87313f6a"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ULC" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml;charset=UTF-8"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#NODE_ID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>

<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7602</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>

<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7603</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>

<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7604</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="37348d41-5dba-42d7-bdfb-7c4c571020fb">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_ULC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                               contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="6f55957a-3122-4327-a611-ae5e8c77e7c1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfbkqLKEn33Kwzn0bC5ibeY7ojiImKLCuL15QQWJaAISoGgX78LHG3t6Z49+zx02JVUZq3MXCSrfmJr77MdgDGKYi8Myqr0Wvkf30R83eZRrQ4Zpla36E3NWrON2qbV3LRZG67tNlspqxgnSA1wbAXxa4WlGa5GczWWNxm6U293aPqFa7RXlfIMRZiEJlte6Eo52/sB7hTHvlaSKOiEFvZwJ7D2CHdi2JkAbdAhOzvWDVPl7ecVZXFg9ObG8aFDUfDFRhD5PnyB4Z76ST3t+WnjzsRzAitOIvTrTBu/Vn75pmn6knIvYeRQLE3TFN2myB4be86Pylvp5oxsNdiE17VoBWHgQcv3LlYOSkOxG9pl4Dth5MXu/pvQDMXQeegaymANMvXgR4X6OKBA95eRnkBG2Kph12JuwQy0QREKICpPDfW18uPvOnj1NSMrwJsw2uNP6/8GCQUn5IcHZNfwLbMbur+P+EW53n4i2FED6CfYO6FhTpODBREujyO08bKBhwn5bFwu2l/O8I1hCP6XlvykHnES2NQXlZE8B+H4/+nXY6+uUWaWn6C38UrSqWDcG8nn9XSihLgnXS7Z1FjX1dcCwuPmK6h7q3+tPxP1zqtfTj3a2U8nTqi2GL4BxWYUpiBR8FZJdlGPmUm7YNg4XS6c7u4kVtyOqvUWUt05VM79dXhsu6B1nk/E9ozbbLel6pjjpqA1gbvM2gRznFCzSRXGYyVdDAPZ2qheuA3n/RbHZ/p4wKirPlflhrsGVBdO60R1OecgYUrZL3BjWgrhZqoK+plNVzE+sntuQb9+5PSYQ57XOzoXSeb/L3i6LVmxdV+I+aTYkNczRm+aqkrJRRTBeeKAVBWAQ/62YCg4u6O785R2SgtA17tAEgV/Kw80sFMAM5UFVxNnMy0TL6AvOMMZcTRLwF8JmiGnUrqUZrrek1PXtJXZea34yeoiDzWAC2fR1WRDnkmGKWsaCK+2TJPWSrbVJlqq6kupRAJIcna42Eo7RkrmQVbltQnPLid8slrMiL17HuyHp7Up+5qoKeLkqEzUNSfpch8YyzlkuwnxvQz2h7C0nAoPTv0D2gLUTWlyJrho5i7VzCk7lAyrsJnPNk1V+pqOU1EvslJKctqfTS8ftRAFTbT3ciabYHytBTTF7pBeLfrYmvOBZoBUcgrndzm1Rzcgmk6nJfFaq4GcGrIxHXY1Q01lUNgkOfXxmh26a8U9QU7P+ibYPjZG1OV5NyDPA+MEz/yxZCldsN7PGMgZLvR4z1qEqbNqpZK+7L+HK5WEGQJdFgQdEEA0yFMj9RfAQJjxo4PXZj002HTDPXKjksaE77vTJaNbHjdyxsM5L212zbHijTnLdinVh+yW2wFVRfY74+qWbSwpQwq8S2P0Pl0gL1pe4iGvMw2vxZeMeTJdSKHftHuL5fS9mi2hbo7Gk+l8fMmy4XHbuvhxbyT0oklfk5zREKExhlWKtrqC2ZJ4cdnbEj5tDBrxJeBoAgDK1nFkjxBY6G2vJOwZmkzICzQxVcS5qEyAolRlVZB0fdN1mTFUZsmUGWqqbPukTOflwvBLK1GQSKdoa746LNkuvTKBXQTT63LX0ad8tb9AK33om7MYpIfZJmAYWjnovY2WOlDLGWCr6UQgb5FQSlQwtUaHPp29zxo0c9Rtvz9pgymXTdhdNnKd1XnnrHakKcuHV2dpAn9mPnBMJRSbl3RTNjTQur5vmaZOOcOH++yw3sNMMknPCufQFGSjq9PTTJLA+9WGTcBmeHmRt5ooF/4lkGkWocVpvXDxMhh6I1NOCGmTB7ps1yz9rxzLKVZ65thRBDr4zDH5yjEZbI5VtSUxmG+IBzxPHUGRj3pzNui3D7S+GOxKQrVLObHn10dBKzXfq3PmnDbdrT6ft1XJFavBZuly61igrQvUUX/XVDxjJwWNun/WBprOTz3KP9NbdEzxoDRUmUDm4kuXakdJVdivvD0Z13V2uh9PkpM6td4xc3bXx3k73Y57DYqKlDN/aa5OencRwuX1O/J5SN6N1zFKPQ7Ypwl8016TZL1FML4t8++wKpW75ONoxX/WcbnFs2ubYmvnkItBHKMgrrzlXrmG6yRE6Xl2h3w5r2upJchNiWFEgWbaLZqX6TrNdGlAN9ttVmaYm9i7ovgEUQyDjZeflcvZ68f6zwDhvoNRYKOodgoT6CJc+UPEvF5lNTCICgkDjMyQyOVuA9RlVmozdLdNt5p0V+IaYrMtyBIttbkWqJSHYTwKRhHYxCh6lsrck1Q2EPQOHsr1dC4qMFEVOCYlOVqnJPaZl5P1EqCEKO4oF70dtt7iKeztDz7KAVP70E589HJwD0WBKHz9ZWsWxIW12aDpQu18m9/nZ7dSkD22l2/AeTICIu1Ev4n+Voe/ZfJ9xo3HjG/hQWJ7uaghdY0jD16RPD/6oEvOkztX8pRumO9bPxuewlKfM7qfZJ88eGf8/U5EJDURXW+3hhytl+NLcjolRQuauaCMSHiKoegGNUEwIarwbIY7FFD3ENRfCfI76k8n3+3P+JLYDSYxeZv3hDDlYvkXt7EJwvltTCWEz/72qvd0JKlbjLL4K5vok0tbjviP9zrYgfk+Yh6TnzSM7I92fRHr4RySZz6+vMDJV7n8Pn/DChiSsB4ZYWH0GPyrAF8d/my8F/mOJSZsWicx+v5JOZ9NrxULwjAJYlWqFIbHeVngjM8H1PnY9FuYQgD/utFk+NsbzUIbTMjk2luV+17v3zfXvIIuEBEv7BVYXisZuZyTwwPnYT7/AvjliAZy/U8j+jmTt9/Mv1seavr5fXj7Bw==</con:value></con:property><con:property><con:name>tName</con:name><con:value>WithRightsLockerDataGet and MUC</con:value></con:property><con:property><con:name>sName</con:name><con:value>ISC_TestCases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value>close</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D14403889CD0F3ECE0401F0A07992161/User/urn:dece:userid:org:dece:D14403889CDFF3ECE0401F0A07992161/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>policyId</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D8BE7D11CAE49805E0401F0A07992E11/User/urn:dece:userid:org:dece:D8BE7D11CB019805E0401F0A07992E11/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3DD6C150D6CC4DCE0401F0A0799470D</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AUserLinkConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true" id="f2e8d4b6-eee3-49f6-9a31-b62d3fb39829"><con:settings/><con:testStep type="groovy" name="Rename Test Cases from external" id="69504746-944a-44ac-b9c2-71666f2969d9"><con:settings/><con:config><script>import java.io.*;

def testCase  = testRunner.getTestCase();
def testSuite = "STS Create Tokentype unamepasswd - Portal:CS";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\raju.ganji\\Desktop\\TCs.txt"));

def newTestCaseName;

log.info "TCCount:"+TCCount;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);

	newTestCaseName = br.readLine();
	log.info "Input Test Case Name: "+newTestCaseName;
	
	//if(targetTestCase.isDisabled() == false)
	//{
		targetTestCase.setFailOnError(true);
		targetTestCase.name = newTestCaseName;	
	//}

}</script></con:config></con:testStep><con:testStep type="groovy" name="Rename Test Cases internal" id="3807b875-2b4e-49ec-93ae-9cc06896f661"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

import java.io.*;

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "STS Tokentype DeviceAuthToken - Device Role";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def TCNum = 13;

//BufferedWriter bufferedWriter = null;
//bufferedWriter = new BufferedWriter(new FileWriter("c:\\DiscreteMediaLeaseCreateQuestions.txt"));

def oldTestCaseName;
def newTestCaseName;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	//if(targetTestCase.isDisabled() == false)
	//{
		//targetTestCase.setFailOnError(true);
		oldTestCaseName = TCList[i].name;
		newTestCaseName = oldTestCaseName.replace("Copy of ", "");	
		targetTestCase.name = newTestCaseName;	
		TCNum = TCNum + 1;
		log.info "Done renaming Test Case '" + oldTestCaseName + "' to '" + newTestCaseName + "'";
	//}
	//else
	//{
	//	bufferedWriter.write(targetTestCase.name);
	//	bufferedWriter.newLine();
	//}
}

//if (bufferedWriter != null) {
	//bufferedWriter.flush();
     //bufferedWriter.close();
//}

log.info 'Woohoo!'</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountDelete API" searchProperties="true" id="12aea5c1-703c-4a05-a75d-d9bb912216cc"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2bb249af-1609-468b-ae2b-efa29367b4d2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="55ce1d16-509b-49cf-9dce-4678c7fa9eb5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="4f20520c-e302-498c-ab7d-d2e288bd5433"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID_",tC.getPropertyValue("NODE_ID_"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountDelete" id="5f0dcbbc-c7e1-43ab-a121-1f3d90fa31e0"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountDelete" mediaType="application/xml;charset=UTF-8" sslKeystore="RET_concat.pem" id="7e19750b-606f-4d7d-bda7-cfa0c9074a64" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="f5aa6cd6-d6d8-4006-9928-104bcbadfb32"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="6cf1a8ba-4fe8-459b-8264-5e268109b500"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def NODE_ID        = tC.getPropertyValue("NODE_ID");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#NODE_ID_RetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#NODE_ID_RetailerforDeviceAuthToken}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	userid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("NODE_USER_ID",userid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));
</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_005_DTCreate_Verify_UUID_status_for_deletion_of_account</con:value></con:property><con:property><con:name>sName</con:name><con:value>3_DTCreate_and_SAML_Exchange_FUNC</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D8B9BD7003BBB444E0401F0A079937CC</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130325_103751</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+o4EP0rKH2sQr4TiAoSJeXe6AJtod8vK+MY8DY4YDsJ9NevHSAllHbZfYo8GZ85nhkfzxUDi9j0O4whynFCautFTJhfWFtKSomfAIaZT8ACMZ9Df9wZ9H2zrvtgv0WphUFL+cuFzciaOI5qm5al2lbDVgFwkdoEpmNGkwh6VkO4MpaikDAOCG8ppm44qu6qhv6g277h+KZTtxz3Tak9IcoEtnCp68qO1Jq1lDnnS1/T8jyv51Y9oTPN1HVDexn0x3COFkBpX21PVASi7Z0/rEcIojiGdZgstCut4nMVMX+MZwTwlKJdrOi7WLqmNzXhEzE8u1DKvSgKyTQpll1AEoIhiPEHkPkZID5PolonniUU8/ni20MYugRW0Rqq0LDJhaJVqZ0JVGFIGVDZHBg7rBGaIooIRLXHUdhSLs6rWrH1gQLCpgldsOryv/FBJENxskSRyvbH2lE7H/BEptpXCPohgXHKcIaGslmXACK2qyaC50PV7iia4nUfM9GgaybZaYf0jpbbbAR4hhj/PwU6KM4W5AnEKWrrI/Jn6L2adzpejTvZs9t9+IBjYrj6oFUQOHQuDGVpt8ujpiybaLtjngWWSy+jaLNiMyPJvbuhm/U3t/ekx0b38yc6oPeXrt1Lnzvvb0vv5ZGM0tXqLljcJ7/WgXl79+7kzDLyvD8cGcEtfL1vhn/0l3G4iptWP7mdB4MA56+9AZs057+Gl5thY51zts6v3z/e8u6zGfazwKbXgw+Ostf10+/fzCPO6LHvzaYb6uUfz+H69bXz1JiFrfI4B/yrtv2dH6eTvxHk+6VsgzCo9USVAP9ZzKQFR+q0cPWXUnwYR4QrbblLaoefCrnDkS9quF0bDdPsWUaj55me63m9G92xrJtm0+jpHavRvd6LzJbFEcVuQqZYxpKSu22bnwnChc8QiRBVsyQVSseUHxADwEEtJCNxCRLC0EPSUnTLMF29Gam67k5Vu2k2xRUHE9VDDoR602hM0FSpDRN+S25pZ8oRraqzV1HnEYJ4iZGUcNnhTLQ44yIrK5ClPDbqGagTlAqRp1JvfdNuOBrDi2WMJGdtkURpjOrL+bLIkca2X1MFkBVWw2vYN6bpdr2uFeiOWeQ22ObWtjyvuJTfHv/43z5TwifC0oHJg14jUW104g0y9qf8kg335Fu1h++kEZb3T6SdUwy3TKq/PrtJtlHZSqObhz3l0vPYUEHVjg9UBooyDMv7UL7qQuyFPLT3tVoBo76qp1mWFuWxbUujAl4TamhoYwRToV6bh+QdEa2E0M56KkrWR5FLe5VfyudkzAFHC9FLtWJ5xmwwRkzOBqG4DutzB49KSJE3jtb8lK0bi7lGMv5x9IE+lH7CfCc+eUKjz3KdwDqII84pRgOOyUyu5DOx+aYpYCJgsRC4hB6CnwI4FbxqLJNccuGimyYpR9//qUnlaikAwiQlPAyUwnCopgVPvlki/9PpC0wh2OUEh/99hFNx0QIQibmP4QJfPsS+7H8yO1DkXdBvRNn9SZSr7NpfzF8tB3k67vH2Pw==</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D3DF7BAE6D161DAEE0401F0A05993EE0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8B9BD7003BBB444E0401F0A079937CC</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1822F318F726677FE0533E991F0A38CB</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMUC_nodes" searchProperties="true" id="60f8f6df-459b-46c2-a7d5-8ab9ea2cec54"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="189ce5fb-d926-45a8-8dda-8c71664bb5c4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="b81750dd-3136-46bc-bd3a-f4c6a96fc095"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));

if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:ManageUserConsent");
}else{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageUserConsent", "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="1403d36a-ad0d-4e16-8178-829159db9688"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID_",tC.getPropertyValue("NODE_ID_"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MUC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_MUC" id="98fcf199-649f-46c1-b519-adb782a74910"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_MUC" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml;charset=UTF-8"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#NODE_ID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>

   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7602</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>

   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7603</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>

   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7604</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="4b2651e9-6223-4616-91ec-18b7cf977e06">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_MUC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                              contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="99e3b3dd-8a86-41b4-9fb2-8a059a51bced">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfbkqLKEn33Kwzn0bC5ibeY7ojiImKLCuL15QQWJaAISoGgX78LHG3t6Z49+zx02JVUZq3MXCSrfmJr77MdgDGKYi8Myqr0Wvkf30R83eZRrQ4Zpla36E3NWrON2qbV3LRZG67tNlspqxgnSA1wbAXxa4WlGa5GczWWNxm6U293aPqFa7RXlfIMRZiEJlte6Eo52/sB7hTHvlaSKOiEFvZwJ7D2CHdi2JkAbdAhOzvWDVPl7ecVZXFg9ObG8aFDUfDFRhD5PnyB4Z76ST3t+WnjzsRzAitOIvTrTBu/Vn75pmn6knIvYeRQLE3TFN2myB4be86Pylvp5oxsNdiE17VoBWHgQcv3LlYOSkOxG9pl4Dth5MXu/pvQDMXQeegaymANMvXgR4X6OKBA95eRnkBG2Kph12JuwQy0QREKICpPDfW18uPvOnj1NSMrwJsw2uNP6/8GCQUn5IcHZNfwLbMbur+P+EW53n4i2FED6CfYO6FhTpODBREujyO08bKBhwn5bFwu2l/O8I1hCP6XlvykHnES2NQXlZE8B+H4/+nXY6+uUWaWn6C38UrSqWDcG8nn9XSihLgnXS7Z1FjX1dcCwuPmK6h7q3+tPxP1zqtfTj3a2U8nTqi2GL4BxWYUpiBR8FZJdlGPmUm7YNg4XS6c7u4kVtyOqvUWUt05VM79dXhsu6B1nk/E9ozbbLel6pjjpqA1gbvM2gRznFCzSRXGYyVdDAPZ2qheuA3n/RbHZ/p4wKirPlflhrsGVBdO60R1OecgYUrZL3BjWgrhZqoK+plNVzE+sntuQb9+5PSYQ57XOzoXSeb/L3i6LVmxdV+I+aTYkNczRm+aqkrJRRTBeeKAVBWAQ/62YCg4u6O785R2SgtA17tAEgV/Kw80sFMAM5UFVxNnMy0TL6AvOMMZcTRLwF8JmiGnUrqUZrrek1PXtJXZea34yeoiDzWAC2fR1WRDnkmGKWsaCK+2TJPWSrbVJlqq6kupRAJIcna42Eo7RkrmQVbltQnPLid8slrMiL17HuyHp7Up+5qoKeLkqEzUNSfpch8YyzlkuwnxvQz2h7C0nAoPTv0D2gLUTWlyJrho5i7VzCk7lAyrsJnPNk1V+pqOU1EvslJKctqfTS8ftRAFTbT3ciabYHytBTTF7pBeLfrYmvOBZoBUcgrndzm1Rzcgmk6nJfFaq4GcGrIxHXY1Q01lUNgkOfXxmh26a8U9QU7P+ibYPjZG1OV5NyDPA+MEz/yxZCldsN7PGMgZLvR4z1qEqbNqpZK+7L+HK5WEGQJdFgQdEEA0yFMj9RfAQJjxo4PXZj002HTDPXKjksaE77vTJaNbHjdyxsM5L212zbHijTnLdinVh+yW2wFVRfY74+qWbSwpQwq8S2P0Pl0gL1pe4iGvMw2vxZeMeTJdSKHftHuL5fS9mi2hbo7Gk+l8fMmy4XHbuvhxbyT0oklfk5zREKExhlWKtrqC2ZJ4cdnbEj5tDBrxJeBoAgDK1nFkjxBY6G2vJOwZmkzICzQxVcS5qEyAolRlVZB0fdN1mTFUZsmUGWqqbPukTOflwvBLK1GQSKdoa746LNkuvTKBXQTT63LX0ad8tb9AK33om7MYpIfZJmAYWjnovY2WOlDLGWCr6UQgb5FQSlQwtUaHPp29zxo0c9Rtvz9pgymXTdhdNnKd1XnnrHakKcuHV2dpAn9mPnBMJRSbl3RTNjTQur5vmaZOOcOH++yw3sNMMknPCufQFGSjq9PTTJLA+9WGTcBmeHmRt5ooF/4lkGkWocVpvXDxMhh6I1NOCGmTB7ps1yz9rxzLKVZ65thRBDr4zDH5yjEZbI5VtSUxmG+IBzxPHUGRj3pzNui3D7S+GOxKQrVLObHn10dBKzXfq3PmnDbdrT6ft1XJFavBZuly61igrQvUUX/XVDxjJwWNun/WBprOTz3KP9NbdEzxoDRUmUDm4kuXakdJVdivvD0Z13V2uh9PkpM6td4xc3bXx3k73Y57DYqKlDN/aa5OencRwuX1O/J5SN6N1zFKPQ7Ypwl8016TZL1FML4t8++wKpW75ONoxX/WcbnFs2ubYmvnkItBHKMgrrzlXrmG6yRE6Xl2h3w5r2upJchNiWFEgWbaLZqX6TrNdGlAN9ttVmaYm9i7ovgEUQyDjZeflcvZ68f6zwDhvoNRYKOodgoT6CJc+UPEvF5lNTCICgkDjMyQyOVuA9RlVmozdLdNt5p0V+IaYrMtyBIttbkWqJSHYTwKRhHYxCh6lsrck1Q2EPQOHsr1dC4qMFEVOCYlOVqnJPaZl5P1EqCEKO4oF70dtt7iKeztDz7KAVP70E589HJwD0WBKHz9ZWsWxIW12aDpQu18m9/nZ7dSkD22l2/AeTICIu1Ev4n+Voe/ZfJ9xo3HjG/hQWJ7uaghdY0jD16RPD/6oEvOkztX8pRumO9bPxuewlKfM7qfZJ88eGf8/U5EJDURXW+3hhytl+NLcjolRQuauaCMSHiKoegGNUEwIarwbIY7FFD3ENRfCfI76k8n3+3P+JLYDSYxeZv3hDDlYvkXt7EJwvltTCWEz/72qvd0JKlbjLL4K5vok0tbjviP9zrYgfk+Yh6TnzSM7I92fRHr4RySZz6+vMDJV7n8Pn/DChiSsB4ZYWH0GPyrAF8d/my8F/mOJSZsWicx+v5JOZ9NrxULwjAJYlWqFIbHeVngjM8H1PnY9FuYQgD/utFk+NsbzUIbTMjk2luV+17v3zfXvIIuEBEv7BVYXisZuZyTwwPnYT7/AvjliAZy/U8j+jmTt9/Mv1seavr5fXj7Bw==</con:value></con:property><con:property><con:name>tName</con:name><con:value>WithRightsLockerDataGet and MUC</con:value></con:property><con:property><con:name>sName</con:name><con:value>ISC_TestCases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D8BE7D11CAE49805E0401F0A07992E11/User/urn:dece:userid:org:dece:D8BE7D11CB019805E0401F0A07992E11/Policy/urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageUserConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS API - Invoked to Coordinator URL" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true" id="a168ce0f-d8dd-4f34-b862-c6c8b69cd0a3">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="4df66843-0267-402a-8d99-5ab56247f183">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("actionAuthHeader",null);
tC.setPropertyValue("actionDeviceAuthHeader",null);
tC.setPropertyValue("deviceAuthHeaderValue",null);
tC.setPropertyValue("endPoint",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("NODE_OID",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("NODE_IDFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("scenario",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("stsRequestBodyNULL",null);
tC.setPropertyValue("stsRequestUserNameFlag",null);
tC.setPropertyValue("expectErrType",null);
tC.setPropertyValue("expectCreateExpireHoursDiff",null);
tC.setPropertyValue("expectNodeUserRowCount", null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("stsExpire",null);
tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("stsaudience",null);
tC.setPropertyValue("stsduration",null);
tC.setPropertyValue("stsaudienceIgnoreAll",null);
tC.setPropertyValue("stsaudienceIgnoreNodes",null);
tC.setPropertyValue("stsaudiencePrefixDelimiter",null);
tC.setPropertyValue("stsaudienceSuffixedDelimiter",null);
tC.setPropertyValue("stsaudienceEmbeddedDelimiter",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("accountoid",null);
/*
*  stsaudienceIgnoreAll
*    If this is 'true' then I will ignore the incoming 
*    stsaudience list because it will contain invalid
*	nodes which should not be present in the
*	&lt;saml2:AudienceRestriction> list.
*
*  stsaudiencePrefixDelimiter
*	This is used to start the audience parameter value
*	with a ;
*
*  stsaudienceSuffixedDelimiter
*	This is used to suffix the audience paramter value
*	with a ;
*/</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="2843ec02-7be5-4fa7-b656-b65a9fddc8c1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("actionAuthHeader",callTC.getPropertyValue("actionAuthHeader"));
tC.setPropertyValue("actionDeviceAuthHeader",callTC.getPropertyValue("actionDeviceAuthHeader"));
tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("username",callTC.getPropertyValue("Username"));
tC.setPropertyValue("password",callTC.getPropertyValue("UserPassword"));
tC.setPropertyValue("USER_OID",callTC.getPropertyValue("USER_OID"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));

log.info "versionMinor: "+tP.getPropertyValue("versionMinor");
if (tP.getPropertyValue("versionMinor") == tP.getPropertyValue("versionURLEncode")){
	tC.setPropertyValue("tokentype",URLEncoder.encode(callTC.getPropertyValue("tokentype"), "UTF-8"));
}else{
	tC.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
}
			

tC.setPropertyValue("scenario",callTC.getPropertyValue("scenario"));
tC.setPropertyValue("deviceAuthToken",callTC.getPropertyValue("deviceAuthToken"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));

if (tC.getPropertyValue("expectErrType") == "" || tC.getPropertyValue("expectErrType") == null) {
	tC.setPropertyValue("expectErrType","SUCCESS");
}
tC.setPropertyValue("stsRequestBodyNULL",callTC.getPropertyValue("stsRequestBodyNULL"));
tC.setPropertyValue("stsRequestUserNameFlag",callTC.getPropertyValue("stsRequestUserNameFlag"));
tC.setPropertyValue("stsAction",callTC.getPropertyValue("stsAction"));
tC.setPropertyValue("stsExpire",callTC.getPropertyValue("stsExpire"));
tC.setPropertyValue("USER_OID",callTC.getPropertyValue("USER_OID"));
tC.setPropertyValue("expectCreateExpireHoursDiff",callTC.getPropertyValue("expectCreateExpireHoursDiff"));


tC.setPropertyValue("stsaudience",callTC.getPropertyValue("stsaudience"));

tC.setPropertyValue("stsduration",callTC.getPropertyValue("stsduration"));
tC.setPropertyValue("stsaudienceIgnoreAll",callTC.getPropertyValue("stsaudienceIgnoreAll"));
tC.setPropertyValue("actionSkipPolicyCheck",callTC.getPropertyValue("actionSkipPolicyCheck"));
tC.setPropertyValue("stsaudiencePrefixDelimiter",callTC.getPropertyValue("stsaudiencePrefixDelimiter"));
tC.setPropertyValue("stsaudienceSuffixedDelimiter",callTC.getPropertyValue("stsaudienceSuffixedDelimiter"));
tC.setPropertyValue("stsaudienceIgnoreNodes",callTC.getPropertyValue("stsaudienceIgnoreNodes"));
tC.setPropertyValue("stsaudienceEmbeddedDelimiter",callTC.getPropertyValue("stsaudienceEmbeddedDelimiter"));
tC.setPropertyValue("stsSkipLastLoginCheck",callTC.getPropertyValue("stsSkipLastLoginCheck"));
tC.setPropertyValue("expectNodeUserRowCount",callTC.getPropertyValue("expectNodeUserRowCount"));

if (tC.getPropertyValue("stsRequestUserNameFlag") == null ||
	tC.getPropertyValue("stsRequestUserNameFlag") == "") {
		tC.setPropertyValue("stsRequestUserNameFlag",null);
}
if (tC.getPropertyValue("expectNodeUserRowCount") == null ||
	tC.getPropertyValue("expectNodeUserRowCount") == "") {
		tC.setPropertyValue("expectNodeUserRowCount","0");
}
if (tC.getPropertyValue("stsAction") == null ||
	tC.getPropertyValue("stsAction") == "") {
		tC.setPropertyValue("stsAction",null);
}
if (tC.getPropertyValue("stsExpire") == 'null' ||
	tC.getPropertyValue("stsExpire") == "") {
		tC.setPropertyValue("stsExpire","2012-06-30T09:40:39.0Z");
}
if (tC.getPropertyValue("stsSkipLastLoginCheck") == null ||
	tC.getPropertyValue("stsSkipLastLoginCheck") == 'null') {
		tC.setPropertyValue("stsSkipLastLoginCheck","false");
}
if (tC.getPropertyValue("actionSkipPolicyCheck") == null ||
	tC.getPropertyValue("actionSkipPolicyCheck") == 'null') {
		tC.setPropertyValue("actionSkipPolicyCheck","false");
}
if (tC.getPropertyValue("expectCreateExpireHoursDiff") == null ||
	tC.getPropertyValue("expectCreateExpireHoursDiff") == "") {
		tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActive"));
}
if (tC.getPropertyValue("NODE_ID") != 'null' || tC.getPropertyValue("NODE_ID") != null) {
		tC.setPropertyValue("NODE_IDFULL", tP.getPropertyValue("urnNode") + tC.getPropertyValue("NODE_ID"));
}
if (tC.getPropertyValue("stsaudienceIgnoreAll") == null ||
	tC.getPropertyValue("stsaudienceIgnoreAll") == 'null') {
		tC.setPropertyValue("stsaudienceIgnoreAll","false");
}
if (tC.getPropertyValue("stsaudiencePrefixDelimiter") == null ||
	tC.getPropertyValue("stsaudiencePrefixDelimiter") == 'null') {
		tC.setPropertyValue("stsaudiencePrefixDelimiter","false");
}
if (tC.getPropertyValue("stsaudienceSuffixedDelimiter") == null ||
	tC.getPropertyValue("stsaudienceSuffixedDelimiter") == 'null') {
		tC.setPropertyValue("stsaudienceSuffixedDelimiter","false");
}
if (tC.getPropertyValue("stsaudienceEmbeddedDelimiter") == null ||
	tC.getPropertyValue("stsaudienceEmbeddedDelimiter") == 'null') {
		tC.setPropertyValue("stsaudienceEmbeddedDelimiter","false");
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Construct STS Request Body" id="837e26ec-4ec9-4d08-a218-39a1b6a68c48">
        <con:settings/>
        <con:config><script>import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("stsRequestBody", null);

/*
*  XML namespaces
*/
String saml2pNS = "urn:oasis:names:tc:SAML:2.0:protocol";
String saml2NS = "urn:oasis:names:tc:SAML:2.0:assertion";
String mdNS = "urn:oasis:names:tc:SAML:2.0:metadata";
String deceNS = tP.getPropertyValue("coordinatorSchema").toString();
String saml2pPrefix = "saml2p";
String saml2Prefix = "saml2";
String mdPrefix = "md";
String decePrefix = "dece";
String requestBody = "";
String tokentype = tC.getPropertyValue("tokentype").toString();
String scenario = tC.getPropertyValue("scenario").toString();
String deviceAuthToken = tC.getPropertyValue("deviceAuthToken").toString();
String deviceAuthExpires = tC.getPropertyValue("stsExpire").toString();

def username = tC.getPropertyValue("username").toString();
def password = tC.getPropertyValue("password").toString();


/*
*  Elements
*/
Element root;
Element userName;
Element passWord;
Element devicecode;
Element expires;

//if (tokentype != "urn:dece:type:tokentype:saml2") {
if (scenario == "STSCreate") {
	/*
	*  Create an nice clean dom
	*/
	try	{
		//Create instance of DocumentBuilderFactory
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		//Get the DocumentBuilder
		DocumentBuilder parser = factory.newDocumentBuilder();
		//Create blank DOM Document
		doc = parser.newDocument();
	}
	catch(Exception e) {
		log.info "Error during DocumentBuilderFactory create - " + e.getMessage();
	}
	finally {
		log.info "tokentype: "+tokentype;
		if (tokentype == URLEncoder.encode(tP.getPropertyValue("urntokenType_deviceauthtoken"), "UTF-8").toString() || tokentype == tP.getPropertyValue("urntokenType_deviceauthtoken")) {
			root = doc.createElementNS(deceNS, "DeviceAuthToken");

			/*
			*  DeviceAuthCode element
			*/
			switch (tC.getPropertyValue("stsAction").toString()) {
				case "nullDeviceToken":
					devicecode = doc.createElementNS(deceNS,"DeviceAuthCode");
					Text textdcode = doc.createTextNode("");
					devicecode.appendChild(textdcode);			
					break;
				case "tagTerminatedDeviceAuthCode":
					devicecode = doc.createElementNS(deceNS,"DeviceAuthCode");
					Text textdexpire = doc.createTextNode();
					devicecode.appendChild(textdexpire);
					break;
				default:
					devicecode = doc.createElementNS(deceNS,"DeviceAuthCode");
					Text textdcode = doc.createTextNode(deviceAuthToken);
					devicecode.appendChild(textdcode);
					break;
			}

			/*
			*  Expires
			*/
			switch (tC.getPropertyValue("stsAction").toString()) {
				case "nullExpires":
					expires = doc.createElementNS(deceNS,"Expires");
					Text textdexpire = doc.createTextNode("");
					expires.appendChild(textdexpire);
					break;
				case "tagTerminatedExpires":
					expires = doc.createElementNS(deceNS,"Expires");
					Text textdexpire = doc.createTextNode();
					expires.appendChild(textdexpire);
					break;
				default:
					expires = doc.createElementNS(deceNS,"Expires");
					Text textdexpire = doc.createTextNode(deviceAuthExpires);
					expires.appendChild(textdexpire);
					break;
			}

			/*
			* Add DeviceAuthCode element to tree.
			*/
			if (tC.getPropertyValue("stsAction").toString() != "tagMissingDeviceToken") {
				root.appendChild(devicecode);
			}

			/*
			* Add Expires element to tree.
			*/
			if (tC.getPropertyValue("stsAction").toString() != "tagMissingExpires") {
				root.appendChild(expires);
			}
		} else {
			root = doc.createElementNS(deceNS, "Credentials");
		
			/*
			*  Username
			*/
			switch (tC.getPropertyValue("stsRequestUserNameFlag").toString()) {
				case "stsRequestUserNameFlag":
					userName = doc.createElementNS(deceNS,"Username");
					break;
				case "EMPTY_TAG":
					userName = doc.createElementNS(deceNS,"Username");
					break;
				default:
					userName = doc.createElementNS(deceNS,"Username");
					Text textusername = doc.createTextNode(username);
					userName.appendChild(textusername);
					break;
			};

			/*
			*  Password
			*/
			switch (tC.getPropertyValue("stsAction").toString()) {
				case "EMPTY_TAG":
					passWord = doc.createElementNS(deceNS,"Password");
					break;
				default:
					passWord = doc.createElementNS(deceNS,"Password");
					Text textpassword = doc.createTextNode(password);
					passWord.appendChild(textpassword);
					break;
			}

			/*
			* Add Username element to tree.
			*/
			if (tC.getPropertyValue("stsRequestUserNameFlag").toString() != "excluded") {
				root.appendChild(userName);
			}

			/*
			* Add Password element to tree.
			*/
			if (tC.getPropertyValue("stsAction").toString() != "PASSWD_EXCLUDE") {
				root.appendChild(passWord);
			}
		}
	
		/*
		* Add Credentials element to tree.
		*/
		doc.appendChild(root);
	}

	/*
	* Turn the DOM into a String to display here...
	*/
	TransformerFactory factory = TransformerFactory.newInstance();
	Transformer transformer = factory.newTransformer();
	transformer.setOutputProperty(OutputKeys.INDENT, "yes");
	StringWriter writer = new StringWriter();
	Result result = new StreamResult(writer);
	Source source = new DOMSource(doc);
	transformer.transform(source, result);
	writer.close();
	requestBody = writer.toString();
	this.log.info requestBody;

	tC.setPropertyValue("stsRequestBody", requestBody);
}

/*
*  Override the Property if desired
*/
if (tC.getPropertyValue("stsRequestBodyNULL") == "true") {
	tC.setPropertyValue("stsRequestBody", null);
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish attributes based on Node Role" id="7c37af4d-64a3-413f-88e0-6f5c657b8993">
        <con:settings/>
        <con:config>
          <script>import java.util.StringTokenizer; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String NODE_ID = tC.getPropertyValue("NODE_ID").toString();

/*
*  See if we are a device
*/
switch (NODE_ID) {
	case tP.getPropertyValue("nodeIdDEV").toString():
		urlEndPoint = "device";
		tC.setPropertyValue("isDeviceFlag","true");
		break;
	default:
		urlEndPoint = "coordinator";
		tC.setPropertyValue("isDeviceFlag","false");
		break;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Construct URL" id="2b5a2373-806d-45ce-a3cd-498e6630bdef">
        <con:settings/>
        <con:config><script><![CDATA[import java.util.StringTokenizer; 
import java.net.URLDecoder;
import java.net.URLEncoder;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

Boolean appliedFirstNode = false;
String url = "";
String anode = "";
String urlEndPoint = "";

String stsaudience = tC.getPropertyValue("stsaudience").toString();

String stsduration = tC.getPropertyValue("stsduration").toString();

String NODE_ID = tC.getPropertyValue("NODE_ID").toString();

log.info "NODE_ID[$NODE_ID]";
log.info "stsduration[$stsduration]";
log.info "stsaudience[$stsaudience]";

if (tC.getPropertyValue("isDeviceFlag") == "true") {
	urlEndPoint = "device";
}

log.info "urlEndPoint: " + urlEndPoint;

/*
*  Set the endpoint
*/
switch (urlEndPoint) {
		case "device":
		tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHostd")+":"+tP.getPropertyValue("targetPortd"));
		if (tC.getPropertyValue("scenario").toString() == "STSCreate"){
			url = 
			"rest/" + tP.getPropertyValue("versionMajor").toString() +
			"/" + tP.getPropertyValue("versionMinor").toString() +
			"/SecurityToken/SecurityTokenExchange" +
			"?tokentype=" + tC.getPropertyValue("tokentype").toString();
		}else if (tC.getPropertyValue("scenario").toString() == "SAMLExchange") {
			url = "rest/" + tP.getPropertyValue("versionMajor").toString() +
				"/" + tP.getPropertyValue("versionMinor").toString() +
				"/SecurityToken/Assertion/" +
				tC.getPropertyValue("assertionUUID").toString() + 
				"/SecurityTokenExchange?tokentype="+tC.getPropertyValue("tokentype").toString();
			} 
		
		break;

	case "coordinator":
	default:
	tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));
	if (tC.getPropertyValue("scenario").toString() == "STSCreate"){
			
			url ="rest/"+ tP.getPropertyValue("versionMajor").toString() +
				"/" + tP.getPropertyValue("versionMinor").toString() +
				"/SecurityToken/SecurityTokenExchange" +
				"?tokentype="+tC.getPropertyValue("tokentype").toString() ;
		
	}
	else if (tC.getPropertyValue("scenario").toString() == "SAMLExchange") {
		
				url = "rest/" + tP.getPropertyValue("versionMajor").toString() +
				"/" + tP.getPropertyValue("versionMinor").toString() +
				"/SecurityToken/Assertion/" +
				tC.getPropertyValue("assertionUUID").toString() + 
				"/SecurityTokenExchange?tokentype="+tC.getPropertyValue("tokentype").toString();
			} 
	break;
}

/*
*  Add duration parameters if necessary
*/
if (stsduration.length() > 0 && stsduration != 'null') {
	switch (stsduration.toLowerCase()) {
		case "isnull":
			stsduration = "";
			break;
		case "isalpha":
			stsduration = "Z";
			break;
	}

	url = url + "&duration=$stsduration";
}

/*
*  Add audience parameters if necessary
*/
if (stsaudience.length() > 0 && stsaudience != 'null') {
	switch (stsaudience.toLowerCase()) {
		case "isnull":
			url = url + "&audience=";
			
			break;
		default:
	log.info "stsaudience="+stsaudience;
			StringTokenizer st = new StringTokenizer(stsaudience,",");

			while(st.hasMoreTokens()) { 
				if (!appliedFirstNode) {
					url = url + "&audience=";
					appliedFirstNode = true;

					if (tC.getPropertyValue("stsaudiencePrefixDelimiter") == "true") {

					url = url + ";";

						
					}
				}

				
				anode = st.nextToken();
	if (tP.getPropertyValue("versionMinor") == tP.getPropertyValue("versionURLEncode")){
		url = url + URLEncoder.encode(anode, "UTF-8");
	}else{
		url = url + anode;
	}
				
		
				/*
				*  Add the node delimiter if needed
				*/
				if (st.hasMoreTokens()) {
					url = url + ";";
					
					/*
					*  If we wish to embed extra ; we should do that 
					*  now.
					*/
					if (tC.getPropertyValue("stsaudienceEmbeddedDelimiter").toString() == "true") {
						url = url + ";";
					}
				}
				
		
			}

			
			if (tC.getPropertyValue("stsaudienceSuffixedDelimiter") == "true") {
				url = url + ";";
			} 
					
			break;
	}
}	

//log.info "url[$url]";

log.info "endPoint[$url]";
tC.setPropertyValue("endPoint","$url");
//testRunner.testCase.getTestStepByName('POST - STS').httpRequest.setEndpoint(url)]]></script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Construct Authorization Header if necessary" id="b11da107-2042-4a54-8d58-b3bc2c8817a6"><con:settings/><con:config><script>import org.apache.commons.codec.binary.Base64;
import com.eviware.soapui.support.types.StringToStringsMap 
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("isDeviceFlag").toString() == "true" &amp;&amp; tC.getPropertyValue("scenario").toString() == "SAMLExchange") {
	/*
	*  construct the basic auth header
	*/
	String combo = tC.getPropertyValue("username").toString() + ":" + tC.getPropertyValue("password").toString();
	String authHeaderValue = "Basic " + combo.bytes.encodeBase64().toString()

	log.info "combo[$combo] - authHeaderValue[$authHeaderValue]";

	tC.setPropertyValue("authHeaderValue",authHeaderValue);
	tC.setPropertyValue("deviceAuthHeaderValue","dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6");
	

}else if(tC.getPropertyValue("isDeviceFlag").toString() == "true"){
/*
	*  construct the device auth header
	*/

tC.setPropertyValue("deviceAuthHeaderValue","dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6");

	
}

if (tC.getPropertyValue("actionAuthHeader") == "EXCLUDE") {
	tC.setPropertyValue("authHeaderValue",null);
	}


if (tC.getPropertyValue("actionDeviceAuthHeader") == "EXCLUDE") {
	tC.setPropertyValue("deviceAuthHeaderValue",null);
	}</script></con:config></con:testStep><con:testStep type="groovy" name="Compute expected audience list" id="0df8bb7f-b1d2-44fd-b438-1d393668aa3c">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("stsComputedAudienceList",null);

String affiliates = "";
int i = 0;

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	/*
	*  Construct the expected Affiliation list
	*/
	def affiliationList = [tC.getPropertyValue("NODE_IDFULL").toString()];
	def ignoreNodesList = [];
	def stsaudienceList = [];
	
	if (tC.getPropertyValue("stsaudienceIgnoreAll").toString() == "false") {
		if (tC.getPropertyValue("stsaudience") != 'null') {
			stsaudienceList = tC.getPropertyValue("stsaudience").toString().tokenize(",");

			/*
			*  Now remove the ingnorenodes 
			*/
			if (tC.getPropertyValue("stsaudienceIgnoreNodes") != 'null') {
				ignoreNodesList = tC.getPropertyValue("stsaudienceIgnoreNodes").toString().tokenize(",");
				ignoreNodesList.each {
					if (stsaudienceList.contains(it)) {
						stsaudienceList = stsaudienceList.minus(it);
					}
				}
			}
		}

		if (stsaudienceList.size() >= 1) {
			log.info "DEBUG: Adding stsaudienceList";
			affiliationList.addAll(stsaudienceList);
		}
	} 
	log.info "DEBUG: affiliationList size is " + affiliationList.size();
	affiliationList.each {
		log.info "DEBUG afflicationList Member: " + it;
		affiliates += it;

		i++;
		
		if (i != affiliationList.size()) {
			affiliates += ",";
		}
	}

	tC.setPropertyValue("stsComputedAudienceList",affiliates);

	log.info "stsComputedAudienceList[" + tC.getPropertyValue("stsComputedAudienceList") + "]";
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish pem" id="8166119b-486f-4e07-8567-17d691aa70e7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID_",tC.getPropertyValue("NODE_ID_"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - STS");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Decode tokentype" id="dbef81e9-d2c5-4a9a-98dd-2587b93aefed"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tP.getPropertyValue("versionMinor") == tP.getPropertyValue("versionURLEncode"))
	{
			tC.setPropertyValue("tokentype",URLDecoder.decode(tC.getPropertyValue("tokentype"), "UTF-8"));
	}</script></con:config></con:testStep><con:testStep type="groovy" name="Reset targetURL value" id="37c69296-330a-46fd-9f39-975ba62a04e0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Set NODE_OID value based on NODE_ID" id="9864cff9-e8bb-4735-87b0-ed8d448b65a5"><con:settings/><con:config><script>

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def nodeoidGet = new dbUtils.dbNode(log,testProject.getPropertyValue("targetSystem"));

String NODE_ID_ = testCase.getPropertyValue("NODE_ID");
def NODE_OID = null;
switch (NODE_ID_) {
case "dece:cs":
	NODE_OID = "40";
break;
case "coord:cs":
	NODE_OID = "41";
break;
case "RET":
	NODE_OID = "C0CEF8E08CE1C7D6E0401F0A0599120B";
break;
case "RET_CS_1":
	NODE_OID = "CCE44AF42FD7063BE0401F0A07991776";
break;
case "LLASP":
	NODE_OID = "C0CEF8E08CD7C7D6E0401F0A0599120B";
break;
case "LLASP_CS_1":
	NODE_OID = "CCE44AF42FCD063BE0401F0A07991776";
break;
case "DLASP":
	NODE_OID = "C0CEF8E08CDCC7D6E0401F0A0599120B";
break;
case "DLASP_CS_1":
	NODE_OID = "CCE44AF42FD2063BE0401F0A07991776";
break;
case "DSP":
	NODE_OID = "C0CEF8E08CD2C7D6E0401F0A0599120B";
break;
case "DSP_CS_1":
	NODE_OID = "CCE44AF42FC8063BE0401F0A07991776";
break;
case "DEV_CS_1":
	NODE_OID = "CE8BFD2E2DD09BAEE0401F0A07990E42";
break;
case "COO_CS_1":
	NODE_OID = "CCE44AF42FC3063BE0401F0A07991776";
break;
case "CON_CS_1":
	NODE_OID = "CCE44AF42FBE063BE0401F0A07991776";
break;
default:
	NODE_OID = nodeoidGet.nodeoidGetFromNodeId(NODE_ID_);
}

testCase.setPropertyValue("NODE_OID",""+NODE_OID);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="41b151f2-43c4-44db-ad0c-46b0f055523e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep = tC.getTestStepByName('POST - STS');

tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);


/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tP.setPropertyValue("targetURL","qa.p.uvvu.com:7001");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);

this.log.info "contentLength [$contentLength]";
this.log.info "status [$status]";
this.log.info "contentType [$contentType]";
this.log.info "contentLocation [$contentLocation]";


if (contentLength.toInteger() > 0 &amp;&amp; status != "HTTP/1.1 201 Created") {
	rawResp = new ByteArrayOutputStream();
     rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);

     int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

	String XMLbody  = strVal.substring(startAssert, strVal.length());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract ERROR table information" id="fc348085-d7d4-4532-b3cd-d1f902b2961a">
        <con:settings/>
        <con:config>
          <script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrType[" + tC.getPropertyValue("expectErrType") + "]";

switch (tC.getPropertyValue("expectErrType")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="34dceb12-e071-4fef-b6e6-3899d84a8088">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def url = tP.getPropertyValue("targetURL");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

tC.setPropertyValue("assertionUUIDprior",tC.getPropertyValue("assertionUUID"));

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;
String errorID = null;
String errorReason = null;
String errorLink = null;
String orgRequest = url + "/rest/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection = "Keep-Alive";

String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "NODE_STATUS_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = false;
		doContentLocaton  = false;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request"
		errorReason = "The request is not valid.";
		errorLink = "";
	break;
	case "FORBIDDEN_INVALID_ROLE":
		errorReason = "The request is not authorized.";
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1120";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
	case "FORBIDDEN_INVALID_DURATION":
	errorReason = "The security token's duration is not valid.";
	errorID="urn:dece:errorid:org:dece:invalidDurationvalue";
	errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
	case "FORBIDDEN_INVALID_USER_STATUS":
	errorReason = "The request is not authorized.";
	errorID="urn:dece:errorid:org:dece:securitycontext:InvalidUserStatus";
	errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
	case "FORBIDDEN:1123":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The request is not authorized.";
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1123";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
	case "FORBIDDEN:1119":
		errorReason = "The request is not authorized.";
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1119";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
	case "unauthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorReason = "The request is not authorized.";
		break;
	
	case "token_rejected":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "text/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:"+expectErrType;
		errorReason = "The request is not authorized.";
		break;
	case "FORBIDDEN":
	default:
		errorReason="Unknown Error";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	

if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		/*
		// ErrorLink
		this.log.info "ErrorLink: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
		*/
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION row count" id="ec303ce7-4426-49de-88c3-320299255b01">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

int uuidcnt = 0;

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		String uuid = tC.getPropertyValue("contentLocation").toString();

		/*
		*  Assert we have a location header value..
		*/
		assert uuid.length() > 1;

		/*
		*  Verify the value is a URL
		*/
		def lurl = uuid.toURL();
		def urlStr = lurl.getPath();

		int lastSlash = urlStr.lastIndexOf('/');

		/*
		*  Pull just the assertion UUID from the URL
		*/
		String assertionUUID = urlStr.substring(lastSlash + 1);

		log.info "assertionUUID [$assertionUUID]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		assert dbUtils.samlGetUUIDNodeAssertionRowCount(assertionUUID) == 1;
	}
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION prior assertion removed; tokentype:saml2" id="a4381091-92f4-446d-a7f6-bf223b99aace">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String tokentype = tC.getPropertyValue("tokentype").toString();
String scenario = tC.getPropertyValue("scenario").toString();
String assertionUUIDprior = tC.getPropertyValue("assertionUUIDprior").toString();

int uuidcnt = 0;

if (tC.getPropertyValue("expectErrType") == "SUCCESS" &amp;&amp; tokentype == "urn:dece:type:tokentype:saml2" &amp;&amp; scenario!="STSCreate") {

	assert assertionUUIDprior.length() > 4;
	
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  There should only be on NODE_USER_SAML_ASSERTION row 
		*  with this UUID after API invocation
		*/
		assert dbUtils.samlGetUUIDNodeAssertionRowCount(assertionUUIDprior) == 0;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION STATUS, NODE_OID" id="2b36704b-a8f8-4cfe-b740-19ae2068af50">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;
def myXML;

tC.setPropertyValue("assertionROW",null);

String arow = "";
String NODE_ID = tC.getPropertyValue("NODE_ID").toString();
String NODE_OID = tC.getPropertyValue("NODE_OID").toString();

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	/*
	*  Device Node ID override.  All devices are 0200 in 
	*  QA so if the nodeID received is one of our defined
	*  devices change the setting for validation 
	*  purposes.
	*/
	log.info "NODE_ID: "+NODE_ID;
	switch (NODE_ID) {
		
		case tP.getPropertyValue("nodeIdDEV").toString():
			NODE_OID = deviceNodeID;
			log.info "NODE_OID:"+NODE_OID;
			break;
	}
	
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		String uuid = tC.getPropertyValue("contentLocation").toString();
		
		/*
		*  Assert we have a location header value..
		*/
		assert uuid.length() > 1;

		/*
		*  Verify the value is a URL
		*/
		def lurl = uuid.toURL();
		def urlStr = lurl.getPath();

		int lastSlash = urlStr.lastIndexOf('/');

		/*
		*  Pull just the assertion UUID from the URL
		*/
		String assertionUUID = urlStr.substring(lastSlash + 1);

		log.info "assertionUUID [$assertionUUID]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		arow = dbUtils.samlGetAssertionRow(assertionUUID);

		assert arow.length() > 0;

		log.info "arow is [$arow]";

		tC.setPropertyValue("assertionROW",arow);
	}

	/*
	*  Parse the XML
	*/
	try {
		myXML = new XmlSlurper().parseText(arow);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify only one row was returned..
		*/
		log.info "ASSERT - Row Size is 1";
		assert myXML.ResultSet.Row.size() == 1;

		/*
		*  Verify NODE_USER_SAML_ASSERTION.STATUS is active
		*/
		log.info "ASSERT - STATUS is active";
		assert myXML.ResultSet.Row.STATUS.text() == "active";

		/*
		*  Verify NODE_USER_SAML_ASSERTION.NODE_ID
		*/
		log.info "ASSERT - NODE_OID Expect[$NODE_OID] Received[" +
			myXML.ResultSet.Row.NODE_OID.text() + "]";
		assert myXML.ResultSet.Row.NODE_OID.text() == NODE_OID;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION.EXPIRATION" id="f3354f1b-309f-4271-8d69-67bf7e07788f">
        <con:settings/>
        <con:config><script><![CDATA[import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def a;

int expectTime = tC.getPropertyValue("expectCreateExpireHoursDiff").toInteger();

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	String uname = tC.getPropertyValue("assertionUUID").toString().trim();
	String sys = tP.getPropertyValue("targetSystem").toString();
	String results = "";
	String secs = "";

	String sql = """SELECT (extract(DAY FROM EXPIRATION_DATE - CREATED_DATE)*24) 
		as HOURS FROM NODE_USER_SAML_ASSERTION where NODE_USER_SAML_UUID = '$uname'
	""";

	log.info sql;

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		results = a.SelectFromDB(sql,sys);
		log.info results;
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbUtils - $e"; 
		assert 1 == 2;
	}
	finally {
		try {
			def myXML = new XmlSlurper().parseText(results);
			assert myXML.ResultSet.Row.size() == 1;
			results = myXML.ResultSet.Row[0].HOURS
		}
		catch (Throwable e) {
			log.info "ERROR - XmlSlurper - $e";
			assert 1 == 2;
		} 
		finally {
			/*
			*  There is sometype of bug in oracle where it, at times, screws 
			*  update the date diff up to 24 hours.
			*/
						
			log.info "Expect[$expectTime] - Received[" +  results.toInteger() + "]";
			//assert (results.toInteger() == expectTime);
			assert (results.toInteger() <= expectTime + 06 && results.toInteger() >= expectTime - 06);
			//assert (results.toInteger() <= expectTime + 24 && results.toInteger() >= expectTime - 24);
		}
	}
}]]></script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION.NODE_USER_SAML_ASSERTION" id="5487f957-546b-47a1-bd2b-5340359a1dbd">
        <con:settings/>
        <con:config><script><![CDATA[/*
*  VALIDATIONS PERFORMED
*
*  saml2p:StatusCode == urn:oasis:names:tc:SAML:2.0:status:Success
*
*  <saml2:Issuer> == Project.Property("samlIssuer") (http://c.decellc.com/)
*
*  <saml2:AuthenticatingAuthority> == Project.Property("samlAuthenticatingAuthority") 
*	(urn:dece:org:neustar:coordinator)
*
*  <AudienceRestriction>
*	Verifications include insuring the size of the <AudienceRestriction> matches
*	the number of nodes expected.
*
*	For DEVICES this check will verify NO audience members are included.
*
*	Also verification of the nodes used in assertion creation/affiliation via
*	the STS call are contained within the <AudienceRestriction> node
*/
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def dbUtils;
def dbUtilsUser;

tC.setPropertyValue("computedAssertionXML",null);
tC.setPropertyValue("dbassertionNodeaccountid",null);
tC.setPropertyValue("dbassertionNodeuserid",null);

String assertionXML = "";
String arow = tC.getPropertyValue("assertionROW");
String[] affiliates;

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	def affiliationList = tC.getPropertyValue("stsComputedAudienceList").toString().tokenize(",");
	def ignoreNodesList = tC.getPropertyValue("stsaudienceIgnoreNodes").toString().tokenize(",");
	log.info "affiliationList size is " + affiliationList.size();
		
	/*
	*  Make sure we have data in arow
	*/
	assert arow.length() > 1;

	/*
	*  Get a handle for the saml class.
	*/
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	
	try {
		myXML = new XmlSlurper().parseText(arow);
		log.info 'myXML----------->'+myXML
		log.info 'size------->'+myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".size()
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify only one row was returned..
		*/
		log.info "ASSERT - Row Size is 1";
		assert myXML.ResultSet.Row.size() == 1;

		String assertRaw = myXML.ResultSet.Row.NODE_USER_SAML_ASSERTION_PART1.text() +
				myXML.ResultSet.Row.NODE_USER_SAML_ASSERTION_PART2.text();
			log.info 'assertRaw----->'+assertRaw

		/*
		*  Base64 decode the assertion clob
		*/
		byte [] xmlBytes = Base64.decode(assertRaw);
		assertionXML = new String(xmlBytes, "UTF8");

		assert assertionXML.length() > 1;

		tC.setPropertyValue("computedAssertionXML", assertionXML);
	}
	/*
	*  Now parse the assertion XML
	*/
	try {
		myXML = new XmlSlurper().parseText(assertionXML).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", saml2p: "urn:oasis:names:tc:SAML:2.0:protocol");
		log.info 'myXML----------->'+myXML
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Check the status
		*/
		log.info "ASSERT: Status size 1 == " + myXML."saml2p:Status".size();
		assert 1 == myXML."saml2p:Status".size();

		def s = myXML."saml2p:Status"."saml2p:StatusCode".@Value;
		log.info "ASSERT: Status value is urn:oasis:names:tc:SAML:2.0:status:Success == $s";
		assert "urn:oasis:names:tc:SAML:2.0:status:Success" == s.toString();

		/*
		*  Verify the nodeaccountid.
		*/
		String aname = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute".@Name;
		String anameE = "accountID";
		log.info "ASSERT: NodeAccountID - Name Attribute Value - Expect[$anameE] - Received[$aname]";
		assert anameE == aname;

		String avalue = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
		log.info "ASSERT: Returned Account NodeID length > 0 -- [$avalue]";
		assert avalue.length() > 0;
		tC.setPropertyValue("dbassertionNodeaccountid", avalue);

		/*
		*  Verify the nodeuserid
		*/
		String uvalue = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID".text();
		log.info "ASSERT: Returned Account UserID length > 0 -- [$uvalue]";
	
		//  Not zero length
		assert uvalue.length() > 0;

		//  Save for future
		tC.setPropertyValue("dbassertionNodeuserid", uvalue);
		int lastColon = uvalue.lastIndexOf(':');
		def uvalueid = uvalue.substring(lastColon + 1);

		//  Get USER_OID from NODE_USER table.
		def uvaluedb = dbUtils.samlGetNodeUserIDfromNodeUser(uvalueid);
		def unameval = tC.getPropertyValue("USER_OID").toString();
		log.info "ASSERT: NODE_USER.USER_OID Recv[$uvaluedb] - Expect[$unameval]";
		assert uvaluedb == unameval;

		/*
		* <saml2:Issuer>
		*/
		log.info "ASSERT: <saml2:Issuer> Expect: " +
			tP.getPropertyValue("samlIssuer") +
			" Received:[" + myXML."saml2:Assertion"."saml2:Issuer".text() +
			"]";
		assert tP.getPropertyValue("samlIssuer").toString() == myXML."saml2:Assertion"."saml2:Issuer".text();

		/*
		*  saml2:AuthnStatement
		*/
		log.info "ASSERT: <saml2:AuthenticatingAuthority> Expect [" + 
			tP.getPropertyValue("samlAuthenticatingAuthority") +
			"] Received[" +
			myXML."saml2:Assertion"."saml2:AuthnStatement"."saml2:AuthnContext"."saml2:AuthenticatingAuthority".text() +
			"]";
		assert tP.getPropertyValue("samlAuthenticatingAuthority").toString() ==
			myXML."saml2:Assertion"."saml2:AuthnStatement"."saml2:AuthnContext"."saml2:AuthenticatingAuthority".text()

		/*
		*  AudienceRestriction Processing
		*/
		if (tC.getPropertyValue("isDeviceFlag").toString() == "true") {
			/*
			*  Just empty the list that way we will check
			*  for zero
			*/
			affiliationList = "";
		}
		log.info "ASSERT: AudienceList size Expect[" +
			affiliationList.size() + "] Received[ " +
			myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".size() +
			"]";
	assert affiliationList.size() == myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".size();

		myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".each {
			log.info "ASSERT: <saml2:AudienceRestriction> Contains [" +
				it.text() + "]";
				log.info "affiliationList: "+affiliationList;
			assert affiliationList.contains(it);
		}
		//Make sure none of the ingnoredNodes made it into the affilation list.
		ignoreNodesList.each {
			log.info "ASSERT: <saml2:AudienceRestriction> DOES NOT Contain [" + it + "]";
			assert !affiliationList.contains(it);
		}


		
	}
}]]></script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_ACCOUNT row" id="b1cc4938-f07f-4edb-b722-9db84aeecf10">
        <con:settings/>
        <con:config><script>/*
*  Verifications
*
*	Only one NODE_ACCOUNT row exists for the NODE_ACCOUNT_ID.
*
*	NODE_ID is the nodeOID for the entity node.
*
*	ACCOUNT_OID is correct.
*
*/
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

def myXML;
def nodeXML;

tC.setPropertyValue("assertionAccountId",null);

String assertionAccountId = "";
String arow = "";
String narow = "";
String NODE_ID = tC.getPropertyValue("NODE_ID").toString();
String NODE_OID = tC.getPropertyValue("NODE_OID").toString();
/*
*  if we are a device adjust the 
*  NODE_ID...
*/
if (tC.getPropertyValue("isDeviceFlag") == "true") {
	log.info "here...";
	NODE_OID = tP.getPropertyValue("nodeDeviceDefault").toString();
}

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	
	arow = tC.getPropertyValue("assertionROW").toString();

	assert arow.length() > 0;

	/*
	*  Parse the NODE_USER_SAML_ASSERTION row
	*/
	try {
		myXML = new XmlSlurper().parseText(arow);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		assertionAccountId = myXML.ResultSet.Row.NODE_ACCOUNT_ID.text();

		log.info "assertionAccountId[$assertionAccountId]";
	}

	/*
	*  Get and Prase the NODE_ACCOUNT row..
	*/
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
		narow = dbUtils.samlGetNodeAccountRow(assertionAccountId);

		assert narow.length() > 0;
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		assertionAccountId = myXML.ResultSet.Row.NODE_ACCOUNT_ID.text();

		log.info "assertionAccountId[$assertionAccountId]";

		try {
			nodeXML = new XmlSlurper().parseText(arow);
		}
		catch(Throwable e) {
			log.info "ERROR - XmlSlurper - $e";
			assert 1 == 2;
		}
		finally {
			/*
			*  Only one row should be returned.
			*/
			log.info "ASSERT: Row Size is 1";
			assert nodeXML.ResultSet.Row.size() == 1;
			
			/*
			* ACCOUNT_OID - ugh  :(  for some reason slurper cannot find ACCOUNT_OID
			*	I will fix later  
			*/
			log.info "ASSERT: ACCOUNT_OID Expect[" + tC.getPropertyValue("accountoid") +
				"] Received[" + nodeXML.ResultSet.Row.ACCOUNT_OID.text() + "]";
		//assert tC.getPropertyValue("accountoid").toString() == nodeXML.ResultSet.Row.ACCOUNT_OID.text();

			/*
			*  NODE_ID is the entity node...
			*/
			
			log.info "ASSERT: NODE_OID Expect[" + NODE_OID +
				"] Received[" + nodeXML.ResultSet.Row.NODE_OID.text() + "]";
			assert NODE_OID == nodeXML.ResultSet.Row.NODE_OID.text();

		}
	}	
}

tC.setPropertyValue("assertionAccountId",assertionAccountId);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER row count" id="7b11acbd-b4a2-4056-bcc0-b48977b1eb5c">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int expectedSize = 1;
int assertionSize = 0;
int stsaudienceSize = 1;  // Start at one as entity nodes is in audience
int stsaudienceIgnoreSize = 0;
int expectNodeUserRowCount = tC.getPropertyValue("expectNodeUserRowCount").toInteger();

tC.setPropertyValue("z_resultNodeUserRowCount",null);

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	if (tC.getPropertyValue("stsaudienceIgnoreAll").toString() == "false") {
		if ( tC.getPropertyValue("stsaudience") != null) {
			stsaudienceSize += tC.getPropertyValue("stsaudience").toString().tokenize(",").size();
			log.info "stsaudienceSize BEFORE [$stsaudienceSize]";
		}
		if ( tC.getPropertyValue("stsaudienceIgnoreNodes") != null) {
			stsaudienceIgnoreSize = tC.getPropertyValue("stsaudienceIgnoreNodes").toString().tokenize(",").size();
			log.info "stsaudienceIgnoreSize BEFORE [$stsaudienceIgnoreSize]";
		}

		stsaudienceSize -= stsaudienceIgnoreSize;
		log.info "stsaudienceSize FINAL [$stsaudienceSize]";
	} else {
		log.info "No changes to count";
	}
	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	assertionSize = a.samlGetUUIDNodeUserRowCountbyUUID(tC.getPropertyValue("assertionUUID"));

	tC.setPropertyValue("z_resultNodeUserRowCount",assertionSize.toString());

	if (expectNodeUserRowCount == 0) {
		log.info "ASSERT: Audience Size[$stsaudienceSize] - Received[$assertionSize]";
		assert assertionSize == stsaudienceSize;
	} else {
		log.info "ASSERT: Audience Size[$stsaudienceSize] - Received[$expectNodeUserRowCount]";
		assert stsaudienceSize == expectNodeUserRowCount;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER rows" id="b170044a-aff3-4ff7-b692-34c1aec8883d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));

def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));

String uuid = tC.getPropertyValue("assertionUUID").toString();
String nodeUser = tC.getPropertyValue("assertionUserId").toString();

String resultsDB = "";
String node = "";
List nodeList;

int indexOfcol = 0;
if (tC.getPropertyValue("actionSkipNodeUserCheck") != "true") {
	if (tC.getPropertyValue("expectErrType").toString() == "SUCCESS") {
		assert tC.getPropertyValue("stsComputedAudienceList").toString() != 'null';

		/*
		*  Devices should not ever be affilated.
		*/
		if (tC.getPropertyValue("isDeviceFlag").toString() != "true") {
			nodeList = tC.getPropertyValue("stsComputedAudienceList").toString().tokenize(",");
		} else {
			nodeList = tP.getPropertyValue("nodeDeviceDefault").toString().tokenize(",");
		}
		
		log.info "nodeList size is " + nodeList.size();

		nodeList.each {
			assert nodeList.isEmpty() == false;
			String NODE_OID = null;
			String nodeoid = tC.getPropertyValue("NODE_OID").toString();
			log.info "Processing NODE: $it";	
			if(it.toString() == "urn:dece:org:org:dece:dece:cs" || it.toString() == "urn:dece:org:org:dece:coord:cs"){
			log.info "here...";
				NODE_OID =  nodeoid;
			}else{
				indexOfcol = it.lastIndexOf(":");
			node = it.substring(indexOfcol + 1);
			log.info "node is $node";
			 NODE_OID = nodeoidGet.nodeoidGetFromNodeId("$node");
			}
			log.info "here...";
				if (tC.getPropertyValue("isDeviceFlag").toString() == "true") {
					NODE_OID=tP.getPropertyValue("nodeDeviceDefault").toString();
				}
	
			
			String sql = """SELECT to_char(rawtohex(USER_OID)) USER_OID,
				to_char(rawtohex(NODE_OID)) NODE_OID, 
				to_char(rawtohex(NODE_USER_ID)) NODE_USER_ID 
				FROM NODE_USER where NODE_USER_SAML_UUID = '$uuid' 
 				and NODE_OID = hextoraw('$NODE_OID')""";
			try {
				log.info "sql is [$sql]";
				resultsDB = dbUtils.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
			} catch (Throwable e) {
				log.info "ERROR - SelectFromDB issue! - $e";
			} finally {
				log.info "results is [$resultsDB]";
			}
		
			try {
				def myXML = new XmlSlurper().parseText(resultsDB);
	
				String dbUserOID = myXML.ResultSet.Row[0].USER_OID;
				String dbNodeOID = myXML.ResultSet.Row[0].NODE_OID;
				String dbNodeUserOID = myXML.ResultSet.Row[0].NODE_USER_ID;
			}
			catch(Throwable e) {
				log.info "ERROR - XmlSlurper Problem - $e";
			}
			finally {
				log.info "Assert DB USER_OID [$dbUserOID] == [" + tC.getPropertyValue("userOID") + "]";
				assert dbUserOID == tC.getPropertyValue("userOID").toString();

				log.info "Assert DB NODE_OID [$dbNodeOID] == [$NODE_OID]";
				assert dbNodeOID == NODE_OID;

			} 	
		}
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify LVAL EUDU &amp; EMUC row count" id="87e27c8d-ef39-47ca-8653-c81f423d066e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
def username = context.expand( '${#TestCase#username}' )
username=username.replace(" ","");
String uuid = tC.getPropertyValue("assertionUUID").toString();
String user_oid = tC.getPropertyValue("USER_OID").toString();
String resultsDB = "";
String node = "";
List nodeList;
def myXML = "";
int indexOfcol = 0;

if (tP.getPropertyValue("versionMinor") != "02" &amp;&amp; tC.getPropertyValue("actionSkipPolicyCheck") != "true" &amp;&amp; tC.getPropertyValue("tokentype")!= tP.getPropertyValue("urntokenType_deviceauthtoken")) 
{
	if (tC.getPropertyValue("expectErrType").toString() == "SUCCESS") 
	{
		assert tC.getPropertyValue("stsComputedAudienceList").toString() != 'null';

		/*
		*  Devices should not ever be affilated.
		*/
		if (tC.getPropertyValue("isDeviceFlag").toString() != "true") 
		{
			nodeList = tC.getPropertyValue("stsComputedAudienceList").toString().tokenize(",");
		} 
		else 
		{
			nodeList = tP.getPropertyValue("nodeDeviceDefault").toString().tokenize(",");
		}
		
		log.info "nodeList size is " + nodeList.size();

		nodeList.each {

			assert nodeList.isEmpty() == false;
			log.info "Processing NODE: $it";
			indexOfcol = it.lastIndexOf(":");
			node = it.substring(indexOfcol + 1);
			String NODE_OID = nodeoidGet.nodeoidGetFromNodeId(node);
			
			String sql = """select pre.entity_id, count(p.policy_oid) as count from policy p, policy_requesting_entity pre where 
									p.status = 'active' and p.policy_class in (100,103,104) 
									and p.policy_oid in (select policy_oid from policy_relationship where policy_actor in 
									(select account_oid from account_user where lower(username) = lower('$username')))
									and pre.policy_oid = p.policy_oid and pre.entity_id = hextoraw('$NODE_OID') group by pre.entity_id""";
			try 
			{
				log.info "sql is [$sql]";
				resultsDB = dbUtils.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
				log.info "resultsDB: "+resultsDB;
			} 
			catch (Throwable e) 
			{
				log.info "ERROR - SelectFromDB issue! - $e";
			} 
			
			myXML = new XmlSlurper().parseText(resultsDB);
			log.info "Node Received: "+myXML.ResultSet.Row[0].ENTITY_ID;
			log.info "Row Count Received: "+myXML.ResultSet.Row[0].COUNT;
			assert myXML.ResultSet.Row[0].ENTITY_ID== NODE_OID;
			assert myXML.ResultSet.Row[0].COUNT == 3;	
		
		}
	}
	
}
else
{
	log.info "Second User Policy Check... or token create using auth token or version 02";
}</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER prior removed; tokentype:saml2" id="0e0a6e27-fb37-4562-9d51-230a152b1995">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def a;

String tokentype = tC.getPropertyValue("tokentype").toString();
String scenario = tC.getPropertyValue("scenario").toString();
String assertionUUIDprior = tC.getPropertyValue("assertionUUIDprior").toString();

tC.setPropertyValue("z_resultNodeUserRowCount",null);

if (tC.getPropertyValue("expectErrType") == "SUCCESS" &amp;&amp; tokentype == "urn:dece:type:tokentype:saml2" &amp;&amp; scenario != "STSCreate") {

	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	assertionSize = a.samlGetUUIDNodeUserRowCountbyUUID(assertionUUIDprior);

	log.info "ASSERT: No Rows for [$assertionUUIDprior]";
	assert assertionSize == 0;
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return the assertion information to the Calling Test Case" id="005b0d47-d426-4a5d-8970-86ac11c79a19">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",null);

callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Save the Request &amp; Response with TC Name" disabled="true" id="70a59bca-5ec8-49f0-abd5-43cf788b8578"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep = tC.getTestStepByName('POST - STS');

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def myP = testRunner.testCase.testSuite.project.name;

def tName = context.expand( '${#TestCase#tName}' );

def logFile = new File(projectPath +"\\"+myP +"\\"+tName+".txt")
logFile.append("Request:\n");
def headers = tStep.httpRequest.getRequestHeaders();
log.info "headers:"+headers;
def req= context.expand('${POST - STS#Request}')
logFile.append(req);
log.info "Request: "+req;

logFile.append("\n\nResponse:\n");
res = new ByteArrayOutputStream();
def res = tStep.httpRequest.response.getRawResponseData();;
 strVal  = new String(res);

logFile.append(strVal);
log.info "Response: "+strVal;</script></con:config></con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E9CCDA629108841EE0401F0A0799029D</con:value></con:property><con:property><con:name>actionAuthHeader</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionDeviceAuthHeader</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E9CCDA62910B841EE0401F0A0799029D</con:value></con:property><con:property><con:name>assertionROW</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <NODE_USER_SAML_ASSERTION_OID>E9CCDA4AA5586225E0401F0A05994D78</NODE_USER_SAML_ASSERTION_OID>
      <NODE_OID>41</NODE_OID>
      <NODE_USER_SAML_ASSERTION_PART1>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHNhbWwycDpSZXNwb25zZSBDb25zZW50PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDpwcmlvciIgRGVzdGluYXRpb249Imh0dHBzOi8vc3RkZWNxYXZ1dGwxLnZhLm5ldXN0YXIuY29tOjI0ODUvc2ltcGxlc2FtbC9tb2R1bGUucGhwL3NhbWwvc3Avc2FtbDItYWNzLnBocC9jb29yZDpjcyIgSUQ9Il8yMTJlZjMzNS0yYTAwLTRlODctYWZhZC1lNDY5NDQwODA3NTAiIEluUmVzcG9uc2VUbz0iXzNGNTNGNEExMzkwN0E5MUMzNEZBRTMxOTkzRjY2RDREIiBJc3N1ZUluc3RhbnQ9IjIwMTMtMTAtMjhUMTI6MDE6MjAuMDkwWiIgVmVyc2lvbj0iMi4wIiB4bWxuczpzYW1sMnA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCI+PHNhbWwyOklzc3VlciB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+aHR0cDovL2MuZGVjZWxsYy5jb20vPC9zYW1sMjpJc3N1ZXI+PHNhbWwycDpTdGF0dXM+PHNhbWwycDpTdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOlN1Y2Nlc3MiLz48L3NhbWwycDpTdGF0dXM+PHNhbWwyOkFzc2VydGlvbiBJRD0iXzBkODg1M2I0LTdmOGUtNDQzYS04OTU1LTE1YzgwOTMxM2ZiYiIgSXNzdWVJbnN0YW50PSIyMDEzLTEwLTI4VDEyOjAxOjIwLjA5MFoiIFZlcnNpb249IjIuMCIgeG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPjxzYW1sMjpJc3N1ZXI+aHR0cDovL2MuZGVjZWxsYy5jb20vPC9zYW1sMjpJc3N1ZXI+PGRzOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+CjxkczpTaWduZWRJbmZvPgo8ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPgo8ZHM6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIi8+CjxkczpSZWZlcmVuY2UgVVJJPSIjXzBkODg1M2I0LTdmOGUtNDQzYS04OTU1LTE1YzgwOTMxM2ZiYiI+CjxkczpUcmFuc2Zvcm1zPgo8ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiLz4KPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyI+PGVjOkluY2x1c2l2ZU5hbWVzcGFjZXMgUHJlZml4TGlzdD0iZHMgc2FtbDIgeHMiIHhtbG5zOmVjPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48L2RzOlRyYW5zZm9ybT4KPC9kczpUcmFuc2Zvcm1zPgo8ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiLz4KPGRzOkRpZ2VzdFZhbHVlPkNKQmlINHU3bnZwc2I0SWQ2Zksyci9Bdk5YQT08L2RzOkRpZ2VzdFZhbHVlPgo8L2RzOlJlZmVyZW5jZT4KPC9kczpTaWduZWRJbmZvPgo8ZHM6U2lnbmF0dXJlVmFsdWU+CnJuL1gvb0Z3UzhpSlJ5WkhlVkt2ZzNTeEtpZm5TdWIwOEV6b1JVc1lmKy9XRTFuYU5YaWJQN0ZTcmRyOXRNOHZBUVljcTh6WWREKzcKZmY4WlBHRDk0eUNaZkhLWVM4OUZqYWFPSk03bWx1Z1RtU0xHRG13aTBBMHdhT096UGtYZU9RWkNqVnRQRjV0MTRSSThYT1RqcUpJUAphZUZydEg1YldiWFFsY0hFeDRVPQo8L2RzOlNpZ25hdHVyZVZhbHVlPgo8L2RzOlNpZ25hdHVyZT48c2FtbDI6U3ViamVjdD48c2FtbDI6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOm5hbWVpZC1mb3JtYXQ6cGVyc2lzdGVudCI+dXJuOmRlY2U6dXNlcmlkOm9yZzpkZWNlOkU5Q0NEQTVFQjMwOUE3NzVFMDQwMUYwQTA3OTkwMkFEPC9zYW1sMjpOYW1lSUQ+PHNhbWwyOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206c2VuZGVyLXZvdWNoZXMiPjxzYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uRGF0YSBJblJlc3BvbnNlVG89Il8zRjUzRjRBMTM5MDdBOTFDMzRGQUUzMTk5M0Y2NkQ0RCIgTm90T25PckFmdGVyPSIyMDEzLTEwLTI4VDE1OjAxOjIwLjA5MFoiIFJlY2lwaWVudD0iaHR0cHM6Ly9zdGRlY3FhdnV0bDEudmEubmV1c3Rhci5jb206MjQ4NS9zaW1wbGVzYW1sL21vZHVsZS5waHAvc2FtbC9zcC9zYW1sMi1hY3MucGhwL2Nvb3JkOmNzIi8+PC9zYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uPjwvc2FtbDI6U3ViamVjdD48c2FtbDI6Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMTMtMTAtMjhUMTI6MDE6MTAuMDkwWiIgTm90T25PckFmdGVyPSIyMDE0LTEwLTI4VDEyOjAxOjIwLjA5MFoiPjxzYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPjxzYW1sMjpBdWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6Y29vcmQ6Y3M8L3NhbWwyOkF1ZGllbmNlPjwvc2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48L3NhbWwyOkNvbmRpdGlvbnM+PHNhbWwyOkFkdmljZT48c2FtbDI6QXNzZXJ0aW9uVVJJUmVmPmh0dHBzOi8vcWEucS51dnZ1LmNvbTo3MDAxL3Jlc3QvMS8wNy9TZWN1cml0eVRva2VuL0Fzc2VydGlvbi9fMGQ4ODUzYjQtN2Y4ZS00NDNhLTg5NTUtMTVjODA5MzEzZmJiPC9zYW1sMjpBc3NlcnRpb25VUklSZWY+PC9zYW1sMjpBZHZpY2U+PHNhbWwyOkF1dGhuU3RhdGVtZW50IEF1dGhuSW5zdGFudD0iMjAxMy0xMC0yOFQxMjowMToyMC4wOTBaIiBTZXNzaW9uSW5kZXg9Il8wZDg4NTNiNC03ZjhlLTQ0M2EtODk1NS0xNWM4MDkzMTNmYmIiPjxzYW1sMjpBdXRobkNvbnRleHQ+PHNhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOlBhc3N3b3JkPC9zYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj48c2FtbDI6QXV0aGVudGlj</NODE_USER_SAML_ASSERTION_PART1>
      <NODE_USER_SAML_ASSERTION_PART2>YXRpbmdBdXRob3JpdHk+dXJuOmRlY2U6b3JnOm9yZzpkZWNlOmNvb3JkaW5hdG9yPC9zYW1sMjpBdXRoZW50aWNhdGluZ0F1dGhvcml0eT48L3NhbWwyOkF1dGhuQ29udGV4dD48L3NhbWwyOkF1dGhuU3RhdGVtZW50PjxzYW1sMjpBdHRyaWJ1dGVTdGF0ZW1lbnQ+PHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJhY2NvdW50SUQiIE5hbWVGb3JtYXQ9InVybjpkZWNlOnR5cGU6YWNjb3VudElEIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj51cm46ZGVjZTphY2NvdW50aWQ6b3JnOmRlY2U6RTlDQ0RBNjI5MTA2ODQxRUUwNDAxRjBBMDc5OTAyOUQ8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjwvc2FtbDI6QXR0cmlidXRlU3RhdGVtZW50Pjwvc2FtbDI6QXNzZXJ0aW9uPjwvc2FtbDJwOlJlc3BvbnNlPg==</NODE_USER_SAML_ASSERTION_PART2>
      <NODE_USER_SAML_UUID>_0d8853b4-7f8e-443a-8955-15c809313fbb</NODE_USER_SAML_UUID>
      <CREATED_DATE>2013-10-28 12:01:20.0</CREATED_DATE>
      <NODE_USER_ID>E9CCDA5EB30DA775E0401F0A079902AD</NODE_USER_ID>
      <NODE_ACCOUNT_ID>E9CCDA62910B841EE0401F0A0799029D</NODE_ACCOUNT_ID>
      <STATUS>active</STATUS>
      <EXPIRATION_DATE>2014-10-28 12:01:20.0</EXPIRATION_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        
        
        <con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_0d8853b4-7f8e-443a-8955-15c809313fbb</con:value></con:property><con:property><con:name>assertionUUIDprior</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_4acde4bf-c506-4f4d-948e-c870b9891bd9</con:value></con:property>
        
        
        
        
        
      <con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertUserId</con:name><con:value>94B6AE0F85AFC20DE0401F0A0799081F</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authHeaderValue</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>computedAssertionXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2p:Response Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/coord:cs" ID="_212ef335-2a00-4e87-afad-e46944080750" InResponseTo="_3F53F4A13907A91C34FAE31993F66D4D" IssueInstant="2013-10-28T12:01:20.090Z" Version="2.0" xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol"><saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">http://c.decellc.com/</saml2:Issuer><saml2p:Status><saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/></saml2p:Status><saml2:Assertion ID="_0d8853b4-7f8e-443a-8955-15c809313fbb" IssueInstant="2013-10-28T12:01:20.090Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_0d8853b4-7f8e-443a-8955-15c809313fbb">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>CJBiH4u7nvpsb4Id6fK2r/AvNXA=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
rn/X/oFwS8iJRyZHeVKvg3SxKifnSub08EzoRUsYf+/WE1naNXibP7FSrdr9tM8vAQYcq8zYdD+7
ff8ZPGD94yCZfHKYS89FjaaOJM7mlugTmSLGDmwi0A0waOOzPkXeOQZCjVtPF5t14RI8XOTjqJIP
aeFrtH5bWbXQlcHEx4U=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:E9CCDA5EB309A775E0401F0A079902AD</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_3F53F4A13907A91C34FAE31993F66D4D" NotOnOrAfter="2013-10-28T15:01:20.090Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/coord:cs"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2013-10-28T12:01:10.090Z" NotOnOrAfter="2014-10-28T12:01:20.090Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:coord:cs</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_0d8853b4-7f8e-443a-8955-15c809313fbb</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2013-10-28T12:01:20.090Z" SessionIndex="_0d8853b4-7f8e-443a-8955-15c809313fbb"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:E9CCDA629106841EE0401F0A0799029D</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></saml2p:Response>]]></con:value></con:property><con:property><con:name>connection</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_0d8853b4-7f8e-443a-8955-15c809313fbb</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/plain; charset=UTF-8</con:value></con:property><con:property><con:name>dbassertionNodeaccountid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:E9CCDA629106841EE0401F0A0799029D</con:value></con:property><con:property><con:name>dbassertionNodeuserid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:E9CCDA5EB309A775E0401F0A079902AD</con:value></con:property><con:property><con:name>deviceAuthHeaderValue</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deviceAuthString</con:name><con:value>841321476135740</con:value></con:property><con:property><con:name>deviceAuthToken</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>endPoint</con:name><con:value>rest/1/07/SecurityToken/Assertion/_4acde4bf-c506-4f4d-948e-c870b9891bd9/SecurityTokenExchange?tokentype=urn:dece:type:tokentype:saml2</con:value></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRightsTokenCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectNodeUserRowCount</con:name><con:value>0</con:value></con:property><con:property><con:name>isDeviceFlag</con:name><con:value>false</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/soapUIProjects/STSAPIProjects_LP1/coordcs_concat.pem</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>NODE_IDFULL</con:name><con:value>urn:dece:org:org:dece:coord:cs</con:value></con:property><con:property><con:name>NODE_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">41</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>86713</con:value></con:property><con:property><con:name>scenario</con:name><con:value>SAMLExchange</con:value></con:property><con:property><con:name>sName</con:name><con:value>7_STS Create and SAML Exchange - Node Role - with and without ULC</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsaudience</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsaudienceEmbeddedDelimiter</con:name><con:value>false</con:value></con:property><con:property><con:name>stsaudienceIgnoreAll</con:name><con:value>false</con:value></con:property><con:property><con:name>stsaudienceIgnoreNodes</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsaudiencePrefixDelimiter</con:name><con:value>false</con:value></con:property><con:property><con:name>stsaudienceSuffixedDelimiter</con:name><con:value>false</con:value></con:property><con:property><con:name>stsComputedAudienceList</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:coord:cs</con:value></con:property><con:property><con:name>stsduration</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsExpire</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsRequestBody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsRequestBodyNULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsRequestUserNameFlag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsSkipLastLoginCheck</con:name><con:value>false</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_17024 - SAMLExchange - Coordinator:CS - unamepasswd - with and without ULC - P1</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:saml2</con:value></con:property><con:property><con:name>username</con:name><con:value>stsapi_107_1382961674721</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E9CCDA5EB30BA775E0401F0A079902AD</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" >
<Error ErrorID="urn:dece:errorid:org:dece:securitycontext:forbidden:1119">
       <Reason Language="en">The request is not authorized.</Reason>
        <OriginalRequest>https://qa.d.uvvu.com:7001/rest/1/07/SecurityToken/SecurityTokenExchange</OriginalRequest>
       <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/07/error/en/ErrorList.html</ErrorLink>
    </Error>
</ErrorList>
]]></con:value></con:property><con:property><con:name>z_resultNodeUserRowCount</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>555384c9-6fa2-448b-a38e-713264e945f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS GET API - Invoked to the Coordinator URL" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true" id="033f51ed-b6f7-4b32-bcf9-210bf96780fd">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="ab1180ae-e327-4e73-be34-88dd1b2c3db6">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("actionAuthHeader",null);
tC.setPropertyValue("deviceAuthHeaderValue",null);
tC.setPropertyValue("actionDeviceAuthHeader",null);
tC.setPropertyValue("actionIgnoreAuthTokenStatus",null);
tC.setPropertyValue("actionSkipNodeUserCheck",null);
tC.setPropertyValue("actionSkipNodeIDCheck",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("isDeviceFlag",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("authHeaderString",null);
tC.setPropertyValue("affilNODE_ID",null);
tC.setPropertyValue("assertCreatingNodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("stsIgnoreAssertTimesFlag",null);
tC.setPropertyValue("stsExpectedAffiliationListSize",null);
tC.setPropertyValue("expectErrTypeSTSGet",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("authHeaderValue",null);
tC.setPropertyValue("deviceAuthHeaderValue",null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("rauthToken",null);
tC.setPropertyValue("stsaudienceIgnoreAll",null);
tC.setPropertyValue("stsaudience",null);
tC.setPropertyValue("stsaudienceIgnoreNodes",null);
tC.setPropertyValue("NODE_IDFULL",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("contentLocation",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="19523d18-4ad0-4efb-a8ae-f865f8181da3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("actionDeviceAuthHeader",callTC.getPropertyValue("actionDeviceAuthHeader"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("assertCreatingNodeid",callTC.getPropertyValue("assertCreatingNodeid"));
tC.setPropertyValue("affilNODE_ID",callTC.getPropertyValue("affilNODE_ID"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("USER_OID",callTC.getPropertyValue("USER_OID"));
tC.setPropertyValue("expectNodeUserRowCount",callTC.getPropertyValue("expectNodeUserRowCount"));
tC.setPropertyValue("expectCreateExpireHoursDiff",callTC.getPropertyValue("expectCreateExpireHoursDiff"));
tC.setPropertyValue("expectErrTypeSTSGet",callTC.getPropertyValue("expectErrTypeSTSGet"));
tC.setPropertyValue("stsIgnoreAssertTimesFlag",callTC.getPropertyValue("stsIgnoreAssertTimesFlag"));
tC.setPropertyValue("authHeaderString",callTC.getPropertyValue("authHeaderString"));
tC.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
tC.setPropertyValue("deviceAuthToken",callTC.getPropertyValue("deviceAuthToken"));
tC.setPropertyValue("rauthToken",callTC.getPropertyValue("rauthToken"));
tC.setPropertyValue("actionAuthHeader",callTC.getPropertyValue("actionAuthHeader"));
tC.setPropertyValue("actionIgnoreAuthTokenStatus",callTC.getPropertyValue("actionIgnoreAuthTokenStatus"));
tC.setPropertyValue("actionSkipNodeUserCheck",callTC.getPropertyValue("actionSkipNodeUserCheck"));
tC.setPropertyValue("actionSkipNodeIDCheck",callTC.getPropertyValue("actionSkipNodeIDCheck"));
tC.setPropertyValue("stsaudience",callTC.getPropertyValue("stsaudience"));
tC.setPropertyValue("stsaudienceIgnoreAll",callTC.getPropertyValue("stsaudienceIgnoreAll"));
tC.setPropertyValue("stsaudienceIgnoreNodes",callTC.getPropertyValue("stsaudienceIgnoreNodes"));
tC.setPropertyValue("isDeviceFlag",callTC.getPropertyValue("isDeviceFlag"));
tC.setPropertyValue("username",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("password",callTC.getPropertyValue("UserPassword"));
tC.setPropertyValue("contentLocation",callTC.getPropertyValue("contentLocation"));

if (tC.getPropertyValue("expectErrTypeSTSGet") == null ||
	tC.getPropertyValue("expectErrTypeSTSGet") == "") {
		tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
}
if (tC.getPropertyValue("stsIgnoreAssertTimesFlag") == null ||
	tC.getPropertyValue("stsIgnoreAssertTimesFlag") == "") {
		tC.setPropertyValue("stsIgnoreAssertTimesFlag","false");
}
if (tC.getPropertyValue("tokentype") == null ||
	tC.getPropertyValue("tokentype") == "") {
		tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
}

if (tC.getPropertyValue("isDeviceFlag") == null ||
	tC.getPropertyValue("isDeviceFlag") == 'null') {
		tC.setPropertyValue("isDeviceFlag","false");
}

if (tC.getPropertyValue("actionSkipNodeIDCheck") == null ||
	tC.getPropertyValue("actionSkipNodeIDCheck") == 'null') {
		tC.setPropertyValue("actionSkipNodeIDCheck","false");
}
if (tC.getPropertyValue("NODE_ID") != 'null' || tC.getPropertyValue("NODE_ID") != null) {
		tC.setPropertyValue("NODE_IDFULL", tP.getPropertyValue("urnNode") + tC.getPropertyValue("NODE_ID"));
}

/*
*  ONLY pull the current TC assertion of the tokentype is saml2 (needed for the exchange)
*/
if (tC.getPropertyValue("tokentype") == tP.getPropertyValue("urntokenType_saml")) {
	log.info "Extracting assertion";
	tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
}

/*
*  Construct the expected Affiliation list
*/
def affiliationList = [tC.getPropertyValue("NODE_IDFULL").toString()];
def ignoreNodesList = [];
def stsaudienceList = [];
	
if (tC.getPropertyValue("stsaudienceIgnoreAll").toString() == "false") {
	if (tC.getPropertyValue("stsaudience") != 'null') {
		stsaudienceList = tC.getPropertyValue("stsaudience").toString().tokenize(",");

		/*
		*  Now remove the ingnorenodes 
		*/
		if (tC.getPropertyValue("stsaudienceIgnoreNodes") != 'null') {
			ignoreNodesList = tC.getPropertyValue("stsaudienceIgnoreNodes").toString().tokenize(",");
			ignoreNodesList.each {
				if (stsaudienceList.contains(it)) {
					stsaudienceList = stsaudienceList.minus(it);
				}
			}
		}
	}

	if (stsaudienceList.size() >= 1) {
		log.info "DEBUG: Adding stsaudienceList";
		affiliationList.addAll(stsaudienceList);
	}
} 

tC.setPropertyValue("stsExpectedAffiliationListSize",affiliationList.size().toString());

log.info "DEBUG: affiliationList size is " + affiliationList.size();
affiliationList.each {
	log.info "DEBUG afflicationList Member: " + it;
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish attributes based on NodeID" id="c8e61be3-4c12-4c1c-8807-e6a79f7204b8">
        <con:settings/>
        <con:config>
          <script>import java.util.StringTokenizer; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String NODE_ID = tC.getPropertyValue("NODE_ID").toString();

/*
*  See if we are a device
*/
switch (NODE_ID) {
	case tP.getPropertyValue("nodeIdDEV").toString():
		urlEndPoint = "device";
		tC.setPropertyValue("isDeviceFlag","true");
		break;
	default:
		urlEndPoint = "coordinator";
		tC.setPropertyValue("isDeviceFlag","false");
		break;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Construct URL" id="a51f9874-735b-4d42-8699-1a0c8f93b08e">
        <con:settings/>
        <con:config><script>import java.util.StringTokenizer; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

Boolean appliedFirstNode = false;
String url = "";
String anode = "";
String urlEndPoint = "";
String NODE_ID = tC.getPropertyValue("NODE_ID").toString();

log.info "NODE_ID[$NODE_ID]";

if (tC.getPropertyValue("isDeviceFlag") == "true") {
	urlEndPoint = "device";
}

log.info "urlEndPoint: " + urlEndPoint;

/*
*  Set the endpoint
*/
switch (urlEndPoint) {
	case "device":
			url = "https://" + tP.getPropertyValue("targetDeviceDomain").toString() + 
			"/rest/" + tP.getPropertyValue("versionMajor").toString() +
			"/" + tP.getPropertyValue("versionMinor").toString() +
			"/SecurityToken/Assertion/" +
			tC.getPropertyValue("assertionUUID").toString();
		break;
	case "coordinator":
	default:
		url = "https://" + tP.getPropertyValue("targetHostq").toString() + 
			":" + tP.getPropertyValue("targetPortq").toString() + 
			"/rest/" + tP.getPropertyValue("versionMajor").toString() +
			"/" + tP.getPropertyValue("versionMinor").toString() +
			"/SecurityToken/Assertion/" +
			tC.getPropertyValue("assertionUUID").toString();
	break;
}

log.info "url[$url]";

testRunner.testCase.getTestStepByName('GET - STS').httpRequest.setEndpoint(url);

</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Construct Authorization Header if necessary" id="d90d7465-0fd4-43e9-8239-2434915a0150">
        <con:settings/>
        <con:config><script>import org.apache.commons.codec.binary.Base64;
import com.eviware.soapui.support.types.StringToStringsMap 
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Device auth token requires the authorization header be
*  included with the device code
*/
if (tC.getPropertyValue("tokentype") == tP.getPropertyValue("urntokenType_deviceauthtoken")) {
	String authHeaderValue = "DeviceCode value=\"" + tC.getPropertyValue("deviceAuthToken") + "\"";

	tC.setPropertyValue("authHeaderValue",authHeaderValue);

	log.info "Property authHeaderValue is - " + tC.getPropertyValue("authHeaderValue");
	
tC.setPropertyValue("deviceAuthHeaderValue","dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6");

} else if (tC.getPropertyValue("isDeviceFlag").toString() == "true") {
	/*
	*  construct the basic auth header
	*/
	String combo = tC.getPropertyValue("username").toString() + ":" + tC.getPropertyValue("password").toString();
	String authHeaderValue = "Basic " + combo.bytes.encodeBase64().toString()

	log.info "combo[$combo] - authHeaderValue[$authHeaderValue]";

	tC.setPropertyValue("authHeaderValue",authHeaderValue);

tC.setPropertyValue("deviceAuthHeaderValue","dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6");
}


	if (tC.getPropertyValue("actionAuthHeader") == "EXCLUDE") {
	tC.setPropertyValue("authHeaderValue",null);
}

	if (tC.getPropertyValue("actionDeviceAuthHeader") == "EXCLUDE") {
	tC.setPropertyValue("deviceAuthHeaderValue",null);
}
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish PEM" id="b8e66b29-50e9-4096-bf5e-6b7cfd3692f5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID_",tC.getPropertyValue("NODE_ID_"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - STS");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Obtain current sysdate from DB" id="e39312c9-113d-4d6f-9dc9-4466c3ed9559">
        <con:settings/>
        <con:config>
          <script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("currentDBTOD",null);

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
String sqlResultXML = "";
String cDate = "";
String tod = "";

try {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
	sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
	log.info "sqlResultXML[$sqlResultXML]";

	if (sqlResultXML.length() > 0) {
		def myXML = new XmlSlurper().parseText(sqlResultXML);
		tod = myXML.ResultSet.Row.TOD;
		log.info "tod[$tod]";
	}

}
catch (Throwable e) {
	log.info "sql[$sql]";
	log.info "dbUtils request failed! - " + e;
	assert 1 == 2;
}
finally {
	if (tod.length() > 0) {
		tC.setPropertyValue("currentDBTOD", tod);
	}
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="GET - STS" id="b00d598f-0d3d-43dc-87eb-bd290a69ff6a"><con:settings/><con:config service="STSGet1" resourcePath="" methodName="STS GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STS" mediaType="application/xml;charset=UTF-8" sslKeystore="coordcs_concat.pem" accept="" id="dc9eb844-3c3f-4cf1-9c1c-8c9aa4847c76"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#authHeaderValue}"/>
  &lt;con:entry key="x-dece-ApplicationAuthorization" value="${#TestCase#deviceAuthHeaderValue}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_0d8853b4-7f8e-443a-8955-15c809313fbb</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="assertionUUID" value="${#TestCase#assertionUUID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set NODE_OID value based on NODE_ID" id="804f902a-b23b-46be-b61a-348f62fc7c2e"><con:settings/><con:config><script>

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def nodeoidGet = new dbUtils.dbNode(log,testProject.getPropertyValue("targetSystem"));

String NODE_ID_ = testCase.getPropertyValue("NODE_ID");
def NODE_OID = null;
switch (NODE_ID_) {
case "dece:cs":
	NODE_OID = "40";
break;
case "coord:cs":
	NODE_OID = "41";
break;
case "RET":
	NODE_OID = "C0CEF8E08CE1C7D6E0401F0A0599120B";
break;
case "RET_CS_1":
	NODE_OID = "CCE44AF42FD7063BE0401F0A07991776";
break;
case "LLASP":
	NODE_OID = "C0CEF8E08CD7C7D6E0401F0A0599120B";
break;
case "LLASP_CS_1":
	NODE_OID = "CCE44AF42FCD063BE0401F0A07991776";
break;
case "DLASP":
	NODE_OID = "C0CEF8E08CDCC7D6E0401F0A0599120B";
break;
case "DLASP_CS_1":
	NODE_OID = "CCE44AF42FD2063BE0401F0A07991776";
break;
case "DSP":
	NODE_OID = "C0CEF8E08CD2C7D6E0401F0A0599120B";
break;
case "DSP_CS_1":
	NODE_OID = "CCE44AF42FC8063BE0401F0A07991776";
break;
case "DEV_CS_1":
	NODE_OID = "CE8BFD2E2DD09BAEE0401F0A07990E42";
break;
case "COO_CS_1":
	NODE_OID = "CCE44AF42FC3063BE0401F0A07991776";
break;
case "CON_CS_1":
	NODE_OID = "CCE44AF42FBE063BE0401F0A07991776";
break;
default:
	NODE_OID = nodeoidGet.nodeoidGetFromNodeId(NODE_ID_);
}

testCase.setPropertyValue("NODE_OID",""+NODE_OID);
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="9f5386c4-9223-4bc3-ac82-ebc767c76e44">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('GET - STS');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");
String XMLbody = "";

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();

rawResp = new ByteArrayOutputStream();

rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;
log.info "PATTY " + strVal.indexOf("&lt;?xml version=\"1.0\" ")

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
if (startAssert > 0) {
	XMLbody  = strVal.substring(startAssert, strVal.length());
}

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Extract Key Elements from &lt;Assertion> Body" id="7ab45758-f8b2-46f7-90ff-ce695beffe49">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");

int lastColon = 0;
int lastSlash = 0;

if (expectErrType == "" || expectErrType == "SUCCESS") {
	tC.setPropertyValue("assertionAccountIdFULL",null);
	tC.setPropertyValue("assertionUserIdFULL",null);
	tC.setPropertyValue("assertionNotBefore",null);
	tC.setPropertyValue("assertionNotOnOrAfter",null);
	tC.setPropertyValue("assertionAudienceRestriction",null);
	tC.setPropertyValue("assertionUserId",null);
	tC.setPropertyValue("assertionAccountId",null);

	
	
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			def accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			def userId    = myXML."saml2:Subject"."saml2:NameID";
			def NotBefore = myXML."saml2:Conditions".@NotBefore.text();
			def NotOnOrAfter = myXML."saml2:Conditions".@NotOnOrAfter.text();
			def AudienceRestriction = myXML."saml2:Conditions".AudienceRestriction;
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";
			this.log.info "NotBefore [$NotBefore]";
			this.log.info "NotOnOrAfter [$NotOnOrAfter]";
			this.log.info "AudienceRestriction [$AudienceRestriction]";
						
			tC.setPropertyValue("assertionAccountIdFULL",accountId.toString());
			tC.setPropertyValue("assertionUserIdFULL",userId.toString());
			tC.setPropertyValue("assertionNotBefore",NotBefore.toString());
			tC.setPropertyValue("assertionNotOnOrAfter",NotOnOrAfter.toString());
			tC.setPropertyValue("assertionAudienceRestriction",NotBefore.toString());
			tC.setPropertyValue("assertionAccountId",accountId.toString().substring(accountId.toString().lastIndexOf(':') + 1).toString());
			tC.setPropertyValue("assertionUserId",userId.toString().substring(userId.toString().lastIndexOf(':') + 1).toString());
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers" id="3cdf8791-46d2-4881-8135-69c4acd96095">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def url = tP.getPropertyValue("targetURL");
def assertionUUID = tC.getPropertyValue("assertionUUID");

def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection = "Keep-Alive";

String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

this.log.info "expectErrType is $expectErrType";
 
if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
	tC.setPropertyValue("expectErrTypeSTSGet",expectErrType);
}


switch (expectErrType) {

	
	case "Forbidden":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "Forbidden";
		errorReason = "Unknown Error";
		break;
	case "FORBIDDEN_INVALID_ROLE":
		errorReason = "forbidden";
		errorID = "urn:dece:errorid:org:dece:securitycontext:Forbidden:1120";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
		break;
	case "FORBIDDEN_INVALID_USER_STATUS":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:InvalidUserStatus";
		errorReason = "User does not have proper status to build token";
		
		break;
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "Forbidden";
		errorReason = "forbidden";
	break;
	case "FORBIDDEN:1119":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1119";
		errorReason = "The request is not authorized.";
	break;
	case "UNAUTHORIZED":
		expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		expectHTTPcontenttype = "text/xml";
		contentLengthZero = true;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = false;
		
	break;
	case "token_rejected":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "text/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:"+expectErrType;
		errorReason = "The request is not authorized.";
		break;
		
	case "unauthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorReason = "The request is not authorized.";
		break;
		
	case "INVALID_ASSERTION":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "text/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:InvalidAssertion";
		errorReason = "The request is not authorized.";
		break;
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	

if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Locationaccount
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

this.log.info "expectErrType [$expectErrType]";

if (dobodyXML) {
	if (XMLbody.length() > 0) {
			def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", ds: "http://www.w3.org/2000/09/xmldsig#");
		if (expectErrType == "SUCCESS") {
			// Verify response sizes...
			this.log.info "Assertion size: " + myXML.size();
			
			assert myXML.size() == 1;
			assert myXML."ds:Signature".size()    == 1;
			assert myXML."ds:Signature"."ds:SignedInfo".size()   == 1;
			assert myXML."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
			assert myXML."ds:Signature"."ds:SignatureValue".size()  == 1;
			//assert myXML."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
			assert myXML."saml2:Subject"."saml2:NameID".size() == 1;
			assert myXML."saml2:Advice"."saml2:AssertionURIRef".size() == 1;
			
			def samlRespNodeAccount = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
				def ExpeAssertionURIRef = "$url/rest/$major/$minor/SecurityToken/Assertion/$assertionUUID";
				
				this.log.info "AssertionURIRef: Expect[$ExpeAssertionURIRef] Received: " + myXML."saml2:Advice"."saml2:AssertionURIRef".toString();
				//assert myXML.Error.Reason.toString() == ExpeAssertionURIRef;
		} else {
			// ErrorCode
			this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
			assert myXML.Error.@ErrorID.toString() == errorID;
	
			// ErrorReason
			
			this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
			assert myXML.Error.Reason.toString() == errorReason;
			
		
			// ErrorLink
			/*
			this.log.info "ErrorLink: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
			assert myXML.Error.ErrorLink.toString() == errorLink;
			*/
		}
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Validate NODE_ACCOUNT row entry" id="eeac7118-9c97-4eef-bcbc-55d5ee92b662">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));

String acct = tC.getPropertyValue("assertionAccountId").toString();
String nodeUser = tC.getPropertyValue("assertionUserId").toString();
String NODE_OID = tC.getPropertyValue("NODE_OID").toString();
String resultsDB = "";

/*
*  If this is a device, adjust the NODE_ID
*/
if (tC.getPropertyValue("isDeviceFlag").toString() == "true") {
	NODE_OID = tP.getPropertyValue("nodeDeviceDefault").toString();
}


String sql = """SELECT 
to_char(rawtohex(ACCOUNT_OID)) ACCOUNT_OID,
to_char(rawtohex(NODE_OID)) NODE_OID 
FROM NODE_ACCOUNT where NODE_ACCOUNT_ID = hextoraw('$acct') 
and NODE_OID = hextoraw('$NODE_OID')""";

try {
	log.info "sql is [$sql]";
	resultsDB = dbUtils.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
} catch (Throwable e) {
	log.info "ERROR - SelectFromDB issue! - $e";
} finally {
	log.info "results is [$resultsDB]";
}

try {
	def myXML = new XmlSlurper().parseText(resultsDB);

	String dbAccountOID = myXML.ResultSet.Row[0].ACCOUNT_OID;
	String dbNodeOID = myXML.ResultSet.Row[0].NODE_OID;
}
catch(Throwable e) {
	log.info "ERROR - XmlSlurper Problem - $e";
}
finally {
	if (tC.getPropertyValue("expectErrTypeSTSGet").toString() == "SUCCESS") {
		log.info "Assert DB ACCOUNT_OID [$dbAccountOID] == [" + tC.getPropertyValue("accountOID") + "]";
		assert dbAccountOID == tC.getPropertyValue("accountOID").toString();

		if (tC.getPropertyValue("actionSkipNodeIDCheck").toString() == "false") {
			log.info "Assert DB NODE_ID [$dbNodeOID] == [$NODE_OID]";
			assert dbNodeOID == NODE_OID;
		}
	} 
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Validate DEVICE_AUTH_TOKEN.STATUS deleted if tokentype:DeviceAuthToken" id="6f162e9b-f60a-4110-b350-3e7d871cea6f">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbutils;

String expectstatus = "deleted";
String dbstatus = "";

if (tC.getPropertyValue("tokentype") == tP.getPropertyValue("urntokenType_deviceauthtoken") &amp;&amp;
	tC.getPropertyValue("actionIgnoreAuthTokenStatus") != "true") {
	if (tC.getPropertyValue("expectErrTypeSTSGet") != "SUCCESS") {
		expectstatus = "active";
	}
	try {
		dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
		dbstatus = dbUtils.deviceAuthTokenGetStatus(tC.getPropertyValue("rauthToken"));	
	}
	catch (Throwable e) {
		log.info "ERROR - dbUtils.deviceAuthTokenGetStatus - $e";
	}
	finally {
		log.info "Asserting dbstatus[$dbstatus] == expectstatus[$expectstatus] - " + 
			tC.getPropertyValue("rauthToken").toString();
		assert dbstatus == expectstatus  ;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Fetch NODE_USER_SAML_ASSERTION Row" id="e9061b5a-516b-4bea-aef7-e8327d607946">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;
def myXML;

tC.setPropertyValue("assertionROW",null);

String arow = "";

if (tC.getPropertyValue("expectErrTypeSTSGet") == "SUCCESS") {
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		String uuid = tC.getPropertyValue("assertionUUID").toString();
		
		/*
		*  Assert we have a location header value..
		*/
		assert uuid.length() > 1;

		log.info "uuid [$uuid]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		arow = dbUtils.samlGetAssertionRow(uuid);

		assert arow.length() > 0;

		log.info "arow is [$arow]";

		tC.setPropertyValue("assertionROW",arow);
	}

	/*
	*  Parse the XML
	*/
	try {
		myXML = new XmlSlurper().parseText(arow);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify only one row was returned..
		*/
		log.info "ASSERT - Row Size is 1";
		assert myXML.ResultSet.Row.size() == 1;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Validate NODE_USER_SAML_ASSERTION.NODE_USER_SAML_ASSERTION matches response body" id="ad3f2ce3-1406-4199-b3c7-5d7fc1706ba4">
        <con:settings/>
        <con:config><script>import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def dbUtils;
def dbUtilsUser;

tC.setPropertyValue("computedAssertionXML",null);
tC.setPropertyValue("dbassertionNodeaccountid",null);
tC.setPropertyValue("dbassertionNodeuserid",null);

String assertionXML = "";
String arow = tC.getPropertyValue("assertionROW");

if (tC.getPropertyValue("expectErrTypeSTSGet") == "SUCCESS") {
	/*
	*  Make sure we have data in arow
	*/
	assert arow.length() > 1;
	
	try {
		myXML = new XmlSlurper().parseText(arow);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify only one row was returned..
		*/
		log.info "ASSERT - Row Size is 1";
		assert myXML.ResultSet.Row.size() == 1;

		String assertRaw = myXML.ResultSet.Row.NODE_USER_SAML_ASSERTION_PART1.text() +
				myXML.ResultSet.Row.NODE_USER_SAML_ASSERTION_PART2.text();

		/*
		*  Base64 decode the assertion clob
		*/
		byte [] xmlBytes = Base64.decode(assertRaw);
		assertionXML = new String(xmlBytes, "UTF8");

		assert assertionXML.length() > 1;

		tC.setPropertyValue("computedAssertionXML", assertionXML);
	}
	/*
	*  Now parse the assertion XML
	*/
	try {
		myXML = new XmlSlurper().parseText(assertionXML).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", saml2p: "urn:oasis:names:tc:SAML:2.0:protocol");
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify the assertion body matches that contained in
		*  NODE_USER_SAML_ASSERTION table
		*/
		log.info "Asserting STSGET Body XML matches NODE_USER_SAML_ASSERTION.NODE_USER_SAML_ASSERTION";
		assert tC.getPropertyValue("computedAssertionXML").toString() == tC.getPropertyValue("computedAssertionXML").toString()
		
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Validate DEVICE_AUTH_TOKEN row" id="69b5436c-13a4-40be-a599-689772ff4a8b">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbutils;

String expectstatus = "deleted";
String dbstatus = "";

if (tC.getPropertyValue("tokentype") == tP.getPropertyValue("urntokenType_deviceauthtoken") &amp;&amp;
	tC.getPropertyValue("actionIgnoreAuthTokenStatus") != "true") {
	if (tC.getPropertyValue("expectErrTypeSTSGet") != "SUCCESS") {
		expectstatus = "active";
	}
	try {
		dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
		dbstatus = dbUtils.deviceAuthTokenGetStatus(tC.getPropertyValue("rauthToken"));	
	}
	catch (Throwable e) {
		log.info "ERROR - dbUtils.deviceAuthTokenGetStatus - $e";
	}
	finally {
		log.info "Asserting dbstatus[$dbstatus] == expectstatus[$expectstatus] - " + 
			tC.getPropertyValue("rauthToken").toString();
		assert dbstatus == expectstatus  ;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="e73c71b1-4cb5-4bf2-a92a-3cfb0f226e95">
        <con:settings/>
        <con:config>
          <script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
//import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	
int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/
byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("assert", base64encodeStr);
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Return extracted Properties back to calling Test Case" id="25419180-51c7-4e30-b226-33ffd571e7dd">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assert",tC.getPropertyValue("assert"));
callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));

String acctID = tC.getPropertyValue("assertionAccountId");
String userID = tC.getPropertyValue("assertionUserId");

if (acctID != null &amp;&amp; acctID.length() > 0) {
	callTC.setPropertyValue("assertionAccountId",acctID.substring(acctID.lastIndexOf(":")+1,acctID.length()));
	callTC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue("assertionAccountIdFULL"));
} else {
	callTC.setPropertyValue("assertionAccountId","ERROR");
}
if (userID != null &amp;&amp; userID.length() > 0) {
	callTC.setPropertyValue("assertionUserId",userID.substring(userID.lastIndexOf(":")+1,userID.length()));
	callTC.setPropertyValue("assertionUserIdFULL",tC.getPropertyValue("assertionUserIdFULL"));
} else {
	callTC.setPropertyValue("assertionUserId","ERROR");
}

if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
	callTC.setPropertyValue("NODE_ACCOUNT_ID",acctID.substring(acctID.lastIndexOf(":")+1,acctID.length()));
	callTC.setPropertyValue("NODE_USER_ID",userID.substring(userID.lastIndexOf(":")+1,userID.length()))
	callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("assertionAccountIdFULL"));
	callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("assertionUserIdFULL"));
}else{
	callTC.setPropertyValue("NODE_ACCOUNT_ID",acctID.substring(acctID.lastIndexOf(":")+1,acctID.length()));
	callTC.setPropertyValue("NODE_USER_ID",userID.substring(userID.lastIndexOf(":")+1,userID.length()))
	callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",URLEncoder.encode(tC.getPropertyValue("assertionAccountIdFULL"), "UTF-8"));
	callTC.setPropertyValue("NODE_USER_ID_FULL",URLEncoder.encode(tC.getPropertyValue("assertionUserIdFULL"), "UTF-8"));
}
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Save the Request &amp; Response with TC Name" disabled="true" id="829cb87b-d2c5-4c98-ae72-015fc3a5838c"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep = tC.getTestStepByName('GET - STS');

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def myP = testRunner.testCase.testSuite.project.name;

def tName = context.expand( '${#TestCase#tName}' );

def logFile = new File(projectPath +"\\"+myP +"\\"+tName+".txt")
logFile.append("Request:\n");

def req= context.expand('${GET - STS#Request}')
log.info messageExchange.getRawRequestData();
logFile.append(req);
log.info "Request: "+req;

logFile.append("\n\nResponse:\n");
res = new ByteArrayOutputStream();
def res = tStep.httpRequest.response.getRawResponseData();;
 strVal  = new String(res);

logFile.append(strVal);
log.info "Response: "+strVal;</script></con:config></con:testStep><con:properties>
        
        
        <con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E9CCDA629108841EE0401F0A0799029D</con:value></con:property><con:property><con:name>actionAuthHeader</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionDeviceAuthHeader</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>actionIgnoreAuthTokenStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionSkipNodeIDCheck</con:name><con:value>false</con:value></con:property><con:property><con:name>actionSkipNodeUserCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affilNODE_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZdc6JKEH3fX0GRxy0EBCNQ0Srix4Z8aTTJmrzcGodGJwuDYQY1+fV3BgNRY3Kz94mapqf7dPeZM3PCUBLXPZ8xyDhJqRJ0W+o/Rug4DWtqa83IAc22LaQ5bqOhmQ3sGK5lWtF0qioBYzkElHFEeUutG6almYZWd27NumeYXt2oGa7xqCr3kDERWrjUDFVZJzFlXpG2peYZ9VLECPMoSoB5HHtj/+rSE54eKjGp7ZMNyiJh1p5zvvB0HddCwBDHuIbTRD/Rd3xOQuaNyYwinmfwljNkLfVt72q1qq2sWprN9LphGLrh6sInZGR2pLZ/lJshDGiUbtYdRFNKMIrJK5KgroDP01Dx41maET5PPglt6qYhQ2uwxho2bXqk6u8JCnTfjLQDMmNIY3NklsFGEEEGFINyNwpa6tH3JrjZe5shyqI0S9je+u8gAV1CnC4g1FhZWYnu+xEPtKt9AtgLKI5zRpZwLWmyQBiYMswgIutLwgT5QqYU41fWrGQY4L8ZyYm+jVPA1g90pktmwPj/mdf2rDZR7lGcQ7tzfkrO7LxJlws2tYPwOLqoZ7q/vJ74rQLCtvMGVDXqt/U+UStevW3KqD7R0/5q7JDz0cvjGdxfLGfWeH1BIjrOp4bTe01Hd+wh+qn/7pkUXU/IdNjsj7Mwc/mVs/RvHvCz8/oQdn82f0SR8zj81XXtl85jdHbxMHbc/hNCg/OrZhLns9tkfPmrm6yI4RsrNBi8Dv9MYHDz2Hm658N+g5v2KHAmg9un5/Ng+ANBP+Nnjenv6eQmxme9tX3Xeq9pu4ZdYykHAv0TYF4uJTWCrtIX80L8a2mRFhJqUeHqLaQ+MQ6Uq225S8qKlwvxIaEnhrlZ99xOp+s3eqeW4frNZqNn2IbZF3U2Xdeo+91SfzYo9iB2UhoRmUsq7IY/XwPEiceAhpBpyzTHc2DqFxG7iCMloCNxMFLK4DYVCm71G1bf9k3LNZq+a3Ysu+/3LNN1rf7xcdfuqsp1ygd0kPkRh2xXvRs76j0CTBYEpMRLnjNBdMZFS57RMuexWVuiGoVcXAKZ1GGvbjsNnZFkEYMErCdpmMdQW8wXRYN0tvnWNYRZYcVpmoUeZsUh/LTG/X9lO4RPSKQDkwWdghgpHLiLzLKaD1XbB++sMryfh0SeNdFbnhG8QbL7650ykisVX8qyStyV+75hJ7S+X1WVLVwSXDG/uq6F2gs9aJeDeUa151q+XObFKJpS6zIRXjd1o6mPAedCsF5u0z9A9SqE/q27okK9l7my7+LL+ZyOOeKQCOIoxfIbD4UxMPlQCATx1999heykFH3jsOaHbJ1YvCck4i+fHNjD0k+Yh+KzEiN8H9eBWFt5RJ3idcAJncmVvBlevmIGEVKWZtvBDwU4lHzXWDW5wsIFm6Y5h8//KFKjWirCOM0pD6QWCMO2bhY4+csCvHenD2EKbX67bNfs08t2cnU5FgqWILXyJf/trJGCLhjELkYKLC11Ld6NIjmdben0G8CPUn1cd03j2LHN3q5Uu5VU71bS/mD+aNnq6f55aP8L</con:value></con:property><con:property><con:name>assertCreatingNodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value>_0d8853b4-7f8e-443a-8955-15c809313fbb</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E9CCDA629106841EE0401F0A0799029D</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:E9CCDA629106841EE0401F0A0799029D</con:value></con:property><con:property><con:name>assertionAudienceRestriction</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2013-10-28T12:01:10.090Z</con:value></con:property><con:property><con:name>assertionNotBefore</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2013-10-28T12:01:10.090Z</con:value></con:property><con:property><con:name>assertionNotOnOrAfter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2014-10-28T12:01:20.090Z</con:value></con:property><con:property><con:name>assertionROW</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <NODE_USER_SAML_ASSERTION_OID>E9CCDA4AA5586225E0401F0A05994D78</NODE_USER_SAML_ASSERTION_OID>
      <NODE_OID>41</NODE_OID>
      <NODE_USER_SAML_ASSERTION_PART1>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHNhbWwycDpSZXNwb25zZSBDb25zZW50PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDpwcmlvciIgRGVzdGluYXRpb249Imh0dHBzOi8vc3RkZWNxYXZ1dGwxLnZhLm5ldXN0YXIuY29tOjI0ODUvc2ltcGxlc2FtbC9tb2R1bGUucGhwL3NhbWwvc3Avc2FtbDItYWNzLnBocC9jb29yZDpjcyIgSUQ9Il8yMTJlZjMzNS0yYTAwLTRlODctYWZhZC1lNDY5NDQwODA3NTAiIEluUmVzcG9uc2VUbz0iXzNGNTNGNEExMzkwN0E5MUMzNEZBRTMxOTkzRjY2RDREIiBJc3N1ZUluc3RhbnQ9IjIwMTMtMTAtMjhUMTI6MDE6MjAuMDkwWiIgVmVyc2lvbj0iMi4wIiB4bWxuczpzYW1sMnA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCI+PHNhbWwyOklzc3VlciB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+aHR0cDovL2MuZGVjZWxsYy5jb20vPC9zYW1sMjpJc3N1ZXI+PHNhbWwycDpTdGF0dXM+PHNhbWwycDpTdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOlN1Y2Nlc3MiLz48L3NhbWwycDpTdGF0dXM+PHNhbWwyOkFzc2VydGlvbiBJRD0iXzBkODg1M2I0LTdmOGUtNDQzYS04OTU1LTE1YzgwOTMxM2ZiYiIgSXNzdWVJbnN0YW50PSIyMDEzLTEwLTI4VDEyOjAxOjIwLjA5MFoiIFZlcnNpb249IjIuMCIgeG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPjxzYW1sMjpJc3N1ZXI+aHR0cDovL2MuZGVjZWxsYy5jb20vPC9zYW1sMjpJc3N1ZXI+PGRzOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+CjxkczpTaWduZWRJbmZvPgo8ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPgo8ZHM6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIi8+CjxkczpSZWZlcmVuY2UgVVJJPSIjXzBkODg1M2I0LTdmOGUtNDQzYS04OTU1LTE1YzgwOTMxM2ZiYiI+CjxkczpUcmFuc2Zvcm1zPgo8ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiLz4KPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyI+PGVjOkluY2x1c2l2ZU5hbWVzcGFjZXMgUHJlZml4TGlzdD0iZHMgc2FtbDIgeHMiIHhtbG5zOmVjPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48L2RzOlRyYW5zZm9ybT4KPC9kczpUcmFuc2Zvcm1zPgo8ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiLz4KPGRzOkRpZ2VzdFZhbHVlPkNKQmlINHU3bnZwc2I0SWQ2Zksyci9Bdk5YQT08L2RzOkRpZ2VzdFZhbHVlPgo8L2RzOlJlZmVyZW5jZT4KPC9kczpTaWduZWRJbmZvPgo8ZHM6U2lnbmF0dXJlVmFsdWU+CnJuL1gvb0Z3UzhpSlJ5WkhlVkt2ZzNTeEtpZm5TdWIwOEV6b1JVc1lmKy9XRTFuYU5YaWJQN0ZTcmRyOXRNOHZBUVljcTh6WWREKzcKZmY4WlBHRDk0eUNaZkhLWVM4OUZqYWFPSk03bWx1Z1RtU0xHRG13aTBBMHdhT096UGtYZU9RWkNqVnRQRjV0MTRSSThYT1RqcUpJUAphZUZydEg1YldiWFFsY0hFeDRVPQo8L2RzOlNpZ25hdHVyZVZhbHVlPgo8L2RzOlNpZ25hdHVyZT48c2FtbDI6U3ViamVjdD48c2FtbDI6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOm5hbWVpZC1mb3JtYXQ6cGVyc2lzdGVudCI+dXJuOmRlY2U6dXNlcmlkOm9yZzpkZWNlOkU5Q0NEQTVFQjMwOUE3NzVFMDQwMUYwQTA3OTkwMkFEPC9zYW1sMjpOYW1lSUQ+PHNhbWwyOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206c2VuZGVyLXZvdWNoZXMiPjxzYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uRGF0YSBJblJlc3BvbnNlVG89Il8zRjUzRjRBMTM5MDdBOTFDMzRGQUUzMTk5M0Y2NkQ0RCIgTm90T25PckFmdGVyPSIyMDEzLTEwLTI4VDE1OjAxOjIwLjA5MFoiIFJlY2lwaWVudD0iaHR0cHM6Ly9zdGRlY3FhdnV0bDEudmEubmV1c3Rhci5jb206MjQ4NS9zaW1wbGVzYW1sL21vZHVsZS5waHAvc2FtbC9zcC9zYW1sMi1hY3MucGhwL2Nvb3JkOmNzIi8+PC9zYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uPjwvc2FtbDI6U3ViamVjdD48c2FtbDI6Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMTMtMTAtMjhUMTI6MDE6MTAuMDkwWiIgTm90T25PckFmdGVyPSIyMDE0LTEwLTI4VDEyOjAxOjIwLjA5MFoiPjxzYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPjxzYW1sMjpBdWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6Y29vcmQ6Y3M8L3NhbWwyOkF1ZGllbmNlPjwvc2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48L3NhbWwyOkNvbmRpdGlvbnM+PHNhbWwyOkFkdmljZT48c2FtbDI6QXNzZXJ0aW9uVVJJUmVmPmh0dHBzOi8vcWEucS51dnZ1LmNvbTo3MDAxL3Jlc3QvMS8wNy9TZWN1cml0eVRva2VuL0Fzc2VydGlvbi9fMGQ4ODUzYjQtN2Y4ZS00NDNhLTg5NTUtMTVjODA5MzEzZmJiPC9zYW1sMjpBc3NlcnRpb25VUklSZWY+PC9zYW1sMjpBZHZpY2U+PHNhbWwyOkF1dGhuU3RhdGVtZW50IEF1dGhuSW5zdGFudD0iMjAxMy0xMC0yOFQxMjowMToyMC4wOTBaIiBTZXNzaW9uSW5kZXg9Il8wZDg4NTNiNC03ZjhlLTQ0M2EtODk1NS0xNWM4MDkzMTNmYmIiPjxzYW1sMjpBdXRobkNvbnRleHQ+PHNhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOlBhc3N3b3JkPC9zYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj48c2FtbDI6QXV0aGVudGlj</NODE_USER_SAML_ASSERTION_PART1>
      <NODE_USER_SAML_ASSERTION_PART2>YXRpbmdBdXRob3JpdHk+dXJuOmRlY2U6b3JnOm9yZzpkZWNlOmNvb3JkaW5hdG9yPC9zYW1sMjpBdXRoZW50aWNhdGluZ0F1dGhvcml0eT48L3NhbWwyOkF1dGhuQ29udGV4dD48L3NhbWwyOkF1dGhuU3RhdGVtZW50PjxzYW1sMjpBdHRyaWJ1dGVTdGF0ZW1lbnQ+PHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJhY2NvdW50SUQiIE5hbWVGb3JtYXQ9InVybjpkZWNlOnR5cGU6YWNjb3VudElEIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj51cm46ZGVjZTphY2NvdW50aWQ6b3JnOmRlY2U6RTlDQ0RBNjI5MTA2ODQxRUUwNDAxRjBBMDc5OTAyOUQ8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjwvc2FtbDI6QXR0cmlidXRlU3RhdGVtZW50Pjwvc2FtbDI6QXNzZXJ0aW9uPjwvc2FtbDJwOlJlc3BvbnNlPg==</NODE_USER_SAML_ASSERTION_PART2>
      <NODE_USER_SAML_UUID>_0d8853b4-7f8e-443a-8955-15c809313fbb</NODE_USER_SAML_UUID>
      <CREATED_DATE>2013-10-28 12:01:20.0</CREATED_DATE>
      <NODE_USER_ID>E9CCDA5EB30DA775E0401F0A079902AD</NODE_USER_ID>
      <NODE_ACCOUNT_ID>E9CCDA62910B841EE0401F0A0799029D</NODE_ACCOUNT_ID>
      <STATUS>active</STATUS>
      <EXPIRATION_DATE>2014-10-28 12:01:20.0</EXPIRATION_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E9CCDA5EB309A775E0401F0A079902AD</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:E9CCDA5EB309A775E0401F0A079902AD</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_0d8853b4-7f8e-443a-8955-15c809313fbb</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authHeaderString</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authHeaderValue</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        
        
        
        <con:property><con:name>computedAssertionXML</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2p:Response Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/coord:cs" ID="_212ef335-2a00-4e87-afad-e46944080750" InResponseTo="_3F53F4A13907A91C34FAE31993F66D4D" IssueInstant="2013-10-28T12:01:20.090Z" Version="2.0" xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol"><saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">http://c.decellc.com/</saml2:Issuer><saml2p:Status><saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/></saml2p:Status><saml2:Assertion ID="_0d8853b4-7f8e-443a-8955-15c809313fbb" IssueInstant="2013-10-28T12:01:20.090Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_0d8853b4-7f8e-443a-8955-15c809313fbb">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>CJBiH4u7nvpsb4Id6fK2r/AvNXA=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
rn/X/oFwS8iJRyZHeVKvg3SxKifnSub08EzoRUsYf+/WE1naNXibP7FSrdr9tM8vAQYcq8zYdD+7
ff8ZPGD94yCZfHKYS89FjaaOJM7mlugTmSLGDmwi0A0waOOzPkXeOQZCjVtPF5t14RI8XOTjqJIP
aeFrtH5bWbXQlcHEx4U=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:E9CCDA5EB309A775E0401F0A079902AD</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_3F53F4A13907A91C34FAE31993F66D4D" NotOnOrAfter="2013-10-28T15:01:20.090Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/coord:cs"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2013-10-28T12:01:10.090Z" NotOnOrAfter="2014-10-28T12:01:20.090Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:coord:cs</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_0d8853b4-7f8e-443a-8955-15c809313fbb</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2013-10-28T12:01:20.090Z" SessionIndex="_0d8853b4-7f8e-443a-8955-15c809313fbb"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:E9CCDA629106841EE0401F0A0799029D</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></saml2p:Response>]]></con:value></con:property><con:property><con:name>connection</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>2929</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentType</con:name><con:value>text/xml;charset=UTF-8</con:value></con:property><con:property><con:name>currentDBTOD</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2013/10/28 12:01:21</con:value></con:property>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>dbassertionNodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dbassertionNodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dbCreateExpireHoursDiff</con:name><con:value>723</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <DIFFERENCE_HOURS>720</DIFFERENCE_HOURS>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>deviceAuthHeaderValue</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deviceAuthToken</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectNodeUserRowCount</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>isDeviceFlag</con:name><con:value>false</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/soapUIProjects/STSAPIProjects_LP1/coordcs_concat.pem</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>NODE_IDFULL</con:name><con:value>urn:dece:org:org:dece:coord:cs</con:value></con:property><con:property><con:name>NODE_OID</con:name><con:value>41</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>86717</con:value></con:property><con:property><con:name>rauthToken</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>7_STS Create and SAML Exchange - Node Role - with and without ULC</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>stsaudience</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsaudienceIgnoreAll</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsaudienceIgnoreNodes</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsExpectedAffiliationListSize</con:name><con:value>1</con:value></con:property><con:property><con:name>stsIgnoreAssertTimesFlag</con:name><con:value>false</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_17024 - SAMLExchange - Coordinator:CS - unamepasswd - with and without ULC - P1</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:saml2</con:value></con:property><con:property><con:name>username</con:name><con:value>stsapi_107_1382961674721</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E9CCDA5EB30BA775E0401F0A079902AD</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_0d8853b4-7f8e-443a-8955-15c809313fbb" IssueInstant="2013-10-28T12:01:20.090Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_0d8853b4-7f8e-443a-8955-15c809313fbb">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>CJBiH4u7nvpsb4Id6fK2r/AvNXA=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
rn/X/oFwS8iJRyZHeVKvg3SxKifnSub08EzoRUsYf+/WE1naNXibP7FSrdr9tM8vAQYcq8zYdD+7
ff8ZPGD94yCZfHKYS89FjaaOJM7mlugTmSLGDmwi0A0waOOzPkXeOQZCjVtPF5t14RI8XOTjqJIP
aeFrtH5bWbXQlcHEx4U=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:E9CCDA5EB309A775E0401F0A079902AD</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_3F53F4A13907A91C34FAE31993F66D4D" NotOnOrAfter="2013-10-28T15:01:20.090Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/coord:cs"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2013-10-28T12:01:10.090Z" NotOnOrAfter="2014-10-28T12:01:20.090Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:coord:cs</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_0d8853b4-7f8e-443a-8955-15c809313fbb</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2013-10-28T12:01:20.090Z" SessionIndex="_0d8853b4-7f8e-443a-8955-15c809313fbb"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:E9CCDA629106841EE0401F0A0799029D</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>3286f6f3-da45-4264-9ee2-bc03b02c4214</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateULCatOrg" searchProperties="true" id="c346ead8-2b32-4b54-9d83-7062a070b5e8"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a9ef3495-5c58-4b74-889d-e82919dc4b52"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("orgid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="cc78a2e0-c861-4fcc-b004-a724c1ec6b6c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));

if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:UserLinkConsent");
}else{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:UserLinkConsent", "UTF-8"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="81f91284-d1f1-4902-94b3-e43be8dcd778"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID_",tC.getPropertyValue("NODE_ID_"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_ULC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ULC" id="11fcdfe6-6bb3-43eb-8983-87817adc609e"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ULC" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml;charset=UTF-8"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:o:ISC_R1</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:originalUri>https://qa1.p.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:16E4763A53C53362E05305991F0A92B5/User/urn:dece:userid:org:dece:16E494DAE5B460A7E05307991F0A2456/Policy/urn:dece:type:policy:UserLinkConsent</con:originalUri><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="7100663c-970f-4314-9956-73677cfb5f0b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_ULC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                               log.info "versionMinor: "+tP.getPropertyValue("versionMinor");
			if (tP.getPropertyValue("versionMinor")!="02"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="9f1433ee-4a49-4e5d-ab1d-cf5eb6534073">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZXzlYlegigSYOEMuE7IkmZctIbdBiS07lmxMvn4lAx5MQpbdJ5fare7T3UdHOmMoCk13wBiknMS0UUQhZW5p7SlZSt0YMcJciiJgLsfudHA9cc2m7qLdFqXhDXvK3z44gWO22irSu45q635XdaxOWwXdsR3LacEct4UrYxl4lHFEeU8xdaOl6m3V0B902zUtVzebtm3/VhozSJmILVyaurIFVbCesuQ8cTVttVo1V1YzTheaqeuG9nQ9meIlREjpn20qKhOl/a0/bvqAIQxxE8eRdqbVfM585k7JgiKepbDN5R/LpWu6owkfn5HFN6XaC75Hg7hcXiAaU4JRSN6R7M818GXsNwbhIk4JX0ZHizB0GViFAqvYsOk3RatDOzFQDWHKkMqWyNjGuocAUqAYGn/dez3l22lTK7c+pIiyIE4jVl/+NzxAcwjjBHyV7craQjs94Ced6p8Bdj2Kw4yRHG4kWROEgW2nCfj0UI27FAJSTAgTBC2YRKftwztYbroxJAtg/P8MaG84myAzFGbQH01/vdPJlfWWzWfjaTq8/rkIvl+Zq2X43CsB7DuXhmq0m+UBKSsSbXYk7WcUPHUza5GszWJ5ObmgvjF99LLoN550PbNop4/Dx4fuj7x4esz1VTQZt38P22m0bt38+jGfjHPfsJ6Mn8/e22UrD2y+npPv78XMuHU86/XunE8snHVnrTvMzs0xsy/10cs6DC6dAiet5ftL0Rq9aEPrfH5t2k9XPzrPne+JHQ2uPJQP28Hd28WzP5uNr0avN9e9qpw9/HXb7sxPs/kLYL5bShp4w8ZYTAnxr8VMWoivBqWrm0jxYRwoV/pyl9QONxNyR3xXzHCzNrqmObaM7njQHrQ7nfFIb1nWyHGMsT6wuhfnO5HZoDiAeBHTgMhcUnI3tPkaII5cBtSHVM3jTCgdU76IOEQcNTx6Lw5BTBk8xEKeDbx47a6tzjoOkijDGHesIrJeaUdp3MT8lt6mg4BDWtfkTk2T7wGThIAUbslrJojNuOjFG8ozHhrNHDUpZELaU6myrml3WxojURKCRKpFsZ+F0EyWSdkZjW2+poowK633o4fytB2t6/DfrgXCxyfSgclazkGMET5cLqbb2hVytGBD3y94F36Q+UQeLNFPnhK8QVL/9Ycmkh8VR0RFO8iV56GhFlU7LKhK5OcEV0Svrmuh4uLc93fjeENG862Z5XlWTsC2LS0V4TUhc4Y2BZwJWVo/xK9AtSqEdtIdUKE+yFzZ6/gyvqRTjjhEgi6NcnnCpT8FJi99T/C8OPVFUUsp+sah4J/ZLkLxYJGIv3zTYBdLP2G+E59VnPp/xvVJrL08ok5x53NCF3Il9X99hBQ4FmGJUK443Q/+WYDPkteNVZMrLFywaZ5xOP6nISWppyCM44xyb6iUhn2ZLHHydQLuH6cPYUolrp5m5N/fZiopKYBBPOgYKePLG9aV/KeLPandJj2its5XaltH1/9g/mjZ69Mhx/v/AA==</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_012_DTCreate_with_ULC_at_Org_level_Requesting_with_other_node_of_same_Org</con:value></con:property><con:property><con:name>sName</con:name><con:value>3_DTCreate_and_SAML_Exchange_FUNC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>1822F318FA6A677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1822F318FA69677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value>close</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D14403889CD0F3ECE0401F0A07992161/User/urn:dece:userid:org:dece:D14403889CDFF3ECE0401F0A07992161/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>policyId</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value>https://qa1.q.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:1822F318FA69677FE0533E991F0A38CB/User/urn:dece:userid:org:dece:1822F318FA6A677FE0533E991F0A38CB/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3DD6C150D6CC4DCE0401F0A0799470D</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE4D9E9DDA3FB1E89E0401F0A05991315</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE4D9D8CD0B0653EFE0401F0A079928E2</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>orgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:1822F318FA6A677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1822F318FA69677FE0533E991F0A38CB</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Flush User Assertion data for Device" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="737c2f47-7317-404b-9cf1-314e536c8474">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="b0b65a0b-a971-4997-94e2-7de39304e6bd">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",null);
tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeDeviceDefault"));
tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("expectNodeUserRowCount",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properities" id="ddb7fb15-6b01-45f5-a67d-43a521eb30ad">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("USER_OID",callTC.getPropertyValue("USER_OID"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("expectNodeUserRowCount",callTC.getPropertyValue("expectNodeUserRowCount"));


if (tC.getPropertyValue("expectNodeUserRowCount") == null || tC.getPropertyValue("expectNodeUserRowCount") == "null") {
	tC.setPropertyValue("expectNodeUserRowCount","1");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Delete NODE_USER_SAML_ASSERTION and NODE_USER rows" id="b2c52090-a28c-4796-9cd5-5c24c2af5523">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
Boolean delSamlNodeRows = true;
String rowoid = null;
String nodeSamlNodeUserId = null;
String NODE_OID = nodeoidGet.nodeoidGetFromNodeId(tC.getPropertyValue("NODE_ID").toString());
String USER_OID = tC.getPropertyValue("USER_OID");
String sql = """select to_char(rawtohex(ROW_OID)) ROW_OID from NODE_USER where USER_OID = hextoraw('$USER_OID') and NODE_OID = hextoraw('$NODE_OID')""";

log.info sql;

try {
	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR during a.SelectFromDB - $e";
}
finally {
	log.info sql;
	log.info results;
}

if (!results.isEmpty()) {
	try {
		myXML = new XmlSlurper().parseText(results);
	}
	catch (Throwable e) {
		log.info "Error during XmlSlurper - $e";
	}
	finally {
		def rowsReturned = myXML.ResultSet.Row.size();
		def oids = myXML.ResultSet.Row;

		log.info "rowsReturned - $rowsReturned";

		for (oid in oids.ROW_OID) {
			log.info "oid is " + oid;
			sql = "DELETE NODE_USER_SAML_ASSERTION where " +
				"NODE_USER_ID = '" + oid + "'";
			try	{	
				rc = a.dbConnExecuteUpdate(sql);
						
				if(rc != 0) {
					log.info "Error - Could not delete OID: "  + oid;
					log.info "Error - SQL: " + sql;
				} 
			}
			catch(Throwable e) {
				log.info "ERROR during a.dbConnExecuteUpdate - $e";
			}
			
			/*
			*  Now remove the NODE_USER row
			*/
			sql = "DELETE NODE_USER where " +
				"ROW_OID = '" + oid + "'";
			try	{	
				rc = a.dbConnExecuteUpdate(sql);
						
				if(rc != 0) {
					log.info "Error - Could not delete NODE_USER OID: "  + oid;
					log.info "Error - SQL: " + sql;
				} 
			}
			catch(Throwable e) {
				log.info "ERROR during a.dbConnExecuteUpdate - $e";
			}
		}
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Delete NODE_ACCOUNT rows" id="b33bc04e-dba0-4eff-9fd5-8dea38bf6f90">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

Boolean delSamlNodeRows = true;
String rowoid = null;
String nodeSamlNodeUserId = null;
String NODE_ID = tC.getPropertyValue("NODE_ID");
String accountoid = tC.getPropertyValue("accountoid");
String sql = """DELETE from NODE_ACCOUNT where NODE_OID = hextoraw('$NODE_ID')
  and ACCOUNT_OID = hextoraw('$accountoid') 
""";

log.info sql;

try {
	results = a.DeleteFromDB(sql,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.error e;
	assert 1 == 2;
}
finally {
	log.info sql;
	log.info results;
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify no NODE_USER_SAML_ASSERTION rows exist for node/user" id="a1f20801-e462-4a2a-acb1-71cb6a903e4d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Verify no Node/User Assertion Data Exists")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>username</con:name>
          <con:value>fulluname_1380608752247</con:value>
        </con:property>
        <con:property>
          <con:name>NODE_ID</con:name>
          <con:value>0200</con:value>
        </con:property>
        <con:property>
          <con:name>USER_OID</con:name>
          <con:value>E7A8459750DC223DE0401F0A05993AC8</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>E7A8695EC9915197E0401F0A05993AF9</con:value>
        </con:property>
        <con:property>
          <con:name>expectNodeUserRowCount</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_32037 - STS GET BasicAuth - Device - Fifty Repetitive Assertions for full user no existing assertion status blocked:tou - P2</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>17_STS GET Basic Auth - Device Role - P2 - Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86733</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verify no Node/User Assertion Data Exists" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="423a5370-5687-46f0-a396-28ce6cd8a249">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="1bfc36cc-d646-46c7-abbb-37ccc60b0a94">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("accountoid",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properities" id="d5625a9c-c619-4c6d-b957-56d019b5c72e">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("USER_OID",callTC.getPropertyValue("USER_OID"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify no NODE_USER_SAML_ASSERTION rows for Node/User" id="d8dfe647-425f-4eab-9806-0ba10732b274">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
int nodeSamlRowCount = 1;
String NODE_OID = nodeoidGet.nodeoidGetFromNodeId(tC.getPropertyValue("NODE_ID").toString());
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String accountoid = tC.getPropertyValue("accountoid");
String USER_OID = tC.getPropertyValue("USER_OID");
String results = null;

String sql = """SELECT count(NODE_USER_SAML_ASSERTION_OID) as CNT from NODE_USER_SAML_ASSERTION where
  NODE_OID = hextoraw('$NODE_OID') and NODE_USER_ID = hextoraw((select ROW_OID from NODE_USER where NODE_OID = hextoraw('$NODE_OID') 
  and USER_OID = hextoraw('$USER_OID')))
  """;

try {
	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));

	myXML = new XmlSlurper().parseText(results);
	
	if (myXML.ResultSet.Row.size() == 1) {
		nodeSamlRowCount = myXML.ResultSet.Row.CNT.text().toInteger();
	} else {
		nodeSamlRowCount = 1;
	}
}
catch(Throwable e) {
	log.error e;
	assert 1 == 2;
}
finally {
	log.info sql;
	log.info results;
	log.info "nodeSamlRowCount[$nodeSamlRowCount]";

	assert nodeSamlRowCount == 0;
}
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_12023 - STSCreate - retailer - saml2 - FORBIDDEN - NULL &lt;password> value - P1</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>2_STS Create Tokentype saml2 - Payload</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1382960888810</con:value>
        </con:property>
        <con:property>
          <con:name>NODE_ID</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>USER_OID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E9CC9B97FE92F341E0401F0A07993491</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E9CC92C4C5BACBE3E0401F0A07991C69</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Flush Node/User Assertion Data" searchProperties="true" id="75382888-b032-407f-81bb-1929e739debd"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7b142d9a-02e6-4d15-a6ab-7099eea782e5"><con:settings/><con:config><script>	def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodelist = tP.getPropertyValue("nodeIdRTL").toString() +
	"," +
	tP.getPropertyValue("nodeIdAccportal").toString() +
	"," +
	tP.getPropertyValue("nodeIdDLASP").toString() +
	"," +
	tP.getPropertyValue("NODE_ID_Device").toString() +
	"," +
	tP.getPropertyValue("nodeIdportal").toString() +
	"," +
	tP.getPropertyValue("nodeIdLLASP").toString();

log.info "nodelist[$nodelist]";
	
tC.setPropertyValue("username",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("expectNodeUserRowCount",null);
tC.setPropertyValue("nodelist",nodelist);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properities" id="257922d3-7cb1-443c-8b59-acda251fb916"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("USER_OID",callTC.getPropertyValue("USER_OID"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Delete NODE_USER_SAML_ASSERTION rows" id="a8848ada-8b3c-44ac-b878-608729d44ae0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String nodelist = tC.getPropertyValue("nodelist").toString();
String NODE_ID = tC.getPropertyValue("NODE_ID");
String USER_OID = tC.getPropertyValue("USER_OID");
int results = 0;
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
assert nodelist.length() > 0;
assert nodelist != 'null';

List nodeList = nodelist.tokenize(",");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	
	log.info "It: $it";
	String NODE_OID = nodeoidGet.nodeoidGetFromNodeId("$it");
	String sql = """DELETE from NODE_USER_SAML_ASSERTION where NODE_OID = hextoraw('$NODE_OID')
  		and NODE_USER_ID = (select ROW_OID from NODE_USER where USER_OID = hextoraw('$USER_OID') 
  		and NODE_OID = hextoraw('$NODE_OID'))""";

  	log.info sql;

  	try {
  		dbUtils = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem"));
		results = dbUtils.DeleteFromDB(sql);
	}
	catch(Throwable e) {
		log.error "ERROR! - dbUtils.DeleteFromDB - $e";
	}
	finally {
		//log.info sql;
		log.info "result[$results]";
	}
}
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_06065 - STS - Device - Fifty Repetitive Assertions for full user no existing assertion status pending - P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>15_STS Create Tokentype usernamepassword - Device Role - P2 - Test Cases</con:value></con:property><con:property><con:name>username</con:name><con:value>fulluname_1380608019811</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>USER_OID</con:name><con:value>E7A84597307B223DE0401F0A05993AC8</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>E7A792C2ABEE3CE5E0401F0A05993AD0</con:value></con:property><con:property><con:name>expectNodeUserRowCount</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodelist</con:name><con:value>7600,70007000,40004000,,90009000,80008000</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STSCreate" searchProperties="true" id="1ca5b122-27ce-47a0-b328-96ea2874673d">
      <con:settings/>
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="07caf2a1-2707-4ce7-901b-a1976b3069cd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID", null);
tC.setPropertyValue("Username", null);
tC.setPropertyValue("UserPassword", null);
tC.setPropertyValue("audienceList", null);


</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="3b258657-c873-4422-826b-d245fccd4604">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

tC.setPropertyValue("tokenType", tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("NODE_ID", callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("Username", callTC.getPropertyValue("Username"));
tC.setPropertyValue("UserPassword", callTC.getPropertyValue("UserPassword"));
tC.setPropertyValue("audienceList", callTC.getPropertyValue("audienceList"));
</script></con:config>
      </con:testStep>
      
      
      
      <con:testStep type="groovy" name="Call Set PEM File" id="5433e139-b3f4-41af-adc5-2fcfc0105ea9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem");
myTC.setPropertyValue("NODE_ID",tC.getPropertyValue("NODE_ID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - STSCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="POST - STSCreate" id="7d558c40-0117-43ee-8c91-3ec63b1700bb"><con:settings/><con:config service="STSCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STSCreate" mediaType="application/xml" postQueryString="false" id="131ccdfb-cb62-4292-814f-8669c04a2b3a" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
<Credentials xmlns="${#Project#coordinatorSchema}">
  <Username>${#TestCase#Username}</Username> 
  <Password>${#TestCase#UserPassword}</Password> 
</Credentials>]]></con:request><con:originalUri>https://qa1.p.uvvu.com/rest/1/11/SecurityToken/SecurityTokenExchange</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Status" id="474f77f2-2faa-401c-aa03-611fc84e1129"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Details" id="ba6c2d55-65af-440a-a348-1736c83db646">
        <con:settings/>
        <con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def testStep = testCase.getTestStepByName('POST - STSCreate');
httpBody = testStep.httpRequest.response.getResponseContent().toString();

try
{
	contentLocation = testStep.httpRequest.response.responseHeaders["Location"];
}
catch(Throwable e)
{
	log.info e;
}

def contentLocationURL = contentLocation[0].toURL();
def contentLocationURLPath = contentLocationURL.getPath();

String versionMajor = context.expand('${#Project#versionMajor}');
String versionMinor = context.expand('${#Project#versionMinor}');
String restVersion = "rest/" + versionMajor + "/" + versionMinor;

assert contentLocationURLPath.matches("/" + restVersion + "/SecurityToken/Assertion/[_,0-9,A-F,a-z,-]*");
	
int lastColon = contentLocationURLPath.lastIndexOf(':');
int lastSlash = contentLocationURLPath.lastIndexOf('/');
assertionUUID = contentLocationURLPath.substring(lastSlash + 1);

testCase.setPropertyValue("assertionUUID", assertionUUID);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return Properties to Calling Test Case" id="5c00a02e-4ac1-4d38-ad81-5bafb19d494e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

callTC.setPropertyValue("assertionUUID", tC.getPropertyValue("assertionUUID"));
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>tName</con:name><con:value>TC_DECE_004_DTCreate_Verify_UUID_status_for_deletion_of_ULC</con:value></con:property><con:property><con:name>sName</con:name><con:value>3_DTCreate_and_SAML_Exchange_FUNC</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433916607228</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_95c52254-afdb-4f99-969a-a37a3e7764cf</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>2613892e-f6cd-4907-9c85-3746a9a2a7a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>304c1ec2-bd71-4c0c-9831-79b3a997fc5f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e69b549a-2f10-47a3-8c62-77ca553def92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STSCreate for Portal" searchProperties="true" id="1863e941-988d-4a26-b033-53ad17e8ce5e">
      <con:settings/>
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="6649c1d6-437b-44ca-a837-184260f33c0a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID", null);
tC.setPropertyValue("Username", null);
tC.setPropertyValue("UserPassword", null);
tC.setPropertyValue("audienceList", null);


</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="f6699456-c7cc-4001-bc35-246bac76659c">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

tC.setPropertyValue("tokenType", tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("NODE_ID", callTC.getPropertyValue("NODE_ID"));
//tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeidPortalCS"));
tC.setPropertyValue("Username", callTC.getPropertyValue("Username"));
tC.setPropertyValue("UserPassword", callTC.getPropertyValue("UserPassword"));
tC.setPropertyValue("audienceList","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidPortalCS"));
</script></con:config>
      </con:testStep>
      
      
      
      <con:testStep type="groovy" name="Call Set PEM File" id="84488906-0b91-44ce-a9c4-8e17bc0abab0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem");
myTC.setPropertyValue("NODE_ID",tC.getPropertyValue("NODE_ID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - STSCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="POST - STSCreate" id="f4754693-6b0b-4a8b-b849-c8fd56403400"><con:settings/><con:config service="STSCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STSCreate" mediaType="application/xml" postQueryString="false" id="131ccdfb-cb62-4292-814f-8669c04a2b3a" sslKeystore="iscportal1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
<Credentials xmlns="${#Project#coordinatorSchema}">
  <Username>${#TestCase#Username}</Username> 
  <Password>${#TestCase#UserPassword}</Password> 
</Credentials>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Status" id="6e98f75f-b241-4512-816d-fd265b472d6f"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Details" id="a853f7b5-1e47-4c96-9e6b-612f5fa3a3d3">
        <con:settings/>
        <con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def testStep = testCase.getTestStepByName('POST - STSCreate');
httpBody = testStep.httpRequest.response.getResponseContent().toString();

try
{
	contentLocation = testStep.httpRequest.response.responseHeaders["Location"];
}
catch(Throwable e)
{
	log.info e;
}

def contentLocationURL = contentLocation[0].toURL();
def contentLocationURLPath = contentLocationURL.getPath();

String versionMajor = context.expand('${#Project#versionMajor}');
String versionMinor = context.expand('${#Project#versionMinor}');
String restVersion = "rest/" + versionMajor + "/" + versionMinor;

assert contentLocationURLPath.matches("/" + restVersion + "/SecurityToken/Assertion/[_,0-9,A-F,a-z,-]*");
	
int lastColon = contentLocationURLPath.lastIndexOf(':');
int lastSlash = contentLocationURLPath.lastIndexOf('/');
assertionUUID = contentLocationURLPath.substring(lastSlash + 1);

testCase.setPropertyValue("assertionUUID", assertionUUID);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return Properties to Calling Test Case" id="71889931-826e-49c5-b702-745646a0bd28">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

callTC.setPropertyValue("assertionUUID", tC.getPropertyValue("assertionUUID"));
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>tName</con:name><con:value>Scenario3-DTCreate_with_ULC_for_LLASP_User_created_by_node_PORTAL_and_ULC_Deleted_for_LLASP</con:value></con:property><con:property><con:name>sName</con:name><con:value>COORD-155</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1424866401238</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:iscportalcs1</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP2/iscportal1_concat.pem</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_0b3a98e9-468b-43c9-8cf3-935d0108fdee</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>2613892e-f6cd-4907-9c85-3746a9a2a7a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>304c1ec2-bd71-4c0c-9831-79b3a997fc5f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e69b549a-2f10-47a3-8c62-77ca553def92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DelegationTokenCreate_EmailBased" searchProperties="true" id="8380ff1e-a2f0-4c47-9fcd-170ed8b1c1d0"><con:settings/><con:testStep type="groovy" name="Establish_TestCase_Properties" id="6da0e616-c628-4ef7-b279-796fe84b9235"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();

tC.setPropertyValue("Username", null);
tC.setPropertyValue("PrimaryEmail", null);
tC.setPropertyValue("responsetype", null);
tC.setPropertyValue("tokentype", null);
tC.setPropertyValue("audienceList", null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", null);
tC.setPropertyValue("NODE_ID", null);
tC.setPropertyValue("NODE_OID", null);
tC.setPropertyValue("jksFile", null);
tC.setPropertyValue("assertionUUID", null);
tC.setPropertyValue("expectCreateExpireHoursDiff", null);
tC.setPropertyValue("USER_OID", null);
tC.setPropertyValue("ACCOUNT_OID", null);
tC.setPropertyValue("unSignedAuthnRequest", null);
tC.setPropertyValue("signedAuthnRequest", null);
tC.setPropertyValue("base64EncodedSignedAuthnRequest", null);
tC.setPropertyValue("UUID", null);
tC.setPropertyValue("expectErrType",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionUUIDprior",null);
tC.setPropertyValue("expectNodeUserRowCount",null);
tC.setPropertyValue("audienceIgnoreNodes",null);
tC.setPropertyValue("audienceIgnoreAll",null);





</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="672931e4-a38a-4978-8246-1e37b8365c02"><con:settings/><con:config><script>import urlFunctions.urlFunctions;
import java.net.URLEncoder; 

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

myURLFunctions = new URLEncoder();

if(tP.getPropertyValue("versionMinor")!=tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("subject", callTC.getPropertyValue("PrimaryEmail"));
	tC.setPropertyValue("responseType", callTC.getPropertyValue("responseType"));
	tC.setPropertyValue("tokenType", callTC.getPropertyValue("tokenType"));
	tC.setPropertyValue("audienceList", callTC.getPropertyValue("audienceList"));
}
else
{
	tC.setPropertyValue("subject", myURLFunctions.encode(callTC.getPropertyValue("PrimaryEmail")));
	tC.setPropertyValue("responseType", myURLFunctions.encode(callTC.getPropertyValue("responsetype")));
	tC.setPropertyValue("tokenType", myURLFunctions.encode(callTC.getPropertyValue("tokentype")));
	tC.setPropertyValue("audienceList", myURLFunctions.encode(callTC.getPropertyValue("audienceList")));
}

tC.setPropertyValue("affiliationList", callTC.getPropertyValue("affiliationList"));
tC.setPropertyValue("policyList", callTC.getPropertyValue("policyList"));
tC.setPropertyValue("NODE_ID", callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("expectCreateExpireHoursDiff", callTC.getPropertyValue("expectCreateExpireHoursDiff"));
tC.setPropertyValue("USER_OID", callTC.getPropertyValue("USER_OID"));
tC.setPropertyValue("ACCOUNT_OID", callTC.getPropertyValue("ACCOUNT_OID"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));
tC.setPropertyValue("assertionUUIDprior",callTC.getPropertyValue("assertionUUIDprior"));
tC.setPropertyValue("Username", callTC.getPropertyValue("Username"));
tC.setPropertyValue("expectNodeUserRowCount",callTC.getPropertyValue("expectNodeUserRowCount"));
tC.setPropertyValue("audienceIgnoreNodes",callTC.getPropertyValue("audienceIgnoreNodes"));
tC.setPropertyValue("audienceIgnoreAll",callTC.getPropertyValue("audienceIgnoreAll"));

if (tC.getPropertyValue("expectNodeUserRowCount") == null ||
	tC.getPropertyValue("expectNodeUserRowCount") == "") {
		tC.setPropertyValue("expectNodeUserRowCount","0");
}

if (tC.getPropertyValue("audienceIgnoreAll") == null ||
	tC.getPropertyValue("audienceIgnoreAll") == 'null') {
		tC.setPropertyValue("audienceIgnoreAll","false");
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Coordinator Schema" id="4e9ece14-16f6-4ce3-bc67-93170c30c1fb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "versionMinor: "+tP.getPropertyValue("versionMinor");

if(tP.getPropertyValue("versionMinor") == "07"){
	tP.setPropertyValue("coordinatorSchema","http://www.decellc.org/schema/2013/06/coordinator");
	log.info "Setting the coordinatorSchema value at project level: "+tP.getPropertyValue("coordinatorSchema");
}
else if (tP.getPropertyValue("versionMinor") == "06"){
	tP.setPropertyValue("coordinatorSchema","http://www.decellc.org/schema/2012/12/coordinator");
	log.info "Setting the coordinatorSchema value at project level: "+tP.getPropertyValue("coordinatorSchema");
}else{
	tP.setPropertyValue("coordinatorSchema","http://www.decellc.org/schema/2013/10/coordinator");
	log.info "Setting the coordinatorSchema value at project level: "+tP.getPropertyValue("coordinatorSchema");
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set NODE_OID value based on NODE_ID" id="2da667c0-e502-4de6-9c04-d5ac00331c3f"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def targetSystem = context.expand( '${#Project#targetSystem}' )

a = new dbUtils.dbUtils(log,targetSystem);

def nodeid = testProject.getPropertyValue("urnNode")+testCase.getPropertyValue("NODE_ID");

def sql = """SELECT to_char(rawtohex(NODE_OID)) NODE_OID FROM NODE where NODE_ID = '""" + nodeid +"""'""";

def node_oid= a.SelectFromDB(sql,targetSystem);
def myXML = new XmlSlurper().parseText(node_oid);
def NODE_OID = myXML.ResultSet.Row.NODE_OID[0].text();

log.info "nodeoid:  "+NODE_OID;
testCase.setPropertyValue("NODE_OID",NODE_OID);
</script></con:config></con:testStep><con:testStep type="groovy" name="Compute expected audience list" id="b063d6aa-5387-415b-a964-65082e805676">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("affiliationList",null);

String affiliates = "";
int i = 0;
def urnNode = context.expand( '${#Project#urnNode}' )

/*
*  Construct the expected Affiliation list
*/
def affiliationList = [urnNode+tC.getPropertyValue("NODE_ID").toString()];
def ignoreNodesList = [];
def audienceList = [];



	
log.info "audienceList: "+tC.getPropertyValue("audienceList");
if (tC.getPropertyValue("audienceList") != null) 
{
	audienceList = tC.getPropertyValue("audienceList").toString().tokenize(";");
}
		
if (audienceList.size() >= 1 &amp;&amp; tC.getPropertyValue("audienceList") != null)
{
	log.info "DEBUG: Adding audienceList";
	affiliationList.addAll(audienceList);
}
	log.info "DEBUG: affiliationList size is " + affiliationList.size();
	affiliationList.each {
		log.info "DEBUG afflicationList Member: " + it;
		affiliates += it;

		i++;
		
		if (i != affiliationList.size()) {
			affiliates += ";";
		}
	}

	tC.setPropertyValue("affiliationList",affiliates);

	log.info "affiliationList[" + tC.getPropertyValue("affiliationList") + "]";

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Establish AuthnRequest Body" id="add62701-a5ed-46ce-9c2b-c514e5795906"><con:settings/><con:config><script>import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import urlFunctions.urlFunctions;
import java.net.URLDecoder; 

import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String saml2pNS = "urn:oasis:names:tc:SAML:2.0:protocol";
String saml2NS = "urn:oasis:names:tc:SAML:2.0:assertion";
String mdNS = "urn:oasis:names:tc:SAML:2.0:metadata";
String deceNS = context.expand( '${#Project#coordinatorSchema}' )
String saml2pPrefix = "saml2p";
String saml2Prefix = "saml2";
String mdPrefix = "md";
String decePrefix = "dece";

String versionMajor = tP.getPropertyValue("versionMajor");
String versionMinor = tP.getPropertyValue("versionMinor");
//String destination = "https://qa.p.uvvu.com:7001/rest/" + versionMajor + "/" + versionMinor + "/loginservice/login";
String destination = "https://qa.s.uvvu.com:7001/security/delegation/saml/loginservice/login";
String assertionConsumerServiceURL = "https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/" + tC.getPropertyValue("NODE_OID");

String PrimaryEmail = tC.getPropertyValue("subject");

DateFormat ymd = new SimpleDateFormat("yyyy-MM-dd");
Date date = new Date();
String ymdTime = ymd.format(date);
DateFormat hms = new SimpleDateFormat("HH:mm:ss.FF");
String hmsTime = hms.format(date);

String issueInstant = ymdTime + "T" + hmsTime + "Z";

//String issuerNode = tC.getPropertyValue("NODE_ID");
String issuerNode = tP.getPropertyValue("urnNode")+tC.getPropertyValue("NODE_ID");

String uuid = UUID.randomUUID().toString();
tC.setPropertyValue("UUID", uuid);

String protocolBinding = "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST";

DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder parser = docFactory.newDocumentBuilder();
doc = parser.newDocument();

root = doc.createElementNS(saml2pNS, saml2pPrefix + ":AuthnRequest");
root.setAttribute("ID", uuid);
root.setAttribute("IssueInstant", issueInstant);
root.setAttribute("Version", "2.0");
root.setAttribute("Destination", destination);
root.setAttribute("AssertionConsumerServiceURL", assertionConsumerServiceURL);
root.setAttribute("ForceAuthn", "true");
root.setAttribute("ProtocolBinding", protocolBinding);

doc.appendChild(root);
	
issuer = doc.createElementNS(saml2NS, saml2Prefix + ":Issuer");
Text textIssuer = doc.createTextNode(issuerNode);
issuer.appendChild(textIssuer);

root.appendChild(issuer);

nameid = doc.createElementNS(saml2pNS, saml2pPrefix + ":NameIDPolicy"); 
nameid.setAttribute("Format","urn:oasis:names:tc:SAML:2.0:nameid-format:transient");
nameid.setAttribute("AllowCreate","true");

root.appendChild(nameid);

if (tC.getPropertyValue("policyList") != "")
{
extensions = doc.createElementNS(saml2pNS,saml2pPrefix + ':Extensions');
policyList = doc.createElementNS(deceNS, 'ns4:PolicyList');

this.log.info tC.getPropertyValue("policyList");

policyArray = tC.getPropertyValue("policyList").split(",");
for (policyStr in policyArray) 
{
	policy = doc.createElementNS(deceNS, 'ns4:Policy');
	policyClass = doc.createElementNS(deceNS, 'ns4:PolicyClass');
	Text textPolicyClass = doc.createTextNode(policyStr);
	policyClass.appendChild(textPolicyClass);
	policy.appendChild(policyClass);
	policyList.appendChild(policy);
}

extensions.appendChild(policyList);
root.appendChild(extensions);
}

conditions = doc.createElementNS(saml2NS, saml2Prefix + ":Conditions");
audienceRestriction = doc.createElementNS(saml2NS, saml2Prefix + ":AudienceRestriction");

myURLFunctions = new URLDecoder();
log.info "########"+ tC.getPropertyValue("affiliationList");
affiliateArray = myURLFunctions.decode(tC.getPropertyValue("affiliationList")).split(";");

for (audienceMember in affiliateArray) 
{
	audience = doc.createElementNS(saml2NS, saml2Prefix + ":Audience");
	Text textAudience = doc.createTextNode(audienceMember);
	audience.appendChild(textAudience);
	audienceRestriction.appendChild(audience);	
}

conditions.appendChild(audienceRestriction);

root.appendChild(conditions);

subject = doc.createElementNS(saml2NS, saml2Prefix + ":Subject");
nameid1 = doc.createElementNS(saml2NS, saml2Prefix + ":NameID");
nameid1.setAttribute("Format","urn:oasis:names:tc:SAML:2.0:nameid-format:persistent");
Text textEmail = doc.createTextNode(PrimaryEmail);

nameid1.appendChild(textEmail);
subject.appendChild(nameid1);

root.appendChild(subject);



//&lt;saml2:Subject xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">&lt;saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">shikha82@uvvutesting.biz&lt;/saml2:NameID>&lt;/saml2:Subject>

TransformerFactory factory = TransformerFactory.newInstance();
Transformer transformer = factory.newTransformer();
StringWriter writer = new StringWriter();
Result result = new StreamResult(writer);
Source source = new DOMSource(doc);
transformer.transform(source, result);
writer.close();
String unSignedAuthnRequest = writer.toString();

log.info unSignedAuthnRequest;
tC.setPropertyValue("unSignedAuthnRequest", unSignedAuthnRequest);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_JKS_File" id="5f0a4ab8-0f1c-437a-b92b-66fe00bfe484"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def NODE_ID = tC.getPropertyValue("NODE_ID");

if (System.properties['os.name'].toLowerCase().contains('windows')) 
{
            log.info "it's Windows";
            certPath = tP.getPropertyValue("certsPath_Windows");
} 
else 
{
            log.info "it's not Windows"
            certPath = tP.getPropertyValue("certsPath_Linux");
}



switch (NODE_ID) {

	case "urn:dece:org:org:dece:dece:cs":
	jksFile = certPath+"/dececs.jks";
	break;

	case "urn:dece:org:org:dece:coord:cs":
	jksFile = certPath+"/coordcs.jks";
	break;

	case "urn:dece:org:org:dece:LLASP":
	jksFile = certPath+"/LLASP.jks";
	break;

	case "urn:dece:org:org:dece:DLASP":
	jksFile = certPath+"/DLASP.jks";
	break;

	case "urn:dece:org:org:dece:ACCESS":
	jksFile = certPath+"/ACCESS.jks";
	break;

	case "urn:dece:org:org:dece:ACCESCS":
	jksFile = certPath+"/ACCESCS.jks";
	break;
	
	case "urn:dece:org:org:dece:RET":
	jksFile = certPath+"/RET.jks";
	break;

	case "urn:dece:org:org:dece:RET_CS_1":
	jksFile = certPath+"/RET_CS_1.jks";
	break;

	case "urn:dece:org:org:dece:LLASP_CS_1":
	jksFile = certPath+"/LLASP_CS_1.jks";
	break;

	case "urn:dece:org:org:dece:DLASP_CS_1":
	jksFile = certPath+"/DLASP_CS_1.jks";
	break;

	case "urn:dece:org:org:dece:DSP":
	jksFile = certPath+"/DSP.jks";
	break;

	case "urn:dece:org:org:dece:DSP_CS_1":
	jksFile = certPath+"/DSP_CS_1.jks";
	break;

	case "urn:dece:org:org:dece:CON":
	jksFile = certPath+"/CP.jks";
	break;

	case "urn:dece:org:org:dece:CON_CS_1":
	jksFile = certPath+"/CON_CS_1.jks";
	break;

	case "urn:dece:org:org:dece:DEV":
	jksFile = certPath+"/DEV.jks";
	break;

	case "urn:dece:org:org:dece:DEV_CS_1":
	jksFile = certPath+"/DEV_CS_1.jks";
	break;

	case "urn:dece:org:org:dece:COO":
	jksFile = certPath+"/COO.jks";
	break;

	case "urn:dece:org:org:dece:DECE":
	jksFile = certPath+"/DECE.jks";
	break;

	case "urn:dece:org:org:dece:iscpportal1":
	jksFile = certPath+"/iscpportal1.jks";
	break;

	case "urn:dece:org:org:dece:iscportalcs1":
	jksFile = certPath+"/iscportalcs1.jks";
	break;
	
	default:
	jksFile = certPath+"/RET.jks";
	break;
}

log.info "jksFilePath:"+jksFile;

tC.setPropertyValue("jksFile", jksFile);</script></con:config></con:testStep><con:testStep type="groovy" name="Create XML Signature" id="3e726c4d-e639-4809-89e8-e00b9757d0bd"><con:settings/><con:config><script>import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.util.Collections;
import java.lang.Object;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import javax.xml.transform.*;
import java.security.cert.X509Certificate;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import java.nio.channels.FileChannel;

import javax.xml.crypto.Data;
import javax.xml.crypto.MarshalException;
import javax.xml.crypto.NoSuchMechanismException;
import javax.xml.crypto.URIDereferencer;
import javax.xml.crypto.XMLStructure;
import javax.xml.crypto.dom.DOMStructure;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;
import javax.xml.crypto.dsig.spec.*;
import javax.xml.crypto.dsig.keyinfo.*;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.XMLDSigSecurity;
import javax.xml.crypto.dsig.XMLObject;
import javax.xml.crypto.dsig.XMLSignContext;
import javax.xml.crypto.dsig.XMLSignature;
import javax.xml.crypto.dsig.XMLSignatureException;
import javax.xml.crypto.dsig.XMLSignatureFactory;
import javax.xml.crypto.dsig.XMLValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.dom.DOMValidateContext;

import javax.xml.crypto.dsig.*;

import org.opensaml.xml.security.x509.BasicX509Credential;
import org.opensaml.xml.*;
import org.opensaml.xml.signature.impl.*;
import org.opensaml.xml.signature.Signature;
import org.opensaml.xml.signature.SignatureConstants;
import org.opensaml.xml.security.x509.*;
import java.security.cert.*;

import javax.xml.namespace.QName;
import org.xml.sax.InputSource;

import java.security.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String saml2pNS = "urn:oasis:names:tc:SAML:2.0:protocol";
String saml2NS = "urn:oasis:names:tc:SAML:2.0:assertion";
String saml2pPrefix = "saml2p";
String saml2Prefix = "saml2";

String jksFile  = tC.getPropertyValue("jksFile");
String uuid = "#" + tC.getPropertyValue("UUID");

// Create a DOM XMLSignatureFactory that will be used to generate the enveloped signature.
XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM");

// Create a Reference to the enveloped document (in this case,
// you are signing the whole document, so a URI of "" signifies
// that, and also specify the SHA1 digest algorithm and
// the ENVELOPED Transform.
Reference ref = fac.newReference(uuid, fac.newDigestMethod(DigestMethod.SHA1, null),  Collections.singletonList(fac.newTransform (Transform.ENVELOPED, (TransformParameterSpec) null)), null, null);

// Create the SignedInfo.
SignedInfo si = fac.newSignedInfo(fac.newCanonicalizationMethod(CanonicalizationMethod.INCLUSIVE,(C14NMethodParameterSpec) null), fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null), Collections.singletonList(ref));

// Load the KeyStore and get the signing key and certificate.
KeyStore ks = KeyStore.getInstance("JKS");
ks.load(new FileInputStream(jksFile), "testing".toCharArray());
KeyStore.PrivateKeyEntry keyEntry = (KeyStore.PrivateKeyEntry) ks.getEntry("qalp1", new KeyStore.PasswordProtection("testing".toCharArray()));
X509Certificate cert = (X509Certificate) keyEntry.getCertificate();

// Create the KeyInfo containing the X509Data.
KeyInfoFactory kif = fac.getKeyInfoFactory();
List x509Content = new ArrayList();
x509Content.add(cert.getSubjectX500Principal().getName());
x509Content.add(cert);
X509Data xd = kif.newX509Data(x509Content);
KeyInfo  ki = kif.newKeyInfo(Collections.singletonList(xd));

String unSignedAuthnRequest  = tC.getPropertyValue("unSignedAuthnRequest");

// Instantiate the document to be signed.
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setNamespaceAware(true);
Document doc = dbf.newDocumentBuilder().parse(new InputSource(new ByteArrayInputStream(unSignedAuthnRequest.getBytes("utf-8"))));

// Create a DOMSignContext and specify the RSA PrivateKey and
// location of the resulting XMLSignature's parent element.
DOMSignContext dsc = new DOMSignContext(keyEntry.getPrivateKey(), doc.getDocumentElement());

// Create the XMLSignature, but don't sign it yet.
XMLSignature signature = fac.newXMLSignature(si, ki);

// Marshal, generate, and sign the enveloped signature.
signature.sign(dsc);

TransformerFactory factory = TransformerFactory.newInstance();
Transformer transformer = factory.newTransformer();
StringWriter writer = new StringWriter();
Result result = new StreamResult(writer);
Source source = new DOMSource(doc);
transformer.transform(source, result);
writer.close();
String signedAuthnRequest = writer.toString();

log.info signedAuthnRequest;
tC.setPropertyValue("signedAuthnRequest", signedAuthnRequest);</script></con:config></con:testStep><con:testStep type="groovy" name="Base64 Encode the Signed AuthnRequest xml" id="8ee54f99-f044-4f4e-8357-3583daac757f"><con:settings/><con:config><script>import urlFunctions.urlFunctions;
import java.net.URLEncoder; 

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

myURLFunctions = new urlFunctions(log);
String signedAuthnRequest  = tC.getPropertyValue("signedAuthnRequest");
String base64EncodedSignedAuthnRequest = URLEncoder.encode(myURLFunctions.base64Encode(signedAuthnRequest));
//String base64EncodedSignedAuthnRequest = myURLFunctions.base64Encode(signedAuthnRequest);

tC.setPropertyValue("base64EncodedSignedAuthnRequest", base64EncodedSignedAuthnRequest);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Set PEM" id="d1a80434-7918-49b0-8687-8ed1d8a95d30"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem");
myTC.setPropertyValue("NODE_ID",tC.getPropertyValue("NODE_ID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserValidationTokenCreate_DST");

def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="UserValidationTokenCreate_DST" id="94ea13c2-a7f7-495a-a4d3-1e857a29ea10"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/VerificationToken/${#TestCase#tokenType}?subject=${#TestCase#subject}&amp;responseType=${#TestCase#responseType}" methodName="UserValidationTokenCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserValidationTokenCreate_DST" mediaType="application/x-www-form-urlencoded" postQueryString="false" sslKeystore="RET_concat.pem" id="5533aa71-caa3-40cd-8d67-77431fe72ae2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>https://qa.p.uvvu.com:7001</con:endpoint><con:request>SAMLRequest=${#TestCase#base64EncodedSignedAuthnRequest}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Headers and Body" disabled="true" id="78ae27e6-994e-46b1-bd54-aeadb09d2f5c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserValidationTokenCreate_DST');
def expBody = tStep.httpRequest.response.getResponseContent();


tC.setPropertyValue("httpBody", null);
tC.setPropertyValue("httpStatus", null);
tC.setPropertyValue("httpConnect", null);
tC.setPropertyValue("httpContentType", null);
tC.setPropertyValue("httpContentLength", null);
tC.setPropertyValue("httpContentLocation", null);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String Location = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			Location = value[0];
			break;
		case "Content-Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("httpBody", expBody);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", Location);

this.log.info Location;


</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" disabled="true" id="89935bfe-0389-46ed-b90c-fe114a19d664"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject(); 
def errorRespType = context.expand( '${#TestCase#expectErrType}' );
log.info 'errorRespType=='+errorRespType
def XMLbody   = context.expand( '${#TestCase#httpBody}');
log.info 'XMLbody=='+XMLbody

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
//String orgRequest = url + "/merc_api/merc-service/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;

def major = context.expand( '${#Project#versionMajor}' );
def minor = context.expand( '${#Project#versionMinor}' );


if (context.expand( '${#Project#targetHostQ}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#targetHostQ}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		log.info "We are in SUCCESS Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpContentLocation}') != null;
	
	def a = context.expand( '${#TestCase#httpContentLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}
	
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	assertionUUID     = urlStr.substring(lastSlash + 1);
	
	tC.setPropertyValue("assertionUUID", assertionUUID);
	callTC.setPropertyValue("assertionUUID", assertionUUID);	 		  
		
	} else {
		
		assert context.expand( '${#TestCase#httpLocation}') == "";
}





//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION row count" disabled="true" id="1ed578eb-091d-40e1-80dc-2bf3ff6dd416">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

int uuidcnt = 0;

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {

		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

		String uuid = tC.getPropertyValue("httpContentLocation").toString();

		/*
		*  Assert we have a location header value..
		*/
		assert uuid.length() > 1;

		/*
		*  Verify the value is a URL
		*/
		def lurl = uuid.toURL();
		def urlStr = lurl.getPath();

		int lastSlash = urlStr.lastIndexOf('/');

		/*
		*  Pull just the assertion UUID from the URL
		*/
		String assertionUUID = urlStr.substring(lastSlash + 1);

		log.info "assertionUUID [$assertionUUID]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		assert dbUtils.samlGetUUIDNodeAssertionRowCount(assertionUUID) == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION prior assertion removed" disabled="true" id="bb3e4a1a-89f6-4cb2-aa4a-01971da1b5f0">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String tokentype = tC.getPropertyValue("tokentype").toString();
String assertionUUIDprior = tC.getPropertyValue("assertionUUIDprior").toString();

int uuidcnt = 0;

if (tC.getPropertyValue("expectErrType") == "SUCCESS" &amp;&amp;  tC.getPropertyValue("assertionUUIDprior").toString() !="null" ) {
    
	assert assertionUUIDprior.length() > 4;
	
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  There should only be on NODE_USER_SAML_ASSERTION row 
		*  with this UUID after API invocation
		*/
		assert dbUtils.samlGetUUIDNodeAssertionRowCount(assertionUUIDprior) == 0;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION STATUS, NODE_OID" disabled="true" id="4c9c268d-e474-4f5c-8e35-fff9d74526aa">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;
def myXML;

tC.setPropertyValue("assertionROW",null);

String arow = "";
String NODE_ID = tC.getPropertyValue("NODE_ID").toString();
String NODE_OID = tC.getPropertyValue("NODE_OID").toString();

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	/*
	*  Device Node ID override.  All devices are 0200 in 
	*  QA so if the nodeID received is one of our defined
	*  devices change the setting for validation 
	*  purposes.
	*/
	/*log.info "NODE_ID: "+NODE_ID;
	switch (NODE_ID) {
		
		case tP.getPropertyValue("nodeIdDEV").toString():
			NODE_OID = deviceNodeID;
			log.info "NODE_OID:"+NODE_OID;
			break;
	}*/
	
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		String uuid = tC.getPropertyValue("httpContentLocation").toString();
		
		/*
		*  Assert we have a location header value..
		*/
		assert uuid.length() > 1;

		/*
		*  Verify the value is a URL
		*/
		def lurl = uuid.toURL();
		def urlStr = lurl.getPath();

		int lastSlash = urlStr.lastIndexOf('/');

		/*
		*  Pull just the assertion UUID from the URL
		*/
		String assertionUUID = urlStr.substring(lastSlash + 1);

		log.info "assertionUUID [$assertionUUID]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		arow = dbUtils.samlGetAssertionRow(assertionUUID);

		assert arow.length() > 0;

		log.info "arow is [$arow]";

		tC.setPropertyValue("assertionROW",arow);
	}

	/*
	*  Parse the XML
	*/
	try {
		myXML = new XmlSlurper().parseText(arow);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify only one row was returned..
		*/
		log.info "ASSERT - Row Size is 1";
		assert myXML.ResultSet.Row.size() == 1;

		/*
		*  Verify NODE_USER_SAML_ASSERTION.STATUS is active
		*/
		log.info "ASSERT - STATUS is active";
		assert myXML.ResultSet.Row.STATUS.text() == "active";

		/*
		*  Verify NODE_USER_SAML_ASSERTION.NODE_ID
		*/
		log.info "ASSERT - NODE_OID Expect[$NODE_OID] Received[" +
		myXML.ResultSet.Row.NODE_OID.text() + "]";
		assert myXML.ResultSet.Row.NODE_OID.text() == NODE_OID;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION.EXPIRATION" disabled="true" id="71cf9166-a3a4-4191-b805-b5809fcf712f">
        <con:settings/>
        <con:config><script><![CDATA[import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def a;

int expectTime = tC.getPropertyValue("expectCreateExpireHoursDiff").toInteger();

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	String uname = tC.getPropertyValue("assertionUUID").toString().trim();
	String sys = tP.getPropertyValue("targetSystem").toString();
	String results = "";
	String secs = "";

	String sql = """SELECT (extract(DAY FROM EXPIRATION_DATE - CREATED_DATE)*24) 
		as HOURS FROM NODE_USER_SAML_ASSERTION where NODE_USER_SAML_UUID = '$uname'
	""";

	log.info sql;

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		results = a.SelectFromDB(sql,sys);
		log.info results;
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbUtils - $e"; 
		assert 1 == 2;
	}
	finally {
		try {
			def myXML = new XmlSlurper().parseText(results);
			assert myXML.ResultSet.Row.size() == 1;
			results = myXML.ResultSet.Row[0].HOURS
		}
		catch (Throwable e) {
			log.info "ERROR - XmlSlurper - $e";
			assert 1 == 2;
		} 
		finally {
			/*
			*  There is sometype of bug in oracle where it, at times, screws 
			*  update the date diff up to 24 hours.
			*/
						
			log.info "Expect[$expectTime] - Received[" +  results.toInteger() + "]";
			//assert (results.toInteger() == expectTime);
			assert (results.toInteger() <= expectTime + 06 && results.toInteger() >= expectTime - 06);
			//assert (results.toInteger() <= expectTime + 24 && results.toInteger() >= expectTime - 24);
		}
	}
}]]></script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION.NODE_USER_SAML_ASSERTION" disabled="true" id="972852e5-1c5b-4be7-bdc9-b340e261fb73">
        <con:settings/>
        <con:config><script><![CDATA[/*
*  VALIDATIONS PERFORMED
*
*  saml2p:StatusCode == urn:oasis:names:tc:SAML:2.0:status:Success
*
*  <saml2:Issuer> == Project.Property("samlIssuer") (http://c.decellc.com/)
*
*  <saml2:AuthenticatingAuthority> == Project.Property("samlAuthenticatingAuthority") 
*	(urn:dece:org:neustar:coordinator)
*
*  <AudienceRestriction>
*	Verifications include insuring the size of the <AudienceRestriction> matches
*	the number of nodes expected.
*
*	For DEVICES this check will verify NO audience members are included.
*
*	Also verification of the nodes used in assertion creation/affiliation via
*	the STS call are contained within the <AudienceRestriction> node
*/
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def dbUtils;
def dbUtilsUser;
//int stsaudienceSize = 1;   Start at one as entity nodes is in audience
tC.setPropertyValue("computedAssertionXML",null);
tC.setPropertyValue("dbassertionNodeaccountid",null);
tC.setPropertyValue("dbassertionNodeuserid",null);

String assertionXML = "";
String arow = tC.getPropertyValue("assertionROW");
String[] affiliates;

int ignoreNodesSize = 0;
int audienceSize = 0;
def affiliationList = [];
def ignoreNodesList = [];

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	log.info tC.getPropertyValue("affiliationList").toString() ;
	if (tC.getPropertyValue("affiliationList").toString() != null)
	{
		affiliationList = tC.getPropertyValue("affiliationList").toString().tokenize(";");
		log.info "affiliationList size is " + affiliationList.size();
		audienceSize = affiliationList.size();
	}
	log.info tC.getPropertyValue("audienceIgnoreNodes").toString();
	if (tC.getPropertyValue("audienceIgnoreNodes").toString() != 'null')
	{
		ignoreNodesList = tC.getPropertyValue("audienceIgnoreNodes").toString().tokenize(";");
		log.info "ignoreNodesList size is " + ignoreNodesList.size();
		ignoreNodesSize = ignoreNodesList.size();
	}
	
	
	audienceSize -= ignoreNodesSize; 	
	/*
	*  Make sure we have data in arow
	*/
	assert arow.length() > 1;

	/*
	*  Get a handle for the saml class.
	*/
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	
	try {
		myXML = new XmlSlurper().parseText(arow);
		log.info 'myXML----------->'+myXML
		log.info 'size------->'+myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".size()
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify only one row was returned..
		*/
		log.info "ASSERT - Row Size is 1";
		assert myXML.ResultSet.Row.size() == 1;

		String assertRaw = myXML.ResultSet.Row.NODE_USER_SAML_ASSERTION_PART1.text() +
				myXML.ResultSet.Row.NODE_USER_SAML_ASSERTION_PART2.text();
			log.info 'assertRaw----->'+assertRaw

		/*
		*  Base64 decode the assertion clob
		*/
		byte [] xmlBytes = Base64.decode(assertRaw);
		assertionXML = new String(xmlBytes, "UTF8");

		assert assertionXML.length() > 1;

		tC.setPropertyValue("computedAssertionXML", assertionXML);
	}
	/*
	*  Now parse the assertion XML
	*/
	try {
		myXML = new XmlSlurper().parseText(assertionXML).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", saml2p: "urn:oasis:names:tc:SAML:2.0:protocol");
		log.info 'myXML----------->'+myXML
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Check the status
		*/
		log.info "ASSERT: Status size 1 == " + myXML."saml2p:Status".size();
		assert 1 == myXML."saml2p:Status".size();

		def s = myXML."saml2p:Status"."saml2p:StatusCode".@Value;
		log.info "ASSERT: Status value is urn:oasis:names:tc:SAML:2.0:status:Success == $s";
		assert "urn:oasis:names:tc:SAML:2.0:status:Success" == s.toString();

		/*
		*  Verify the nodeaccountid.
		*/
		String aname = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute".@Name;
		String anameE = "accountID";
		log.info "ASSERT: NodeAccountID - Name Attribute Value - Expect[$anameE] - Received[$aname]";
		assert anameE == aname;

		String avalue = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
		log.info "ASSERT: Returned Account NodeID length > 0 -- [$avalue]";
		assert avalue.length() > 0;
		tC.setPropertyValue("dbassertionNodeaccountid", avalue);

		/*
		*  Verify the nodeuserid
		*/
		String uvalue = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID".text();
		log.info "ASSERT: Returned Account UserID length > 0 -- [$uvalue]";
	
		//  Not zero length
		assert uvalue.length() > 0;

		//  Save for future
		tC.setPropertyValue("dbassertionNodeuserid", uvalue);
		int lastColon = uvalue.lastIndexOf(':');
		def uvalueid = uvalue.substring(lastColon + 1);

		//  Get USER_OID from NODE_USER table.
		def uvaluedb = dbUtils.samlGetNodeUserIDfromNodeUser(uvalueid);
		def unameval = tC.getPropertyValue("USER_OID").toString();
		log.info "ASSERT: NODE_USER.USER_OID Recv[$uvaluedb] - Expect[$unameval]";
		assert uvaluedb == unameval;

		/*
		* <saml2:Issuer>
		*/
		log.info "ASSERT: <saml2:Issuer> Expect: " +
			tP.getPropertyValue("samlIssuer") +
			" Received:[" + myXML."saml2:Assertion"."saml2:Issuer".text() +
			"]";
		assert tP.getPropertyValue("samlIssuer").toString() == myXML."saml2:Assertion"."saml2:Issuer".text();

		/*
		*  saml2:AuthnStatement
		*/
		log.info "ASSERT: <saml2:AuthenticatingAuthority> Expect [" + 
			tP.getPropertyValue("samlAuthenticatingAuthority") +
			"] Received[" +
			myXML."saml2:Assertion"."saml2:AuthnStatement"."saml2:AuthnContext"."saml2:AuthenticatingAuthority".text() +
			"]";
		assert tP.getPropertyValue("samlAuthenticatingAuthority").toString() ==
			myXML."saml2:Assertion"."saml2:AuthnStatement"."saml2:AuthnContext"."saml2:AuthenticatingAuthority".text()

		/*
		*  AudienceRestriction Processing
		*/
		if (tC.getPropertyValue("isDeviceFlag").toString() == "true") {
			/*
			*  Just empty the list that way we will check
			*  for zero
			*/
			affiliationList = "";
		}
		log.info "ASSERT: AudienceList size Expect[" +
			audienceSize + "] Received[ " +
			myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".size() +
			"]";
			
	assert audienceSize == myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".size();
	
		myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".each {
			log.info "ASSERT: <saml2:AudienceRestriction> Contains [" +
				it.text() + "]";
				log.info "affiliationList: "+affiliationList;
			assert affiliationList.contains(it);
		}


		
			//Make sure none of the ingnoredNodes made it into the affilation list.
			ignoreNodesList.each {

			if(tC.getPropertyValue("NODE_ID")!= it)
			{
				log.info "ASSERT: <saml2:AudienceRestriction> DOES NOT Contain [" + it + "]";
				assert !myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".toString().contains(it);
			}
		}


		
	}
}]]></script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_ACCOUNT row" disabled="true" id="ddeb05e2-9be2-4910-83e1-616aef5510a2">
        <con:settings/>
        <con:config><script>/*
*  Verifications
*
*	Only one NODE_ACCOUNT row exists for the NODE_ACCOUNT_ID.
*
*	NODE_ID is the nodeOID for the entity node.
*
*	ACCOUNT_OID is correct.
*
*/
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

def myXML;
def nodeXML;

tC.setPropertyValue("assertionAccountId",null);

String assertionAccountId = "";
String arow = "";
String narow = "";
String NODE_ID = tC.getPropertyValue("NODE_ID").toString();
String NODE_OID = tC.getPropertyValue("NODE_OID").toString();
/*
*  if we are a device adjust the 
*  NODE_ID...
*/
if (tC.getPropertyValue("isDeviceFlag") == "true") {
	log.info "here...";
	NODE_OID = tP.getPropertyValue("nodeDeviceDefault").toString();
}

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	
	arow = tC.getPropertyValue("assertionROW").toString();

	assert arow.length() > 0;

	/*
	*  Parse the NODE_USER_SAML_ASSERTION row
	*/
	try {
		myXML = new XmlSlurper().parseText(arow);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		assertionAccountId = myXML.ResultSet.Row.NODE_ACCOUNT_ID.text();

		log.info "assertionAccountId[$assertionAccountId]";
	}

	/*
	*  Get and Prase the NODE_ACCOUNT row..
	*/
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
		narow = dbUtils.samlGetNodeAccountRow(assertionAccountId);

		assert narow.length() > 0;
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		assertionAccountId = myXML.ResultSet.Row.NODE_ACCOUNT_ID.text();

		log.info "assertionAccountId[$assertionAccountId]";

		try {
			nodeXML = new XmlSlurper().parseText(arow);
		}
		catch(Throwable e) {
			log.info "ERROR - XmlSlurper - $e";
			assert 1 == 2;
		}
		finally {
			/*
			*  Only one row should be returned.
			*/
			log.info "ASSERT: Row Size is 1";
			assert nodeXML.ResultSet.Row.size() == 1;
			
			/*
			* ACCOUNT_OID - ugh  :(  for some reason slurper cannot find ACCOUNT_OID
			*	I will fix later  
			*/
			log.info "ASSERT: ACCOUNT_OID Expect[" + tC.getPropertyValue("accountoid") +
				"] Received[" + nodeXML.ResultSet.Row.ACCOUNT_OID.text() + "]";
		//assert tC.getPropertyValue("accountoid").toString() == nodeXML.ResultSet.Row.ACCOUNT_OID.text();

			/*
			*  NODE_ID is the entity node...
			*/
			
			log.info "ASSERT: NODE_OID Expect[" + NODE_OID +
				"] Received[" + nodeXML.ResultSet.Row.NODE_OID.text() + "]";
			assert NODE_OID == nodeXML.ResultSet.Row.NODE_OID.text();

		}
	}	
}

tC.setPropertyValue("assertionAccountId",assertionAccountId);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER row count" disabled="true" id="30e49bd5-5739-4abb-8591-91c73d2836ab">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int expectedSize = 1;
int assertionSize = 0;
int audienceSize = 1;  // Start at one as entity nodes is in audience
int audienceIgnoreSize = 0;
int expectNodeUserRowCount = tC.getPropertyValue("expectNodeUserRowCount").toInteger();

tC.setPropertyValue("z_resultNodeUserRowCount",null);

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	if (tC.getPropertyValue("audienceIgnoreAll").toString() == "false") {
		if ( tC.getPropertyValue("affiliationList") != null) {
			affiliationList = tC.getPropertyValue("affiliationList").toString();
			audienceSize = affiliationList.tokenize(";").size();
			log.info audienceSize;
			log.info "audienceSize BEFORE [$audienceSize]";
		}
		if ( tC.getPropertyValue("audienceIgnoreNodes") != null) {
			audienceIgnoreSize = tC.getPropertyValue("audienceIgnoreNodes").toString().tokenize(";").size();
			log.info "audienceIgnoreSize BEFORE [$audienceIgnoreSize]";
		}

		audienceSize -= audienceIgnoreSize;
		log.info "audienceSize FINAL [$audienceSize]";
	} else {
		log.info "No changes to count";
	}
	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	assertionSize = a.samlGetUUIDNodeUserRowCountbyUUID(tC.getPropertyValue("assertionUUID"));

	tC.setPropertyValue("z_resultNodeUserRowCount",assertionSize.toString());

	if (expectNodeUserRowCount == 0) {
		log.info "ASSERT: Audience Size[$audienceSize] - Received[$assertionSize]";
		assert assertionSize == audienceSize;
	} else {
		log.info "ASSERT: Audience Size[$audienceSize] - Received[$expectNodeUserRowCount]";
		assert audienceSize == expectNodeUserRowCount;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER rows" disabled="true" id="b0366576-fd52-48df-b181-9618237f2030">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));

def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));

String uuid = tC.getPropertyValue("assertionUUID").toString();
String nodeUser = tC.getPropertyValue("assertionUserId").toString();

String resultsDB = "";
String node = "";
List nodeList;

int indexOfcol = 0;
if (tC.getPropertyValue("actionSkipNodeUserCheck") != "true") {
	if (tC.getPropertyValue("expectErrType").toString() == "SUCCESS") {
		log.info "In LOOOOOOP";
	//	assert tC.getPropertyValue("ComputedAudienceList").toString() != 'null';

		/*
		*  Devices should not ever be affilated.
		*/
		/*if (tC.getPropertyValue("isDeviceFlag").toString() != "true") {
			nodeList = tC.getPropertyValue("ComputedAudienceList").toString().tokenize(";");
		} else {
			nodeList = tP.getPropertyValue("nodeDeviceDefault").toString().tokenize(";");
		}*/

		def affiliationList = tC.getPropertyValue("affiliationList").toString().tokenize(";");
		log.info "affiliationList size: "+affiliationList.size();
		if (tC.getPropertyValue("audienceIgnoreNodes") != 'null') {
			ignoreNodesList = tC.getPropertyValue("audienceIgnoreNodes").toString().tokenize(";");
			log.info "ignoreNodesList size: "+ignoreNodesList.size();
			ignoreNodesList.each {
				if(tC.getPropertyValue("NODE_ID").toString() != it.toString()){
						affiliationList = affiliationList.minus(it);
						log.info "affiliationList size: "+affiliationList.size();
				}
						
				}
		}
		
		nodeList = affiliationList;
		log.info "nodeList size is " + nodeList.size();

		nodeList.each {
			assert nodeList.isEmpty() == false;
			String NODE_OID = null;
			String nodeoid = tC.getPropertyValue("NODE_OID").toString();
			log.info "Processing NODE: $it";	
			if(it.toString() == "urn:dece:org:org:dece:dece:cs" || it.toString() == "urn:dece:org:org:dece:coord:cs"){
			log.info "here...";
				NODE_OID =  nodeoid;
			}else{
				indexOfcol = it.lastIndexOf(":");
			node = it.substring(indexOfcol + 1);
			log.info "node is $node";
			 NODE_OID = nodeoidGet.nodeoidGetFromNodeId("$node");
			}
			log.info "here...";
				if (tC.getPropertyValue("isDeviceFlag").toString() == "true") {
					NODE_OID=tP.getPropertyValue("nodeDeviceDefault").toString();
				}
	
			
			String sql = """SELECT to_char(rawtohex(USER_OID)) USER_OID,
				to_char(rawtohex(NODE_OID)) NODE_OID, 
				to_char(rawtohex(NODE_USER_ID)) NODE_USER_ID 
				FROM NODE_USER where NODE_USER_SAML_UUID = '$uuid' 
 				and NODE_OID = hextoraw('$NODE_OID')""";
			try {
				log.info "sql is [$sql]";
				resultsDB = dbUtils.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
			} catch (Throwable e) {
				log.info "ERROR - SelectFromDB issue! - $e";
			} finally {
				log.info "results is [$resultsDB]";
			}
		
			try {
				def myXML = new XmlSlurper().parseText(resultsDB);
	
				String dbUserOID = myXML.ResultSet.Row[0].USER_OID;
				String dbNodeOID = myXML.ResultSet.Row[0].NODE_OID;
				String dbNodeUserOID = myXML.ResultSet.Row[0].NODE_USER_ID;
			}
			catch(Throwable e) {
				log.info "ERROR - XmlSlurper Problem - $e";
			}
			finally {
				log.info "Assert DB USER_OID [$dbUserOID] == [" + tC.getPropertyValue("USER_OID") + "]";
				assert dbUserOID == tC.getPropertyValue("USER_OID").toString();

				log.info "Assert DB NODE_OID [$dbNodeOID] == [$NODE_OID]";
				assert dbNodeOID == NODE_OID;

			} 	
		}
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify LVAL EUDU &amp; EMUC row count" disabled="true" id="9a056991-0a4e-4d18-9bb6-e444da0e74dc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
def username = context.expand( '${#TestCase#Username}' )
username=username.replace(" ","");
String uuid = tC.getPropertyValue("assertionUUID").toString();
String user_oid = tC.getPropertyValue("USER_OID").toString();
String resultsDB = "";
String node = "";
List nodeList;
def myXML = "";
def audienceIgnoreNodes;
int indexOfcol = 0;

if (tC.getPropertyValue("expectErrType").toString() == "SUCCESS") 
{
	assert tC.getPropertyValue("affiliationList").toString() != 'null';

	/*
	*  Devices should not ever be affilated.
	*/
	/*if (tC.getPropertyValue("isDeviceFlag").toString() != "true") 
	{
		nodeList = tC.getPropertyValue("stsComputedAudienceList").toString().tokenize(",");
	} 
	else 
	{
		nodeList = tP.getPropertyValue("nodeDeviceDefault").toString().tokenize(",");
	}*/

	if ( tC.getPropertyValue("affiliationList") != null) {
			affiliationList = tC.getPropertyValue("affiliationList").tokenize(";");
		}
		if ( tC.getPropertyValue("audienceIgnoreNodes") != null) {
			audienceIgnoreNodes = tC.getPropertyValue("audienceIgnoreNodes").tokenize(";");
		}

	audienceIgnoreNodes.each
	{
			affiliationList = affiliationList.minus(it);
	}
		
	nodeList = affiliationList;
	log.info "nodeList size is " + nodeList.size();

	nodeList.each {

		assert nodeList.isEmpty() == false;
		log.info "Processing NODE: $it";
		indexOfcol = it.lastIndexOf(":");
		node = it.substring(indexOfcol + 1);
		String NODE_OID = nodeoidGet.nodeoidGetFromNodeId(node);
		
		String sql = """select pre.entity_id, count(p.policy_oid) as count from policy p, policy_requesting_entity pre where 
								p.status = 'active' and p.policy_class in (100,103,104) 
								and p.policy_oid in (select policy_oid from policy_relationship where policy_actor in 
								(select account_oid from account_user where lower(username) = lower('$username')))
								and pre.policy_oid = p.policy_oid and pre.entity_id = hextoraw('$NODE_OID') group by pre.entity_id""";
		try 
		{
			log.info "sql is [$sql]";
			resultsDB = dbUtils.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
			log.info "resultsDB: "+resultsDB;
		} 
		catch (Throwable e) 
		{
			log.info "ERROR - SelectFromDB issue! - $e";
		} 
		
		myXML = new XmlSlurper().parseText(resultsDB);
		log.info "Node Received: "+myXML.ResultSet.Row[0].ENTITY_ID;
		log.info "Row Count Received: "+myXML.ResultSet.Row[0].COUNT;
		assert myXML.ResultSet.Row[0].ENTITY_ID== NODE_OID;
		assert myXML.ResultSet.Row[0].COUNT == 3;	
	
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify NODE_USER prior removed" disabled="true" id="838a6395-af68-4a5a-ab62-ce61c1f51ba6">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def a;

String assertionUUIDprior = tC.getPropertyValue("assertionUUIDprior").toString();

tC.setPropertyValue("z_resultNodeUserRowCount",null);

if (tC.getPropertyValue("expectErrType") == "SUCCESS" &amp;&amp;  tC.getPropertyValue("assertionUUIDprior").toString() !="null") {

	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	assertionSize = a.samlGetUUIDNodeUserRowCountbyUUID(assertionUUIDprior);

	log.info "ASSERT: No Rows for [$assertionUUIDprior]";
	assert assertionSize == 0;
}
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Copy of Set NODE_OID value based on NODE_ID" disabled="true" id="ab3e913a-2ded-4b2d-b9b5-412db705ddc5"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def nodeoidGet = new dbUtils.dbNode(log,testProject.getPropertyValue("targetSystem"));
def nodeid = testCase.getPropertyValue("NODE_ID");
indexOfcol = nodeid.lastIndexOf(":");
node = nodeid.substring(indexOfcol + 1);

def NODE_OID = null;

NODE_OID = nodeoidGet.nodeoidGetFromNodeId(node);

testCase.setPropertyValue("NODE_OID",""+NODE_OID);
</script></con:config></con:testStep><con:properties><con:property><con:name>ACCOUNT_OID</con:name><con:value>0A51B0086A915410FE61A0549481F9A8</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value>urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>EB0A5EB1544EA00BE0401F0A07994DFF</con:value></con:property><con:property><con:name>assertionROW</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <NODE_USER_SAML_ASSERTION_OID>EB0A5EB15454A00BE0401F0A07994DFF</NODE_USER_SAML_ASSERTION_OID>
      <NODE_OID>CFA7F92E17CB545BE0401F0A05994AE8</NODE_OID>
      <NODE_USER_SAML_ASSERTION_PART1>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHNhbWwycDpSZXNwb25zZSBDb25zZW50PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDpvYnRhaW5lZCIgRGVzdGluYXRpb249Imh0dHBzOi8vc3RkZWNxYXZ1dGwxLnZhLm5ldXN0YXIuY29tOjI0ODUvc2ltcGxlc2FtbC9tb2R1bGUucGhwL3NhbWwvc3Avc2FtbDItYWNzLnBocC9BQ0NFU1MiIElEPSJfMzljYTExNTAtNjU4OS00ZTM3LWE3Y2EtNTUzNzMwYjFkMGFlIiBJblJlc3BvbnNlVG89IjBhZmZmZDIxLTI5OTMtNDljYy1iMzRmLWQ1Yzc2YTk3ZWFmOCIgSXNzdWVJbnN0YW50PSIyMDEzLTExLTEzVDA2OjUwOjIyLjEyNloiIFZlcnNpb249IjIuMCIgeG1sbnM6c2FtbDJwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiPjxzYW1sMjpJc3N1ZXIgeG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPmh0dHA6Ly9jLmRlY2VsbGMuY29tLzwvc2FtbDI6SXNzdWVyPjxzYW1sMnA6U3RhdHVzPjxzYW1sMnA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8+PC9zYW1sMnA6U3RhdHVzPjxzYW1sMjpBc3NlcnRpb24gSUQ9Il84MzgwOTIwZi0wZjU0LTQ1ZTItOTRlOC03ODIzMDRmODQyNzYiIElzc3VlSW5zdGFudD0iMjAxMy0xMS0xM1QwNjo1MDoyMi4xMjZaIiBWZXJzaW9uPSIyLjAiIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj48c2FtbDI6SXNzdWVyPmh0dHA6Ly9jLmRlY2VsbGMuY29tLzwvc2FtbDI6SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPgo8ZHM6U2lnbmVkSW5mbz4KPGRzOkNhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz4KPGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNyc2Etc2hhMSIvPgo8ZHM6UmVmZXJlbmNlIFVSST0iI184MzgwOTIwZi0wZjU0LTQ1ZTItOTRlOC03ODIzMDRmODQyNzYiPgo8ZHM6VHJhbnNmb3Jtcz4KPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+CjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiPjxlYzpJbmNsdXNpdmVOYW1lc3BhY2VzIFByZWZpeExpc3Q9ImRzIHNhbWwyIHhzIiB4bWxuczplYz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+PC9kczpUcmFuc2Zvcm0+CjwvZHM6VHJhbnNmb3Jtcz4KPGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIi8+CjxkczpEaWdlc3RWYWx1ZT5leTZubkxvcTVEcTVxdDczUjVadnlRMStTcWs9PC9kczpEaWdlc3RWYWx1ZT4KPC9kczpSZWZlcmVuY2U+CjwvZHM6U2lnbmVkSW5mbz4KPGRzOlNpZ25hdHVyZVZhbHVlPgplWXNCZWRjK1V3ek1DR3A2eVBrR0VjRVBzM2c5SFRESDllelJBSlBiOU0xd3JSOXZyc0J4RGNWeVh1cXJsYmZRQ2tsZUlLT0MzN29mCmtJZm5aM0xyNkFJVjh5NHhnRFErcGJLczViMWpxZ0R6M2hweXRSdmd1MmVHdjZYcFBRb05YdDVMeXJaMTI0UHlQZHpScEJ1cVRGQkEKNGdCRUZwM2EzbS9CbWw5REkxOD0KPC9kczpTaWduYXR1cmVWYWx1ZT4KPC9kczpTaWduYXR1cmU+PHNhbWwyOlN1YmplY3Q+PHNhbWwyOk5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQtZm9ybWF0OnBlcnNpc3RlbnQiPnVybjpkZWNlOnVzZXJpZDpvcmc6ZGVjZTpFQjBBNTQwQkNBQjk1QTIxRTA0MDFGMEEwNzk5M0NEMTwvc2FtbDI6TmFtZUlEPjxzYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uIE1ldGhvZD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmNtOnNlbmRlci12b3VjaGVzIj48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgSW5SZXNwb25zZVRvPSIwYWZmZmQyMS0yOTkzLTQ5Y2MtYjM0Zi1kNWM3NmE5N2VhZjgiIE5vdE9uT3JBZnRlcj0iMjAxMy0xMS0xM1QwOTo1MDoyMi4xMjZaIiBSZWNpcGllbnQ9Imh0dHBzOi8vc3RkZWNxYXZ1dGwxLnZhLm5ldXN0YXIuY29tOjI0ODUvc2ltcGxlc2FtbC9tb2R1bGUucGhwL3NhbWwvc3Avc2FtbDItYWNzLnBocC9DRkE3RjkyRTE3Q0I1NDVCRTA0MDFGMEEwNTk5NEFFOCIvPjwvc2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbj48L3NhbWwyOlN1YmplY3Q+PHNhbWwyOkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDEzLTExLTEzVDA2OjUwOjEyLjEyNloiIE5vdE9uT3JBZnRlcj0iMjAxNC0xMS0xM1QwNjo1MDoyMi4xMjZaIj48c2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48c2FtbDI6QXVkaWVuY2U+dXJuOmRlY2U6b3JnOm9yZzpkZWNlOkFDQ0VTUzwvc2FtbDI6QXVkaWVuY2U+PC9zYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPjwvc2FtbDI6Q29uZGl0aW9ucz48c2FtbDI6QWR2aWNlPjxzYW1sMjpBc3NlcnRpb25VUklSZWY+aHR0cHM6Ly9xYS5xLnV2dnUuY29tOjcwMDEvcmVzdC8xLzA3L1NlY3VyaXR5VG9rZW4vQXNzZXJ0aW9uL184MzgwOTIwZi0wZjU0LTQ1ZTItOTRlOC03ODIzMDRmODQyNzY8L3NhbWwyOkFzc2VydGlvblVSSVJlZj48L3NhbWwyOkFkdmljZT48c2FtbDI6QXV0aG5TdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDEzLTExLTEzVDA2OjUwOjIyLjEyNloiIFNlc3Npb25JbmRleD0iXzgzODA5MjBmLTBmNTQtNDVlMi05NGU4LTc4MjMwNGY4NDI3NiI+PHNhbWwyOkF1dGhuQ29udGV4dD48c2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY+dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6UGFzc3dvcmQ8L3NhbWwyOkF1dGhuQ29u</NODE_USER_SAML_ASSERTION_PART1>
      <NODE_USER_SAML_ASSERTION_PART2>dGV4dENsYXNzUmVmPjxzYW1sMjpBdXRoZW50aWNhdGluZ0F1dGhvcml0eT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6Y29vcmRpbmF0b3I8L3NhbWwyOkF1dGhlbnRpY2F0aW5nQXV0aG9yaXR5Pjwvc2FtbDI6QXV0aG5Db250ZXh0Pjwvc2FtbDI6QXV0aG5TdGF0ZW1lbnQ+PHNhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48c2FtbDI6QXR0cmlidXRlIE5hbWU9ImFjY291bnRJRCIgTmFtZUZvcm1hdD0idXJuOmRlY2U6dHlwZTphY2NvdW50SUQiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJ4czpzdHJpbmciPnVybjpkZWNlOmFjY291bnRpZDpvcmc6ZGVjZTpFQjBBNTk5QkY0NzE3MzQxRTA0MDFGMEEwNTk5M0Q4Mjwvc2FtbDI6QXR0cmlidXRlVmFsdWU+PC9zYW1sMjpBdHRyaWJ1dGU+PC9zYW1sMjpBdHRyaWJ1dGVTdGF0ZW1lbnQ+PC9zYW1sMjpBc3NlcnRpb24+PC9zYW1sMnA6UmVzcG9uc2U+</NODE_USER_SAML_ASSERTION_PART2>
      <NODE_USER_SAML_UUID>_8380920f-0f54-45e2-94e8-782304f84276</NODE_USER_SAML_UUID>
      <CREATED_DATE>2013-11-13 06:50:22.0</CREATED_DATE>
      <NODE_USER_ID>EB0A5EB1544FA00BE0401F0A07994DFF</NODE_USER_ID>
      <NODE_ACCOUNT_ID>EB0A5EB1544EA00BE0401F0A07994DFF</NODE_ACCOUNT_ID>
      <STATUS>active</STATUS>
      <EXPIRATION_DATE>2014-11-13 06:50:22.0</EXPIRATION_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUIDprior</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>audienceIgnoreAll</con:name><con:value>false</con:value></con:property><con:property><con:name>audienceIgnoreNodes</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>base64EncodedSignedAuthnRequest</con:name><con:value>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOkF1dGhuUmVxdWVzdCB4bWxuczpzYW1sMnA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgQXNzZXJ0aW9uQ29uc3VtZXJTZXJ2aWNlVVJMPSJodHRwczovL3N0ZGVjcWF2dXRsMS52YS5uZXVzdGFyLmNvbToyNDg1L3NpbXBsZXNhbWwvbW9kdWxlLnBocC9zYW1sL3NwL3NhbWwyLWFjcy5waHAvQzBDRUY4RTA4Q0UxQzdENkUwNDAxRjBBMDU5OTEyMEIiIERlc3RpbmF0aW9uPSJodHRwczovL3FhLnMudXZ2dS5jb206NzAwMS9zZWN1cml0eS9kZWxlZ2F0aW9uL3NhbWwvbG9naW5zZXJ2aWNlL2xvZ2luIiBGb3JjZUF1dGhuPSJ0cnVlIiBJRD0iNmQxMGYyMTEtN2JiZS00MzI3LWJjYTMtY2UzZTc5MDE5ZGYyIiBJc3N1ZUluc3RhbnQ9IjIwMTQtMDMtMzFUMTU6Mzg6NDQuMDVaIiBQcm90b2NvbEJpbmRpbmc9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpiaW5kaW5nczpIVFRQLVBPU1QiIFZlcnNpb249IjIuMCI%2BPHNhbWwyOklzc3VlciB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI%2BdXJuOmRlY2U6b3JnOm9yZzpkZWNlOlJFVDwvc2FtbDI6SXNzdWVyPjxzYW1sMnA6TmFtZUlEUG9saWN5IEFsbG93Q3JlYXRlPSJ0cnVlIiBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQtZm9ybWF0OnRyYW5zaWVudCIvPjxzYW1sMnA6RXh0ZW5zaW9ucz48bnM0OlBvbGljeUxpc3QgeG1sbnM6bnM0PSJodHRwOi8vd3d3LmRlY2VsbGMub3JnL3NjaGVtYS8yMDEzLzEwL2Nvb3JkaW5hdG9yIj48bnM0OlBvbGljeT48bnM0OlBvbGljeUNsYXNzPnVybjpkZWNlOnR5cGU6cG9saWN5OlVzZXJMaW5rQ29uc2VudDwvbnM0OlBvbGljeUNsYXNzPjwvbnM0OlBvbGljeT48L25zNDpQb2xpY3lMaXN0Pjwvc2FtbDJwOkV4dGVuc2lvbnM%2BPHNhbWwyOkNvbmRpdGlvbnMgeG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPjxzYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPjxzYW1sMjpBdWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6UkVUPC9zYW1sMjpBdWRpZW5jZT48c2FtbDI6QXVkaWVuY2U%2BdXJuOmRlY2U6b3JnOm9yZzpkZWNlOkxMQVNQPC9zYW1sMjpBdWRpZW5jZT48c2FtbDI6QXVkaWVuY2U%2BdXJuOmRlY2U6b3JnOm9yZzpkZWNlOkRMQVNQPC9zYW1sMjpBdWRpZW5jZT48L3NhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24%2BPC9zYW1sMjpDb25kaXRpb25zPjxzYW1sMjpTdWJqZWN0IHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj48c2FtbDI6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOm5hbWVpZC1mb3JtYXQ6cGVyc2lzdGVudCI%2Bc2FudG9zaC5kd2l2ZWRpQG5ldXN0YXIuYml6PC9zYW1sMjpOYW1lSUQ%2BPC9zYW1sMjpTdWJqZWN0PjxTaWduYXR1cmUgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxTaWduZWRJbmZvPjxDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMS9SRUMteG1sLWMxNG4tMjAwMTAzMTUiLz48U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIi8%2BPFJlZmVyZW5jZSBVUkk9IiM2ZDEwZjIxMS03YmJlLTQzMjctYmNhMy1jZTNlNzkwMTlkZjIiPjxUcmFuc2Zvcm1zPjxUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPjwvVHJhbnNmb3Jtcz48RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiLz48RGlnZXN0VmFsdWU%2BakxvUkl5dWx3WGczNlZ6ZXVCVk0vdzJxSGpBPTwvRGlnZXN0VmFsdWU%2BPC9SZWZlcmVuY2U%2BPC9TaWduZWRJbmZvPjxTaWduYXR1cmVWYWx1ZT5jbHZNTG0xY1p2Z0pIWVhsbjQ4VllGemVyWEY1Rko4MndIQ1Nubm1Icmc0aFNObE5TanIzYXZFeUF1Q0kzTHFFRzlvQjJ0Ymt6VjY2CmRLZDBzVXZ2SGdFK1pnTnBLaWloYy9tdTQvMHdCOHNyNFJiUXo3Vmxna2NuOW9IM0RHb3dlUVIzK1psdGpydW5JZmtad3ZPcXdqMlMKcHlSN3ZtOU5QNVpudVArelF2YjB1WGkrWE9TcEJOWUZBdU9EWVJtYk1tOURHRTh4b21lL0F0dEFTQWQ2VVFhRlIvUlVXZlVuMW9DMwpUbnYrbElaQUJYejNLNWh5RnlYSWdYZmNNQmxKZDBFMDROSUh0WG5pNUhPWGNac090Y0U1V1NtSThLdGdZTVppZEN4KzZGbGZjWmY5CkY5NzdVYTdhVllWMkl0S1lkVnhtWlFvTWZydVJyeVBCUWxCM2ppbkplMVFIeHJYNW43TVA3NHVRYlVWbm5jOEtsTjNCalNXdHFqZDEKRGtKWTcrMXF2Vzd1Y3RRRXVMeFUxN3pDUFFKQUl0WElIVHVid0RnRWZpbFQ1ZmlYSnBmR09wck5SL3o1WUFBczZiVVNVWUdEMFNPcgpEcktra00xWXYzWWluWmZXV2RBWnhCbFFRZVdNY3g3QU9rd2VkTitaTmFZQ3pKaFFNaFBNUDl6eUhuNkxEOE1DUmVuWk9WZ3h4ckM5CmhoblI5eEFVVlRHei80eG0vbW9NSUxmS3R5OHQ3WEVtbVlIb3dLRDM3MUE3aWFRdHdaSWEyNkxIQ1NWUHgwbHlER2pWQW4yQ2ZxOGMKMTkrNE9BUEY3cER1MkFxcmxTZ3R1dCs3SGZFREo5cFlJQ2NPZmRuZEttUzB4ekhYL3lSUU45eFI0YnJoQUNXSUlmK3M4bVhQSzc4PTwvU2lnbmF0dXJlVmFsdWU%2BPEtleUluZm8%2BPFg1MDlEYXRhPjxYNTA5U3ViamVjdE5hbWU%2BMS4yLjg0MC4xMTM1NDkuMS45LjE9IzE2MGY2NjZmNmY0MDZlNjU3NTczNzQ2MTcyMmU2MzZmNmQsQ049dXJuOmRlY2U6b3JnOm9yZzpkZWNlOlJFVCxMPVN0ZXJsaW5nLFNUPVZBLEM9VVM8L1g1MDlTdWJqZWN0TmFtZT48WDUwOUNlcnRpZmljYXRlPk1JSUR6ekNDQXpnQ0FnVmlNQTBHQ1NxR1NJYjNEUUVCQlFVQU1Hb3hFREFPQmdOVkJBb1RCMDVsZFhOMFlYSXhDekFKQmdOVkJBc1QKQWxGQk1SRXdEd1lEVlFRSEV3aFRkR1Z5YkdsdVp6RVJNQThHQTFVRUNCTUlWbWx5WjJsdWFXRXhDekFKQmdOVkJBWVRBbFZUTVJZdwpGQVlEVlFRREV3MXVaWFZ6ZEdGeUxuRmhMbU5oTUI0WERURXpNRFV6TURFME16Y3lNRm9YRFRFNE1EVXlPVEUwTXpjeU1Gb3djVEVMCk1Ba0dBMVVFQmhNQ1ZWTXhDekFKQmdOVkJBZ1RBbFpCTVJFd0R3WURWUVFIRXdoVGRHVnliR2x1WnpFaU1DQUdBMVVFQXhNWmRYSnUKT21SbFkyVTZiM0puT205eVp6cGtaV05sT2xKRlZERWVNQndHQ1NxR1NJYjNEUUVKQVJZUFptOXZRRzVsZFhOMFlYSXVZMjl0TUlJQwpJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBZzhBTUlJQ0NnS0NBZ0VBenY1VitsTlRRUllkbHZUU0J4RVp4V3Zqem5pZ2tVKzZza1lECkc3ODkyUDBsbG90dGlESjJqWUpRQ0JXZWRXbkplQWhCVnlNeHVJYmczV3hiS1dYaE1QWCtsYk9SYUxiYmZ0ZTJHMEl2Q0l6VHVOYlcKSURqUnM2bjJBcEpzcEhFNzlvQU1IMTJ4K1p3WEc4WW9SL1RWY1UyL2FiNE93Q05rczAvaGYzOVNvczN6MGN5c2hzMXZIRFhaYTZPbApLL002eWhXR3J2ZFlyUXZVRWlLM24weWlLRUhncWdEWjJGUVkzcVA1ZkNIS3J4Y0hvYnMybHVpOXFvalMvM29TV0F5aXdVOHg1S1YxCmtUaHZUT25nRlIycU56MnBMSWFpS0RucHpkdkxHVUtqKy9tck5zVGlVTWMwU1ZxVFpPeVh1ZThVMjRMOWZUUG5DRFUvNVJIT2cwOUUKdTJ5YysvMVNhamxmWkpEakRrUmdpclNsQXR2RUtuR2RXOVViQ0NTWjlVTExFanJ0eHMreC9RU0ROdk9ZRnNNWFV4YmlSTll3SnlCdwp0NkQzQU9LQ0dQZWVIVFlES3BERHg2aEExRDJGb3U3emNUYmdEZ1RyUG03STFjczJHUEE5NmNTNkhHRG5aUU03aHlCYWVrNmJYem9rCjZJbU5CSVV2dFhJV0FLcjFIM0VuRlNwNkRCanZwRVltS3dyV2FTZ1VsUzZRdHkwVHJRMjhBL3hPYTFtSzZrNGoxdEk4VURySDc3aE4KTGVPa3ZmUXdBNTRBYndtL1NpMFZ2bGFiMmVHWFNuTElIYys4R3JDU1FCTU5UU3BQVjFic041VjRxaWVMeC9WdmMxb211TGJMaThZMwp4cGljOTg5amdEUkw1emVJdm1ZNk96TWRIYkthbGI1Tk9wYVJZcTBDQXdFQUFUQU5CZ2txaGtpRzl3MEJBUVVGQUFPQmdRQzBVRGpVCjg4eU15QTZYb3lqWEhEKzA2emdOSmZQWHBEZDV0UFdGam9mdFhxNnVBZEsxaHpwRGJYU0xoNWgxTS9lZ0pCRjRoR2NPRGZWWEUzZGEKVWIvalg2MU5SQUd4TlNDWFJCQm1oQTgrb3BMdHlZVlZjTnRNYlBOUnIyb29oeGd3c2x0S25SUGRXaTJDQWs5VGhoVnY4K2sreXZjNAp6QVVsZnJCajYzMkNVdz09PC9YNTA5Q2VydGlmaWNhdGU%2BPC9YNTA5RGF0YT48L0tleUluZm8%2BPC9TaWduYXR1cmU%2BPC9zYW1sMnA6QXV0aG5SZXF1ZXN0Pg%3D%3D</con:value></con:property><con:property><con:name>computedAssertionXML</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2p:Response Consent="urn:oasis:names:tc:SAML:2.0:consent:obtained" Destination="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/ACCESS" ID="_39ca1150-6589-4e37-a7ca-553730b1d0ae" InResponseTo="0afffd21-2993-49cc-b34f-d5c76a97eaf8" IssueInstant="2013-11-13T06:50:22.126Z" Version="2.0" xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol"><saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">http://c.decellc.com/</saml2:Issuer><saml2p:Status><saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/></saml2p:Status><saml2:Assertion ID="_8380920f-0f54-45e2-94e8-782304f84276" IssueInstant="2013-11-13T06:50:22.126Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_8380920f-0f54-45e2-94e8-782304f84276">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>ey6nnLoq5Dq5qt73R5ZvyQ1+Sqk=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
eYsBedc+UwzMCGp6yPkGEcEPs3g9HTDH9ezRAJPb9M1wrR9vrsBxDcVyXuqrlbfQCkleIKOC37of
kIfnZ3Lr6AIV8y4xgDQ+pbKs5b1jqgDz3hpytRvgu2eGv6XpPQoNXt5LyrZ124PyPdzRpBuqTFBA
4gBEFp3a3m/Bml9DI18=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:EB0A540BCAB95A21E0401F0A07993CD1</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="0afffd21-2993-49cc-b34f-d5c76a97eaf8" NotOnOrAfter="2013-11-13T09:50:22.126Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/CFA7F92E17CB545BE0401F0A05994AE8"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2013-11-13T06:50:12.126Z" NotOnOrAfter="2014-11-13T06:50:22.126Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:ACCESS</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_8380920f-0f54-45e2-94e8-782304f84276</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2013-11-13T06:50:22.126Z" SessionIndex="_8380920f-0f54-45e2-94e8-782304f84276"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:EB0A599BF4717341E0401F0A05993D82</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></saml2p:Response>]]></con:value></con:property><con:property><con:name>dbassertionNodeaccountid</con:name><con:value>urn:dece:accountid:org:dece:EB0A599BF4717341E0401F0A05993D82</con:value></con:property><con:property><con:name>dbassertionNodeuserid</con:name><con:value>urn:dece:userid:org:dece:EB0A540BCAB95A21E0401F0A07993CD1</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectNodeUserRowCount</con:name><con:value>0</con:value></con:property><con:property><con:name>httpBody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>jksFile</con:name><con:value>/opt/dece/certs//RET.jks</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_OID</con:name><con:value>C0CEF8E08CE1C7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>responsetype</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>signedAuthnRequest</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:AuthnRequest xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" AssertionConsumerServiceURL="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/C0CEF8E08CE1C7D6E0401F0A0599120B" Destination="https://qa.s.uvvu.com:7001/security/delegation/saml/loginservice/login" ForceAuthn="true" ID="6d10f211-7bbe-4327-bca3-ce3e79019df2" IssueInstant="2014-03-31T15:38:44.05Z" ProtocolBinding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Version="2.0"><saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:RET</saml2:Issuer><saml2p:NameIDPolicy AllowCreate="true" Format="urn:oasis:names:tc:SAML:2.0:nameid-format:transient"/><saml2p:Extensions><ns4:PolicyList xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"><ns4:Policy><ns4:PolicyClass>urn:dece:type:policy:UserLinkConsent</ns4:PolicyClass></ns4:Policy></ns4:PolicyList></saml2p:Extensions><saml2:Conditions xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DLASP</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Subject xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">santosh.dwivedi@neustar.biz</saml2:NameID></saml2:Subject><Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/><SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><Reference URI="#6d10f211-7bbe-4327-bca3-ce3e79019df2"><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/></Transforms><DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><DigestValue>jLoRIyulwXg36VzeuBVM/w2qHjA=</DigestValue></Reference></SignedInfo><SignatureValue>clvMLm1cZvgJHYXln48VYFzerXF5FJ82wHCSnnmHrg4hSNlNSjr3avEyAuCI3LqEG9oB2tbkzV66
dKd0sUvvHgE+ZgNpKiihc/mu4/0wB8sr4RbQz7Vlgkcn9oH3DGoweQR3+ZltjrunIfkZwvOqwj2S
pyR7vm9NP5ZnuP+zQvb0uXi+XOSpBNYFAuODYRmbMm9DGE8xome/AttASAd6UQaFR/RUWfUn1oC3
Tnv+lIZABXz3K5hyFyXIgXfcMBlJd0E04NIHtXni5HOXcZsOtcE5WSmI8KtgYMZidCx+6FlfcZf9
F977Ua7aVYV2ItKYdVxmZQoMfruRryPBQlB3jinJe1QHxrX5n7MP74uQbUVnnc8KlN3BjSWtqjd1
DkJY7+1qvW7uctQEuLxU17zCPQJAItXIHTubwDgEfilT5fiXJpfGOprNR/z5YAAs6bUSUYGD0SOr
DrKkkM1Yv3YinZfWWdAZxBlQQeWMcx7AOkwedN+ZNaYCzJhQMhPMP9zyHn6LD8MCRenZOVgxxrC9
hhnR9xAUVTGz/4xm/moMILfKty8t7XEmmYHowKD371A7iaQtwZIa26LHCSVPx0lyDGjVAn2Cfq8c
19+4OAPF7pDu2AqrlSgtut+7HfEDJ9pYICcOfdndKmS0xzHX/yRQN9xR4brhACWIIf+s8mXPK78=</SignatureValue><KeyInfo><X509Data><X509SubjectName>1.2.840.113549.1.9.1=#160f666f6f406e6575737461722e636f6d,CN=urn:dece:org:org:dece:RET,L=Sterling,ST=VA,C=US</X509SubjectName><X509Certificate>MIIDzzCCAzgCAgViMA0GCSqGSIb3DQEBBQUAMGoxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsT
AlFBMREwDwYDVQQHEwhTdGVybGluZzERMA8GA1UECBMIVmlyZ2luaWExCzAJBgNVBAYTAlVTMRYw
FAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEzMDUzMDE0MzcyMFoXDTE4MDUyOTE0MzcyMFowcTEL
MAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEiMCAGA1UEAxMZdXJu
OmRlY2U6b3JnOm9yZzpkZWNlOlJFVDEeMBwGCSqGSIb3DQEJARYPZm9vQG5ldXN0YXIuY29tMIIC
IjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAzv5V+lNTQRYdlvTSBxEZxWvjznigkU+6skYD
G7892P0llottiDJ2jYJQCBWedWnJeAhBVyMxuIbg3WxbKWXhMPX+lbORaLbbfte2G0IvCIzTuNbW
IDjRs6n2ApJspHE79oAMH12x+ZwXG8YoR/TVcU2/ab4OwCNks0/hf39Sos3z0cyshs1vHDXZa6Ol
K/M6yhWGrvdYrQvUEiK3n0yiKEHgqgDZ2FQY3qP5fCHKrxcHobs2lui9qojS/3oSWAyiwU8x5KV1
kThvTOngFR2qNz2pLIaiKDnpzdvLGUKj+/mrNsTiUMc0SVqTZOyXue8U24L9fTPnCDU/5RHOg09E
u2yc+/1SajlfZJDjDkRgirSlAtvEKnGdW9UbCCSZ9ULLEjrtxs+x/QSDNvOYFsMXUxbiRNYwJyBw
t6D3AOKCGPeeHTYDKpDDx6hA1D2Fou7zcTbgDgTrPm7I1cs2GPA96cS6HGDnZQM7hyBaek6bXzok
6ImNBIUvtXIWAKr1H3EnFSp6DBjvpEYmKwrWaSgUlS6Qty0TrQ28A/xOa1mK6k4j1tI8UDrH77hN
LeOkvfQwA54Abwm/Si0Vvlab2eGXSnLIHc+8GrCSQBMNTSpPV1bsN5V4qieLx/Vvc1omuLbLi8Y3
xpic989jgDRL5zeIvmY6OzMdHbKalb5NOpaRYq0CAwEAATANBgkqhkiG9w0BAQUFAAOBgQC0UDjU
88yMyA6XoyjXHD+06zgNJfPXpDd5tPWFjoftXq6uAdK1hzpDbXSLh5h1M/egJBF4hGcODfVXE3da
Ub/jX61NRAGxNSCXRBBmhA8+opLtyYVVcNtMbPNRr2oohxgwsltKnRPdWi2CAk9ThhVv8+k+yvc4
zAUlfrBj632CUw==</X509Certificate></X509Data></KeyInfo></Signature></saml2p:AuthnRequest>]]></con:value></con:property><con:property><con:name>sName</con:name><con:value>DelegationTokenCreate_EmailBased</con:value></con:property><con:property><con:name>subject</con:name><con:value>santosh.dwivedi@neustar.biz</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_001_DTCreate_UnVerified_RTL_User_created_with_AudienceList</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:token:DelegationTokenRequest</con:value></con:property><con:property><con:name>unSignedAuthnRequest</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:AuthnRequest xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" AssertionConsumerServiceURL="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/C0CEF8E08CE1C7D6E0401F0A0599120B" Destination="https://qa.s.uvvu.com:7001/security/delegation/saml/loginservice/login" ForceAuthn="true" ID="6d10f211-7bbe-4327-bca3-ce3e79019df2" IssueInstant="2014-03-31T15:38:44.05Z" ProtocolBinding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Version="2.0"><saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:RET</saml2:Issuer><saml2p:NameIDPolicy AllowCreate="true" Format="urn:oasis:names:tc:SAML:2.0:nameid-format:transient"/><saml2p:Extensions><ns4:PolicyList xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"><ns4:Policy><ns4:PolicyClass>urn:dece:type:policy:UserLinkConsent</ns4:PolicyClass></ns4:Policy></ns4:PolicyList></saml2p:Extensions><saml2:Conditions xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DLASP</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Subject xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">santosh.dwivedi@neustar.biz</saml2:NameID></saml2:Subject></saml2p:AuthnRequest>]]></con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1396294714790</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value>1B51A2686A915410FE61A0549481F9A8</con:value></con:property><con:property><con:name>UUID</con:name><con:value>6d10f211-7bbe-4327-bca3-ce3e79019df2</con:value></con:property><con:property><con:name>z_resultNodeUserRowCount</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ca40557e-002f-42ba-a0fd-470051fc8b75</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07f805a5-22a5-411d-9c98-72b32712408f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f2c3ad04-b40d-4097-81fc-3cb095d52d65</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d0121006-d942-4dbb-9e17-82e85ad23bdd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b063d6aa-5387-415b-a964-65082e805676</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STSGet" searchProperties="true" id="aa30f53e-0d82-4fb2-a499-2fac92e89388">
      <con:settings/>
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="0f090801-9a49-46db-a845-05da48ac16a1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUID", null);
tC.setPropertyValue("NODE_ID", null);
tC.setPropertyValue("expectErrTypeSTSGET", null);

</script></con:config></con:testStep>
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="c2479899-7a0f-4f2a-b83f-893786ec0e2e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

tC.setPropertyValue("assertionUUID", callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("expectErrTypeSTSGET", callTC.getPropertyValue("expectErrTypeSTSGET"));
tC.setPropertyValue("NODE_ID", callTC.getPropertyValue("NODE_ID"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call Set PEM File" id="e2c9fb47-4667-40af-8b3e-b66fc7a551f6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem");
myTC.setPropertyValue("NODE_ID",tC.getPropertyValue("NODE_ID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - STSGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="GET - STSGet" id="1ed58b12-0194-444c-a34c-4ebaf60646ca"><con:settings/><con:config service="STSGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{assertionUUID}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STSGet" mediaType="application/xml" sslKeystore="RET_concat.pem" accept="" id="01ff10df-12b6-4a9e-aff5-2729234d23f5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:originalUri>https://qa1.q.uvvu.com/rest/1/11/SecurityToken/Assertion/_d655a2ae-97f6-4ca5-9072-de2aff181cad</con:originalUri><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="assertionUUID" value="${#TestCase#assertionUUID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="2a0b871e-4c64-48ce-bc72-e9589084d01f">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('GET - STSGet');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");
String XMLbody = "";

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();

rawResp = new ByteArrayOutputStream();

rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;
log.info "PATTY " + strVal.indexOf("&lt;?xml version=\"1.0\" ")

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
if (startAssert > 0) {
	XMLbody  = strVal.substring(startAssert, strVal.length());
}

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="6465e275-61fd-4784-b3bf-10d1b9fbb4c3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def url = tP.getPropertyValue("targetURL");
def assertionUUID = tC.getPropertyValue("assertionUUID");

def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrTypeSTSGET");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection = "Keep-Alive";

String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

this.log.info "expectErrType is $expectErrType";
 
if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
	tC.setPropertyValue("expectErrTypeSTSGet",expectErrType);
}


switch (expectErrType) {

	
	case "Forbidden":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "Forbidden";
		errorReason = "Unknown Error";
		break;
	case "FORBIDDEN_INVALID_ROLE":
		errorReason = "forbidden";
		errorID = "urn:dece:errorid:org:dece:securitycontext:Forbidden:1120";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
		break;
	case "FORBIDDEN_INVALID_USER_STATUS":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:InvalidUserStatus";
		errorReason = "User does not have proper status to build token";
		
		break;
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "Forbidden";
		errorReason = "forbidden";
	break;
	case "FORBIDDEN:1119":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1119";
		errorReason = "The request is not authorized.";
	break;
	case "UNAUTHORIZED":
		expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		expectHTTPcontenttype = "text/xml";
		contentLengthZero = true;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = false;
		
	break;
	case "token_rejected":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "text/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:"+expectErrType;
		errorReason = "The request is not authorized.";
		break;
		
	case "unauthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorReason = "The request is not authorized.";
		break;
		
	case "INVALID_ASSERTION":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "text/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:InvalidAssertion";
		errorReason = "The request is not authorized.";
		break;
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	

if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Locationaccount
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

this.log.info "expectErrType [$expectErrType]";

if (dobodyXML) {
	if (XMLbody.length() > 0) {
			def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", ds: "http://www.w3.org/2000/09/xmldsig#");
		if (expectErrType == "SUCCESS") {
			// Verify response sizes...
			this.log.info "Assertion size: " + myXML.size();
			
			assert myXML.size() == 1;
			assert myXML."ds:Signature".size()    == 1;
			assert myXML."ds:Signature"."ds:SignedInfo".size()   == 1;
			assert myXML."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
			assert myXML."ds:Signature"."ds:SignatureValue".size()  == 1;
			//assert myXML."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
			assert myXML."saml2:Subject"."saml2:NameID".size() == 1;
			assert myXML."saml2:Advice"."saml2:AssertionURIRef".size() == 1;
			
			def samlRespNodeAccount = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
				def ExpeAssertionURIRef = "$url/rest/$major/$minor/SecurityToken/Assertion/$assertionUUID";
				
				this.log.info "AssertionURIRef: Expect[$ExpeAssertionURIRef] Received: " + myXML."saml2:Advice"."saml2:AssertionURIRef".toString();
				//assert myXML.Error.Reason.toString() == ExpeAssertionURIRef;
		} else {
			// ErrorCode
			this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
			assert myXML.Error.@ErrorID.toString() == errorID;
	
			// ErrorReason
			
			this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
			assert myXML.Error.Reason.toString() == errorReason;
			
		
			// ErrorLink
			/*
			this.log.info "ErrorLink: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
			assert myXML.Error.ErrorLink.toString() == errorLink;
			*/
		}
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get Node Account and Node User" id="e0abc928-80b5-4401-8e2f-6af4f71602df"><con:settings/><con:config><script>
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


if(testCase.getPropertyValue("expectErrTypeSTSGET")=="SUCCESS")
{
def testStep = testCase.getTestStepByName('GET - STSGet');
httpBody = testStep.httpRequest.response.getResponseContent().toString();

def myXML = new XmlSlurper().parseText(httpBody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");
String deviceNodeAccountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
String deviceNodeUserId = myXML."saml2:Subject"."saml2:NameID";

testCase.setPropertyValue("NODE_ACCOUNT_ID_FULL", deviceNodeAccountId);
testCase.setPropertyValue("NODE_USER_ID_FULL", deviceNodeUserId);
}</script></con:config></con:testStep><con:testStep type="groovy" name="Deflate and Base64 Encode the Assertion" id="bd8aa445-5aca-4e52-aa92-41ed03f1498e"><con:settings/><con:config><script>import urlFunctions.urlFunctions; 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

if(testCase.getPropertyValue("expectErrTypeSTSGET")=="SUCCESS")
{
def testStep = testCase.getTestStepByName('GET - STSGet');
rawResponse = testStep.httpRequest.response.getRawResponseData();
strRawResponse  = new String(rawResponse);

//startAssert = strRawResponse.indexOf("&lt;?xml version=\"1.0\" ");
//String httpBody = strRawResponse.substring(startAssert, strRawResponse.length());

int startAssert = strRawResponse.indexOf("&lt;saml2:Assertion ");
int endAssert = strRawResponse.indexOf("&lt;/saml2:Assertion>");

String samlAssertion = strRawResponse.substring(startAssert, endAssert + 18).trim();

myURLFunctions = new urlFunctions(log);
samlAssertion = myURLFunctions.deflateBase64Encode(samlAssertion);

testCase.setPropertyValue("SAML", samlAssertion);
}</script></con:config></con:testStep><con:testStep type="groovy" name="Return Properties to Calling Test Case" id="03696c7b-b910-41f0-8173-c1d484cdcf58"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTestCaseName = testCase.getPropertyValue("tName");
def callingTestSuiteName = testCase.getPropertyValue("sName");

if(testCase.getPropertyValue("expectErrTypeSTSGET")=="SUCCESS")
{
def callingTestCase = testProject.getTestSuiteByName(callingTestSuiteName).getTestCaseByName(callingTestCaseName)

callingTestCase.setPropertyValue("SAML", "SAML2 Assertion="+testCase.getPropertyValue("SAML"));

if(testProject.getPropertyValue("versionMinor")!=testProject.getPropertyValue("versionURLEncode"))
{
	callingTestCase.setPropertyValue("NODE_ACCOUNT_ID_FULL", testCase.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
	callingTestCase.setPropertyValue("NODE_USER_ID_FULL", testCase.getPropertyValue("NODE_USER_ID_FULL"));
}
else
{
	callingTestCase.setPropertyValue("NODE_ACCOUNT_ID_FULL", URLEncoder.encode(testCase.getPropertyValue("NODE_ACCOUNT_ID_FULL"),"UTF-8"));
	callingTestCase.setPropertyValue("NODE_USER_ID_FULL", URLEncoder.encode(testCase.getPropertyValue("NODE_USER_ID_FULL"),"UTF-8"));
}
}
testProject.setPropertyValue("targetURL",testProject.getPropertyValue("targetHost")+":"+testProject.getPropertyValue("targetPort"));</script></con:config></con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>tName</con:name><con:value>TC_DECE_004_DTCreate_Verify_UUID_status_for_deletion_of_ULC</con:value></con:property><con:property><con:name>sName</con:name><con:value>3_DTCreate_and_SAML_Exchange_FUNC</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_9d602c50-80bf-4c93-9362-401876e65ae2</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:18245C6DC8F61F28E0533E991F0A053B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:18245C6DC8F71F28E0533E991F0A053B</con:value></con:property><con:property><con:name>SAML</con:name><con:value>nVbbcuI4EP0VyvM4ZSxfsMEVqPJCkiFDCIuTbDIvW4rcGDG2DJZMyHz9SgY8mJAsuy8hardOn77oSBccp4nlB5xDLmjGGps0YdwvrV2tyJmfYU65z3AK3BfED4PbkW81kY/3W7TGcNDV/u5ELrJIC+lt9DLTHdKx9Y7tWrqDzLbngtvCYElXzgsYMi4wE13NQmZLR65uonvk+sjzTa/pmc4PrfEIOZfY0qWJtB2pDe9qcyGWvmG8vr42X+1mlseGhZBpPN2OQjKHFGu9i21GZaC8t/MnzQgIJAlpkiw1Loyaz0XE/ZDGDIsih12s6KNYyEAdQ/pEnMZftGovREM2y8plH7OMUYIT+gur+tyCmGdRI0jiLKdinn6YhIkUsA4bohPTYV80o07tTKAaw5xjnc+xucOawgxyYAQaD9NhV/tyXtfKrfc5ZnyW5SmvL/8bH2BrSLIlRDrfp7Wjdj7giUr1LoD4Q0aSgtM1jNWwLjEBvusmkPOhGpMcZnQzolwO6IYrdsYhvaPlthoDGgMX/6dBB83ZgjzipIDeLPh2nWbBQ+tt8KdxfTtb3sXO9OHyr5vRc7ckcOhcGqrWbpdHQ1kN0XZH+GNCFihdvbnX9+Lr3WbxEAY39uLueYTssQjk+QhurkaG89Ue5TcM8n5o3E1Ch1qPi2e78/xwOR1b3F2srOdfP+x4nvDHp+vb4OfEfBreBKsRtFdR0hnm7Dre/DL763Y/tJ+9NR7D09e39Pu3YJZ9L8I+nrBlPI+Hg0GWj6PF95Slk5/jJxsNnjyB12gRf+O33SqdA/512/7Mh8XLAojYL9UYDAeNK9klLD4XM2WhkT4rXf2lEh8ugAmtp3Yp7fALKXc08mUPt2uzbTmtvjvot68888pqX6KWbV92OuYVCuS/f+xFZsviiGI/YzOqYinJ3Y7N5wRJ6nNgEeT6Oiuk0nHtE8QBFrgxZFN5CDLG4T7rarjd9kgHeTp5QS3dwfLPC8CLboEXyTPecdvQ0hrjTNyxuzyYCcjr6typqfMUCF1SUBKuJpzLEedCVmWF14VIzOYaNxkUUuRzpbe+5bRbBqfpMgHF2UizqEiguZwvyxoZfPtr6Zjw0mp6befSsty+17cHqGWVtR1sa+vYnlceyg/TP/62r5T0iahy4CrRP0B2G07cQWif5btquCfvqj18UERUnT9ZdpFTsmVS//R7mtQYVaM0vbzfU648jw01VOM4oSpQtKakOg/VrS7FXspDb9+rFTabq2axXhdlexzHNnIJb0g1NI0QSCHV6+0++wnMqCCMs66KivVR5Mpe51eIOQsFFpDKWWqUyzPeBiFw9TYYyuOwOffhUQsp6yZgI07Z+ol81yjGnz59iE+UnzRP5M9rlke/23UC6yCOzFM+DQRlsVqpa+Ltg6EgmYSlUuCy/BD8FMCp4HVjVeSKi5DT9FII+PhLQymXVA5CsoKJ4UArDYdqWvIUb0vwfzu9gykFu3rB0X9/wum0HAEC8t3HaYmvLmJfzT+LDxR5F/QDUXY/E+U6u94783vLQZ2OZ7z3Dw==</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>RoleInvalid</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_9d602c50-80bf-4c93-9362-401876e65ae2" IssueInstant="2015-06-10T06:07:17.714Z" Version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><ds:Reference URI="#_9d602c50-80bf-4c93-9362-401876e65ae2"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="xs"/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><ds:DigestValue>fAHGmoAU5yDQ/GMfpOg4RUEWJLY=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>SZPcj0mqy6GTt+OxjUSAJ3jOYL03NtA/saAJFL/4+3LrJnerCS/OPS4i2VjY39YUERN2s6jq2YzZ3ghlsVXGMAkP1XIJAqLe8qdl9IrnGgxz1Cv8CS3Y7vaNeX+ymKHAfoKuSCaPnpghgIDDorNdjKmnmPkNX30DX7tav0jgHsM=</ds:SignatureValue></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:18245C6DC8F71F28E0533E991F0A053B</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="a887c907-cb05-4a05-beeb-2e7d5ae968e5" NotOnOrAfter="2015-06-10T09:07:17.714Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/1784E226C7C3D052E0533D991F0A4377"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2015-06-10T06:07:07.714Z" NotOnOrAfter="2016-06-10T06:07:17.714Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa1.q.uvvu.com:443/rest/1/11/SecurityToken/Assertion/_9d602c50-80bf-4c93-9362-401876e65ae2</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2015-06-10T06:07:17.714Z" SessionIndex="_9d602c50-80bf-4c93-9362-401876e65ae2"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:18245C6DC8F61F28E0533E991F0A053B</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>connection</con:name><con:value>close</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/xml; charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>305ac9cd-879e-4ee5-bf91-879a99de56ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9e00f859-2ba6-4845-8dc0-ce148c3caa24</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f2eff07-1711-496e-b053-c3d299a1cc42</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>001cd63f-c2ec-4dff-a444-c5e7074efdb5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5b0f7782-becc-4fab-ba61-ab59b36b1e1f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DelegationTokenCreate_Device" searchProperties="true" id="fdae4329-85e4-4e31-9592-69b1dc2da8bd"><con:settings/><con:testStep type="groovy" name="Establish_TestCase_Properties" id="8e52f6e5-77c3-4c5f-8f0b-715aa648e386"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();

tC.setPropertyValue("Username", null);
tC.setPropertyValue("PrimaryEmail", null);
tC.setPropertyValue("responsetype", null);
tC.setPropertyValue("tokentype", null);
tC.setPropertyValue("audienceList", null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", null);
tC.setPropertyValue("NODE_ID", null);
tC.setPropertyValue("NODE_OID", null);
tC.setPropertyValue("jksFile", null);
tC.setPropertyValue("assertionUUID", null);
tC.setPropertyValue("expectCreateExpireHoursDiff", null);
tC.setPropertyValue("USER_OID", null);
tC.setPropertyValue("ACCOUNT_OID", null);
tC.setPropertyValue("unSignedAuthnRequest", null);
tC.setPropertyValue("signedAuthnRequest", null);
tC.setPropertyValue("base64EncodedSignedAuthnRequest", null);
tC.setPropertyValue("UUID", null);
tC.setPropertyValue("expectErrType",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionUUIDprior",null);
tC.setPropertyValue("expectNodeUserRowCount",null);
tC.setPropertyValue("audienceIgnoreNodes",null);
tC.setPropertyValue("audienceIgnoreAll",null);





</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="3fd13a42-0734-4627-a06e-ba72e39a0f58"><con:settings/><con:config><script>import urlFunctions.urlFunctions;
import java.net.URLEncoder; 

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

myURLFunctions = new URLEncoder();

if(tP.getPropertyValue("versionMinor")!=tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("subject", callTC.getPropertyValue("PrimaryEmail"));
	tC.setPropertyValue("responseType", callTC.getPropertyValue("responseType"));
	tC.setPropertyValue("tokenType", callTC.getPropertyValue("tokenType"));
	tC.setPropertyValue("audienceList", callTC.getPropertyValue("audienceList"));
}
else
{
	tC.setPropertyValue("subject", myURLFunctions.encode(callTC.getPropertyValue("PrimaryEmail")));
	tC.setPropertyValue("responseType", myURLFunctions.encode(callTC.getPropertyValue("responsetype")));
	tC.setPropertyValue("tokenType", myURLFunctions.encode(callTC.getPropertyValue("tokentype")));
	tC.setPropertyValue("audienceList", myURLFunctions.encode(callTC.getPropertyValue("audienceList")));
}

tC.setPropertyValue("affiliationList", callTC.getPropertyValue("affiliationList"));
tC.setPropertyValue("policyList", callTC.getPropertyValue("policyList"));
tC.setPropertyValue("NODE_ID", callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("expectCreateExpireHoursDiff", callTC.getPropertyValue("expectCreateExpireHoursDiff"));
tC.setPropertyValue("USER_OID", callTC.getPropertyValue("USER_OID"));
tC.setPropertyValue("ACCOUNT_OID", callTC.getPropertyValue("ACCOUNT_OID"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));
tC.setPropertyValue("assertionUUIDprior",callTC.getPropertyValue("assertionUUIDprior"));
tC.setPropertyValue("Username", callTC.getPropertyValue("Username"));
tC.setPropertyValue("expectNodeUserRowCount",callTC.getPropertyValue("expectNodeUserRowCount"));
tC.setPropertyValue("audienceIgnoreNodes",callTC.getPropertyValue("audienceIgnoreNodes"));
tC.setPropertyValue("audienceIgnoreAll",callTC.getPropertyValue("audienceIgnoreAll"));

if (tC.getPropertyValue("expectNodeUserRowCount") == null ||
	tC.getPropertyValue("expectNodeUserRowCount") == "") {
		tC.setPropertyValue("expectNodeUserRowCount","0");
}

if (tC.getPropertyValue("audienceIgnoreAll") == null ||
	tC.getPropertyValue("audienceIgnoreAll") == 'null') {
		tC.setPropertyValue("audienceIgnoreAll","false");
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Compute expected audience list" id="ad411ab7-a684-44be-b1e3-e9dbf52bd521">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("affiliationList",null);

String affiliates = "";
int i = 0;

/*
*  Construct the expected Affiliation list
*/
def affiliationList = [tC.getPropertyValue("NODE_ID").toString()];
def ignoreNodesList = [];
def audienceList = [];
	
log.info "audienceList: "+tC.getPropertyValue("audienceList");
if (tC.getPropertyValue("audienceList") != null) 
{
	audienceList = tC.getPropertyValue("audienceList").toString().tokenize(";");
}
		
if (audienceList.size() >= 1 &amp;&amp; tC.getPropertyValue("audienceList") != null)
{
	log.info "DEBUG: Adding audienceList";
	affiliationList.addAll(audienceList);
}
	log.info "DEBUG: affiliationList size is " + affiliationList.size();
	affiliationList.each {
		log.info "DEBUG afflicationList Member: " + it;
		affiliates += it;

		i++;
		
		if (i != affiliationList.size()) {
			affiliates += ";";
		}
	}

	tC.setPropertyValue("affiliationList",affiliates);

	log.info "affiliationList[" + tC.getPropertyValue("affiliationList") + "]";</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set NODE_OID value based on NODE_ID" id="f366a216-1d63-4e0d-bb40-0042f8689ab5"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def nodeoidGet = new dbUtils.dbNode(log,testProject.getPropertyValue("targetSystem"));
def nodeid = testCase.getPropertyValue("NODE_ID");
indexOfcol = nodeid.lastIndexOf(":");
node = nodeid.substring(indexOfcol + 1);

def NODE_OID = null;

NODE_OID = nodeoidGet.nodeoidGetFromNodeId(node);

testCase.setPropertyValue("NODE_OID",""+NODE_OID);
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish AuthnRequest Body" id="e2ffd87b-91a1-4e8b-9cf4-e85a34918ab0"><con:settings/><con:config><script>import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import urlFunctions.urlFunctions;
import java.net.URLDecoder; 

import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String saml2pNS = "urn:oasis:names:tc:SAML:2.0:protocol";
String saml2NS = "urn:oasis:names:tc:SAML:2.0:assertion";
String mdNS = "urn:oasis:names:tc:SAML:2.0:metadata";
String deceNS = context.expand( '${#Project#coordinatorSchema}' )
String saml2pPrefix = "saml2p";
String saml2Prefix = "saml2";
String mdPrefix = "md";
String decePrefix = "dece";

String versionMajor = tP.getPropertyValue("versionMajor");
String versionMinor = tP.getPropertyValue("versionMinor");
//String destination = "https://qa.p.uvvu.com:7001/rest/" + versionMajor + "/" + versionMinor + "/loginservice/login";
String destination = "https://qa.s.uvvu.com:7001/security/delegation/saml/loginservice/login";
String assertionConsumerServiceURL = "https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/" + tC.getPropertyValue("NODE_OID");

String PrimaryEmail = tC.getPropertyValue("subject");

DateFormat ymd = new SimpleDateFormat("yyyy-MM-dd");
Date date = new Date();
String ymdTime = ymd.format(date);
DateFormat hms = new SimpleDateFormat("HH:mm:ss.FF");
String hmsTime = hms.format(date);

String issueInstant = ymdTime + "T" + hmsTime + "Z";

String issuerNode = tC.getPropertyValue("NODE_ID");

String uuid = UUID.randomUUID().toString();
tC.setPropertyValue("UUID", uuid);

String protocolBinding = "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST";

DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder parser = docFactory.newDocumentBuilder();
doc = parser.newDocument();

root = doc.createElementNS(saml2pNS, saml2pPrefix + ":AuthnRequest");
root.setAttribute("ID", uuid);
root.setAttribute("IssueInstant", issueInstant);
root.setAttribute("Version", "2.0");
root.setAttribute("Destination", destination);
root.setAttribute("AssertionConsumerServiceURL", assertionConsumerServiceURL);
root.setAttribute("ForceAuthn", "true");
root.setAttribute("ProtocolBinding", protocolBinding);

doc.appendChild(root);
	
issuer = doc.createElementNS(saml2NS, saml2Prefix + ":Issuer");
Text textIssuer = doc.createTextNode(issuerNode);
issuer.appendChild(textIssuer);

root.appendChild(issuer);

nameid = doc.createElementNS(saml2pNS, saml2pPrefix + ":NameIDPolicy"); 
nameid.setAttribute("Format","urn:oasis:names:tc:SAML:2.0:nameid-format:transient");
nameid.setAttribute("AllowCreate","true");

root.appendChild(nameid);

if (tC.getPropertyValue("policyList") != "")
{
extensions = doc.createElementNS(saml2pNS,saml2pPrefix + ':Extensions');
policyList = doc.createElementNS(deceNS, 'ns4:PolicyList');

this.log.info tC.getPropertyValue("policyList");

policyArray = tC.getPropertyValue("policyList").split(",");
for (policyStr in policyArray) 
{
	policy = doc.createElementNS(deceNS, 'ns4:Policy');
	policyClass = doc.createElementNS(deceNS, 'ns4:PolicyClass');
	Text textPolicyClass = doc.createTextNode(policyStr);
	policyClass.appendChild(textPolicyClass);
	policy.appendChild(policyClass);
	policyList.appendChild(policy);
}

extensions.appendChild(policyList);
root.appendChild(extensions);
}

conditions = doc.createElementNS(saml2NS, saml2Prefix + ":Conditions");
audienceRestriction = doc.createElementNS(saml2NS, saml2Prefix + ":AudienceRestriction");

myURLFunctions = new URLDecoder();
affiliateArray = myURLFunctions.decode(tC.getPropertyValue("affiliationList")).split(";");
for (audienceMember in affiliateArray) 
{
	audience = doc.createElementNS(saml2NS, saml2Prefix + ":Audience");
	Text textAudience = doc.createTextNode(audienceMember);
	audience.appendChild(textAudience);
	audienceRestriction.appendChild(audience);	
}

conditions.appendChild(audienceRestriction);

root.appendChild(conditions);

subject = doc.createElementNS(saml2NS, saml2Prefix + ":Subject");
nameid1 = doc.createElementNS(saml2NS, saml2Prefix + ":NameID");
nameid1.setAttribute("Format","urn:oasis:names:tc:SAML:2.0:nameid-format:persistent");
Text textEmail = doc.createTextNode(PrimaryEmail);

nameid1.appendChild(textEmail);
subject.appendChild(nameid1);

root.appendChild(subject);



//&lt;saml2:Subject xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">&lt;saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">shikha82@uvvutesting.biz&lt;/saml2:NameID>&lt;/saml2:Subject>

TransformerFactory factory = TransformerFactory.newInstance();
Transformer transformer = factory.newTransformer();
StringWriter writer = new StringWriter();
Result result = new StreamResult(writer);
Source source = new DOMSource(doc);
transformer.transform(source, result);
writer.close();
String unSignedAuthnRequest = writer.toString();

log.info unSignedAuthnRequest;
tC.setPropertyValue("unSignedAuthnRequest", unSignedAuthnRequest);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_JKS_File" id="e10c018f-a542-4717-86de-6d0312f8d876"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def NODE_ID = tC.getPropertyValue("NODE_ID");

if (System.properties['os.name'].toLowerCase().contains('windows')) 
{
            log.info "it's Windows";
            certPath = tP.getPropertyValue("certsPath_Windows");
} 
else 
{
            log.info "it's not Windows"
            certPath = tP.getPropertyValue("certsPath_Linux");
}



switch (NODE_ID) {

	case "urn:dece:org:org:dece:dece:cs":
	jksFile = certPath+"/dececs.jks";
	break;

	case "urn:dece:org:org:dece:coord:cs":
	jksFile = certPath+"/coordcs.jks";
	break;

	case "urn:dece:org:org:dece:LLASP":
	jksFile = certPath+"/LLASP.jks";
	break;

	case "urn:dece:org:org:dece:DLASP":
	jksFile = certPath+"/DLASP.jks";
	break;

	case "urn:dece:org:org:dece:ACCESS":
	jksFile = certPath+"/ACCESS.jks";
	break;

	case "urn:dece:org:org:dece:ACCESCS":
	jksFile = certPath+"/ACCESCS.jks";
	break;
	
	case "urn:dece:org:org:dece:RET":
	jksFile = certPath+"/RET.jks";
	break;

	case "urn:dece:org:org:dece:RET_CS_1":
	jksFile = certPath+"/RET_CS_1.jks";
	break;

	case "urn:dece:org:org:dece:LLASP_CS_1":
	jksFile = certPath+"/LLASP_CS_1.jks";
	break;

	case "urn:dece:org:org:dece:DLASP_CS_1":
	jksFile = certPath+"/DLASP_CS_1.jks";
	break;

	case "urn:dece:org:org:dece:DSP":
	jksFile = certPath+"/DSP.jks";
	break;

	case "urn:dece:org:org:dece:DSP_CS_1":
	jksFile = certPath+"/DSP_CS_1.jks";
	break;

	case "urn:dece:org:org:dece:CON":
	jksFile = certPath+"/CP.jks";
	break;

	case "urn:dece:org:org:dece:CON_CS_1":
	jksFile = certPath+"/CON_CS_1.jks";
	break;

	case "urn:dece:org:org:dece:DEV":
	jksFile = certPath+"/DEV.jks";
	break;

	case "urn:dece:org:org:dece:DEV_CS_1":
	jksFile = certPath+"/DEV_CS_1.jks";
	break;

	case "urn:dece:org:org:dece:COO":
	jksFile = certPath+"/COO.jks";
	break;

	case "urn:dece:org:org:dece:DECE":
	jksFile = certPath+"/DECE.jks";
	break;

	case "urn:dece:org:org:dece:iscpportal1":
	jksFile = certPath+"/iscpportal1.jks";
	break;

	case "urn:dece:org:org:dece:iscportalcs1":
	jksFile = certPath+"/iscportalcs1.jks";
	break;
	
	default:
	jksFile = certPath+"/RET.jks";
	break;
}

log.info "jksFilePath:"+jksFile;

tC.setPropertyValue("jksFile", jksFile);</script></con:config></con:testStep><con:testStep type="groovy" name="Create XML Signature" id="3b1b143c-3b03-4814-9217-b7ccc05f0241"><con:settings/><con:config><script>import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.util.Collections;
import java.lang.Object;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import javax.xml.transform.*;
import java.security.cert.X509Certificate;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import java.nio.channels.FileChannel;

import javax.xml.crypto.Data;
import javax.xml.crypto.MarshalException;
import javax.xml.crypto.NoSuchMechanismException;
import javax.xml.crypto.URIDereferencer;
import javax.xml.crypto.XMLStructure;
import javax.xml.crypto.dom.DOMStructure;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;
import javax.xml.crypto.dsig.spec.*;
import javax.xml.crypto.dsig.keyinfo.*;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.XMLDSigSecurity;
import javax.xml.crypto.dsig.XMLObject;
import javax.xml.crypto.dsig.XMLSignContext;
import javax.xml.crypto.dsig.XMLSignature;
import javax.xml.crypto.dsig.XMLSignatureException;
import javax.xml.crypto.dsig.XMLSignatureFactory;
import javax.xml.crypto.dsig.XMLValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.dom.DOMValidateContext;

import javax.xml.crypto.dsig.*;

import org.opensaml.xml.security.x509.BasicX509Credential;
import org.opensaml.xml.*;
import org.opensaml.xml.signature.impl.*;
import org.opensaml.xml.signature.Signature;
import org.opensaml.xml.signature.SignatureConstants;
import org.opensaml.xml.security.x509.*;
import java.security.cert.*;

import javax.xml.namespace.QName;
import org.xml.sax.InputSource;

import java.security.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String saml2pNS = "urn:oasis:names:tc:SAML:2.0:protocol";
String saml2NS = "urn:oasis:names:tc:SAML:2.0:assertion";
String saml2pPrefix = "saml2p";
String saml2Prefix = "saml2";

String jksFile  = tC.getPropertyValue("jksFile");
String uuid = "#" + tC.getPropertyValue("UUID");

// Create a DOM XMLSignatureFactory that will be used to generate the enveloped signature.
XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM");

// Create a Reference to the enveloped document (in this case,
// you are signing the whole document, so a URI of "" signifies
// that, and also specify the SHA1 digest algorithm and
// the ENVELOPED Transform.
Reference ref = fac.newReference(uuid, fac.newDigestMethod(DigestMethod.SHA1, null),  Collections.singletonList(fac.newTransform (Transform.ENVELOPED, (TransformParameterSpec) null)), null, null);

// Create the SignedInfo.
SignedInfo si = fac.newSignedInfo(fac.newCanonicalizationMethod(CanonicalizationMethod.INCLUSIVE,(C14NMethodParameterSpec) null), fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null), Collections.singletonList(ref));

// Load the KeyStore and get the signing key and certificate.
KeyStore ks = KeyStore.getInstance("JKS");
ks.load(new FileInputStream(jksFile), "testing".toCharArray());
KeyStore.PrivateKeyEntry keyEntry = (KeyStore.PrivateKeyEntry) ks.getEntry("qalp1", new KeyStore.PasswordProtection("testing".toCharArray()));
X509Certificate cert = (X509Certificate) keyEntry.getCertificate();

// Create the KeyInfo containing the X509Data.
KeyInfoFactory kif = fac.getKeyInfoFactory();
List x509Content = new ArrayList();
x509Content.add(cert.getSubjectX500Principal().getName());
x509Content.add(cert);
X509Data xd = kif.newX509Data(x509Content);
KeyInfo  ki = kif.newKeyInfo(Collections.singletonList(xd));

String unSignedAuthnRequest  = tC.getPropertyValue("unSignedAuthnRequest");

// Instantiate the document to be signed.
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setNamespaceAware(true);
Document doc = dbf.newDocumentBuilder().parse(new InputSource(new ByteArrayInputStream(unSignedAuthnRequest.getBytes("utf-8"))));

// Create a DOMSignContext and specify the RSA PrivateKey and
// location of the resulting XMLSignature's parent element.
DOMSignContext dsc = new DOMSignContext(keyEntry.getPrivateKey(), doc.getDocumentElement());

// Create the XMLSignature, but don't sign it yet.
XMLSignature signature = fac.newXMLSignature(si, ki);

// Marshal, generate, and sign the enveloped signature.
signature.sign(dsc);

TransformerFactory factory = TransformerFactory.newInstance();
Transformer transformer = factory.newTransformer();
StringWriter writer = new StringWriter();
Result result = new StreamResult(writer);
Source source = new DOMSource(doc);
transformer.transform(source, result);
writer.close();
String signedAuthnRequest = writer.toString();

log.info signedAuthnRequest;
tC.setPropertyValue("signedAuthnRequest", signedAuthnRequest);</script></con:config></con:testStep><con:testStep type="groovy" name="Base64 Encode the Signed AuthnRequest xml" id="0ae4a6d9-f438-4b5b-b39b-82c17ff02cb9"><con:settings/><con:config><script>import urlFunctions.urlFunctions;
import java.net.URLEncoder; 

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

myURLFunctions = new urlFunctions(log);
String signedAuthnRequest  = tC.getPropertyValue("signedAuthnRequest");
//String base64EncodedSignedAuthnRequest = URLEncoder.encode(myURLFunctions.base64Encode(signedAuthnRequest));
String base64EncodedSignedAuthnRequest = myURLFunctions.base64Encode(signedAuthnRequest);

tC.setPropertyValue("base64EncodedSignedAuthnRequest", base64EncodedSignedAuthnRequest);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Set PEM" id="fd254734-b84d-4def-b848-d27337f94690"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem");
myTC.setPropertyValue("NODE_ID",tC.getPropertyValue("NODE_ID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserValidationTokenCreate_DST");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserValidationTokenCreate_DST" id="0ec397b2-25bb-4ac3-a39b-cfb82ef14579"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/VerificationToken/${#TestCase#tokenType}?subject=${#TestCase#subject}&amp;responseType=${#TestCase#responseType}" methodName="UserValidationTokenCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserValidationTokenCreate_DST" mediaType="application/xml" postQueryString="false" sslKeystore="DEV_concat.pem" accept="" id="1a6b313a-e2e1-40dc-bcaa-f10bb222d04a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request>SAMLRequest=${#TestCase#base64EncodedSignedAuthnRequest}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Headers and Body" id="264dd512-ee22-42bf-a527-cd44cb11f23a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserValidationTokenCreate_DST');
def expBody = tStep.httpRequest.response.getResponseContent();


tC.setPropertyValue("httpBody", null);
tC.setPropertyValue("httpStatus", null);
tC.setPropertyValue("httpConnect", null);
tC.setPropertyValue("httpContentType", null);
tC.setPropertyValue("httpContentLength", null);
tC.setPropertyValue("httpContentLocation", null);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String Location = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			Location = value[0];
			break;
		case "Content-Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("httpBody", expBody);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", Location);

this.log.info Location;


</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="18fdafc4-b17f-49dc-aea8-b8e583552357"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject(); 
def errorRespType = context.expand( '${#TestCase#expectErrType}' );
log.info 'errorRespType=='+errorRespType
def XMLbody   = context.expand( '${#TestCase#httpBody}');
log.info 'XMLbody=='+XMLbody

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
//String orgRequest = url + "/merc_api/merc-service/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;

def major = context.expand( '${#Project#versionMajor}' );
def minor = context.expand( '${#Project#versionMinor}' );


if (context.expand( '${#Project#targetHostQ}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#targetHostQ}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		log.info "We are in SUCCESS Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		break;	
	
	case "UserNotActive":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		XMLbodynull        = false;
		httpLocationHeader = false;
		break;

	case "NODE_STATUS_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request"
		errorReason = "The request is not valid.";
		errorLink = "";
	break;

	case "FORBIDDEN:1123":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The request is not authorized.";
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1123";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN_INVALID_USER_STATUS":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The request is not authorized.";
		errorID="urn:dece:errorid:org:dece:securitycontext:InvalidUserStatus";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN:1119":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The request is not authorized.";
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1119";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;

	case "unauthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		XMLbodynull        = false;
		httpLocationHeader = false;
		errorID = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorReason = "The request is not authorized.";
		break;
	
	case "token_rejected":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		XMLbodynull        = false;
		httpLocationHeader = false;
		errorID = "urn:dece:errorid:org:dece:securitycontext:"+expectErrType;
		errorReason = "The request is not authorized.";
		break;

	case "FORBIDDEN_INVALID_ROLE":
		errorReason = "The request is not authorized.";
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1120";
		XMLbodynull        = false;
		httpLocationHeader = false;
		
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpContentLocation}') != null;
	
	def a = context.expand( '${#TestCase#httpContentLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}
	
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	assertionUUID     = urlStr.substring(lastSlash + 1);
	
	tC.setPropertyValue("assertionUUID", assertionUUID);
	callTC.setPropertyValue("assertionUUID", assertionUUID);	 		  
		
	} else {
		
		assert context.expand( '${#TestCase#httpLocation}') == "";
}





//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION row count" id="80b1c637-387f-418a-acef-a9e018db2a4b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

int uuidcnt = 0;

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {

		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

		String uuid = tC.getPropertyValue("httpContentLocation").toString();

		/*
		*  Assert we have a location header value..
		*/
		assert uuid.length() > 1;

		/*
		*  Verify the value is a URL
		*/
		def lurl = uuid.toURL();
		def urlStr = lurl.getPath();

		int lastSlash = urlStr.lastIndexOf('/');

		/*
		*  Pull just the assertion UUID from the URL
		*/
		String assertionUUID = urlStr.substring(lastSlash + 1);

		log.info "assertionUUID [$assertionUUID]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		assert dbUtils.samlGetUUIDNodeAssertionRowCount(assertionUUID) == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION prior assertion removed" id="a07fdfab-0f2f-4fad-9324-c1abce4ff06f">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String tokentype = tC.getPropertyValue("tokentype").toString();
String assertionUUIDprior = tC.getPropertyValue("assertionUUIDprior").toString();

int uuidcnt = 0;

if (tC.getPropertyValue("expectErrType") == "SUCCESS" &amp;&amp;  tC.getPropertyValue("assertionUUIDprior").toString() !="null" ) {
    
	assert assertionUUIDprior.length() > 4;
	
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  There should only be on NODE_USER_SAML_ASSERTION row 
		*  with this UUID after API invocation
		*/
		assert dbUtils.samlGetUUIDNodeAssertionRowCount(assertionUUIDprior) == 0;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION STATUS, NODE_OID" id="bbae69a5-1b9c-41b2-a76e-2ecfdc1728c1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;
def myXML;

tC.setPropertyValue("assertionROW",null);

String arow = "";
String NODE_ID = tC.getPropertyValue("NODE_ID").toString();
String NODE_OID = tC.getPropertyValue("NODE_OID").toString();

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	/*
	*  Device Node ID override.  All devices are 0200 in 
	*  QA so if the nodeID received is one of our defined
	*  devices change the setting for validation 
	*  purposes.
	*/
	/*log.info "NODE_ID: "+NODE_ID;
	switch (NODE_ID) {
		
		case tP.getPropertyValue("nodeIdDEV").toString():
			NODE_OID = deviceNodeID;
			log.info "NODE_OID:"+NODE_OID;
			break;
	}*/
	
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		String uuid = tC.getPropertyValue("httpContentLocation").toString();
		
		/*
		*  Assert we have a location header value..
		*/
		assert uuid.length() > 1;

		/*
		*  Verify the value is a URL
		*/
		def lurl = uuid.toURL();
		def urlStr = lurl.getPath();

		int lastSlash = urlStr.lastIndexOf('/');

		/*
		*  Pull just the assertion UUID from the URL
		*/
		String assertionUUID = urlStr.substring(lastSlash + 1);

		log.info "assertionUUID [$assertionUUID]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		arow = dbUtils.samlGetAssertionRow(assertionUUID);

		assert arow.length() > 0;

		log.info "arow is [$arow]";

		tC.setPropertyValue("assertionROW",arow);
	}

	/*
	*  Parse the XML
	*/
	try {
		myXML = new XmlSlurper().parseText(arow);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify only one row was returned..
		*/
		log.info "ASSERT - Row Size is 1";
		assert myXML.ResultSet.Row.size() == 1;

		/*
		*  Verify NODE_USER_SAML_ASSERTION.STATUS is active
		*/
		log.info "ASSERT - STATUS is active";
		assert myXML.ResultSet.Row.STATUS.text() == "active";

		/*
		*  Verify NODE_USER_SAML_ASSERTION.NODE_ID
		*/
		log.info "ASSERT - NODE_OID Expect[$NODE_OID] Received[" +
		myXML.ResultSet.Row.NODE_OID.text() + "]";
		assert myXML.ResultSet.Row.NODE_OID.text() == NODE_OID;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION.EXPIRATION" id="77e14822-8054-40d5-96b0-da020a65809c">
        <con:settings/>
        <con:config><script><![CDATA[import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def a;

int expectTime = tC.getPropertyValue("expectCreateExpireHoursDiff").toInteger();

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	String uname = tC.getPropertyValue("assertionUUID").toString().trim();
	String sys = tP.getPropertyValue("targetSystem").toString();
	String results = "";
	String secs = "";

	String sql = """SELECT (extract(DAY FROM EXPIRATION_DATE - CREATED_DATE)*24) 
		as HOURS FROM NODE_USER_SAML_ASSERTION where NODE_USER_SAML_UUID = '$uname'
	""";

	log.info sql;

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		results = a.SelectFromDB(sql,sys);
		log.info results;
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbUtils - $e"; 
		assert 1 == 2;
	}
	finally {
		try {
			def myXML = new XmlSlurper().parseText(results);
			assert myXML.ResultSet.Row.size() == 1;
			results = myXML.ResultSet.Row[0].HOURS
		}
		catch (Throwable e) {
			log.info "ERROR - XmlSlurper - $e";
			assert 1 == 2;
		} 
		finally {
			/*
			*  There is sometype of bug in oracle where it, at times, screws 
			*  update the date diff up to 24 hours.
			*/
						
			log.info "Expect[$expectTime] - Received[" +  results.toInteger() + "]";
			//assert (results.toInteger() == expectTime);
			assert (results.toInteger() <= expectTime + 06 && results.toInteger() >= expectTime - 06);
			//assert (results.toInteger() <= expectTime + 24 && results.toInteger() >= expectTime - 24);
		}
	}
}]]></script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION.NODE_USER_SAML_ASSERTION" id="04a5acdb-0bae-484f-8135-a6d9a2dd9f6f">
        <con:settings/>
        <con:config><script><![CDATA[/*
*  VALIDATIONS PERFORMED
*
*  saml2p:StatusCode == urn:oasis:names:tc:SAML:2.0:status:Success
*
*  <saml2:Issuer> == Project.Property("samlIssuer") (http://c.decellc.com/)
*
*  <saml2:AuthenticatingAuthority> == Project.Property("samlAuthenticatingAuthority") 
*	(urn:dece:org:neustar:coordinator)
*
*  <AudienceRestriction>
*	Verifications include insuring the size of the <AudienceRestriction> matches
*	the number of nodes expected.
*
*	For DEVICES this check will verify NO audience members are included.
*
*	Also verification of the nodes used in assertion creation/affiliation via
*	the STS call are contained within the <AudienceRestriction> node
*/
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def dbUtils;
def dbUtilsUser;
//int stsaudienceSize = 1;   Start at one as entity nodes is in audience
tC.setPropertyValue("computedAssertionXML",null);
tC.setPropertyValue("dbassertionNodeaccountid",null);
tC.setPropertyValue("dbassertionNodeuserid",null);

String assertionXML = "";
String arow = tC.getPropertyValue("assertionROW");
String[] affiliates;

int ignoreNodesSize = 0;
int audienceSize = 0;
def affiliationList = [];
def ignoreNodesList = [];

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	log.info tC.getPropertyValue("affiliationList").toString() ;
	if (tC.getPropertyValue("affiliationList").toString() != null)
	{
		affiliationList = tC.getPropertyValue("affiliationList").toString().tokenize(";");
		log.info "affiliationList size is " + affiliationList.size();
		audienceSize = affiliationList.size();
	}
	log.info tC.getPropertyValue("audienceIgnoreNodes").toString();
	if (tC.getPropertyValue("audienceIgnoreNodes").toString() != 'null')
	{
		ignoreNodesList = tC.getPropertyValue("audienceIgnoreNodes").toString().tokenize(";");
		log.info "ignoreNodesList size is " + ignoreNodesList.size();
		ignoreNodesSize = ignoreNodesList.size();
	}
	
	
	audienceSize -= ignoreNodesSize; 	
	/*
	*  Make sure we have data in arow
	*/
	assert arow.length() > 1;

	/*
	*  Get a handle for the saml class.
	*/
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	
	try {
		myXML = new XmlSlurper().parseText(arow);
		log.info 'myXML----------->'+myXML
		log.info 'size------->'+myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".size()
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify only one row was returned..
		*/
		log.info "ASSERT - Row Size is 1";
		assert myXML.ResultSet.Row.size() == 1;

		String assertRaw = myXML.ResultSet.Row.NODE_USER_SAML_ASSERTION_PART1.text() +
				myXML.ResultSet.Row.NODE_USER_SAML_ASSERTION_PART2.text();
			log.info 'assertRaw----->'+assertRaw

		/*
		*  Base64 decode the assertion clob
		*/
		byte [] xmlBytes = Base64.decode(assertRaw);
		assertionXML = new String(xmlBytes, "UTF8");

		assert assertionXML.length() > 1;

		tC.setPropertyValue("computedAssertionXML", assertionXML);
	}
	/*
	*  Now parse the assertion XML
	*/
	try {
		myXML = new XmlSlurper().parseText(assertionXML).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", saml2p: "urn:oasis:names:tc:SAML:2.0:protocol");
		log.info 'myXML----------->'+myXML
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Check the status
		*/
		log.info "ASSERT: Status size 1 == " + myXML."saml2p:Status".size();
		assert 1 == myXML."saml2p:Status".size();

		def s = myXML."saml2p:Status"."saml2p:StatusCode".@Value;
		log.info "ASSERT: Status value is urn:oasis:names:tc:SAML:2.0:status:Success == $s";
		assert "urn:oasis:names:tc:SAML:2.0:status:Success" == s.toString();

		/*
		*  Verify the nodeaccountid.
		*/
		String aname = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute".@Name;
		String anameE = "accountID";
		log.info "ASSERT: NodeAccountID - Name Attribute Value - Expect[$anameE] - Received[$aname]";
		assert anameE == aname;

		String avalue = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
		log.info "ASSERT: Returned Account NodeID length > 0 -- [$avalue]";
		assert avalue.length() > 0;
		tC.setPropertyValue("dbassertionNodeaccountid", avalue);

		/*
		*  Verify the nodeuserid
		*/
		String uvalue = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID".text();
		log.info "ASSERT: Returned Account UserID length > 0 -- [$uvalue]";
	
		//  Not zero length
		assert uvalue.length() > 0;

		//  Save for future
		tC.setPropertyValue("dbassertionNodeuserid", uvalue);
		int lastColon = uvalue.lastIndexOf(':');
		def uvalueid = uvalue.substring(lastColon + 1);

		//  Get USER_OID from NODE_USER table.
		def uvaluedb = dbUtils.samlGetNodeUserIDfromNodeUser(uvalueid);
		def unameval = tC.getPropertyValue("USER_OID").toString();
		log.info "ASSERT: NODE_USER.USER_OID Recv[$uvaluedb] - Expect[$unameval]";
		assert uvaluedb == unameval;

		/*
		* <saml2:Issuer>
		*/
		log.info "ASSERT: <saml2:Issuer> Expect: " +
			tP.getPropertyValue("samlIssuer") +
			" Received:[" + myXML."saml2:Assertion"."saml2:Issuer".text() +
			"]";
		assert tP.getPropertyValue("samlIssuer").toString() == myXML."saml2:Assertion"."saml2:Issuer".text();

		/*
		*  saml2:AuthnStatement
		*/
		log.info "ASSERT: <saml2:AuthenticatingAuthority> Expect [" + 
			tP.getPropertyValue("samlAuthenticatingAuthority") +
			"] Received[" +
			myXML."saml2:Assertion"."saml2:AuthnStatement"."saml2:AuthnContext"."saml2:AuthenticatingAuthority".text() +
			"]";
		assert tP.getPropertyValue("samlAuthenticatingAuthority").toString() ==
			myXML."saml2:Assertion"."saml2:AuthnStatement"."saml2:AuthnContext"."saml2:AuthenticatingAuthority".text()

		/*
		*  AudienceRestriction Processing
		*/
		if (tC.getPropertyValue("isDeviceFlag").toString() == "true") {
			/*
			*  Just empty the list that way we will check
			*  for zero
			*/
			affiliationList = "";
		}
		log.info "ASSERT: AudienceList size Expect[" +
			audienceSize + "] Received[ " +
			myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".size() +
			"]";
			
	assert audienceSize == myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".size();
	
		myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".each {
			log.info "ASSERT: <saml2:AudienceRestriction> Contains [" +
				it.text() + "]";
				log.info "affiliationList: "+affiliationList;
			assert affiliationList.contains(it);
		}


		
			//Make sure none of the ingnoredNodes made it into the affilation list.
			ignoreNodesList.each {

			if(tC.getPropertyValue("NODE_ID")!= it)
			{
				log.info "ASSERT: <saml2:AudienceRestriction> DOES NOT Contain [" + it + "]";
				assert !myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".toString().contains(it);
			}
		}


		
	}
}]]></script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_ACCOUNT row" id="4c8fd0f2-8d4c-42d5-9aa2-00ccaff1da91">
        <con:settings/>
        <con:config><script>/*
*  Verifications
*
*	Only one NODE_ACCOUNT row exists for the NODE_ACCOUNT_ID.
*
*	NODE_ID is the nodeOID for the entity node.
*
*	ACCOUNT_OID is correct.
*
*/
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

def myXML;
def nodeXML;

tC.setPropertyValue("assertionAccountId",null);

String assertionAccountId = "";
String arow = "";
String narow = "";
String NODE_ID = tC.getPropertyValue("NODE_ID").toString();
String NODE_OID = tC.getPropertyValue("NODE_OID").toString();
/*
*  if we are a device adjust the 
*  NODE_ID...
*/
if (tC.getPropertyValue("isDeviceFlag") == "true") {
	log.info "here...";
	NODE_OID = tP.getPropertyValue("nodeDeviceDefault").toString();
}

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	
	arow = tC.getPropertyValue("assertionROW").toString();

	assert arow.length() > 0;

	/*
	*  Parse the NODE_USER_SAML_ASSERTION row
	*/
	try {
		myXML = new XmlSlurper().parseText(arow);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		assertionAccountId = myXML.ResultSet.Row.NODE_ACCOUNT_ID.text();

		log.info "assertionAccountId[$assertionAccountId]";
	}

	/*
	*  Get and Prase the NODE_ACCOUNT row..
	*/
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
		narow = dbUtils.samlGetNodeAccountRow(assertionAccountId);

		assert narow.length() > 0;
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		assertionAccountId = myXML.ResultSet.Row.NODE_ACCOUNT_ID.text();

		log.info "assertionAccountId[$assertionAccountId]";

		try {
			nodeXML = new XmlSlurper().parseText(arow);
		}
		catch(Throwable e) {
			log.info "ERROR - XmlSlurper - $e";
			assert 1 == 2;
		}
		finally {
			/*
			*  Only one row should be returned.
			*/
			log.info "ASSERT: Row Size is 1";
			assert nodeXML.ResultSet.Row.size() == 1;
			
			/*
			* ACCOUNT_OID - ugh  :(  for some reason slurper cannot find ACCOUNT_OID
			*	I will fix later  
			*/
			log.info "ASSERT: ACCOUNT_OID Expect[" + tC.getPropertyValue("accountoid") +
				"] Received[" + nodeXML.ResultSet.Row.ACCOUNT_OID.text() + "]";
		//assert tC.getPropertyValue("accountoid").toString() == nodeXML.ResultSet.Row.ACCOUNT_OID.text();

			/*
			*  NODE_ID is the entity node...
			*/
			
			log.info "ASSERT: NODE_OID Expect[" + NODE_OID +
				"] Received[" + nodeXML.ResultSet.Row.NODE_OID.text() + "]";
			assert NODE_OID == nodeXML.ResultSet.Row.NODE_OID.text();

		}
	}	
}

tC.setPropertyValue("assertionAccountId",assertionAccountId);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER row count" id="afbfa755-5e64-4e94-8f6b-ecfaaea8133c">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int expectedSize = 1;
int assertionSize = 0;
int audienceSize = 1;  // Start at one as entity nodes is in audience
int audienceIgnoreSize = 0;
int expectNodeUserRowCount = tC.getPropertyValue("expectNodeUserRowCount").toInteger();

tC.setPropertyValue("z_resultNodeUserRowCount",null);

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	if (tC.getPropertyValue("audienceIgnoreAll").toString() == "false") {
		if ( tC.getPropertyValue("affiliationList") != null) {
			affiliationList = tC.getPropertyValue("affiliationList").toString();
			audienceSize = affiliationList.tokenize(";").size();
			log.info audienceSize;
			log.info "audienceSize BEFORE [$audienceSize]";
		}
		if ( tC.getPropertyValue("audienceIgnoreNodes") != null) {
			audienceIgnoreSize = tC.getPropertyValue("audienceIgnoreNodes").toString().tokenize(";").size();
			log.info "audienceIgnoreSize BEFORE [$audienceIgnoreSize]";
		}

		audienceSize -= audienceIgnoreSize;
		log.info "audienceSize FINAL [$audienceSize]";
	} else {
		log.info "No changes to count";
	}
	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	assertionSize = a.samlGetUUIDNodeUserRowCountbyUUID(tC.getPropertyValue("assertionUUID"));

	tC.setPropertyValue("z_resultNodeUserRowCount",assertionSize.toString());

	if (expectNodeUserRowCount == 0) {
		log.info "ASSERT: Audience Size[$audienceSize] - Received[$assertionSize]";
		assert assertionSize == audienceSize;
	} else {
		log.info "ASSERT: Audience Size[$audienceSize] - Received[$expectNodeUserRowCount]";
		assert audienceSize == expectNodeUserRowCount;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER rows" id="7a46c0c7-4aae-4b1e-9be7-024c97318ce6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));

def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));

String uuid = tC.getPropertyValue("assertionUUID").toString();
String nodeUser = tC.getPropertyValue("assertionUserId").toString();

String resultsDB = "";
String node = "";
List nodeList;

int indexOfcol = 0;
if (tC.getPropertyValue("actionSkipNodeUserCheck") != "true") {
	if (tC.getPropertyValue("expectErrType").toString() == "SUCCESS") {
		log.info "In LOOOOOOP";
	//	assert tC.getPropertyValue("ComputedAudienceList").toString() != 'null';

		/*
		*  Devices should not ever be affilated.
		*/
		/*if (tC.getPropertyValue("isDeviceFlag").toString() != "true") {
			nodeList = tC.getPropertyValue("ComputedAudienceList").toString().tokenize(";");
		} else {
			nodeList = tP.getPropertyValue("nodeDeviceDefault").toString().tokenize(";");
		}*/

		def affiliationList = tC.getPropertyValue("affiliationList").toString().tokenize(";");
		log.info "affiliationList size: "+affiliationList.size();
		if (tC.getPropertyValue("audienceIgnoreNodes") != 'null') {
			ignoreNodesList = tC.getPropertyValue("audienceIgnoreNodes").toString().tokenize(";");
			log.info "ignoreNodesList size: "+ignoreNodesList.size();
			ignoreNodesList.each {
				if(tC.getPropertyValue("NODE_ID").toString() != it.toString()){
						affiliationList = affiliationList.minus(it);
						log.info "affiliationList size: "+affiliationList.size();
				}
						
				}
		}
		
		nodeList = affiliationList;
		log.info "nodeList size is " + nodeList.size();

		nodeList.each {
			assert nodeList.isEmpty() == false;
			String NODE_OID = null;
			String nodeoid = tC.getPropertyValue("NODE_OID").toString();
			log.info "Processing NODE: $it";	
			if(it.toString() == "urn:dece:org:org:dece:dece:cs" || it.toString() == "urn:dece:org:org:dece:coord:cs"){
			log.info "here...";
				NODE_OID =  nodeoid;
			}else{
				indexOfcol = it.lastIndexOf(":");
			node = it.substring(indexOfcol + 1);
			log.info "node is $node";
			 NODE_OID = nodeoidGet.nodeoidGetFromNodeId("$node");
			}
			log.info "here...";
				if (tC.getPropertyValue("isDeviceFlag").toString() == "true") {
					NODE_OID=tP.getPropertyValue("nodeDeviceDefault").toString();
				}
	
			
			String sql = """SELECT to_char(rawtohex(USER_OID)) USER_OID,
				to_char(rawtohex(NODE_OID)) NODE_OID, 
				to_char(rawtohex(NODE_USER_ID)) NODE_USER_ID 
				FROM NODE_USER where NODE_USER_SAML_UUID = '$uuid' 
 				and NODE_OID = hextoraw('$NODE_OID')""";
			try {
				log.info "sql is [$sql]";
				resultsDB = dbUtils.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
			} catch (Throwable e) {
				log.info "ERROR - SelectFromDB issue! - $e";
			} finally {
				log.info "results is [$resultsDB]";
			}
		
			try {
				def myXML = new XmlSlurper().parseText(resultsDB);
	
				String dbUserOID = myXML.ResultSet.Row[0].USER_OID;
				String dbNodeOID = myXML.ResultSet.Row[0].NODE_OID;
				String dbNodeUserOID = myXML.ResultSet.Row[0].NODE_USER_ID;
			}
			catch(Throwable e) {
				log.info "ERROR - XmlSlurper Problem - $e";
			}
			finally {
				log.info "Assert DB USER_OID [$dbUserOID] == [" + tC.getPropertyValue("USER_OID") + "]";
				assert dbUserOID == tC.getPropertyValue("USER_OID").toString();

				log.info "Assert DB NODE_OID [$dbNodeOID] == [$NODE_OID]";
				assert dbNodeOID == NODE_OID;

			} 	
		}
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify LVAL EUDU &amp; EMUC row count" id="50255a98-bf8d-488c-a113-65528a3f153f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
def username = context.expand( '${#TestCase#Username}' )
username=username.replace(" ","");
String uuid = tC.getPropertyValue("assertionUUID").toString();
String user_oid = tC.getPropertyValue("USER_OID").toString();
String resultsDB = "";
String node = "";
List nodeList;
def myXML = "";
def audienceIgnoreNodes;
int indexOfcol = 0;

if (tC.getPropertyValue("expectErrType").toString() == "SUCCESS") 
{
	assert tC.getPropertyValue("affiliationList").toString() != 'null';

	/*
	*  Devices should not ever be affilated.
	*/
	/*if (tC.getPropertyValue("isDeviceFlag").toString() != "true") 
	{
		nodeList = tC.getPropertyValue("stsComputedAudienceList").toString().tokenize(",");
	} 
	else 
	{
		nodeList = tP.getPropertyValue("nodeDeviceDefault").toString().tokenize(",");
	}*/

	if ( tC.getPropertyValue("affiliationList") != null) {
			affiliationList = tC.getPropertyValue("affiliationList").tokenize(";");
		}
		if ( tC.getPropertyValue("audienceIgnoreNodes") != null) {
			audienceIgnoreNodes = tC.getPropertyValue("audienceIgnoreNodes").tokenize(";");
		}

	audienceIgnoreNodes.each
	{
			affiliationList = affiliationList.minus(it);
	}
		
	nodeList = affiliationList;
	log.info "nodeList size is " + nodeList.size();

	nodeList.each {

		assert nodeList.isEmpty() == false;
		log.info "Processing NODE: $it";
		indexOfcol = it.lastIndexOf(":");
		node = it.substring(indexOfcol + 1);
		String NODE_OID = nodeoidGet.nodeoidGetFromNodeId(node);
		
		String sql = """select pre.entity_id, count(p.policy_oid) as count from policy p, policy_requesting_entity pre where 
								p.status = 'active' and p.policy_class in (100,103,104) 
								and p.policy_oid in (select policy_oid from policy_relationship where policy_actor in 
								(select account_oid from account_user where lower(username) = lower('$username')))
								and pre.policy_oid = p.policy_oid and pre.entity_id = hextoraw('$NODE_OID') group by pre.entity_id""";
		try 
		{
			log.info "sql is [$sql]";
			resultsDB = dbUtils.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
			log.info "resultsDB: "+resultsDB;
		} 
		catch (Throwable e) 
		{
			log.info "ERROR - SelectFromDB issue! - $e";
		} 
		
		myXML = new XmlSlurper().parseText(resultsDB);
		log.info "Node Received: "+myXML.ResultSet.Row[0].ENTITY_ID;
		log.info "Row Count Received: "+myXML.ResultSet.Row[0].COUNT;
		assert myXML.ResultSet.Row[0].ENTITY_ID== NODE_OID;
		assert myXML.ResultSet.Row[0].COUNT == 3;	
	
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify NODE_USER prior removed" id="47f723a7-6e26-41a9-93d2-0e69499780a7">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def a;

String assertionUUIDprior = tC.getPropertyValue("assertionUUIDprior").toString();

tC.setPropertyValue("z_resultNodeUserRowCount",null);

if (tC.getPropertyValue("expectErrType") == "SUCCESS" &amp;&amp;  tC.getPropertyValue("assertionUUIDprior").toString() !="null") {

	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	assertionSize = a.samlGetUUIDNodeUserRowCountbyUUID(assertionUUIDprior);

	log.info "ASSERT: No Rows for [$assertionUUIDprior]";
	assert assertionSize == 0;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion 1" disabled="true" id="52e9e631-cfed-4a2b-905b-1c7f2991bf4a">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def url = tP.getPropertyValue("targetURL");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

tC.setPropertyValue("assertionUUIDprior",tC.getPropertyValue("assertionUUID"));

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;
String errorID = null;
String errorReason = null;
String errorLink = null;
String orgRequest = url + "/rest/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection = "Keep-Alive";

String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "NODE_STATUS_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = false;
		doContentLocaton  = false;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request"
		errorReason = "The request is not valid.";
		errorLink = "";
	break;
	case "cert_not_provisioned":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = false;
		doContentLocaton  = false;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:certificate_not_provisioned"
		errorReason = "The security token is required.";
		errorLink = "";
	break;
	case "FORBIDDEN_INVALID_ROLE":
		errorReason = "The request is not authorized.";
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1120";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
	case "FORBIDDEN_INVALID_DURATION":
	errorReason = "The security token's duration is not valid.";
	errorID="urn:dece:errorid:org:dece:invalidDurationvalue";
	errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
	case "FORBIDDEN_INVALID_USER_STATUS":
	errorReason = "The request is not authorized.";
	errorID="urn:dece:errorid:org:dece:securitycontext:InvalidUserStatus";
	errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
	case "FORBIDDEN:1123":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The request is not authorized.";
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1123";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
	case "FORBIDDEN:1119":
		errorReason = "The request is not authorized.";
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1119";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
	case "unauthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorReason = "The request is not authorized.";
		break;
	
	case "token_rejected":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "text/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:"+expectErrType;
		errorReason = "The request is not authorized.";
		break;
	case "FORBIDDEN":
	default:
		errorReason="Unknown Error";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	

if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		/*
		// ErrorLink
		this.log.info "ErrorLink: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
		*/
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep><con:properties><con:property><con:name>ACCOUNT_OID</con:name><con:value>EB8468D28205FEB0E0401F0A05995B06</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value>urn:dece:org:org:dece:DEV</con:value></con:property><con:property><con:name>assertionROW</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <NODE_USER_SAML_ASSERTION_OID>EB83028EDEC18B6BE0401F0A05994690</NODE_USER_SAML_ASSERTION_OID>
      <NODE_OID>CCE44AF42FD2063BE0401F0A07991776</NODE_OID>
      <NODE_USER_SAML_ASSERTION_PART1>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHNhbWwycDpSZXNwb25zZSBDb25zZW50PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDpvYnRhaW5lZCIgRGVzdGluYXRpb249Imh0dHBzOi8vc3RkZWNxYXZ1dGwxLnZhLm5ldXN0YXIuY29tOjI0ODUvc2ltcGxlc2FtbC9tb2R1bGUucGhwL3NhbWwvc3Avc2FtbDItYWNzLnBocC9ETEFTUF9DU18xIiBJRD0iX2E0NmFhMzFhLTc5ZTUtNDQzNC04ODA2LTAyYTQ2NTAzMjQwMiIgSW5SZXNwb25zZVRvPSI3NWMyYjg0ZS0xNzNkLTQ4NWYtYTI5Ny1hNzhhNTM5NTQ5YmMiIElzc3VlSW5zdGFudD0iMjAxMy0xMS0xOVQwNjo0NToyOC4xNjRaIiBWZXJzaW9uPSIyLjAiIHhtbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIj48c2FtbDI6SXNzdWVyIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj5odHRwOi8vYy5kZWNlbGxjLmNvbS88L3NhbWwyOklzc3Vlcj48c2FtbDJwOlN0YXR1cz48c2FtbDJwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIvPjwvc2FtbDJwOlN0YXR1cz48c2FtbDI6QXNzZXJ0aW9uIElEPSJfOTNkMGE4MzQtZWFmMy00M2Q3LThmNGYtNzdhNTgzZGY2ZDc0IiBJc3N1ZUluc3RhbnQ9IjIwMTMtMTEtMTlUMDY6NDU6MjguMTY0WiIgVmVyc2lvbj0iMi4wIiB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+PHNhbWwyOklzc3Vlcj5odHRwOi8vYy5kZWNlbGxjLmNvbS88L3NhbWwyOklzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj4KPGRzOlNpZ25lZEluZm8+CjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+CjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz4KPGRzOlJlZmVyZW5jZSBVUkk9IiNfOTNkMGE4MzQtZWFmMy00M2Q3LThmNGYtNzdhNTgzZGY2ZDc0Ij4KPGRzOlRyYW5zZm9ybXM+CjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPgo8ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIj48ZWM6SW5jbHVzaXZlTmFtZXNwYWNlcyBQcmVmaXhMaXN0PSJkcyBzYW1sMiB4cyIgeG1sbnM6ZWM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvZHM6VHJhbnNmb3JtPgo8L2RzOlRyYW5zZm9ybXM+CjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIvPgo8ZHM6RGlnZXN0VmFsdWU+TEo2VDd1SUNEV0s5Ly8yL2lubXdFMkNsQXlrPTwvZHM6RGlnZXN0VmFsdWU+CjwvZHM6UmVmZXJlbmNlPgo8L2RzOlNpZ25lZEluZm8+CjxkczpTaWduYXR1cmVWYWx1ZT4KbERkLys5eTAvNE1SRVkrbG1FV2hra0pLLzIyNTY2aG9ENHZabUJmMFNCcEltYW0xNCtra3RvM1k1S0ZVd0ZKY25nNDBDVkFYQk1sYQpzV0ZGK095MDFpcU9RaS9yUUhrays4VTd1QmtmY0tXbFNIdVcvUlR0aUJjck5jaWZEUU1iclVjTnlPenh0LzVZc2Z0MG5UenVoQmZICkxENVZuN1JMOEN3S1QzdlJPN1U9CjwvZHM6U2lnbmF0dXJlVmFsdWU+CjwvZHM6U2lnbmF0dXJlPjxzYW1sMjpTdWJqZWN0PjxzYW1sMjpOYW1lSUQgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDpwZXJzaXN0ZW50Ij51cm46ZGVjZTp1c2VyaWQ6b3JnOmRlY2U6RUI4MkIwODU0QTZBMEExNkUwNDAxRjBBMDU5OTBFODU8L3NhbWwyOk5hbWVJRD48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjbTpzZW5kZXItdm91Y2hlcyI+PHNhbWwyOlN1YmplY3RDb25maXJtYXRpb25EYXRhIEluUmVzcG9uc2VUbz0iNzVjMmI4NGUtMTczZC00ODVmLWEyOTctYTc4YTUzOTU0OWJjIiBOb3RPbk9yQWZ0ZXI9IjIwMTMtMTEtMTlUMDk6NDU6MjguMTY0WiIgUmVjaXBpZW50PSJodHRwczovL3N0ZGVjcWF2dXRsMS52YS5uZXVzdGFyLmNvbToyNDg1L3NpbXBsZXNhbWwvbW9kdWxlLnBocC9zYW1sL3NwL3NhbWwyLWFjcy5waHAvQ0NFNDRBRjQyRkQyMDYzQkUwNDAxRjBBMDc5OTE3NzYiLz48L3NhbWwyOlN1YmplY3RDb25maXJtYXRpb24+PC9zYW1sMjpTdWJqZWN0PjxzYW1sMjpDb25kaXRpb25zIE5vdEJlZm9yZT0iMjAxMy0xMS0xOVQwNjo0NToxOC4xNjRaIiBOb3RPbk9yQWZ0ZXI9IjIwMTQtMTEtMTlUMDY6NDU6MjguMTY0WiI+PHNhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24+PHNhbWwyOkF1ZGllbmNlPnVybjpkZWNlOm9yZzpvcmc6ZGVjZTpETEFTUF9DU18xPC9zYW1sMjpBdWRpZW5jZT48L3NhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24+PC9zYW1sMjpDb25kaXRpb25zPjxzYW1sMjpBZHZpY2U+PHNhbWwyOkFzc2VydGlvblVSSVJlZj5odHRwczovL3FhLnEudXZ2dS5jb206NzAwMS9yZXN0LzEvMTEvU2VjdXJpdHlUb2tlbi9Bc3NlcnRpb24vXzkzZDBhODM0LWVhZjMtNDNkNy04ZjRmLTc3YTU4M2RmNmQ3NDwvc2FtbDI6QXNzZXJ0aW9uVVJJUmVmPjwvc2FtbDI6QWR2aWNlPjxzYW1sMjpBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMTMtMTEtMTlUMDY6NDU6MjguMTY0WiIgU2Vzc2lvbkluZGV4PSJfOTNkMGE4MzQtZWFmMy00M2Q3LThmNGYtNzdhNTgzZGY2ZDc0Ij48c2FtbDI6QXV0aG5Db250ZXh0PjxzYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YWM6Y2xhc3NlczpQYXNzd29yZDwvc2FtbDI6</NODE_USER_SAML_ASSERTION_PART1>
      <NODE_USER_SAML_ASSERTION_PART2>QXV0aG5Db250ZXh0Q2xhc3NSZWY+PHNhbWwyOkF1dGhlbnRpY2F0aW5nQXV0aG9yaXR5PnVybjpkZWNlOm9yZzpvcmc6ZGVjZTpjb29yZGluYXRvcjwvc2FtbDI6QXV0aGVudGljYXRpbmdBdXRob3JpdHk+PC9zYW1sMjpBdXRobkNvbnRleHQ+PC9zYW1sMjpBdXRoblN0YXRlbWVudD48c2FtbDI6QXR0cmlidXRlU3RhdGVtZW50PjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0iYWNjb3VudElEIiBOYW1lRm9ybWF0PSJ1cm46ZGVjZTp0eXBlOmFjY291bnRJRCI+PHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI+dXJuOmRlY2U6YWNjb3VudGlkOm9yZzpkZWNlOkVCODJCMDg1NEE1QzBBMTZFMDQwMUYwQTA1OTkwRTg1PC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48L3NhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWwyOkFzc2VydGlvbj48L3NhbWwycDpSZXNwb25zZT4=</NODE_USER_SAML_ASSERTION_PART2>
      <NODE_USER_SAML_UUID>_93d0a834-eaf3-43d7-8f4f-77a583df6d74</NODE_USER_SAML_UUID>
      <CREATED_DATE>2013-11-19 06:45:28.0</CREATED_DATE>
      <NODE_USER_ID>EB83028EDEBC8B6BE0401F0A05994690</NODE_USER_ID>
      <NODE_ACCOUNT_ID>EB83028EDEBB8B6BE0401F0A05994690</NODE_ACCOUNT_ID>
      <STATUS>active</STATUS>
      <EXPIRATION_DATE>2014-11-19 06:45:28.0</EXPIRATION_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUIDprior</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>audienceIgnoreAll</con:name><con:value>false</con:value></con:property><con:property><con:name>audienceIgnoreNodes</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>base64EncodedSignedAuthnRequest</con:name><con:value>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOkF1dGhuUmVxdWVzdCB4bWxuczpzYW1sMnA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgQXNzZXJ0aW9uQ29uc3VtZXJTZXJ2aWNlVVJMPSJodHRwczovL3N0ZGVjcWF2dXRsMS52YS5uZXVzdGFyLmNvbToyNDg1L3NpbXBsZXNhbWwvbW9kdWxlLnBocC9zYW1sL3NwL3NhbWwyLWFjcy5waHAvQzBDRUY4RTA4Q0NEQzdENkUwNDAxRjBBMDU5OTEyMEIiIERlc3RpbmF0aW9uPSJodHRwczovL3FhLnMudXZ2dS5jb206NzAwMS9zZWN1cml0eS9kZWxlZ2F0aW9uL3NhbWwvbG9naW5zZXJ2aWNlL2xvZ2luIiBGb3JjZUF1dGhuPSJ0cnVlIiBJRD0iNGJjY2M5OGMtMGRhMS00OTVkLTg2YzYtODk4MDExYmVmMjM5IiBJc3N1ZUluc3RhbnQ9IjIwMTMtMTEtMTlUMTQ6NTE6MzMuMDNaIiBQcm90b2NvbEJpbmRpbmc9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpiaW5kaW5nczpIVFRQLVBPU1QiIFZlcnNpb249IjIuMCI+PHNhbWwyOklzc3VlciB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+dXJuOmRlY2U6b3JnOm9yZzpkZWNlOkRFVjwvc2FtbDI6SXNzdWVyPjxzYW1sMnA6TmFtZUlEUG9saWN5IEFsbG93Q3JlYXRlPSJ0cnVlIiBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQtZm9ybWF0OnRyYW5zaWVudCIvPjxzYW1sMjpDb25kaXRpb25zIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj48c2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48c2FtbDI6QXVkaWVuY2U+dXJuOmRlY2U6b3JnOm9yZzpkZWNlOkRFVjwvc2FtbDI6QXVkaWVuY2U+PC9zYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPjwvc2FtbDI6Q29uZGl0aW9ucz48c2FtbDI6U3ViamVjdCB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+PHNhbWwyOk5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQtZm9ybWF0OnBlcnNpc3RlbnQiPmVtYWlsXzEzODQ4NTI4NTU3NThAZ21haWwuY29tPC9zYW1sMjpOYW1lSUQ+PC9zYW1sMjpTdWJqZWN0PjxTaWduYXR1cmUgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxTaWduZWRJbmZvPjxDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMS9SRUMteG1sLWMxNG4tMjAwMTAzMTUiLz48U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIi8+PFJlZmVyZW5jZSBVUkk9IiM0YmNjYzk4Yy0wZGExLTQ5NWQtODZjNi04OTgwMTFiZWYyMzkiPjxUcmFuc2Zvcm1zPjxUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPjwvVHJhbnNmb3Jtcz48RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiLz48RGlnZXN0VmFsdWU+STA1dkF5MWtQa05sdHNpVEhoWWpEMkI0U3NrPTwvRGlnZXN0VmFsdWU+PC9SZWZlcmVuY2U+PC9TaWduZWRJbmZvPjxTaWduYXR1cmVWYWx1ZT5UNmpwSVNPNmZYQ3Zld1YrY09uZlNHVzdYaEtMSnlUN0l5SDQ4OUxtY1NKYllMRmQxQ1NSMEdWZGRPM3RyVWJVUU5tYWM0SjBKZnBJClVDSm9YaGR3M0dQNlJEUXpUZk0xK1d5TjlrcHpxTGh6dVc3bWp6eGRESENQRFN6dlJOT1dBOEFyYW9BUCtEaG56RDlBeTdGekQxeGEKeU9aRlJmYnNSNndsWDFCcXRCMHYvbE0xeEYxbkx5Z0RDSFB3ODVYSEFwdW5VSy9VWVFRUC9oNmoxenZoYzNVRnN4MmNYUGIwQnc5WgpKM28zNHN5cW9XaVh4Rkp4Y1NBVVRGVzQzR1VKK1FaWEZqOEU5aUY4a2V3dHFuODZqUmo3UXVvODA2Y1dSRXJDUzlSSzVvanRuTktiCnkzeTlCcW00T1d0cmR6akxrTUVqeG9pYjI0ZnFaR3pYSHhtVUhvdGlqakVuSFNQdXBVbDdhNlZCRk5PUncvOTh5UExDK3ltYmdaWVIKT1BTeUUrbmJJWkhTSlp5SVpsOWs1NTVESmgvdlpCc002UnlkVFRXeVRNRE5KWXZiYk1SajJrS21Qd1ZTeTRBY2pVV0M4NTFPaTZUKwpMTUgzT1cxa1ZCMEVyOFZUNFFMRDd5MEJoVFNncGh2emN3M0RUNUVmS0xCazBVb1BFclNlSnZmcWN1QzhVc2psQjdtdmk0RXNJRmhmCmtKU1hrSXFQTmxMMmVnWkhLSkd3NXg2bnk1NUlZZzlVQllYcm05ckhZRTJIbnF2dmJLVkVpRFBuM3dqM01tb0lPdGtmcEZuMCtrTnQKdUhsUEVGRGdkYkhyNG15aFU0SG85NmxOM0pPMjM3bGp1Yzl1SnZ1VmFYcFd1bVQ3Mjc3dnhqY0E2WFZxdFREaVVjK1FHbXRLT29jPTwvU2lnbmF0dXJlVmFsdWU+PEtleUluZm8+PFg1MDlEYXRhPjxYNTA5U3ViamVjdE5hbWU+MS4yLjg0MC4xMTM1NDkuMS45LjE9IzE2MGY2NjZmNmY0MDZlNjU3NTczNzQ2MTcyMmU2MzZmNmQsQ049dXJuOmRlY2U6b3JnOm9yZzpkZWNlOkRFVixMPVN0ZXJsaW5nLFNUPVZBLEM9VVM8L1g1MDlTdWJqZWN0TmFtZT48WDUwOUNlcnRpZmljYXRlPk1JSUR6ekNDQXpnQ0FnVm9NQTBHQ1NxR1NJYjNEUUVCQlFVQU1Hb3hFREFPQmdOVkJBb1RCMDVsZFhOMFlYSXhDekFKQmdOVkJBc1QKQWxGQk1SRXdEd1lEVlFRSEV3aFRkR1Z5YkdsdVp6RVJNQThHQTFVRUNCTUlWbWx5WjJsdWFXRXhDekFKQmdOVkJBWVRBbFZUTVJZdwpGQVlEVlFRREV3MXVaWFZ6ZEdGeUxuRmhMbU5oTUI0WERURXpNRFV6TURFMU1EazFNMW9YRFRFNE1EVXlPVEUxTURrMU0xb3djVEVMCk1Ba0dBMVVFQmhNQ1ZWTXhDekFKQmdOVkJBZ1RBbFpCTVJFd0R3WURWUVFIRXdoVGRHVnliR2x1WnpFaU1DQUdBMVVFQXhNWmRYSnUKT21SbFkyVTZiM0puT205eVp6cGtaV05sT2tSRlZqRWVNQndHQ1NxR1NJYjNEUUVKQVJZUFptOXZRRzVsZFhOMFlYSXVZMjl0TUlJQwpJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBZzhBTUlJQ0NnS0NBZ0VBMlRGK3NQdXVEM2Rrb1dPZFJ0dlpLSmMzMUZYVENVN3FhaERUCjEzeDFEd1JpajhqbGxpZ3g5MnlUdUl0N1hOckJ5cXV4cGcvYkI0eG9JK0kvRXBUc3pBaktoQ2xOK1EvaWdRWmUwZTFtRFVzaWdGYVMKaXBUeG5tU1o0WmVBK3pQaUpxWlB4NkNFamZZMjRPN3dYTkJ2WTI1anQ5eW5wZlFhTDhQWkpCRnNWV0VjTG5OYXdHcEdONzQrZVl2Wgo0Y2QxOXd0SEMwWXR5dkd0bU1tSUJmK2RjM29sS0g0NktFOHhDSDN1NlJUdG1GUUxVK2FUVzlqNTJ6ZXpETDdwYTRZOE1KVFZ2R0lECmRVWmZnUlhMSy9IYjFZK1RTT2cyUUo4Y3R4Q3l2eS9DenpoRkc2a0lRTkF1UFVOVXB0V0g2bFpjNEs3TmtqbVlSZEFJRHRENzNiSFYKaFU3b280UkVnOHZrTTVJbXhYbnMwMmFYNjRDTzdyQlhtT2N4TE5ydGJYN3l4SFBpZGdnaWx1eEwyd0ZUWStZSThHYkxsODNmSkdJZQpjZldFR0dqZndLbGhyamdERXRBK2ZSbjEwcktkNE9Hbk9nL2d4eFlGUnM0UGJFdHBNNUhWNjh3dkdJVUVJbm9lTkRuTUJqY1hJdnF6CnJPeThHaHNwaThqaTR2V3dKUGF0WlB4L290MGp6dmo5QkFRVThQTnIzVE8yTDNxdXExNkhtOENVREt0SUE0Uk54RVkzbWZuRUFtcHYKUmFNbG5HQ3pxRFJ4b3hEY0VSUTJHckl0Y0pKNEY5QWdYOHNPUmlKZUxBQ2t6RDdsYmRteFlIZnp4c21tU1p5aWNyZ09WQ2xUUzFBeApjS0ZmWTVyckw1c2lLOFlWQzBmcnVYSmdybVRNVk1lbzI4cGJkbFVDQXdFQUFUQU5CZ2txaGtpRzl3MEJBUVVGQUFPQmdRQjVVbDJMClJhU2t5L2RKdkM2SnQ1RFd1NHk2Um5JM2ppWHMwUS8wUkdoUlM1QkpaUjdSNHh3aEhVVnhCSkN5S09lZkhDWnhaZzQzV1Z1WGNkSXcKckE4akFhaVNBNzRIcTZ5dFI3RkdPbFFtNzdSQll4NWRENnI2bzl4N3pZYkRUVzJ0Ky9KOEtmQUlQd0tSTjBRV3hYQmV5NEhTWmlUUwpRa1dUU21SRXlTRDB4Zz09PC9YNTA5Q2VydGlmaWNhdGU+PC9YNTA5RGF0YT48L0tleUluZm8+PC9TaWduYXR1cmU+PC9zYW1sMnA6QXV0aG5SZXF1ZXN0Pg==</con:value></con:property><con:property><con:name>computedAssertionXML</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2p:Response Consent="urn:oasis:names:tc:SAML:2.0:consent:obtained" Destination="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/CON" ID="_cb6b3e67-2e24-4021-9bbd-7ef09c21812b" InResponseTo="0fc3b34c-90d5-4d85-9ed7-a7f24873237b" IssueInstant="2013-11-18T16:09:39.427Z" Version="2.0" xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol"><saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">http://c.decellc.com/</saml2:Issuer><saml2p:Status><saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/></saml2p:Status><saml2:Assertion ID="_ae9e811b-f45d-4933-bc79-31aa8017cb2a" IssueInstant="2013-11-18T16:09:39.427Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_ae9e811b-f45d-4933-bc79-31aa8017cb2a">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>2EjRvRuZ0pNx59fxOsErct3pQAk=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
qgbAExuZKfv+sI1UGbQNSlr1AsIXOuiNuJIDn+As0wJb6pKvkgderksfneKUxP5qAHoVwmnh9HIr
pPMc0k/EGI5opNL8UER1sukT1jSPFv+fb4kLl3CAcYrAAUSdGIb2JLVS3YCKiJ8MrrpbvrGMruz1
y4K8rtwgdChPGfU8THU=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:EB76BB31EB272C79E0401F0A0599047E</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="0fc3b34c-90d5-4d85-9ed7-a7f24873237b" NotOnOrAfter="2013-11-18T19:09:39.427Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/C0CEF8E08CC0C7D6E0401F0A0599120B"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2013-11-18T16:09:29.427Z" NotOnOrAfter="2013-11-19T16:09:39.427Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:CON</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_ae9e811b-f45d-4933-bc79-31aa8017cb2a</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2013-11-18T16:09:39.427Z" SessionIndex="_ae9e811b-f45d-4933-bc79-31aa8017cb2a"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:EB76BB31EB012C79E0401F0A0599047E</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></saml2p:Response>]]></con:value></con:property><con:property><con:name>dbassertionNodeaccountid</con:name><con:value>urn:dece:accountid:org:dece:EB76BB31EB012C79E0401F0A0599047E</con:value></con:property><con:property><con:name>dbassertionNodeuserid</con:name><con:value>urn:dece:userid:org:dece:EB76BB31EB272C79E0401F0A0599047E</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">6</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectNodeUserRowCount</con:name><con:value>0</con:value></con:property><con:property><con:name>httpBody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece">
   <Error ErrorID="urn:dece:error:MalformedRequest">
      <Reason Language="en-us">405 Method Not Allowed. The request cannot be fulfilled because the method is unknown or not supported at the requested server.</Reason>
      <OriginalRequest>urn:dece:type:null</OriginalRequest>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>356</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>text/xml</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 405 Method Not Allowed</con:value></con:property><con:property><con:name>jksFile</con:name><con:value>C:/certs/DEV.jks</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/DEV_concat.pem</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>urn:dece:org:org:dece:DEV</con:value></con:property><con:property><con:name>NODE_OID</con:name><con:value>C0CEF8E08CCDC7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>responsetype</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>signedAuthnRequest</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:AuthnRequest xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" AssertionConsumerServiceURL="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/C0CEF8E08CCDC7D6E0401F0A0599120B" Destination="https://qa.s.uvvu.com:7001/security/delegation/saml/loginservice/login" ForceAuthn="true" ID="4bccc98c-0da1-495d-86c6-898011bef239" IssueInstant="2013-11-19T14:51:33.03Z" ProtocolBinding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Version="2.0"><saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:DEV</saml2:Issuer><saml2p:NameIDPolicy AllowCreate="true" Format="urn:oasis:names:tc:SAML:2.0:nameid-format:transient"/><saml2:Conditions xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:DEV</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Subject xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">email_1384852855758@uvvutesting.biz</saml2:NameID></saml2:Subject><Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/><SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><Reference URI="#4bccc98c-0da1-495d-86c6-898011bef239"><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/></Transforms><DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><DigestValue>I05vAy1kPkNltsiTHhYjD2B4Ssk=</DigestValue></Reference></SignedInfo><SignatureValue>T6jpISO6fXCvewV+cOnfSGW7XhKLJyT7IyH489LmcSJbYLFd1CSR0GVddO3trUbUQNmac4J0JfpI
UCJoXhdw3GP6RDQzTfM1+WyN9kpzqLhzuW7mjzxdDHCPDSzvRNOWA8AraoAP+DhnzD9Ay7FzD1xa
yOZFRfbsR6wlX1BqtB0v/lM1xF1nLygDCHPw85XHApunUK/UYQQP/h6j1zvhc3UFsx2cXPb0Bw9Z
J3o34syqoWiXxFJxcSAUTFW43GUJ+QZXFj8E9iF8kewtqn86jRj7Quo806cWRErCS9RK5ojtnNKb
y3y9Bqm4OWtrdzjLkMEjxoib24fqZGzXHxmUHotijjEnHSPupUl7a6VBFNORw/98yPLC+ymbgZYR
OPSyE+nbIZHSJZyIZl9k555DJh/vZBsM6RydTTWyTMDNJYvbbMRj2kKmPwVSy4AcjUWC851Oi6T+
LMH3OW1kVB0Er8VT4QLD7y0BhTSgphvzcw3DT5EfKLBk0UoPErSeJvfqcuC8UsjlB7mvi4EsIFhf
kJSXkIqPNlL2egZHKJGw5x6ny55IYg9UBYXrm9rHYE2HnqvvbKVEiDPn3wj3MmoIOtkfpFn0+kNt
uHlPEFDgdbHr4myhU4Ho96lN3JO237ljuc9uJvuVaXpWumT7277vxjcA6XVqtTDiUc+QGmtKOoc=</SignatureValue><KeyInfo><X509Data><X509SubjectName>1.2.840.113549.1.9.1=#160f666f6f406e6575737461722e636f6d,CN=urn:dece:org:org:dece:DEV,L=Sterling,ST=VA,C=US</X509SubjectName><X509Certificate>MIIDzzCCAzgCAgVoMA0GCSqGSIb3DQEBBQUAMGoxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsT
AlFBMREwDwYDVQQHEwhTdGVybGluZzERMA8GA1UECBMIVmlyZ2luaWExCzAJBgNVBAYTAlVTMRYw
FAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEzMDUzMDE1MDk1M1oXDTE4MDUyOTE1MDk1M1owcTEL
MAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEiMCAGA1UEAxMZdXJu
OmRlY2U6b3JnOm9yZzpkZWNlOkRFVjEeMBwGCSqGSIb3DQEJARYPZm9vQG5ldXN0YXIuY29tMIIC
IjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA2TF+sPuuD3dkoWOdRtvZKJc31FXTCU7qahDT
13x1DwRij8jlligx92yTuIt7XNrByquxpg/bB4xoI+I/EpTszAjKhClN+Q/igQZe0e1mDUsigFaS
ipTxnmSZ4ZeA+zPiJqZPx6CEjfY24O7wXNBvY25jt9ynpfQaL8PZJBFsVWEcLnNawGpGN74+eYvZ
4cd19wtHC0YtyvGtmMmIBf+dc3olKH46KE8xCH3u6RTtmFQLU+aTW9j52zezDL7pa4Y8MJTVvGID
dUZfgRXLK/Hb1Y+TSOg2QJ8ctxCyvy/CzzhFG6kIQNAuPUNUptWH6lZc4K7NkjmYRdAIDtD73bHV
hU7oo4REg8vkM5ImxXns02aX64CO7rBXmOcxLNrtbX7yxHPidggiluxL2wFTY+YI8GbLl83fJGIe
cfWEGGjfwKlhrjgDEtA+fRn10rKd4OGnOg/gxxYFRs4PbEtpM5HV68wvGIUEInoeNDnMBjcXIvqz
rOy8Ghspi8ji4vWwJPatZPx/ot0jzvj9BAQU8PNr3TO2L3quq16Hm8CUDKtIA4RNxEY3mfnEAmpv
RaMlnGCzqDRxoxDcERQ2GrItcJJ4F9AgX8sORiJeLACkzD7lbdmxYHfzxsmmSZyicrgOVClTS1Ax
cKFfY5rrL5siK8YVC0fruXJgrmTMVMeo28pbdlUCAwEAATANBgkqhkiG9w0BAQUFAAOBgQB5Ul2L
RaSky/dJvC6Jt5DWu4y6RnI3jiXs0Q/0RGhRS5BJZR7R4xwhHUVxBJCyKOefHCZxZg43WVuXcdIw
rA8jAaiSA74Hq6ytR7FGOlQm77RBYx5dD6r6o9x7zYbDTW2t+/J8KfAIPwKRN0QWxXBey4HSZiTS
QkWTSmREySD0xg==</X509Certificate></X509Data></KeyInfo></Signature></saml2p:AuthnRequest>]]></con:value></con:property><con:property><con:name>sName</con:name><con:value>DTCreate_Node Role_CREATED_BY_NODE_OID</con:value></con:property><con:property><con:name>subject</con:name><con:value>email_1384852855758@uvvutesting.biz</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_007_DTCreate_Forbidden_Device_User_created_by_node_RTL</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>unSignedAuthnRequest</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:AuthnRequest xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" AssertionConsumerServiceURL="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/C0CEF8E08CCDC7D6E0401F0A0599120B" Destination="https://qa.s.uvvu.com:7001/security/delegation/saml/loginservice/login" ForceAuthn="true" ID="4bccc98c-0da1-495d-86c6-898011bef239" IssueInstant="2013-11-19T14:51:33.03Z" ProtocolBinding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Version="2.0"><saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:DEV</saml2:Issuer><saml2p:NameIDPolicy AllowCreate="true" Format="urn:oasis:names:tc:SAML:2.0:nameid-format:transient"/><saml2:Conditions xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:DEV</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Subject xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">email_1384852855758@uvvutesting.biz</saml2:NameID></saml2:Subject></saml2p:AuthnRequest>]]></con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1384852868181</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value>EB8468D282FCFEB0E0401F0A05995B06</con:value></con:property><con:property><con:name>UUID</con:name><con:value>4bccc98c-0da1-495d-86c6-898011bef239</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>EB76C2E772ACABFDE0401F0A07995AF8</con:value></con:property><con:property><con:name>z_resultNodeUserRowCount</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ca40557e-002f-42ba-a0fd-470051fc8b75</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07f805a5-22a5-411d-9c98-72b32712408f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f2c3ad04-b40d-4097-81fc-3cb095d52d65</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d0121006-d942-4dbb-9e17-82e85ad23bdd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserStatusUpdate" searchProperties="true" id="7fe32f6c-a8d4-4dbe-9fd6-17710e44636a"><con:settings/><con:testStep type="groovy" name="Establish test case properties" id="9cc799da-ecfe-4afe-a6ea-c300077de2a4"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("SAML",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract properties from callling test case" id="3740efee-4cd7-4c04-85a6-ca62c22923dd"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tName = context.expand( '${#TestCase#tName}' );
def sName = context.expand( '${#TestCase#sName}' )
def myTC = tP.getTestSuiteByName(sName).getTestCaseByName(tName);

tC.setPropertyValue("NODE_ID",myTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("UserName",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("userStatus",myTC.getPropertyValue("userStatus"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID", myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL", myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("SAML",myTC.getPropertyValue("SAML"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set PEM" id="0e99f012-b407-4f99-abc1-bd30a21f37ee"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem");
myTC.setPropertyValue("NODE_ID",tC.getPropertyValue("NODE_ID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Status_Update");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Status_Update" id="fb1ebf12-21ae-4668-9436-d5a9603108d5"><con:settings/><con:config service="UserStatusUpdate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update" methodName="UserStatusUpdate - UserStatusUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Status_Update" mediaType="application/xml" postQueryString="false" sslKeystore="RET_CS_1_concat.pem" accept="" id="b051a1f0-7610-44bf-ab72-218e09c4e50f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ResourceStatus xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Current>
		<Value>${#TestCase#userStatus}</Value>
		<Description>User Updated</Description>
	</Current>
</ResourceStatus>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountId" value="urn:dece:accountid:org:dece:${#Project#Node_Account_ID}"/>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Exacting all http property values from the Rest Reponse" id="63b1865d-3462-429e-941b-f05f8a699bb8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Status_Update');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def decodeLocation = URLDecoder.decode(contentLocation, "UTF-8");
//contentLocation = decodeLocation;

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verifying the Response headers and body" id="2a48a2ee-1c86-48df-aba0-46ff4adee0d3"><con:settings/><con:config><script>
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );

def usercount = context.expand( '${#TestCase#UserCount}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#Project#Node_Account}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";

//String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus   = "HTTP/1.1 303 See Other";
		XMLbodynull        = true;
		processXMLFlag  = false;
		httpLocationHeader = true;
		
	break;

	case "INVALID_STATUS_UPDATE":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusTransitionRequestedNotAllowed";
		//errorReason = "Requested Status transition is not allowed for the resource";
		errorReason = "The requested status transition is not allowed for the resource.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusTransitionRequestedNotAllowed";
	break;

		case "INVALID_STATUS_UPDATE_ON_USER":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusTransitionRequestedNotAllowed";
		//errorReason = "Requested Status transition is not allowed for the resource";
		errorReason = "The requested status transition is not allowed for the resource. - Status requested cannot be applied on the user";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusTransitionRequestedNotAllowed";
	break;
	case "INVALID_STATUS_UPDATE_ON_USER_TOU":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusTransitionRequestedNotAllowed";
		//errorReason = "Requested Status transition is not allowed for the resource";
		errorReason = "The requested status transition is not allowed for the resource. - User has latest TOU";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusTransitionRequestedNotAllowed";
	break;

	


	
	case "API_NOT_AUTH":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	//errorReason = "API call not authorized";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "NULL_BODY":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		expectHTTPcontenttype = "text/xml;charset=UTF-8";
		XMLbodynull        = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "XML_PARSE_ERROR":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorReasonFlag = false;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		//errorReason = "User ID does not match security token";
		errorReason = "The member’s user ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;

	
	case "USER_INACTIVE":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	//errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	//errorReason = "Requesting User ID Not Specified";
	errorReason = "A user ID is required.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		//errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "The requesting member does not have permission to perform this action."
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		//errorReason = "Request Account ID not match";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		//errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	case "NO_MNG_USER_CNST":

	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		//errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;
	case "TOU_NOT_ACCEPTED":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The account status cannot be modified. - First User has to accept TOU to move the Account to active status";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusCannotBeModified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusCannotBeModified";
	break;

     case "ACCT_INACTIVE":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		//errorReason = "The identified account is not active.";
		errorID     = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		//errorReason = "The request is unauthorized.";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;

     case "SAME_CURRENT_STATUS":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:ResourceAlreadyInRequestedStatus";
		//errorReason = "Resource is already in the status requested";
		errorReason = "The resource is already in the requested status.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceAlreadyInRequestedStatus";
     break;

     case "MTHD_NOT_ALLOWED":
     log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		errorID     = "urn:dece:errorid:org:dece:ResourceAlreadyInRequestedStatus";
		errorReason = "Resource is already in the status requested";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceAlreadyInRequestedStatus";
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
log.info 'Expected: '+expectHTTPstatus
log.info 'Actual: '+context.expand( '${#TestCase#httpStatus}' )
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;
def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	//def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;

	    if(errorReasonFlag)
	    {
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;
	    }
		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
} 




</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 303 See Other</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/2015/02/Account/urn:dece:accountid:org:dece:0A7D566D348D44A7E05307991F0A0458/User/urn:dece:userid:org:dece:0A7D5628EC7744A5E05307991F0A471E</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>AccountID</con:name><con:value/></con:property><con:property><con:name>synced</con:name><con:value/></con:property><con:property><con:name>QC_Id</con:name><con:value/></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>  <ResultSet fetchSize='10'>    <Row rowNumber='1'>      <ACCOUNT_OID>B738C2531ADDBBFFE0401F0A059979EE</ACCOUNT_OID>      <STATUS>blocked</STATUS>      <STATUS_HISTORY>blocked</STATUS_HISTORY>      <HISTORY_OID>B8D3EBD82853227EE0401F0A07994CEF</HISTORY_OID>    </Row>  </ResultSet></Results>]]></con:value></con:property><con:property><con:name>Node_Account_ID</con:name><con:value>0A7D566D348D44A7E05307991F0A0458</con:value></con:property><con:property><con:name>Node_User_ID</con:name><con:value>0A7D5628EC7744A5E05307991F0A471E</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_015_DTCreate_retailer_ACCOUNT_USER.STATUS_of_'deleted'</con:value></con:property><con:property><con:name>sName</con:name><con:value>6_DTCreate_RTL</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\uv-coordinator-api-regression\Certs\QALP1/RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value/></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0A7D566D348D44A7E05307991F0A0458</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0A7D5628EC7744A5E05307991F0A471E</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc6o6FP0rDuexgwSEozDVGSv1lGmrVnt62r6ciSFoWkgsSdT2198ElYr9uN77xGSzs/baH1nJKYdZ6gRdznEuCKO1dZZSHhTWtiFzGjDICQ8ozDAPBAom3eurwKmDAO62GLUobBt/fd/HvufH5hQkrum60DWh18CmD+KG3cIN6KGGcuVc4ohyAaloGw6wXdN2TLt1azuBbQeOXwcueDRqdzjnClu51IGxJbXmbWMuxCKwrNVqVV816iyfWQ4AtnV/fTVBc5xBo3O6yagIlHe2/qgeY4TTFNURy6xTq+JzGvNgQmYUCpnjbaz4q1jAAr6lfGJOZj+Mci+OI5qwYtmDlFGCYEreoK7PNRZzFte66YzlRMyzL5OwgQY28RqZyHbpD8OqUjsSqMIw59Dkc2hvscY4wTmmCNd+j6O28eO4rhVbb3NIecLyjFeX/40PpkucsgWOTb5La0vteMBPKtU5xSiIKEolJ0s80MO6gAjzbTcxOh6qNspxQtZXhKsBXXPNztqnd7DcVCMkM8zF/2nQXnM2IHcwlbgT8fBhwvz498Po8s+s8RDBq+l9BKbXQ9AuCOw7F4aytZvlwVCWQ7TZcXf5fN09B+zp9/o8X8hH0Bt4w2R8j2cybA3c12QgeyeT/mA1k8+PoyeQjDK37132/WzVPJGXZ87F2gZ/Tn6J7MQL49zHaxr+enu6gfJk5U/T20n358VZr9f1Rm+jXrMP2YPl5WdL++nZvWg583l0ctW3JLuRf/hzGk5XQ9Fk7lPjDjzeLy5vxtngrgHD3ms6vJi1y3T2+FdtuzM/kdMnjMRuqccgCmt91SUovhczbSGxmRSuwUKLDxeYCqOjd2ntCKSSOxIHqoebNeg2Q++n0zrvNZuu2/XOgdcATd+3+6DrNu3znchsWBxQ7DGaEB1LS+5mbL4niLKAYxrj3FwyqZSOG98ghlDAWkTH6hAwyvEtU/JsL5x85j87dOnZrQQ0k5b9Qh2KMqM2YGJIh3k3ETivarJX0eQxRmRBsBZuPddcDTYXqhYvcClFateXsE6xVNKea5UNHLflWZxkixRrplbGYpni+mK+KCpj8c3XMSHihXV8fvu3N/lbHAfry+QO/+3qoHxioh24TugMq17iT24Ye5fN11m39rPewXdlTPTpUkUVOUEbJtVf77Oih6QclF1aO96l+6GhAm0dZlVGi5cElSNfXtxKz5UCdHaNeYH1l7pcLmXRiqZWulzBK/mxPQs41gQjqTTq9ZY9Y2qVKNZRF0JJ/CB4aa9SlGJOJwIKnKnZqRXLI14AE8z1CyBSQ78+9nlRCalKJ/BafGbrper1ohl/+8BBAdJ+yjxSnxXL4/eOfYK1F0flqR4AgtCZXunL4PWL4UBMwRIlYyzfB/8M4LPgVWNZ5JKLUAM1lQJ//aem9altQISYpCIKjcKwr5kFT/G6wMG70weYQpbLdxr594eaSYoRQFi97jgp8PV1G+gjQGd7ursN+lF6f4YNtxUq6W3uSy9wvVZZlAq7zgfzR8tenQ5nvPMP</con:value></con:property><con:property><con:name>UserName</con:name><con:value>dtcapi_107_1418904746321</con:value></con:property><con:property><con:name>userStatus</con:name><con:value>urn:dece:type:status:suspended</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>10376bb3-1e64-4e44-b238-181110f98cbe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1369b872-9c66-45f1-99f0-f8a6189a1c88</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ebb91e19-4b66-477f-a4b7-b522a95a3d76</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamCreate API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="101b94c9-98b2-4367-87f4-3b4e1d0e02b5">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="8c830e5f-4a34-423e-a069-1b6e45c4b5da">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assert",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("streamcreateFlagSkipUserTest",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("rightstokenFULL",null);
tC.setPropertyValue("status",null);
tC.setPropertyValue("connection",null);
tC.setPropertyValue("contentType",null);
tC.setPropertyValue("contentLength",null);
tC.setPropertyValue("contentLocation",null);
tC.setPropertyValue("expectErrTypeStreamCreate",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="c435bd02-6bbd-408e-ba13-59b2b09f39cb">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("expectErrTypeStreamCreate",callTC.getPropertyValue("expectErrTypeStreamCreate"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("rightstokenFULL",callTC.getPropertyValue("rightstokenFULL"));
tC.setPropertyValue("streamcreateFlagSkipUserTest",callTC.getPropertyValue("streamcreateFlagSkipUserTest"));

			
if (tC.getPropertyValue("expectErrTypeStreamCreate") == null ||
	tC.getPropertyValue("expectErrTypeStreamCreate") == "null") {
	tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");		
}
if (tC.getPropertyValue("streamcreateFlagSkipUserTest") == null ||
	tC.getPropertyValue("streamcreateFlagSkipUserTest") == "null") {
	tC.setPropertyValue("streamcreateFlagSkipUserTest","false");		
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PEM Set" id="edf2ea7c-574a-47a3-9e34-c8614845fae4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - StreamCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="POST - StreamCreate" id="779ddb30-0dfa-4bb2-99b6-793504f6c316"><con:settings/><con:config service="Stream" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Stream" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - StreamCreate" mediaType="application/xml;charset=UTF-8" postQueryString="false" sslKeystore="80008000.pem" id="e4c2f0ac-e80d-40af-a880-de56289dcb8e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Stream xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
  <StreamClientNickname/>
 <RequestingUserID>${#TestCase#assertionUserIdFULL}</RequestingUserID>
 <RightsTokenID>${#TestCase#rightstokenFULL}</RightsTokenID>
</Stream>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ACCT" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep>
      <con:testStep type="groovy" name="Extract Response Body/Headers" id="6a07a179-c897-4896-ac0b-31429752f013">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep      = tC.getTestStepByName("POST - StreamCreate");
def expectType = tC.getPropertyValue("expectErrTypeStreamCreate");

tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);

String expectHTTPStatus = "";

if (expectType == null || expectType == "" || expectType == " ") {
	expectType = "SUCCESS";
}

this.log.info "expectType [$expectType]";
switch (expectType) {
	case "SUCCESS":
	default:
		expectHTTPStatus = "HTTP/1.1 201 Created";
	break;
}

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			if (tP.getPropertyValue("versionMinor")!="02"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("contentLocation",contentLocation);

this.log.info "status[$status] expectHTTPStatus [$expectHTTPStatus]";
assert status.toString() == expectHTTPStatus;

/*
*  Get the stream handle
*/
if (status == "HTTP/1.1 201 Created") {
	String sh;
	String shfull;
	
	def b = contentLocation.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}
	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
		int lastSlash = urlStr.lastIndexOf('/');
		int lastColon = urlStr.lastIndexOf(':');
		shfull = urlStr.substring(lastSlash + 1);
		sh = urlStr.substring(lastColon + 1);
	
		tC.setPropertyValue("streamhandle",sh);
		tC.setPropertyValue("streamhandleFULL",shfull);
	}else{
		int lastSlash = urlStr.lastIndexOf('/');
		int lastColon = urlStr.lastIndexOf('%3A');
		shfull = urlStr.substring(lastSlash + 1);
		sh = urlStr.substring(lastColon + 3);
	
		tC.setPropertyValue("streamhandle",sh);
		tC.setPropertyValue("streamhandleFULL",shfull);
	}
	

	log.info "streamhandleFULL[$shfull] - streamhandle[$sh]";
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Fetch STREAM_DATA Row" id="d89970c6-3fee-4177-8cdf-6539a8a10b52">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

tC.setPropertyValue("rowSTREAM_DATA",null);

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	String row = dbUtils.streamGetRow(tC.getPropertyValue("streamhandle").toString());

	assert row.length() > 0;

	log.info "Row[$row]";

	tC.setPropertyValue("rowSTREAM_DATA",row);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Validate STREAM_DATA.ACCOUNT_OID" id="44e8c119-d614-4c0f-b9fc-1e7c98911905">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def dbUtils;

String expectAccountId = tC.getPropertyValue("accountoid").toString();
String XMLbody = tC.getPropertyValue("rowSTREAM_DATA").toString();

try {
	myXML = new XmlSlurper().parseText(XMLbody);
}
catch(Throwable e) {
	log.info "ERROR - XmlSlurper - $e";
	assert 1 == 2;
}
finally {
	String accountoid = myXML.ResultSet.Row[0].ACCOUNT_OID.text();

	log.info "Assert Received [$accountoid] == Expected [$expectAccountId]";

	assert expectAccountId == accountoid;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Validate STREAM_DATA.USER_OID" id="0419fc51-0d79-40f2-86af-87e6cdcade6b">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def dbUtils;

String expectuseroid = tC.getPropertyValue("useroid").toString();
String XMLbody = tC.getPropertyValue("rowSTREAM_DATA").toString();

if (tC.getPropertyValue("streamcreateFlagSkipUserTest") != "true") {
	try {
		myXML = new XmlSlurper().parseText(XMLbody);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		String useroid = myXML.ResultSet.Row[0].USER_OID.text();

		log.info "Assert Received [$useroid] == Expected [$expectuseroid]";

		assert expectuseroid == useroid;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Validate STREAM_DATA.CREATED_BY" id="1f3511de-4692-476c-b65f-7efe188243d8">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def dbUtils;

String expectcreatedby = tC.getPropertyValue("nodeid").toString();
String XMLbody = tC.getPropertyValue("rowSTREAM_DATA").toString();

try {
	myXML = new XmlSlurper().parseText(XMLbody);
}
catch(Throwable e) {
	log.info "ERROR - XmlSlurper - $e";
	assert 1 == 2;
}
finally {
	String nodeoid = myXML.ResultSet.Row[0].CREATED_BY.text();

	log.info "Assert Received [$nodeoid] == Expected [$expectcreatedby]";

	assert expectcreatedby == nodeoid;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return the Streamhandle" id="53b30e3f-c6f7-4f1a-abcf-318dd86a2928">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle"));
callTC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL"));
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_70078 - STSCreate - llasp - unamepasswd - Standard User - Affiliated node Retailer can perform RightsTokenCreate, DLASP can perform RightsTokenGet and LLASP can perform StreamCreate - P0</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>STS Create Tokentype unamepasswd - LLASP</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVdbk6q8En33V1juR8vhonirmakKV1FBQby+nEKIgCIoAUF//Qk4Ojp7Zn/7O+dhyknT3VndWUlWXpG59+kuQAhGsRcGZZl/q/wHduz1xoRmrd6E61qjsSZrHZOBNapj1Vt2i1k32malLCOUQDlAsRnEbxWapOo1sl6jWwbZ7jaYbqPz0qSZVaU8gxHCqbHLC1kpZ3s/QN1i2rdKEgXd0EQe6gbmHqJubHUnQBl2sWfXvGGqvL9eURYTRu9uHB+6BGG92NCCvm+9WOGeeCWefF5t1J14TmDGSQQ/5rTRW+UjNk3Tl7T+EkYOQZMkSZAdAvvYyHN+Vd5Lt2Boy8EmvI45MwgDzzJ972LmoBQYu6FdBr4TRl7s7n9ITREUmaeuwcyqWVQj+FUhPico0P1lpieQETJryDWpWzIdbmAEAwuWp7r8Vvn1dyt4jTUiM0CbMNqjL+N/BwkGJ+iHB2jX0K2yG7q/z/hNu95fodWVA8tPkHeCak6Tg2lBVB5HcONlQw9h8tmoXCx/OUM3hkHr3yzJK/GIE8MmvukM7zkQxf/Lej2u1TXLzPQT+F4NnfGw50n0chy2G2PWMEIzgAzrmvJbAeHR+QrqvtQf469EvfPqI2jemcx7R3XaPzAindFooE8zv51KngOWgZciUh1uGXPcHCUq5cRcv7olHUOrbrKz5HhVd03BVrU6Go0NFemlVdgX3DMFGkPOtlKtORG9gzpnmlvRTsDIW1/mylFVV44SGf2xrrDWQIjjXksgG7OgPTS2FO3vVtjDFuislEF1Fk+0yWxu8iKdEnSLfPus6bGGvK4BPBdF5v8vGLLDm7F5H3D5SbHB2zOG74os88mF48B54oBUZoGD/7ZAZZ3d0d15UiclWaBpIuA51t8KQwXsJEBNBdZVuNlMybgL6LOOOsOBRgn4K1bRhZRPl/xM03pC6hq2NDuvJT9ZXQRVAagI5lxF0IUZrxuCooDwassUfi1lW2WipLK25Es4AS9kh4stdWIoZZ5Fy4wyYejlhElWixm2i+fhXj2tDcFXOEXiJkdpIq/rvCb0gb6cW7SY4NjLcH8IS8sp+xDUP8AtgGJK4jnBRTF2qWJMaZXXzcJmPNsUWeorGko5rahKKglpfza9fPaCYxXO3guZYIDxtReWwYkquVr0kTlnAkUHKe8UwQMhtUc3IIpGpiXu2quhkOqCPlVFRZdTARQ2Xkh9tKZVdy25J6uuZX0DbB8XhtOEuRjg74F+ss7MsWRKIljvZ5RV113LYzxzEabOqp3y2rI/CFcyTqMCTWBZDWBAJMhLw/1nwZCdMaOD16E9ONyI4R66UUmhwsHudMnItlcfOWPMXH6za40lb1w3bZeQfYve1ndAlqE9oFzNtPUlofOBd2mOBtMF9KLlJVYZjWp6baakz5Ppgg/9lt1bLKeDara0NGM0nkzn40uWqcdt++LHvRHbiyZ9hXdGKoRjZFUJ0hRZo80z3LK3xXza6CRkSsBRWACkreMIHiYw29teSdjTFQGTFyhcKnFzTpoASaoKMstr2kZ0qbElzZIppSqyYPu4TeflQvdLK47l8UqR5nx1WNIiuTKAXSTTGoLoaFOm2l/Alab6xiwG6WG2CSiKlA5ab6OkjqXkDLDldMLiXcSWEhlMzdGhT2aDWZOkjprt9ycdMK1nE3qXjVxndd45qx1elOXD1lkawJ8ZDxyTMcXmJc0QdAW0r/stU+RpXfetfXZY762MN/CaFcGhwQq6qJHTjOfB4GpDBqAztLwIW4UTivgSyBQT0+K0XrhoGajeyBASTNrkgS7bNU3+I8dyipWeOXbkgAa+cky4ckwAm2NVbvMUYprcAc1Th5WEo9aaDfudA6kthrsSWxUJJ/b8xihop8agOqfOacvdavN5R+Zdrhpslm59HbOkebE02N+1JE/f8UGz4Z+VoaIxU4/wz+QWHlM0LKkyFQj1+CISnSipsvuVt79c6g16uh9PkpM8NQeIOrvr47yTbse9JkFE0pm5tFYnTVyE1vJ6j3w9JO/G6zFKPB6wTyfwTXtNkvUWWvFtmN/DMl8W8eVoxn/WcbnFs2ubwrV7yMUgimEQV97zqFzDdROs9Dy7i2/O65hvCwwp0gxH8wwpdOr4/iApkQQk0+nUWaZ+E3tXFF8gcmGw8fK5cjl7vaz/DNDadxEMbBjVTmFiuRBV/pAx71dZDnSsQsIAQSPEcpmri0AUAcs0myzXagGBpdvNZptkmZbINVhQKathPApGEdjEMHqSyhT1JJV1aHkHD+Z6OhcVCKsKFOOWHM1TEvvUy8l8CWCCFXeUi94u3WgzBPL2Bx/mgIl9aCc+fDm4h6JBBLr+0jXTQoW1jXVJ/lconh9r/Prt1g7sY3u5A8oLYiFeUviN8K/fqvm56sZj1bf0ILG9XNjg3saRZ12RPH/6pEzOlTtfPsqibrjv7v8qnP7/wsnfw4k/FEZ87el9NvvkPcx9ewVhYY+l3/uNFkfz5fiSnE5JQYRWLmsjnJ6gCLJJTKCVYG16NsIdDIh7CuKvngV31F9mvtuf8SWxG0xifKbsMW3LxfAv3oQTiPI3oYy3Xfa3D86nKXHfYpjF39k4Hz8dc8R/fF1aXSv3w+Yx/knDyP5crm9yPcyD68wPUS9w8lH+CDj/wAwrxGk9fJCG0WPy7xJ8N/mz8d7kO5YYs2mdxPDnL+X8hHyrmJYVJkEs85XC8HhqFzjj8wF2P51+S1PI8I93VYZ+fFctlOEEn597s3L39f7ZueYVdLEgjkJegeWtkqFuvlcC5+GW+AD420VBNqkW2QaNBks/XhRUQxTuDXyq5P038++Wh55+3Q/v/wU=</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>80008000</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:D8E50061708A44B2E0401F0A059914FE</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:D8E50F25C2D50E93E0401F0A05993B53</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:D8E512D0EBB399F8E0401F0A05994C93</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D8E50061708A44B2E0401F0A059914FE/Stream/urn:dece:streamhandleid:org:dece:D8E51CF99AA804C6E0401F0A05996142</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D8E51CF99AA804C6E0401F0A05996142</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:D8E51CF99AA804C6E0401F0A05996142</con:value>
        </con:property>
        <con:property>
          <con:name>rowSTREAM_DATA</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HANDLE_OID>D8E51CF99AA804C6E0401F0A05996142</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>D8E512D0EBB399F8E0401F0A05994C93</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>D8E50061708F44B2E0401F0A059914FE</ACCOUNT_OID>
      <USER_OID>FAC200DB599F01610FC1EADCACE3590F</USER_OID>
      <TRANSACTION_ID>null</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2013-03-27 14:45:49.625</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2013-03-27 08:51:12.757</CREATED_DATE>
      <CREATED_BY>80008000</CREATED_BY>
      <UPDATED_DATE>null</UPDATED_DATE>
      <UPDATED_BY>null</UPDATED_BY>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>D8E50061708F44B2E0401F0A059914FE</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>FAC200DB599F01610FC1EADCACE3590F</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86721</con:value>
        </con:property>
        <con:property>
          <con:name>streamcreateFlagSkipUserTest</con:name>
          <con:value>false</con:value>
        </con:property>
      <con:property><con:name>enassertionAccountIdFULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8E50061708A44B2E0401F0A059914FE</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\80008000.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamView API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="986843e1-c831-4e73-8ac5-b38be1a5be15">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="c3b90610-944e-476a-b01d-12762314e8c7">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assert",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("streamcreateFlagSkipUserTest",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("status",null);
tC.setPropertyValue("connection",null);
tC.setPropertyValue("contentType",null);
tC.setPropertyValue("contentLength",null);
tC.setPropertyValue("contentLocation",null);
tC.setPropertyValue("expectErrTypeStreamView",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="4ea03d08-16f2-44e6-a1bc-5d41a39cc55b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("expectErrTypeStreamView",callTC.getPropertyValue("expectErrTypeStreamCreate"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("streamcreateFlagSkipUserTest",callTC.getPropertyValue("streamcreateFlagSkipUserTest"));

if (tP.getPropertyValue("versionMinor")!="02"){
			tC.setPropertyValue("enassertionAccountIdFULL", URLEncoder.encode(callTC.getPropertyValue("assertionAccountIdFULL"), "UTF-8"));
			}else{
			tC.setPropertyValue("enassertionAccountIdFULL", callTC.getPropertyValue("assertionAccountIdFULL"));
			}
			
if (callTC.getPropertyValue("streamhandle")==null ||callTC.getPropertyValue("streamhandle")=="null")	{
	if (tP.getPropertyValue("versionMinor")!="02"){

			tC.setPropertyValue("streamhandleFULL", URLEncoder.encode(tP.getPropertyValue("StreamHandleID"), "UTF-8"));
			}else{
			tC.setPropertyValue("streamhandleFULL", tP.getPropertyValue("StreamHandleID"));
			}
}
if (tC.getPropertyValue("expectErrTypeStreamView") == null ||
	tC.getPropertyValue("expectErrTypeStreamView") == "null") {
	tC.setPropertyValue("expectErrTypeStreamView","STREAM_NOT_FOUND");		
}
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PEM Set" id="e5f60ba9-72c7-4f43-bdd1-e9a6b2d5e983">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("StreamView");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="StreamView" id="3a74fe5c-f857-4cb5-b3a7-06339544032f"><con:settings/><con:config service="Stream" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Stream/{STREAM}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="StreamView" id="bcfd0ffb-67ca-4ab7-94f1-27b7e0a4af61" mediaType="application/xml;charset=UTF-8" sslKeystore="90009002.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ACCT" value="${#TestCase#enassertionAccountIdFULL}"/>
  <con:entry key="STREAM" value="${#TestCase#streamhandleFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body/Headers" id="17d13fc9-e1b5-4487-9971-7dd5d897583a">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('StreamView');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep>
      
      
      
      
      
      <con:testStep type="groovy" name="Groovy Script" id="b496922b-d86e-47b4-bd3f-807a0b7ac1d2"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamView") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamView")) {
                case "ADULT_CONTENT_NOT_ALLOWED":
                                errId = "Policy:AdultContentNotAllowed";
                                break;
                case "ACCOUNT_NOT_ACTIVE":
                                errId = "AccountNotActive";
                                break;
                case "API_NOT_AUTH":
                                errId = "Security:RoleInvalid";
                                break;
                case "BLOCKED_ACCESS_UNRATED":
                                errId = "Policy:UnratedContentBlocked";
                                break;
                case "CID_NOT_ACTIVE":
                                errId = "ContentIDNotActive";
                                break;
                case "CID_NOT_FOUND":
                                errId = "ContentIDNotFound";
                                break;
                case "LOGICAL_ASSET_NOT_ACTIVE":
                                errId = "AssetLogicalIDNotActive";
                                break;
                case "RT_RENT_EXPIRED":
                                errId = "RightsTokenRentalExpired";
                                break;
                case "RT_NOT_FOUND":
                                errId = "RightsTokenNotFound";
                                break;
                case "RT_NOT_ACTIVE":
                                errId = "RightsTokenNotActive";
                                break;
                case "RATING_POLICY":
                                errId = "RatingPolicyExists";
                                break;
                case "CID_NOT_GRANTED":
                case "STREAM_RIGHTS_NOT_GRANTED":
                                errId = "StreamRightsNotGranted";
                                break;
                case "STREAM_COUNT_EXCEEDED":
                                errId = "AccountStreamCountExceedMaxLimit";
                                break;
                case "STREAM_COUNT_EXCEEDED_USER":
                                errId = "UserStreamCountExceedMaxLimit";
                                break;
                case "STREAM_INVALID_TRANS":
                                errId = "StreamTransactionIdInvalid";
                                break;
                case "STREAM_ACCOUNTID_MISMATCH":
                                errId = "AccountIdUnmatched";
                                break;                   
                case "STREAM_NICKNAME_TOO_LONG":
                                errId = "StreamClientNicknameTooLong";
                                break;                   
                case "STREAM_WINDOW_NOT_ALLOWED":
                                errId = "StreamAssetWindowNotAllowed";
                                break;
                case "STREAM_OWNER_MISMATCH":
                                errId = "StreamOwnerMismatch";
                                break;
                case "STREAM_NOT_FOUND":
                                errId = "StreamNotFound";
                                break;
                case "STREAM_NOT_ACTIVE":
                                errId = "StreamNotActive";
                                break;
                case "USER_NOT_MATCH_TOKEN":
                                errId = "UserIdUnmatched";
                                break;
                case "USER_NOT_ACTIVE":
                                errId = "UserNotActive";
                                break;
                case "USER_NOT_SUPPLIED":
                                errId = "UserNotSpecified";
                                break;
                case       "USER_PRIVILEGE_ACCESS_RESTRICTED":
                     errId = "UserPrivilegeAccessRestricted";
                                break;

}

try {
                xmlData = a.errGetIdInfo(errId);
                
                assert xmlData.trim().length() > 1;

                def myXML = new XmlSlurper().parseText(xmlData);

                log.info myXML.ResultSet.Row.size();
                tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
                tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
                tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

                /*
                *  The DB does not contain the complete HTTP status
                *  string, only the code.  Thus, we must adjust.
                */
                switch (tC.getPropertyValue("errorStatusCode")) {
                                case "400":
                                                tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
                                                break;
                                case "403":
                                                tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
                                                break;
                                case "404":
                                                tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
                                                break;
                                case "409":
                                                tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
                                                break;
                }
}
catch (Throwable e) {
                log.info "STEP FAILURE! --- " + e;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify response headers and body" id="9cf2d23d-f585-4ffc-9e38-02ed2d1e2a04"><con:settings/><con:config><script><![CDATA[import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
                try {
                                String dateHolder = "";
                                Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
                                Matcher cdateMatcher = datePattern.matcher(recvDate);
                                if (cdateMatcher.find()) {
                                                dateHolder = cdateMatcher.group(1) + "-" + cdateMatcher.group(2) + "-" +
                                                                cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
                                                                cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
                                                log.info "dateHolder[$dateHolder]";       
                                }
                } 
                catch (Throwable e) {
                                log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
                } 
                finally {
                                return dateHolder;          
                }
}


def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def acct = tC.getPropertyValue("nodeaccountid");
def sh = tC.getPropertyValue("streamhandleFULL");
def account         = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType   = tC.getPropertyValue("expectErrTypeStreamView");
def XMLbody         = tC.getPropertyValue("XMLbody");
def expectCreatedBy = urnnode + tC.getPropertyValue("expectDBCreatedBy");
def expectDeletedBy = urnnode + tC.getPropertyValue("expectDBDeletedBy");
def expectStatus    = tC.getPropertyValue("expectDBStatus");
def expectRT        = tC.getPropertyValue("rightstokenidFULL");
def expectSH        = tC.getPropertyValue("streamhandleFULL");
def expectNickname  = tC.getPropertyValue("expectNickname");
def expectGenericRightsToken = tC.getPropertyValue("expectGenericRightsToken");

String expectDescription = "";
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag = true;
boolean processXMLFlag = true;
boolean XMLbodynull = false;


switch (expectStatus) {
                case "active":
                                expectDescription = "active";
                break;
                default:
                                expectDescription = "deleted";
                break;
}

/*
*  Change the expectRH value if policies should result
*  in the generic rightstoken being displayed
*/
if (expectGenericRightsToken == "true") {
                expectRT = tP.getPropertyValue("urnGenericRightsToken");
}

String errorID = "";
String errorReason = "";
String errorLink  = "";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection = "Keep-Alive";


this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                                XMLbodynull        = false;
                                httpLocationHeader = false;
                break;

                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "Node_status_inactive":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = true;
                                errorID = "Bad_Request";
                                errorReason = "Node_status_inactive";
                                errorLink = "";
                break;

                case "XML_PARSING_ERROR":
                                errorLinkFlag = true;
                                errorReasonFlag = false;
                                expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID = "urn:dece:errorid:org:dece:SaxParserException";
                                errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
                break;
                
                default:
                                errorReasonFlag = true;
                                expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
                                errorID     = urnErr + tC.getPropertyValue("errorID");
                                errorReason = tC.getPropertyValue("errorReason");
                                errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
                break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
assert tC.getPropertyValue("httpContentLength").toInteger() > 0;

//No Content-Location
assert tC.getPropertyValue("httpContentLocation") == null;


assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
                assert XMLbody == null;
}

this.log.info "XMLBody Length [" + XMLbody.length() + "] processXMLFlag[$processXMLFlag]";
if (XMLbody != null && processXMLFlag == true) {
                def myXML = new XmlSlurper().parseText(XMLbody);

                if (errorRespType != "SUCCESS") {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;

                                // ErrorCode
                                this.log.info "Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;

                                // ErrorLink
                                this.log.info "ErrorLink [" + myXML.Error.ErrorLink.toString() + "] errorLink[$errorLink]";
                                assert myXML.Error.ErrorLink.toString() == errorLink;
                } else {
                                /*
                                * Do expected element sizes first.
                                */
                                def ResourceStatusSize = myXML.ResourceStatus.size();
                                def CurrentSize = myXML.ResourceStatus.Current.size();
                                def ValueSize = myXML.ResourceStatus.Current.Value.size();
                                def DescriptionSize = myXML.ResourceStatus.Current.Description.size();
                                def RightsTokenIDSize = myXML.RightsTokenID.size();
                                def ExpirationDateTimeSize = myXML.ExpirationDateTime.size();
                                def recvCreationDate = myXML.ResourceStatus.Current.@CreationDate.text();
                                def recvExpirationDateTime = myXML.ExpirationDateTime.toString();
                                def recvDeletionDateTime = myXML.ResourceStatus.Current.@DeletionDate.text();
                                
                                this.log.info "ResourceStatusSize [$ResourceStatusSize] Expect 1";
                                this.log.info "CurrentSize [$CurrentSize] Expect 1";
                                this.log.info "ValueSize [$ValueSize] Expect 1";
                                this.log.info "DescriptionSize [$DescriptionSize] Expect 1";
                                this.log.info "RightsTokenIDSize [$RightsTokenIDSize] Expect 1";
                                this.log.info "ExpirationDateTimeSize [$ExpirationDateTimeSize] Expect 1";
                                assert ResourceStatusSize == 1;
                                assert CurrentSize == 1;
                                assert ValueSize == 1;
                                assert DescriptionSize == 1;
                                assert RightsTokenIDSize == 1;
                                assert ExpirationDateTimeSize == 1;

                                /*
                                *  Save the returned values as TC properities for validations
                                *  outside this script.
                                */
                                tC.setPropertyValue("recvCreationDate",recvCreationDate);
                                tC.setPropertyValue("recvDeletionDateTime",recvDeletionDateTime);
                                tC.setPropertyValue("recvExpirationDateTime",recvExpirationDateTime);
                                
                                /*
                                *   Lengths
                                */
                                assert myXML.ExpirationDateTime.text().length() > 0;
                                assert myXML.ResourceStatus.Current.@CreationDate.toString().length() > 0;

                                /*  StreamHandle */
                                def StreamHandleID = myXML.@StreamHandleID.toString();
                                this.log.info "StreamHandleID[$StreamHandleID] - expectSH[$expectSH]";
                                assert expectSH == StreamHandleID;

                                /*  DeletedBy  */
                                def DeletedByValue = myXML.ResourceStatus.Current.@DeletedBy.toString();
                                if (expectStatus != "active") {
                                                this.log.info "DeletedByValue[$DeletedByValue] - expectDeletedBy[$expectDeletedBy]";
                                                assert expectDeletedBy == DeletedByValue;
                                } else {
                                                this.log.info "Assert no DeletedBy Exists";
                                                assert DeletedByValue == "";
                                }

                                /*  CreatedBy  */
                                def CreatedByValue = myXML.ResourceStatus.Current.@CreatedBy.toString();
                                this.log.info "CreatedByValue[$CreatedByValue] - expectCreatedBy[$expectCreatedBy]";
                                assert expectCreatedBy == CreatedByValue;

                                /*  status value */
                                def Value = myXML.ResourceStatus.Current.Value.text().toString();
                                this.log.info "Value[$Value] - expectStatus[$expectStatus]";
                                assert expectStatus == Value;

                                /*  Description */
                                def Description = myXML.ResourceStatus.Current.Description.text().toString();
                                this.log.info "Description[$Description] - expectDescription[$expectDescription]";
                                assert Description == expectDescription;

                                /*  RightsToken */
                                def RightsTokenID = myXML.RightsTokenID.text().toString();
                                this.log.info "RightsTokenID[$RightsTokenID] - expectRT[$expectRT]";
                                assert expectRT == RightsTokenID;

                                /*  Stream Nickname  */
                                def StreamClientNicknameSize = myXML.StreamClientNickname.size();
                                def expectNickSize = 0;
                                if (expectNickname != null && expectNickname.length() > 0) {
                                                expectNickSize = 1;
                                                StreamClientNickname = myXML.StreamClientNickname.text();
                                } else {
                                                StreamClientNickname = null;
                                }
                                this.log.info "StreamClientNicknameSize[$StreamClientNicknameSize] - expectNickSize[$expectNickSize]";
                                this.log.info "StreamClientNickname[$StreamClientNickname] - expectNickname[$expectNickname]";
                                assert StreamClientNicknameSize == expectNickSize;
                                assert StreamClientNickname == expectNickname;

                                /*
                                *
                                *  History validation
                                */
                                def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

                                int rCnt = myHistoryXML.ResultSet.Row.size();

                                log.info "-------------HISTORY-----------------";
                                log.info "History Row Count[$rCnt] - <History> Count [" + myXML.ResourceStatus.History.size() + "]";
                                if (tC.getPropertyValue("expectDBDeletedBy") != "1") {
                                                rCnt -= 1;
                                } 
                                assert myXML.ResourceStatus.History.Prior.size() == rCnt;
                                
                                for (int i = 0; i < rCnt; i++) {
                                                String hrecvModifiedBy = myXML.ResourceStatus.History.Prior[i].@ModifiedBy.text();
                                                String hexpectModifiedBy = urnnode + myHistoryXML.ResultSet.Row[i].CREATED_BY_NODE_OID.text();
                                                log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
                                                assert hrecvModifiedBy == hexpectModifiedBy;

                                                String hrecvStatus = myXML.ResourceStatus.History.Prior[i].Value;
                                                String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
                                                log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
                                                assert hrecvStatus == hexpectStatus;

                                                String hrecvDescription = myXML.ResourceStatus.History.Prior[i].Description;
                                                switch (hexpectStatus) {
                                                                case "active": hexpectDescription = "active"; break;
                                                                case "deleted": hexpectDescription = "deleted"; break;
                                                                default: hexpectDescription = "deleted"; break;
                                                }
                                                log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
                                                assert hrecvDescription == hexpectDescription;

                                                String hrecvModificationDate = formatDate(myXML.ResourceStatus.History.Prior[i].@ModificationDate.text());
                                                int subSec = myHistoryXML.ResultSet.Row[i].EXPIRATION_DATE.text().indexOf(".");
                                                String hexpectModificationDate = myHistoryXML.ResultSet.Row[i].CREATED_DATE.text().substring(0, subSec);
                                                log.info "$i --> hrecvModificationDate[$hrecvModificationDate] - hexpectModificationDate[$hexpectModificationDate]";
                                                assert hrecvModificationDate == hexpectModificationDate;
                                }
                }
} 
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));]]></script></con:config></con:testStep><con:properties>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_50077 - STSGET - accessportal:cs - unamepasswd - Full user assertion with StreamView - P2</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>STS Create Tokentype unamepasswd - ACCES:CS</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>nVdZk6JKE333VxjOY4fN4obGdEcUi4iKCuL68gUWJaAsSoGgv/4WONra0z137vfQYVdSmXUy85Cc+olN32M7AGMUxW4YlBXxrfI/uKmzHF2jq43NBlXrmyaqmhuuXm3X2xxk2wzH1VqVsoJxgpQAx2YQv1VYmqlV6VqVbRl0q8PSHab1yrHtdaU8RxEmocmWV7pSznwvwJ3i2LdKEgWd0MQu7gSmj3Anhp0pUIcdsrNj3jBV3n9eURYHRu9OHB86FAVfLQSR58FXGPrUT+ppz08Ld6auHZhxEqFfZ1r4rfLLN03T17T2GkY2xdI0TdFtiuyxsGv/qLyXbs7IUoJteF0LZhAGLjQ992LmoFQUO6FVBp4dRm7s+N+EZiiGzkNXUQarkKkHPyrUxwEFur+M9AQywmYVOyZzC6ajLYpQAFF5pitvlR9/18GrrxGZAd6GkY8/rf8bJBSckBcekFXFt8xu6P4+4hflev+JYEcJoJdg94RGOU0OJkS4PInQ1s2GLibks3C5aH85wzeGIfhfWvKTesRJYFNfVEZ0bYTj/6dfj726RpmbXoLe6fXGGu/02toPZjOvjdXe0exNlezQs98KCI+br6Durf61/kzUO69+OQkaeFmsTwrXnI711k7d6aq8xXwP93vaCcPhVOoqsrM/rdYp4ybLRc/P9kc29idI3bBT1rmY2cuKlzb7vSWV2gM2ybbGiB7L9J5lUn7ph4fwCJMlsxqfYycOz8zwMs+8iO5rljRTmsxMb7S2guTwYpwNWMPy+XSWRj7USsy8vUmWg9MqmtNwE/T5A3j7yOkxhzyvAToXSeb/Lxt0WzRj874Q8kmxJa9njN5VRRGTiyCA89QGqcIDm/ztwIi390dn78rtlOaBpnWBKPDeThqqYC8DZibxjirM52omXECft0dz4miUgLfmVV1KxXQlzjWtJ6WOYcnz80b2kvVFGqkAF86Co0q6NBd1Q1JVEF5tmSpu5GynTtVU0VZiiQQQpexwseR2jOTMhazSUKcNdjVtJOvlnNi756E/Om0MyVMFVRamR3mqbGqiJvWBvlpAtpsQ38vQP4Sl1Yx/cOof0A6gbkqTM8FFNfapaszYkaibhc14tqmK3Fc1nApakZVcktL+fHb5qIXAq4LlS5lkgMm1FtAQuiN6vexjc9EIVB2kol04D6TUGt+AqBqdloRrrYZSqkv6bNRVdSWVQGETpdTDG3bkbGTnBGta1jfA7rExgiYtugF5HugneG4cS6bcBRt/zsCa7kC34ZrLMLXXXCpqq/4gXCskzAhoEs9rgACiQZ4aqT8Phvy8MT64bdZFw2039JETlVQmHOxPl4zm3NrYnowWDXG7b01kd1IzLYdSPMjuanugKMgaMI5mWvqK0sXAvTTHg9kSudHqEo8aGtN0uUZJXySzpRh6Lau3XM0GL9kKasZ4Mp0tJpcsGx133MWLe2O+F037qmiPRwhNMHyhaLPLG5zYEFa9HeHTVqdRowRslQdA3tm25BIC873dlYQ9XZUIeYEqpLKwEOQpkOUXSeFFTdt2HWYC5XkyY0aqIlkeKdN5tdS90lrgRdIp2lysDyu2S68NYBXBtLrUtbVZ46W/RGtt5BnzGKSH+TZgGFo+aL2tmtpQzRlgKemUJ28RX0oUMDPHhz6dDeZNmjlqlteftsGslk3ZfTZ27PV5b6/3pCmrh1dnZQBvbjxwTCEUW5Q0Q9JVwF3ft0xVZjXdg3522PgwEw3Ss8I5NHhJ72r0LBNFMLjasAHYDK8u0k4VpMK/BDLVJLQ4bZYOXgUjd2xICSFt8kCX3Yal/5VjOcVKzxw7CkADnzkmXTkmge3xReFEBjeawgEvUpuXpaPWmg/77QOtLYf7Ev/SpezY9erjgEuNwcuCOactZ6ctFm1FdISXYLtyapuYp80L1FB/35JdfS8Gzbp3Voeq1pi5lHemd+iY4mFppDCBVIsvXaodJS+8v3b9y6VWZ2f+ZJqclJk5wMzZ2RwX7XQ36TUpKpLPjUtrfdK6yxCurt+Rz0PybryOUepxwD5N4Jv2miabHYLxbZl/hxWx3CUfRzP+s47LLa5V3RZbO4dcDOIYBXHlPffKNVwnIUrPtTrky3ldi5xUE5kmwzE0zzFMS6LrNNOlAd1qt2tSs3kTe1cUnyAKYbB187NyOXv9WP8ZIPQ7GAUWiqqnMIEOwpU/RMzrVVYCnaiQMMDICIlcbnNtwAmAowWu1QISBxoiU2twOVKBrde5SnkUxuNgHIFtjKInqczQT1JZR9A9uCjX07mowERV4JiU5GiekthjXk/ma4ASorijXPR22DrXoLDrHzyUA6b80Eo89HpwDkWBKHz9ZasmxIW1TXQJ+WMLxfNtjp+f3cpB9lhuvgHnCfGItBR9IfzpWzbfZM19uiDcwoPEcnNhQ2obRy68Inl+9EGZnCt3vtzSuuG+b/9seApNfc7qfpp1cuGd+fe7EZHWRHy93xpzNF+Pr8nplBStaOXCMiLhKYaim9QUwYSow7MR7lFA3UNQfyXM76g/nXy3P+NLYieYxuSt9glxysXyL25lU4TzW5lCiJ/97ZXv6UhStxhl8Vc2wSOXtxzxH+93sAPzfcQ8IT9pGFkf7foi1sM5JM98jLmBna9yGX7+hhkwJGFdMsrC6DH4VwG+OvzZeC/yHUtM2LRJYvT9k3I+o94qJoRhEsSKWCkMj3OzwBmfD6jzsem3MIUQ/nWzyfC3N5ulOpySCeablfte9983V92CLhARL+wWWN4qGbmkk8MD+2FO/wL426iu8/WawLB1sVX7NKrr9wI+ZfL+m/l3y0NNP78P7/8A</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>90009002</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:D8E3D4B43C124D73E0401F0A07993E64</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:D8E3D161810B8117E0401F0A07993E66</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenFULL</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:D6267D33305EC443E0401F0A0799743C</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3AD3CD9D93C110059998E0401F0A07992FB8</con:value>
        </con:property>
        <con:property>
          <con:name>rowSTREAM_DATA</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HANDLE_OID>D6267D333072C443E0401F0A0799743C</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>D6267D33305EC443E0401F0A0799743C</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>D6267D332FC0C443E0401F0A0799743C</ACCOUNT_OID>
      <USER_OID>2769DE4A8E2FE1DC15596DDDF7A4B6C2</USER_OID>
      <TRANSACTION_ID>null</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2013-02-20 16:35:24.725</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2013-02-20 10:36:52.959</CREATED_DATE>
      <CREATED_BY>80008002</CREATED_BY>
      <UPDATED_DATE>null</UPDATED_DATE>
      <UPDATED_BY>null</UPDATED_BY>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>D8E3D4B43C174D73E0401F0A07993E64</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>3FEC9C3B26CADEF715910F368FFC0087</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86721</con:value>
        </con:property>
        <con:property>
          <con:name>streamcreateFlagSkipUserTest</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>enassertionAccountIdFULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8E3D4B43C124D73E0401F0A07993E64</con:value></con:property><con:property><con:name>streamId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\90009002.pem</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:StreamNotFound">
      <Reason Language="en">The stream was not found.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/06/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8E3D4B43C124D73E0401F0A07993E64/Stream/urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3AD3CD9D93C110059998E0401F0A07992FB8</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/06/error/en/ErrorList.html#StreamNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>779</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>errorReason</con:name><con:value>The stream was not found.</con:value></con:property><con:property><con:name>errorID</con:name><con:value>StreamNotFound</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DelegationTokenCreate_R4" searchProperties="true" id="94cc9d3a-a833-426c-9897-e58e0af21917"><con:settings/><con:testStep type="groovy" name="Establish_TestCase_Properties" id="6db62472-d75d-4499-91a4-7200e38f300f"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();

tC.setPropertyValue("Username", null);
tC.setPropertyValue("PrimaryEmail", null);
tC.setPropertyValue("responsetype", null);
tC.setPropertyValue("tokentype", null);
tC.setPropertyValue("audienceList", null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", null);
tC.setPropertyValue("NODE_ID", null);
tC.setPropertyValue("NODE_OID", null);
tC.setPropertyValue("jksFile", null);
tC.setPropertyValue("assertionUUID", null);
tC.setPropertyValue("expectCreateExpireHoursDiff", null);
tC.setPropertyValue("USER_OID", null);
tC.setPropertyValue("ACCOUNT_OID", null);
tC.setPropertyValue("unSignedAuthnRequest", null);
tC.setPropertyValue("signedAuthnRequest", null);
tC.setPropertyValue("base64EncodedSignedAuthnRequest", null);
tC.setPropertyValue("UUID", null);
tC.setPropertyValue("expectErrType",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionUUIDprior",null);
tC.setPropertyValue("expectNodeUserRowCount",null);
tC.setPropertyValue("audienceIgnoreNodes",null);
tC.setPropertyValue("audienceIgnoreAll",null);
tC.setPropertyValue("actionSkipPolicyCheck",null);





</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="f479c09f-0050-45a0-b2d1-d21c50a02614"><con:settings/><con:config><script>import urlFunctions.urlFunctions;
import java.net.URLEncoder; 

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

myURLFunctions = new URLEncoder();

if(tP.getPropertyValue("versionMinor")!=tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("subject", callTC.getPropertyValue("PrimaryEmail"));
	tC.setPropertyValue("responseType", callTC.getPropertyValue("responseType"));
	tC.setPropertyValue("tokenType", callTC.getPropertyValue("tokenType"));
	tC.setPropertyValue("audienceList", callTC.getPropertyValue("audienceList"));
}
else
{
	tC.setPropertyValue("subject", myURLFunctions.encode(callTC.getPropertyValue("PrimaryEmail")));
	tC.setPropertyValue("responseType", myURLFunctions.encode(callTC.getPropertyValue("responsetype")));
	tC.setPropertyValue("tokenType", myURLFunctions.encode(callTC.getPropertyValue("tokentype")));
	tC.setPropertyValue("audienceList", myURLFunctions.encode(callTC.getPropertyValue("audienceList")));
}

tC.setPropertyValue("affiliationList", callTC.getPropertyValue("affiliationList"));
tC.setPropertyValue("policyList", callTC.getPropertyValue("policyList"));
tC.setPropertyValue("NODE_ID", callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("expectCreateExpireHoursDiff", callTC.getPropertyValue("expectCreateExpireHoursDiff"));
tC.setPropertyValue("USER_OID", callTC.getPropertyValue("USER_OID"));
tC.setPropertyValue("ACCOUNT_OID", callTC.getPropertyValue("ACCOUNT_OID"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));
tC.setPropertyValue("assertionUUIDprior",callTC.getPropertyValue("assertionUUIDprior"));
tC.setPropertyValue("Username", callTC.getPropertyValue("Username"));
tC.setPropertyValue("expectNodeUserRowCount",callTC.getPropertyValue("expectNodeUserRowCount"));
tC.setPropertyValue("audienceIgnoreNodes",callTC.getPropertyValue("audienceIgnoreNodes"));
tC.setPropertyValue("audienceIgnoreAll",callTC.getPropertyValue("audienceIgnoreAll"));
tC.setPropertyValue("actionSkipPolicyCheck",callTC.getPropertyValue("actionSkipPolicyCheck"));

if (tC.getPropertyValue("expectNodeUserRowCount") == null ||
	tC.getPropertyValue("expectNodeUserRowCount") == "") {
		tC.setPropertyValue("expectNodeUserRowCount","0");
}

if (tC.getPropertyValue("audienceIgnoreAll") == null ||
	tC.getPropertyValue("audienceIgnoreAll") == 'null') {
		tC.setPropertyValue("audienceIgnoreAll","false");
}

if (tC.getPropertyValue("audienceIgnoreAll") == null ||
	tC.getPropertyValue("audienceIgnoreAll") == 'null') {
		tC.setPropertyValue("audienceIgnoreAll","false");
}

if (tC.getPropertyValue("actionSkipPolicyCheck") == null ||
	tC.getPropertyValue("actionSkipPolicyCheck") == 'null') {
		tC.setPropertyValue("actionSkipPolicyCheck","false");
}

		

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Coordinator Schema" id="5a4a3cdd-ba5e-4486-96a1-ccfd56a6fc61"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "versionMinor: "+tP.getPropertyValue("versionMinor");

if(tP.getPropertyValue("versionMinor") == "07"){
	tP.setPropertyValue("coordinatorSchema","http://www.decellc.org/schema/2013/06/coordinator");
	log.info "Setting the coordinatorSchema value at project level: "+tP.getPropertyValue("coordinatorSchema");
}
else if (tP.getPropertyValue("versionMinor") == "06"){
	tP.setPropertyValue("coordinatorSchema","http://www.decellc.org/schema/2012/12/coordinator");
	log.info "Setting the coordinatorSchema value at project level: "+tP.getPropertyValue("coordinatorSchema");
}else{
	tP.setPropertyValue("coordinatorSchema","http://www.decellc.org/schema/2013/10/coordinator");
	log.info "Setting the coordinatorSchema value at project level: "+tP.getPropertyValue("coordinatorSchema");
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Compute expected audience list" id="03d6700e-d3e5-46ad-b8fb-6693b8f52876">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("affiliationList",null);

String affiliates = "";
int i = 0;
def urnNode = context.expand( '${#Project#urnNode}' )

/*
*  Construct the expected Affiliation list
*/
def affiliationList = [urnNode+tC.getPropertyValue("NODE_ID").toString()];
def ignoreNodesList = [];
def audienceList = [];



	
log.info "audienceList: "+tC.getPropertyValue("audienceList");
if (tC.getPropertyValue("audienceList") != null) 
{
	audienceList = tC.getPropertyValue("audienceList").toString().tokenize(";");
}
		
if (audienceList.size() >= 1 &amp;&amp; tC.getPropertyValue("audienceList") != null)
{
	log.info "DEBUG: Adding audienceList";
	affiliationList.addAll(audienceList);
}
	log.info "DEBUG: affiliationList size is " + affiliationList.size();
	affiliationList.each {
		log.info "DEBUG afflicationList Member: " + it;
		affiliates += it;

		i++;
		
		if (i != affiliationList.size()) {
			affiliates += ";";
		}
	}

	tC.setPropertyValue("affiliationList",affiliates);

	log.info "affiliationList[" + tC.getPropertyValue("affiliationList") + "]";

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set NODE_OID value based on NODE_ID" id="4ff08167-639c-474b-a389-3f5ecb1f9001"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def targetSystem = context.expand( '${#Project#targetSystem}' )

a = new dbUtils.dbUtils(log,targetSystem);

def nodeid = testProject.getPropertyValue("urnNode")+testCase.getPropertyValue("NODE_ID");

def sql = """SELECT to_char(rawtohex(NODE_OID)) NODE_OID FROM NODE where NODE_ID = '""" + nodeid +"""'""";

def node_oid= a.SelectFromDB(sql,targetSystem);
def myXML = new XmlSlurper().parseText(node_oid);
def NODE_OID = myXML.ResultSet.Row.NODE_OID[0].text();

log.info "nodeoid:  "+NODE_OID;
testCase.setPropertyValue("NODE_OID",NODE_OID);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish AuthnRequest Body" id="41ecdc35-7637-4a05-acb0-d3a15bc0ffc2"><con:settings/><con:config><script>import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import urlFunctions.urlFunctions;
import java.net.URLDecoder; 

import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String saml2pNS = "urn:oasis:names:tc:SAML:2.0:protocol";
String saml2NS = "urn:oasis:names:tc:SAML:2.0:assertion";
String mdNS = "urn:oasis:names:tc:SAML:2.0:metadata";
String deceNS = context.expand( '${#Project#coordinatorSchema}' )
String saml2pPrefix = "saml2p";
String saml2Prefix = "saml2";
String mdPrefix = "md";
String decePrefix = "dece";

String versionMajor = tP.getPropertyValue("versionMajor");
String versionMinor = tP.getPropertyValue("versionMinor");
//String destination = "https://qa.p.uvvu.com:7001/rest/" + versionMajor + "/" + versionMinor + "/loginservice/login";
String destination = "https://qa.s.uvvu.com:7001/security/delegation/saml/loginservice/login";
String assertionConsumerServiceURL = "https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/" + tC.getPropertyValue("NODE_OID");

String PrimaryEmail = tC.getPropertyValue("subject");

DateFormat ymd = new SimpleDateFormat("yyyy-MM-dd");
Date date = new Date();
String ymdTime = ymd.format(date);
DateFormat hms = new SimpleDateFormat("HH:mm:ss.FF");
String hmsTime = hms.format(date);

String issueInstant = ymdTime + "T" + hmsTime + "Z";

String issuerNode = tP.getPropertyValue("urnNode")+tC.getPropertyValue("NODE_ID");

String uuid = UUID.randomUUID().toString();
tC.setPropertyValue("UUID", uuid);

String protocolBinding = "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST";

DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder parser = docFactory.newDocumentBuilder();
doc = parser.newDocument();

root = doc.createElementNS(saml2pNS, saml2pPrefix + ":AuthnRequest");
root.setAttribute("ID", uuid);
root.setAttribute("IssueInstant", issueInstant);
root.setAttribute("Version", "2.0");
root.setAttribute("Destination", destination);
root.setAttribute("AssertionConsumerServiceURL", assertionConsumerServiceURL);
root.setAttribute("ForceAuthn", "true");
root.setAttribute("ProtocolBinding", protocolBinding);

doc.appendChild(root);
	
issuer = doc.createElementNS(saml2NS, saml2Prefix + ":Issuer");
Text textIssuer = doc.createTextNode(issuerNode);
issuer.appendChild(textIssuer);

root.appendChild(issuer);

nameid = doc.createElementNS(saml2pNS, saml2pPrefix + ":NameIDPolicy"); 
nameid.setAttribute("Format","urn:oasis:names:tc:SAML:2.0:nameid-format:transient");
nameid.setAttribute("AllowCreate","true");

root.appendChild(nameid);

if (tC.getPropertyValue("policyList") != "")
{
extensions = doc.createElementNS(saml2pNS,saml2pPrefix + ':Extensions');
policyList = doc.createElementNS(deceNS, 'ns4:PolicyList');

this.log.info tC.getPropertyValue("policyList");

policyArray = tC.getPropertyValue("policyList").split(",");
for (policyStr in policyArray) 
{
	policy = doc.createElementNS(deceNS, 'ns4:Policy');
	policyClass = doc.createElementNS(deceNS, 'ns4:PolicyClass');
	Text textPolicyClass = doc.createTextNode(policyStr);
	policyClass.appendChild(textPolicyClass);
	policy.appendChild(policyClass);
	policyList.appendChild(policy);
}

extensions.appendChild(policyList);
root.appendChild(extensions);
}

conditions = doc.createElementNS(saml2NS, saml2Prefix + ":Conditions");
audienceRestriction = doc.createElementNS(saml2NS, saml2Prefix + ":AudienceRestriction");

myURLFunctions = new URLDecoder();
affiliateArray = myURLFunctions.decode(tC.getPropertyValue("affiliationList")).split(";");
for (audienceMember in affiliateArray) 
{
	audience = doc.createElementNS(saml2NS, saml2Prefix + ":Audience");
	Text textAudience = doc.createTextNode(audienceMember);
	audience.appendChild(textAudience);
	audienceRestriction.appendChild(audience);	
}

conditions.appendChild(audienceRestriction);

root.appendChild(conditions);

subject = doc.createElementNS(saml2NS, saml2Prefix + ":Subject");
nameid1 = doc.createElementNS(saml2NS, saml2Prefix + ":NameID");
nameid1.setAttribute("Format","urn:oasis:names:tc:SAML:2.0:nameid-format:persistent");
Text textEmail = doc.createTextNode(PrimaryEmail);

nameid1.appendChild(textEmail);
subject.appendChild(nameid1);

root.appendChild(subject);



//&lt;saml2:Subject xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">&lt;saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">shikha82@uvvutesting.biz&lt;/saml2:NameID>&lt;/saml2:Subject>

TransformerFactory factory = TransformerFactory.newInstance();
Transformer transformer = factory.newTransformer();
StringWriter writer = new StringWriter();
Result result = new StreamResult(writer);
Source source = new DOMSource(doc);
transformer.transform(source, result);
writer.close();
String unSignedAuthnRequest = writer.toString();

log.info unSignedAuthnRequest;
tC.setPropertyValue("unSignedAuthnRequest", unSignedAuthnRequest);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_JKSFile" disabled="true" id="fd0f115e-ce35-4710-8767-1d17341f64b0"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def NODE_ID = tC.getPropertyValue("NODE_ID");

if (System.properties['os.name'].toLowerCase().contains('windows')) 
{
            log.info "it's Windows";
            certPath = tP.getPropertyValue("certsPath_Windows");
} 
else 
{
            log.info "it's not Windows"
            certPath = tP.getPropertyValue("certsPath_Linux");
}



switch (NODE_ID) {

	case "urn:dece:org:org:dece:dece:cs":
	jksFile = certPath+"/dececs.jks";
	break;

	case "urn:dece:org:org:dece:coord:cs":
	jksFile = certPath+"/coordcs.jks";
	break;

	case "urn:dece:org:org:dece:LLASP":
	jksFile = certPath+"/LLASP.jks";
	break;

	case "urn:dece:org:org:dece:DLASP":
	jksFile = certPath+"/DLASP.jks";
	break;

	case "urn:dece:org:org:dece:ACCESS":
	jksFile = certPath+"/ACCESS.jks";
	break;

	case "urn:dece:org:org:dece:ACCESCS":
	jksFile = certPath+"/ACCESCS.jks";
	break;
	
	case "urn:dece:org:org:dece:RET":
	jksFile = certPath+"/RET.jks";
	break;

	case "urn:dece:org:org:dece:RET_CS_1":
	jksFile = certPath+"/RET_CS_1.jks";
	break;

	case "urn:dece:org:org:dece:LLASP_CS_1":
	jksFile = certPath+"/LLASP_CS_1.jks";
	break;

	case "urn:dece:org:org:dece:DLASP_CS_1":
	jksFile = certPath+"/DLASP_CS_1.jks";
	break;

	case "urn:dece:org:org:dece:DSP":
	jksFile = certPath+"/DSP.jks";
	break;

	case "urn:dece:org:org:dece:DSP_CS_1":
	jksFile = certPath+"/DSP_CS_1.jks";
	break;

	case "urn:dece:org:org:dece:CON":
	jksFile = certPath+"/CP.jks";
	break;

	case "urn:dece:org:org:dece:CON_CS_1":
	jksFile = certPath+"/CON_CS_1.jks";
	break;

	case "urn:dece:org:org:dece:DEV":
	jksFile = certPath+"/DEV.jks";
	break;

	case "urn:dece:org:org:dece:DEV_CS_1":
	jksFile = certPath+"/DEV_CS_1.jks";
	break;

	case "urn:dece:org:org:dece:COO":
	jksFile = certPath+"/COO.jks";
	break;

	case "urn:dece:org:org:dece:DECE":
	jksFile = certPath+"/DECE.jks";
	break;

	case "urn:dece:org:org:dece:iscpportal1":
	jksFile = certPath+"/iscpportal1.jks";
	break;

	case "urn:dece:org:org:dece:iscportalcs1":
	jksFile = certPath+"/iscportalcs1.jks";
	break;

	case "urn:dece:org:org:dece:0799":
	jksFile = certPath+"/0799.jks";
	break;
	
	default:
	jksFile = certPath+"/RET.jks";
	break;
}

log.info "jksFilePath:"+jksFile;

tC.setPropertyValue("jksFile", jksFile);</script></con:config></con:testStep><con:testStep type="groovy" name="Set_JKS_File" id="ba22cd61-7f25-43a4-abd5-1b4d68ccc5de"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 
import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String nodeId = testCase.getPropertyValue("NODE_ID");
log.info "NODE_ID: "+nodeId

if (System.properties['os.name'].toLowerCase().contains('windows')) 
{
            log.info "it's Windows";
            certPath = testProject.getPropertyValue("certsPath_Windows");
} 
else 
{
            log.info "it's not Windows"
            certPath = testProject.getPropertyValue("certsPath_Linux");
}


File f2 = new File(certPath+"/"+nodeId + ".jks");
File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");

boolean imFine = true;

 if(f2.exists())
	 {
	 	jksFile = certPath+"/"+nodeId + ".jks";
			
	 }
 else if(f3.exists())
	 {
	 	jksFile = certPath+"/truststore-"+nodeId + ".jks";
		
	 }
 else
	 {
	 	log.info "Error!";
	 	imFine = false;
	 }


log.info "jksFilePath:"+jksFile;

testCase.setPropertyValue("jksFile", jksFile);</script></con:config></con:testStep><con:testStep type="groovy" name="Create XML Signature" id="f3d42d0d-b39a-4183-b3d7-635da5eeb784"><con:settings/><con:config><script>import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.util.Collections;
import java.lang.Object;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import javax.xml.transform.*;
import java.security.cert.X509Certificate;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import java.nio.channels.FileChannel;

import javax.xml.crypto.Data;
import javax.xml.crypto.MarshalException;
import javax.xml.crypto.NoSuchMechanismException;
import javax.xml.crypto.URIDereferencer;
import javax.xml.crypto.XMLStructure;
import javax.xml.crypto.dom.DOMStructure;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;
import javax.xml.crypto.dsig.spec.*;
import javax.xml.crypto.dsig.keyinfo.*;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.XMLDSigSecurity;
import javax.xml.crypto.dsig.XMLObject;
import javax.xml.crypto.dsig.XMLSignContext;
import javax.xml.crypto.dsig.XMLSignature;
import javax.xml.crypto.dsig.XMLSignatureException;
import javax.xml.crypto.dsig.XMLSignatureFactory;
import javax.xml.crypto.dsig.XMLValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.dom.DOMValidateContext;

import javax.xml.crypto.dsig.*;

import org.opensaml.xml.security.x509.BasicX509Credential;
import org.opensaml.xml.*;
import org.opensaml.xml.signature.impl.*;
import org.opensaml.xml.signature.Signature;
import org.opensaml.xml.signature.SignatureConstants;
import org.opensaml.xml.security.x509.*;
import java.security.cert.*;

import javax.xml.namespace.QName;
import org.xml.sax.InputSource;

import java.security.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String saml2pNS = "urn:oasis:names:tc:SAML:2.0:protocol";
String saml2NS = "urn:oasis:names:tc:SAML:2.0:assertion";
String saml2pPrefix = "saml2p";
String saml2Prefix = "saml2";

String jksFile  = tC.getPropertyValue("jksFile");
String uuid = "#" + tC.getPropertyValue("UUID");

// Create a DOM XMLSignatureFactory that will be used to generate the enveloped signature.
XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM");

// Create a Reference to the enveloped document (in this case,
// you are signing the whole document, so a URI of "" signifies
// that, and also specify the SHA1 digest algorithm and
// the ENVELOPED Transform.
Reference ref = fac.newReference(uuid, fac.newDigestMethod(DigestMethod.SHA1, null),  Collections.singletonList(fac.newTransform (Transform.ENVELOPED, (TransformParameterSpec) null)), null, null);

// Create the SignedInfo.
SignedInfo si = fac.newSignedInfo(fac.newCanonicalizationMethod(CanonicalizationMethod.INCLUSIVE,(C14NMethodParameterSpec) null), fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null), Collections.singletonList(ref));

// Load the KeyStore and get the signing key and certificate.
KeyStore ks = KeyStore.getInstance("JKS");
ks.load(new FileInputStream(jksFile), "testing".toCharArray());
KeyStore.PrivateKeyEntry keyEntry = (KeyStore.PrivateKeyEntry) ks.getEntry("qalp1", new KeyStore.PasswordProtection("testing".toCharArray()));
X509Certificate cert = (X509Certificate) keyEntry.getCertificate();

// Create the KeyInfo containing the X509Data.
KeyInfoFactory kif = fac.getKeyInfoFactory();
List x509Content = new ArrayList();
x509Content.add(cert.getSubjectX500Principal().getName());
x509Content.add(cert);
X509Data xd = kif.newX509Data(x509Content);
KeyInfo  ki = kif.newKeyInfo(Collections.singletonList(xd));

String unSignedAuthnRequest  = tC.getPropertyValue("unSignedAuthnRequest");

// Instantiate the document to be signed.
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setNamespaceAware(true);
Document doc = dbf.newDocumentBuilder().parse(new InputSource(new ByteArrayInputStream(unSignedAuthnRequest.getBytes("utf-8"))));

// Create a DOMSignContext and specify the RSA PrivateKey and
// location of the resulting XMLSignature's parent element.
DOMSignContext dsc = new DOMSignContext(keyEntry.getPrivateKey(), doc.getDocumentElement());

// Create the XMLSignature, but don't sign it yet.
XMLSignature signature = fac.newXMLSignature(si, ki);

// Marshal, generate, and sign the enveloped signature.
signature.sign(dsc);

TransformerFactory factory = TransformerFactory.newInstance();
Transformer transformer = factory.newTransformer();
StringWriter writer = new StringWriter();
Result result = new StreamResult(writer);
Source source = new DOMSource(doc);
transformer.transform(source, result);
writer.close();
String signedAuthnRequest = writer.toString();

log.info signedAuthnRequest;
tC.setPropertyValue("signedAuthnRequest", signedAuthnRequest);</script></con:config></con:testStep><con:testStep type="groovy" name="Base64 Encode the Signed AuthnRequest xml" id="31e8096d-a74b-41f2-bfa0-c631227dc98e"><con:settings/><con:config><script>import urlFunctions.urlFunctions;
import java.net.URLEncoder; 

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

myURLFunctions = new urlFunctions(log);
String signedAuthnRequest  = tC.getPropertyValue("signedAuthnRequest");
//String base64EncodedSignedAuthnRequest = myURLFunctions.urlEncode(myURLFunctions.base64Encode(signedAuthnRequest));
String base64EncodedSignedAuthnRequest = myURLFunctions.base64Encode(signedAuthnRequest);

tC.setPropertyValue("base64EncodedSignedAuthnRequest", base64EncodedSignedAuthnRequest);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Set PEM" id="88ded36b-bd7e-40a2-b682-876b06dffbc6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem");
myTC.setPropertyValue("NODE_ID",tC.getPropertyValue("NODE_ID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserValidationTokenCreate_DST");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserValidationTokenCreate_DST" id="29c2c76f-95b5-441a-8497-eaa37ed17049"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/VerificationToken/${#TestCase#tokenType}?subject=${#TestCase#subject}&amp;responseType=${#TestCase#responseType}" methodName="UserValidationTokenCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserValidationTokenCreate_DST" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept="" timeout="44000" id="44ba817b-b778-4bcf-8c30-3411fbe277a5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request>SAMLRequest=${#TestCase#base64EncodedSignedAuthnRequest}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Headers and Body" id="ddbc55b9-845e-4baf-887a-9cd91edc6dae"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserValidationTokenCreate_DST');
def expBody = tStep.httpRequest.response.getResponseContent();


tC.setPropertyValue("httpBody", null);
tC.setPropertyValue("httpStatus", null);
tC.setPropertyValue("httpConnect", null);
tC.setPropertyValue("httpContentType", null);
tC.setPropertyValue("httpContentLength", null);
tC.setPropertyValue("httpContentLocation", null);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String Location = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			Location = value[0];
			break;
		case "Content-Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("httpBody", expBody);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", Location);

this.log.info Location;


</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="b9f73b2f-66fb-4980-94b6-fd79ed6a818e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject(); 
def errorRespType = context.expand( '${#TestCase#expectErrType}' );
log.info 'errorRespType=='+errorRespType
def XMLbody   = context.expand( '${#TestCase#httpBody}');
log.info 'XMLbody=='+XMLbody

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
//String orgRequest = url + "/merc_api/merc-service/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;

if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		log.info "We are in SUCCESS Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		break;	
	
	case "UserIdNotFound":

		expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID = "urn:dece:errorid:org:dece:UserIdentifierNotFound"
		errorReason = "The user ID was not found.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierNotFound";
		XMLbodynull        = false;
		httpLocationHeader = false;
		break;

	
	case "UserIdNotValid":
		
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:UserIdentifierNotValid"
		errorReason = "The email address in request does not identify a unique user and therefore not valid.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierNotValid";
		expectHTTPconnection = "close"
		XMLbodynull        = false;
		httpLocationHeader = false;
		break;

	case "ResponseTypeNotValid":
		
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SecurityTokenResponseTypeNotValid"
		errorReason = "The security token response type is not valid.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SecurityTokenResponseTypeNotValid";
		expectHTTPconnection = "close"
		XMLbodynull        = false;
		httpLocationHeader = false;
		break;

	case "TokenTypeNotValid":
		
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:TokenTypeNotValid"
		errorReason = "The token type is not valid";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#TokenTypeNotValid";
		expectHTTPconnection = "close"
		XMLbodynull        = false;
		httpLocationHeader = false;
		break;

	case "UserIdRequired":
		
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:UserIdentifierRequired"
		errorReason = "A user ID is required.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierRequired";
		expectHTTPconnection = "close"
		XMLbodynull        = false;
		httpLocationHeader = false;
		break;

	case "UserNotActive":

		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:UserNotActive"
		errorReason = "The member is not active.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
		XMLbodynull        = false;
		httpLocationHeader = false;
		break;

	case "LinkedLaspBindingAccessPermissionDenied":

		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:LinkedLaspBindingAccessPermissionDenied"
		errorReason = "The user does not have sufficient privilege to bind Linked LASP with his/her account.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LinkedLaspBindingAccessPermissionDenied";
		XMLbodynull        = false;
		httpLocationHeader = false;
		break;

	case "FORBIDDEN:1123":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The request is not authorized.";
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1123";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#forbidden:1123";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;

	case "ValidationTokenRetryLimitReached":
	
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The maximum number of validation token requests allowed for the member has been reached.";
		errorID = "urn:dece:errorid:org:dece:ValidationTokenRetryLimitReached";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ValidationTokenRetryLimitReached";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;

	case "RoleInvalid":
	
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The API call is not authorized.";
		errorID = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RoleInvalid";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;

	break;
	

	case "FORBIDDEN:1123":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The request is not authorized.";
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1123";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;

	case "NODE_STATUS_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request"
		errorReason = "The request is not valid.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html";
	break;


	case "FORBIDDEN_INVALID_USER_STATUS":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The request is not authorized.";
		errorID="urn:dece:errorid:org:dece:securitycontext:InvalidUserStatus";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN:1119":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The request is not authorized.";
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1119";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;

	case "unauthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		XMLbodynull        = false;
		httpLocationHeader = false;
		errorID = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorReason = "The request is not authorized.";
		break;
	
	case "token_rejected":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		XMLbodynull        = false;
		httpLocationHeader = false;
		errorID = "urn:dece:errorid:org:dece:securitycontext:"+expectErrType;
		errorReason = "The request is not authorized.";
		break;

	case "FORBIDDEN_INVALID_ROLE":
		errorReason = "The request is not authorized.";
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1120";
		XMLbodynull        = false;
		httpLocationHeader = false;
		
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpContentLocation}') != null;
	
	def a = context.expand( '${#TestCase#httpContentLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}
	
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	assertionUUID     = urlStr.substring(lastSlash + 1);
	
	tC.setPropertyValue("assertionUUID", assertionUUID);
	callTC.setPropertyValue("assertionUUID", assertionUUID);	 		  
		
	} else {
		
		assert context.expand( '${#TestCase#httpLocation}') == "";
}





//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info "expected"+errorLink;
		log.info "actual"+myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION row count" id="d98f2641-541b-484f-b408-fb422d6869f9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

int uuidcnt = 0;

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {

		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

		String uuid = tC.getPropertyValue("httpContentLocation").toString();

		/*
		*  Assert we have a location header value..
		*/
		assert uuid.length() > 1;

		/*
		*  Verify the value is a URL
		*/
		def lurl = uuid.toURL();
		def urlStr = lurl.getPath();

		int lastSlash = urlStr.lastIndexOf('/');

		/*
		*  Pull just the assertion UUID from the URL
		*/
		String assertionUUID = urlStr.substring(lastSlash + 1);

		log.info "assertionUUID [$assertionUUID]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		assert dbUtils.samlGetUUIDNodeAssertionRowCount(assertionUUID) == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION prior assertion removed" id="1ab4db6a-43b1-483c-ac0f-c0a09035a7a4">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String tokentype = tC.getPropertyValue("tokentype").toString();
String assertionUUIDprior = tC.getPropertyValue("assertionUUIDprior").toString();

int uuidcnt = 0;

if (tC.getPropertyValue("expectErrType") == "SUCCESS" &amp;&amp;  tC.getPropertyValue("assertionUUIDprior").toString() !="null" ) {
    
	assert assertionUUIDprior.length() > 4;
	
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  There should only be on NODE_USER_SAML_ASSERTION row 
		*  with this UUID after API invocation
		*/
		assert dbUtils.samlGetUUIDNodeAssertionRowCount(assertionUUIDprior) == 0;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION STATUS, NODE_OID" id="605ffcea-0452-4ee3-bc11-5c1761b48460">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;
def myXML;

tC.setPropertyValue("assertionROW",null);

String arow = "";
String NODE_ID = tC.getPropertyValue("NODE_ID").toString();
String NODE_OID = tC.getPropertyValue("NODE_OID").toString();

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	/*
	*  Device Node ID override.  All devices are 0200 in 
	*  QA so if the nodeID received is one of our defined
	*  devices change the setting for validation 
	*  purposes.
	*/
	/*log.info "NODE_ID: "+NODE_ID;
	switch (NODE_ID) {
		
		case tP.getPropertyValue("nodeIdDEV").toString():
			NODE_OID = deviceNodeID;
			log.info "NODE_OID:"+NODE_OID;
			break;
	}*/
	
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		String uuid = tC.getPropertyValue("httpContentLocation").toString();
		
		/*
		*  Assert we have a location header value..
		*/
		assert uuid.length() > 1;

		/*
		*  Verify the value is a URL
		*/
		def lurl = uuid.toURL();
		def urlStr = lurl.getPath();

		int lastSlash = urlStr.lastIndexOf('/');

		/*
		*  Pull just the assertion UUID from the URL
		*/
		String assertionUUID = urlStr.substring(lastSlash + 1);

		log.info "assertionUUID [$assertionUUID]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		arow = dbUtils.samlGetAssertionRow(assertionUUID);

		assert arow.length() > 0;

		log.info "arow is [$arow]";

		tC.setPropertyValue("assertionROW",arow);
	}

	/*
	*  Parse the XML
	*/
	try {
		myXML = new XmlSlurper().parseText(arow);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify only one row was returned..
		*/
		log.info "ASSERT - Row Size is 1";
		assert myXML.ResultSet.Row.size() == 1;

		/*
		*  Verify NODE_USER_SAML_ASSERTION.STATUS is active
		*/
		log.info "ASSERT - STATUS is active";
		assert myXML.ResultSet.Row.STATUS.text() == "active";

		/*
		*  Verify NODE_USER_SAML_ASSERTION.NODE_ID
		*/
		log.info "ASSERT - NODE_OID Expect[$NODE_OID] Received[" +
		myXML.ResultSet.Row.NODE_OID.text() + "]";
		assert myXML.ResultSet.Row.NODE_OID.text() == NODE_OID;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION.EXPIRATION" id="ff754d19-4007-45c2-99ef-db050754fc24">
        <con:settings/>
        <con:config><script><![CDATA[import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def a;



if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	int expectTime = tC.getPropertyValue("expectCreateExpireHoursDiff").toInteger();
	String uname = tC.getPropertyValue("assertionUUID").toString().trim();
	String sys = tP.getPropertyValue("targetSystem").toString();
	String results = "";
	String secs = "";

	String sql = """SELECT (extract(DAY FROM EXPIRATION_DATE - CREATED_DATE)*24) 
		as HOURS FROM NODE_USER_SAML_ASSERTION where NODE_USER_SAML_UUID = '$uname'
	""";

	log.info sql;

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		results = a.SelectFromDB(sql,sys);
		log.info results;
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbUtils - $e"; 
		assert 1 == 2;
	}
	finally {
		try {
			def myXML = new XmlSlurper().parseText(results);
			assert myXML.ResultSet.Row.size() == 1;
			results = myXML.ResultSet.Row[0].HOURS
		}
		catch (Throwable e) {
			log.info "ERROR - XmlSlurper - $e";
			assert 1 == 2;
		} 
		finally {
			/*
			*  There is sometype of bug in oracle where it, at times, screws 
			*  update the date diff up to 24 hours.
			*/
						
			log.info "Expect[$expectTime] - Received[" +  results.toInteger() + "]";
			//assert (results.toInteger() == expectTime);
			assert (results.toInteger() <= expectTime + 06 && results.toInteger() >= expectTime - 06);
			//assert (results.toInteger() <= expectTime + 24 && results.toInteger() >= expectTime - 24);
		}
	}
}]]></script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION.NODE_USER_SAML_ASSERTION" id="80548647-1d12-4b10-8f75-c24da8dced5a">
        <con:settings/>
        <con:config><script><![CDATA[/*
*  VALIDATIONS PERFORMED
*
*  saml2p:StatusCode == urn:oasis:names:tc:SAML:2.0:status:Success
*
*  <saml2:Issuer> == Project.Property("samlIssuer") (http://c.decellc.com/)
*
*  <saml2:AuthenticatingAuthority> == Project.Property("samlAuthenticatingAuthority") 
*	(urn:dece:org:neustar:coordinator)
*
*  <AudienceRestriction>
*	Verifications include insuring the size of the <AudienceRestriction> matches
*	the number of nodes expected.
*
*	For DEVICES this check will verify NO audience members are included.
*
*	Also verification of the nodes used in assertion creation/affiliation via
*	the STS call are contained within the <AudienceRestriction> node
*/
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def dbUtils;
def dbUtilsUser;
//int stsaudienceSize = 1;   Start at one as entity nodes is in audience
tC.setPropertyValue("computedAssertionXML",null);
tC.setPropertyValue("dbassertionNodeaccountid",null);
tC.setPropertyValue("dbassertionNodeuserid",null);

String assertionXML = "";
String arow = tC.getPropertyValue("assertionROW");
String[] affiliates;

int ignoreNodesSize = 0;
int audienceSize = 0;
def affiliationList = [];
def ignoreNodesList = [];

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	
	
	log.info tC.getPropertyValue("affiliationList").toString() ;
	if (tC.getPropertyValue("affiliationList").toString() != null)
	{
		affiliationList = tC.getPropertyValue("affiliationList").toString().tokenize(";");
		log.info "affiliationList size is " + affiliationList.size();
		audienceSize = affiliationList.size();
	}
	
	log.info tC.getPropertyValue("audienceIgnoreNodes").toString();
	if (tC.getPropertyValue("audienceIgnoreNodes").toString() != 'null')
	{
		ignoreNodesList = tC.getPropertyValue("audienceIgnoreNodes").toString().tokenize(";");
		log.info "ignoreNodesList size is " + ignoreNodesList.size();
		ignoreNodesSize = ignoreNodesList.size();
	}
	
	
	audienceSize -= ignoreNodesSize; 	

	log.info "audience size"+audienceSize
	/*
	*  Make sure we have data in arow
	*/
	assert arow.length() > 1;

	/*
	*  Get a handle for the saml class.
	*/
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	
	try {
		myXML = new XmlSlurper().parseText(arow);
		log.info 'myXML----------->'+myXML
		log.info 'size------->'+myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".size()
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify only one row was returned..
		*/
		log.info "ASSERT - Row Size is 1";
		assert myXML.ResultSet.Row.size() == 1;

		String assertRaw = myXML.ResultSet.Row.NODE_USER_SAML_ASSERTION_PART1.text() +
				myXML.ResultSet.Row.NODE_USER_SAML_ASSERTION_PART2.text();
			log.info 'assertRaw----->'+assertRaw

		/*
		*  Base64 decode the assertion clob
		*/
		byte [] xmlBytes = Base64.decode(assertRaw);
		assertionXML = new String(xmlBytes, "UTF8");

		assert assertionXML.length() > 1;

		tC.setPropertyValue("computedAssertionXML", assertionXML);
	}
	/*
	*  Now parse the assertion XML
	*/
	try {
		myXML = new XmlSlurper().parseText(assertionXML).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", saml2p: "urn:oasis:names:tc:SAML:2.0:protocol");
		log.info 'myXML----------->'+myXML
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Check the status
		*/
		log.info "ASSERT: Status size 1 == " + myXML."saml2p:Status".size();
		assert 1 == myXML."saml2p:Status".size();

		def s = myXML."saml2p:Status"."saml2p:StatusCode".@Value;
		log.info "ASSERT: Status value is urn:oasis:names:tc:SAML:2.0:status:Success == $s";
		assert "urn:oasis:names:tc:SAML:2.0:status:Success" == s.toString();

		/*
		*  Verify the nodeaccountid.
		*/
		String aname = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute".@Name;
		String anameE = "accountID";
		log.info "ASSERT: NodeAccountID - Name Attribute Value - Expect[$anameE] - Received[$aname]";
		assert anameE == aname;

		String avalue = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
		log.info "ASSERT: Returned Account NodeID length > 0 -- [$avalue]";
		assert avalue.length() > 0;
		tC.setPropertyValue("dbassertionNodeaccountid", avalue);

		/*
		*  Verify the nodeuserid
		*/
		String uvalue = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID".text();
		log.info "ASSERT: Returned Account UserID length > 0 -- [$uvalue]";
	
		//  Not zero length
		assert uvalue.length() > 0;

		//  Save for future
		tC.setPropertyValue("dbassertionNodeuserid", uvalue);
		int lastColon = uvalue.lastIndexOf(':');
		def uvalueid = uvalue.substring(lastColon + 1);

		//  Get USER_OID from NODE_USER table.
		def uvaluedb = dbUtils.samlGetNodeUserIDfromNodeUser(uvalueid);
		def unameval = tC.getPropertyValue("USER_OID").toString();
		log.info "ASSERT: NODE_USER.USER_OID Recv[$uvaluedb] - Expect[$unameval]";
		assert uvaluedb == unameval;

		/*
		* <saml2:Issuer>
		*/
		log.info "ASSERT: <saml2:Issuer> Expect: " +
			tP.getPropertyValue("samlIssuer") +
			" Received:[" + myXML."saml2:Assertion"."saml2:Issuer".text() +
			"]";
		assert tP.getPropertyValue("samlIssuer").toString() == myXML."saml2:Assertion"."saml2:Issuer".text();

		/*
		*  saml2:AuthnStatement
		*/
		log.info "ASSERT: <saml2:AuthenticatingAuthority> Expect [" + 
			tP.getPropertyValue("samlAuthenticatingAuthority") +
			"] Received[" +
			myXML."saml2:Assertion"."saml2:AuthnStatement"."saml2:AuthnContext"."saml2:AuthenticatingAuthority".text() +
			"]";
		assert tP.getPropertyValue("samlAuthenticatingAuthority").toString() ==
			myXML."saml2:Assertion"."saml2:AuthnStatement"."saml2:AuthnContext"."saml2:AuthenticatingAuthority".text()

		/*
		*  AudienceRestriction Processing
		*/
		if (tC.getPropertyValue("isDeviceFlag").toString() == "true") {
			/*
			*  Just empty the list that way we will check
			*  for zero
			*/
			affiliationList = "";
		}
		log.info "ASSERT: AudienceList size Expect[" +
			audienceSize + "] Received[ " +
			myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".size() +
			"]";
			
	assert audienceSize == myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".size();
	
		myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".each {
			log.info "ASSERT: <saml2:AudienceRestriction> Contains [" +
				it.text() + "]";
				log.info "affiliationList: "+affiliationList;
			assert affiliationList.contains(it);
		}


		
			//Make sure none of the ingnoredNodes made it into the affilation list.
			ignoreNodesList.each {

			if(tC.getPropertyValue("NODE_ID")!= it)
			{
				log.info "ASSERT: <saml2:AudienceRestriction> DOES NOT Contain [" + it + "]";
				assert !myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".toString().contains(it);
			}
		}


		
	}
}]]></script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_ACCOUNT row" id="4528963b-b1af-427b-b7ac-9f7f272346b2">
        <con:settings/>
        <con:config><script>/*
*  Verifications
*
*	Only one NODE_ACCOUNT row exists for the NODE_ACCOUNT_ID.
*
*	NODE_ID is the nodeOID for the entity node.
*
*	ACCOUNT_OID is correct.
*
*/
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

def myXML;
def nodeXML;

tC.setPropertyValue("assertionAccountId",null);

String assertionAccountId = "";
String arow = "";
String narow = "";
String NODE_ID = tC.getPropertyValue("NODE_ID").toString();
String NODE_OID = tC.getPropertyValue("NODE_OID").toString();
/*
*  if we are a device adjust the 
*  NODE_ID...
*/
if (tC.getPropertyValue("isDeviceFlag") == "true") {
	log.info "here...";
	NODE_OID = tP.getPropertyValue("nodeDeviceDefault").toString();
}

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	
	arow = tC.getPropertyValue("assertionROW").toString();

	assert arow.length() > 0;

	/*
	*  Parse the NODE_USER_SAML_ASSERTION row
	*/
	try {
		myXML = new XmlSlurper().parseText(arow);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		assertionAccountId = myXML.ResultSet.Row.NODE_ACCOUNT_ID.text();

		log.info "assertionAccountId[$assertionAccountId]";
	}

	/*
	*  Get and Prase the NODE_ACCOUNT row..
	*/
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
		narow = dbUtils.samlGetNodeAccountRow(assertionAccountId);

		assert narow.length() > 0;
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		assertionAccountId = myXML.ResultSet.Row.NODE_ACCOUNT_ID.text();

		log.info "assertionAccountId[$assertionAccountId]";

		try {
			nodeXML = new XmlSlurper().parseText(arow);
		}
		catch(Throwable e) {
			log.info "ERROR - XmlSlurper - $e";
			assert 1 == 2;
		}
		finally {
			/*
			*  Only one row should be returned.
			*/
			log.info "ASSERT: Row Size is 1";
			assert nodeXML.ResultSet.Row.size() == 1;
			
			/*
			* ACCOUNT_OID - ugh  :(  for some reason slurper cannot find ACCOUNT_OID
			*	I will fix later  
			*/
			log.info "ASSERT: ACCOUNT_OID Expect[" + tC.getPropertyValue("accountoid") +
				"] Received[" + nodeXML.ResultSet.Row.ACCOUNT_OID.text() + "]";
		//assert tC.getPropertyValue("accountoid").toString() == nodeXML.ResultSet.Row.ACCOUNT_OID.text();

			/*
			*  NODE_ID is the entity node...
			*/
			
			log.info "ASSERT: NODE_OID Expect[" + NODE_OID +
				"] Received[" + nodeXML.ResultSet.Row.NODE_OID.text() + "]";
			assert NODE_OID == nodeXML.ResultSet.Row.NODE_OID.text();

		}
	}	
}

tC.setPropertyValue("assertionAccountId",assertionAccountId);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER row count" id="da04670b-ce6e-4d66-963d-aee4cfbf54ea">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int expectedSize = 1;
int assertionSize = 0;
int audienceSize = 1;  // Start at one as entity nodes is in audience
int audienceIgnoreSize = 0;
int expectNodeUserRowCount = tC.getPropertyValue("expectNodeUserRowCount").toInteger();

tC.setPropertyValue("z_resultNodeUserRowCount",null);

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	if (tC.getPropertyValue("audienceIgnoreAll").toString() == "false") {
		if ( tC.getPropertyValue("affiliationList") != null) {
			affiliationList = tC.getPropertyValue("affiliationList").toString();
			audienceSize = affiliationList.tokenize(";").size();
			log.info audienceSize;
			log.info "audienceSize BEFORE [$audienceSize]";
		}
		if ( tC.getPropertyValue("audienceIgnoreNodes") != null) {
			audienceIgnoreSize = tC.getPropertyValue("audienceIgnoreNodes").toString().tokenize(";").size();
			log.info "audienceIgnoreSize BEFORE [$audienceIgnoreSize]";
		}

		audienceSize -= audienceIgnoreSize;
		log.info "audienceSize FINAL [$audienceSize]";
	} else {
		log.info "No changes to count";
	}
	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	assertionSize = a.samlGetUUIDNodeUserRowCountbyUUID(tC.getPropertyValue("assertionUUID"));

	tC.setPropertyValue("z_resultNodeUserRowCount",assertionSize.toString());

	if (expectNodeUserRowCount == 0) {
		log.info "ASSERT: Audience Size[$audienceSize] - Received[$assertionSize]";
		assert assertionSize == audienceSize;
	} else {
		log.info "ASSERT: Audience Size[$audienceSize] - Received[$expectNodeUserRowCount]";
		assert audienceSize == expectNodeUserRowCount;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER rows" id="e7a3a5d0-7b24-4b24-be8c-8c63efaee3d4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));

def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));

String uuid = tC.getPropertyValue("assertionUUID").toString();
String nodeUser = tC.getPropertyValue("assertionUserId").toString();

String resultsDB = "";
String node = "";
List nodeList;

int indexOfcol = 0;
if (tC.getPropertyValue("actionSkipNodeUserCheck") != "true") {
	if (tC.getPropertyValue("expectErrType").toString() == "SUCCESS") {
		log.info "In LOOOOOOP";
	//	assert tC.getPropertyValue("ComputedAudienceList").toString() != 'null';

		/*
		*  Devices should not ever be affilated.
		*/
		/*if (tC.getPropertyValue("isDeviceFlag").toString() != "true") {
			nodeList = tC.getPropertyValue("ComputedAudienceList").toString().tokenize(";");
		} else {
			nodeList = tP.getPropertyValue("nodeDeviceDefault").toString().tokenize(";");
		}*/

		def affiliationList = tC.getPropertyValue("affiliationList").toString().tokenize(";");
		log.info "affiliationList size: "+affiliationList.size();
		if (tC.getPropertyValue("audienceIgnoreNodes") != 'null') {
			ignoreNodesList = tC.getPropertyValue("audienceIgnoreNodes").toString().tokenize(";");
			log.info "ignoreNodesList size: "+ignoreNodesList.size();
			ignoreNodesList.each {
				if(tC.getPropertyValue("NODE_ID").toString() != it.toString()){
						affiliationList = affiliationList.minus(it);
						log.info "affiliationList size: "+affiliationList.size();
				}
						
				}
		}
		
		nodeList = affiliationList;
		log.info "nodeList size is " + nodeList.size();

		nodeList.each {
			assert nodeList.isEmpty() == false;
			String NODE_OID = null;
			String nodeoid = tC.getPropertyValue("NODE_OID").toString();
			log.info "Processing NODE: $it";	
			if(it.toString() == "urn:dece:org:org:dece:dece:cs" || it.toString() == "urn:dece:org:org:dece:coord:cs"){
			log.info "here...";
				NODE_OID =  nodeoid;
			}else{
				indexOfcol = it.lastIndexOf(":");
			node = it.substring(indexOfcol + 1);
			log.info "node is $node";
			 NODE_OID = nodeoidGet.nodeoidGetFromNodeId("$node");
			}
			log.info "here...";
				if (tC.getPropertyValue("isDeviceFlag").toString() == "true") {
					NODE_OID=tP.getPropertyValue("nodeDeviceDefault").toString();
				}
	
			
			String sql = """SELECT to_char(rawtohex(USER_OID)) USER_OID,
				to_char(rawtohex(NODE_OID)) NODE_OID, 
				to_char(rawtohex(NODE_USER_ID)) NODE_USER_ID 
				FROM NODE_USER where NODE_USER_SAML_UUID = '$uuid' 
 				and NODE_OID = hextoraw('$NODE_OID')""";
			try {
				log.info "sql is [$sql]";
				resultsDB = dbUtils.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
			} catch (Throwable e) {
				log.info "ERROR - SelectFromDB issue! - $e";
			} finally {
				log.info "results is [$resultsDB]";
			}
		
			try {
				def myXML = new XmlSlurper().parseText(resultsDB);
	
				String dbUserOID = myXML.ResultSet.Row[0].USER_OID;
				String dbNodeOID = myXML.ResultSet.Row[0].NODE_OID;
				String dbNodeUserOID = myXML.ResultSet.Row[0].NODE_USER_ID;
			}
			catch(Throwable e) {
				log.info "ERROR - XmlSlurper Problem - $e";
			}
			finally {
				log.info "Assert DB USER_OID [$dbUserOID] == [" + tC.getPropertyValue("USER_OID") + "]";
				assert dbUserOID == tC.getPropertyValue("USER_OID").toString();

				log.info "Assert DB NODE_OID [$dbNodeOID] == [$NODE_OID]";
				assert dbNodeOID == NODE_OID;

			} 	
		}
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify LVAL EUDU &amp; EMUC row count" id="921e4f7d-d84f-4517-b14e-c058e9a5fb4b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
def username = context.expand( '${#TestCase#Username}' )
username=username.replace(" ","");
String uuid = tC.getPropertyValue("assertionUUID").toString();
String user_oid = tC.getPropertyValue("USER_OID").toString();
String resultsDB = "";
String node = "";
List nodeList;
def myXML = "";
def audienceIgnoreNodes;
int indexOfcol = 0;

if (tC.getPropertyValue("expectErrType").toString() == "SUCCESS"&amp;&amp; tC.getPropertyValue("actionSkipPolicyCheck") != "true") 
{
	assert tC.getPropertyValue("affiliationList").toString() != 'null';

	/*
	*  Devices should not ever be affilated.
	*/
	/*if (tC.getPropertyValue("isDeviceFlag").toString() != "true") 
	{
		nodeList = tC.getPropertyValue("stsComputedAudienceList").toString().tokenize(",");
	} 
	else 
	{
		nodeList = tP.getPropertyValue("nodeDeviceDefault").toString().tokenize(",");
	}*/

	if ( tC.getPropertyValue("affiliationList") != null) {
			affiliationList = tC.getPropertyValue("affiliationList").tokenize(";");
		}
		if ( tC.getPropertyValue("audienceIgnoreNodes") != null) {
			audienceIgnoreNodes = tC.getPropertyValue("audienceIgnoreNodes").tokenize(";");
		}

	audienceIgnoreNodes.each
	{
			affiliationList = affiliationList.minus(it);
	}
		
	nodeList = affiliationList;
	log.info "nodeList size is " + nodeList.size();

	nodeList.each {

		assert nodeList.isEmpty() == false;
		log.info "Processing NODE: $it";
		indexOfcol = it.lastIndexOf(":");
		node = it.substring(indexOfcol + 1);
		String NODE_OID = nodeoidGet.nodeoidGetFromNodeId(node);
		
		String sql = """select pre.entity_id, count(p.policy_oid) as count from policy p, policy_requesting_entity pre where 
								p.status = 'active' and p.policy_class in (100,103,104) 
								and p.policy_oid in (select policy_oid from policy_relationship where policy_actor in 
								(select account_oid from account_user where lower(username) = lower('$username')))
								and pre.policy_oid = p.policy_oid and pre.entity_id = hextoraw('$NODE_OID') group by pre.entity_id""";
		try 
		{
			log.info "sql is [$sql]";
			resultsDB = dbUtils.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
			log.info "resultsDB: "+resultsDB;
		} 
		catch (Throwable e) 
		{
			log.info "ERROR - SelectFromDB issue! - $e";
		} 
		
		myXML = new XmlSlurper().parseText(resultsDB);
		log.info "Node Received: "+myXML.ResultSet.Row[0].ENTITY_ID;
		log.info "Row Count Received: "+myXML.ResultSet.Row[0].COUNT;
		assert myXML.ResultSet.Row[0].ENTITY_ID== NODE_OID;
		assert myXML.ResultSet.Row[0].COUNT == 3;	
	
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify NODE_USER prior removed" id="328713a4-665d-4bef-85c5-f041ec3eda11">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def a;

String assertionUUIDprior = tC.getPropertyValue("assertionUUIDprior").toString();

tC.setPropertyValue("z_resultNodeUserRowCount",null);

if (tC.getPropertyValue("expectErrType") == "SUCCESS" &amp;&amp;  tC.getPropertyValue("assertionUUIDprior").toString() !="null") {

	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	assertionSize = a.samlGetUUIDNodeUserRowCountbyUUID(assertionUUIDprior);

	log.info "ASSERT: No Rows for [$assertionUUIDprior]";
	assert assertionSize == 0;
}</script></con:config>
      </con:testStep><con:properties><con:property><con:name>ACCOUNT_OID</con:name><con:value>8FB17E77DB9F44109CF54F449481F9A8</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>false</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>EF7093A951A6BFFDE0401F0A059906D7</con:value></con:property><con:property><con:name>assertionROW</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <NODE_USER_SAML_ASSERTION_OID>EF7094DD680AA5FEE0401F0A05990BBB</NODE_USER_SAML_ASSERTION_OID>
      <NODE_OID>C0CEF8E08CE1C7D6E0401F0A0599120B</NODE_OID>
      <NODE_USER_SAML_ASSERTION_PART1>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHNhbWwycDpSZXNwb25zZSBDb25zZW50PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDpvYnRhaW5lZCIgRGVzdGluYXRpb249Imh0dHBzOi8vc3RkZWNxYXZ1dGwxLnZhLm5ldXN0YXIuY29tOjI0ODUvc2ltcGxlc2FtbC9tb2R1bGUucGhwL3NhbWwvc3Avc2FtbDItYWNzLnBocC9SRVQiIElEPSJfZTFmNzU2MDgtZTI5Zi00N2UzLWFhMGEtN2U3OGRlNWU1NmFiIiBJblJlc3BvbnNlVG89IjFlODY2Mjg5LTUxZjYtNDU3NS05NGI3LTE5NjM4Y2Q2Y2I4ZSIgSXNzdWVJbnN0YW50PSIyMDE0LTAxLTA4VDA2OjI3OjI1LjcxM1oiIFZlcnNpb249IjIuMCIgeG1sbnM6c2FtbDJwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiPjxzYW1sMjpJc3N1ZXIgeG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPmh0dHA6Ly9jLmRlY2VsbGMuY29tLzwvc2FtbDI6SXNzdWVyPjxzYW1sMnA6U3RhdHVzPjxzYW1sMnA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8+PC9zYW1sMnA6U3RhdHVzPjxzYW1sMjpBc3NlcnRpb24gSUQ9Il80ZWFmOTNkMy00OWJlLTRlMzItOTFiOS0wYjNkZDU5YmUyZjQiIElzc3VlSW5zdGFudD0iMjAxNC0wMS0wOFQwNjoyNzoyNS43MTNaIiBWZXJzaW9uPSIyLjAiIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj48c2FtbDI6SXNzdWVyPmh0dHA6Ly9jLmRlY2VsbGMuY29tLzwvc2FtbDI6SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPgo8ZHM6U2lnbmVkSW5mbz4KPGRzOkNhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz4KPGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNyc2Etc2hhMSIvPgo8ZHM6UmVmZXJlbmNlIFVSST0iI180ZWFmOTNkMy00OWJlLTRlMzItOTFiOS0wYjNkZDU5YmUyZjQiPgo8ZHM6VHJhbnNmb3Jtcz4KPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+CjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiPjxlYzpJbmNsdXNpdmVOYW1lc3BhY2VzIFByZWZpeExpc3Q9ImRzIHNhbWwyIHhzIHhzaSIgeG1sbnM6ZWM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvZHM6VHJhbnNmb3JtPgo8L2RzOlRyYW5zZm9ybXM+CjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIvPgo8ZHM6RGlnZXN0VmFsdWU+N3R5L21EeEx0QTFuYTdUTFdSTFRaa21SWHFFPTwvZHM6RGlnZXN0VmFsdWU+CjwvZHM6UmVmZXJlbmNlPgo8L2RzOlNpZ25lZEluZm8+CjxkczpTaWduYXR1cmVWYWx1ZT4Kd0xTdkJLaElCQmlsZHN5aUQ4Wkh1RzgraXBFYWNQQ3dZQ2lmR2VZeDhnQXhidldlQ0w5VWF5bm0rUXZrOCsrZnZzYk9UTU5QVlo5WApmcDlESi9Oa1d5L2lWdkJHQzl6Wmx5VTI3ZTVrL3dHSFdxUDF3dUEyQS9UamNlYVRhWnNmZzZhNDhTUjAyOXBOZmw0eEFKMXpkcmFFClRJN1F6b3V4NTZGd3oyTTN5ZDQ9CjwvZHM6U2lnbmF0dXJlVmFsdWU+CjwvZHM6U2lnbmF0dXJlPjxzYW1sMjpTdWJqZWN0PjxzYW1sMjpOYW1lSUQgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDpwZXJzaXN0ZW50Ij51cm46ZGVjZTp1c2VyaWQ6b3JnOmRlY2U6RUY3MDk0REQ2N0Y0QTVGRUUwNDAxRjBBMDU5OTBCQkI8L3NhbWwyOk5hbWVJRD48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjbTpzZW5kZXItdm91Y2hlcyI+PHNhbWwyOlN1YmplY3RDb25maXJtYXRpb25EYXRhIEluUmVzcG9uc2VUbz0iMWU4NjYyODktNTFmNi00NTc1LTk0YjctMTk2MzhjZDZjYjhlIiBOb3RPbk9yQWZ0ZXI9IjIwMTQtMDEtMDhUMDk6Mjc6MjUuNzEzWiIgUmVjaXBpZW50PSJodHRwczovL3N0ZGVjcWF2dXRsMS52YS5uZXVzdGFyLmNvbToyNDg1L3NpbXBsZXNhbWwvbW9kdWxlLnBocC9zYW1sL3NwL3NhbWwyLWFjcy5waHAvQzBDRUY4RTA4Q0UxQzdENkUwNDAxRjBBMDU5OTEyMEIiLz48L3NhbWwyOlN1YmplY3RDb25maXJtYXRpb24+PC9zYW1sMjpTdWJqZWN0PjxzYW1sMjpDb25kaXRpb25zIE5vdEJlZm9yZT0iMjAxNC0wMS0wOFQwNjoyNzoxNS43MTNaIiBOb3RPbk9yQWZ0ZXI9IjIwMTUtMDEtMDhUMDY6Mjc6MjUuNzEzWiI+PHNhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24+PHNhbWwyOkF1ZGllbmNlPnVybjpkZWNlOm9yZzpvcmc6ZGVjZTpSRVQ8L3NhbWwyOkF1ZGllbmNlPjwvc2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48L3NhbWwyOkNvbmRpdGlvbnM+PHNhbWwyOkFkdmljZT48c2FtbDI6QXNzZXJ0aW9uVVJJUmVmPmh0dHBzOi8vcWEucS51dnZ1LmNvbTo3MDAxL3Jlc3QvMS8wNy9TZWN1cml0eVRva2VuL0Fzc2VydGlvbi9fNGVhZjkzZDMtNDliZS00ZTMyLTkxYjktMGIzZGQ1OWJlMmY0PC9zYW1sMjpBc3NlcnRpb25VUklSZWY+PC9zYW1sMjpBZHZpY2U+PHNhbWwyOkF1dGhuU3RhdGVtZW50IEF1dGhuSW5zdGFudD0iMjAxNC0wMS0wOFQwNjoyNzoyNS43MTNaIiBTZXNzaW9uSW5kZXg9Il80ZWFmOTNkMy00OWJlLTRlMzItOTFiOS0wYjNkZDU5YmUyZjQiPjxzYW1sMjpBdXRobkNvbnRleHQ+PHNhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOlBhc3N3b3JkPC9zYW1sMjpBdXRobkNvbnRl</NODE_USER_SAML_ASSERTION_PART1>
      <NODE_USER_SAML_ASSERTION_PART2>eHRDbGFzc1JlZj48c2FtbDI6QXV0aGVudGljYXRpbmdBdXRob3JpdHk+dXJuOmRlY2U6b3JnOm9yZzpkZWNlOmNvb3JkaW5hdG9yPC9zYW1sMjpBdXRoZW50aWNhdGluZ0F1dGhvcml0eT48L3NhbWwyOkF1dGhuQ29udGV4dD48L3NhbWwyOkF1dGhuU3RhdGVtZW50PjxzYW1sMjpBdHRyaWJ1dGVTdGF0ZW1lbnQ+PHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJhY2NvdW50SUQiIE5hbWVGb3JtYXQ9InVybjpkZWNlOnR5cGU6YWNjb3VudElEIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj51cm46ZGVjZTphY2NvdW50aWQ6b3JnOmRlY2U6RUY3MDkzQTk1MTlGQkZGREUwNDAxRjBBMDU5OTA2RDc8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjwvc2FtbDI6QXR0cmlidXRlU3RhdGVtZW50Pjwvc2FtbDI6QXNzZXJ0aW9uPjwvc2FtbDJwOlJlc3BvbnNlPg==</NODE_USER_SAML_ASSERTION_PART2>
      <NODE_USER_SAML_UUID>_4eaf93d3-49be-4e32-91b9-0b3dd59be2f4</NODE_USER_SAML_UUID>
      <CREATED_DATE>2014-01-08 06:27:26.0</CREATED_DATE>
      <NODE_USER_ID>EF7094DD67FAA5FEE0401F0A05990BBB</NODE_USER_ID>
      <NODE_ACCOUNT_ID>EF7093A951A6BFFDE0401F0A059906D7</NODE_ACCOUNT_ID>
      <STATUS>active</STATUS>
      <EXPIRATION_DATE>2015-01-08 06:27:26.0</EXPIRATION_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUIDprior</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>audienceIgnoreAll</con:name><con:value>false</con:value></con:property><con:property><con:name>audienceIgnoreNodes</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>base64EncodedSignedAuthnRequest</con:name><con:value>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOkF1dGhuUmVxdWVzdCB4bWxuczpzYW1sMnA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgQXNzZXJ0aW9uQ29uc3VtZXJTZXJ2aWNlVVJMPSJodHRwczovL3N0ZGVjcWF2dXRsMS52YS5uZXVzdGFyLmNvbToyNDg1L3NpbXBsZXNhbWwvbW9kdWxlLnBocC9zYW1sL3NwL3NhbWwyLWFjcy5waHAvQzBDRUY4RTA4Q0UxQzdENkUwNDAxRjBBMDU5OTEyMEIiIERlc3RpbmF0aW9uPSJodHRwczovL3FhLnMudXZ2dS5jb206NzAwMS9zZWN1cml0eS9kZWxlZ2F0aW9uL3NhbWwvbG9naW5zZXJ2aWNlL2xvZ2luIiBGb3JjZUF1dGhuPSJ0cnVlIiBJRD0iMTBiZGM3NTktZjcyYi00MzljLTgzM2ItZDBkZTE1MmNlODJhIiBJc3N1ZUluc3RhbnQ9IjIwMTQtMDMtMjVUMTA6NTY6MDguMDRaIiBQcm90b2NvbEJpbmRpbmc9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpiaW5kaW5nczpIVFRQLVBPU1QiIFZlcnNpb249IjIuMCI+PHNhbWwyOklzc3VlciB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+dXJuOmRlY2U6b3JnOm9yZzpkZWNlOlJFVDwvc2FtbDI6SXNzdWVyPjxzYW1sMnA6TmFtZUlEUG9saWN5IEFsbG93Q3JlYXRlPSJ0cnVlIiBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQtZm9ybWF0OnRyYW5zaWVudCIvPjxzYW1sMnA6RXh0ZW5zaW9ucz48bnM0OlBvbGljeUxpc3QgeG1sbnM6bnM0PSJodHRwOi8vd3d3LmRlY2VsbGMub3JnL3NjaGVtYS8yMDEzLzEwL2Nvb3JkaW5hdG9yIj48bnM0OlBvbGljeT48bnM0OlBvbGljeUNsYXNzPnVybjpkZWNlOnR5cGU6cG9saWN5OlVzZXJMaW5rQ29uc2VudDwvbnM0OlBvbGljeUNsYXNzPjwvbnM0OlBvbGljeT48L25zNDpQb2xpY3lMaXN0Pjwvc2FtbDJwOkV4dGVuc2lvbnM+PHNhbWwyOkNvbmRpdGlvbnMgeG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPjxzYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPjxzYW1sMjpBdWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6UkVUPC9zYW1sMjpBdWRpZW5jZT48L3NhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24+PC9zYW1sMjpDb25kaXRpb25zPjxzYW1sMjpTdWJqZWN0IHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj48c2FtbDI6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOm5hbWVpZC1mb3JtYXQ6cGVyc2lzdGVudCI+cnRlamEyOUB1dnZ1dGVzdGluZy5iaXo8L3NhbWwyOk5hbWVJRD48L3NhbWwyOlN1YmplY3Q+PFNpZ25hdHVyZSB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+PFNpZ25lZEluZm8+PENhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAxL1JFQy14bWwtYzE0bi0yMDAxMDMxNSIvPjxTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz48UmVmZXJlbmNlIFVSST0iIzEwYmRjNzU5LWY3MmItNDM5Yy04MzNiLWQwZGUxNTJjZTgyYSI+PFRyYW5zZm9ybXM+PFRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+PC9UcmFuc2Zvcm1zPjxEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIvPjxEaWdlc3RWYWx1ZT42cUk5UkI2RkJFYWQyZlc5dFFtazVVcEJKTjA9PC9EaWdlc3RWYWx1ZT48L1JlZmVyZW5jZT48L1NpZ25lZEluZm8+PFNpZ25hdHVyZVZhbHVlPnJ0Wnlad1pRZlhQa3VxeU9zaWdybisyeXRxMnN3OS8vQUhQWkE3cDVnOWl1K1hEMEpTd0hQT3I0V04yWHhnUmttbTNPTmNwQ3NzTVgKNXdLRTBvTytYWmhCQzJqVkNZZkxlQnJ1YXRiNTVBc0VlREVVVkp5OTZYOHVHRjNtWDY2bUU5UkFLZTdLd3JyNjFCL2pNVE9tcXI0bwoyd3dPTGxZemVkeEMxTzlvOUZwUHRmQ3JJYnhzdXJUYWk0ZC9tTVBQWkFtdWUwQWVzblBJVzZQNHQrT1lYdkRVdDlWdzM3K0JtSTFqCkJxQ1RnSStkb04yQXNCUmRhYVQ0L1p0Z0NKZU95Smd1Tm9QN0J0amx4Z1E4Vjk1QjZFQWpqYzVTczV1UWx6WE1ZeEhPMDlYbGplbXYKNFdjZGhBeTlrNk92UGxXV3MwL1JtL0UrVEJQYlFtb2N5ampJTy9qRzg0YUZnZDU1bUdXVTU1Y2pFdFR5WTJwUTRGZTRvek53T0FNeApBVldoL2pmREx0L1FKNm94dkJwQ0V3Z2ZiUHU5bXUvOWlGVzZ4OXhqY2RITWRYWE41SFZQOEF5dFJQWnJha3FRNHlpKzhES1JGd2RYCjU1cWZOeGhWVnlXazhNN1hjVHFIeDRscUJkNmlZazY4ZVpPOTVQeTNrRHFCTnRjdkUwWmVROGM3ZW5FQ2hmMTBubVBhU3cwY2duTXMKQk9wbXd5QnZGbWNaSDlSTWw5Q0c2MWdRZEx0ZUx5KzYrdlNqdWtpZmRPMEs2WFZSeTVOUmVnTnYzb3JwcXd3RW9UNnhXa0ZXRnJqKwoya1lVS0hKU1B6OGY5R1RvMTNweFZsQndwQUhGdTZFaDM3alNOVXZJMkF3MitIOEY1dWxOMXhNL1Bsb1pXaHE2cGN5SHZ5U2owZU09PC9TaWduYXR1cmVWYWx1ZT48S2V5SW5mbz48WDUwOURhdGE+PFg1MDlTdWJqZWN0TmFtZT4xLjIuODQwLjExMzU0OS4xLjkuMT0jMTYwZjY2NmY2ZjQwNmU2NTc1NzM3NDYxNzIyZTYzNmY2ZCxDTj11cm46ZGVjZTpvcmc6b3JnOmRlY2U6UkVULEw9U3RlcmxpbmcsU1Q9VkEsQz1VUzwvWDUwOVN1YmplY3ROYW1lPjxYNTA5Q2VydGlmaWNhdGU+TUlJRHp6Q0NBemdDQWdWaU1BMEdDU3FHU0liM0RRRUJCUVVBTUdveEVEQU9CZ05WQkFvVEIwNWxkWE4wWVhJeEN6QUpCZ05WQkFzVApBbEZCTVJFd0R3WURWUVFIRXdoVGRHVnliR2x1WnpFUk1BOEdBMVVFQ0JNSVZtbHlaMmx1YVdFeEN6QUpCZ05WQkFZVEFsVlRNUll3CkZBWURWUVFERXcxdVpYVnpkR0Z5TG5GaExtTmhNQjRYRFRFek1EVXpNREUwTXpjeU1Gb1hEVEU0TURVeU9URTBNemN5TUZvd2NURUwKTUFrR0ExVUVCaE1DVlZNeEN6QUpCZ05WQkFnVEFsWkJNUkV3RHdZRFZRUUhFd2hUZEdWeWJHbHVaekVpTUNBR0ExVUVBeE1aZFhKdQpPbVJsWTJVNmIzSm5PbTl5Wnpwa1pXTmxPbEpGVkRFZU1Cd0dDU3FHU0liM0RRRUpBUllQWm05dlFHNWxkWE4wWVhJdVkyOXRNSUlDCklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUF6djVWK2xOVFFSWWRsdlRTQnhFWnhXdmp6bmlna1UrNnNrWUQKRzc4OTJQMGxsb3R0aURKMmpZSlFDQldlZFduSmVBaEJWeU14dUliZzNXeGJLV1hoTVBYK2xiT1JhTGJiZnRlMkcwSXZDSXpUdU5iVwpJRGpSczZuMkFwSnNwSEU3OW9BTUgxMngrWndYRzhZb1IvVFZjVTIvYWI0T3dDTmtzMC9oZjM5U29zM3owY3lzaHMxdkhEWFphNk9sCksvTTZ5aFdHcnZkWXJRdlVFaUszbjB5aUtFSGdxZ0RaMkZRWTNxUDVmQ0hLcnhjSG9iczJsdWk5cW9qUy8zb1NXQXlpd1U4eDVLVjEKa1RodlRPbmdGUjJxTnoycExJYWlLRG5wemR2TEdVS2orL21yTnNUaVVNYzBTVnFUWk95WHVlOFUyNEw5ZlRQbkNEVS81UkhPZzA5RQp1MnljKy8xU2FqbGZaSkRqRGtSZ2lyU2xBdHZFS25HZFc5VWJDQ1NaOVVMTEVqcnR4cyt4L1FTRE52T1lGc01YVXhiaVJOWXdKeUJ3CnQ2RDNBT0tDR1BlZUhUWURLcEREeDZoQTFEMkZvdTd6Y1RiZ0RnVHJQbTdJMWNzMkdQQTk2Y1M2SEdEblpRTTdoeUJhZWs2Ylh6b2sKNkltTkJJVXZ0WElXQUtyMUgzRW5GU3A2REJqdnBFWW1Ld3JXYVNnVWxTNlF0eTBUclEyOEEveE9hMW1LNms0ajF0SThVRHJINzdoTgpMZU9rdmZRd0E1NEFid20vU2kwVnZsYWIyZUdYU25MSUhjKzhHckNTUUJNTlRTcFBWMWJzTjVWNHFpZUx4L1Z2YzFvbXVMYkxpOFkzCnhwaWM5ODlqZ0RSTDV6ZUl2bVk2T3pNZEhiS2FsYjVOT3BhUllxMENBd0VBQVRBTkJna3Foa2lHOXcwQkFRVUZBQU9CZ1FDMFVEalUKODh5TXlBNlhveWpYSEQrMDZ6Z05KZlBYcERkNXRQV0Zqb2Z0WHE2dUFkSzFoenBEYlhTTGg1aDFNL2VnSkJGNGhHY09EZlZYRTNkYQpVYi9qWDYxTlJBR3hOU0NYUkJCbWhBOCtvcEx0eVlWVmNOdE1iUE5ScjJvb2h4Z3dzbHRLblJQZFdpMkNBazlUaGhWdjgrayt5dmM0CnpBVWxmckJqNjMyQ1V3PT08L1g1MDlDZXJ0aWZpY2F0ZT48L1g1MDlEYXRhPjwvS2V5SW5mbz48L1NpZ25hdHVyZT48L3NhbWwycDpBdXRoblJlcXVlc3Q+</con:value></con:property><con:property><con:name>computedAssertionXML</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2p:Response Consent="urn:oasis:names:tc:SAML:2.0:consent:obtained" Destination="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET" ID="_e1f75608-e29f-47e3-aa0a-7e78de5e56ab" InResponseTo="1e866289-51f6-4575-94b7-19638cd6cb8e" IssueInstant="2014-01-08T06:27:25.713Z" Version="2.0" xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol"><saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">http://c.decellc.com/</saml2:Issuer><saml2p:Status><saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/></saml2p:Status><saml2:Assertion ID="_4eaf93d3-49be-4e32-91b9-0b3dd59be2f4" IssueInstant="2014-01-08T06:27:25.713Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_4eaf93d3-49be-4e32-91b9-0b3dd59be2f4">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs xsi" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>7ty/mDxLtA1na7TLWRLTZkmRXqE=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
wLSvBKhIBBildsyiD8ZHuG8+ipEacPCwYCifGeYx8gAxbvWeCL9Uaynm+Qvk8++fvsbOTMNPVZ9X
fp9DJ/NkWy/iVvBGC9zZlyU27e5k/wGHWqP1wuA2A/TjceaTaZsfg6a48SR029pNfl4xAJ1zdraE
TI7Qzoux56Fwz2M3yd4=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:EF7094DD67F4A5FEE0401F0A05990BBB</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="1e866289-51f6-4575-94b7-19638cd6cb8e" NotOnOrAfter="2014-01-08T09:27:25.713Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/C0CEF8E08CE1C7D6E0401F0A0599120B"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-01-08T06:27:15.713Z" NotOnOrAfter="2015-01-08T06:27:25.713Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_4eaf93d3-49be-4e32-91b9-0b3dd59be2f4</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-01-08T06:27:25.713Z" SessionIndex="_4eaf93d3-49be-4e32-91b9-0b3dd59be2f4"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:EF7093A9519FBFFDE0401F0A059906D7</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></saml2p:Response>]]></con:value></con:property><con:property><con:name>dbassertionNodeaccountid</con:name><con:value>urn:dece:accountid:org:dece:EF7093A9519FBFFDE0401F0A059906D7</con:value></con:property><con:property><con:name>dbassertionNodeuserid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:EF7094DD67F4A5FEE0401F0A05990BBB</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectNodeUserRowCount</con:name><con:value>0</con:value></con:property><con:property><con:name>httpBody</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:InvalidContentType">
      <Reason Language="en">The content type specified is not allowed for this request.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/11/VerificationToken/urn:dece:type:token:DelegationTokenRequest</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#InvalidContentType</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>718</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 415 Unsupported Media Type</con:value></con:property><con:property><con:name>jksFile</con:name><con:value>C:/certs/RET.jks</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_OID</con:name><con:value>C0CEF8E08CE1C7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>responsetype</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>signedAuthnRequest</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:AuthnRequest xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" AssertionConsumerServiceURL="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/C0CEF8E08CE1C7D6E0401F0A0599120B" Destination="https://qa.s.uvvu.com:7001/security/delegation/saml/loginservice/login" ForceAuthn="true" ID="10bdc759-f72b-439c-833b-d0de152ce82a" IssueInstant="2014-03-25T10:56:08.04Z" ProtocolBinding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Version="2.0"><saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:RET</saml2:Issuer><saml2p:NameIDPolicy AllowCreate="true" Format="urn:oasis:names:tc:SAML:2.0:nameid-format:transient"/><saml2p:Extensions><ns4:PolicyList xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"><ns4:Policy><ns4:PolicyClass>urn:dece:type:policy:UserLinkConsent</ns4:PolicyClass></ns4:Policy></ns4:PolicyList></saml2p:Extensions><saml2:Conditions xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Subject xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">rteja29@uvvutesting.biz</saml2:NameID></saml2:Subject><Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/><SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><Reference URI="#10bdc759-f72b-439c-833b-d0de152ce82a"><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/></Transforms><DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><DigestValue>6qI9RB6FBEad2fW9tQmk5UpBJN0=</DigestValue></Reference></SignedInfo><SignatureValue>rtZyZwZQfXPkuqyOsigrn+2ytq2sw9//AHPZA7p5g9iu+XD0JSwHPOr4WN2XxgRkmm3ONcpCssMX
5wKE0oO+XZhBC2jVCYfLeBruatb55AsEeDEUVJy96X8uGF3mX66mE9RAKe7Kwrr61B/jMTOmqr4o
2wwOLlYzedxC1O9o9FpPtfCrIbxsurTai4d/mMPPZAmue0AesnPIW6P4t+OYXvDUt9Vw37+BmI1j
BqCTgI+doN2AsBRdaaT4/ZtgCJeOyJguNoP7BtjlxgQ8V95B6EAjjc5Ss5uQlzXMYxHO09Xljemv
4WcdhAy9k6OvPlWWs0/Rm/E+TBPbQmocyjjIO/jG84aFgd55mGWU55cjEtTyY2pQ4Fe4ozNwOAMx
AVWh/jfDLt/QJ6oxvBpCEwgfbPu9mu/9iFW6x9xjcdHMdXXN5HVP8AytRPZrakqQ4yi+8DKRFwdX
55qfNxhVVyWk8M7XcTqHx4lqBd6iYk68eZO95Py3kDqBNtcvE0ZeQ8c7enEChf10nmPaSw0cgnMs
BOpmwyBvFmcZH9RMl9CG61gQdLteLy+6+vSjukifdO0K6XVRy5NRegNv3orpqwwEoT6xWkFWFrj+
2kYUKHJSPz8f9GTo13pxVlBwpAHFu6Eh37jSNUvI2Aw2+H8F5ulN1xM/PloZWhq6pcyHvySj0eM=</SignatureValue><KeyInfo><X509Data><X509SubjectName>1.2.840.113549.1.9.1=#160f666f6f406e6575737461722e636f6d,CN=urn:dece:org:org:dece:RET,L=Sterling,ST=VA,C=US</X509SubjectName><X509Certificate>MIIDzzCCAzgCAgViMA0GCSqGSIb3DQEBBQUAMGoxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsT
AlFBMREwDwYDVQQHEwhTdGVybGluZzERMA8GA1UECBMIVmlyZ2luaWExCzAJBgNVBAYTAlVTMRYw
FAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEzMDUzMDE0MzcyMFoXDTE4MDUyOTE0MzcyMFowcTEL
MAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEiMCAGA1UEAxMZdXJu
OmRlY2U6b3JnOm9yZzpkZWNlOlJFVDEeMBwGCSqGSIb3DQEJARYPZm9vQG5ldXN0YXIuY29tMIIC
IjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAzv5V+lNTQRYdlvTSBxEZxWvjznigkU+6skYD
G7892P0llottiDJ2jYJQCBWedWnJeAhBVyMxuIbg3WxbKWXhMPX+lbORaLbbfte2G0IvCIzTuNbW
IDjRs6n2ApJspHE79oAMH12x+ZwXG8YoR/TVcU2/ab4OwCNks0/hf39Sos3z0cyshs1vHDXZa6Ol
K/M6yhWGrvdYrQvUEiK3n0yiKEHgqgDZ2FQY3qP5fCHKrxcHobs2lui9qojS/3oSWAyiwU8x5KV1
kThvTOngFR2qNz2pLIaiKDnpzdvLGUKj+/mrNsTiUMc0SVqTZOyXue8U24L9fTPnCDU/5RHOg09E
u2yc+/1SajlfZJDjDkRgirSlAtvEKnGdW9UbCCSZ9ULLEjrtxs+x/QSDNvOYFsMXUxbiRNYwJyBw
t6D3AOKCGPeeHTYDKpDDx6hA1D2Fou7zcTbgDgTrPm7I1cs2GPA96cS6HGDnZQM7hyBaek6bXzok
6ImNBIUvtXIWAKr1H3EnFSp6DBjvpEYmKwrWaSgUlS6Qty0TrQ28A/xOa1mK6k4j1tI8UDrH77hN
LeOkvfQwA54Abwm/Si0Vvlab2eGXSnLIHc+8GrCSQBMNTSpPV1bsN5V4qieLx/Vvc1omuLbLi8Y3
xpic989jgDRL5zeIvmY6OzMdHbKalb5NOpaRYq0CAwEAATANBgkqhkiG9w0BAQUFAAOBgQC0UDjU
88yMyA6XoyjXHD+06zgNJfPXpDd5tPWFjoftXq6uAdK1hzpDbXSLh5h1M/egJBF4hGcODfVXE3da
Ub/jX61NRAGxNSCXRBBmhA8+opLtyYVVcNtMbPNRr2oohxgwsltKnRPdWi2CAk9ThhVv8+k+yvc4
zAUlfrBj632CUw==</X509Certificate></X509Data></KeyInfo></Signature></saml2p:AuthnRequest>]]></con:value></con:property><con:property><con:name>sName</con:name><con:value>DelegationTokenCreate_EmailBased</con:value></con:property><con:property><con:name>subject</con:name><con:value>rteja29@uvvutesting.biz</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_001_DTCreate_UnVerified_RTL_User_created_by_node_LLASP</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:token:DelegationTokenRequest</con:value></con:property><con:property><con:name>unSignedAuthnRequest</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:AuthnRequest xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" AssertionConsumerServiceURL="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/C0CEF8E08CE1C7D6E0401F0A0599120B" Destination="https://qa.s.uvvu.com:7001/security/delegation/saml/loginservice/login" ForceAuthn="true" ID="10bdc759-f72b-439c-833b-d0de152ce82a" IssueInstant="2014-03-25T10:56:08.04Z" ProtocolBinding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Version="2.0"><saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:RET</saml2:Issuer><saml2p:NameIDPolicy AllowCreate="true" Format="urn:oasis:names:tc:SAML:2.0:nameid-format:transient"/><saml2p:Extensions><ns4:PolicyList xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"><ns4:Policy><ns4:PolicyClass>urn:dece:type:policy:UserLinkConsent</ns4:PolicyClass></ns4:Policy></ns4:PolicyList></saml2p:Extensions><saml2:Conditions xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Subject xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">rteja29@uvvutesting.biz</saml2:NameID></saml2:Subject></saml2p:AuthnRequest>]]></con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1395759350392</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value>40C15D08DB9F44109CF54F449481F9A8</con:value></con:property><con:property><con:name>UUID</con:name><con:value>10bdc759-f72b-439c-833b-d0de152ce82a</con:value></con:property><con:property><con:name>z_resultNodeUserRowCount</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ca40557e-002f-42ba-a0fd-470051fc8b75</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07f805a5-22a5-411d-9c98-72b32712408f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f2c3ad04-b40d-4097-81fc-3cb095d52d65</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d0121006-d942-4dbb-9e17-82e85ad23bdd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>19aedfa5-e2f2-471d-878d-bb664803ec08</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1dcf3e5e-2ed0-47fa-aa2e-5f953a537bd5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DelegationTokenCreate" searchProperties="true" id="420a6ecd-4647-4f58-b622-eea233e7ecbf"><con:settings/><con:testStep type="groovy" name="Establish_TestCase_Properties" id="a46edafc-07e1-4289-bdac-c268589d661b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();

tC.setPropertyValue("Username", null);
tC.setPropertyValue("PrimaryEmail", null);
tC.setPropertyValue("responsetype", null);
tC.setPropertyValue("tokentype", null);
tC.setPropertyValue("audienceList", null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", null);
tC.setPropertyValue("NODE_ID", null);
tC.setPropertyValue("NODE_OID", null);
tC.setPropertyValue("jksFile", null);
tC.setPropertyValue("assertionUUID", null);
tC.setPropertyValue("expectCreateExpireHoursDiff", null);
tC.setPropertyValue("USER_OID", null);
tC.setPropertyValue("ACCOUNT_OID", null);
tC.setPropertyValue("unSignedAuthnRequest", null);
tC.setPropertyValue("signedAuthnRequest", null);
tC.setPropertyValue("base64EncodedSignedAuthnRequest", null);
tC.setPropertyValue("UUID", null);
tC.setPropertyValue("expectErrType",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionUUIDprior",null);
tC.setPropertyValue("expectNodeUserRowCount",null);
tC.setPropertyValue("audienceIgnoreNodes",null);
tC.setPropertyValue("audienceIgnoreAll",null);
tC.setPropertyValue("actionSkipPolicyCheck",null);





</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="805a6f05-909f-4218-a6bd-e1eaaa9feb58"><con:settings/><con:config><script>import urlFunctions.urlFunctions;
import java.net.URLEncoder; 

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

myURLFunctions = new URLEncoder();

if(tP.getPropertyValue("versionMinor")!=tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("subject", callTC.getPropertyValue("PrimaryEmail"));
	tC.setPropertyValue("responseType", callTC.getPropertyValue("responseType"));
	tC.setPropertyValue("tokenType", callTC.getPropertyValue("tokenType"));
	tC.setPropertyValue("audienceList", callTC.getPropertyValue("audienceList"));
}
else
{
	tC.setPropertyValue("subject", myURLFunctions.encode(callTC.getPropertyValue("PrimaryEmail")));
	tC.setPropertyValue("responseType", myURLFunctions.encode(callTC.getPropertyValue("responsetype")));
	tC.setPropertyValue("tokenType", myURLFunctions.encode(callTC.getPropertyValue("tokentype")));
	tC.setPropertyValue("audienceList", myURLFunctions.encode(callTC.getPropertyValue("audienceList")));
}

tC.setPropertyValue("affiliationList", callTC.getPropertyValue("affiliationList"));
tC.setPropertyValue("policyList", callTC.getPropertyValue("policyList"));
tC.setPropertyValue("NODE_ID", callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("expectCreateExpireHoursDiff", callTC.getPropertyValue("expectCreateExpireHoursDiff"));
tC.setPropertyValue("USER_OID", callTC.getPropertyValue("USER_OID"));
tC.setPropertyValue("ACCOUNT_OID", callTC.getPropertyValue("ACCOUNT_OID"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));
tC.setPropertyValue("assertionUUIDprior",callTC.getPropertyValue("assertionUUIDprior"));
tC.setPropertyValue("Username", callTC.getPropertyValue("Username"));
tC.setPropertyValue("expectNodeUserRowCount",callTC.getPropertyValue("expectNodeUserRowCount"));
tC.setPropertyValue("audienceIgnoreNodes",callTC.getPropertyValue("audienceIgnoreNodes"));
tC.setPropertyValue("audienceIgnoreAll",callTC.getPropertyValue("audienceIgnoreAll"));
tC.setPropertyValue("actionSkipPolicyCheck",callTC.getPropertyValue("actionSkipPolicyCheck"));

if (tC.getPropertyValue("expectNodeUserRowCount") == null ||
	tC.getPropertyValue("expectNodeUserRowCount") == "") {
		tC.setPropertyValue("expectNodeUserRowCount","0");
}

if (tC.getPropertyValue("audienceIgnoreAll") == null ||
	tC.getPropertyValue("audienceIgnoreAll") == 'null') {
		tC.setPropertyValue("audienceIgnoreAll","false");
}

if (tC.getPropertyValue("audienceIgnoreAll") == null ||
	tC.getPropertyValue("audienceIgnoreAll") == 'null') {
		tC.setPropertyValue("audienceIgnoreAll","false");
}

if (tC.getPropertyValue("actionSkipPolicyCheck") == null ||
	tC.getPropertyValue("actionSkipPolicyCheck") == 'null') {
		tC.setPropertyValue("actionSkipPolicyCheck","false");
}

		

</script></con:config></con:testStep><con:testStep type="groovy" name="Set NODE_OID value based on NODE_ID" id="6ccb115e-ce47-4bc1-9653-95ec3d94fc02"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def targetSystem = context.expand( '${#Project#targetSystem}' )

a = new dbUtils.dbUtils(log,targetSystem);

def nodeid = testProject.getPropertyValue("urnNode")+testCase.getPropertyValue("NODE_ID");

def sql = """SELECT to_char(rawtohex(NODE_OID)) NODE_OID FROM NODE where NODE_ID = '""" + nodeid +"""'""";

def node_oid= a.SelectFromDB(sql,targetSystem);
def myXML = new XmlSlurper().parseText(node_oid);
def NODE_OID = myXML.ResultSet.Row.NODE_OID[0].text();

log.info "nodeoid:  "+NODE_OID;
testCase.setPropertyValue("NODE_OID",NODE_OID);</script></con:config></con:testStep><con:testStep type="groovy" name="Compute expected audience list" id="c5f19004-91a7-477b-bf5e-d776b20f69ef">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("affiliationList",null);

String affiliates = "";
int i = 0;
def urnNode = context.expand( '${#Project#urnNode}' )

/*
*  Construct the expected Affiliation list
*/
def affiliationList = [urnNode+tC.getPropertyValue("NODE_ID").toString()];
def ignoreNodesList = [];
def audienceList = [];



	
log.info "audienceList: "+tC.getPropertyValue("audienceList");
if (tC.getPropertyValue("audienceList") != null) 
{
	audienceList = tC.getPropertyValue("audienceList").toString().tokenize(";");
}
		
if (audienceList.size() >= 1 &amp;&amp; tC.getPropertyValue("audienceList") != null)
{
	log.info "DEBUG: Adding audienceList";
	affiliationList.addAll(audienceList);
}
	log.info "DEBUG: affiliationList size is " + affiliationList.size();
	affiliationList.each {
		log.info "DEBUG afflicationList Member: " + it;
		affiliates += it;

		i++;
		
		if (i != affiliationList.size()) {
			affiliates += ";";
		}
	}

	tC.setPropertyValue("affiliationList",affiliates);

	log.info "affiliationList[" + tC.getPropertyValue("affiliationList") + "]";

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Establish AuthnRequest Body" id="62e58915-18d0-4f17-9a18-b18c5453af7f"><con:settings/><con:config><script>import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import urlFunctions.urlFunctions;
import java.net.URLDecoder; 

import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String saml2pNS = "urn:oasis:names:tc:SAML:2.0:protocol";
String saml2NS = "urn:oasis:names:tc:SAML:2.0:assertion";
String mdNS = "urn:oasis:names:tc:SAML:2.0:metadata";
String deceNS = context.expand( '${#Project#coordinatorSchema}' )
String saml2pPrefix = "saml2p";
String saml2Prefix = "saml2";
String mdPrefix = "md";
String decePrefix = "dece";

String versionMajor = tP.getPropertyValue("versionMajor");
String versionMinor = tP.getPropertyValue("versionMinor");
//String destination = "https://qa.p.uvvu.com:7001/rest/" + versionMajor + "/" + versionMinor + "/loginservice/login";
String destination = "https://qa1.s.uvvu.com/security/delegation/saml/loginservice/login";
String assertionConsumerServiceURL = "https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/" + tC.getPropertyValue("NODE_OID");

String PrimaryEmail = tC.getPropertyValue("subject");

DateFormat ymd = new SimpleDateFormat("yyyy-MM-dd");
Date date = new Date();
String ymdTime = ymd.format(date);
DateFormat hms = new SimpleDateFormat("HH:mm:ss.FF");
String hmsTime = hms.format(date);

String issueInstant = ymdTime + "T" + hmsTime + "Z";

String issuerNode = tP.getPropertyValue("urnNode")+tC.getPropertyValue("NODE_ID");

String uuid = UUID.randomUUID().toString();
tC.setPropertyValue("UUID", uuid);

String protocolBinding = "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST";

DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder parser = docFactory.newDocumentBuilder();
doc = parser.newDocument();

root = doc.createElementNS(saml2pNS, saml2pPrefix + ":AuthnRequest");
root.setAttribute("ID", uuid);
root.setAttribute("IssueInstant", issueInstant);
root.setAttribute("Version", "2.0");
root.setAttribute("Destination", destination);
root.setAttribute("AssertionConsumerServiceURL", assertionConsumerServiceURL);
root.setAttribute("ForceAuthn", "true");
root.setAttribute("ProtocolBinding", protocolBinding);

doc.appendChild(root);
	
issuer = doc.createElementNS(saml2NS, saml2Prefix + ":Issuer");
Text textIssuer = doc.createTextNode(issuerNode);
issuer.appendChild(textIssuer);

root.appendChild(issuer);

nameid = doc.createElementNS(saml2pNS, saml2pPrefix + ":NameIDPolicy"); 
nameid.setAttribute("Format","urn:oasis:names:tc:SAML:2.0:nameid-format:transient");
nameid.setAttribute("AllowCreate","true");

root.appendChild(nameid);

if (tC.getPropertyValue("policyList") != "")
{
extensions = doc.createElementNS(saml2pNS,saml2pPrefix + ':Extensions');
policyList = doc.createElementNS(deceNS, 'ns4:PolicyList');

this.log.info tC.getPropertyValue("policyList");

policyArray = tC.getPropertyValue("policyList").split(",");
for (policyStr in policyArray) 
{
	policy = doc.createElementNS(deceNS, 'ns4:Policy');
	policyClass = doc.createElementNS(deceNS, 'ns4:PolicyClass');
	Text textPolicyClass = doc.createTextNode(policyStr);
	policyClass.appendChild(textPolicyClass);
	policy.appendChild(policyClass);
	policyList.appendChild(policy);
}

extensions.appendChild(policyList);
root.appendChild(extensions);
}

conditions = doc.createElementNS(saml2NS, saml2Prefix + ":Conditions");
audienceRestriction = doc.createElementNS(saml2NS, saml2Prefix + ":AudienceRestriction");

myURLFunctions = new URLDecoder();
log.info tC.getPropertyValue("affiliationList")+"#########";
affiliateArray = myURLFunctions.decode(tC.getPropertyValue("affiliationList")).split(";");
for (audienceMember in affiliateArray) 
{
	audience = doc.createElementNS(saml2NS, saml2Prefix + ":Audience");
	Text textAudience = doc.createTextNode(audienceMember);
	audience.appendChild(textAudience);
	audienceRestriction.appendChild(audience);	
}

conditions.appendChild(audienceRestriction);

root.appendChild(conditions);

subject = doc.createElementNS(saml2NS, saml2Prefix + ":Subject");
nameid1 = doc.createElementNS(saml2NS, saml2Prefix + ":NameID");
nameid1.setAttribute("Format","urn:oasis:names:tc:SAML:2.0:nameid-format:persistent");
Text textEmail = doc.createTextNode(PrimaryEmail);

nameid1.appendChild(textEmail);
subject.appendChild(nameid1);

root.appendChild(subject);



//&lt;saml2:Subject xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">&lt;saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">shikha82@uvvutesting.biz&lt;/saml2:NameID>&lt;/saml2:Subject>

TransformerFactory factory = TransformerFactory.newInstance();
Transformer transformer = factory.newTransformer();
StringWriter writer = new StringWriter();
Result result = new StreamResult(writer);
Source source = new DOMSource(doc);
transformer.transform(source, result);
writer.close();
String unSignedAuthnRequest = writer.toString();

log.info unSignedAuthnRequest;
tC.setPropertyValue("unSignedAuthnRequest", unSignedAuthnRequest);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_JKSFile" id="be6f11fe-1c3d-4d67-9a25-536ffa45eb4a"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import org.apache.commons.lang.SystemUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def eNV = context.expand( '${#Project#ENV}' )

def propertiesPath = null;

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows OS!!";
    		File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
    		propertiesPath = temp.getCanonicalPath();
	} 
else 
	{
    		log.info "it's Linux OS!!";
    		File temp = new File(projectPath + "/../../../Properties/");
    		propertiesPath = temp.getCanonicalPath();
	}
	
log.info("Properties File Location : '" + propertiesPath+ "'");




def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));

String line;
while ((line = reader.readLine()) != null)
      {
	       if (line.trim().length()==0) continue;
	       if (line.charAt(0)=='#') continue;
	
	       int delimPosition = line.indexOf("=");
	       String key = line.substring(0, delimPosition-0).trim();
	       String value = line.substring(delimPosition+1).trim();
	       propMap.put(key, value);
      }


if (System.properties['os.name'].toLowerCase().contains('windows')) 
      {
            log.info "it's Windows OS!!!";
            File temp = new File( projectPath + "\\..\\..\\..\\Certs\\" + eNV + "\\");
    		  certPath = temp.getCanonicalPath();      
      } 
else 
      {
            log.info "it's Linux OS!!!";
            File temp = new File(projectPath + "/../../../Certs/" + eNV + "/");
    		  certPath = temp.getCanonicalPath();
      }  
      
 log.info("Cert path: " + certPath );  
                  
def nodeId = context.expand( '${#TestCase#node_id}' )

log.info "nodeId: "+nodeId;

 if (nodeId == "dece:cs")
       {
             nodeId = "dececs";
       }
 else if (nodeId == "coord:cs")
       {
             nodeId = "coordcs";
       }
 else
       {
             nodeId = nodeId;
       }


//log.info "~~~~~~~~~~~~" +nodeId
boolean imFine = true;
def pwd = null;
def certMatchesNodeID = context.expand( '${#Project#CertMatchesNodeID}' )
log.info("CertMatchesNodeID : '" + certMatchesNodeID + "'");
if (certMatchesNodeID == "YES")
{
		File f2 = new File(certPath+"/"+nodeId + ".jks");
		File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");

		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
	
	// sets the certificate from the specific folder when the certname and NodeId are same
	if(f2.exists())
             {
                  	keyStorePath = certPath+"/"+nodeId + ".jks";
                   	pwd = "abcd1234" 
                   	log.info("F2 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");          
             }
	  else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
                   	pwd = "12elma";
				log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
             }
	  else
             {
                  	log.info "No cert file is Found!!!";
                  	imFine = false;
             }
}
else
{
	//to get the certificate name from another property based on the nodeid property.
		
	
       def value = propMap.find{ it.value == nodeId }?.key
       def certName = testProject.getPropertyValue(value+"_cert");       
       log.info "cert name .... " + certName;

		File f2 = new File(certPath+"/"+certName + ".jks");
		File f3 = new File(certPath+"/truststore-"+certName + ".jks");

		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		     
       if(f2.exists())
             {
				keyStorePath = certPath+"/"+certName + ".jks";
				pwd = "abcd1234";
				log.info("F2 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");           
             }
       else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+certName + ".jks";
                   	pwd = "abcd1234";
                   	log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
                   	         
             }
       else
			{
			log.info "No cert file is Found!!!";
			imFine = false;
			}                             
}


if(imFine)
{

}


log.info "jksFilePath:"+keyStorePath;

testCase.setPropertyValue("jksFile", keyStorePath);

assert imFine == true;
</script></con:config></con:testStep><con:testStep type="groovy" name="Create XML Signature" id="527e1556-2cec-443d-8b8d-b1af9e3c2b0b"><con:settings/><con:config><script>import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.util.Collections;
import java.lang.Object;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import javax.xml.transform.*;
import java.security.cert.X509Certificate;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import java.nio.channels.FileChannel;

import javax.xml.crypto.Data;
import javax.xml.crypto.MarshalException;
import javax.xml.crypto.NoSuchMechanismException;
import javax.xml.crypto.URIDereferencer;
import javax.xml.crypto.XMLStructure;
import javax.xml.crypto.dom.DOMStructure;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;
import javax.xml.crypto.dsig.spec.*;
import javax.xml.crypto.dsig.keyinfo.*;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.XMLDSigSecurity;
import javax.xml.crypto.dsig.XMLObject;
import javax.xml.crypto.dsig.XMLSignContext;
import javax.xml.crypto.dsig.XMLSignature;
import javax.xml.crypto.dsig.XMLSignatureException;
import javax.xml.crypto.dsig.XMLSignatureFactory;
import javax.xml.crypto.dsig.XMLValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.dom.DOMValidateContext;

import javax.xml.crypto.dsig.*;

import org.opensaml.xml.security.x509.BasicX509Credential;
import org.opensaml.xml.*;
import org.opensaml.xml.signature.impl.*;
import org.opensaml.xml.signature.Signature;
import org.opensaml.xml.signature.SignatureConstants;
import org.opensaml.xml.security.x509.*;
import java.security.cert.*;

import javax.xml.namespace.QName;
import org.xml.sax.InputSource;

import java.security.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def JKSAliasName=tP.getPropertyValue("JKSAliasName");
def JKSPassword=tP.getPropertyValue("JKSPassword");

String saml2pNS = "urn:oasis:names:tc:SAML:2.0:protocol";
String saml2NS = "urn:oasis:names:tc:SAML:2.0:assertion";
String saml2pPrefix = "saml2p";
String saml2Prefix = "saml2";

String jksFile  = tC.getPropertyValue("jksFile");
String uuid = "#" + tC.getPropertyValue("UUID");

// Create a DOM XMLSignatureFactory that will be used to generate the enveloped signature.
XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM");

// Create a Reference to the enveloped document (in this case,
// you are signing the whole document, so a URI of "" signifies
// that, and also specify the SHA1 digest algorithm and
// the ENVELOPED Transform.
Reference ref = fac.newReference("", fac.newDigestMethod(DigestMethod.SHA1, null),  Collections.singletonList(fac.newTransform (Transform.ENVELOPED, (TransformParameterSpec) null)), null, null);

// Create the SignedInfo.
SignedInfo si = fac.newSignedInfo(fac.newCanonicalizationMethod(CanonicalizationMethod.INCLUSIVE,(C14NMethodParameterSpec) null), fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null), Collections.singletonList(ref));

// Load the KeyStore and get the signing key and certificate.
KeyStore ks = KeyStore.getInstance("JKS");
ks.load(new FileInputStream(jksFile), JKSPassword.toCharArray());
KeyStore.PrivateKeyEntry keyEntry = (KeyStore.PrivateKeyEntry) ks.getEntry(JKSAliasName, new KeyStore.PasswordProtection(JKSPassword.toCharArray()));
X509Certificate cert = (X509Certificate) keyEntry.getCertificate();

// Create the KeyInfo containing the X509Data.
KeyInfoFactory kif = fac.getKeyInfoFactory();
List x509Content = new ArrayList();
x509Content.add(cert.getSubjectX500Principal().getName());
x509Content.add(cert);
X509Data xd = kif.newX509Data(x509Content);
KeyInfo  ki = kif.newKeyInfo(Collections.singletonList(xd));

String unSignedAuthnRequest  = tC.getPropertyValue("unSignedAuthnRequest");

// Instantiate the document to be signed.
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setNamespaceAware(true);
//dbf.setSchema(schema);
Document doc = dbf.newDocumentBuilder().parse(new InputSource(new ByteArrayInputStream(unSignedAuthnRequest.getBytes("utf-8"))));

// Create a DOMSignContext and specify the RSA PrivateKey and
// location of the resulting XMLSignature's parent element.
DOMSignContext dsc = new DOMSignContext(keyEntry.getPrivateKey(), doc.getDocumentElement());

// Create the XMLSignature, but don't sign it yet.
XMLSignature signature = fac.newXMLSignature(si, ki);

// Marshal, generate, and sign the enveloped signature.

try
{
	signature.sign(dsc);
}catch(Exception ex){
	log.info "Fatal-------";
	log.info ex
	log.info ("-------");
}

TransformerFactory factory = TransformerFactory.newInstance();
Transformer transformer = factory.newTransformer();
StringWriter writer = new StringWriter();
Result result = new StreamResult(writer);
Source source = new DOMSource(doc);
transformer.transform(source, result);
writer.close();
String signedAuthnRequest = writer.toString();

log.info signedAuthnRequest;
tC.setPropertyValue("signedAuthnRequest", signedAuthnRequest);</script></con:config></con:testStep><con:testStep type="groovy" name="Base64 Encode the Signed AuthnRequest xml" id="b00af2ea-b901-435f-8dea-58c9a968b18a"><con:settings/><con:config><script>import urlFunctions.urlFunctions;
import java.net.URLEncoder; 

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

myURLFunctions = new urlFunctions(log);
String signedAuthnRequest  = tC.getPropertyValue("signedAuthnRequest");
String base64EncodedSignedAuthnRequest = myURLFunctions.urlEncode(myURLFunctions.base64Encode(signedAuthnRequest));
//String base64EncodedSignedAuthnRequest = myURLFunctions.base64Encode(signedAuthnRequest);

tC.setPropertyValue("base64EncodedSignedAuthnRequest", base64EncodedSignedAuthnRequest);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Set PEM" id="8c1eed29-bfe4-4437-a2fb-d0e45456c43b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem");
myTC.setPropertyValue("NODE_ID",tC.getPropertyValue("NODE_ID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserValidationTokenCreate_DST");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserValidationTokenCreate_DST" id="b7979154-2b52-417d-a33f-b2df54d14279"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/VerificationToken/${#TestCase#tokenType}?subject=${#TestCase#subject}&amp;responseType=${#TestCase#responseType}" methodName="UserValidationTokenCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserValidationTokenCreate_DST" mediaType="application/x-www-form-urlencoded" postQueryString="false" sslKeystore="RET_concat.pem" accept="" timeout="44000" id="dab21909-3b68-46c4-b3ec-766cf00b4baf"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request>SAMLRequest=${#TestCase#base64EncodedSignedAuthnRequest}</con:request><con:originalUri>https://qa1.p.uvvu.com/rest/1/11/VerificationToken/urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:originalUri><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Headers and Body" id="b442bf93-265c-4e32-ad9e-5ad8cb2b45fc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserValidationTokenCreate_DST');
def expBody = tStep.httpRequest.response.getResponseContent();


tC.setPropertyValue("httpBody", null);
tC.setPropertyValue("httpStatus", null);
tC.setPropertyValue("httpConnect", null);
tC.setPropertyValue("httpContentType", null);
tC.setPropertyValue("httpContentLength", null);
tC.setPropertyValue("httpContentLocation", null);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String Location = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			Location = value[0];
			break;
		case "Content-Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("httpBody", expBody);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", Location);

this.log.info Location;


</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="a43280ca-515b-43e9-ac7a-67449ec4aa10"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject(); 
def errorRespType = context.expand( '${#TestCase#expectErrType}' );
log.info 'errorRespType=='+errorRespType
def XMLbody   = context.expand( '${#TestCase#httpBody}');
log.info 'XMLbody=='+XMLbody

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
//String orgRequest = url + "/merc_api/merc-service/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;

if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		log.info "We are in SUCCESS Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		break;	
	
	case "UserIdNotFound":

		expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID = "urn:dece:errorid:org:dece:UserIdentifierNotFound"
		errorReason = "The user ID was not found.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierNotFound";
		XMLbodynull        = false;
		httpLocationHeader = false;
		break;

	
	case "UserIdNotValid":
		
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:UserIdentifierNotValid"
		errorReason = "The email address in request does not identify a unique user and therefore not valid.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierNotValid";
		expectHTTPconnection = "close"
		XMLbodynull        = false;
		httpLocationHeader = false;
		break;

	case "ResponseTypeNotValid":
		
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SecurityTokenResponseTypeNotValid"
		errorReason = "The security token response type is not valid.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SecurityTokenResponseTypeNotValid";
		expectHTTPconnection = "close"
		XMLbodynull        = false;
		httpLocationHeader = false;
		break;

	case "TokenTypeNotValid":
		
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:TokenTypeNotValid"
		errorReason = "The token type is not valid";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#TokenTypeNotValid";
		expectHTTPconnection = "close"
		XMLbodynull        = false;
		httpLocationHeader = false;
		break;

	case "UserIdRequired":
		
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:UserIdentifierRequired"
		errorReason = "A user ID is required.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierRequired";
		expectHTTPconnection = "close"
		XMLbodynull        = false;
		httpLocationHeader = false;
		break;

	case "UserNotActive":

		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:UserNotActive"
		errorReason = "The member is not active.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
		XMLbodynull        = false;
		httpLocationHeader = false;
		break;

	case "LinkedLaspBindingAccessPermissionDenied":

		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:LinkedLaspBindingAccessPermissionDenied"
		errorReason = "The user does not have sufficient privilege to bind Linked LASP with his/her account.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LinkedLaspBindingAccessPermissionDenied";
		XMLbodynull        = false;
		httpLocationHeader = false;
		break;

	case "LinkedLaspAccountBindingLimitReached":

		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:LinkedLaspAccountBindingLimitReached"
		errorReason = "The maximum number of active bindings allowed has been reached.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LinkedLaspAccountBindingLimitReached";
		XMLbodynull        = false;
		httpLocationHeader = false;
		break;

	case "FORBIDDEN:1123":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The request is not authorized.";
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1123";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#forbidden:1123";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;

	case "ValidationTokenRetryLimitReached":
	
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The maximum number of validation token requests allowed for the member has been reached.";
		errorID = "urn:dece:errorid:org:dece:ValidationTokenRetryLimitReached";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ValidationTokenRetryLimitReached";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;

	case "RoleInvalid":
	
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The API call is not authorized.";
		errorID = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;

	break;
	

	case "FORBIDDEN:1123":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The request is not authorized.";
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1123";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;

	case "NODE_STATUS_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request"
		errorReason = "The request is not valid.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html";
	break;


	case "FORBIDDEN_INVALID_USER_STATUS":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The request is not authorized.";
		errorID="urn:dece:errorid:org:dece:securitycontext:InvalidUserStatus";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN:1119":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The request is not authorized.";
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1119";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;

	case "unauthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		XMLbodynull        = false;
		httpLocationHeader = false;
		errorID = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorReason = "The request is not authorized.";
		break;
	
	case "token_rejected":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		XMLbodynull        = false;
		httpLocationHeader = false;
		errorID = "urn:dece:errorid:org:dece:securitycontext:"+expectErrType;
		errorReason = "The request is not authorized.";
		break;

	case "FORBIDDEN_INVALID_ROLE":
		errorReason = "The request is not authorized.";
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1120";
		XMLbodynull        = false;
		httpLocationHeader = false;
		log.info ' in forbidden case';
	break;
	case "NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		XMLbodynull        = true;
		httpLocationHeader = false;
		expectHTTPcontenttype = "text/xml;charset=UTF-8";
	break;
	default:
		log.info 'In Default Case'		;
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
log.info 'XMLbodynull ' +XMLbodynull;
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpContentLocation}') != null;
	
	def a = context.expand( '${#TestCase#httpContentLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}
	
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	assertionUUID     = urlStr.substring(lastSlash + 1);
	
	tC.setPropertyValue("assertionUUID", assertionUUID);
	callTC.setPropertyValue("assertionUUID", assertionUUID);	 		  
		
	} else {
		
		assert context.expand( '${#TestCase#httpLocation}') == "";
}





//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info "expected"+errorLink;
		log.info "actual"+myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION row count" id="ff406f67-3571-403e-bb8e-ecb15438e4e8">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

int uuidcnt = 0;

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {

		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

		String uuid = tC.getPropertyValue("httpContentLocation").toString();

		/*
		*  Assert we have a location header value..
		*/
		assert uuid.length() > 1;

		/*
		*  Verify the value is a URL
		*/
		def lurl = uuid.toURL();
		def urlStr = lurl.getPath();

		int lastSlash = urlStr.lastIndexOf('/');

		/*
		*  Pull just the assertion UUID from the URL
		*/
		String assertionUUID = urlStr.substring(lastSlash + 1);

		log.info "assertionUUID [$assertionUUID]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		assert dbUtils.samlGetUUIDNodeAssertionRowCount(assertionUUID) == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION prior assertion removed" id="3f11a0c1-20b5-42be-a169-2f001c4f2d90">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String tokentype = tC.getPropertyValue("tokentype").toString();
String assertionUUIDprior = tC.getPropertyValue("assertionUUIDprior").toString();

int uuidcnt = 0;

if (tC.getPropertyValue("expectErrType") == "SUCCESS" &amp;&amp;  tC.getPropertyValue("assertionUUIDprior").toString() !="null" ) {
    
	assert assertionUUIDprior.length() > 4;
	
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  There should only be on NODE_USER_SAML_ASSERTION row 
		*  with this UUID after API invocation
		*/
		assert dbUtils.samlGetUUIDNodeAssertionRowCount(assertionUUIDprior) == 0;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION STATUS, NODE_OID" id="8b5e2eb1-71bd-4920-add9-7c73a24c3b57">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;
def myXML;

tC.setPropertyValue("assertionROW",null);

String arow = "";
String NODE_ID = tC.getPropertyValue("NODE_ID").toString();
String NODE_OID = tC.getPropertyValue("NODE_OID").toString();

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	/*
	*  Device Node ID override.  All devices are 0200 in 
	*  QA so if the nodeID received is one of our defined
	*  devices change the setting for validation 
	*  purposes.
	*/
	/*log.info "NODE_ID: "+NODE_ID;
	switch (NODE_ID) {
		
		case tP.getPropertyValue("nodeIdDEV").toString():
			NODE_OID = deviceNodeID;
			log.info "NODE_OID:"+NODE_OID;
			break;
	}*/
	
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		String uuid = tC.getPropertyValue("httpContentLocation").toString();
		
		/*
		*  Assert we have a location header value..
		*/
		assert uuid.length() > 1;

		/*
		*  Verify the value is a URL
		*/
		def lurl = uuid.toURL();
		def urlStr = lurl.getPath();

		int lastSlash = urlStr.lastIndexOf('/');

		/*
		*  Pull just the assertion UUID from the URL
		*/
		String assertionUUID = urlStr.substring(lastSlash + 1);

		log.info "assertionUUID [$assertionUUID]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		arow = dbUtils.samlGetAssertionRow(assertionUUID);

		assert arow.length() > 0;

		log.info "arow is [$arow]";

		tC.setPropertyValue("assertionROW",arow);
	}

	/*
	*  Parse the XML
	*/
	try {
		myXML = new XmlSlurper().parseText(arow);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify only one row was returned..
		*/
		log.info "ASSERT - Row Size is 1";
		assert myXML.ResultSet.Row.size() == 1;

		/*
		*  Verify NODE_USER_SAML_ASSERTION.STATUS is active
		*/
		log.info "ASSERT - STATUS is active";
		assert myXML.ResultSet.Row.STATUS.text() == "active";

		/*
		*  Verify NODE_USER_SAML_ASSERTION.NODE_ID
		*/
		log.info "ASSERT - NODE_OID Expect[$NODE_OID] Received[" +
		myXML.ResultSet.Row.NODE_OID.text() + "]";
		assert myXML.ResultSet.Row.NODE_OID.text() == NODE_OID;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION.EXPIRATION" disabled="true" id="ca607f6e-bf32-478f-ab18-0d3cf7542f53">
        <con:settings/>
        <con:config><script><![CDATA[import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def a;



if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	int expectTime = tC.getPropertyValue("expectCreateExpireHoursDiff").toInteger();
	log.info expectTime+'++++++++++++++++++++++++++++';
	String uname = tC.getPropertyValue("assertionUUID").toString().trim();
	String sys = tP.getPropertyValue("targetSystem").toString();
	String results = "";
	String secs = "";

	String sql = """SELECT (extract(DAY FROM EXPIRATION_DATE - CREATED_DATE)*24) 
		as HOURS FROM NODE_USER_SAML_ASSERTION where NODE_USER_SAML_UUID = '$uname'
	""";

	log.info sql;

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		results = a.SelectFromDB(sql,sys);
		log.info results;
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbUtils - $e"; 
		assert 1 == 2;
	}
	finally {
		try {
			def myXML = new XmlSlurper().parseText(results);
			assert myXML.ResultSet.Row.size() == 1;
			results = myXML.ResultSet.Row[0].HOURS
		}
		catch (Throwable e) {
			log.info "ERROR - XmlSlurper - $e";
			assert 1 == 2;
		} 
		finally {
			/*
			*  There is sometype of bug in oracle where it, at times, screws 
			*  update the date diff up to 24 hours.
			*/
						
			log.info "Expect[$expectTime] - Received[" +  results.toInteger() + "]";
			//assert (results.toInteger() == expectTime);
			//assert (results.toInteger() <= expectTime + 06 && results.toInteger() >= expectTime - 06);
			assert (results.toInteger() <= expectTime + 24 && results.toInteger() >= expectTime - 24);
		}
	}
}]]></script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION.NODE_USER_SAML_ASSERTION" id="f354efc0-f577-41ed-bb58-ebad101bd148">
        <con:settings/>
        <con:config><script><![CDATA[/*
*  VALIDATIONS PERFORMED
*
*  saml2p:StatusCode == urn:oasis:names:tc:SAML:2.0:status:Success
*
*  <saml2:Issuer> == Project.Property("samlIssuer") (http://c.decellc.com/)
*
*  <saml2:AuthenticatingAuthority> == Project.Property("samlAuthenticatingAuthority") 
*	(urn:dece:org:neustar:coordinator)
*
*  <AudienceRestriction>
*	Verifications include insuring the size of the <AudienceRestriction> matches
*	the number of nodes expected.
*
*	For DEVICES this check will verify NO audience members are included.
*
*	Also verification of the nodes used in assertion creation/affiliation via
*	the STS call are contained within the <AudienceRestriction> node
*/
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def dbUtils;
def dbUtilsUser;
//int stsaudienceSize = 1;   Start at one as entity nodes is in audience
tC.setPropertyValue("computedAssertionXML",null);
tC.setPropertyValue("dbassertionNodeaccountid",null);
tC.setPropertyValue("dbassertionNodeuserid",null);

String assertionXML = "";
String arow = tC.getPropertyValue("assertionROW");
String[] affiliates;

int ignoreNodesSize = 0;
int audienceSize = 0;
def affiliationList = [];
def ignoreNodesList = [];

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	
	
	log.info tC.getPropertyValue("affiliationList").toString() ;
	if (tC.getPropertyValue("affiliationList").toString() != null)
	{
		affiliationList = tC.getPropertyValue("affiliationList").toString().tokenize(";");
		log.info "affiliationList size is " + affiliationList.size();
		audienceSize = affiliationList.size();
	}
	
	log.info tC.getPropertyValue("audienceIgnoreNodes").toString();
	if (tC.getPropertyValue("audienceIgnoreNodes").toString() != 'null')
	{
		ignoreNodesList = tC.getPropertyValue("audienceIgnoreNodes").toString().tokenize(";");
		log.info "ignoreNodesList size is " + ignoreNodesList.size();
		ignoreNodesSize = ignoreNodesList.size();
	}
	
	
	audienceSize -= ignoreNodesSize; 	

	log.info "audience size"+audienceSize
	/*
	*  Make sure we have data in arow
	*/
	assert arow.length() > 1;

	/*
	*  Get a handle for the saml class.
	*/
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	
	try {
		myXML = new XmlSlurper().parseText(arow);
		log.info 'myXML----------->'+myXML
		log.info 'size------->'+myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".size()
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify only one row was returned..
		*/
		log.info "ASSERT - Row Size is 1";
		assert myXML.ResultSet.Row.size() == 1;

		String assertRaw = myXML.ResultSet.Row.NODE_USER_SAML_ASSERTION_PART1.text() +
				myXML.ResultSet.Row.NODE_USER_SAML_ASSERTION_PART2.text();
			log.info 'assertRaw----->'+assertRaw

		/*
		*  Base64 decode the assertion clob
		*/
		byte [] xmlBytes = Base64.decode(assertRaw);
		assertionXML = new String(xmlBytes, "UTF8");

		assert assertionXML.length() > 1;

		tC.setPropertyValue("computedAssertionXML", assertionXML);
	}
	/*
	*  Now parse the assertion XML
	*/
	try {
		myXML = new XmlSlurper().parseText(assertionXML).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", saml2p: "urn:oasis:names:tc:SAML:2.0:protocol");
		log.info 'myXML----------->'+myXML
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Check the status
		*/
		log.info "ASSERT: Status size 1 == " + myXML."saml2p:Status".size();
		assert 1 == myXML."saml2p:Status".size();

		def s = myXML."saml2p:Status"."saml2p:StatusCode".@Value;
		log.info "ASSERT: Status value is urn:oasis:names:tc:SAML:2.0:status:Success == $s";
		assert "urn:oasis:names:tc:SAML:2.0:status:Success" == s.toString();

		/*
		*  Verify the nodeaccountid.
		*/
		String aname = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute".@Name;
		String anameE = "accountID";
		log.info "ASSERT: NodeAccountID - Name Attribute Value - Expect[$anameE] - Received[$aname]";
		assert anameE == aname;

		String avalue = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
		log.info "ASSERT: Returned Account NodeID length > 0 -- [$avalue]";
		assert avalue.length() > 0;
		tC.setPropertyValue("dbassertionNodeaccountid", avalue);

		/*
		*  Verify the nodeuserid
		*/
		String uvalue = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID".text();
		log.info "ASSERT: Returned Account UserID length > 0 -- [$uvalue]";
	
		//  Not zero length
		assert uvalue.length() > 0;

		//  Save for future
		tC.setPropertyValue("dbassertionNodeuserid", uvalue);
		int lastColon = uvalue.lastIndexOf(':');
		def uvalueid = uvalue.substring(lastColon + 1);

		//  Get USER_OID from NODE_USER table.
		def uvaluedb = dbUtils.samlGetNodeUserIDfromNodeUser(uvalueid);
		def unameval = tC.getPropertyValue("USER_OID").toString();
		log.info "ASSERT: NODE_USER.USER_OID Recv[$uvaluedb] - Expect[$unameval]";
		assert uvaluedb == unameval;
	
		/*
		* <saml2:Issuer>
		*/
		log.info "ASSERT: <saml2:Issuer> Expect: " +
			tP.getPropertyValue("samlIssuer") +
			" Received:[" + myXML."saml2:Assertion"."saml2:Issuer".text() +
			"]";
		assert tP.getPropertyValue("samlIssuer").toString() == myXML."saml2:Assertion"."saml2:Issuer".text();

		/*
		*  saml2:AuthnStatement
		*/
		log.info "ASSERT: <saml2:AuthenticatingAuthority> Expect [" + 
			tP.getPropertyValue("samlAuthenticatingAuthority") +
			"] Received[" +
			myXML."saml2:Assertion"."saml2:AuthnStatement"."saml2:AuthnContext"."saml2:AuthenticatingAuthority".text() +
			"]";
		assert tP.getPropertyValue("samlAuthenticatingAuthority").toString() ==
			myXML."saml2:Assertion"."saml2:AuthnStatement"."saml2:AuthnContext"."saml2:AuthenticatingAuthority".text()

		/*
		*  AudienceRestriction Processing
		*/
		if (tC.getPropertyValue("isDeviceFlag").toString() == "true") {
			/*
			*  Just empty the list that way we will check
			*  for zero
			*/
			affiliationList = "";
		}
		log.info "ASSERT: AudienceList size Expect[" +
			audienceSize + "] Received[ " +
			myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".size() +
			"]";
			log.info audienceSize +"++++++++++++++++++++";
	//assert audienceSize == myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".size();
	
		myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".each {
			log.info "ASSERT: <saml2:AudienceRestriction> Contains [" +
				it.text() + "]";
				log.info "affiliationList: "+affiliationList;
			assert affiliationList.contains(it);
		}


		
			//Make sure none of the ingnoredNodes made it into the affilation list.
			ignoreNodesList.each {
			//log.error myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".toString()
			if(tC.getPropertyValue("NODE_ID")!= it)
			{
				
				log.info "ASSERT: <saml2:AudienceRestriction> DOES NOT Contain [" + it + "]";
				assert !myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".toString().contains(it);
			}
		}

		
	}
}]]></script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_ACCOUNT row" id="4569aad2-59ca-4b84-996c-8edd2d2c1beb">
        <con:settings/>
        <con:config><script>/*
*  Verifications
*
*	Only one NODE_ACCOUNT row exists for the NODE_ACCOUNT_ID.
*
*	NODE_ID is the nodeOID for the entity node.
*
*	ACCOUNT_OID is correct.
*
*/
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

def myXML;
def nodeXML;

tC.setPropertyValue("assertionAccountId",null);

String assertionAccountId = "";
String arow = "";
String narow = "";
String NODE_ID = tC.getPropertyValue("NODE_ID").toString();
String NODE_OID = tC.getPropertyValue("NODE_OID").toString();
/*
*  if we are a device adjust the 
*  NODE_ID...
*/
if (tC.getPropertyValue("isDeviceFlag") == "true") {
	log.info "here...";
	NODE_OID = tP.getPropertyValue("nodeDeviceDefault").toString();
}

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	
	arow = tC.getPropertyValue("assertionROW").toString();

	assert arow.length() > 0;

	/*
	*  Parse the NODE_USER_SAML_ASSERTION row
	*/
	try {
		myXML = new XmlSlurper().parseText(arow);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		assertionAccountId = myXML.ResultSet.Row.NODE_ACCOUNT_ID.text();

		log.info "assertionAccountId[$assertionAccountId]";
	}

	/*
	*  Get and Prase the NODE_ACCOUNT row..
	*/
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
		narow = dbUtils.samlGetNodeAccountRow(assertionAccountId);

		assert narow.length() > 0;
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		assertionAccountId = myXML.ResultSet.Row.NODE_ACCOUNT_ID.text();

		log.info "assertionAccountId[$assertionAccountId]";

		try {
			nodeXML = new XmlSlurper().parseText(arow);
		}
		catch(Throwable e) {
			log.info "ERROR - XmlSlurper - $e";
			assert 1 == 2;
		}
		finally {
			/*
			*  Only one row should be returned.
			*/
			log.info "ASSERT: Row Size is 1";
			assert nodeXML.ResultSet.Row.size() == 1;
			
			/*
			* ACCOUNT_OID - ugh  :(  for some reason slurper cannot find ACCOUNT_OID
			*	I will fix later  
			*/
			log.info "ASSERT: ACCOUNT_OID Expect[" + tC.getPropertyValue("accountoid") +
				"] Received[" + nodeXML.ResultSet.Row.ACCOUNT_OID.text() + "]";
		//assert tC.getPropertyValue("accountoid").toString() == nodeXML.ResultSet.Row.ACCOUNT_OID.text();

			/*
			*  NODE_ID is the entity node...
			*/
			
			log.info "ASSERT: NODE_OID Expect[" + NODE_OID +
				"] Received[" + nodeXML.ResultSet.Row.NODE_OID.text() + "]";
			assert NODE_OID == nodeXML.ResultSet.Row.NODE_OID.text();

		}
	}	
}

tC.setPropertyValue("assertionAccountId",assertionAccountId);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER row count" id="fda30f0b-146d-4f3f-9070-bd595f39e5f0">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int expectedSize = 1;
int assertionSize = 0;
int audienceSize = 1;  // Start at one as entity nodes is in audience
int audienceIgnoreSize = 0;
int expectNodeUserRowCount = tC.getPropertyValue("expectNodeUserRowCount").toInteger();

tC.setPropertyValue("z_resultNodeUserRowCount",null);

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	if (tC.getPropertyValue("audienceIgnoreAll").toString() == "false") {
		if ( tC.getPropertyValue("affiliationList") != null) {
			affiliationList = tC.getPropertyValue("affiliationList").toString();
			audienceSize = affiliationList.tokenize(";").size();
			log.info audienceSize;
			log.info "audienceSize BEFORE [$audienceSize]";
		}
		if ( tC.getPropertyValue("audienceIgnoreNodes") != null) {
			audienceIgnoreSize = tC.getPropertyValue("audienceIgnoreNodes").toString().tokenize(";").size();
			log.info "audienceIgnoreSize BEFORE [$audienceIgnoreSize]";
		}

		audienceSize -= audienceIgnoreSize;
		log.info "audienceSize FINAL [$audienceSize]";
	} else {
		log.info "No changes to count";
	}
	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	assertionSize = a.samlGetUUIDNodeUserRowCountbyUUID(tC.getPropertyValue("assertionUUID"));

	tC.setPropertyValue("z_resultNodeUserRowCount",assertionSize.toString());

	if (expectNodeUserRowCount == 0) {
		log.info "ASSERT: Audience Size[$audienceSize] - Received[$assertionSize]";
		//assert assertionSize == audienceSize;
	} else {
		log.info "ASSERT: Audience Size[$audienceSize] - Received[$expectNodeUserRowCount]";
		assert audienceSize == expectNodeUserRowCount;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER rows" id="3ba2f365-98ba-4124-8fee-d86b7292a9b1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));

def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));

String uuid = tC.getPropertyValue("assertionUUID").toString();
String nodeUser = tC.getPropertyValue("assertionUserId").toString();

String resultsDB = "";
String node = "";
List nodeList;

int indexOfcol = 0;
if (tC.getPropertyValue("actionSkipNodeUserCheck") != "true") {
	if (tC.getPropertyValue("expectErrType").toString() == "SUCCESS") {
		log.info "In LOOOOOOP";
	//	assert tC.getPropertyValue("ComputedAudienceList").toString() != 'null';

		/*
		*  Devices should not ever be affilated.
		*/
		/*if (tC.getPropertyValue("isDeviceFlag").toString() != "true") {
			nodeList = tC.getPropertyValue("ComputedAudienceList").toString().tokenize(";");
		} else {
			nodeList = tP.getPropertyValue("nodeDeviceDefault").toString().tokenize(";");
		}*/

		def affiliationList = tC.getPropertyValue("affiliationList").toString().tokenize(";");
		log.info "affiliationList size: "+affiliationList.size();
		if (tC.getPropertyValue("audienceIgnoreNodes") != 'null') {
			ignoreNodesList = tC.getPropertyValue("audienceIgnoreNodes").toString().tokenize(";");
			log.info "ignoreNodesList size: "+ignoreNodesList.size();
			ignoreNodesList.each {
				if(tC.getPropertyValue("NODE_ID").toString() != it.toString()){
						affiliationList = affiliationList.minus(it);
						log.info "affiliationList size: "+affiliationList.size();
				}
						
				}
		}
		
		nodeList = affiliationList;
		log.info "nodeList size is " + nodeList.size();

		nodeList.each {
			assert nodeList.isEmpty() == false;
			String NODE_OID = null;
			String nodeoid = tC.getPropertyValue("NODE_OID").toString();
			log.info "Processing NODE: $it";	
			if(it.toString() == "urn:dece:org:org:dece:dece:cs" || it.toString() == "urn:dece:org:org:dece:coord:cs"){
			log.info "here...";
				NODE_OID =  nodeoid;
			}else{
				indexOfcol = it.lastIndexOf(":");
			node = it.substring(indexOfcol + 1);
			log.info "node is $node";
			 NODE_OID = nodeoidGet.nodeGetNodeId("urn:dece:org:org:dece:"+"$node");
			}
			log.info "here...";
				if (tC.getPropertyValue("isDeviceFlag").toString() == "true") {
					NODE_OID=tP.getPropertyValue("nodeDeviceDefault").toString();
				}
	
			
			String sql = """SELECT to_char(rawtohex(USER_OID)) USER_OID,
				to_char(rawtohex(NODE_OID)) NODE_OID, 
				to_char(rawtohex(NODE_USER_ID)) NODE_USER_ID 
				FROM NODE_USER where NODE_USER_SAML_UUID = '$uuid' 
 				and NODE_OID = hextoraw('$NODE_OID')""";
			try {
				log.info "sql is [$sql]";
				resultsDB = dbUtils.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
			} catch (Throwable e) {
				log.info "ERROR - SelectFromDB issue! - $e";
			} finally {
				log.info "results is [$resultsDB]";
			}
		
			try {
				def myXML = new XmlSlurper().parseText(resultsDB);
	
				String dbUserOID = myXML.ResultSet.Row[0].USER_OID;
				String dbNodeOID = myXML.ResultSet.Row[0].NODE_OID;
				String dbNodeUserOID = myXML.ResultSet.Row[0].NODE_USER_ID;
			}
			catch(Throwable e) {
				log.info "ERROR - XmlSlurper Problem - $e";
			}
			finally {
				log.info "Assert DB USER_OID [$dbUserOID] == [" + tC.getPropertyValue("USER_OID") + "]";
				//assert dbUserOID == tC.getPropertyValue("USER_OID").toString();

				log.info "Assert DB NODE_OID [$dbNodeOID] == [$NODE_OID]";
				assert dbNodeOID == NODE_OID;

			} 	
		}
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify LVAL EUDU &amp; EMUC row count" id="fe3f9e6c-0c70-42fc-9086-5f81df775300"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
def username = context.expand( '${#TestCase#Username}' )
username=username.replace(" ","");
String uuid = tC.getPropertyValue("assertionUUID").toString();
String user_oid = tC.getPropertyValue("USER_OID").toString();
String resultsDB = "";
String node = "";
List nodeList;
def myXML = "";
def audienceIgnoreNodes;
int indexOfcol = 0;

if (tC.getPropertyValue("expectErrType").toString() == "SUCCESS"&amp;&amp; tC.getPropertyValue("actionSkipPolicyCheck") != "true") 
{
	assert tC.getPropertyValue("affiliationList").toString() != 'null';

	/*
	*  Devices should not ever be affilated.
	*/
	/*if (tC.getPropertyValue("isDeviceFlag").toString() != "true") 
	{
		nodeList = tC.getPropertyValue("stsComputedAudienceList").toString().tokenize(",");
	} 
	else 
	{
		nodeList = tP.getPropertyValue("nodeDeviceDefault").toString().tokenize(",");
	}*/

	if ( tC.getPropertyValue("affiliationList") != null) {
			affiliationList = tC.getPropertyValue("affiliationList").tokenize(";");
		}
		if ( tC.getPropertyValue("audienceIgnoreNodes") != null) {
			audienceIgnoreNodes = tC.getPropertyValue("audienceIgnoreNodes").tokenize(";");
		}

	audienceIgnoreNodes.each
	{
			affiliationList = affiliationList.minus(it);
	}
		
	nodeList = affiliationList;
	log.info "nodeList size is " + nodeList.size();

	nodeList.each {

		assert nodeList.isEmpty() == false;
		log.info "Processing NODE: $it";
		indexOfcol = it.lastIndexOf(":");
		node = it.substring(indexOfcol + 1);
		String NODE_OID = nodeoidGet.nodeGetNodeId(tP.getPropertyValue("urnNode")+node);
		
		String sql = """select pre.entity_id, count(p.policy_oid) as count from policy p, policy_requesting_entity pre where 
								p.status = 'active' and p.policy_class in (100,103,104) 
								and p.policy_oid in (select policy_oid from policy_relationship where policy_actor in 
								(select account_oid from account_user where lower(username) = lower('$username')))
								and pre.policy_oid = p.policy_oid and pre.entity_id = hextoraw('$NODE_OID') group by pre.entity_id""";
		try 
		{
			log.info "sql is [$sql]";
			resultsDB = dbUtils.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
			log.info "resultsDB: "+resultsDB;
		} 
		catch (Throwable e) 
		{
			log.info "ERROR - SelectFromDB issue! - $e";
		} 
		
		myXML = new XmlSlurper().parseText(resultsDB);
		log.info "Node Received: "+myXML.ResultSet.Row[0].ENTITY_ID;
		log.info "Row Count Received: "+myXML.ResultSet.Row[0].COUNT;
		assert myXML.ResultSet.Row[0].ENTITY_ID== NODE_OID;
		//assert myXML.ResultSet.Row[0].COUNT == 3;	
	
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">18245C6DC8F81F28E0533E991F0A053B</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>assertionROW</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <NODE_USER_SAML_ASSERTION_OID>1824611A442B99BFE0533D991F0AD524</NODE_USER_SAML_ASSERTION_OID>
      <NODE_OID>1784E226C7C3D052E0533D991F0A4377</NODE_OID>
      <NODE_USER_SAML_ASSERTION_PART1>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOlJlc3BvbnNlIHhtbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiBDb25zZW50PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDpvYnRhaW5lZCIgRGVzdGluYXRpb249Imh0dHBzOi8vc3RkZWNxYXZ1dGwxLnZhLm5ldXN0YXIuY29tOjI0ODUvc2ltcGxlc2FtbC9tb2R1bGUucGhwL3NhbWwvc3Avc2FtbDItYWNzLnBocC9SRVQiIElEPSJfYWJmYzBkMDctZThmZi00NmVmLWEyMTItOTIzM2Y0NTRkZmUxIiBJblJlc3BvbnNlVG89ImE4ODdjOTA3LWNiMDUtNGEwNS1iZWViLTJlN2Q1YWU5NjhlNSIgSXNzdWVJbnN0YW50PSIyMDE1LTA2LTEwVDA2OjA3OjE3LjcxNFoiIFZlcnNpb249IjIuMCI+PHNhbWwyOklzc3VlciB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+aHR0cDovL2MuZGVjZWxsYy5jb20vPC9zYW1sMjpJc3N1ZXI+PHNhbWwycDpTdGF0dXM+PHNhbWwycDpTdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOlN1Y2Nlc3MiLz48L3NhbWwycDpTdGF0dXM+PHNhbWwyOkFzc2VydGlvbiB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgSUQ9Il85ZDYwMmM1MC04MGJmLTRjOTMtOTM2Mi00MDE4NzZlNjVhZTIiIElzc3VlSW5zdGFudD0iMjAxNS0wNi0xMFQwNjowNzoxNy43MTRaIiBWZXJzaW9uPSIyLjAiIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSI+PHNhbWwyOklzc3Vlcj5odHRwOi8vYy5kZWNlbGxjLmNvbS88L3NhbWwyOklzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHM6U2lnbmVkSW5mbz48ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz48ZHM6UmVmZXJlbmNlIFVSST0iI185ZDYwMmM1MC04MGJmLTRjOTMtOTM2Mi00MDE4NzZlNjVhZTIiPjxkczpUcmFuc2Zvcm1zPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiPjxlYzpJbmNsdXNpdmVOYW1lc3BhY2VzIHhtbG5zOmVjPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiIFByZWZpeExpc3Q9InhzIi8+PC9kczpUcmFuc2Zvcm0+PC9kczpUcmFuc2Zvcm1zPjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIvPjxkczpEaWdlc3RWYWx1ZT5mQUhHbW9BVTV5RFEvR01mcE9nNFJVRVdKTFk9PC9kczpEaWdlc3RWYWx1ZT48L2RzOlJlZmVyZW5jZT48L2RzOlNpZ25lZEluZm8+PGRzOlNpZ25hdHVyZVZhbHVlPlNaUGNqMG1xeTZHVHQrT3hqVVNBSjNqT1lMMDNOdEEvc2FBSkZMLzQrM0xySm5lckNTL09QUzRpMlZqWTM5WVVFUk4yczZqcTJZelozZ2hsc1ZYR01Ba1AxWElKQXFMZThxZGw5SXJuR2d4ejFDdjhDUzNZN3ZhTmVYK3ltS0hBZm9LdVNDYVBucGdoZ0lERG9yTmRqS21ubVBrTlgzMERYN3RhdjBqZ0hzTT08L2RzOlNpZ25hdHVyZVZhbHVlPjwvZHM6U2lnbmF0dXJlPjxzYW1sMjpTdWJqZWN0PjxzYW1sMjpOYW1lSUQgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDpwZXJzaXN0ZW50Ij51cm46ZGVjZTp1c2VyaWQ6b3JnOmRlY2U6MTgyNDVDNkRDOEY3MUYyOEUwNTMzRTk5MUYwQTA1M0I8L3NhbWwyOk5hbWVJRD48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjbTpzZW5kZXItdm91Y2hlcyI+PHNhbWwyOlN1YmplY3RDb25maXJtYXRpb25EYXRhIEluUmVzcG9uc2VUbz0iYTg4N2M5MDctY2IwNS00YTA1LWJlZWItMmU3ZDVhZTk2OGU1IiBOb3RPbk9yQWZ0ZXI9IjIwMTUtMDYtMTBUMDk6MDc6MTcuNzE0WiIgUmVjaXBpZW50PSJodHRwczovL3N0ZGVjcWF2dXRsMS52YS5uZXVzdGFyLmNvbToyNDg1L3NpbXBsZXNhbWwvbW9kdWxlLnBocC9zYW1sL3NwL3NhbWwyLWFjcy5waHAvMTc4NEUyMjZDN0MzRDA1MkUwNTMzRDk5MUYwQTQzNzciLz48L3NhbWwyOlN1YmplY3RDb25maXJtYXRpb24+PC9zYW1sMjpTdWJqZWN0PjxzYW1sMjpDb25kaXRpb25zIE5vdEJlZm9yZT0iMjAxNS0wNi0xMFQwNjowNzowNy43MTRaIiBOb3RPbk9yQWZ0ZXI9IjIwMTYtMDYtMTBUMDY6MDc6MTcuNzE0WiI+PHNhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24+PHNhbWwyOkF1ZGllbmNlPnVybjpkZWNlOm9yZzpvcmc6ZGVjZTpSRVQ8L3NhbWwyOkF1ZGllbmNlPjwvc2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48L3NhbWwyOkNvbmRpdGlvbnM+PHNhbWwyOkFkdmljZT48c2FtbDI6QXNzZXJ0aW9uVVJJUmVmPmh0dHBzOi8vcWExLnEudXZ2dS5jb206NDQzL3Jlc3QvMS8xMS9TZWN1cml0eVRva2VuL0Fzc2VydGlvbi9fOWQ2MDJjNTAtODBiZi00YzkzLTkzNjItNDAxODc2ZTY1YWUyPC9zYW1sMjpBc3NlcnRpb25VUklSZWY+PC9zYW1sMjpBZHZpY2U+PHNhbWwyOkF1dGhuU3RhdGVtZW50IEF1dGhuSW5zdGFudD0iMjAxNS0wNi0xMFQwNjowNzoxNy43MTRaIiBTZXNzaW9uSW5kZXg9Il85ZDYwMmM1MC04MGJmLTRjOTMtOTM2Mi00MDE4NzZlNjVhZTIiPjxzYW1sMjpBdXRobkNvbnRleHQ+PHNhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOlBhc3N3b3JkPC9zYW1s</NODE_USER_SAML_ASSERTION_PART1>
      <NODE_USER_SAML_ASSERTION_PART2>MjpBdXRobkNvbnRleHRDbGFzc1JlZj48c2FtbDI6QXV0aGVudGljYXRpbmdBdXRob3JpdHk+dXJuOmRlY2U6b3JnOm9yZzpkZWNlOmNvb3JkaW5hdG9yPC9zYW1sMjpBdXRoZW50aWNhdGluZ0F1dGhvcml0eT48L3NhbWwyOkF1dGhuQ29udGV4dD48L3NhbWwyOkF1dGhuU3RhdGVtZW50PjxzYW1sMjpBdHRyaWJ1dGVTdGF0ZW1lbnQ+PHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJhY2NvdW50SUQiIE5hbWVGb3JtYXQ9InVybjpkZWNlOnR5cGU6YWNjb3VudElEIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI+dXJuOmRlY2U6YWNjb3VudGlkOm9yZzpkZWNlOjE4MjQ1QzZEQzhGNjFGMjhFMDUzM0U5OTFGMEEwNTNCPC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48L3NhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWwyOkFzc2VydGlvbj48L3NhbWwycDpSZXNwb25zZT4=</NODE_USER_SAML_ASSERTION_PART2>
      <NODE_USER_SAML_UUID>_9d602c50-80bf-4c93-9362-401876e65ae2</NODE_USER_SAML_UUID>
      <CREATED_DATE>2015-06-10 06:07:18.0</CREATED_DATE>
      <NODE_USER_ID>18245C6DC9051F28E0533E991F0A053B</NODE_USER_ID>
      <NODE_ACCOUNT_ID>18245C6DC8FE1F28E0533E991F0A053B</NODE_ACCOUNT_ID>
      <STATUS>active</STATUS>
      <EXPIRATION_DATE>2016-06-10 06:07:18.0</EXPIRATION_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_9d602c50-80bf-4c93-9362-401876e65ae2</con:value></con:property><con:property><con:name>assertionUUIDprior</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>audienceIgnoreAll</con:name><con:value>false</con:value></con:property><con:property><con:name>audienceIgnoreNodes</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>base64EncodedSignedAuthnRequest</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOkF1dGhuUmVxdWVzdCB4bWxuczpzYW1sMnA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgQXNzZXJ0aW9uQ29uc3VtZXJTZXJ2aWNlVVJMPSJodHRwczovL3N0ZGVjcWF2dXRsMS52YS5uZXVzdGFyLmNvbToyNDg1L3NpbXBsZXNhbWwvbW9kdWxlLnBocC9zYW1sL3NwL3NhbWwyLWFjcy5waHAvMTc4NEUyMjZDN0MzRDA1MkUwNTMzRDk5MUYwQTQzNzciIERlc3RpbmF0aW9uPSJodHRwczovL3FhMS5zLnV2dnUuY29tL3NlY3VyaXR5L2RlbGVnYXRpb24vc2FtbC9sb2dpbnNlcnZpY2UvbG9naW4iIEZvcmNlQXV0aG49InRydWUiIElEPSJhODg3YzkwNy1jYjA1LTRhMDUtYmVlYi0yZTdkNWFlOTY4ZTUiIElzc3VlSW5zdGFudD0iMjAxNS0wNi0xMFQxMTo0MDoyNC4wMloiIFByb3RvY29sQmluZGluZz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmJpbmRpbmdzOkhUVFAtUE9TVCIgVmVyc2lvbj0iMi4wIj48c2FtbDI6SXNzdWVyIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj51cm46ZGVjZTpvcmc6b3JnOmRlY2U6UkVUPC9zYW1sMjpJc3N1ZXI%2BPHNhbWwycDpOYW1lSURQb2xpY3kgQWxsb3dDcmVhdGU9InRydWUiIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOm5hbWVpZC1mb3JtYXQ6dHJhbnNpZW50Ii8%2BPHNhbWwycDpFeHRlbnNpb25zPjxuczQ6UG9saWN5TGlzdCB4bWxuczpuczQ9Imh0dHA6Ly93d3cuZGVjZWxsYy5vcmcvc2NoZW1hLzIwMTMvMTAvY29vcmRpbmF0b3IiPjxuczQ6UG9saWN5PjxuczQ6UG9saWN5Q2xhc3M%2BdXJuOmRlY2U6dHlwZTpwb2xpY3k6VXNlckxpbmtDb25zZW50PC9uczQ6UG9saWN5Q2xhc3M%2BPC9uczQ6UG9saWN5PjwvbnM0OlBvbGljeUxpc3Q%2BPC9zYW1sMnA6RXh0ZW5zaW9ucz48c2FtbDI6Q29uZGl0aW9ucyB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI%2BPHNhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24%2BPHNhbWwyOkF1ZGllbmNlPnVybjpkZWNlOm9yZzpvcmc6ZGVjZTpSRVQ8L3NhbWwyOkF1ZGllbmNlPjwvc2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48L3NhbWwyOkNvbmRpdGlvbnM%2BPHNhbWwyOlN1YmplY3QgeG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPjxzYW1sMjpOYW1lSUQgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDpwZXJzaXN0ZW50Ij50ZXN0XzE0MzM5MTY2MDU3NTZAdXZ2dXRlc3RpbmcuYml6PC9zYW1sMjpOYW1lSUQ%2BPC9zYW1sMjpTdWJqZWN0PjxTaWduYXR1cmUgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxTaWduZWRJbmZvPjxDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMS9SRUMteG1sLWMxNG4tMjAwMTAzMTUiLz48U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIi8%2BPFJlZmVyZW5jZSBVUkk9IiI%2BPFRyYW5zZm9ybXM%2BPFRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8%2BPC9UcmFuc2Zvcm1zPjxEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIvPjxEaWdlc3RWYWx1ZT5MbGdGc0ttcVBZODVRZnB1bWF3WTFPS2J5N009PC9EaWdlc3RWYWx1ZT48L1JlZmVyZW5jZT48L1NpZ25lZEluZm8%2BPFNpZ25hdHVyZVZhbHVlPkRxaDB1RVVMNzJlRnlGOHU4WFJtU3NEWUpnZkRWSnZ5V0lRUVZmbmVmUUtUSmpCVDArS2ovWDliUW44Zmt2aGpuZXppMDJPRit6REwKWDNDWXBVTGczMlQzSFNEUmUrb2RZOU1QQURXY1F3Rk9QREcwK28ySVFrWnNaeUpNQk55Q0dHaVVYckNMRmo1cmtUOTRBciswZFZmLwptd21MK3dMMTd5Z3dqNUFpcjBPTVlweEkxaHBsSjRlTm52Tm5Ya2EyTkhNWm1URUdKYXVUWUYrY1c5N3NNUW1ZdHlNNTJzVUdDVjZMClYyellWbm1oSm5RZFRHQmtnU2VTK2U2a1FqdnljVVcvbVFSUDA1L2NseFdDVkxJcG1Uamw3Q1lrdDJqa0p5bHN2SUpjZ05jNW9ZZDgKQThKWllWUmluVE1EZW95OVVSN2FwYnJ1cjRmRFVlUTVhUitrZG9JbkZEbVgvcXpkbGxKeFR0U0RQdVBDQWxaejlyalkrZk1rbVZBUgpMcUhYRjd1bFE3ekdhSnpKZCtQaUlhQ2o4OTFNY3FzK0NzcEM3QU1PS3FIRmlDc1d0YW1BR2JicFNHNEdQbCtzR1RSMUlBOVN1QUJFCkxjL2ZJN3lyTjZaaS9RYTloU1Rybk1DcVVGaVNUTHp5Z0pJNDlFdTN1TUVYOEp3SUdDMEt4NWM2aWpEcWo0U0ZpbHNQNW1mR3hOYXUKZ3JVUkxwMjJSMTJnRE9lUmUxNXV1blkvb29mMnpwMmV0SFF2Z093SVlpUmRoZFRCb01zT1paOWU1bCtwWERqcHBMWUttYVdzbmo5SQpnVDJOKzBKQWFWd1lCc3YyN1paN3Z3TlF6Zno3TVAyd2VUWTRPaTRvZUwyeEMxdmZFRWNCWHBVUFN5ZEpBOGNYOWRnWmw0YkJzSDg9PC9TaWduYXR1cmVWYWx1ZT48S2V5SW5mbz48WDUwOURhdGE%2BPFg1MDlTdWJqZWN0TmFtZT4xLjIuODQwLjExMzU0OS4xLjkuMT0jMTYwZjY2NmY2ZjQwNmU2NTc1NzM3NDYxNzIyZTYzNmY2ZCxDTj11cm46ZGVjZTpvcmc6b3JnOmRlY2U6UkVULEw9U3RlcmxpbmcsU1Q9VkEsQz1VUzwvWDUwOVN1YmplY3ROYW1lPjxYNTA5Q2VydGlmaWNhdGU%2BTUlJRHp6Q0NBemdDQWdWaU1BMEdDU3FHU0liM0RRRUJCUVVBTUdveEVEQU9CZ05WQkFvVEIwNWxkWE4wWVhJeEN6QUpCZ05WQkFzVApBbEZCTVJFd0R3WURWUVFIRXdoVGRHVnliR2x1WnpFUk1BOEdBMVVFQ0JNSVZtbHlaMmx1YVdFeEN6QUpCZ05WQkFZVEFsVlRNUll3CkZBWURWUVFERXcxdVpYVnpkR0Z5TG5GaExtTmhNQjRYRFRFek1EVXpNREUwTXpjeU1Gb1hEVEU0TURVeU9URTBNemN5TUZvd2NURUwKTUFrR0ExVUVCaE1DVlZNeEN6QUpCZ05WQkFnVEFsWkJNUkV3RHdZRFZRUUhFd2hUZEdWeWJHbHVaekVpTUNBR0ExVUVBeE1aZFhKdQpPbVJsWTJVNmIzSm5PbTl5Wnpwa1pXTmxPbEpGVkRFZU1Cd0dDU3FHU0liM0RRRUpBUllQWm05dlFHNWxkWE4wWVhJdVkyOXRNSUlDCklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUF6djVWK2xOVFFSWWRsdlRTQnhFWnhXdmp6bmlna1UrNnNrWUQKRzc4OTJQMGxsb3R0aURKMmpZSlFDQldlZFduSmVBaEJWeU14dUliZzNXeGJLV1hoTVBYK2xiT1JhTGJiZnRlMkcwSXZDSXpUdU5iVwpJRGpSczZuMkFwSnNwSEU3OW9BTUgxMngrWndYRzhZb1IvVFZjVTIvYWI0T3dDTmtzMC9oZjM5U29zM3owY3lzaHMxdkhEWFphNk9sCksvTTZ5aFdHcnZkWXJRdlVFaUszbjB5aUtFSGdxZ0RaMkZRWTNxUDVmQ0hLcnhjSG9iczJsdWk5cW9qUy8zb1NXQXlpd1U4eDVLVjEKa1RodlRPbmdGUjJxTnoycExJYWlLRG5wemR2TEdVS2orL21yTnNUaVVNYzBTVnFUWk95WHVlOFUyNEw5ZlRQbkNEVS81UkhPZzA5RQp1MnljKy8xU2FqbGZaSkRqRGtSZ2lyU2xBdHZFS25HZFc5VWJDQ1NaOVVMTEVqcnR4cyt4L1FTRE52T1lGc01YVXhiaVJOWXdKeUJ3CnQ2RDNBT0tDR1BlZUhUWURLcEREeDZoQTFEMkZvdTd6Y1RiZ0RnVHJQbTdJMWNzMkdQQTk2Y1M2SEdEblpRTTdoeUJhZWs2Ylh6b2sKNkltTkJJVXZ0WElXQUtyMUgzRW5GU3A2REJqdnBFWW1Ld3JXYVNnVWxTNlF0eTBUclEyOEEveE9hMW1LNms0ajF0SThVRHJINzdoTgpMZU9rdmZRd0E1NEFid20vU2kwVnZsYWIyZUdYU25MSUhjKzhHckNTUUJNTlRTcFBWMWJzTjVWNHFpZUx4L1Z2YzFvbXVMYkxpOFkzCnhwaWM5ODlqZ0RSTDV6ZUl2bVk2T3pNZEhiS2FsYjVOT3BhUllxMENBd0VBQVRBTkJna3Foa2lHOXcwQkFRVUZBQU9CZ1FDMFVEalUKODh5TXlBNlhveWpYSEQrMDZ6Z05KZlBYcERkNXRQV0Zqb2Z0WHE2dUFkSzFoenBEYlhTTGg1aDFNL2VnSkJGNGhHY09EZlZYRTNkYQpVYi9qWDYxTlJBR3hOU0NYUkJCbWhBOCtvcEx0eVlWVmNOdE1iUE5ScjJvb2h4Z3dzbHRLblJQZFdpMkNBazlUaGhWdjgrayt5dmM0CnpBVWxmckJqNjMyQ1V3PT08L1g1MDlDZXJ0aWZpY2F0ZT48L1g1MDlEYXRhPjwvS2V5SW5mbz48L1NpZ25hdHVyZT48L3NhbWwycDpBdXRoblJlcXVlc3Q%2B</con:value></con:property><con:property><con:name>computedAssertionXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:obtained" Destination="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET" ID="_abfc0d07-e8ff-46ef-a212-9233f454dfe1" InResponseTo="a887c907-cb05-4a05-beeb-2e7d5ae968e5" IssueInstant="2015-06-10T06:07:17.714Z" Version="2.0"><saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">http://c.decellc.com/</saml2:Issuer><saml2p:Status><saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/></saml2p:Status><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_9d602c50-80bf-4c93-9362-401876e65ae2" IssueInstant="2015-06-10T06:07:17.714Z" Version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><ds:Reference URI="#_9d602c50-80bf-4c93-9362-401876e65ae2"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="xs"/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><ds:DigestValue>fAHGmoAU5yDQ/GMfpOg4RUEWJLY=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>SZPcj0mqy6GTt+OxjUSAJ3jOYL03NtA/saAJFL/4+3LrJnerCS/OPS4i2VjY39YUERN2s6jq2YzZ3ghlsVXGMAkP1XIJAqLe8qdl9IrnGgxz1Cv8CS3Y7vaNeX+ymKHAfoKuSCaPnpghgIDDorNdjKmnmPkNX30DX7tav0jgHsM=</ds:SignatureValue></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:18245C6DC8F71F28E0533E991F0A053B</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="a887c907-cb05-4a05-beeb-2e7d5ae968e5" NotOnOrAfter="2015-06-10T09:07:17.714Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/1784E226C7C3D052E0533D991F0A4377"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2015-06-10T06:07:07.714Z" NotOnOrAfter="2016-06-10T06:07:17.714Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa1.q.uvvu.com:443/rest/1/11/SecurityToken/Assertion/_9d602c50-80bf-4c93-9362-401876e65ae2</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2015-06-10T06:07:17.714Z" SessionIndex="_9d602c50-80bf-4c93-9362-401876e65ae2"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:18245C6DC8F61F28E0533E991F0A053B</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></saml2p:Response>]]></con:value></con:property><con:property><con:name>dbassertionNodeaccountid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:18245C6DC8F61F28E0533E991F0A053B</con:value></con:property><con:property><con:name>dbassertionNodeuserid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:18245C6DC8F71F28E0533E991F0A053B</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">8760</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectNodeUserRowCount</con:name><con:value>0</con:value></con:property><con:property><con:name>httpBody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com:443/rest/1/11/SecurityToken/Assertion/_9d602c50-80bf-4c93-9362-401876e65ae2</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>jksFile</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET.jks</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1784E226C7C3D052E0533D991F0A4377</con:value></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>responsetype</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>signedAuthnRequest</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:AuthnRequest xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" AssertionConsumerServiceURL="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/1784E226C7C3D052E0533D991F0A4377" Destination="https://qa1.s.uvvu.com/security/delegation/saml/loginservice/login" ForceAuthn="true" ID="a887c907-cb05-4a05-beeb-2e7d5ae968e5" IssueInstant="2015-06-10T11:40:24.02Z" ProtocolBinding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Version="2.0"><saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:RET</saml2:Issuer><saml2p:NameIDPolicy AllowCreate="true" Format="urn:oasis:names:tc:SAML:2.0:nameid-format:transient"/><saml2p:Extensions><ns4:PolicyList xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"><ns4:Policy><ns4:PolicyClass>urn:dece:type:policy:UserLinkConsent</ns4:PolicyClass></ns4:Policy></ns4:PolicyList></saml2p:Extensions><saml2:Conditions xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Subject xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">test_1433916605756@uvvutesting.biz</saml2:NameID></saml2:Subject><Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/><SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/></Transforms><DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><DigestValue>LlgFsKmqPY85QfpumawY1OKby7M=</DigestValue></Reference></SignedInfo><SignatureValue>Dqh0uEUL72eFyF8u8XRmSsDYJgfDVJvyWIQQVfnefQKTJjBT0+Kj/X9bQn8fkvhjnezi02OF+zDL
X3CYpULg32T3HSDRe+odY9MPADWcQwFOPDG0+o2IQkZsZyJMBNyCGGiUXrCLFj5rkT94Ar+0dVf/
mwmL+wL17ygwj5Air0OMYpxI1hplJ4eNnvNnXka2NHMZmTEGJauTYF+cW97sMQmYtyM52sUGCV6L
V2zYVnmhJnQdTGBkgSeS+e6kQjvycUW/mQRP05/clxWCVLIpmTjl7CYkt2jkJylsvIJcgNc5oYd8
A8JZYVRinTMDeoy9UR7apbrur4fDUeQ5aR+kdoInFDmX/qzdllJxTtSDPuPCAlZz9rjY+fMkmVAR
LqHXF7ulQ7zGaJzJd+PiIaCj891Mcqs+CspC7AMOKqHFiCsWtamAGbbpSG4GPl+sGTR1IA9SuABE
Lc/fI7yrN6Zi/Qa9hSTrnMCqUFiSTLzygJI49Eu3uMEX8JwIGC0Kx5c6ijDqj4SFilsP5mfGxNau
grURLp22R12gDOeRe15uunY/oof2zp2etHQvgOwIYiRdhdTBoMsOZZ9e5l+pXDjppLYKmaWsnj9I
gT2N+0JAaVwYBsv27ZZ7vwNQzfz7MP2weTY4Oi4oeL2xC1vfEEcBXpUPSydJA8cX9dgZl4bBsH8=</SignatureValue><KeyInfo><X509Data><X509SubjectName>1.2.840.113549.1.9.1=#160f666f6f406e6575737461722e636f6d,CN=urn:dece:org:org:dece:RET,L=Sterling,ST=VA,C=US</X509SubjectName><X509Certificate>MIIDzzCCAzgCAgViMA0GCSqGSIb3DQEBBQUAMGoxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsT
AlFBMREwDwYDVQQHEwhTdGVybGluZzERMA8GA1UECBMIVmlyZ2luaWExCzAJBgNVBAYTAlVTMRYw
FAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEzMDUzMDE0MzcyMFoXDTE4MDUyOTE0MzcyMFowcTEL
MAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEiMCAGA1UEAxMZdXJu
OmRlY2U6b3JnOm9yZzpkZWNlOlJFVDEeMBwGCSqGSIb3DQEJARYPZm9vQG5ldXN0YXIuY29tMIIC
IjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAzv5V+lNTQRYdlvTSBxEZxWvjznigkU+6skYD
G7892P0llottiDJ2jYJQCBWedWnJeAhBVyMxuIbg3WxbKWXhMPX+lbORaLbbfte2G0IvCIzTuNbW
IDjRs6n2ApJspHE79oAMH12x+ZwXG8YoR/TVcU2/ab4OwCNks0/hf39Sos3z0cyshs1vHDXZa6Ol
K/M6yhWGrvdYrQvUEiK3n0yiKEHgqgDZ2FQY3qP5fCHKrxcHobs2lui9qojS/3oSWAyiwU8x5KV1
kThvTOngFR2qNz2pLIaiKDnpzdvLGUKj+/mrNsTiUMc0SVqTZOyXue8U24L9fTPnCDU/5RHOg09E
u2yc+/1SajlfZJDjDkRgirSlAtvEKnGdW9UbCCSZ9ULLEjrtxs+x/QSDNvOYFsMXUxbiRNYwJyBw
t6D3AOKCGPeeHTYDKpDDx6hA1D2Fou7zcTbgDgTrPm7I1cs2GPA96cS6HGDnZQM7hyBaek6bXzok
6ImNBIUvtXIWAKr1H3EnFSp6DBjvpEYmKwrWaSgUlS6Qty0TrQ28A/xOa1mK6k4j1tI8UDrH77hN
LeOkvfQwA54Abwm/Si0Vvlab2eGXSnLIHc+8GrCSQBMNTSpPV1bsN5V4qieLx/Vvc1omuLbLi8Y3
xpic989jgDRL5zeIvmY6OzMdHbKalb5NOpaRYq0CAwEAATANBgkqhkiG9w0BAQUFAAOBgQC0UDjU
88yMyA6XoyjXHD+06zgNJfPXpDd5tPWFjoftXq6uAdK1hzpDbXSLh5h1M/egJBF4hGcODfVXE3da
Ub/jX61NRAGxNSCXRBBmhA8+opLtyYVVcNtMbPNRr2oohxgwsltKnRPdWi2CAk9ThhVv8+k+yvc4
zAUlfrBj632CUw==</X509Certificate></X509Data></KeyInfo></Signature></saml2p:AuthnRequest>]]></con:value></con:property><con:property><con:name>sName</con:name><con:value>3_DTCreate_and_SAML_Exchange_FUNC</con:value></con:property><con:property><con:name>subject</con:name><con:value>test_1433916605756@uvvutesting.biz</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_004_DTCreate_Verify_UUID_status_for_deletion_of_ULC</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>unSignedAuthnRequest</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:AuthnRequest xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" AssertionConsumerServiceURL="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/1784E226C7C3D052E0533D991F0A4377" Destination="https://qa1.s.uvvu.com/security/delegation/saml/loginservice/login" ForceAuthn="true" ID="a887c907-cb05-4a05-beeb-2e7d5ae968e5" IssueInstant="2015-06-10T11:40:24.02Z" ProtocolBinding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Version="2.0"><saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:RET</saml2:Issuer><saml2p:NameIDPolicy AllowCreate="true" Format="urn:oasis:names:tc:SAML:2.0:nameid-format:transient"/><saml2p:Extensions><ns4:PolicyList xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"><ns4:Policy><ns4:PolicyClass>urn:dece:type:policy:UserLinkConsent</ns4:PolicyClass></ns4:Policy></ns4:PolicyList></saml2p:Extensions><saml2:Conditions xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Subject xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">test_1433916605756@uvvutesting.biz</saml2:NameID></saml2:Subject></saml2p:AuthnRequest>]]></con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433916607228</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">18245C6DC9001F28E0533E991F0A053B</con:value></con:property><con:property><con:name>UUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">a887c907-cb05-4a05-beeb-2e7d5ae968e5</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">18245C6DC8FE1F28E0533E991F0A053B</con:value></con:property><con:property><con:name>z_resultNodeUserRowCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>false</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ca40557e-002f-42ba-a0fd-470051fc8b75</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07f805a5-22a5-411d-9c98-72b32712408f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f2c3ad04-b40d-4097-81fc-3cb095d52d65</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d0121006-d942-4dbb-9e17-82e85ad23bdd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>19aedfa5-e2f2-471d-878d-bb664803ec08</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1dcf3e5e-2ed0-47fa-aa2e-5f953a537bd5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Copy of PolicyGet" searchProperties="true" id="2eaece0a-5c7e-4d26-8556-72ffef34d1aa"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="cac9a131-2921-44a8-8d10-c4802e004296"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
tC.setPropertyValue("policyCLASS",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="eac84778-4972-4b3c-a989-93836df6630c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyDeleteResponseType"));



if (tP.getPropertyValue("versionMinor") == tP.getPropertyValue("versionURLEncode")){	
	tC.setPropertyValue("policyClass", URLEncoder.encode("urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"), "UTF-8"));
}else{
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"));
}

			
if (tC.getPropertyValue("expectErrType") == null ||
	tC.getPropertyValue("expectErrType") == "") {
		tC.setPropertyValue("expectErrType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="491ea076-aea7-4ad1-87fd-dd656aa70926"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID",tC.getPropertyValue("LLASP_CHECK"));
//myTC.setPropertyValue("NODE_ID","DLASP");
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Policy Get");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy Get" id="ae1a6979-97cc-44d0-9635-88fc78e5e2fe"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="UserPolicyGET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy Get" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="LLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="38c2fd27-4f71-4ec2-8225-136f056535f9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Policy Get');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);


 </script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="5b5e7fa4-dce8-4db1-bca0-64076b07844d">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");

def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

/*
*  The body should not be null...something should be
*  there.
*/
assert XMLbody.size() > 0;

if (XMLbody != null) {
                def myXML = new XmlSlurper().parseText(XMLbody);

                xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
                
}

log.info "xmlPolicyClass [$xmlPolicyClass] - tcPolicyClass[$tcPolicyClass]";
                                
if (httpStatus == "HTTP/1.1 200 OK" || xmlPolicyClass == tcPolicyClass) {
	
                policyWasFound = "true";

                def PolicyID = context.expand( '${#TestCase#XMLbody#declare namespace ns1=\'${#Project#coordinatorSchema}\'; //ns1:PolicyList[1]/ns1:Policy[1]/@PolicyID}' )
                log.info "================="+PolicyID
                

                if (tP.getPropertyValue("versionMinor") == tP.getPropertyValue("versionURLEncode")){	
				tC.setPropertyValue("PolicyID", URLEncoder.encode(PolicyID, "UTF-8"));
			}else{
				 tC.setPropertyValue("PolicyID",PolicyID);
			}
}


tC.setPropertyValue("policyExists", policyWasFound);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return policyId" id="81e9c1fb-c441-4e71-a601-d4201939e3e9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));
if(tC.getPropertyValue("policyClass")=="urn:dece:type:policy:ManageUserConsent")
{
callTC.setPropertyValue("status",tC.getPropertyValue("status"));
}

tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_USER_ID</con:name><con:value>D84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=pVZdb+I6EH3fXxFlH1HIBwGSqCBBoEt2KW2Bdtu+XBnHAW8TO40dSvvrrx2aFCjt5d4rISFPxjPHM8dnfMZAEltejzGUcUyJEgw66l/IcQ0HuaHWduyGZrdMoAHDMDXLjqwFcO2GGZqqEjCWo4AwDgjvqJZh2prR1Cx3bjieZXkNs25b7oOq3KKMidDCpW6oyiaJCfOKtB01z4hHAcPMIyBBzOPQm/Uuxp7w9ECJSe2ebVEWCbPuivPU03VYDxFEcQzrkCb6mb7ncxYyb4aXBPA8Q285Q9ZR3/Y+Pz/Xnxt1mi11yzAM3XB14RMyvPyudr+Vm1EYkIhu1z4glGAIYvwKJKgLxFc0VHrxkmaYr5JPQpu6acjQGtpADZo2+a7q7wkKdCdG2gOZMaCxFTDLYFMUoQwRiJSbadBRv5/Wwe3eeQYIi2iWsIP1v4OEyBrFNEWhxsqTlehOj3ikXN0zBL2AwDhneI0mkiYpgIgpVxmK8GaMmSBfyJSi/cqGiR8uWYbgv2nLmb6LVUDXj1RngJeI8f/Ss91+baPcgjhH3X7vZZYFf/zLZuC/jIB1Sdya+dCcmvF1p4Cw67wFVbX7bX1I1opbb5v8yfwht+iM0MXDvHcVP5I0i+mfZmqkjdfz2xa4c/zm9dOP+Jn+1I1wNLjhjeVjbT2OH3838qfH2i9iktv7/rWVjL7NcjLuPUzatVHInWsWj+4i+no/ouH9eWT8WqR3tc30Z4AW+EcwnjWG0c3Ty+QhDWjt98QeDsnVze2PLHXIILAGF98Gv5gPm8lrDUxWIz66Mxf3nfcz7Z5h31hKwixf/EGQl0tJj2CgnIt+Af61vEgLDrWocPVSqVGMI8LVrtwlpcXLhQDh0BPN3K7Pe4499FtDt9dqm47pDw3bMM+NntF2Xcu2+qUGbVEcQPQpibDMJVV2y5+vAcLEY4iEKNPWNIcrxNQvIg4AB0pApuJyUMLQnHZUw0BtF4GG1oraLc123UhzLEcoQjNquc1FO2o5QsQnlF+Sy6wXcZTtibhp7on4FEGcYiSVXlKdCa4zLqryBNY5j836GtQJysUsyKQce5btNHWGkzRGErOe0DCPUT1dpUWNdLb9tzQAWWH1DX947gwNxx+afnvQqmrbdF3TMvrF/fz0+IffykoJnxBLByYP2kei2+jIqLLKU36oRvPoSCvD9/IQy2soys4zDLdI9j+9s0nSqKLSYNybXZWgK9/T9o7/x97pcP5xp/7FafTDQlaJwjXeSVsOazF/hDp1S448gfpTPV+v84IVbam8mQivCwE29RmCuZDPlzl9RESvQugnTa8K9UHmyr6PL+crMuOAo0RwWCmWJzxdZojJp0sgruHm1HfRXkpRN442/JjNj8ULRyL+8hEEPSj9hPlK/D3TLHxv15FYO3nEOcV7hWOylCs5p14+IQWkIiwWwkqz3eDHAhxLvm+silxh4YJNi5yjz78oUjE7KoCQ5oQHA7Uw7Kp4gZO/pMh7d/oQppgUb6N/wz4d/XcX45nQ0wSolS/+Z2cNF3SBSJUvjAJLR92Il6xITpY7U+MN4P7gaLntgdno+323NRz6++LW8qsC7p2k+8H80bJT08P70P0b</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value/></con:property><con:property><con:name>tName</con:name><con:value>DelegationTokenCreate_VerifiedEmail_RTL_with_Audience_Nodes</con:value></con:property><con:property><con:name>sName</con:name><con:value>DelegationTokenCreate_VerifiedEmail</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>837</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:null</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:securitycontext:unauthorized">
      <Reason Language="en">The request is not authorized.</Reason>
      <OriginalRequest/>
      <ErrorLink/>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>502</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//LLASP_concat.pem</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:FA697D9F3FB502F2E0401F0A0599126E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:FA84EC6E9A67181CE0401F0A0799242B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FA697D13BCB96EECE0401F0A0599126C</con:value></con:property><con:property><con:name>LLASP_CHECK</con:name><con:value>LLASP</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5935459c-5982-4cb1-9974-1d4d88038a65</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9bbb88e5-07dd-4d4f-ba3c-1c734ce9be3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Copy of PolicyGet_1" searchProperties="true" id="4aaa11f6-95b4-435e-a84d-ae02fd1d9336"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="68e09395-4c95-490f-9730-1742483d30fc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
tC.setPropertyValue("policyCLASS",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="70163ff1-98ff-4bb7-a222-22d71e6ccfcc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyDeleteResponseType"));



if (tP.getPropertyValue("versionMinor") == tP.getPropertyValue("versionURLEncode")){	
	tC.setPropertyValue("policyClass", URLEncoder.encode("urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"), "UTF-8"));
}else{
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"));
}

			
if (tC.getPropertyValue("expectErrType") == null ||
	tC.getPropertyValue("expectErrType") == "") {
		tC.setPropertyValue("expectErrType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="0142a626-6b14-4da3-a780-0e06bb0ce408"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID",tC.getPropertyValue("DLASP_CHECK"));
//myTC.setPropertyValue("NODE_ID","DLASP");
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Policy Get");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy Get" id="e3978335-9d6a-4f2c-9a35-1706073c0c5f"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="UserPolicyGET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy Get" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="1c303fb9-8028-4ab5-812d-cabcdcdbf5f7">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Policy Get');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);


 </script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="68b5ada7-523f-41a6-922d-f857b70bb2e2">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");

def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

/*
*  The body should not be null...something should be
*  there.
*/
assert XMLbody.size() > 0;

if (XMLbody != null) {
                def myXML = new XmlSlurper().parseText(XMLbody);

                xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
                
}

log.info "xmlPolicyClass [$xmlPolicyClass] - tcPolicyClass[$tcPolicyClass]";
                                
if (httpStatus == "HTTP/1.1 200 OK" || xmlPolicyClass == tcPolicyClass) {
	
                policyWasFound = "true";

                def PolicyID = context.expand( '${#TestCase#XMLbody#declare namespace ns1=\'${#Project#coordinatorSchema}\'; //ns1:PolicyList[1]/ns1:Policy[1]/@PolicyID}' )
                log.info "================="+PolicyID
                

                if (tP.getPropertyValue("versionMinor") == tP.getPropertyValue("versionURLEncode")){	
				tC.setPropertyValue("PolicyID", URLEncoder.encode(PolicyID, "UTF-8"));
			}else{
				 tC.setPropertyValue("PolicyID",PolicyID);
			}
}


tC.setPropertyValue("policyExists", policyWasFound);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return policyId" id="cd5b61c4-9f33-4607-97d4-5f290c551b63"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));
if(tC.getPropertyValue("policyClass")=="urn:dece:type:policy:ManageUserConsent")
{
callTC.setPropertyValue("status",tC.getPropertyValue("status"));
}

tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_USER_ID</con:name><con:value>D84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=pVZdb+I6EH3fXxFlH1HIBwGSqCBBoEt2KW2Bdtu+XBnHAW8TO40dSvvrrx2aFCjt5d4rISFPxjPHM8dnfMZAEltejzGUcUyJEgw66l/IcQ0HuaHWduyGZrdMoAHDMDXLjqwFcO2GGZqqEjCWo4AwDgjvqJZh2prR1Cx3bjieZXkNs25b7oOq3KKMidDCpW6oyiaJCfOKtB01z4hHAcPMIyBBzOPQm/Uuxp7w9ECJSe2ebVEWCbPuivPU03VYDxFEcQzrkCb6mb7ncxYyb4aXBPA8Q285Q9ZR3/Y+Pz/Xnxt1mi11yzAM3XB14RMyvPyudr+Vm1EYkIhu1z4glGAIYvwKJKgLxFc0VHrxkmaYr5JPQpu6acjQGtpADZo2+a7q7wkKdCdG2gOZMaCxFTDLYFMUoQwRiJSbadBRv5/Wwe3eeQYIi2iWsIP1v4OEyBrFNEWhxsqTlehOj3ikXN0zBL2AwDhneI0mkiYpgIgpVxmK8GaMmSBfyJSi/cqGiR8uWYbgv2nLmb6LVUDXj1RngJeI8f/Ss91+baPcgjhH3X7vZZYFf/zLZuC/jIB1Sdya+dCcmvF1p4Cw67wFVbX7bX1I1opbb5v8yfwht+iM0MXDvHcVP5I0i+mfZmqkjdfz2xa4c/zm9dOP+Jn+1I1wNLjhjeVjbT2OH3838qfH2i9iktv7/rWVjL7NcjLuPUzatVHInWsWj+4i+no/ouH9eWT8WqR3tc30Z4AW+EcwnjWG0c3Ty+QhDWjt98QeDsnVze2PLHXIILAGF98Gv5gPm8lrDUxWIz66Mxf3nfcz7Z5h31hKwixf/EGQl0tJj2CgnIt+Af61vEgLDrWocPVSqVGMI8LVrtwlpcXLhQDh0BPN3K7Pe4499FtDt9dqm47pDw3bMM+NntF2Xcu2+qUGbVEcQPQpibDMJVV2y5+vAcLEY4iEKNPWNIcrxNQvIg4AB0pApuJyUMLQnHZUw0BtF4GG1oraLc123UhzLEcoQjNquc1FO2o5QsQnlF+Sy6wXcZTtibhp7on4FEGcYiSVXlKdCa4zLqryBNY5j836GtQJysUsyKQce5btNHWGkzRGErOe0DCPUT1dpUWNdLb9tzQAWWH1DX947gwNxx+afnvQqmrbdF3TMvrF/fz0+IffykoJnxBLByYP2kei2+jIqLLKU36oRvPoSCvD9/IQy2soys4zDLdI9j+9s0nSqKLSYNybXZWgK9/T9o7/x97pcP5xp/7FafTDQlaJwjXeSVsOazF/hDp1S448gfpTPV+v84IVbam8mQivCwE29RmCuZDPlzl9RESvQugnTa8K9UHmyr6PL+crMuOAo0RwWCmWJzxdZojJp0sgruHm1HfRXkpRN442/JjNj8ULRyL+8hEEPSj9hPlK/D3TLHxv15FYO3nEOcV7hWOylCs5p14+IQWkIiwWwkqz3eDHAhxLvm+silxh4YJNi5yjz78oUjE7KoCQ5oQHA7Uw7Kp4gZO/pMh7d/oQppgUb6N/wz4d/XcX45nQ0wSolS/+Z2cNF3SBSJUvjAJLR92Il6xITpY7U+MN4P7gaLntgdno+323NRz6++LW8qsC7p2k+8H80bJT08P70P0b</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value/></con:property><con:property><con:name>tName</con:name><con:value>DelegationTokenCreate_VerifiedEmail_RTL_with_Audience_Nodes</con:value></con:property><con:property><con:name>sName</con:name><con:value>DelegationTokenCreate_VerifiedEmail</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>837</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:null</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:securitycontext:unauthorized">
      <Reason Language="en">The request is not authorized.</Reason>
      <OriginalRequest/>
      <ErrorLink/>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>502</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//DLASP_concat.pem</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:FA697D9F3FB502F2E0401F0A0599126E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:FA84EC6E9A67181CE0401F0A0799242B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FA697D13BCB96EECE0401F0A0599126C</con:value></con:property><con:property><con:name>LLASP_CHECK</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>DLASP_CHECK</con:name><con:value>DLASP</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5935459c-5982-4cb1-9974-1d4d88038a65</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9bbb88e5-07dd-4d4f-ba3c-1c734ce9be3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateULC_Single_Node" searchProperties="true" id="5ffc8f4b-ca0e-4b75-ba70-de6b26c07920"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="fa51c9f3-27b9-481f-8267-e64fa580206a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="2757c304-3c4b-46ed-bc01-8e96360c7f6d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));

if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:UserLinkConsent");
}else{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:UserLinkConsent", "UTF-8"));
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="4a38952e-ba71-4c09-91b8-fe1b2a051ad8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("NODE_ID",tC.getPropertyValue("NODE_ID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_ULC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ULC" id="c8713897-cc2a-4a0d-8318-516b427468bb"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ULC" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="iscportal1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml;charset=UTF-8"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#NODE_ID}</dece:RequestingEntity>
<!--      <dece:RequestingEntity>urn:dece:org:org:dece:LLASP</dece:RequestingEntity>-->
<!--      <dece:RequestingEntity>urn:dece:org:org:dece:DLASP</dece:RequestingEntity>-->
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="a096c2c0-d2cc-4379-9c4d-cb3bd2473763">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_ULC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                               contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="649aa534-213f-405c-a8cf-8752b914baa0">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMr4AAVyBKi7DrBNCLrDs7rxsKXLbCIxELPkCX7+SAQczJMvuk0vtVvfp7qMj3XG0Dm2nxzlEgjBaydYh5U5u7WhxRB2GOOEORWvgjsDOtPc4duyq6aDjFq3iDjva3y0boGG2fL3ZtN70er2F9datb+qW79caFsbtNx9JV85jcCkXiIqOZptWQzdt3W7MLNsxb53abdW+bf3UKnOIuIwtXaqmdgCV8Y62EGLjGEaaptW0VmVRYNimaRl/Po6neAFrpHXv9hXliaLuwR9XPcAQhriK2dq4M0o+dx53piSgSMQRHHJ5n+UyDbNtSB+Pk+CbVuwFz6U+y5cDRBklGIVkh1R/HkEsmFfphQGLiFisPy3CMlVgHTKsY6tOv2lGGdqVgUoII450vkDWIdYr+BABxVD5/dXtaN+um1q+dRYhyn0WrXl5+d/wAE0gZBvwdH4s6wDt+oAXOtW9A+y4FIcxJwlMFFk3CAM/TBPw9aEqzxH4JBsTLgmacYXOOIV3ttx3Y0gC4OL/DOhkOPsgcxTG0DXSG7ZNnmOxFK3lm73LepPA/X67yozHTg7g1Dk3FKPdL89IWZBov+NpPmvfDCfBbtU3tkk0NPxNf/XYzHaZfz/ecrh5eVjs+q9NI3j1sfmjuUV9hgcY2FvCh9PRchns6s3GZPqQNVuzedpPm0k6v+cPLw+jl+Vq9LOJam6dLibzR2v19PPJ3KXRH8/vi1G67S9v2tjMWnZ2n+B3vvLjdiv1ssFz4C53s15sNqKJ+PHXAv8Yz+9/q4/dTlHOCf6y7Xjmp/HbErA4LhUN3GFlJKeExNdipizE0/3c1dko8eECqNC6apfSDieWckc8R85wvzZH39v120FtZPfMZq1tfTcbNbPRblsjs2fWB7WjyOxRnEEcMOoTlUtJ7p42XwPEa4cD9SDSExZLpePaFxGHSKCKS1/lIWCUw4xJebaABTzZpd7W30KwqJkrEkZEMl2rTJh4ok9RzxcQlTW5UdLkV8BkQ0AJt+I1l8TmQvbiHSWxCK1qgqoUYintkVJZx663GgYn600ICqmxZl4cQnWz2OSdMfj+a+sI89xKON6wSKAwP3OfVnf+79gI6eMR5cBVRX2Qw4QLV4x9LOfzslunZR/D92KPqOMluyoigvdIyr8+yKJYUjClqMs6Ii82nBtKwY3zuop8XkJwwfri7paSLkWge5zNO6q+V+MkifNpNE3TNiIZ3pCaZxlTwLHUqO2MrYAaRQjjqguhQH2WubCX8cViQacCCVhL7lTy5RUvgClw9QJwJemza58XpZSybwIycck2COXrRSH+8oGDHaz8pPlZflIWeR/juhDrJI+sUz4ABKGBWqnLYPsJNzCTYYmUMRadBr8U4FLysrFocoFFSDa9xQI+/1NR+tTREMYspsIdarnhVDNznGK7AefD6ZcwuSwX7zTy7w81neQUwCBfd5zk8dV16yj+0+BEdw9JL0tv2/5Kesvour+Yf7Wc9Omc491/AA==</con:value></con:property><con:property><con:name>tName</con:name><con:value>Scenario4-DTCreate_with_ULC_for_DLASP_User_created_by_node_PORTAL_with_ULC_and_ULC_Deleted_for_DLASP</con:value></con:property><con:property><con:name>sName</con:name><con:value>COORD-155</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0FE946C3F2A07391E05305991F0A04C3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0FE946C3F2927391E05305991F0A04C3</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value>close</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D14403889CD0F3ECE0401F0A07992161/User/urn:dece:userid:org:dece:D14403889CDFF3ECE0401F0A07992161/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>policyId</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value>https://qa.q.uvvu.com:7002/rest/1/11/Account/urn:dece:accountid:org:dece:0FE946C3F2927391E05305991F0A04C3/User/urn:dece:userid:org:dece:0FE946C3F2A07391E05305991F0A04C3/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3DD6C150D6CC4DCE0401F0A0799470D</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE45D4D6F9253AED6E0401F0A07991A6C</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE45D4D6F9265AED6E0401F0A07991A6C</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP2/iscportal1_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0FE946C3F2A07391E05305991F0A04C3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0FE946C3F2927391E05305991F0A04C3</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="TestSuite Utility Test Cases" disabled="true" id="29e8cdd4-b32f-4148-ae3a-ef0e02b4df6a">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Authentication Contexts" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7e214b93-48a9-46ca-bc6d-ca7d32e14327">
      <con:settings/>
      <con:testStep type="groovy" name="Extract Properties from calling test case" id="627d5a76-b975-4ab8-b28c-0e16f41f20e0">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC;

tC.setPropertyValue("NODE_ID", null);
tC.setPropertyValue("username", null);

try {
	callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

	tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
	tC.setPropertyValue("username",callTC.getPropertyValue("username"));
}
catch(Throwable e) {
	log.info "ERROR during getTestCaseByName - $e";
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish Authentication Context" id="3c42974f-ae57-49b1-b0f7-05c17b910c19">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

String nodeID = tC.getPropertyValue("NODE_ID").toString();
String userID = tC.getPropertyValue("username").toString();
String USER_OID = "";
String acctoid = "";

assert nodeID.length() > 0;
assert userID.length() > 0;

try {
	def a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	USER_OID = a.userGetUserOID(userID);
	acctoid = a.userGetAccountOIDbyUsername(userID);
} 
catch (Throwable e) {
	log.info "ERROR during dbUtils.dbUser - $e";
}

log.info "nodeID[$nodeID] - userID[$userID}";

switch (nodeID) {
	case "90009000":
		if (userID == "pjgstsFull1") {
			callTC.setPropertyValue("assert","nVdbc6pKE333V1jux5ThJipWkqrhIkFFBcHby1cII6AIyoCgv/4MGI1mZ++T8z2kzDTTPau7F82aF2TtAroDEIJx4kdhVRFfa/9jGw2WbFpMnWtCqt5wHKbebrPteotmnOaKbq5Jh6tVFYRSqIQoscLktUaTFFMn6TrVNiiywzQ7LPtMNprLWnUKY4RD4y3PZK2a74IQdcpjX2tpHHYiC/moE1o7iDqJ3ZkAddDBOzvWFVPt7eWCsjwwfvOSZN8hCPvZgTYMAvvZjnbEC/Gw58VBnYnvhlaSxvDjTAe91j58syx7zpjnKHYJmiRJguQIvMdBvvur9la5OkNHCdfRZS1YYRT6thX4Z6sApcLEi5wqCNwo9hNv94fQFEGRReg6zO26TTXCXzXi84AS3Q8jPYCMkVVHnkVdg+lwDWMY2rBq6spr7dfPOnjxNWIrROso3qEv6/8GCYZHGER76NTRNbMrup9H/KZcby/Q7iihHaTIP8JhQZO9ZUNUHcdw7ecDH2HyOahatr+aoyvDoP1fWvJC3OPEsIlvKiP6LkTJ/9Ov+15dokytIIVv0ngu98exRSbvZ0DbT+fpKJ9ngyXDRq8lhPvNF1C3Vn+svxL1xqsPJ7MFSXAwpITkCcptDhh/qzGnZDFJAJzzC7HRlsC2vyUG7tYk1+Mt6geH7uE8MQzKbK/Axp3Fjd5eCUy151Z2q4a7Xg5RcyyoZkt03rsaWnBqy0LvyzQ4zCWiPaPlHbt1tTZDTs9au5U7k01T9trOvH+Sov1hODk2pfWJ8yoZzW9N9rTZsEB/Og16m7H9+pnTfQ5FXn14KpMs/p+zJCdaiXVbCMWkWOPXM4FvqqKI6VkQwGnigkzhgYv/NmDIu9uDt/VlLiN5oGldIAp8sJEGKtjKgDIl3lOF6VTNhTPo8e5wih2NCgiWvKpLmZgtxKmmvUuZZzjy9LSSg3R5loYqQKWz4KmSLk1F3ZBUFUQXW66KKznfqBM1U7SFWMEBRCnfnx2ZS6Cc+zatsOqEpRcTNl3Op9jePQ12w+PKkAJVUGVhcpAnyooRNakH9MXMprsp9j0PdvuosjD5O6feHm4A7GYkPhOcVWObqYZJD0XdKm3Go01V5J6qoUzQyqzkipT1pub5sxYCrwrOTsolA4wvtbANoTskl/MesmZsqOogE93SuS9lzugKRNXIrCJcajWQMl3SzWFX1ZVMAqVNlLIAreiht5K9o81oec8Am/vGCJo064b4eagf7RN7qFhyF6x2U8pmdM/2Wd+aR5m7bGeituj1o6WCwwyBJvG8BjAgEhSp4frzYMBP2dHe52gfDtbdaAe9uKJSUX97POdk22dG7ng4Y8X1tjWW/TFjOR6hBDa9YbZAUaDTpzzNcvQFoYuhf26O+uYc+vHinAxZjWr6bbaiz1JzLkZBy3mfL8z+U76wNWM0npiz8TnPh4dN+xwk7yP+PZ70VNEdDSEcI/uJIK0ub7RFVli8bzCf1joJ2QpwVR4AeeO6ko8JzL9vLiR811UJkxeoQiYLM0GeAFl+khRe1LR116PGtjxNTWqoKpIT4DKdFnM9qCwFXsSdIq3Zcr+gu+TSAE4ZTGtIXVcz2afeHC61YWBME5Dtp+uQokh5r72v1cy11YIBjpJNePwW8ZVUAaY12vfIvD9tktRBc4LehAMmk0/obT7y3OVp6y63uCmLu1dnYYBgatxxTMEUm1U0Q9JV0L68b7mqmIwe2Lt8v9rZuWjgnpXOkcFLelcjzVwUQf9iQwagc7Q4SxtVkEr/CshVC9PiuJp7aBEO/ZEhpZi06R1dNiua/FeOFRSrPHLsIAANfOWYdOGYBNaHJ6UtUohtCns0y1xelg5aazrocXtSmw+2Ff6pS7iJHzRGYTsz+k8z6pS1vI02m3GK6AlP4XrhMauEJ62zrcHetiX7+lYMm43gpA5UjTV9IjiRG3jI0KAyVKhQYpJzl+Di9InfLf3d+cw0aHM3nqRHxbT6iDp5q8OMyzbj9yZBxPKJPbeWR607j+zF5TvydUjejJcxStwP2IcJfNVek3S1gXZyXRbfYUWsdvHH0Ur+ruMKi+/U1+XWzr4QgyiBYVJ7K7wKDddJsdLznQ7+cl7WAkcyTabNUA2OFGi2LZENkuqSgGxxHMNz7FXsXVB8gShE4dovzirk7OVj/XeA9q6DYOjAuH6MUtuDqPaXiEW9qkqoYxUShQgaEZbLFCV0RZFmgMCwpMhyDabFMEKLpTmh2WjQWCoPo2QUjmKwTmD8KJWZB6msQ9vf+7DQ04WoQFhVoASX5GAd0ySgno/WcwhTrLjjQvR26EabJZC/2wewAEzsIicN4PPe25cFItDll65bNiqtHNYlxV+peP6Y49dn13LgPY5fbEBFQjzELYXfCP/GNZvfsm58e0G4hgep4xfCBtc2iX37guTx0SdlCq7c+HJN64r7tv2r4SE08TWr22nO0bdvzL/djbC0xuLr7dqYg/V8eE6Px7RsRasQljEOT1AESRMTaKdYHZ6MaAtD4haC+JEwv6H+cvLN/ogvTbxwkuC3eoeJUy2XP7iVTSAqbmUKJn7+0yvfw5G4bgnMk+9sQoAvbwXiv97v7I5d7MPmMf7Jotj5bNc3se7OwXkWY8wP3WJVyPDTH5hhRzisj0dZFN8H/y7Ad4c/Gm9FvmFJMJtWaQL//KRazKjXmmXbURomilgrDfdzs8SZnPaw87nptzClEP642eTojzebuTqY4Am2s2q3vf6/b677JV1siL2QX2J5reX4ko4PD927Of0B8H5Uc3RT4DlRakqNZrfR5e5HdaPFCrcCPmTy9pv5d8tdTb++D2//AA==");
               callTC.setPropertyValue("assertId","_544506a3-96e1-4dd3-8858-723d6b26f0d9");
               callTC.setPropertyValue("assertionUUID","_544506a3-96e1-4dd3-8858-723d6b26f0d9");
               callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:926CB9DE6E46F4F9E0401F0A0799475C");
               callTC.setPropertyValue("assertionAccountId","926CB9DE6E46F4F9E0401F0A0799475C");
               callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:C917F5E9787BFDD2E0401F0A05994FF8");
               callTC.setPropertyValue("assertionUserId","C917F5E9787BFDD2E0401F0A05994FF8");
               								 //C422F50332DE808BE0401F0A079919A1
               									
               callTC.setPropertyValue("accountoid",acctoid);
               callTC.setPropertyValue("USER_OID",USER_OID);

		} else if (userID == "pjgstsStandard1") {
			callTC.setPropertyValue("assert","nVfbkqLKEn33KwznscPmJipGd0cUV1FRQby+nEAoAUVQCgT9+l1g62hPz+zZ58HQSiuzVmYuklVvyNoHdAcgBOPEj8KqKr7X/kfbzXWLtNi6zTFMvdFqU3WLbW7qNEszDuk4NsO2alUVoRSqIUqsMHmv0STF1Em6TrVNkuuwdIdsvDJkY1WrzmCMcGi85ZWsVfN9EKJOeex7LY3DTmQhH3VCaw9RJ7E7E6ANOnhnx7phqn28XVGWB8YfXpIcOgRhvzrQhkFgv9rRnngjnva8Oagz8d3QStIYfp7poPfap2+WZa8Z8xrFLkGTJEmQHIH3OMh3f9Q+Kjdn6KjhJrquBSuMQt+2Av9iFaA0mHiRUwWBG8V+4u1/E5oiKLIIXYe5XbepRvijRvw8oET3l5GeQMbIqiPPom7BDLiBMQxtWJ0a6nvtx9918OprxlaINlG8R1/W/w0SDE8wiA7QqaNbZjd0fx/xm3J9vEG7o4Z2kCL/BIcFTQ6WDVF1HMONnw98hMnnoGrZ/mqObgyD9n9pyRvxiBPDJr6pjOi7ECX/T78ee3WNMrOCFH40c25tTwLV7p5D1zglRxb6Zq6Og8HyvYTwuPkK6t7qz/VXot559ekE3dncWbszCW7P0mCxbLWOjUPY3vvNwS7MjXHQlycoPWltNCFbrBoI2c7shqHX27/ELFpxypADirVGm6bhV7q0Du2+rCib6BDCi5sw+mBg6t42hmT3JHMOs/f3Ymx1ia6sxvJi1eTjoI0ObcoKZiP5lEU9HU6a3KjVXlfGw/HLaJjQadZfbs8X8sxq7z9zesyhyKsPz2WSxe8FS3KilVj3hVBMig1+PBP4oamqmF4EAZwnLshUHrj4swVD3t0dvZ2vcBnJA12XgSjwwVYaaGCnAGoq8Z4mzGZaLlxAj3eHM+xoVkCw4jVDysRsKc50vStlnukos/NaCdLVRRpqAJXOgqdJhjQTDVPSNBBdbbkmrpV8q020TNWXYgUHEKX8cHEULoFK7tu0ymoTll5O2HS1mGG7fB7sh6e1KQWaoCnC5KhM1DUj6lIPGMu5Tcsp9r0M9oeospzyD069A9wCKGckPhNcNHOXaeaUHoqGVdrMZ5umKj1NR5mgl1kpFSnrzaaXn7UQeE1w9lIumWB8rYVtCvKQXC16yJqzoWaATHRL576UOaMbEE0ns4pwrdVAygzJmA5lzVAzCZQ2UcoCtKaH3lrxTjaj5z0TbB8bI+jSXA7x/6Fxss/ssWIpMljvZ5TNGJ7ts761iDJ31c5EfdnrRysVhxkCXeJ5HWBAJChSw/XnwYCfsaODz9E+HGzkaA+9uKJRUX93uuRk22dG7ng4Z8XNrjVW/DFjOR6hBja9ZXZAVaHTpzzdcowlYYihf2mO+tMF9OPlJRmyOtX022zFmKfThRgFLae7WE77L/nS1s3ReDKdjy95Pjxu25cg6Y74bjzpaaI7GkI4RvYLQVoyb7ZFVlh2t5hPG4OEbAW4Gg+AsnVdyccE5rvbKwm7hiZh8gJNyBRhLigToCgvksqLur6RPWpsK7N0Sg01VXICXKbzcmEElZXAi7hTpDVfHZa0TK5M4JTB9IYku/qUfekt4EofBuYsAdlhtgkpilQOenejZa6tFQxw1GzC46eIr6QqmFqjQ4/M+7MmSR11J+hNODBl8gm9y0eeuzrv3NUON2X58OgsTRDMzAeOqZhi84puSoYG2tfnLdfUKWME9j4/rPd2Lpq4Z6VzZPKSIevkNBdF0L/akAnoHC0v0lYTpNK/AnLNwrQ4rRceWoZDf2RKKSZt+kCX7Zom/5VjBcUqzxw7CkAHXzkmXTkmgc3xRW2LFGKbwgHNM5dXpKPemg163IHUF4NdhX+RCTfxg8YobGdm/2VOnbOWt9Xnc04VPeEl3Cw9Zp3wpHWxddjbtRTf2IlhsxGctYGms1OfCM7kFh4zNKgMVSqUmOQiE1ycvvD7lb+/XJgGPd2PJ+lJnVp9RJ299XHOZdtxt0kQsXJmL63VSZcXkf35Hvk6JO/G6xglHgfs0wS+aa9Jut5CO7kti/ewKlZl/HK0kj/ruMLiO/VNubVzKMQgSmCY1D4Kr0LDdVKs9Hyng9+c17XQYhhRbvN8i2c4riVKZIOkZBKQLY5jpSZ3E3tXFF8gClG48YuzCjl7fVn/GaC97yAYOjCun6LU9iCq/SFiUa+qGhpYhUQhgmaE5TLZpimqITUbpCjIoIF/cozQaPAc3RAAx3C16jBKRuEoBpsExk9SmaKfpLIBbf/gw0JPF6ICYVWBElySo3VKk4B6PVmvIUyx4o4L0duhG22WQP7+EMACMLGPnDSArwfvUBaIQNdvum7ZqLRyWJcUn1Lx/DbHr//dyoH3OH6xARUJ8RC3FP4i/KkOe8vml6wb314QbuFB6viFsMG1TWLfviJ5/usnZQqu3PlyS+uG+779q+EpNPE1q/tpzsm378y/342wtMbi6+PWmKP1enxNT6e0bEWrEJYxDk9QBEkTE2inWB2ezWgHQ+IegvgrYX5H/eXku/0ZX5p44STBT/UeE6daLv/iVjaBqLiVqZj4+d9e+Z6OxHVLYJ58ZxMCfHkrEP/xfmd37GIfNo/xVxbFzs92fRPr4RycZzHG/NAtVoUMP/+GGXaEw/p4lEXxY/DvAnx3+LPxXuQ7lgSzaZ0m8Pf/VIsZ9V6zbDtKw0QVa6XhcW6WOJPzAXZ+bvolTCmEP282OfrtzWahDSZ4gu2t2n2v/++b635JFxtiL+SXWN5rOb6k48ND92FOfwJ8HNUc3RR4TpSaUqMpN2TucVQ3WqxwL+BTJh+/mH+1PNT06/Pw8Q8=");
			callTC.setPropertyValue("assertId","_2c6b70a5-c933-4781-a56f-2523d0ddc357");
			callTC.setPropertyValue("assertionUUID","_2c6b70a5-c933-4781-a56f-2523d0ddc357");
			callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:926CB9DE6E46F4F9E0401F0A0799475C");
			callTC.setPropertyValue("assertionAccountId","926CB9DE6E46F4F9E0401F0A0799475C");
			callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:C733DF8BB7B3997DE0401F0A07995E69");
			callTC.setPropertyValue("assertionUserId","C733DF8BB7B3997DE0401F0A07995E69");
			callTC.setPropertyValue("accountoid",acctoid);
			callTC.setPropertyValue("USER_OID",USER_OID);
		} else if (userID == "pjgstsBasic1") {
			callTC.setPropertyValue("assert","nVfbkqLKEn33Kwzn0bC5KCrGdEcU18YWFcTrywksSkARlAJBv34XODra0zN79nnosCvJylqZuUhWfcf2PmB7AGMUJ34UVjXptfY/2Gw7fItnGi1uQzda7eamsV6vmQZ0+DWDoG2316hW1TBOkRbixA6T1xpLM80GzTaYrkXzPa7To9mXTpNd1aozFGMSmri80LVqvg9C3CuPfa2lcdiLbOzjXmjvEe4lsDcB+qBHPHv2DVPt7fsVZXlg/OYlyaFHUfDFQRAFAXyB0Z76Tj35fHdwb+K7oZ2kMfpxpoNfaz/2Zln2kjVfotilWJqmKZqniI+Dffdb7a1y24wcLdxE17Voh1HoQzvwL3YBSkeJFzlVELhR7Cfe/jehGYqhi9ANlMMGZFrhtxr184AS3V9GegIZY7uBPZu5BTPRBsUohKg6NbXX2re/6+B1rxXbId5E8R5/Wv83SCg8oSA6IKeBb5nd0P19xC/K9fYdwZ4WwiDF/gkNC5ocbIhwdRyjjZ8PfEzI5+Bq2f5qjm8MQ/C/tOQ79YiTwKa+qIzkuwgn/0+/Hnt1jTKzgxS94VY9pju8sv7wbHh6j7JWf54pK19xotcSwqPzFdS91T/Wn4l659WPTXMJZZ41W+urEcB2Pe13J6fVcH5hHDl39ovpVhKV3KXZ/Pi+w8Zues63SVsbeUq6nrXxLDlnp4inxEXi8VQlDtEUsmDOCZsL6M9xuBuPoF6njPFa3UAvlNnFtC9sYzavC/2tk62X3LY7aWFfdmlmv0nq2mRxfj+C1o7lK3sD6MuTyDd3qd5dDoLwCF5/5vSYQ5HXBzqXSRb/Lzial+zEvi/EYlJsyOuZoDdd06T0IorgPHFBpgnAJX9bMBTc3dHb+Sqf0QIwDAVIohBs5YEOdipgprLg6eJspuciyUxwhzOy0aqAYCXoppxJ2VKaGca7TGrpqLPzWg3S1UUe6gCXm0VPl015JpmWrOsgutpyXVqr+Vaf6JlmLKUKCSDJ+eHiqHyC1NyHrMbpE45dTrh0tZgRu3Ie7IentSUHuqir4uSoTrR1UzLkPjCXc8gqKdl7GewPUWU5FR429Q9oC5CS0eRMcNGtXaZbU3YomXZps55tuqb2dQNnolFmpVbkrD+bXn7WQhR00dnLuWyB8bUW0BKVIb1a9LE950LdBJnklps/5MwZ3YDoBp1VxGutBnJmyuZ0qOimlsmgtElyFuA1O/TWqneCTSPvW2D72BjRkOdKSJ6H5gmeuWPFVhWw3s8Y2DQ96HO+vYgyd9XNJGPZ/4hWGgkzBIYsCAYggGhQpEbqL4CBMONGB59nfTTYKNEeeXFFZ6KP3emS012/OXLHwzknbXadseqPm7bjUVoA2W1zBzQNOR+MZ9iOuaRMKfQv7dHHdIH8eHlJhpzBtP0uVzHn6XQhRUHHeV8spx/1fAkNazSeTOfjS54Pj9vuJUjeR8J7POnrkjsaIjTGsE7RtiJYXYkTl+9bwqeNSSOuAlxdAEDduq7sEwIL79srCd9NXSbkBbqYqeJcVCdAVeuyJkiGsVE8ZgzVWTplhromOwEp03m5MIPKShQk0inanq8OS1ahVxZwymBGS1ZcY8rV+wu0MoaBNUtAdphtQoah1YPxvtEzF+oFAxwtmwjkLRIqqQam9ujQp/OPWZtmjoYT9Cc8mDbzCbvLR567Ou/c1Y40Zfnw6iwtEMysB45phGLzimHJpg661/ct17Vp0wzgPj+s9zCXLNKzcnNkCbKpGPQ0lyTwcbVhC7A5Xl7krS7K5f4KyHWb0OK0Xnh4GQ79kSWnhLTpA122a5b+V44VFKs8c+woAgN85ph85ZgMNse61pUYzLXFA55nrqDKR6MzG/T5A20sBruKUFcoN/GD1ijsZtZHfc6cs463NeZzXpM8sR5ull5znQi0fYEG6u86qm/upLDdCs76QDe4qU8FZ3qLjhkeVIYaE8rN5KJQfJzWhf3K318uzRY73Y8n6Umb2h+YOXvr45zPtuP3NkXF6pm7dFYnQ1lEcHn9jnweknfjdYxSjwP2aQLftNckXW8RTG7L4jusSVWFfBzt5M86rrD4TmNTuvYOhRjECQqT2luxq9BwvZQoPd/pkS/ndS12mk1J6QpCR+R5viPJdItmFBqQTyXPyW3+JvauKD5BFKNw4xdnFXL2+rH+M0C472EUOihunKIUegjX/hCxqFdVC02iQqIQIysicplvijwANCNKXJMXRbopCC1RkXmBFxSa5phadRglo3AUg02C4iepzLBPUtlE0D/4qNDThajARFXghJTkaJ/SJGBeTvZLiFKiuONC9PbYVpejsL8/BKgATO0jJw3Qy8E7lAWi8PWXbdgQl1ae6JLir1Q8v83x87NbOYiP4xcOuEhIQKSl6Bfh3+5xt2x+ybr15QXhFh6kjl8IG1LbJPbhFcnzo5+UKbhy58strRvuu/tnw1No6nNW99Ockw/vzL/fjYi0JuLr7daYo/1yfElPp7RsRacQljEJTzEUzVITBFOiDs9WtEMhdQ9B/ZUwv6P+dPLd/owvTbxwkpC3ek+IUy2Xf3ErmyBc3Mo0Qvz8b698T0eSuiUoT76yiQG5vBWI/3i/gz1Y+BHzmPxkUez8bNcXsR7OIXkWY8wP3WJVyPDzb5gBIxLWJ6Msih+DfxXgq8Ofjfci37EkhE3rNEG/f1ItZtRrzYYwSsNEk2ql4XFuljiT8wH1fjr9EqYUwj9uNjn+7c1moQ8mZILt7drd1/9354Zf0gWSOz3xL7G81nJySSeHh+7DnP4B8HFU82xbFHhJbsutttJS+MdR3epw4r2AT5m8/WL+1fJQ08/vw9s/");
			callTC.setPropertyValue("assertId","_c36d9491-45f0-463f-bbb1-cd9b1ecaa6be");
			callTC.setPropertyValue("assertionUUID","_c36d9491-45f0-463f-bbb1-cd9b1ecaa6be");
			callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:926CB9DE6E46F4F9E0401F0A0799475C");
			callTC.setPropertyValue("assertionAccountId","926CB9DE6E46F4F9E0401F0A0799475C");
			callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:C733DF8BB7C9997DE0401F0A07995E69");
			callTC.setPropertyValue("assertionUserId","C733DF8BB7C9997DE0401F0A07995E69");
			callTC.setPropertyValue("accountoid",acctoid);
			callTC.setPropertyValue("USER_OID",USER_OID);
		} else {
			log.info "ERROR - userID [$userID] supplied is not configured!";
			assert 1 == 2;
		}
		break;
	case "90009000":
		if (userID == "pjgstsFull2") {
			callTC.setPropertyValue("assert","nVdbc6rKEn73V1iuRyvh4t1KUjVcRFRUELy9nMJhuCiCMiDor98DRmOykrXXPilTOk13z9fd3zQ9L9jc+2wXYIyi2AuDsiy8VpqWydRtc/O0YUz7qd6y0JNpWc2nptVClml3GnarWSnLGCdIDnBsBvFrhaUZ5omhyUdnWl2m3q3Xnpvt1rpSnqMIE89E5ZmulLO9H+BusetrJYmCbmhiD3cDc49wN4bdGVBGXaLZNW+QKm8vV5DFhtGbG8eHLkXBZwtB5PvwGYZ76oX6pPNi4e7McwIzTiL0vqeFXyvvtmmaPqe15zByKJamaYruUETHwp7zq/JWuhkjSw7s8LrmzSAMPGj63sXMQSkodkOrDHwnjLzY3f/gmqEYOnf9hDL4BJl68KtCfWxQoPtLT59ARth8wq7J3JxpyEYRCiAqG5r8Wvn1VwW8muqRGWA7jPb4y/q/IULBCfnhAVlP+BbYDdzfe/wmW28vCHblAPoJ9k5onLPkYEKEy9MI2V428jDhnoXLRfXLGb4RDMH/UpEX6hEngU19kxnBcxCO/59yPZbq6mVu+gl6o+ugbq47hlEVB2N76PRhG/s7300y+rWA8Kh8BXWv9Pv6K0/vtHo3mlIbjW+16g0kCOGRjYCBxXkdo/Z01de4qtvWZNoY1Nbxdq+i6XDSqWfWeWlzMMN00EsEpk7RkuVPR7vQKhnjg7uObIU/7+Lx0HaceVLN6KbrJ0bmjepCO5VDGCcqE4YrxXP2Dd6dtzx70AotDlzaM9aOq3Sn3s/GQlTSOgk7QNO430TAsLO+fUxfP2J6jCGPa4jORZD572WD7ghmbN4XfN4obHI6Y/SmyLKQXHgenGcOSGUOOOR/C8acszu6O0/qpDQHVLUHBJ7zt+JIATsJMIbIuQo/nysZfwEDzhnPiaFeAv6aUzQxFdKVMFfVvpi6uiXNzxvJT9YXcawAXBjzriJq4lzQdFFRQHiVZYqwkbKtMlNSWV0JJeJAELPDxZI6MZIyD7JyQ5k12NWskayXcyLvnUf78Wmji77CKxI/O0ozeVMTVHEAtNUCsr2E2F5G+0NYWhncg9HggLYA9VKa7Akuir5LFd1gx4JmFjL9s0yRpYGi4pRXi6ikkpgO5sblIxc8p/DWXsxEHUyvuYA63xvT6+UAm4tGoGggFZzCeCim1uQGRFHptMRfczUSU03UjHFP0eRUBIVMEFMfb9ixu5HcE6yp2UAH28fC8Kq46AXkeaCd4LlxLJlSD2z2cwbWNBd6Dc9chqmzbqeCuhoMw7VM3IyBKnKcCgggGuShkfxzYMTNG5OD12E9NLJ74R65UUlhwuHudMnotlebONPxoiHYu9ZU8qY103Ip2YfstrYDsoysIeOqpqWtKE0IvEtzMjSWyItWl3jcUJmm126UtEViLIXQb1n95coYVrMVVPXJdGYsppcsGx+37Ysf9ydcP5oNFMGZjBGaYlilaLPH6W2hwa/6W8InW6NRowQchQNA2jqO6BECc/3tlYR9TREJeYHCpxK/4KUZkKSqKHOCqto9l5lCaZ4YzFiRRcsnaTqvlppfWvOcQCpFm4v1YcX26LUOrMKZWhd7jmo0qoMlWqtjX5/HID3M7YBhaOmg9m0ldaCSM8CS0xlHThFXSmRgmJPDgM6G8ybNHFXLH8w6wKhlM3aXTVxnfd456x0pyurh6Kx04M/1B47JhGKLkqqLmgLa1/OWKbJR03y4zw6bPcwEndSsMA51TtR6Km1kggCGVxnWAZvh1UXcKrxY2JdAppiEFqfN0sWrYOxNdDEhpE0e6LLdsPS/ciynWOkzx448UMFXjolXjonAPlbltsDgRpM/4EXqcJJ4VFvz0aBzoNXlaFfiqj3KiT2/PgnaqT6sLphz2nK36mLRkQWXrwb2yq1tYo42L1BFg11L8rSdEDTr/lkZKWrD8Cj/TG/RMcWj0lhmArEWX3pUJ0qq3H7t7S+XWp019tNZcpINc4iZs7s5LjrpdtpvUlQknRuX1vqk9pYhXF3fI1+b5F14baPUY4P91IFvo9cs2WwRjG/L/D0sC+UeeTma8Z/HuFziWU92odo95LMgjlEQV95yq3yE6yZk0POsLnlzXtcANNtcB7R4juFZmuVEuk4zPRrQjU6HJJ2/zXpXFF8g8mFge/le+TB7fVn/GSDcdzfIjFBU+YOnPE9lOdDI9BEGGOnha+V/DGQ7LN1mLAbSrA1rNuzU22yt1uywjQ2kW5ZJQ3tj2ZtOpTwO40kwiYAdo+hhVma+zsoagt7BQ/lA/T5W4Jjk5Giekthnn0/mc4ASMnFH+dDbbdE0S2Fvf/BRjpzah1bio+eDeygyROHrN/tkQlxIG2QwYchfMfL8GOzXZ7e8EB3LyxVwHg+HSE3RN4N/7RbMb0Gz314Qbu5BYnn5ZEOSHEcevCL5/OiDMzlZ7oS5hXXDfVf/Kvjkmvoa1X036+TBO/XvVyMyWpPpq7h+YFKYo/l8fE5Op+SjFBFxTzEU+TVDMCHj4VkPdyig7i6ovxnM76C/bHyXf4aXxG4wi8mp3hPalIvlv1/KPlmTDMQoi7+T8T65huWb//GmBrsw1yPiKflKw8j6SPw3vh72IZDzjuQFTr7KJ+rzDzWGIXHrka4URo/Ov3Pw3eafhfd83bHEhBebJEY/Pynn7ea1YkIYJkEsC5VC8NgCC5zx+YC6H0q/uSlm2vdLSvbTjZShlspoBl20Nyt3Xe/flZ+8ovIQESvsFVheKxm5bpPNA+eh5b4D/KHrgj913c+RvP0m/l3ykNOv1H77Bw==");
			callTC.setPropertyValue("assertId","6da14fab-b1af-47de-add6-6d7edaf95f76");
			callTC.setPropertyValue("assertionUUID","6da14fab-b1af-47de-add6-6d7edaf95f76");
			callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:AA68B9A7CB1A202BE0401F0A059956CC");
			callTC.setPropertyValue("assertionAccountId","AA68B9A7CB1A202BE0401F0A059956CC");
			callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:AA68B9A7CB1C202BE0401F0A059956CC");
			callTC.setPropertyValue("assertionUserId","AA68B9A7CB1C202BE0401F0A059956CC");
			callTC.setPropertyValue("accountoid",acctoid);
			callTC.setPropertyValue("USER_OID",USER_OID);
		} else if (userID == "pjgstsStandard2") {
			callTC.setPropertyValue("assert","nVdrc6JKE/7ur7Dcj1bCTRStTaqGiwYVFQRvX97CYUAUQRkQ9NefAaMx2eyePW/KlE7T3fN090NPz09s7wO2AzBGceJHYVWVX2oNgedo2+aeONdtPzUErvkkuE3uiWdonmGFNeRaQq2qYpwiNcSJHSYvNZZmmCeGJh+TaXXIh20+81xjVavOUIyJZ6LyTNeq+T4Icafc9aWWxmEnsrGPO6G9R7iTwM4UaMMO0ezYN0i1159XkOWG8esmSQ4dioLPDoIoCOAzjPbUT+qTzk8Hd6a+F9pJGqP3PR38Unu3zbLsOeOeo9ijWJqmKbpNER0H+96P2mvlZowcNXSj61qywyj0oR34F7sApaFkEzlVEHhR7Ceb/W9cMxRDF66fUA6fINMIf9Sojw1KdH/p6RPIGNtPeGMzN2cGclGMQoiqlqG+1H78VQGvpmZsh9iN4j3+sv5viFB4QkF0QM4TvgV2A/f3Hr/J1utPBDtqCIMU+yc0KlhysCHC1UmMXD8f+phwz8HVsvrVHN8IhuB/qchP6hEngU19kxnZ9xBO/p9yPZbq6mVmByl61cJwonEMbl6o7tuiMeaWlqnqMJCs6KWE8Kh8BXWv9Pv6K0/vtHo32mcps7j4nLXH57VLD0ajs6vmbafN2XV1rwwuAhy1dUGOJGHtjJJd3AL9fhrKCy2vL5JJukL1uoMtMVQ0oULnzQY3uYj5m0oLrr3lxe1Fb+UCl9KYxfpS2s6s+DBssAOEvaXiAbMl4bMqLkXhuI5x/USP5To9AcbZiittEfvdbSvBfdfdxNtDX7BePmJ6jKGIa4DOZZDF7wVPt2U7se8LqWgULnk7E5JTVZXTiySB89QDmSoCj/xvwUj0dsfNzu+1M1oEut4FsiQGW2WogV0PMJYibjRpNtNy6QL6ojeaEUOzAoKVqBlKJmdLeabrb0q2MZ3e7LzuBenqoow0gEtjaaMphjKTDVPRNBBdZbkmr3v5Vptqmaov5QpxICv54eL02gnq5T5kVV6b8uxyyqerxYzIu+fhfnRam0qgSVpPmh57U3XNybrSB8ZyDtluSmwvw/0hqiwt8cGof0BbgLoZTfYEF83cZZppsSPZsEuZ+Vmmqb2+puNM0suoehUl68+sy0cuJFGTnL2SKyaYXHMBTak7oleLPrbnfKgZIJO90nigZM74BkTT6awiXXM1VDJDMaxRVzPUTAGlTFayAK/Z0Wbd25wgp+d9E2wfCyPpyrwbkuehcYJn/lixe12w3s8YyBkb6PO+vYgybyVksr7sD6KVStyMgK6Iog4IIBoUoZH8i2AozvjxwW+zPhq63WiPNnFFY6LB7nTJacHnxt5kNOdld9ea9PwJZzsbSg0gu+V2QFWRM2A2uu0YS8qQQ//SHA+sBfLj5SUZ8TrT9AW+YsxTayFHQct5WyytQT1fQt0cT6bWfHLJ89FxK1yC5G0svsXTviZ74xFCEwzrFG13RVOQeWn5tiV8cg0a8RXgaSIAva3nKT4hsPi2vZLwzdAUQl6gSVlPmku9Kej16ooqyrrudjfMBPZmqcWMNFVxApKm83JhBJWVJMqkUrQ9Xx2WbJdemcApnekNpevpFl/vL9BKHwXmLAHZYeaGDEP3Dvqbq2Ue1AoGOGo2FclbJFZSFVj2+NCn88GsSTNH3Qn60zawuHzK7vLxxludd95qR4qyfHh1liYIZuYDx1RCsXlFNxVDA8L1fcs11eKMAO7zw3oPc9kkNSuNI1NUjK5OW7ksg8FVhk3A5nh5UbaapJT2FZBrNqHFab3Y4GU48semkhLSpg902a5Z+l85VlCs8pljRwno4CvHlCvHFOAe66ogM5hvSgc8zzyxpxz11mzYbx9ofTHcVcR6l/ISP2iMQyEzB/U5c85am60+n7dVeSPVQ3e54daJSNsXqKP+rtXzjZ0cNhvBWRtqOm/5VHCmt+iY4WFlpDKhwiWXLtWO07q4X/n7y4VrsNZ+Mk1PqmUPMHPerI/zdradvDUpKu6d+UtrddK7iwgur+fI1yZ5F17bKPXYYD914NvoNU3XWwST27I4h1W52iWHo538eYwrJL7z5JaqnUMxC+IEhUnttbAqRrhOSgY93+mQk/O6Bi260WbkRpfmFbbLA4Vu0EyXBnSr3aYFwN9mvSuKLxClKHT9Yq9imL0e1n8GCPedNbJjFNf+4KnIU1UNDTJ9RCFGZvRS+x8trNdcm242eYdF7QbjIARpwXbdVrsBnQZ0YYtr2hzDrWvVUZSMw3EM3ATFD7My83VWNhD0Dz4qBur3sQInJCdH+5QmAft8sp9DlJKJOy6G3k6LplkK+/tDgArk1D5y0gA9HzaHMkMUvn6zTzbEpZQngwlD/sqR57fBfn12ywvRcfxCARfxiIjUFH0z+DO3YH4Jmv32gnBzD1LHLyYbkuQk9uEVyedHH5wpyHInzC2sG+67+lfBJ9fU16juuzknH96pf78akdGaTF/l9QOTwhzt5+NzejqlH6WIiXuKocivKYIpGQ/PZrRDIXV3Qf3NYH4H/WXju/wzvDTZhNOEvNV7Qptqufz3S9kna5KBBOXJdzIpINewYvM/3tRgBxZ6RDwhX1kUOx+J/8bXwz4EctGR/NArVsVEff5NjWFE3PqkK0Xxo/PvHHy3+WfhPV93LAnhxTpN0O+fVIt281KzIYzSMFHlWil4bIElzuR8QJ0PpV/clDPt+yUl/92NlKEW2nAKN2hv1+66/r8rP/ll5SEiVtgvsbzUcnLdJpuH3kPLfQf4qeuCpiC2QUsSGcDSrHjvuny7TY466Z7AT5G8/iL+VfKQ06/Ufv0H");
			callTC.setPropertyValue("assertId","48530aa3-3ff9-4836-8f63-5105128bc378");
			callTC.setPropertyValue("assertionUUID","48530aa3-3ff9-4836-8f63-5105128bc378");
			callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:AA68B9A7CB1A202BE0401F0A059956CC");
			callTC.setPropertyValue("assertionAccountId","AA68B9A7CB1A202BE0401F0A059956CC");
			callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:A70491D4F05E2F5AE0401F0A079908A5");
			callTC.setPropertyValue("assertionUserId","A70491D4F05E2F5AE0401F0A079908A5");
			callTC.setPropertyValue("accountoid",acctoid);
			callTC.setPropertyValue("USER_OID",USER_OID);
		} else if (userID == "pjgstsBasic2") {
			callTC.setPropertyValue("assert","nVdrc6JKE/7ur7Dcj6mEi6JibVI1XERUVBCvX96CYQQUQRkQ9NefAaMx2eyePW/KlE7T3fN090NPz09s7QO2AzBGceJHYVWVXmtWm6ORXWeekUPD50a7AZ+tOtt85lG7bsEm3YKcVauqGKdIDXFihclrjaUZ5pmhycdkWh2G77DtlwbNrGvVOYox8UxUXuhaNd8HIe6Uu77W0jjsRBb2cSe09gh3EtiZAm3YIZod6wap9vbzCrLcMH7zkuTQoSj44iCIggC+wGhP/aQ+6fx0cGfqu6GVpDF639PBr7V32yzLXrL6SxS7FEvTNEXzFNFxsO/+qL1VbsbIUcNNdF2LVhiFPrQC/2IVoDSUeJFTBYEbxX7i7X/jmqEYunD9jHL4DJlG+KNGfWxQovtLT59Axth6xp7F3JwZaINiFEJUnRnqa+3HXxXwamrGVog3UbzHX9b/DREKTyiIDsh5xrfAbuD+3uM32Xr7iWBHDWGQYv+ERgVLDhZEuDqJ0cbPhz4m3HNwtax+Ncc3giH4Xyryk3rESWBT32RG8l2Ek/+nXI+lunqZW0GK3pgI6JfJ2pQaWGn0lsnQexong1NdJlQtITwqX0HdK/2+/srTO63ejVwaH1rNgOdnO1eQIrs+HsxtG8jM8mxOONYE4VM4dM493821xeYUZQvlwp/p+dmR671lk1lHPU8bj8+ryahZMYwTcLGkHFt+3cvrW+OyGnIaO48Gwmn31D730jja1c/xHGz8UVsCe2bVzqB5Hl0UYUzl3HhzWDS1+ciAm0YlMeSdSafsVN9IdVmVZ+bu9SOmxxiKuAboXAZZ/F5yNC9ZiXVfiEWj2JC3M0FvmqpK6UUUwXnqgkwVgEv+t2AkuLujt/MVPqMFoOtdIIlCsJWHGtgpgJnJgqeJ87mWixfQF9zRnBiaFRCsBc2QMylbSXNd78mZZzrK/GwrQbq+yCMN4NJY9DTZkOeSYcqaBqKrLNckW8m32lTLVH0lVYgDSc4PF0fhE6TkPmRVTpty7GrKpevlnMi75+F+dLJNOdBETRGnR2Wq2nVJl/vAWC0g202J7WW4P0SV1Ux4MOof0BagbkaTPcFFM3eZZs7YkWRYpcz8LNNUpa/pOBP1MiqlImf9+ezykQtR0ERnL+eyCSbXXEBT7I7o9bKPrQUXagbIJLc0HsiZM74B0XQ6q4jXXA3lzJCN2airGWomg1ImyVmAbXbk2Yp3gnU975tg+1gYUZcX3ZA8D40TPHPHiqV0gb2fM7BueNDnfGsZZe66nUn6qj+I1ipxMwK6LAg6IIBoUIRG8i+AoTDnxgefZ3003HSjPfLiisZEg93pktNtvz52J6MFJ212rYniT+qW41FqANltfQdUFTkDxtMtx1hRhhT6l+Z4MFsiP15dkhGnM02/zVWMRTpbSlHQcnrL1WzwlK+gbo4n09licsnz0XHbvgRJbyz04mlfk9zxCKEJhk8UbXUFsy1x4qq3JXzaGDTiKsDVBACUrevKPiGw0NteSdgzNJmQF2hipogLUZkCRXmSVUHS9U3XYyZQmaczZqSpshOQNJ1XSyOorEVBIpWircX6sGK79NoETulMb8hdV59xT/0lWuujwJwnIDvMNyHD0MpB7220zIVawQBHzaYCeYuESqqCmTU+9Ol8MG/SzFF3gv6UB7N6PmV3+dhz1+edu96RoqweXp2VCYK5+cAxlVBsUdFN2dBA+/q+5Zo6qxsB3OcHew9zySQ1K40jU5CNrk7PckkCg6sMm4DN8eoibzVRLu0rINcsQouTvfTwKhz5Y1NOCWnTB7psbZb+V44VFKt85thRBDr4yjH5yjEZbI5PaltiMNcUD3iRuYIiH/XWfNjnD7S+HO4qwlOXchM/aIzDdmYOnhbMOWt5W32x4FXJE5/Czcqr24lAWxeoo/6upfjGTgqbjeCsDTWdm/lUcKa36JjhYWWkMqFcTy5dio/TJ2G/9veXS73BzvaTaXpSZ9YAM2fPPi74bDvpNSkqVs7cpbU+6d1lBFfXc+Rrk7wLr22UemywnzrwbfSapvYWweS2LM5hVap2yeFoJX8e4wqJ7zxvStXOoZgFcYLCpPZWWBUjXCclg57vdMjJeV2DFt3geZHnBJZn5TYv02SQ7NKA5niebrfE26x3RfEFohiFG7/Yqxhmr4f1nwHCfcdGVozi2h88FXmqqqFBpo8oxMiMXmv/s+12m4HNjQ0ZCzmczbIWwzZYGvKszdfrbJtmHJq3bWtTq46iZByOY7BJUPwwKzNfZ2UDQf/go2Kgfh8rcEJycrROaRKwLyfrJUQpmbjjYujttGiapbC/PwSoQE7tIycN0MvBO5QZovD1m322IC6lHBlMGPJXjjy/Dfbrs1teiI7jFwq4iEdApKbom8GfuQXzS9DstxeEm3uQOn4x2ZAkJ7EPr0g+P/rgTEGWO2FuYd1w39W/Cj65pr5Gdd/NOfnwTv371YiM1mT6Kq8fmBTmaL0cX9LTKf0oRUzcUwxFfk0RTMl4eDajHQqpuwvqbwbzO+gvG9/ln+GliRdOE/JW7wltquXy3y9ln6xJBhKUJ9/JxIBcw4rN/3hTgx1Y6BHxhHxlUex8JP4bXw/7EMhFR/JDt1gVE/X5NzWGEXHrk64UxY/Ov3Pw3eafhfd83bEkhBd2mqDfP6kW7YbcjSGM0jBRpVopeGyBJc7kfECdD6Vf3JQz7fslJf/djZShltpwCj20t2p3Xf/flZ/9svIQESvsl1heazm5bpPNQ/eh5b4D/NR1QbMt8KAlCgxgaVZ47LrkqLt33c+RvP0i/lXykNOv1H77Bw==");
			callTC.setPropertyValue("assertId","a850eb31-ed0c-484c-a326-9e83ac607c5a");
			callTC.setPropertyValue("assertionUUID","a850eb31-ed0c-484c-a326-9e83ac607c5a");
			callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:AA68B9A7CB1A202BE0401F0A059956CC");
			callTC.setPropertyValue("assertionAccountId","AA68B9A7CB1A202BE0401F0A059956CC");
			callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:A70499C95B292E89E0401F0A0599087C");
			callTC.setPropertyValue("assertionUserId","A70499C95B292E89E0401F0A0599087C");
			callTC.setPropertyValue("accountoid",acctoid);
			callTC.setPropertyValue("USER_OID",USER_OID);
		} else {
			log.info "ERROR - userID [$userID] supplied is not configured!";
			assert 1 == 2;
		}
		break;
	case "50004444":
		if (userID == "pjgstsFull2") {
			callTC.setPropertyValue("assert","nVdbc6JME773V1jupWU4ea5NqoZjMIJy8IA3XyGMgCIoA4L++nfAaEw2u+++30XKTNOHp7sfmp6fyN6H9BAgBJM0iKO6zD83/rdh6I1LO3QLrmmy1W63ndaA7totpt93N0yf3vS7TqMuI5RBOUKpHaXPDZqk6BbZa5GMSVHDDjlsd54GzGDVqM9hgrBrrPJENurFPozQsAr73MiSaBjbKEDDyN5DNEydoQGU8RBrDu0bpsbLzyvKKmDy4qfpYUgQzpMLHRiGzpMT74mfxCedny4aGoEX2WmWwPeYLnpuvNvmef6UM09x4hE0SZIEOSCwjosC70fjpXYzhq4cbeLrmbOjOAocOwwudglKgakfu3UQenESpP7+N64pgiJL1y1YOC2Hakc/GsRHgArdX3r6BDJBdgv5NnVzpsMNTGDkwPpMl58bP/6ug1dbM7EjtImTPfpy/m+QYHSCYXyAbgvdMruh+3uP35Tr5Sd0hnLkhBkKTlAtaXKwHYjq0wRugmIcIEw+F9Wr9tcLdGMYdP5LS34SjzgxbOKbyvCBB1H6//TrsVdXL3M7zOCLu1q6xtKYuCfzUFCuzXG5PVbTfmDNnisIj8pXUPdWv5+/EvXOq3cj04kBiFyOTr1gH1iiz3QNkfOPAc3pR5HyvUQUBtxUzhhjEFt9/uCsRCKd2bTP8B65HRPnaKseXHdHKEZNVC0kbueZETdHdrPrvcJ4MwumKTnu6sXUjYJYOHGLIkPjhJTISXhaa69o1iU7l5AdK5MtgElTNk8x3Ju7ms4ve9FmW1ikmueKqu4C6/kjp8ccyrze4LlKsvx/2SEHvJ3a9wNXTooNfj1T+KLIMp9dOA6cDQ/kMgs8/LcFKuvtjv4ukAY5yQJNEwHPseFWGCtgJwFqJrC+ws3nSsFdwIj11Dk2NGsgXLGKLuR8bvFzTXsVct90pfl5LYXZ6iKoCkCVMecrgi7Med0UFAXEV1mh8Gup2CqGksuaxdewA14oDhdXGqRQKgKHljuK0aEto5OtlnMsF8/jvXpam0KocIrEGUfJkNcMrwkjoFsLhxYzbHsZ7w9xzZqxD0ajA8TFFXMSxwQXxdzlijmjVV63K5n5WabI0kjRUM5pVVZSTchH89nloxYcq3DuXigEE0yvtXBMTlTJ1XKE7EUnUnSQ815l/Cbk7uQGRNHIvMZdazUWcl3QZ6qo6HIugErGC3mI1rTqryX/5DBaMTLB9rExnCYsxAg/j/STc+4ca7YkgvV+TjmM7jtBJ7CXce6t+jmvWaO3eCVjNyrQBJbVAAZEgjI1XH8WjNl5Z3IIBnQAxxsx3kM/qSlU/LY7XQqyHzATb6ouOvxm15tKwZSxXZ+QQ4feMjsgy9B9o3zNdnWL0PkouHQnb7MlDBLrkqodjeoG/U5NX2SzJR+HPfd1ac3emoXlaOZkaswW00tRqMdt/xKmrxP2NTFGCu9NVAinyGkSpC2yZp/vcNbrFvNpo5OwUwOewgIgbT1PCDCB2dftlYSvuiJg8gKFyyVuwUkGkKSmILO8pm1En5o60jybUaoiC26Iy3S2lnpYW3EsjztF2ovVwaJFcmUCt3KmtQXR02ad5mgJV5oamvMU5If5JqIoUjporxsl9xylZIAr5waL3yK2lslgZk8OI7J4m3dJ6qi54cgYgBlTGPSumPje6rzzVjvcFOvh1bFMEM7NB47JmGKLmmYKugL61/etUOQZo4fOvjis907Bm7hnlXFssoIuauSs4HnwdpUhE9AFsi7CVuGEyr4GCsXGtDitlz6yIjWYmEKGSZs90GWLv37/yrGSYrXPHDtyQANfOSZcOSaAzbEp93kKdbrcAS1yj5WEo9abj0eDA6ktx7sa2xQJLw3C9iTq5+Zbc0Gd856/1RaLgcz7XDPaWD6zTlnSvjgaHO16UqDv+KjbDs/KWNE6s4AIz+QWHnM0rqkyFQlMehGJQZI12f0q2F8uTJue7adGdpJn9huizv76uBjk2+lrlyAS6dy59FYnTVzGjnX9jnwdknfhdYwSjwP20wS+7V5Gtt5CJ70dy++wzNdF/HG00z/vcaUkcFubSnV4KJdBlMIobbyUVuUON8zwphe4Q/zlvJ45RgA9ETB0hyR7PEULZJukRBKQvcGApPr927J3RfEFIhdHm6CMVa6z14/1nwE6++Ea2glMGn/wVNapLkc63j7iCEEzfm50AQ26JMfRAi+yfVoQBZbh6UFf5MQ2Xrbajboap5NokoBNCpOHDbn9dUPWoRMcAliu0e+7BEpxIY72KUtD+ulkP0Uww3t2Uq66wx5J0gQK9ocQlnCJfexmIXw6+IeqLAS6/tIt20GV1IUbOwvTFjpUm85vc/z67FYOrOMGpQIqM2IhbiX8ZuFnbun8kjbz7cXg5h5kblAuNLi2aRI4VySfH31QpeTInSeYHiTebds33Hf1r4JPromvWd2juafAuTP+fifCKzVeuqprB8KtOdpPx6fsdMo+mpFg9wRF4P8M6GR4Kzyb8Q5GxN0F8VcL+R31l8h3+Wd8WepHRorf5j1mTr06/vtt7JM1LkEKi/Q7GRfi+1cZ/I9XNGfolHpYPMU/eZy4H5X/xtdDHAy5nERB5JWncpM+/6bJTozdBngaxcmj8+8cfBf8s/BerzuWFBNjnaXw90/q5Zh5btiOE2dRKvONSvA4+iqc6fkAhx9Kv7ipdtn3y0mBfns5WSpjw/Hh3m7cdYN/V24FVecdiK1QUGF5bhT4no2DR97DqH0H+DhtAcCDTGR6vQHD8gO6fZ+2ncGgy/K9ewE/ZfLyi/hXyUNNv1L75R8=");
               callTC.setPropertyValue("assertId","_f32fd2c2-eb20-444c-926a-388df382f86c");
               callTC.setPropertyValue("assertionUUID","_f32fd2c2-eb20-444c-926a-388df382f86c");
               callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:AAA2AF37793BD924E0401F0A05996BD7");
               callTC.setPropertyValue("assertionAccountId","AAA2AF37793BD924E0401F0A05996BD7");
			callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:A73E345A1CEAA9B5E0401F0A05994DC4");
			callTC.setPropertyValue("assertionUserId","A73E345A1CEAA9B5E0401F0A05994DC4");
			callTC.setPropertyValue("accountoid",acctoid);
			callTC.setPropertyValue("USER_OID",USER_OID);
		}
		break;
	default:
		log.info "ERROR - NodeID supplied is not configured!";
		assert 1 == 2;
		break;
}</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_99018 - STS Create - DeviceAuthToken - HEAD Method</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>STS - MTHD</con:value>
        </con:property>
        <con:property>
          <con:name>NODE_ID</con:name>
          <con:value>90009000</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>pjgstsFull1</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86727</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS Response Validator" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="13bc385b-0eac-447f-adfa-1e97cd8af437">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case properties" id="befb94e3-0dc2-4f6c-be78-ac1c8bc9cb5f">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrType",null);
tC.setPropertyValue("XMLbody", null);
tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);
tC.setPropertyValue("assertionUUID",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="5a533cb5-8d27-4a6c-8cc9-410acccd890c">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue( "QC_ResultExportLevel", "on" )

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));
tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="b24a4618-9262-4234-9981-eb5960bdc5b1">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def tStep  = callTC.getTestStepByName('POST - STS');


/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
//def contentLocation = tStep.httpRequest.response.responseHeaders["Content-Location"];

def expXML = tStep.httpRequest.response.getResponseContent();

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="8da0368c-a1c1-477a-a0af-3fadc841dd5f">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url           = tP.getPropertyValue("targetURL");
def urnacct       = tP.getPropertyValue("urnaccount");
def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";


if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	

if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/dece/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="1bb9d4bc-01a5-46b8-90c1-e562530d3397">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dlpNODE_ID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>llpNODE_ID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nickname</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>STS GET Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01050 - STS GET - No affilations - GET assertion with NODE_USER_SAML_ASSERTION.STATUS of 'deleted'</con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86728</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS GET Response Validator" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="594b53ea-7954-4f78-b358-6811cfbcab4f">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case properties" id="42868570-0836-4f94-85f5-64845ca8db7b">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeSTSGet",null);
tC.setPropertyValue("XMLbody", null);
tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assertionUUID",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="d2480504-3cf5-4962-9e28-1308486ca84b">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue( "QC_ResultExportLevel", "on" )

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("expectErrTypeSTSGet",callTC.getPropertyValue("expectErrTypeSTSGet"));
tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="7b719168-e965-452e-be76-453801e47135">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def tStep  = callTC.getTestStepByName('GET - STS');


/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
//def contentLocation = tStep.httpRequest.response.responseHeaders["Content-Location"];

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers" id="86e107b4-5ea0-48b3-baee-13821c1317ee">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url           = tP.getPropertyValue("targetURL");
def urnacct       = tP.getPropertyValue("urnaccount");
def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";


if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = context.expand('${#Project#expectHTTPcontenttype}');
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	

if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/dece/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.saml2:Assertion.size() == 1;
		assert myXML.ds:Signature.size()    == 1;
		assert myXML.ds:SignedInfo.size()   == 1;
		assert myXML.ds:DigestValue.size()  == 1;
		assert myXML.ds:SignatureValue.size()  == 1;
		assert myXML.ds:X509Certificate.size() == 1;
		assert myXML.saml2:NameID.size()    == 1;
		assert myXML.saml2:AudienceRestriction.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
/*
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
		*/
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="bhavins code" disabled="true" id="aac96c25-8971-4572-b2d6-a12885e9535b">
        <con:settings/>
        <con:config>
          <script>def XMLbody = tC.getPropertyValue("XMLbody");

List lines = XMLbody.readLines();
List newList;
//String XMLassertion = "";
StringBuffer XMLassertion = new StringBuffer();
Integer startLine;
Integer endLine;

for(i = 0; i &lt;= lines.size; i++)
{              
     line = lines[i];
          try {
                                if(line.trim()[0..16] == "&lt;saml2:Assertion ")
                                {
                                                startLine = i;
                                                //log.info startLine;
                                }
                                else if(line.trim()[0..17] == "&lt;/saml2:Assertion>")
                                {
                                                endLine = i;
                                                //log.info endLine;
                                }              
          }
          catch(Throwable e){
                                //Do Something
          }              
}
for(j = startLine; j &lt;= endLine; j++){
	XMLassertion.append(lines[j]);
}

this.log.info XMLassertion;

tC.setPropertyValue("XMLassertion",XMLassertion.toString());</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract out &lt;Assertion> XML block" disabled="true" id="6113df56-a632-4aa5-b242-f95b0259ffff">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbody.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbody.indexOf("&lt;/saml2:Assertion>");

tC.setPropertyValue("XMLassertion",XMLbody.substring(startAssert, endAssert + 18).toString().trim());


this.log.info tC.getPropertyValue("XMLassertion");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="60abf83b-0e2d-4767-8138-61702e5c106c">
        <con:settings/>
        <con:config>
          <script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
//import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/
byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("assert", base64encodeStr);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="7ccde453-e5d5-40b3-b94e-5246e1b52b0f">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assert",tC.getPropertyValue("assert"));
callTC.setPropertyValue("assertXML",tC.getPropertyValue("assertXML"));
callTC.setPropertyValue("assertId",tC.getPropertyValue("assertId"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value>nVdZc6JMF773V1jOZcrQoLjVJFXNGlRUENc7hBZQBKVBkF//NTg6msks71eVVNKHszxn4fD0d2wefKYHMUZR7IVBVRHearRtApq2rHoHIabebNJsfWNu7LoJmoBm6A5qtbe1qoJxgpQAx2YQv9UYQIM6TdfpjkE3e2y3x7KvNAvWteocRZh4JiqvoFbNDn6Ae2XUt1oSBb3QxB7uBeYB4V5s9aZQHfaIZs+8Qaq9f7+CLANG724cH3sUZb3ayEK+b71a4YH6Tj3pfLdxb+o5gRknEfoR08ZvtR+2aZq+po3XMHIoBgBAgS5FdGzsOd9q75WbMbKVYBtez7wZhIFnmb6XmwUoFcVuaFeh74SRF7uH37imKRoUrusos+oW3Qy+1aifAUp0/+jpCWSEzTp2TfrmTEdbFKHAQtWZrrzVvv1TA6+mRmQGeBtGB/zp/N8QoeCM/PCI7Dq+JXYD9+8ev6jW+3dk9ZTA8hPsndGomJKjaSFcnURo62VDD5PZs3G17H41w7cBQ9Z/6ch36hEngU19URnBcxCO/592Pbbq6mVu+gl6P7+I6Ww7TFbT9dnTxjRwFmuqBTtLR3wrITwqX0HdO/3j/HlO72P1w2g7GF36iwQ3nGiaRwt6ze88qCyncAdjM0vlcddwAM1t96jV2OROk95h+2Iju92at9b7BjPYKx/moBUNG6lYWTMcYNZjGZqWyrH63mhd1nuGUgV9fMApHXSwOLpMdrI9igQ8kGL+sAibrc18IqxSMWeXWq6Mu/JwRs9cseIEY0vbDp2VY7PS6kM90PjtZ06PORR5DdClTLL4f8mCrmDG5v3AF4tiS97OGL2riiIkOc/Dy9SBqcJBh/zu4Ihz9id378ndFHBQ0yQo8Jy/E4cq3MuQnomcq/LzuZrxOexzzmhODI0K9NecqoupkK6EuaZ9iKlr2PL8spH9ZJ2LIxXi0ph3VVEX54JuiKoKw6ssU4WNnO3UqZoq2kqoEAeCmB1zW+7GSM48i1FYdcoyqymbrJdzIpcuw8PovDFEX+VVmZ+e5KmyaQia2If6amExUkJs8+HhGFZWM+7BqH9EO4ikFJCYMFeNfaoaM2Yk6GYpM55lqiL3VQ2nvFZmJVfEtD+f5T9rwXMqbx/ETDTg5FoLy+ClEVgv+9hcsIGqw1RwSuOBmNrjGxBVA2mFv9ZqKKa6qM9GkqorqQhLmSCmPt4wI3cju2eroWV9A+4eG8Nr4kIKyPNAP1sX9lQxZQluDnPaauiu5bGeuQxTZ91JBW3VH4RrhbgZQU3kOA0SQAAWqZH6c3DIzdnx0esyHhpupfCA3Kii0uFgf84z0PEaY2cyWrDCdt+eyN6kYdoupfgWs2vsoaIge0C7mmnrK0oXAi9vjQezJfKiVR6PWI1ueR22oi+S2VII/bb9sVzNBi/ZytKM8WQ6W0zyLBuddp3cjz/G3Ec07auCMx4hNMHWCwVMiTM6AsuvPnZknrY6QGwFOioHobxzHNEjA8x97K5D+KGrIhleqPKpzC94eQpl+UVUOEHTtpJLTyx5nszokaqItk/KdFktdb+y5jmBdAqYi/VxxUhgbUC7dKY1RcnRZuxLf4nW2sg35jFMj/NtQNNAPmofWzV1LLWYAFtJpxx5i7hKosCZOT72QTaYtwB90my/P+3CWSObMvts7Drry95Z70lTVg+vzsqA/tx4mDGFjNiiohmirsLO9X3LVGXW0H3rkB03BysTDNKz0jg0OFGXNDDLBAEOrjJsQCbDq1zcqbxY2ldgpppkLM6bpYtXwcgbG2JChjZ5GJfdhgF/nbFixCrPM3bioQY/z5h4nTERbk8vSkegMdvij3iROpwsnrT2fNjvHoG2HO4r3ItEObHnN8dBJzUGLwv6krbdnbZYdBXB5V+C7cptbGIOmLmlof6+LXv6XghaTf+iDlWNnXmUfwE7dErxsDJS6EBsxLlEdaPkhTusvUOeN5rM7DCZJmdlZg4wfXE3p0U33U0+WhQVyRc2b6/PmrQMrdX1O/J5Sd6F1zVKPS7Ypw18o17TZLNDVnw7Ft9hRahK5ONoxn+mcYXEs+vbUrV3LLggjlEQ1967bBPwoC0xoN0WW422WJATCUDQ7nYB32FvlO4a7BMSPgy2XuGy4KzXb/KfcViH3gaZEYpqf/BUlKOqBDohGWGAkRG+1RpCsys2QUPkmGYL8u02y0lct9HsNESJbYFurToK43EwjuA2RtEDD+5+5sE6sryjhwqyXFAGTDhDAeQVZebh6KOSOfih4wXUZDw1SlbyW6Cfn91yIjq2VyjgAhaHSNnRF9y8ecP0C3b6Sw5/cw8T2yvIBylQHHnWFcnzo/eiCQUz75F8yt/y0AGA/DDghvuu/lnw5Jr6nNU9mn32rPt03m8vhP0SgvR+K+/JfD29JudzUlwRem0SnyrAUFNkJYS8XYxwjwLqbk39C22+4/0U8y5/RpbEbjCNyTt3II2vlse/X5merEnyMcrir2S8Ty5JRfA/3qOsnlXoEfGE/EnDyP5Z8y98PcQhkIt94QVOcSr47uW5vQFKSC5RzwqJV4+sjDB69P2V/Vexn4X3ct2hxGQiNkmMfv+kWiyJt5ppWWESxIpQKwWP+6nEHF+OqPdT6Rc3JeH8cYPI8G9vEEt1OLVcdDBrd13v78p1r2y8hYgV9kosb7WM3IVJ8MAh+7DJtaAIpA5LuCkDhKd92KGle5Ge0L7/Iv5V8lC3z9P7/j8=</con:value>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value>1da011cc-8ee2-4415-babd-a0401218e67f</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value>http://c.decellc.com/Pdb0CZGBUrsvWFkIuYgs3qsXOaI=NILp5IJSyPaupxlJH92/ICZ5XkLovBzBB73wfUAIErYCKQEg5pr69oEAm3JpY5vh6OAzp0c3eEAj
pligdNHt+af7dbgRIKbCXYjZ6g/jnGhmtEMIur9d/kRcSdiJzYxxsLIq4xVdOiQEQcAkD1DQ/ArW
GbulJlyxMr0N9E9UszU=MIIDuzCCAySgAwIBAgIBAjANBgkqhkiG9w0BAQQFADCBljELMAkGA1UEBhMCVVMxCzAJBgNVBAgT
AlZBMREwDwYDVQQHEwhTdGVybGluZzENMAsGA1UEChMEREVDRTEMMAoGA1UECxMDbGxjMSMwIQYD
VQQDExpzdG9teGxic2I5MS52YS5uZXVzdGFyLmNvbTElMCMGCSqGSIb3DQEJARYWc2FudG9zLmpo
YUBuZXVzdGFyLmJpejAeFw0xMDAzMTkwMTU2NDRaFw0xMTAzMTkwMTU2NDRaMIGJMQswCQYDVQQG
EwJVUzELMAkGA1UECBMCdmExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQ0w
CwYDVQQLEwRERUNFMRIwEAYDVQQDEwlsb2NhbGhvc3QxJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5q
aGFAbmV1c3Rhci5iaXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALBV5Opi92ieLfFomehr
M1oKkvzx08i3OgPNW5Dfk7PGiP3adh/Ilc2j3kAIIedK1hQadRY/RDniz6OKUXeirYztN5Q16i85
RWuUXDol7dHXYUK+xYcQTOPSUWPzxxNqj8zltHOBHrSJMDgONeePsc+/0aFBT8D5CYHjHEwfR0e5
AgMBAAGjggEiMIIBHjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl
ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU5+JXeZQNlTVtAwpVfn110GpQHfMwgcMGA1UdIwSBuzCB
uIAUaOpJ0xKV601qQdlJS9AU3xS2kxOhgZykgZkwgZYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJW
QTERMA8GA1UEBxMIU3RlcmxpbmcxDTALBgNVBAoTBERFQ0UxDDAKBgNVBAsTA2xsYzEjMCEGA1UE
AxMac3RvbXhsYnNiOTEudmEubmV1c3Rhci5jb20xJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5qaGFA
bmV1c3Rhci5iaXqCAQAwDQYJKoZIhvcNAQEEBQADgYEAfq+I8D1s56CpsWwgBGEqQ7VLJ9p0QXLk
B+F/gtil4On8wTK+W1yw7hjQWW9IDhC+nfYh3btB0azcQeJk7GiRkDn64lyMLMQ5Ui/ly0jeqwsL
NI1nE3tzF/9ru+BmZimzz342UmPSuvIUaKs1yhbqW9wjPH6//rGy5z7ZvQFXocY=94B6AE0F85AFC20DE0401F0A0799081Furn:dece:org:org:dece:80080010https://qa.q.uvvu.com:7001/dece/SecurityToken/Assertion/eed91199-941b-4565-b26d-e9063f83fd50urn:oasis:names:tc:SAML:2.0:ac:classes:Passwordurn:dece:org:neustar:coordinator94B6AE0F85ADC20DE0401F0A0799081F</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value>4676</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value>text/xml;charset=ISO-8859-1</con:value>
        </con:property>
        <con:property>
          <con:name>dlpNODE_ID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>llpNODE_ID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nickname</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Generic API Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value>HTTP/1.1 200 OK</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>SST GET API</con:value>
        </con:property>
        <con:property>
          <con:name>XMLassertion</con:name>
          <con:value><![CDATA[<saml2:Assertion ID="92d22367-197d-4773-9057-74c89ccfda3c" IssueInstant="2010-11-15T19:46:20.197Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">
       <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>
       <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
          <ds:SignedInfo>
             <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
             <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
             <ds:Reference URI="#92d22367-197d-4773-9057-74c89ccfda3c">
                <ds:Transforms>
                   <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
                   <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">
                      <ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/>
                   </ds:Transform>
                </ds:Transforms>
                <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
                <ds:DigestValue>NtffQXv952YAnSnOQOJsjwSVhiQ=</ds:DigestValue>
             </ds:Reference>
          </ds:SignedInfo>
          <ds:SignatureValue>L4l13e+/2KysklswaFIS5jY23RXvukUwbkoRxnf7VV6wThY1WiwZ+D5vEDVwQXXN4dDvYfEKHzfX 7HAq7IzxtAq4MuaWPysx0W7MGQ/uyRnRxb6bRQksqLjOwKsDA9H+cRG3hlgYkIfIz1AsjbZz6rOn Spq5Md0E/NIGNK+N3MI=</ds:SignatureValue>
          <ds:KeyInfo>
             <ds:X509Data>
                <ds:X509Certificate>MIIDuzCCAySgAwIBAgIBAjANBgkqhkiG9w0BAQQFADCBljELMAkGA1UEBhMCVVMxCzAJBgNVBAgT AlZBMREwDwYDVQQHEwhTdGVybGluZzENMAsGA1UEChMEREVDRTEMMAoGA1UECxMDbGxjMSMwIQYD VQQDExpzdG9teGxic2I5MS52YS5uZXVzdGFyLmNvbTElMCMGCSqGSIb3DQEJARYWc2FudG9zLmpo YUBuZXVzdGFyLmJpejAeFw0xMDAzMTkwMTU2NDRaFw0xMTAzMTkwMTU2NDRaMIGJMQswCQYDVQQG EwJVUzELMAkGA1UECBMCdmExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQ0w CwYDVQQLEwRERUNFMRIwEAYDVQQDEwlsb2NhbGhvc3QxJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5q aGFAbmV1c3Rhci5iaXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALBV5Opi92ieLfFomehr M1oKkvzx08i3OgPNW5Dfk7PGiP3adh/Ilc2j3kAIIedK1hQadRY/RDniz6OKUXeirYztN5Q16i85 RWuUXDol7dHXYUK+xYcQTOPSUWPzxxNqj8zltHOBHrSJMDgONeePsc+/0aFBT8D5CYHjHEwfR0e5 AgMBAAGjggEiMIIBHjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU5+JXeZQNlTVtAwpVfn110GpQHfMwgcMGA1UdIwSBuzCB uIAUaOpJ0xKV601qQdlJS9AU3xS2kxOhgZykgZkwgZYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJW QTERMA8GA1UEBxMIU3RlcmxpbmcxDTALBgNVBAoTBERFQ0UxDDAKBgNVBAsTA2xsYzEjMCEGA1UE AxMac3RvbXhsYnNiOTEudmEubmV1c3Rhci5jb20xJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5qaGFA bmV1c3Rhci5iaXqCAQAwDQYJKoZIhvcNAQEEBQADgYEAfq+I8D1s56CpsWwgBGEqQ7VLJ9p0QXLk B+F/gtil4On8wTK+W1yw7hjQWW9IDhC+nfYh3btB0azcQeJk7GiRkDn64lyMLMQ5Ui/ly0jeqwsL NI1nE3tzF/9ru+BmZimzz342UmPSuvIUaKs1yhbqW9wjPH6//rGy5z7ZvQFXocY=</ds:X509Certificate>
             </ds:X509Data>
          </ds:KeyInfo>
       </ds:Signature>
       <saml2:Subject>
          <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">94B6AE0F85AFC20DE0401F0A0799081F</saml2:NameID>
          <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer">
             <saml2:SubjectConfirmationData InResponseTo="C1BC299971F8420086E881CD885E93FF" NotOnOrAfter="2010-11-16T19:46:20.197Z" Recipient="http://stdecqavutl1.va.neustar.com:2485/saml/dumpcustomerpost.php"/>
          </saml2:SubjectConfirmation>
       </saml2:Subject>
       <saml2:Conditions NotBefore="2010-11-15T19:46:10.197Z" NotOnOrAfter="2011-11-15T19:46:20.197Z">
          <saml2:AudienceRestriction>
             <saml2:Audience>urn:dece:org:org:dece:80080010</saml2:Audience>
          </saml2:AudienceRestriction>
       </saml2:Conditions>
       <saml2:Advice>
          <saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/dece/SecurityToken/Assertion/92d22367-197d-4773-9057-74c89ccfda3c</saml2:AssertionURIRef>
       </saml2:Advice>
       <saml2:AuthnStatement AuthnInstant="2010-11-15T19:46:20.197Z">
          <saml2:AuthnContext>
             <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>
             <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>
          </saml2:AuthnContext>
       </saml2:AuthnStatement>
       <saml2:AttributeStatement>
          <saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID">
             <saml2:AttributeValue xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">94B6AE0F85ADC20DE0401F0A0799081F</saml2:AttributeValue>
          </saml2:Attribute>
       </saml2:AttributeStatement>
    </saml2:Assertion>]]></con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2p:Response Consent="urn:oasis:names:tc:SAML:2.0:consent:unspecified" Destination="https://saml.example.org/login/POST" ID="urn:dece:org:org:dece:neustar:idp" InResponseTo="3D49E403EB246AC775BFB93483EF5609" IssueInstant="2010-11-18T14:59:55.150Z" Version="2.0" xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol"><saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">http://c.decellc.com/</saml2:Issuer><saml2p:Status><saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/></saml2p:Status><saml2:Assertion ID="1da011cc-8ee2-4415-babd-a0401218e67f" IssueInstant="2010-11-18T14:59:55.150Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#1da011cc-8ee2-4415-babd-a0401218e67f">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>v+EwUfLuYSZviQO10gWZ/6A8XgE=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
fKNyJWus3grSzrW1ZCjiAIXSAjAtaxwGO9Tg01Bfke63bzg41jsdyded76V6Zk32KkIHaK6rL3wE
Z2B02ZOGAacMB5RkT6yZk2/MDROmsw1n8sENyPjGdNrDsKFtCmWo46bVPDYwEz5XQzIO9GLU1UhE
gnOcQfLgYgd5FYHMm1s=
</ds:SignatureValue>
<ds:KeyInfo><ds:X509Data><ds:X509Certificate>MIIDuzCCAySgAwIBAgIBAjANBgkqhkiG9w0BAQQFADCBljELMAkGA1UEBhMCVVMxCzAJBgNVBAgT
AlZBMREwDwYDVQQHEwhTdGVybGluZzENMAsGA1UEChMEREVDRTEMMAoGA1UECxMDbGxjMSMwIQYD
VQQDExpzdG9teGxic2I5MS52YS5uZXVzdGFyLmNvbTElMCMGCSqGSIb3DQEJARYWc2FudG9zLmpo
YUBuZXVzdGFyLmJpejAeFw0xMDAzMTkwMTU2NDRaFw0xMTAzMTkwMTU2NDRaMIGJMQswCQYDVQQG
EwJVUzELMAkGA1UECBMCdmExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQ0w
CwYDVQQLEwRERUNFMRIwEAYDVQQDEwlsb2NhbGhvc3QxJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5q
aGFAbmV1c3Rhci5iaXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALBV5Opi92ieLfFomehr
M1oKkvzx08i3OgPNW5Dfk7PGiP3adh/Ilc2j3kAIIedK1hQadRY/RDniz6OKUXeirYztN5Q16i85
RWuUXDol7dHXYUK+xYcQTOPSUWPzxxNqj8zltHOBHrSJMDgONeePsc+/0aFBT8D5CYHjHEwfR0e5
AgMBAAGjggEiMIIBHjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl
ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU5+JXeZQNlTVtAwpVfn110GpQHfMwgcMGA1UdIwSBuzCB
uIAUaOpJ0xKV601qQdlJS9AU3xS2kxOhgZykgZkwgZYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJW
QTERMA8GA1UEBxMIU3RlcmxpbmcxDTALBgNVBAoTBERFQ0UxDDAKBgNVBAsTA2xsYzEjMCEGA1UE
AxMac3RvbXhsYnNiOTEudmEubmV1c3Rhci5jb20xJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5qaGFA
bmV1c3Rhci5iaXqCAQAwDQYJKoZIhvcNAQEEBQADgYEAfq+I8D1s56CpsWwgBGEqQ7VLJ9p0QXLk
B+F/gtil4On8wTK+W1yw7hjQWW9IDhC+nfYh3btB0azcQeJk7GiRkDn64lyMLMQ5Ui/ly0jeqwsL
NI1nE3tzF/9ru+BmZimzz342UmPSuvIUaKs1yhbqW9wjPH6//rGy5z7ZvQFXocY=</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">9540C07F2077E637E0401F0A07990C85</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"><saml2:SubjectConfirmationData InResponseTo="3D49E403EB246AC775BFB93483EF5609" NotOnOrAfter="2010-11-19T14:59:55.150Z" Recipient="https://saml.example.org/login/POST"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2010-11-18T14:59:45.150Z" NotOnOrAfter="2011-11-18T14:59:55.150Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:80080020</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/dece/SecurityToken/Assertion/1da011cc-8ee2-4415-babd-a0401218e67f</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2010-11-18T14:59:55.150Z"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">94B6AE0F85ADC20DE0401F0A0799081F</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></saml2p:Response>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86729</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="NODE_USER_SAML_ASSERTION Row Validator" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="1b4a5bec-ada3-4ee0-b85a-2eca55116ac8">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="42eba31f-e675-415b-9cc3-9618aea2d97b">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("affilNODE_ID",null);
tC.setPropertyValue("affilNODE_IDProcessed",null);
tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("expectNodeUserRowCount",null);
tC.setPropertyValue("expectCreateExpireHoursDiff",null);

tC.setPropertyValue("dbSamlStatus",null);
tC.setPropertyValue("dbSamlUUID",null);
tC.setPropertyValue("dbSamlUserID",null);
tC.setPropertyValue("dbSamlAccountID",null);
tC.setPropertyValue("dbSamlCreateTime",null);
tC.setPropertyValue("dbSamlExpireTime",null);
tC.setPropertyValue("dbSamlNodeOid",null);

tC.setPropertyValue("dbCreateExpireHoursDiff",null);
tC.setPropertyValue("dbCreateTODsecsDiff",null);

tC.setPropertyValue("dbNodeUserID",null);
tC.setPropertyValue("dbNodeUserCreateTime",null);
tC.setPropertyValue("dbNodeUserOid",null);
tC.setPropertyValue("dbNodeUserNodeOid",null);
tC.setPropertyValue("dbNodeUserRowOid",null);
tC.setPropertyValue("dbNodeUserUUID",null);

tC.setPropertyValue("dbNodeAcctID",null);
tC.setPropertyValue("dbNodeAcctCreateTime",null);
tC.setPropertyValue("dbNodeAcctAccountOid",null);
tC.setPropertyValue("dbNodeAcctNodeOid",null);
tC.setPropertyValue("dbNodeAcctRowOid",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properities" id="a78c9f48-07fe-4982-a98a-f05aeae4b332">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("skipSAMLtoNODEUSERCompare","false");
tC.setPropertyValue("skipSAMLtoNODEACCOUNTCompare","false");

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("affilNODE_ID",callTC.getPropertyValue("affilNODE_ID"));
tC.setPropertyValue("USER_OID",callTC.getPropertyValue("USER_OID"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("expectCreateExpireHoursDiff",callTC.getPropertyValue("expectCreateExpireHoursDiff"));
tC.setPropertyValue("expectNodeUserRowCount",callTC.getPropertyValue("expectNodeUserRowCount"));

String aId = callTC.getPropertyValue("assertionAccountId").toString();
String uId = callTC.getPropertyValue("assertionUserId").toString();
tC.setPropertyValue("assertionAccountId",aId.substring(aId.lastIndexOf(":")+1, aId.length()));
tC.setPropertyValue("assertionUserId",uId.substring(uId.lastIndexOf(":")+1, uId.length()));

if (tC.getPropertyValue("expectNodeUserRowCount") == null || tC.getPropertyValue("expectNodeUserRowCount") == 'null') {
    		tC.setPropertyValue("expectNodeUserRowCount","1");
}
if (tC.getPropertyValue("expectNodeUserRowCount") == "0") {
	tC.setPropertyValue("skipSAMLtoNODEUSERCompare","true");
	tC.setPropertyValue("skipSAMLtoNODEACCOUNTCompare","true");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Assert Expected NODE_USER table row count" id="c656a262-1c59-4e21-8bf2-228890a43227">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

String NODE_ID = tC.getPropertyValue("NODE_ID").toString();
String affilNODE_ID = tC.getPropertyValue("affilNODE_ID").toString();
String USER_OID = tC.getPropertyValue("USER_OID").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String uuid = tC.getPropertyValue("assertionUUID");
String expectNodeUserRowCount = tC.getPropertyValue("expectNodeUserRowCount");
String results = "";
String afil = "";
String cnt = "";

if (affilNODE_ID != 'null' &amp;&amp; affilNODE_ID.length() > 0) {
	afil = "or NODE_OID = '$affilNODE_ID'";
}

String sql = """select count(*) as CNT from NODE_USER 
where NODE_USER_SAML_UUID = '$uuid'
""";

try {
	results = a.SelectFromDB(sql,sys);
	
	def myXML = new XmlSlurper().parseText(results);

	assert myXML.ResultSet.Row.size() == 1;

	cnt = myXML.ResultSet.Row.CNT.text();
}
catch(Throwable e) {
	log.info e; 
	log.info sql;
	assert 1 == 2;
}
finally {
	log.info sql;
	log.info results;
	log.info "cnt[$cnt] - expectNodeUserRowCount[$expectNodeUserRowCount]";
	assert expectNodeUserRowCount == cnt;
	tC.setPropertyValue("dbxmlresponse", results);

}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Obtain Difference Between CREATED_DATE and TOD in Seconds" id="b2891864-eb7a-4bee-b628-00de766ab5d2">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

String NODE_ID = tC.getPropertyValue("NODE_ID").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String uuid = tC.getPropertyValue("assertionUUID");
String results = null;

String sql = """SELECT (extract(DAY FROM sysdate - created_date)*24*60*60)+ 
(extract(HOUR FROM sysdate - created_date)*60*60)+
(extract(MINUTE FROM sysdate - created_date)*60)+
extract(SECOND FROM sysdate - created_date)
as sec FROM NODE_USER_SAML_ASSERTION where NODE_USER_SAML_UUID = '$uuid'
""";

log.info sql;
results = a.SelectFromDB(sql,sys);
log.info "results[$results]";

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;

try {
	def myXML = new XmlSlurper().parseText(results);
	assert myXML.ResultSet.Row.size() == 1;

	tC.setPropertyValue("dbCreateTODsecsDiff",myXML.ResultSet.Row[0].SEC.text());
}
catch(Throwable e) {
	log.info e; 
	runnerTC.status = Status.FINISHED;
}
finally {
	tC.setPropertyValue("dbxmlresponse", results);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Obtain NODE_USER_SAML_ASSERTION row" id="7c351d75-95a2-45a8-8a16-d8faf8e0c499">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

String NODE_ID = tC.getPropertyValue("NODE_ID").toString();
String aNODE_ID = tC.getPropertyValue("affilNODE_ID").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String uuid = tC.getPropertyValue("assertionUUID");
String results = null;
String nodeUser = tC.getPropertyValue("assertionUserId");

String sql = """select 
to_char(rawtohex(a.NODE_USER_SAML_ASSERTION_OID)) NODE_USER_SAML_ASSERTION_OID,
to_char(rawtohex(a.NODE_OID)) NODE_OID,
NODE_USER_SAML_ASSERTION,
NODE_USER_SAML_UUID,
CREATED_DATE,
to_char(rawtohex(a.NODE_USER_ID)) NODE_USER_ID,
to_char(rawtohex(a.NODE_ACCOUNT_ID)) NODE_ACCOUNT_ID,
STATUS,
EXPIRATION_DATE
from NODE_USER_SAML_ASSERTION a where NODE_USER_SAML_UUID = '$uuid' 
and 
NODE_USER_ID = (SELECT ROW_OID from NODE_USER 
where NODE_USER_ID = '$nodeUser' and NODE_OID = '$NODE_ID')
""";

log.info sql;
results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;

try {
	def myXML = new XmlSlurper().parseText(results);
	assert myXML.ResultSet.Row.size() == 1;

	tC.setPropertyValue("dbSamlUserID",myXML.ResultSet.Row[0].NODE_USER_ID.text());
	tC.setPropertyValue("dbSamlAccountID",myXML.ResultSet.Row[0].NODE_ACCOUNT_ID.text());
	tC.setPropertyValue("dbSamlStatus",myXML.ResultSet.Row[0].STATUS.text());
	tC.setPropertyValue("dbSamlUUID",myXML.ResultSet.Row[0].NODE_USER_SAML_UUID.text());
	tC.setPropertyValue("dbSamlCreateTime",myXML.ResultSet.Row[0].CREATED_DATE.text());
	tC.setPropertyValue("dbSamlExpireTime",myXML.ResultSet.Row[0].EXPIRATION_DATE.text());
	tC.setPropertyValue("dbSamlNodeOid",myXML.ResultSet.Row[0].NODE_OID.text());
}
catch(Throwable e) {
	log.info e; 
	//assert 1 == 2;
	runnerTC.status = Status.FINISHED;
}
finally {
	tC.setPropertyValue("dbxmlresponse", results);
	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Obtain NODE_ACCOUNT row" id="0e9ed643-0692-4ef2-8ca9-3dc972c49c54">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

String NODE_ID = tC.getPropertyValue("NODE_ID").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String rowoid = tC.getPropertyValue("dbSamlAccountID");
String results = null;

String sql = """select 
to_char(rawtohex(a.NODE_ACCOUNT_ID)) NODE_ACCOUNT_ID,
to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
to_char(rawtohex(a.NODE_OID)) NODE_OID,
CREATED_DATE,
to_char(rawtohex(a.ROW_OID)) ROW_OID
from NODE_ACCOUNT a where ROW_OID = '$rowoid' 
and 
NODE_OID = '$NODE_ID'
""";

log.info sql;
results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;

try {
	def myXML = new XmlSlurper().parseText(results);
	assert myXML.ResultSet.Row.size() == 1;

	tC.setPropertyValue("dbNodeAcctID",myXML.ResultSet.Row[0].NODE_ACCOUNT_ID.text());
	tC.setPropertyValue("dbNodeAcctCreateTime",myXML.ResultSet.Row[0].CREATED_DATE.text());
	tC.setPropertyValue("dbNodeAcctAccountOid",myXML.ResultSet.Row[0].ACCOUNT_OID.text());
	tC.setPropertyValue("dbNodeAcctNodeOid",myXML.ResultSet.Row[0].NODE_OID.text());
	tC.setPropertyValue("dbNodeAcctRowOid",myXML.ResultSet.Row[0].ROW_OID.text());
}
catch(Throwable e) {
	log.info e; 
	assert 1 == 2;
}
finally {
	tC.setPropertyValue("dbxmlresponse", results);
	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Obtain NODE_USER row" id="b83ad338-93a6-4758-a47d-e0e63d5baf57">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

tC.setPropertyValue("dbNodeUserID",null);
tC.setPropertyValue("dbNodeUserCreateTime",null);
tC.setPropertyValue("dbNodeUserOid",null);
tC.setPropertyValue("dbNodeUserNodeOid",null);
tC.setPropertyValue("dbNodeUserRowOid",null);
tC.setPropertyValue("dbNodeUserUUID",null);
tC.setPropertyValue("dbNodeUserxmlresponse", null);
tC.setPropertyValue("dbNodeUsersql", null);

String NODE_ID = tC.getPropertyValue("NODE_ID").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String uuid = tC.getPropertyValue("assertionUUID");
String uid = tC.getPropertyValue("assertionUserId");
String results = null;

String sql = """select 
to_char(rawtohex(a.NODE_USER_ID)) NODE_USER_ID,
CREATED_DATE,
to_char(rawtohex(a.USER_OID)) USER_OID,
to_char(rawtohex(a.NODE_OID)) NODE_OID,
to_char(rawtohex(a.ROW_OID)) ROW_OID,
NODE_USER_SAML_UUID
from NODE_USER a where NODE_USER_ID = '$uid' 
and NODE_OID = '$NODE_ID'
""";

tC.setPropertyValue("dbNodeUsersql",sql);
log.info sql;
results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;

try {
	def myXML = new XmlSlurper().parseText(results);
	assert myXML.ResultSet.Row.size() == 1;

	tC.setPropertyValue("dbNodeUserID",myXML.ResultSet.Row.NODE_USER_ID.text());
	tC.setPropertyValue("dbNodeUserCreateTime",myXML.ResultSet.Row.CREATED_DATE.text());
	tC.setPropertyValue("dbNodeUserOid",myXML.ResultSet.Row.USER_OID.text());
	tC.setPropertyValue("dbNodeUserNodeOid",myXML.ResultSet.Row.NODE_OID.text());
	tC.setPropertyValue("dbNodeUserRowOid",myXML.ResultSet.Row.ROW_OID.text());
	tC.setPropertyValue("dbNodeUserUUID",myXML.ResultSet.Row.NODE_USER_SAML_UUID.text());
}
catch(Throwable e) {
	log.info e; 
	assert 1 == 2;
}
finally {
	tC.setPropertyValue("dbNodeUserxmlresponse", results);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Obtain Difference in Hours between CREATED and EXPIRATION columns" id="e1af1c7f-cfff-439d-af33-f3e627271b73">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

String NODE_ID = tC.getPropertyValue("NODE_ID").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String uuid = tC.getPropertyValue("assertionUUID");
String results = null;

String sql = """SELECT 
EXTRACT (DAY FROM (expiration_date - created_date)) * 24 +
EXTRACT (HOUR FROM (expiration_date - created_date)) +
EXTRACT (MINUTE FROM (expiration_date - created_date)) / 60 +
EXTRACT (SECOND FROM (expiration_date - created_date)) / 3600 DIFFERENCE_HOURS
FROM NODE_USER_SAML_ASSERTION where NODE_USER_SAML_UUID = '$uuid'""";

log.info sql;
results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;

try {
	def myXML = new XmlSlurper().parseText(results);
	assert myXML.ResultSet.Row.size() == 1;

	tC.setPropertyValue("dbCreateExpireHoursDiff",myXML.ResultSet.Row[0].DIFFERENCE_HOURS.text());
}
catch(Throwable e) {
	log.info e; 
	assert 1 == 2;
}
finally {
	tC.setPropertyValue("dbxmlresponse", results);
	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Assert NODE_USER_SAML_ASSERTION has proper row count for UUID" id="095ee278-687f-4502-bc6a-2059c888385f">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

assert a.samlGetUUIDNodeAssertionRowCount(tC.getPropertyValue("assertionUUID")) == 1;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Assert NODE_USER_SAML_ASSERTION.EXPIRATION_DATE is expected value" id="dca7fb12-e9c1-4ad1-9a35-642f8f60d216">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

float a = (float) tC.getPropertyValue("dbCreateExpireHoursDiff").toFloat().round();
float b = (float) tC.getPropertyValue("expectCreateExpireHoursDiff").toFloat().round();

log.info "Assert Expected[$b] == Received[$a]";

assert a == b;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Assert NODE_USER_SAML_ASSERTION and NODE_USER are in sync" id="2d3b99da-7f52-4bf2-bdac-3e0a107887cd">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("skipSAMLtoNODEUSERCompare") == "false") {
	// Verify UUID is same between the tables.
	log.info "NODE_USER_SAML_UUID - dbNodeUserUUID[" + tC.getPropertyValue("dbNodeUserUUID") + "] - dbSamlUUID[" + tC.getPropertyValue("dbSamlUUID") + "]";
	assert tC.getPropertyValue("dbNodeUserUUID") == tC.getPropertyValue("dbSamlUUID")

	// NODE_USER_ID == NODE_USER.ROW_ID
	if (tC.getPropertyValue("affilNODE_IDProcessed") != "true") {
		log.info "NODE_SAML_USER_ROWID - dbSamlUserID[" + tC.getPropertyValue("dbSamlUserID") + "] - dbNodeUserRowOid[" + tC.getPropertyValue("dbNodeUserRowOid") + "]";
		assert tC.getPropertyValue("dbSamlUserID") == tC.getPropertyValue("dbNodeUserRowOid")

		//NODE_OID between NODE_USER_SAML_ASSERTION and NODE_USER match
		assert tC.getPropertyValue("dbSamlNodeOid") == tC.getPropertyValue("dbNodeUserNodeOid")
	}

	// NODE_USER.USER_OID must match the username logged in.
	log.info "USER_OID";
	log.info "USER_OID[" + tC.getPropertyValue("USER_OID") + "]";
	log.info "dbNodeUserOid[" + tC.getPropertyValue("dbNodeUserOid") + "]";
	assert tC.getPropertyValue("USER_OID") == tC.getPropertyValue("dbNodeUserOid");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Assert NODE_USER_SAML_ASSERTION and NODE_ACCOUNT are in sync" id="891becc6-01f8-4321-9081-8f6b5847e748">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("skipSAMLtoNODEACCOUNTCompare") == "false") {
	// NODE_USER_ID == NODE_USER.ROW_ID
	assert tC.getPropertyValue("dbNodeAcctRowOid") == tC.getPropertyValue("dbSamlAccountID")

	// NODE_ACCOUNT.ACCOUNT_OID is the same accountId as that of the user.
	assert tC.getPropertyValue("dbNodeAcctAccountOid") == tC.getPropertyValue("accountoid");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Assert NODE_USER.NODE_USER_SAML_UUID is correct" id="11e8d8b6-37a6-4eef-a9bd-80714b1f8d6b">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("skipSAMLtoNODEUSERCompare") == "false") {
	/*
	  NODE_USER_SAML_UUID
	*/
	log.info "NODE_USER_SAML_UUID - Expect[" + tC.getPropertyValue("assertionUUID") + "] Received[" +  tC.getPropertyValue("dbNodeUserUUID") + "]"
	assert tC.getPropertyValue("dbNodeUserUUID") == tC.getPropertyValue("assertionUUID");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Assert NODE_USER.USER_OID is correct" id="3abed17a-b118-4ad2-adb1-a4f61a449927">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("skipSAMLtoNODEUSERCompare") == "false") {
	/*
	*  USER_OID
	*/
	log.info "USER_OID - Expect[" + tC.getPropertyValue("USER_OID") + "] Received[" +  tC.getPropertyValue("dbNodeUserOid") + "]"
	assert tC.getPropertyValue("dbNodeUserOid") == tC.getPropertyValue("USER_OID");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Assert NODE_USER.NODE_OID is correct" id="64a28b0c-5a36-49c7-9cf5-7a28db73dcae">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("skipSAMLtoNODEUSERCompare") == "false") {
	/*
	*  NODE_OID
	*/
	log.info "NODE_OID - Expect[" + tC.getPropertyValue("NODE_ID") + "] Received[" +  tC.getPropertyValue("dbNodeUserNodeOid") + "]"
	assert tC.getPropertyValue("dbNodeUserNodeOid") == tC.getPropertyValue("NODE_ID");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="If AffiliateMember repeat validation for AffiliateMember Data" id="b10b1e29-c0c6-4812-aa07-5a1f6b5f5b0d">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("affilNODE_ID") != null &amp;&amp;
    	tC.getPropertyValue("affilNODE_IDProcessed") != "true") {
	tC.setPropertyValue("NODE_ID", tC.getPropertyValue("affilNODE_ID"));
	tC.setPropertyValue("affilNODE_IDProcessed","true");
	testRunner.gotoStepByName("Obtain NODE_USER row");
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>affilNODE_ID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A52459A05388DD3EE0401F0A079942BA</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A6CC28535D7B871DE0401F0A05995F16</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>ced8581d-99c5-4d72-ab41-1727d5ff7828</con:value>
        </con:property>
        <con:property>
          <con:name>dbCreateExpireHoursDiff</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbCreateTODsecsDiff</con:name>
          <con:value>5</con:value>
        </con:property>
        <con:property>
          <con:name>dbNodeAcctAccountOid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbNodeAcctCreateTime</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbNodeAcctID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbNodeAcctNodeOid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbNodeAcctRowOid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbNodeCreateTime</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>dbNodeNodeOid</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>dbNodeRowOid</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>dbNodeUserCreateTime</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbNodeUserID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbNodeUserNodeOid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbNodeUserOid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbNodeUserRowOid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbNodeUsersql</con:name>
          <con:value>select 
to_char(rawtohex(a.NODE_USER_ID)) NODE_USER_ID,
CREATED_DATE,
to_char(rawtohex(a.USER_OID)) USER_OID,
to_char(rawtohex(a.NODE_OID)) NODE_OID,
to_char(rawtohex(a.ROW_OID)) ROW_OID,
NODE_USER_SAML_UUID
from NODE_USER a where NODE_USER_ID = 'A434EDE68AA9226EE0401F0A079979FC' 
and NODE_OID = '50001111'</con:value>
        </con:property>
        <con:property>
          <con:name>dbNodeUserUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbNodeUserxmlresponse</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <NODE_USER_ID>A434EDE68AA9226EE0401F0A079979FC</NODE_USER_ID>
      <CREATED_DATE>2011-05-26 21:08:53.0</CREATED_DATE>
      <USER_OID>100299</USER_OID>
      <NODE_OID>50001111</NODE_OID>
      <ROW_OID>A434EDE68AAA226EE0401F0A079979FC</ROW_OID>
      <NODE_USER_SAML_UUID>bc9bd5b3-23d0-49dc-ad65-fb778d8e80a3</NODE_USER_SAML_UUID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>dbNodeUUID</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>dbSamlAccountID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbSamlCreateTime</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbSamlExpireTime</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbSamlNodeOid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbSamlStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbSamlUserID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbSamlUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbxmlresponse</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>87672</con:value>
        </con:property>
        <con:property>
          <con:name>expectNodeUserRowCount</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NODE_ID</con:name>
          <con:value>400010</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Generic API Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>SST GET API - Basic Auth</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pjgstsFull2</con:value>
        </con:property>
        <con:property>
          <con:name>USER_OID</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>affilNODE_IDProcessed</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>skipSAMLtoNODEUSERCompare</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>skipSAMLtoNODEACCOUNTCompare</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86730</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="NODE_USER Row Validator" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6fb05fa0-0bdb-4608-b067-369bed6af442">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="a028b659-669b-41e4-b09c-026182987bdc">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("nodeaccountid",null);
tC.setPropertyValue("nodeuserid",null);
tC.setPropertyValue("nodeuserrowid",null);
tC.setPropertyValue("nodeacctoutrowid",null);
tC.setPropertyValue("assertionUUID",null);

tC.setPropertyValue("dbStatus",null);
tC.setPropertyValue("dbUUID",null);
tC.setPropertyValue("dbUserID",null);
tC.setPropertyValue("dbAccountID",null);
tC.setPropertyValue("dbCreateTime",null);
tC.setPropertyValue("dbCreateExpireHoursDiff",null);
tC.setPropertyValue("dbCreateTODsecsDiff",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properities" id="e163fa0b-7488-4dc7-8a22-f6c682f10edc">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("USER_OID",callTC.getPropertyValue("USER_OID"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("nodeaccountid",callTC.getPropertyValue("nodeaccountid"));
tC.setPropertyValue("nodeuserid",callTC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("nodeuserrowid",callTC.getPropertyValue("nodeuserrowid"));
tC.setPropertyValue("nodeacctoutrowid",callTC.getPropertyValue("nodeacctoutrowid"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("expectCreateExpireHoursDiff",callTC.getPropertyValue("expectCreateExpireHoursDiff"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Extract NODE_USER Information" id="8ea52757-63b1-4a81-9d79-991e21063dcf">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName xsi:nil="true"/>
          <con:driver>${#Project#JDBCDriver}</con:driver>
          <con:connectionString>${#Project#JDBCConnStr}</con:connectionString>
          <con:password/>
          <con:query>select * from NODE_USER where NODE_OID = :NODE_ID and USER_OID = :oid</con:query>
          <con:assertion type="XPath Match" id="eb41ff0f-0dd7-4e4e-91ea-69aac97d120c">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>oid</con:name>
              <con:value>${#TestCase#USER_OID}</con:value>
            </con:property>
            <con:property>
              <con:name>NODE_ID</con:name>
              <con:value>${#TestCase#NODE_ID}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="531d273d-475d-4326-8a08-ff930332a3f9">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
            <con:name>useruuid</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract NODE_USER Information</con:sourceStep>
            <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/NODE_USER_SAML_UUID[1]</con:sourcePath>
            <con:targetType>dbUUID</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          <con:upgraded>true</con:upgraded></con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Perform Data Validations" id="1a509bb9-e23a-453b-bd67-3613c312100f">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

assert tC.getPropertyValue("assertionUUID") == tC.getPropertyValue("dbUUID");</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">bc46daa0-a8da-4743-aead-f1a5fc013712</con:value>
        </con:property>
        <con:property>
          <con:name>dbAccountID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbCreateExpireHoursDiff</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbCreateTime</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbUserID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>NODE_ID</con:name>
          <con:value>80080010</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Node Role Type Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01700 - STS - Node role of urn:dece:role:coordinator</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>pjgstsFull2</con:value>
        </con:property>
        <con:property>
          <con:name>USER_OID</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>8784</con:value>
        </con:property>
        <con:property>
          <con:name>dbCreateTODsecsDiff</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86731</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Flush Node/User Assertion Data" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="230edeba-4a6f-47b8-8ea0-354018a6840a">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="b2dcc8c4-b271-4190-bb3c-a66f3febb3f8">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodelist = tP.getPropertyValue("nodeAffiliationRetailer").toString() +
	"," +
	tP.getPropertyValue("nodeAccessPortal").toString() +
	"," +
	tP.getPropertyValue("nodedlaspLP1").toString() +
	"," +
	tP.getPropertyValue("noderetailerLP1").toString() +
	"," +
	tP.getPropertyValue("nodeListofLLASPNodes").toString() +
	"," +
	tP.getPropertyValue("nodeForNodeRoleTesting").toString() +
	"," +
	tP.getPropertyValue("nodeAffiliationAccessportal").toString();

log.info "nodelist[$nodelist]";
	
tC.setPropertyValue("username",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("expectNodeUserRowCount",null);
tC.setPropertyValue("nodelist",nodelist);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properities" id="ffe7056b-ed01-4e7f-bbdb-3100544d9460">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("USER_OID",callTC.getPropertyValue("USER_OID"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Delete account STREAM_DATA rows" id="cf655c33-6b5e-44af-a6f1-62881a54cdec">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid").toString());
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.streamDeleteAccountOid - $e";
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Delete NODE_USER_SAML_ASSERTION rows" id="b85ff4fd-14e9-448b-83ee-aa39019a7e66">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String nodelist = tC.getPropertyValue("nodelist").toString();
String NODE_ID = tC.getPropertyValue("NODE_ID");
String USER_OID = tC.getPropertyValue("USER_OID");
int results = 0;

assert nodelist.length() > 0;
assert nodelist != 'null';

List nodeList = nodelist.tokenize(",");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It: $it";

	String sql = """DELETE from NODE_USER_SAML_ASSERTION where NODE_OID = '$it'
  		and NODE_USER_ID = (select ROW_OID from NODE_USER where USER_OID = '$USER_OID' 
  		and NODE_OID = '$it')""";

  	log.info sql;

  	try {
  		dbUtils = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem"));
		results = dbUtils.DeleteFromDB(sql);
	}
	catch(Throwable e) {
		log.error "ERROR! - dbUtils.DeleteFromDB - $e";
	}
	finally {
		//log.info sql;
		log.info "result[$results]";
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Delete NODE_USER rows" disabled="true" id="6541548f-face-459c-a304-2ca1a99f171c">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String nodelist = tC.getPropertyValue("nodelist").toString();
String NODE_ID = tC.getPropertyValue("NODE_ID");
String USER_OID = tC.getPropertyValue("USER_OID");
int results = 0;

assert nodelist.length() > 0;
assert nodelist != 'null';

List nodeList = nodelist.tokenize(",");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It: $it";

	String sql = """DELETE from NODE_USER where NODE_OID = '$it'
 		 and USER_OID = '$USER_OID'""";

  	log.info sql;

  	try {
  		dbUtils = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem"));
		results = dbUtils.DeleteFromDB(sql);
	}
	catch(Throwable e) {
		log.error "ERROR! - dbUtils.DeleteFromDB - $e";
	}
	finally {
		//log.info sql;
		log.info "result[$results]";
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Delete NODE_ACCOUNT rows" disabled="true" id="cf7f1c43-3df5-4fe4-9bd5-6fbc3e3ab9cb">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String nodelist = tC.getPropertyValue("nodelist").toString();
String NODE_ID = tC.getPropertyValue("NODE_ID");
String USER_OID = tC.getPropertyValue("USER_OID");
String accountoid = tC.getPropertyValue("accountoid");
int results = 0;

assert nodelist.length() > 0;
assert nodelist != 'null';

List nodeList = nodelist.tokenize(",");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It: $it";

	String sql = """DELETE from NODE_ACCOUNT where NODE_OID = '$NODE_ID'
 		 and ACCOUNT_OID = '$accountoid'""";

  	log.info sql;

  	try {
  		dbUtils = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem"));
		results = dbUtils.DeleteFromDB(sql);
	}
	catch(Throwable e) {
		log.error "ERROR! - dbUtils.DeleteFromDB - $e";
	}
	finally {
		//log.info sql;
		log.info "result[$results]";
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify no NODE_USER_SAML_ASSERTION rows exist for node/user" disabled="true" id="92fcf0a1-346f-4e10-9d4f-d35999630990">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("Verify no Node/User Assertion Data Exists")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_02000 - STS - Device - Username in 'active' status</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>STS Tokentype usernamepassword - Device Role - P1</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pjgstsFull2</con:value>
        </con:property>
        <con:property>
          <con:name>NODE_ID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>USER_OID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CB3BFA27831F903DE0401F0A059965CF</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CB3BF9C364EF438FE0401F0A059965CD</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>expectNodeUserRowCount</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodelist</con:name>
          <con:value>70007000,70007001,70007001,90009000,90009000,90009000,80008000,80008001,80008002,90009000,50005000,50005001,50005002</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Flush User Assertion data for Device" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c56c6047-5730-46e7-9bfd-ed8c9efa09cc">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="584e39b4-3842-4a99-ac4b-01b577332ab2">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",null);
tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeDeviceDefault"));
tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("expectNodeUserRowCount",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properities" id="92e111db-1233-4a02-87b0-2dea8dcf9b51">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("USER_OID",callTC.getPropertyValue("USER_OID"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("expectNodeUserRowCount",callTC.getPropertyValue("expectNodeUserRowCount"));


if (tC.getPropertyValue("expectNodeUserRowCount") == null || tC.getPropertyValue("expectNodeUserRowCount") == "null") {
	tC.setPropertyValue("expectNodeUserRowCount","1");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Delete NODE_USER_SAML_ASSERTION and NODE_USER rows" id="e5fa0fad-0894-4e65-8cc7-308487473dc6">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

Boolean delSamlNodeRows = true;
String rowoid = null;
String nodeSamlNodeUserId = null;
String NODE_ID = tC.getPropertyValue("NODE_ID");
String USER_OID = tC.getPropertyValue("USER_OID");
String sql = """select to_char(rawtohex(ROW_OID)) ROW_OID from NODE_USER where USER_OID = '$USER_OID' and NODE_OID = '$NODE_ID'""";

log.info sql;

try {
	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR during a.SelectFromDB - $e";
}
finally {
	log.info sql;
	log.info results;
}

if (!results.isEmpty()) {
	try {
		myXML = new XmlSlurper().parseText(results);
	}
	catch (Throwable e) {
		log.info "Error during XmlSlurper - $e";
	}
	finally {
		def rowsReturned = myXML.ResultSet.Row.size();
		def oids = myXML.ResultSet.Row;

		log.info "rowsReturned - $rowsReturned";

		for (oid in oids.ROW_OID) {
			log.info "oid is " + oid;
			sql = "DELETE NODE_USER_SAML_ASSERTION where " +
				"NODE_USER_ID = '" + oid + "'";
			try	{	
				rc = a.dbConnExecuteUpdate(sql);
						
				if(rc != 0) {
					log.info "Error - Could not delete OID: "  + oid;
					log.info "Error - SQL: " + sql;
				} 
			}
			catch(Throwable e) {
				log.info "ERROR during a.dbConnExecuteUpdate - $e";
			}
			
			/*
			*  Now remove the NODE_USER row
			*/
			sql = "DELETE NODE_USER where " +
				"ROW_OID = '" + oid + "'";
			try	{	
				rc = a.dbConnExecuteUpdate(sql);
						
				if(rc != 0) {
					log.info "Error - Could not delete NODE_USER OID: "  + oid;
					log.info "Error - SQL: " + sql;
				} 
			}
			catch(Throwable e) {
				log.info "ERROR during a.dbConnExecuteUpdate - $e";
			}
		}
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Delete NODE_ACCOUNT rows" id="e281db2c-9852-4e4a-b4a2-17599684c0d4">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

Boolean delSamlNodeRows = true;
String rowoid = null;
String nodeSamlNodeUserId = null;
String NODE_ID = tC.getPropertyValue("NODE_ID");
String accountoid = tC.getPropertyValue("accountoid");
String sql = """DELETE from NODE_ACCOUNT where NODE_OID = '$NODE_ID'
  and ACCOUNT_OID = '$accountoid' 
""";

log.info sql;

try {
	results = a.DeleteFromDB(sql,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.error e;
	assert 1 == 2;
}
finally {
	log.info sql;
	log.info results;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify no NODE_USER_SAML_ASSERTION rows exist for node/user" id="69e123ed-edea-4561-a5d4-aabe5cf7b4ba">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("Verify no Node/User Assertion Data Exists")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>username</con:name>
          <con:value>pjgstsBasic2</con:value>
        </con:property>
        <con:property>
          <con:name>NODE_ID</con:name>
          <con:value>0200</con:value>
        </con:property>
        <con:property>
          <con:name>USER_OID</con:name>
          <con:value>CB3C002137BFDF68E0401F0A07990598</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>CB3BF9C364EF438FE0401F0A059965CD</con:value>
        </con:property>
        <con:property>
          <con:name>expectNodeUserRowCount</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_36073 - STS GET BasicAuth - Device - Assertion retrieval for full user login account in pending status, user active status</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>STS GET Basic Auth - Device Role - P1</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86733</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Core Identity Information Extraction" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="19dcfcb7-55b7-4ff5-9017-2ef5cce420f8">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="c3be24a3-439b-4ec6-b8af-171631eb3fc1">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("accountoid",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properities" id="95bb84d4-22b1-48c1-8fec-050142dd33c5">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="0880d2df-c29b-4bfc-a6c6-6bce6d4e8766">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Promote variables to calling TestCase" id="a9301a4f-217b-4d5c-b82d-cb60af51fd66">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def toTCName = tC.getPropertyValue("tName");
def toTSName = tC.getPropertyValue("sName")

//
//  Transfer all the properites created in this test case
//  to the calling testcase.
//
if (toTCName != "" &amp;&amp; toTSName != "") {
	def toTC = testRunner.testCase.testSuite.project.getTestSuiteByName(toTSName).getTestCaseByName(toTCName);

	Map testCasePropertiesMap = tC.getProperties();
	Set testCasePropertiesKeySet = testCasePropertiesMap.keySet();
	Iterator iter = testCasePropertiesKeySet.iterator();
	while(iter.hasNext()){
		String testCasePropertyKey = (String)iter.next();

		switch (testCasePropertyKey) {
			case "accountoid":
			case "USER_OID":
				toTC.setPropertyValue(testCasePropertyKey,tC.getPropertyValue(testCasePropertyKey));	
			break;
		}
	}
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01000 - STS</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>E2E_TestCases_3_Users_3_AccessLevels</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">firstusername_20130319_10550</con:value>
        </con:property>
        <con:property>
          <con:name>NODE_ID</con:name>
          <con:value>7600</con:value>
        </con:property>
        <con:property>
          <con:name>USER_OID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">B50131B438EFA3A5D7B29C0365A6E736</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D8414B820315DC7FE0401F0A05991500</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86734</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Validate Signuature" searchProperties="true" id="f3067a65-9434-4201-a951-4bd9a42b4972">
      <con:settings/>
      <con:testStep type="groovy" name="Groovy Script" id="3bd793b1-9740-44cc-9f53-f80c51a1ad52">
        <con:settings/>
        <con:config>
          <script>import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.util.Collections;
import java.lang.Object;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import javax.xml.transform.*;
import java.security.cert.X509Certificate;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;

import javax.xml.crypto.Data;
import javax.xml.crypto.MarshalException;
import javax.xml.crypto.NoSuchMechanismException;
import javax.xml.crypto.URIDereferencer;
import javax.xml.crypto.XMLStructure;
import javax.xml.crypto.dom.DOMStructure;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;
import javax.xml.crypto.dsig.spec.*;
import javax.xml.crypto.dsig.keyinfo.*;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.XMLDSigSecurity;
import javax.xml.crypto.dsig.XMLObject;
import javax.xml.crypto.dsig.XMLSignContext;
import javax.xml.crypto.dsig.XMLSignature;
import javax.xml.crypto.dsig.XMLSignatureException;
import javax.xml.crypto.dsig.XMLSignatureFactory;
import javax.xml.crypto.dsig.XMLValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.dom.DOMValidateContext;

def tC = testRunner.getTestCase();











//import org.apache.xml.security.signature.SignedInfo;
import javax.xml.crypto.dsig.*;



	def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

		myXML.declareNamespace(saml2p: "urn:oasis:names:tc:SAML:2.0:protocol");

		/*
		*  StatusCode
		*/
		String recvStatusCode = myXML."saml2p:Status"."saml2p:StatusCode"."saml2p:StatusCode".@Value;
		this.log.info "StatusCode[$StatusCode] - recvStatusCode[$recvStatusCode]";
		assert StatusCode == recvStatusCode;
		/*
		*  StatusMessage
		*/
		String recvStatusMessage = myXML."saml2p:Status"."saml2p:StatusMessage";
		this.log.info "StatusMessage[$StatusMessage] - recvStatusMessage[$recvStatusMessage]";
		assert StatusMessage == recvStatusMessage;
		/*
		*  StatusDetail
		*/
		String recvStatusDetail = myXML."saml2p:Status"."saml2p:StatusDetail"."saml2:Attribute"."saml2:AttributeValue";
		this.log.info "StatusDetail[$StatusDetail] - recvStatusDetail[$recvStatusDetail]";
		assert StatusDetail == recvStatusDetail;
-----------------------
String myKeyStore  = "C:\\Documents and Settings\\pgentry\\soapui\\keystore\\keystore.jks";
String authNfile   = "C:\\Documents and Settings\\pgentry\\soapui\\keystore\\authn.xml";
String signedAuthN = "C:\\Documents and Settings\\pgentry\\soapui\\keystore\\signedauthn.xml";

// Create a DOM XMLSignatureFactory that will be used to
// generate the enveloped signature.
XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM");

// Create a Reference to the enveloped document (in this case,
// you are signing the whole document, so a URI of "" signifies
// that, and also specify the SHA1 digest algorithm and
// the ENVELOPED Transform.
Reference ref = fac.newReference("", fac.newDigestMethod(DigestMethod.SHA1, null),  Collections.singletonList
   (fac.newTransform (Transform.ENVELOPED, (TransformParameterSpec) null)), null, null);

// Create the SignedInfo.
SignedInfo si = fac.newSignedInfo(fac.newCanonicalizationMethod(CanonicalizationMethod.INCLUSIVE,(C14NMethodParameterSpec) null),
    fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null), Collections.singletonList(ref));

// Load the KeyStore and get the signing key and certificate.
KeyStore ks = KeyStore.getInstance("JKS");
ks.load(new FileInputStream(myKeyStore), "testing".toCharArray());
KeyStore.PrivateKeyEntry keyEntry = (KeyStore.PrivateKeyEntry) ks.getEntry("selfsigned", new KeyStore.PasswordProtection("testing".toCharArray()));
X509Certificate cert = (X509Certificate) keyEntry.getCertificate();

// Create the KeyInfo containing the X509Data.
KeyInfoFactory kif = fac.getKeyInfoFactory();
List x509Content = new ArrayList();
x509Content.add(cert.getSubjectX500Principal().getName());
x509Content.add(cert);
X509Data xd = kif.newX509Data(x509Content);
KeyInfo  ki = kif.newKeyInfo(Collections.singletonList(xd));

// Instantiate the document to be signed.
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setNamespaceAware(true);
//Document doc = dbf.newDocumentBuilder().parse (new FileInputStream(authNfile));
//Document doc = dbf.newDocumentBuilder().parse (new FileInputStream(authNfile));
Document doc = dbf.newDocumentBuilder().parse(authNfile);

// Create a DOMSignContext and specify the RSA PrivateKey and
// location of the resulting XMLSignature's parent element.
DOMSignContext dsc = new DOMSignContext(keyEntry.getPrivateKey(), doc.getDocumentElement());

// Create the XMLSignature, but don't sign it yet.
XMLSignature signature = fac.newXMLSignature(si, ki);

// Marshal, generate, and sign the enveloped signature.
signature.sign(dsc);

// Output the resulting document.
OutputStream os = new FileOutputStream(signedAuthN);
TransformerFactory tf = TransformerFactory.newInstance();
Transformer trans = tf.newTransformer();
trans.transform(new DOMSource(doc), new StreamResult(os));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86735</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verify no Node/User Assertion Data Exists" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="19ec4876-4bad-45f4-a668-7adeaae5bf7c">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="70c8ebf1-74dd-4278-991a-f7612a52103a">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("accountoid",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properities" id="e7f50af3-0a7f-4a6e-9f1c-bb0e8b35d761">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("USER_OID",callTC.getPropertyValue("USER_OID"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify no NODE_USER_SAML_ASSERTION rows for Node/User" id="29b54c8c-2d79-4514-83f2-a865a92049db">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

int nodeSamlRowCount = 1;
String NODE_ID = tC.getPropertyValue("NODE_ID").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String accountoid = tC.getPropertyValue("accountoid");
String USER_OID = tC.getPropertyValue("USER_OID");
String results = null;

String sql = """SELECT count(NODE_USER_SAML_ASSERTION_OID) as CNT from NODE_USER_SAML_ASSERTION where
  NODE_OID = '$NODE_ID' and NODE_USER_ID = (select ROW_OID from NODE_USER where NODE_OID = '$NODE_ID' 
  and USER_OID = '$USER_OID')
  """;

try {
	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));

	myXML = new XmlSlurper().parseText(results);
	
	if (myXML.ResultSet.Row.size() == 1) {
		nodeSamlRowCount = myXML.ResultSet.Row.CNT.text().toInteger();
	} else {
		nodeSamlRowCount = 1;
	}
}
catch(Throwable e) {
	log.error e;
	assert 1 == 2;
}
finally {
	log.info sql;
	log.info results;
	log.info "nodeSamlRowCount[$nodeSamlRowCount]";

	assert nodeSamlRowCount == 0;
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_00100 - STS - Device - NULL Request Body Supplied</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>STS Tokentype usernamepassword - Device Role - P1</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>pjgstsFull2</con:value>
        </con:property>
        <con:property>
          <con:name>NODE_ID</con:name>
          <con:value>6612</con:value>
        </con:property>
        <con:property>
          <con:name>USER_OID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CB3BFA27831F903DE0401F0A059965CF</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CB3BF9C364EF438FE0401F0A059965CD</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true" disabled="true" id="3e631592-a3e8-42be-94c5-e4f208a401a8">
      <con:settings/>
      <con:testStep type="groovy" name="Rename Test Cases" id="c49f417a-5c75-482d-99fc-deabcf5c4952">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

import java.io.*;

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "STS Tokentype DeviceAuthToken - Device Role";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def TCNum = 13;

//BufferedWriter bufferedWriter = null;
//bufferedWriter = new BufferedWriter(new FileWriter("c:\\DiscreteMediaLeaseCreateQuestions.txt"));

def oldTestCaseName;
def newTestCaseName;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	//if(targetTestCase.isDisabled() == false)
	//{
		//targetTestCase.setFailOnError(true);
		oldTestCaseName = TCList[i].name;
		newTestCaseName = oldTestCaseName.replace("Copy of ", "");	
		targetTestCase.name = newTestCaseName;	
		TCNum = TCNum + 1;
		log.info "Done renaming Test Case '" + oldTestCaseName + "' to '" + newTestCaseName + "'";
	//}
	//else
	//{
	//	bufferedWriter.write(targetTestCase.name);
	//	bufferedWriter.newLine();
	//}
}

//if (bufferedWriter != null) {
	//bufferedWriter.flush();
     //bufferedWriter.close();
//}

log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>PERM_ACCOUNT_CONSENT_POLICIES</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Change a step's script for all Steps in a Suite" searchProperties="true" disabled="true" id="63df2d8e-8a58-4955-be8e-c4eccb9b3ba4">
      <con:settings/>
      <con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="6d43ab82-0256-41cb-944c-980322b1d977">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "STS Tokentype urn:dece:type:tokentype:saml2 Test Cases"; 

def oldString = """STS API - SecurityTokenExchange Invoked to Coordinator URL""";
def newString = """STS API - Invoked to Coordinator URL""";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				def testStepName = testStepList[j].name;
				
				if (testStepName == "-- Call STS SAML Token Exchange") {
					log.info "Hit!";
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					stepScript = testStepList[j].getScript();
					stepScript = stepScript.replace(oldString, newString);

					/*
					*  Delete a step
					*/
					//targetTestStep.delete();

					/*
					*  Replaces step's script completely
					*/
					//stepScript = """""";
					targetTestStep.setScript(stepScript);		
				}
				
				//targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>RTL_CS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set a Property" searchProperties="true" disabled="true" id="88abec67-0cfd-4158-ab1e-3dcbf6d69df0">
      <con:settings/>
      <con:testStep type="groovy" name="Set a Property" id="4aae0d70-4938-4154-a8b0-c9815b6cbb6e">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "Holder for new sts";
def propertyName;

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);	
	propertyName = testCase.getPropertyValue("PropertyName");	
	propertyValue = testCase.getPropertyValue("PropertyValue");		
	if(targetTestCase.isDisabled() == false)
	{
		try
		{
			//nodeRole = targetTestCase.getPropertyValue("ErrorResponse");
			propertyName = "synced";			
			/*if(nodeRole == 'ForbiddenRightsTokenAccessNotAllowed')
			{
				nodeRole = 'ForbiddenDiscreteMediaRightOwnerMismatch';
			}
			*/
			propertyValue = null
			targetTestCase.setPropertyValue(propertyName, propertyValue);
			log.info "Done with Test Case '" + TCList[i].name + "'";
		}
		catch(Throwable e)
		{
			log.info e.text;
		}		
	}	
}

log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>FUNC_USER_CONSENT_POLICIES</con:value>
        </con:property>
        <con:property>
          <con:name>PropertyName</con:name>
          <con:value>NumberOfPolicyRequestingEntities</con:value>
        </con:property>
        <con:property>
          <con:name>PropertyValue</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove a Step for all Testcases in a Suite" searchProperties="true" disabled="true" id="99c778cf-bd1a-4293-b34d-53339dcae326">
      <con:settings/>
      <con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="6fa579e3-343b-4c71-a90d-3e3530823dbd">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "STS Tokentype urn:dece:type:tokentype:DeviceAuthToken"; 
def stepName  = "Establish Stage for STS invocation as a Device";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList  = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				if (testStepList[j].name == stepName) {
					log.info "Removing Step " + testStepList[j].name;
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					targetTestCase.removeTestStep(targetTestStep);
				}
				
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info "ERROR:" + e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>RTL_CS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename a Step" searchProperties="true" disabled="true" id="0e62a367-0dda-4249-af02-f64c612938a3">
      <con:settings/>
      <con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="fad1a6f8-dba2-4686-8508-367c21c245f7">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "STS GET Node Role Type Test Cases"; 
def stepName  = "Call STS";
def stepNewName  = "Call STS GET - DeviceAuthToken";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList  = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				if (testStepList[j].name == stepName) {
					log.info "Renaming Step " + testStepList[j].name;
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					targetTestStep.name = stepNewName;
				}
				
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info "ERROR:" + e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>RTL_CS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>QC_TestPlanDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestLabDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestSet</con:name>
        <con:value/>
      </con:property>
    </con:properties>
    <con:reportParameters/>
  </con:testSuite><con:testSuite name="DelegationTokenCreate_EmailBased" disabled="true" id="e55fab23-2bdd-47be-9832-8d74050d26bd"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_001_DTCreate_UnVerified_RTL_User_created_by_node_LLASP" searchProperties="true" id="2f9a46a0-07e1-42c3-af7c-348591a37356"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="77cc6e42-9166-4730-b784-899fff5c57ae"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdLLASP"));
tC.setPropertyValue("PrimaryEmail","rteja29@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC1"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="4ed7a735-0fc9-4f77-85ec-f17969483644"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="ec31b865-bf42-4ed7-961d-798044362518"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="7b15e15b-2d4d-41ac-b3e6-228bef32de8a"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="3c5ccae6-f2ab-4d32-a5b3-4b6c2279d828">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="903768bd-a9db-4498-97d1-9f9612829bbc">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="53681bd7-4e9c-4d5f-bc14-daa2a1e7da50">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Establish Entity and Affiliate Node Settings" id="79595c29-9f1e-4038-b36b-ed354756b54d" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = 0;
String nodes = tP.getPropertyValue("nodeAffiliationRTL").toString();
String audienceList = "";
log.info nodes +"###########";
String affiliationList = "";
List nodeList = nodes.tokenize(";");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It [$i]: $it";
	
	if (i == 0) {
		tC.setPropertyValue("NODE_ID", it);
		affiliationList = it;
		if (nodeList.size != i + 1) {
			affiliationList = affiliationList + ",";
		}
		
	} else {
		
		audienceList = audienceList + it;
		affiliationList = affiliationList + it;
		if (nodeList.size != i + 1) {
			audienceList = audienceList + ",";
			affiliationList = affiliationList + ",";
		}
	}

	i++;
}
log.info "audienceList [$audienceList]";
log.info "affiliationList [$affiliationList]";
assert audienceList.length() > 0;

tC.setPropertyValue("audienceList",audienceList);
tC.setPropertyValue("affiliationList",affiliationList);</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="c6cb7153-a7fb-491c-848d-3473caf9af8b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate_EmailBased")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Copy of Call DelegationTokenCreate" disabled="true" id="3404e8e1-2510-4cb2-a5f2-0089ec6321d7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate_R4")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">24D11324AC9F44109CF54F449481F9A8</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">63D1A893AC9F44109CF54F449481F9A8</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>rteja29@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>53D1A893AC9F44109CF54F449481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:53D1A893AC9F44109CF54F449481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>14D11324AC9F44109CF54F449481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:14D11324AC9F44109CF54F449481F9A8</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1395760186192</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_4bada749-9715-4b9c-b60a-e20571d2b27b</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jx3jD0zAnsCMC6ElgZLEkJC83BHyAso1kmPJBvLrr2RiApSk6Z1hxmi92j27e3ykc46WseMHnEMqCKNar9PU/3GnKEJ11zO8ul0z3KmHjemZhQxwrFrdjpypU5/qWo/zDHqUC0RFU3cs2zWsquHURnbNtzzf9Spn1fqjrt1BymVo6VKxdG29jCn3i7RNPUupzxAn3KdoCdwX2A+DQd+Xnj4qMemt8y3KImHaWgiR+KaJKxFgiGNcwWxpnpsHPucR90Myp0hkKbzmjHhTf927Wq0qq2qFpXPTsSzLtDxT+kSczL/qrS/lZoh6dMa26zaijBKMYvKCFKgBiAWLtCCes5SIxfKd0LZpWyq0AWtsYNulX3XzLUGB7pORDkCmHBl8gewy2C3MIAWKQRvf9pr6189NcLt3lCLKZyxd8qP130ECmkPMEogMXlZWovt8xBPtap0D9nsUxxknOfxSNEkQBq5dpzAj6z7hknwR14rxa2suf6RkGeC/Gcu5uY9VQjdPdKdD5sDF/5nZ/ry2Ue5QnEErZQ+T+J4v02FuO/NJd0Gfwku4yjnwZgFh33kLajfu1/UxWXfcet3EbsL2lLzc2uPh4OkJHruPeTa4SnLz2+VV7ceUWD9exubzj+G93Q9IGOSTObjD+qrbf2ys8WI+zurVQe5+Gw8fGPtijjf17mZ4+ZKsemvP+n625snDz5tJ8rOWZPT+7r42u5jfsPvRZdQe0fHAExOnPkzDyBbobPaQm3c3YvXijG74dfgluJu8kM13kd/Pmdh8e0gz3Hyrab+GQ2MpCWE2fQIsyqWiR6+jdeW8kPhYXpSFRMascPUTpVFcABV6S+1S0uJnUoBI5Mthbte227HtquMGba/rurbltbs1V/7z3Ibd9YJGqUFbFEcQ24zOiMqlVHbLn48B4qXPgUaQGjnL8AK4/kHEDhJI69Fb+XEwymHEpIp7XiPotC/aXsPqVNsXdqN7UfW8ettyvZpzcdHWtV9MDOkwDWYC0kMFbxwo+C1gkhBQMq94ziXRuZAteUZ5JmK7kqMKhUweBKnSYt9xGzWTk2USgwJsLlmUxVBJFknRIJNvn46BMC+s/X4QXhdf4LsFHr8reyF9IqIcuKrmO8h5wonDqFqW8m7Jjr1fchk+yCKiPjTZWJESvEVy+OqNL4ooO7IUNZWgd77HhoO45nFJu1RRTvCO87vDWmq9VIJWOZJnVHmuZHmeFUOoK5VLZXhTip1thoAzKVWbEfsXqLkLYX7qpNihPsq8sx/iy8SChgIJWErKaMXyE9eEELi6JvQk5defvYMcpJR9E7AWp2ztWN4mFOIPLxzYx8pPmq/lY8XS6G1cJ2Lt5ZF1yruBIHSuVupM2LxDC8xkWCJFjKX7wU8FOJX80Lhr8g6LkGyaZgLef6MpdWrqCGOWUdHr6IVhXzELnGKTgP/m9FuYQpVfj9k1f/eYnQz6odSuJdJ3vuTPzgYp6IJBV6d5gaWpr+WtUSan8z2FfgW4L9K1ascOGl71TyJ9WEnrN/Pvlr2eHn8Prf8A</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>79595c29-9f1e-4038-b36b-ed354756b54d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_001_DTCreate_UnVerified_RTL_User_created_with_AudienceList" searchProperties="true" id="d5c89b46-0a6a-4d87-a11e-a42c7b261155"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a7fbbab2-c572-4efc-a37e-c7f10294c3fa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","santosh.dwivedi@neustar.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC1"));
//tC.setPropertyValue("audienceList",null);
//tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="045abcf0-5ce7-4689-ab0e-1874b9b23cca"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="2ba3b128-447c-45dc-981f-8fd1a4cb053d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="472eb213-f897-4320-b4ee-0f7240a40b03"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="c39738cd-3dfa-4eff-a3cd-89e0fe82455f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="4332d66e-9e11-461a-a4a5-38415895655f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="b6211167-7994-4a27-86bd-9dd23d69135f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Establish Entity and Affiliate Node Settings" id="6b122e60-d08f-438d-8d23-7adbf930c137"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = 0;
String nodes = tP.getPropertyValue("nodeAffiliationRTL").toString();
String audienceList = "";
log.info nodes +"###########";
String affiliationList = "";
List nodeList = nodes.tokenize(";");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It [$i]: $it";
	
	if (i == 0) {
		tC.setPropertyValue("NODE_ID", it);
		affiliationList = it;
		if (nodeList.size != i + 1) {
			affiliationList = affiliationList + ";";
		}
		
	} else {
		
		audienceList = audienceList + it;
		affiliationList = affiliationList + it;
		if (nodeList.size != i + 1) {
			audienceList = audienceList + ";";
			affiliationList = affiliationList + ";";
		}
	}

	i++;
}
log.info "audienceList [$audienceList]";
log.info "affiliationList [$affiliationList]";
assert audienceList.length() > 0;

tC.setPropertyValue("audienceList",audienceList);
tC.setPropertyValue("affiliationList",affiliationList);</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="c6213e95-19ad-4d67-bb9d-940c816abf79">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate_EmailBased")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Copy of Call DelegationTokenCreate" disabled="true" id="53837094-c510-4d56-bee6-b9525f803c47">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate_R4")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" disabled="true" id="3db51053-aaea-4bf9-a42d-1560fe4def83">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy Get" id="5bced39d-8fbb-4ac3-875e-c6161706c9e6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy Get_RET" id="0fca7d3b-97f9-4324-8840-5fd07394fed0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy Get_LLASP" id="a99d99ac-943e-472c-8afc-059ffab88b82"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Copy of PolicyGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="CALL ULC Policy Get_DLASP" id="ce9df3cf-c97d-405e-b221-21f813ad27c4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Copy of PolicyGet_1")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy Delete" disabled="true" id="25d6dfa8-8901-44ed-bba0-5b90cb1a5e25"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Call STS Get" disabled="true" id="7ee0d4fa-ffe5-4833-ba1c-afbed7e5d5cb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Copy of Call ULC Policy Get" disabled="true" id="7fa183d6-3143-4257-bf0e-0a35310d8e05"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Call ULC Policy Get_RET" disabled="true" id="2a9d66c3-fe51-4f96-8c4d-8f4be7831f5b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Call ULC Policy Get_LLASP" disabled="true" id="17010c8a-966c-48d9-9f39-2a1b10618bfd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Copy of PolicyGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of CALL ULC Policy Get_DLASP" disabled="true" id="31d429e5-848e-4d13-bd5d-e723c7bb87a1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Copy of PolicyGet_1")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>ACCOUNT_OID</con:name><con:value>0A51B0086A915410FE61A0549481F9A8</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value>urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_b491e281-d9e6-4f9e-b5e8-12e0cf5d231a</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951B0086A915410FE61A0549481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951B0086A915410FE61A0549481F9A8</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0B51A2686A915410FE61A0549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0B51A2686A915410FE61A0549481F9A8</con:value></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>santosh.dwivedi@neustar.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=pVZtb+I4EP6+vyLKfjyFxCGhSVSQ0gJ7FLrtEnap9svJdQZwN3Fo7EDaX392aChQ2mXvpEiRx+OZZ178jM85ThM7CDmHXNCMaYNuW//n3vER2B4yYh9ahjPzwbh3wTOQDRaZubHdRFjXBpwXMGBcYCbaum0hx7CaRhNNkB80Pfk1Wqj1U9d+QM6laanSsHStTBPGg8ptWy9yFmSYUx4wnAIPBAmi8HoUSM0A15j0zvkGZeUw7yyEWAamSRoxEEgS0iBZap6bezrnMQ8iOmdYFDm8+Ix5W385u16vG+tmI8vnpm1Zlmn5ptSJOZ1/1juf6sMQD9gs26wvMcsYJTihz1iBugaxyGItTOZZTsUifcc0MpGlTBtQEoMgh33WzVcHFboTLe2BzDk2+AKj2tgYZpADI6B9Hw/a+ufTKrg5O8kx47MsT/nB+s8gAVtBki0hNngdWY3udItH0tU5BxIMGEkKTlfwVbXJEhPg2m0OM1qOKJfNF3OtKr9WcvnRusuA/ElZzs1drBK6eSQ7XToHLv5LzXbrtbHyAycFdEbr4Y/4bv1sDa21e7YQvfnzYy/vN3+mvXYFYVd5A2pb7pf1YbNue+vlULdbkLgor9K7pGv1F000sOHbU/Llu5kkYXoVDqN+fDFsJs2+7U/jsVv2puX9bD1h6d+3OZ/+jFqRe7O4c3jzwv30bfSYmtfUna2XwnEuR1focvj3c+7nEbkZzv9ynm7Ho284vcoW1pebxfQpTLwHLwrLbPpQLn0of6F4lUbfw7CH55/Gg9yZTSer6fCh++vZg/UX3n6NaTeGfWFNCVFx/wBE1EvVHoOu1pf1wuJjelESGhuzSjVYKo7iApjQO+qUopagkARE40AWc7O2LlwU2i2vFfrIdZDV77VQaLmO73io74dezUEbFAcQLzM2o8qXYtlN/3wMkKQBBxZDbqyygiyA6x9Y7GKBtQEby8uRMQ6TTLK4f9nsdW3XPXOaoe15fuvMaSHrwjqz+17Pbfq69jUTN+wmD2cC8j0Gt+09Bh8DoUsKiuZVn3PZ6FzIlDziVSES1FjhBoNCDoJccXFgO55rcpouE1CAzTSLiwQay8WySpDJN3/bwIRX0nFvUt2/d8M73KszIXViqhS4iuUCZDXhyCiy60COBSw/NLHQbsC1+bCIqbpmMq0ip2SDZH/rtVtUm2xbpTsKo9sa9Fb3tLOj/3FWZvLtSfODaMzDRG4dxSu647YexnK+SPbp1G3wiBuPjWK1KqrCnylmzaV5UxIsMiMghaTHp0n2C5i5NWGeNJ22qA88b+X7+AqxYJHAAlLZplq1POFpEgFXT5OBvGblqe+ePZcybwJKcUx2mcgXjEL84SOHBETpSfGt/K2zPH4t1xFbO35knPI9Iiibq5WaQ0/vNAXJpFkqiTPLd40fM3DM+b5wm+QtFiG76b4Q8P6OphixrWNCsoKJQVevBLssXeEUT0sIXpXemKkmwctoL/m7o/3uehRJvkyxvtWlv1c2aNUuBHT1gqiwtPVSvlSlczbfmQovAHcHQ9930YVl/XYw7EfSeSN+K9nJ6eF96PwL</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1396294714790</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value>1B51A2686A915410FE61A0549481F9A8</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:F17659EFD050541087D0BF449481F9A8</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>79595c29-9f1e-4038-b36b-ed354756b54d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="DelegationTokenCreate_VerifiedEmail" disabled="true" id="abc4745e-1ce2-42d1-8d3a-da5802ce8ad1"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DelegationTokenCreate_VerifiedEmail_RTL_UserCreated_by_LLASP" searchProperties="true" id="bce7aa91-aac7-4ea4-832d-5161a2ff0e38">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="d4e60763-6ac0-4e4a-9f7a-b944b606847e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdLLASP"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
</script></con:config></con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="a1e9c49c-902c-497b-8108-8adc6da45483"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="5c2676ac-f869-4d34-9f38-acdaffe6cc6f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="954561ff-b99c-46a7-8106-548b86944f7e"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="6f18750f-e684-4fa1-a048-86996de5990b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="38690d53-89fe-45fc-aeab-ede49a5c2da7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="0488aed1-abc2-42ec-971c-dd7bdb0540db">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set NODE_ID to RET" id="62619bc1-e89c-4fb8-8d0d-ac6cea46dd36"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="43660d03-df68-4c02-b83b-0e4de9eb1236">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="f4493924-6f05-40e7-a6d1-6f6ffa630031">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>ACCOUNT_OID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_3bbcea01-cdd8-4cb2-ad5e-6ef58b7d768c</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FBA3B13737771736E0401F0A05995A85</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FBA3B13737771736E0401F0A05995A85</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>FBA3B15727F68A00E0401F0A05995AAF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:FBA3B15727F68A00E0401F0A05995AAF</con:value></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1402583744556@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU/I6EP3ur+jUj07pC5RCR5ipIhcUQS2+8eVOTBeItik0KS/++icptgKi1+fOMMNku9k9u3tyklOGotByPcYg4SSmSrfVUP8tv7xgQIap4SCoaRX8YmkosEGrwtiuvTiBU61hVekylkKXMo4ob6iWYVY0o6qZ1tAsu1bNrVglu1IZqcoDJEyEFi4lQ1VWUUiZm6VtqGlC3RgxwlyKImAux67vXfdc4emiHJPaPN2gzBImzSnnM1fXcSkADGGISziO9FN9x+c0YK5PJhTxNIGPnAFrqB97l8tlaVkuxclEtwzD0I26LnwCRibHavMo3wxBl47jzfoc0ZgSjELyjiSoa+DTOFC8cBInhE+jb0KbumnI0BqssIbNCj1W9c8EGbpfRtoBmTCksSky82B3MIYEKAbl/q7bUI9/N8HN3mGCKBvHScT21n8HCegCwngGgcbyynJ0v494oF3NU8Bul+IwZWQBfUmTGcLAlJsExmTVI0yQL2BKNn5lxcSP5CwD/DdjOdW3sQro+oHutMgEGP8/M9ue1ybKAwpTaD69XfV6V+cXz9c3t31/hG376mTwOnIM+7aRQdh23oAqxv2x3idrwa2PTeSsHRoo4v4ouPRmHf8a365nHW9SD9nocf78eLe8H9a7N/Pg/Xkw8P7pkBuLRvr95ToaDtBl2ap5nT7UHuZkfZkejc+q5sqbBu2nwbgyeFr3ErDa9wu+8kfw6nSWfTi/a3VaEel0L5dWgllcN1s+dtr958F4VsamHg2rF4/v3PZej3Dn5H1qdl5P7Cs/rIaj3vlz47Om7Rp2jbkk+OnLK2CeLyU9ui2lLeaF+M/yIi0k0MaZqzuTGsU4UK425S4pLW4qBIgErhjmZt0+88pnpu1YTrta8wzjwqgYZtvwDLtetz2vnWvQBsUexPOYjonMJVV2w5+fAeLIZUADSLRFnOIpMPWHiC3EkdKld+JwxJTBMBYqHkVsPTai8nQ9mZiA4nIQvVfitzlSlX7MB3SQeGMOya50V3ek+w4wmRGQ+i4JzgTDGRe9mKNFykOztEAlCqm4ARIpwq5Vqdk6I9EsBIlUj+IgDaE0m86yzuhs8y+0CLPM2ut5/k129L6tbP9b3gThExDpwGQ1ZyAGCQduoXJeyvcl17dLzsN7aUDkCRMd5QnBGyS7nz6JIhlSsCSrKQdd+O4bduLq+yUVqYIFwQXZi1taiLyQgGY+kjkqzUvpYpFmQ3CkvCUivC5UztR9wKnQqPUwfgOqFyH0X10RBeq9zIV9F1/Kp9TniEMkKKNky1+8D3xg8n3QFVxf/fbxsZNS9I3Dih+ynYfiGSER//jSwC6WfsJ8I/6WcRJ8jutArK08ok7xKOCETuRKXgbrb2iBYxGWCPWKk+3ghwIcSr5rLJpcYOGCTS8ph++/KFKWGirCOE4p77bUzLAtlRlOvp6B++n0JUwmxx/364p9e78+Xfd8IVoRUgtf8t/OGsnogkGV13iGpaGuxHNRJKeTLWn+APhVnctO2XEc0ylXd9W5ZhcN3Kmk+cX81bLV0/3z0PwD</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1402579719395</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fd52c9d3-8b99-4e90-9f6d-19ff5efc5448</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>573a939d-9280-452f-a9aa-d7f9e0039d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DelegationTokenCreate_VerifiedEmail_RTL_with_Audience_Nodes" searchProperties="true" id="3b44da81-4cdb-4d20-85e9-fd1ed4b209fb">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="dd21b568-80c6-4d94-bc94-03097e990da0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
//tC.setPropertyValue("audienceList",null);
//tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="f49c6dac-b7fa-4b8e-b654-d90cb3680df3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="0d4bc272-64a2-461b-8646-287d14845c2b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="06a8bb04-b04a-4184-9080-445fbc566c4a"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="acd652d3-00f6-4884-bfaa-642a842708b5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="fdc9421f-2b15-412a-ac18-9f3b0ca8fe37">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="0abef83d-22d1-4b28-b4c7-99a342850d4d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Establish Entity and Affiliate Node Settings" disabled="true" id="529bf5a8-85ec-485c-85af-2a308cd5ba5e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = 0;
String nodes = tP.getPropertyValue("nodeAffiliationRTL").toString();
log.info nodes +"#########################";
String audienceList = "";
String affiliationList = "";
List nodeList = nodes.tokenize(";");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It [$i]: $it";
	
	if (i == 0) {
		tC.setPropertyValue("NODE_ID", it);
		affiliationList = it;
		if (nodeList.size != i + 1) {
			affiliationList = affiliationList + ",";
		}
		
	} else {
		
		audienceList = audienceList + it;
		affiliationList = affiliationList + it;
		if (nodeList.size != i + 1) {
			audienceList = audienceList + ",";
			affiliationList = affiliationList + ",";
		}
	}

	i++;
}
log.info "audienceList [$audienceList]";
log.info "affiliationList [$affiliationList]";
assert audienceList.length() > 0;

tC.setPropertyValue("audienceList",audienceList);
tC.setPropertyValue("affiliationList",affiliationList);</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy Create" id="74c1601e-b462-4204-94df-0355df7e0772" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="dc890236-d717-4356-9e62-c8dd6b40eefa">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="44a03696-9dea-4661-a509-320ca7ea2814">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy Get" id="a12aef18-327a-416b-bf1b-540700825e8e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy Get_RET" id="a01603bd-532b-4fa3-a511-ba92afa8e352"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy Get_LLASP" id="95383dc9-94a5-48f6-8354-93abb1b33a8a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Copy of PolicyGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="CALL ULC Policy Get_DLASP" id="bb8d5d82-7181-4cfc-9eb1-e3281ed0bbbf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Copy of PolicyGet_1")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy Delete" id="31f56eda-167a-426a-837f-8ec7afb4ad76"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Call ULC Policy Get" id="9cecaa5f-564b-4165-928d-d95be3c9fbde"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Call ULC Policy Get_RET" id="186df970-0b82-4649-9e57-752c7ebcbbe9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Call ULC Policy Get_LLASP" id="5b855914-873b-4e08-b211-44d719549644"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Copy of PolicyGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of CALL ULC Policy Get_DLASP" id="8478f0b2-52fc-4d37-9638-fc6230c0b13c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Copy of PolicyGet_1")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FA697D13BCBA6EECE0401F0A0599126C</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value>urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_e8908e9d-7843-461a-a001-24f2ba9431d1</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FA697D13BCB96EECE0401F0A0599126C</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FA697D13BCB96EECE0401F0A0599126C</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>FA84EC6E9A67181CE0401F0A0799242B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:FA84EC6E9A67181CE0401F0A0799242B</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:FA697D9F3FB502F2E0401F0A0599126E</con:value></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1401351742806@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=pVZdb+I6EH3fXxFlH1HIBwGSqCBBoEt2KW2Bdtu+XBnHAW8TO40dSvvrrx2aFCjt5d4rISFPxjPHM8dnfMZAEltejzGUcUyJEgw66l/IcQ0HuaHWduyGZrdMoAHDMDXLjqwFcO2GGZqqEjCWo4AwDgjvqJZh2prR1Cx3bjieZXkNs25b7oOq3KKMidDCpW6oyiaJCfOKtB01z4hHAcPMIyBBzOPQm/Uuxp7w9ECJSe2ebVEWCbPuivPU03VYDxFEcQzrkCb6mb7ncxYyb4aXBPA8Q285Q9ZR3/Y+Pz/Xnxt1mi11yzAM3XB14RMyvPyudr+Vm1EYkIhu1z4glGAIYvwKJKgLxFc0VHrxkmaYr5JPQpu6acjQGtpADZo2+a7q7wkKdCdG2gOZMaCxFTDLYFMUoQwRiJSbadBRv5/Wwe3eeQYIi2iWsIP1v4OEyBrFNEWhxsqTlehOj3ikXN0zBL2AwDhneI0mkiYpgIgpVxmK8GaMmSBfyJSi/cqGiR8uWYbgv2nLmb6LVUDXj1RngJeI8f/Ss91+baPcgjhH3X7vZZYFf/zLZuC/jIB1Sdya+dCcmvF1p4Cw67wFVbX7bX1I1opbb5v8yfwht+iM0MXDvHcVP5I0i+mfZmqkjdfz2xa4c/zm9dOP+Jn+1I1wNLjhjeVjbT2OH3838qfH2i9iktv7/rWVjL7NcjLuPUzatVHInWsWj+4i+no/ouH9eWT8WqR3tc30Z4AW+EcwnjWG0c3Ty+QhDWjt98QeDsnVze2PLHXIILAGF98Gv5gPm8lrDUxWIz66Mxf3nfcz7Z5h31hKwixf/EGQl0tJj2CgnIt+Af61vEgLDrWocPVSqVGMI8LVrtwlpcXLhQDh0BPN3K7Pe4499FtDt9dqm47pDw3bMM+NntF2Xcu2+qUGbVEcQPQpibDMJVV2y5+vAcLEY4iEKNPWNIcrxNQvIg4AB0pApuJyUMLQnHZUw0BtF4GG1oraLc123UhzLEcoQjNquc1FO2o5QsQnlF+Sy6wXcZTtibhp7on4FEGcYiSVXlKdCa4zLqryBNY5j836GtQJysUsyKQce5btNHWGkzRGErOe0DCPUT1dpUWNdLb9tzQAWWH1DX947gwNxx+afnvQqmrbdF3TMvrF/fz0+IffykoJnxBLByYP2kei2+jIqLLKU36oRvPoSCvD9/IQy2soys4zDLdI9j+9s0nSqKLSYNybXZWgK9/T9o7/x97pcP5xp/7FafTDQlaJwjXeSVsOazF/hDp1S448gfpTPV+v84IVbam8mQivCwE29RmCuZDPlzl9RESvQugnTa8K9UHmyr6PL+crMuOAo0RwWCmWJzxdZojJp0sgruHm1HfRXkpRN442/JjNj8ULRyL+8hEEPSj9hPlK/D3TLHxv15FYO3nEOcV7hWOylCs5p14+IQWkIiwWwkqz3eDHAhxLvm+silxh4YJNi5yjz78oUjE7KoCQ5oQHA7Uw7Kp4gZO/pMh7d/oQppgUb6N/wz4d/XcX45nQ0wSolS/+Z2cNF3SBSJUvjAJLR92Il6xITpY7U+MN4P7gaLntgdno+323NRz6++LW8qsC7p2k+8H80bJT08P70P0b</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1401351743504</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FA84EC6E9A68181CE0401F0A0799242B</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fd52c9d3-8b99-4e90-9f6d-19ff5efc5448</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>573a939d-9280-452f-a9aa-d7f9e0039d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5333a278-be73-4359-bedb-c61a53c2ddc2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>74c1601e-b462-4204-94df-0355df7e0772</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>31f56eda-167a-426a-837f-8ec7afb4ad76</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DelegationTokenCreate_VerifiedEmail_RTL_with_all_Audience_Nodes_Ignored" searchProperties="true" id="101e0422-ca7a-49e4-9262-08ee80ed5250">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="26c05ead-8831-4034-873b-134da057aed7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("audienceIgnoreNodes",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
</script></con:config></con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="4d4a7db3-095e-45d1-822b-b84cdb8eedf8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="64b49b17-bc77-4aa3-b6ba-e892bdbd53b8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="08391473-41ed-43c4-afb6-b37ccc12d7b1"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="d932c0e4-b93c-40b4-bc30-f13075391cdf">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="174eb48a-0d9a-4cd1-aea2-d4d2640193ca">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="969ddfef-4573-4297-9cc3-bcc620e9bbe4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Establish Entity and Affiliate Node Settings" id="e2ce1ecb-95d6-42d1-a83b-e628c3d2881f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = 0;
String nodes = tP.getPropertyValue("nodeAffiliationIgnoreNode").toString();
String audienceList = "";
String affiliationList = "";
List nodeList = nodes.tokenize(";");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It [$i]: $it";
	
	if (i == 0) {
		tC.setPropertyValue("NODE_ID", it);
		affiliationList = it;
		if (nodeList.size != i + 1) {
			affiliationList = affiliationList + ";";
		}
		
	} else {
		
		audienceList = audienceList + it;
		affiliationList = affiliationList + it;
		if (nodeList.size != i + 1) {
			audienceList = audienceList + ";";
			affiliationList = affiliationList + ";";
		}
	}

	i++;
}
log.info "audienceList [$audienceList]";
log.info "affiliationList [$affiliationList]";
assert audienceList.length() > 0;

tC.setPropertyValue("audienceList",audienceList);
tC.setPropertyValue("affiliationList",affiliationList);

tC.setPropertyValue("audienceIgnoreNodes",tP.getPropertyValue("audienceIgnoreNodes"));
tC.setPropertyValue("audienceIgnoreAll","false");
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="7e2f670e-4996-462a-af59-e5dcb19f9d91">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="3a3b521b-0201-4f6e-b7b7-3e93545209f9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FA84EC6F83B76EF9E0401F0A059979F3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FA84EC6F83B76EF9E0401F0A059979F3</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>FA85A3E9621E523AE0401F0A079925E6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:FA85A3E9621E523AE0401F0A079925E6</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1401351842438</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value>FA85A3E9621F523AE0401F0A079925E6</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FA84EC6F83B86EF9E0401F0A059979F3</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1401351842041@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_2b90e506-9e64-4bfa-9fb0-669b6eb4c04b</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc6JKEH3fX0GxjynkQyVARauMYi5rTLKaZL15uTUMrY6BgTAD6v76O2Agakxu9lZZZU3Tc/pMd8/puWAoCg2nxxiknMRU8gYd+R/DtzVoa6Zig9lSWv4cKfbc1xTTtH0T/BbWWr4seYxl4FHGEeUd2dD0lqK1FcO+1yzHaDma1dB180mWHiFlAlq4NDRZ2kQhZU4ZtiNnKXVixAhzKIqAORw709742hGeDqo4yd2LHcsyYNpdcp44qoobAWAIQ9zAcaReqAc+FwFzpmRBEc9SeI0ZsI78une9XjfWzUacLlRD0zRVs1XhEzCy+C53v1WbIfDoPN6t+4jGlGAUkt+oIDUGvowDqRcu4pTwZfQBtK7qWgGtwAYrWG/R77L6FqBk90WkA5IpQwpbIr0Cm8AcUqAYpIeJ15G/f62Cu733KaJsHqcRO1r/GSWgOYRxAoHCqpNV7L6OeCJd3QvAjkdxmDGSw03RJgnCwKS7FOZkc02YaL6ASWX5pQ0TP1J1GeA/KcuFus9VUFdPZGdAFsD4/6nZfr12KI8ozKD7NEb0wd7aar4yF5s78jhwkx/sV0Qe3E5JYd95R6ou9+v6uFnr3nrd9KzO7Fk6ejL+Nq/z8SQ2zpfROk61WbR1o7Nk9isdo9VwNLxGeDMN7a1l0ck0e1r9teJnty/hJicz3Dwb9Fv51d23H96t/fygP/Pnq9ucui+tq5G91kbrZNwfnem3zzNveZPfr4KWH7CR9hvdzfyVenP5eJXO1clDtjU8A/zLpD2jDy/fRuznz0t96raxiqG3nS5WXuftTPtnODRWkjDN/BVgXi2L9vAG0lDUC/HP5aWwkECZl65OUmgU40C53C12FdLiZEKASOCIYu7Ww57V7jVd2zR0t200e67W0vSh1tPObdtou2alQTsWRxT7MZ2TIlahsrv++ZwgjhwGNIBUyeMML4HJnyAOEEeSRyficsSUwX3ckU07AM0KQDEC31BalpAACwxfafu6hQGZbT0QIn4T81t6m/bmHNIDEdf1AxGfACYJgULpi1ZnotcZF1l5QXnGQ72RowaFTMyCtJBjsdVqq4xESQgFZzWKgyyERrJMyhypbPdvKAiz0trX+u7QcjWr7+r984FZ57Zt27qhXZb388PjH3+rMiV8AlI4sOKglyCqDe9GVdNpV6d8l432yZFWwfeygBTXUKSdpwTvmBx+euumoo3qVpq49xXl2vPYcICqHh+oDhTkBNf3oR7kYg4IlehWtXpBjZdGludZWZ3zQgFTAa8KIdTVKeBMyNj2Pn4GqtYQ6pemSM36KHJtP+SX8SWdcsQhEr0klcsvPCGmwIonhCeuw+ar75ODkCJvHDb8lK0fipdGwfjTxwh2cOEnzHfiT4hn8FauE1h7ccQ5xbuBE7ooVsW82H7QFDgWsEQIXJzug58COBX80FgnuebCRTf5GYePv0iFcnVkhHGcUe4N5NKwr6YlT75NwHlzegdTKvbrCN6wD0fwbHw9FboWIbn2Jf/trJCyXTDIxaQvuXTkjXhRiuB0saferwSPBLzl9s2h1bw8N92hvS8y5/awWSfw4CTdd+b3lr2cHt+H7r8=</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>LLASP;RET_2</con:value></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value>RET;LLASP;RET_2</con:value></con:property><con:property><con:name>audienceIgnoreNodes</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>audienceIgnoreAll</con:name><con:value>false</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fd52c9d3-8b99-4e90-9f6d-19ff5efc5448</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>573a939d-9280-452f-a9aa-d7f9e0039d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5333a278-be73-4359-bedb-c61a53c2ddc2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DelegationTokenCreate_VerifiedEmail_RTL_with_Audience_Node_Ignored" searchProperties="true" id="f874684e-1877-44c4-82aa-b434d6f11602">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="7b75efe5-ba4f-4485-85b9-cab5196cafc9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("audienceIgnoreNodes",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
</script></con:config></con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="a67ac66a-bb6a-42ed-b1b0-68cbf826f4dc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="58248c42-ede2-4339-b7c3-9e57fc2768bb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="13e5bf81-2d2b-4347-a09d-e7a3f3a95919"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="66c0e6de-010a-46ba-83eb-f686977fe935">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="651ea640-8013-4d39-b420-3d7c512af368">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="c0637030-6709-4783-b4bd-165455da4ab6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Establish Entity and Affiliate Node Settings" id="b3b2fee7-2314-4f79-9fc3-2292e4700632"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = 0;
String nodes = tP.getPropertyValue("nodeAffiliationIgnoreAllNode").toString();
String audienceList = "";
String affiliationList = "";
List nodeList = nodes.tokenize(";");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It [$i]: $it";
	
	if (i == 0) {
		tC.setPropertyValue("NODE_ID", it);
		affiliationList = it;
		if (nodeList.size != i + 1) {
			affiliationList = affiliationList + ";";
		}
		
	} else {
		
		audienceList = audienceList + it;
		affiliationList = affiliationList + it;
		if (nodeList.size != i + 1) {
			audienceList = audienceList + ";";
			affiliationList = affiliationList + ";";
		}
	}

	i++;
}
log.info "audienceList [$audienceList]";
log.info "affiliationList [$affiliationList]";
assert audienceList.length() > 0;

tC.setPropertyValue("audienceList",audienceList);
tC.setPropertyValue("affiliationList",affiliationList);

tC.setPropertyValue("audienceIgnoreNodes",tP.getPropertyValue("audienceIgnoreNodes"));
tC.setPropertyValue("audienceIgnoreAll","true");
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="42c826b6-acf3-4aac-8666-0cf045bf6af9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="fb959efd-bdd8-4424-b0c6-c2ffec9cd5ec">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FA84ECAC80303C98E0401F0A079925F4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FA84ECAC80303C98E0401F0A079925F4</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>FA697DC0F7750C87E0401F0A05991265</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:FA697DC0F7750C87E0401F0A05991265</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1401351940708</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value>FA697DC0F7760C87E0401F0A05991265</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FA84ECAC80313C98E0401F0A079925F4</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1401351940175@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_fc592f4a-3557-446d-a526-f0ef75b49294</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc6JKEH3fX0GxjylkQBCholWIepfEfFx1kzUvtyZDo2xgcJlB3fz6O2AgYkxu9lZZZU3Tc/pMd8/pOWc4iXXHZQwyHqVU8oc9+Z+QmLYeGlhpm6alGEYnULCpd5QQQWiZj4at24Ys+Yzl4FPGMeU9WUeaoSBT0e056jq66Ridlo7sB1m6g4wJaOHSQrK0S2LKnDJsT84z6qSYRcyhOAHmcOLM3KuJIzwdXHGS++d7lmXArL/ifO2oKmkFQCCOSYukiXquNnzOA+bMoiXFPM/gJWbAevLL3u1229q2W2m2VHWEkIpsVfgELFp+lftfqs0Q+DRM92sP05RGBMfRMy5IXQFfpYHkxss0i/gqeQdaUzVUQCuwIwrRDPpVVl8DlOw+idQgmTGssBXWKrAphJABJSB9n/o9+evnKrjfO88wZWGaJexo/WeUgG4gTtcQKKw6WcXu84gn0tU/B+L4lMQ5izZwXbTJGhNg0m0GYbSbREw0X8CksvzSjolfVHUZkD8py7l6yFVQV09kZxgtgfH/U7PDeu1R7nCcQ//6rPtjvLJufrYHt+79zLBHq7HlztKu+71XUjh03pOqy/2yPm7WurdeNoXrB2vAn61MDy4m7vU8X3SmE/ScjBZpe6XdBN2BS9Dldz59erqeaGdP9wvwruZD0052F+1v2uX0kc4WC2053Qw2X4Lbhb/IL8hk2bl8uh8ttxe+vxn71s2VtjZD+/keFpNklaf023gOsyTIv43+Ht9dWHA5OrODtpXdrdpeJxjMzcXyy7B9m40e0M/t42DO/tr55hXrvZ7p8AxNYyUJs/zxJxBeLYv28IfSWNQL84/lpbBEgRKWrs660CjGgXK5X+wqpMXJhQBFgSOKuV+P3Y5tDT00tiwTeV1rhAykjZGLTNvW9I5ZadCexRFFL6VhVMQqVHbfPx8TJInDgAaQKZs0Jytg8geIQ8yx5NOpuBwpZTBPezLSQQM7DBQLEV0xbGwqNoRI6WALCEHEgg6WpeuU39CbzA05ZA0R17SGiE+BROsICqUvWp2JXmdcZOUX3uQ81lob3KKQi1mQFXLs6EbXVFmUrGMoOKtJGuQxtNardZkjle3/dQUTVlo95I3G3RHqeiPNs4adZm7RoLyf7x7/+FuVKeETRIUDKw46AFFtODGq2tUp32TDPDnSKng3D6LiGoq08ywieybNT6/dVLRR3UrT0byiXHseGxqo6vGB6kDBJiL1fagHuZgDQiX6Va1+4davVr7Z5GV1rEIBMwGvCiHU1BmQXMjY73n6BFStIdRPTZGa9VHk2t7kl/MVnXHMIRG9JJXLTzwhZsCKJ4QvrsPus++TRkiRNw47fsrmxeKlUTD+8DFCHFL4CfOt+NumWfBarhNYB3HEOcW7gUd0WayKefH7naYgqYCNhMCl2SH4KYBTwZvGOsk1Fy666THn8P4XqVCunowJSXPK/aFcGg7VtOTJf6/BeXV6A1Mq9ssI3rF3R/CPq8lM6FqC5do3+m9nJSrbhYBcTPqSS0/eiRelCE6XB+r9QrAp4F1j5LleF7VR27O7tchYtq2b49debpyk/8b81nKQ0+P70P8X</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value>RET;RET_2</con:value></con:property><con:property><con:name>audienceIgnoreNodes</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>audienceIgnoreAll</con:name><con:value>true</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fd52c9d3-8b99-4e90-9f6d-19ff5efc5448</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>573a939d-9280-452f-a9aa-d7f9e0039d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5333a278-be73-4359-bedb-c61a53c2ddc2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="SetUpProperties_P0" id="f8946bf1-70fc-4358-9232-c94b30029d22"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Setup_P0" searchProperties="true" id="df15893c-f60a-4151-8b76-84167f43672d"><con:settings/><con:testStep type="groovy" name="Set Env Properties" id="be5f319d-6bf7-4c03-9f04-e101cacd108c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info("Set Environment properties!!!");
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath
log.info("Project Path : '" + projectPath + "'");

def eNV = context.expand( '${#Project#ENV}' )
log.info("Environment: '" + eNV+ "'");

def propertiesPath = null;

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows OS!!";
    		File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
    		propertiesPath = temp.getCanonicalPath();
	} 
else 
	{
    		log.info "it's Linux OS!!";
    		File temp = new File(projectPath + "/../../../Properties/");
    		propertiesPath = temp.getCanonicalPath();
	}
	
log.info("Properties File Location : '" + propertiesPath+ "'");


def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));
log.info("Load property file : '" + propertiesPath + "/" + eNV +"project.properties"+ "'");
String line;
while ((line = reader.readLine()) != null)
	{
		if (line.trim().length()==0) continue;
		if (line.charAt(0)=='#') continue;

		int delimPosition = line.indexOf("=");
		String key = line.substring(0, delimPosition-0).trim();
		String value = line.substring(delimPosition+1).trim();
		propMap.put(key, value);
	}

propMap.each{ k, v -> tP.setPropertyValue(k,v)}

</script></con:config></con:testStep><con:testStep type="groovy" name="SetRemainingProperties" id="61c297b2-c595-4172-97fe-f1ae0431eab9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ENV = context.expand( '${#Project#targetSystem}' )

log.info "Environment "+ENV;


tP.setPropertyValue("AlternateEmail","test_sts123@uvvutesting.biz");
//tP.setPropertyValue("PrimaryEmail","testing@uvvutesting.biz");
tP.setPropertyValue("samlAuthenticatingAuthority", "urn:dece:org:org:dece:coordinator");
tP.setPropertyValue("samlIssuer", "http://c.decellc.com/");
tP.setPropertyValue("linkLASPNodeAffiliationLLASP", "");
tP.setPropertyValue("nodeAffiliationACSPTL", tP.getPropertyValue("nodeIdAccportal")+","+tP.getPropertyValue("nodeIdRTL")+","+tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeAffiliationDECECS", "");
tP.setPropertyValue("nodeAffiliationDLASP",  tP.getPropertyValue("nodeIdDLASP")+","+tP.getPropertyValue("nodeIdRTL")+","+tP.getPropertyValue("nodeIdLLASP"));
tP.setPropertyValue("nodeAffiliationLLASP", tP.getPropertyValue("nodeIdLLASP")+","+tP.getPropertyValue("nodeIdRTL")+","+tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeAffiliationRTL",tP.getPropertyValue("nodeIdRTL")+","+tP.getPropertyValue("nodeIdLLASP")+","+tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeEntityAffilatedNodes", "");

log.info "sada"+tP.getPropertyValue("nodeAffiliationACSPTL");
log.info "sada"+tP.getPropertyValue("nodeAffiliationDLASP");
log.info "sada"+tP.getPropertyValue("nodeAffiliationRTL");
log.info "sada"+tP.getPropertyValue("nodeAffiliationLLASP");
if(ENV=="QALP1")
{
tP.setPropertyValue("alid", "urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt");
tP.setPropertyValue("cid", "urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt");
tP.setPropertyValue("StreamHandleID", "urn:dece:streamhandleid:org:dece:D3CD9D93C110059998E0401F0A07992FB8");
}

else if(ENV=="QALP2")
{
tP.setPropertyValue("alid", "urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_11.txt");
tP.setPropertyValue("cid", "urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_11.txt");
tP.setPropertyValue("StreamHandleID", "urn:dece:apid:file:SARVAJEET_CID_DONT_TOUCH_11.txt:AUDIO_Number_11");
}

else if(ENV=="QALP3")
{
tP.setPropertyValue("alid", "urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt");
tP.setPropertyValue("cid", "urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt");
tP.setPropertyValue("StreamHandleID", "urn:dece:streamhandleid:org:dece:D3CD9D93C110059998E0401F0A07992FB8");
}

else if(ENV=="DEV")
{
tP.setPropertyValue("alid", "urn:dece:alid:test:Thu_Nov_21_14_36_04_IST_2013");
tP.setPropertyValue("cid", "urn:dece:cid:test:Fri_Oct_11_18_54_51_GMT_05_30_2013");
tP.setPropertyValue("StreamHandleID", "urn:dece:streamhandleid:org:dece:EC3B6FFFD3665563E0401F0A0F9911CD");
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set Coordinator Schema" id="6867269e-dbcb-49fd-9995-ce7f75c3b457"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "versionMinor: "+tP.getPropertyValue("versionMinor");

def v2 = context.expand( '${#Project#versionMinor}' )
def schema = tP.getPropertyValue("coordinatorSchema_"+v2);

tP.setPropertyValue("coordinatorSchema",schema);
log.info "Setting the coordinatorSchema value ---- "+schema;
</script></con:config></con:testStep><con:testStep type="groovy" name="SetTOUPolicyResource" id="648263e9-f317-4603-8715-5c4783d92399"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def tOUUrl;
def dBHost = context.expand( '${#Project#targetSystem}' )
def versionMinor = context.expand( '${#Project#versionMinor}' )

String country = context.expand( '${#Project#AccountCountry}' );

def a = new dbUtils.dbUtils(log,dBHost);
String sql = """select consent_version from (select
            consent_version            
            from
            CONSENT
            where
            CONSENT_URN = 'urn:dece:type:policy:TermsOfUse'
            and
            COUNTRY = '""" + country + """'
            order by
            consent_version desc)
            where rownum &lt; 2""";             


log.info sql;

results = a.SelectFromDB(sql,dBHost);

assert results.length() > 0;
log.info "results" + results;

def myXML = new XmlSlurper().parseText(results);   

log.info "consent_Version==="+myXML.ResultSet.Row.CONSENT_VERSION.text();
                
def consent_Version = myXML.ResultSet.Row.CONSENT_VERSION.text();

tOUUrl = context.expand( '${#Project#TOUUrl}')    

testProject.setPropertyValue("TOUPolicyResource",'https://'+ tOUUrl + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');
log.info "TOU_Resource==="+testProject.getPropertyValue("TOUPolicyResource");
</script></con:config></con:testStep><con:testStep type="groovy" name="Prioritize" id="1d994602-ef77-485f-bba6-90c09c705c93"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.*;
import com.eviware.soapui.impl.wsdl.teststeps.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def enablePriorityScript = context.expand( '${#Project#enablePriorityScript}' )

def executionPriority = context.expand('${#Project#disablePriority}');
def priority = context.expand('${#Project#disablePriority}').split(",");
def coords = context.expand('${#Project#coords}').split(",");//COORD-1000,COORD-2010
//log.info("Inside setUp for project '" + tP.getName() + "'");
def suiteList = tP.getTestSuiteList();
if(enablePriorityScript=='true')
{
log.info '----------------------------------------';

	tP.getTestSuiteList().each
		{	thisSuite->
				if( !thisSuite.isDisabled())
				{
					thisSuite.getTestCaseList().each
					{tCase->
						tCase.setDisabled(false); 		//Enabled everything
						//log.info '@@@@ ENABLING '+ thisSuite.getName() +' :: ' + tCase.getName();
						
							for (def prior : priority)
							{
								if (prior!='' &amp;&amp; tCase.getName().toUpperCase().contains(prior))
								{
									tCase.setDisabled(true); 	//Enable needed Priority
									log.info '!!!! Disabling'+ thisSuite.getName() +' :: ' + tCase.getName();
									break;
								}
							}
							coords.each //coord
							{ 
								if (tCase.getName().toUpperCase().contains(it))
								{
									tCase.setDisabled(true);		//Disable COORD issues
									log.info it+'#### Disabling COORD'+ thisSuite.getName() +' :: ' + tCase.getName();
									return true;
								}
							}
						
					}
				}
		}
	
	log.info "Disabled TCs with below Priorities : " ;
	priority.each{log.info it;}
	log.info "Disabled TCs with below COORDs: " ;
	coords.each{log.info it;}
	log.info '----------------------------------------';
}</script></con:config></con:testStep><con:testStep type="groovy" name="Flaky_Disabler" id="1a5a1240-b204-43e1-b03e-7e4a47a232ed"><con:settings/><con:config><script>//Project Level Variable name – FLAKYSELECTOR.
//Possible Values – all, only_flaky, without_flaky
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tc_condition  = context.expand( '${#Project#FLAKYSELECTOR}' ).toString();


//tc_condition = 'only_flaky'
tP.getTestSuiteList().each
{
      if(!it.getName().toLowerCase().contains("setup") &amp;&amp; !it.isDisabled())
       {
                it.getTestCaseList().each
         {
		   if(tc_condition.toLowerCase()=="all")
			{
                 	it.setDisabled(false);
                }
             else if(tc_condition.toLowerCase()=="only_flaky")
               {
                  if(it.getName().toLowerCase().contains("flaky"))
                 		it.setDisabled(false);  
                  else
                         it.setDisabled(true);
                }
             	else
             	{
                   if(it.getName().toLowerCase().contains("flaky"))
                                           it.setDisabled(true);  
                   else
                         it.setDisabled(false); 
              	}
           }
        }
}

</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>414cb910-4af7-4257-bd98-c9991807b4ea</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="2_DTCreate_Payload_FLAKY" id="e55bbbf7-2f2b-4018-a2a4-dd27fb010cce"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_000_DTCreate_Unique_primary_email_address" searchProperties="true" id="ceba45e3-dd0c-495b-be99-5d9d92b3cb11"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="964a73d8-cbbc-4d20-92d9-d82b6979d5f3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="b49c2325-f0ee-4f43-9244-4bac409654b8" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="1b702c79-ed7b-4e50-8463-71b1aeca37d4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="10d0ff86-dd80-4e41-8d3b-eda506a749c9"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="2d994d98-a44a-429b-934d-b61c54c8a22f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="10a2571a-2fbe-4655-8f33-116fd59bfac2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="54c6b797-8e99-4a7e-af50-8ba495f59c8c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="d0c5b244-7b1e-4e80-80d4-2f5edbbc2584">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("expectErrType", "SUCCESS");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1822F318F649677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1822F318F641677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433909646317@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1822F318F63F677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1822F318F63F677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>1822F318F640677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:1822F318F640677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433909646317</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_2d761380-c572-4835-aa27-e4a728f21acf</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU/I6EP0rTJ+PTmkL5a0jzCCIcuVFARX9ciemC422CTZpqfz6mxSoFF8u937qZLvZPbt7cpJzjgK/5LQ5h1AQRgtJ4FPupNamFoXUYYgT7lAUAHcEdqbt4cApFU0H7bdohX63qf1db9RKixpq6BaUG7pt1ZBeb7gL3S7hF1TBtRdUQ9KV8wj6lAtERVMrmVZFN6u6Zc5M27Esx7SLZqX6rBUeIOQytnQpmtoOVMKbmifEyjGM9XpdXJeLLFwaJdO0jPlwMMUeBEhrnW8rShOFrZ0/LrqAwfdxEbPAODdyPucud6ZkSZGIQtjlcn/KZRpmw5A+LifLP1q2F9w+XbB02UGUUYKRTzZI9WcIwmNuoe0vWUiEF/xYhGWqwDokWMeWTf9oRh7aiYFyCEOOdO4haxdrAgsIgWIo3E/6Te3PaVNLt85CRPmChQHPL/8bHqAx+GwFrs73Ze2gnR7wm061zgE7fYr9iJMYRoqsK4SB76YJ+PRQhdsQFiQZEC4JmnCFzjiEd7TcdqNLlsDF/xnQwXC2QR6QH0Gr8xrTfkLcdWUyu1lvPHjqbOrssv9msmYK4NA5NWSj3S6PSJmRaLsjqfYIGSWeb98t77uPl5fBe3W8WRE/9OZ1E4Z944Gz6+rrtW9e1+L5pB2+j5/p+GrwhtqvN/ZN4Ccfq/HHGTxdwfx2EAb0ikVodD2b1cujs57nPtCz6Qgek2Fl+AyTIb5w/3pEoduYv9axO366u2cP7n10fVM6e7276sC8wcbWJBHTQRyM2KSxGdo33cdZj3p3zaycA/x52/7MT6OXV8Biv1Q06HcLPTklJH4XM2Uhrr5IXZ2VEh8ugAqtpXYp7XAiKXfEdeQMt2urXir1yla9V7XNaq3WuzQr5fJlo2H1zHa53rnYi8wWxRHEDqMLonIpyd3S5neAOHA4UBdCPWaRVDqu/RKxiwQq9OlEHgJGOcyYlGcLrAqDElTL1KtZEFc3PndJYkNdK4yYGNNx2F4ICPOiXMuJ8gQwWRFQyq2IzSWzuZDNeEdxJHyrGKMihUhqe6hk1inZ9YrBSbDyQUE1AuZGPhRX3iptjcG335KOME+tk8tZetx+LOz4374H0sclyoGrWi5AzhG+3C6mU9kX8mPB0umg4H34duQSdbJkQ0VI8BZJ/tcnTxRBMpLIivaQM89jQy6qcVxQlsiNCc6Ynt3XUsblwW/tx/GOrOJ7MYrjKJ2AbZeNUIY3pM5ZxhRwJHXpY8begBpZCOOkSyBDfZQ5s+fxRcKjU4EEBJIuhXR5wq0/Ba5u/b4kenLqkyKXUvZNQCK+s3V8+WJRiH991GAHKz9pvpWfNQvdz3F9E+sgj6xTXvqC0KVaqQvg4wdSYCbDEildLDwM/l2A75LnjVmTMyxCsuklEvDzn4LSpKaGMGYRFf2ulhoOdTLFKT5W4Hw6fQmTSnH2NiP//jjTSUoBDPJFx0kaX12xjuI/XR5o7S7p93Jb7v0mt3l0rS/mr5aDPh1zvPUP</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_001_DTCreate_primary_email_address_does_not_identify_any_user" searchProperties="true" id="9ef474c2-3487-4a8a-aaa8-7bddd733f044"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="c8c8e7e2-1bad-42a2-96a0-626ca1150e67"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="f80a19e9-c9d1-476c-93f7-f6f4d6bdd01d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="8bd7b1b7-1f41-4570-940d-b6aab3530add"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="dbbb8f5b-5398-426c-99a3-30fd2c90c101"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="8ebc16bc-1fdd-4ebe-b4b9-5199a960c823">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="abfaac09-6de9-4cf1-b8fa-1612ecd970a9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="0ca01e2d-0a87-479b-a15d-20d34086f42f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Change Primary Email" id="48ce6c76-313c-4d61-ac86-6bd7fd0a210f"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


import org.apache.commons.lang.RandomStringUtils

String charset = (('A'..'Z') + ('a'..'z')).join()
Integer length = 9
String randomString = RandomStringUtils.random(length, charset.toCharArray())
log.info randomString;



tC.setPropertyValue("PrimaryEmail","test_"+randomString+"@uvvutesting.biz");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="8290c126-167c-4f63-9a95-01a7ea4987ff">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("expectErrType", "UserIdNotFound");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">16E4390AB96849F6E05307991F0AB206</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">16E43398C61D5576E05305991F0AC9D4</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_rGRMLzQZU@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>UserIdNotFound</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>16E43398C61C5576E05305991F0AC9D4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:16E43398C61C5576E05305991F0AC9D4</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>16E4390AB96749F6E05307991F0AB206</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:16E4390AB96749F6E05307991F0AB206</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1432541053644</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_5a178af9-e497-4d6b-8297-7bcad8274f91</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc9o6EP4rjPuYMb5gY+wJzJAQWnfIDWgufTkj5AXU2pJjyRjy6ysZcDG5HM55Aq1Xu9/ufvqkc46S2A76nEMmCKONdRJTHpTWrpZnNGCIEx5QlAAPBA4m/etRYDfNAO23aI1w0NX+cZHlddDc18HxPd2J2jO9Y8t/3gyjqGN7zty3pCvnOYSUC0RFV7NNy9VNV7fdqdkJTCtomU3Xd35qjQfIuIwtXZqmtgO15l1tKUQaGEZRFM2i1WTZwrBN0zKerkcTvIQEab3zbUVloqy388fNCDDEMW5ilhjnRs3nPOLBhCwoEnkGu1zRR7lMw/QN6RNxsviiVXshCumclctLRBklGMXkFan+XINYsqjRjxcsI2KZfFiEZarAOqyxji2HftGMOrQTA9UQZhzpfImsXawxzCEDiqHxYxx2tS+nTa3cOs0Q5XOWJby+/G94gK4gZilEOt+XtYN2esB3OtU7BxyEFMc5Jyu4UWRNEQa+mybg00M17jKYk/WIcEnQNVfojEN4R8ttNwZkAVz8nwEdDGcb5AHFOfReR6nIrr00Tbz7G/Y42SxfCxfbTguKbgng0Lk0VKPdLo9IWZFou2N2tlqPwtbmp/ttM7q4gzR0UtNdm52CkK/PMX16Nr8W35z212x4E9nmcuStx8tNxn4s73+kF8PFg7hY/cr7188FH0xWV5H3GJ39Lsbf4allP2SbvEXPmPg1PItN+7mdh0P6vDYn/asi/8lexv64jeSBfx4QuH+6f7hxXO/RIdO7FHvjufH4/eJ2ukit/qBw+mZ41a3KOcBft+3P/CSf/QIs9ktFg3DQGMopIfG5mCkLifR56RqkSny4ACq0ntqltCPIpdyRKJAz3K6t9pXT8s3+hd/2HH/YvjLdlun5vjWUNtts70Vmi+II4iWjc6JyKcnd0uZzgDgJONAIMn3Fcql0XPsk4gAJ1AjpWB4CRjlMmZTn9Qu4QDu+07EsK5rN4rRjk5dXmmiNGyZu6W3WnwvIappsWTVNHgMmKQEl3IrXXBKbC9mLF7TKRWw1V6hJIZfSnimVDWyn4xqcJGkMCqmRsCiPoZku07IzBt/+2jrCvLSOr6blafuwruNv+xZIn4goB65quQA5RnjncrH3hXxcsHNY8D58P4+IOliynyIjeIuk/ukvTRQ/Ko7IivaQK89jQy2qcVxQlShaEVwRvbqupYrLc9/bj+MFWc2XZr5a5eU9l8nQhpQ4y5gAzqUkbabsN1Cj2m6cpP8V4qOslb2OLRdLOhFIQCKp0iiXJ1z4E+Dqwg8lx9enviZqKWXPBKzFe7bLWD5WFOJP3zM4wMpPmu/kT8Gy6O+o3ol1kEfWKe97QehCrZT2bz4gBGYyLJGqxbLD4O8FeC953Vg1ucIiJJNmuYCPvzSUHHU1hDHLqQgHWmk4lMgSp9ikEPx1ehOmVOHqWUb+/V2mk5ICGORjjpMyvrpdA8V9ujiQ2V3SN0rb8juXbevSdb2t0rpbpb30B07VlBq63hvzW8tBn4453vsD</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_002_DTCreate_alternate_email_address" searchProperties="true" id="a67c69f8-6c52-4021-9922-593ef2c98877"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="41de43fd-32fb-4016-a998-1437026249e6"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

String charset = (('A'..'Z') + ('a'..'z')).join()
Integer length = 9
String randomString = RandomStringUtils.random(length, charset.toCharArray())
log.info randomString;

tC.setPropertyValue("PrimaryEmail","test_"+randomString+"@uvvutesting.biz");
tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("AlternateEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="a7338cc3-7dcd-4f1c-ba37-181af6af23c1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="8021b839-65e1-4b98-bc26-02e8b79e8658"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="38d22346-2fdf-472a-b0de-0f7a6dae8761"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="c2bef85b-5f22-423f-b0f5-375942aea55f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="0de75ed4-59e2-4a0a-9de6-f8199b8a7493">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="a601cf9e-9e95-4321-84b3-fabddaf48954">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set Primary Email as Alternate Email" id="432c7a7d-ccf6-40f1-8fda-8cba82312455"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail",tC.getPropertyValue("AlternateEmail"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="06bbd293-c26c-4017-86d0-9b75cf3b127f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="d9f93ec6-b804-490d-8d14-44020ae5b63f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">16E4390AB9A349F6E05307991F0AB206</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">16E4390AB99749F6E05307991F0AB206</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1432541084589@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_1432541084589@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>16E4390AB99649F6E05307991F0AB206</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:16E4390AB99649F6E05307991F0AB206</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>16E4390AB9A249F6E05307991F0AB206</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:16E4390AB9A249F6E05307991F0AB206</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1432541086539</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_fab4f647-f7ab-4e52-b036-e3067c5bd120</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMpaNMeAKVHFL4hlyA5IdeNkSsgxabAks2ZB8/UgGHExIlt0nV7db3acvOuprDqPQctuc41gQRkvbKKTczbRNLYmpyyAn3KUwwtwVyB217weuVQYuPBzRSl6vqf0dwJkdOHZND2pwptu4aukzUHF0XAFODVVnvmkBacp5gj3KBaSiqVnArOqgqlvVMai7wHJNp2za9alWesUxl76lSVme2oHa8qa2EGLlGsZmsylvKmUWzw0LANP4fT8YoQWOoNa63mWUBYpbe3tU9jHCYYjKiEXGtVGwufa5OyJzCkUS430s/6tYwAANQ9r4nMx/aPlZ7Hs0YJnYhZRRgmBI3qGqzz0WC+aX2uGcxUQsoi+TMIFyrOMt0pFp0x+aUYR2oaMCwphDnS+gufc1xAGOMUW49DL0mtqPy7qWHR3HkPKAxREviv8ND6YpDtkK+zo/pLWHdrnDM5VqXWPkehSFCScpflDDuoII8303MbrcVekpxgHZDgiXA7rlCp1xDO9E3FWjR+aYi//ToKPm7Jy8wjDBLSS8t1U8exkkM1hLSOeN/fTer16mm+dJMwNwbJwp8tbuxJOhzIdod2JjmuYCjZ2rmj28nXbaySi4debrXuC8z5+Dv361340bsNg+ceilL+bdgN3drV69fiTSidmhpPfralqhse3Duz5qVEdJ2o289TO2O9Ph032NLZf2qzPo9p8WI39jbirvy6mD1j1zMplu4xT/5u2gMh93Bjfr9gxNQrR86HdtP2CPj3My6bP6crO+Xf5kE+Qbz808nSP8Rd3hzo+S2T8YiYOoxsDrlW5kl6D4nsyUhvh6kJm6K0U+XGAqtJY6pbjDTSTdEd+VPdzJptO3Kw3Q7jTalt24cfqgWgG1RsO8kToLOAeS2aE4gdhlNCAqlqLc3dh8DxBFLsfUx7GeskQyHde+8diDApY8OpSXgFGOx6yp+c5sVgXVmm7Xa5ZuVwDU6xA5et0K7Fm1XkMNWNFKD0w80se4HQgcF9jZNAvsPMSIrAhWFK4mnMsR50JWZQ3TRIRmOYVlihNJ8rHiW9ey61WDk2gVYoXZiJifhLi8WqyyGhl897V0iHim7YJu/6beB/Vu3+zWerK2NlB1BVVZXwt0skv5Zfqn/w6VkjY+UQZcJdrBstv4zBsEDll+qoZz9q06uG8nPlH3T5ZdxATtkBR/fUyTGqN8lIb98QFybnmqKHg1ThPKA/kpQfl9yF91SfaSHlqHXq2hWV6XkzRNsucwlq4NyYSmMcIokcz1NmZLTI38uHHRM5EjPoma64vYErGgIwEFjuQclTLxgr1ghLnaCzx5FbaXLh2FkLJmAm/FOV03lDuNQvzt2oNcpOyk+kl+Niz2P1p1xtdRHJmnXAsEoXMlqSfi7YuBQEy6JZLcWHzs/JyDc8GLyrzIORYhJ2mWCPz1n5JiraYGEWIJFV5PyxTHTJrhFG8r7H4YfXKTkXW+vZF/X990ko0AwnLn4yTzrx5hV80+nR+x8T7oeUJuON8RchFd65P6s+aoTqcz3voD</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_003_DTCreate_primary_email_address_null" searchProperties="true" id="717f1ab6-3032-4ecc-bcc6-9c5655e36495"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="5a32dd6d-6fa1-47df-8491-6160d063e79c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="c5b9d039-1d4e-46cf-be8d-4f22aea155c3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="b20eaa0b-39ae-45c0-befc-11a359ca29cf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="b4d51ae5-846d-4423-b9e2-715a689e0541"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="854b6c90-310b-4be5-870c-d3bf4621e86a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="dd7ec165-2ec9-4504-bed3-83c1e37f89df">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="34f584f0-5bc0-4ab0-8fc1-341248d898e5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Change Primary Email" id="c78c8959-7940-47c1-add0-63184210acb6"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="bac4d5bd-8ae4-44df-8bac-aa8c22a67ac5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrType", "UserIdRequired");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="805a7ab4-07b1-40fa-a2fa-4400f613a84b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">16E4390AB9E849F6E05307991F0AB206</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">16E4390AB9DC49F6E05307991F0AB206</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value/></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>UserIdRequired</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>16E4390AB9DB49F6E05307991F0AB206</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:16E4390AB9DB49F6E05307991F0AB206</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>16E4390AB9E749F6E05307991F0AB206</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:16E4390AB9E749F6E05307991F0AB206</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1432541144895</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_812274b1-5c72-43a5-b35f-9d17bbd37e9a</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynlMGVu+AHYFqiCQDJPbBEg2My9bQhYgYkvGko3J169kwMHksuw+udRudZ/uPjrSBYdRaPldznEiCKO1PAop9wtrW0sT6jPICfcpjDD3BfLH3btb36qbPtxv0WrDflv7uwUsq+lMge6ipqU7NnT1qe3OdC8Azek0sJvYg9KV8xQPKReQirZmmcDVTVe33InZ8k3bN0HdaTl/tNozTriMLV3qprYDlfO2thAi9g1jvV7X13adJXPDMk1gvNzdjtECR1DrXGwrKhIlnZ0/qgcY4TBEdcQi48Ko+FwE3B+TOYUiTfAuV/BVLtMwPUP6BJzMz7RyLw6GdMaK5SWkjBIEQ/IGVX/usFiwoNYN5ywhYhF9WQQwVWAd50hHwKFnmlGFdmKgCsKEQ50vINjFGuEZTjBFuPY0Gra1s9OmVmydJJDyGUsiXl3+NzyYZjhkMQ50vi9rB+30gJ90qnOBkT+kKEw5yfC9ImsMEea7aWJ0eqjarwTPSH5LuCRozhU64xDe0XLbjT6ZYy7+z4AOhrMN8gzDFHeGbN3NvB9T0er/dh4f1m+/wZ/7uxvSCNftAsChc2EoR7tdHpGyJNF2h1hdvxhhqzc+96LXwfymGb9moSeusn5y11y+LOz5wyYD7uWkT87dpw24uQ/uf741X1MBQzBb2MayZcIpn9/2Y+8xA/biZ+/5KW/kmb28eejZy+bofHHNBqaXT5bR+Ok8gz/W1zlYrHKe/9V4+rG5HQUjb4UZmGT5aDBtrDa55TTBXTwSb1eQnIf9uCfszePlY7ss5wB/1bY/8+N0usRI7JeKBsN+7UpOCYrvxUxZSKDPClc/VuLDBaZC66hdSjv8VModCXw5w+0aNAaO7ZndnjdoOt5VY2C6ttn0PHAlbZbZ2IvMFsURxEtGZ0TlUpK7pc33AFHkc0wDnOgZS6XSce2biH0oYG1IR/IQMMrxhEl5BuuGWJrumzNjtCEPPWm0stRpuJ6n1e6ZeKAPSXcmcFIRZQAqojzCiMQEK+VWxOaS2VzIZqxglooQ1DNYpziV2p4omfUtp+UanERxiBVUI2JBGuJ6vIiL1hh8+7V0iHhhHQ0mxXH7srDjf/seSJ+AKAeuaulhOUf84XaxfHdfyNcFO4cF78N304CokyUbKhKCtkiqv955oghSkkRWtIdceh4bKlGN44LKREFGUMn08r6WMi4Pfmc/jhUE9VU9zbK0uOgSGdqQGgeMMUap1KTNhL1iapTbjZMugBLxUdbSXsWWigUdCyhwJKlSK5Yn3PhjzNWNP5Qkz099TlRSyp4JnIvPbJehfK0oxN8+aJCPlJ80/5KfNUuC91F9Eusgj6xTXviC0LlaKfHffEEIxGRYImWLJYfBPwvwWfKqsWxyiUVIJk1Tgb/+U1N61NYgQiylYtjXCsOhRhY4xSbG/rvThzCFDJfvMvLvDzOdFBRAWL7mOCniq+vVV9yn8wOd3SX9XGr7ve+ktoqu88H80XLQp2OOd/4B</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_004_DTCreate_primary_email_address_matches_exactly_one_user" searchProperties="true" id="f54a9ce6-1cde-4941-9138-d94d3e6b02ab"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0cb67af0-66f9-4550-98bb-5b714affc488"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="1835b610-7f12-4f7b-aed7-e43390185625"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="03a4b43e-f993-492b-912a-15c06fb465d9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="0ea865a0-b40f-4112-84ee-5d763e01a162"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="0cd5cefe-f07f-4d11-864b-0644ac221aaf">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="0d2df19f-e3eb-4e7b-af91-f4dc6788e0ae">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="39eee41d-d992-4c36-8473-97ecb91cb94b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="b64b77e7-313d-45a1-be64-5715762d1367">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="94ce585d-758c-41a8-a69c-7e4b1db518ae">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">16E4390ABA2349F6E05307991F0AB206</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">16E4390ABA1749F6E05307991F0AB206</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1432541183623@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>16E4390ABA1649F6E05307991F0AB206</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:16E4390ABA1649F6E05307991F0AB206</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>16E4390ABA2249F6E05307991F0AB206</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:16E4390ABA2249F6E05307991F0AB206</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1432541185184</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_75013d00-1a6a-498f-bbaa-4a91694a44dc</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynncMpaNDdgVqHK4zHgHSBZIspOXLSHLIMbIRJIx5OtHMuBgQrLsPoHare7Tt6O+5XAVW57POWaCJLSyXcWUe7m0paWMegnkhHsUrjD3BPIm/nDgWVXgweMVrRJ0W9o/DQeYtRAA3YR1qNtuM9JnMyj/Qdesuza07RBJVc5THFAuIBUtzQKmowNHt5wpaHqg5jlu1babL1rlCTMubUuVKtAOoLa8pS2EWHuGkWVZNatVEzY3LABM4+/hYIIWeAW19u0+otwRax/0UTXECMcxqqJkZdwaJZ3bkHsTMqdQpAwffIWf+QIGcA2pE3Iyv9GKuzgMaJTkxw6kCSUIxuQNqvwMsVgkYcWP5wkjYrH6NAgTKMM63iIdmTa90YwytCsNlRAyDnW+gObB1hhHmGGKcOVxHLS0m+uqll+dMkh5lLAVLx//Gx5MNzhO1jjU+TGsA7TrDV7IVPsWIy+gKE452eCRatY1RJgfqonR9aYqDwxHZDsgXDbolit0xim8s+M+G10yx1z8nwKdFGdv5AnGKW6/7sZgPho5fjD8Mae77GdnHAfWZvuwDVo5gFPlXFCUdn88a8qiifY3UtFtfvPJ6GUQvUzR2/IteGGb7WD9tHTHEM9GzivJxnfP8X2UPWfuZtTgjbl77/fTZf15he3vwsyiP2AvA8n86SH7Hsa/sqA3fXuwZj8WwaPbia0B7wYhsGpwsnQb4i/IEsqxuRgujRqE31i0XrzV3eVyKB7/ZLWfoz7t+M+Z/xLed2a7fs28f2zY9rDfYY+tIpwT/GXZceYn6WyJkTgeVRsE3UpfVgmKr8lMSUioR7mqt1bkwwWmQmurW4o7vFTSHQk9WcP92az37JoL/Dvfsmy3X+8BpwYarmv2pcwC9SPJ7FGcQewkNCLKl6Lcfdt8DRCtPI5piJm+SVLJdFz7wmIXClgJ6FgOgcr6NGlpM9dxLKfh6jiyG3LO5bA3TRvpsG5FdoSkwK1rlVEi7uk98yOBWYmdTbPEzmOMyJpgReGqw7lscS5kVl7hJhWxWd3AKsWpJHmm+Naz7KZjcLJax1hhNlZJmMa4ul6s8xwZfP9r6RDxXNoBnV6/2QPNTs/sNLoytzZQeQWOzK8F7vKh/DT882/HTEmdkCgFrgK9w7La+MIbZB+j/JCN+sW36mjeT0Oi5k+mXTCC9kjKn967SbVR0Urj3vQIudA8F5SsGucBFY7CDUHFPBSvuiR7SQ/tY61eoVl9raabTZo/h0yaNiQTmsYEo1Qy126a/MLUKK4bVz0TBeIzr4W8jC0VCzoRUOCV7KNKfrxiL5hgrvaCQI7C9tqlo+RS5kzgrbgk68Ryp1GIv1x7kIeUnhQ/yJ8sYeF7qS7YOvEj45RrgSB0rk7qidh90hAokWaJJLeEnRq/ZOCS87KwSHKBRchOmqUCf/6lolirpUGEkpSKoKvlglMmzXGK3Rp770ofzORkXWxv5N/XN53kLYCw3Pk4ye2rR9hTvU/nJ2x8cHqZkM36V4RcRtf+IP4oOcnTeY+3fwM=</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_011_DTCreate_email_address_in_the_request_different_from_email_address_in_AuthNRequest" searchProperties="true" id="f136c796-1d9f-4ea8-820b-70fda49d8dec"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4f28bb7a-c3fd-490c-b89e-805fd7d830a9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="86ab21c2-d70e-4c8b-ad17-9f9c00878561"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="6ed0da08-4b35-4f0d-9af8-28a96d0d0aea"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="679d20fa-0a4e-4b84-ab1b-01d780d1e16f"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="dd4fbc74-e07e-4f69-acb3-47a4860cc885">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="5dc8e981-58bc-4dcd-b643-eaf198bdeb79">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="b37b99f5-c1d7-4acc-af39-677b69be4b70">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Change Primary Email" id="b0a96988-04fc-4e0a-a325-44f4eec2489c"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

import org.apache.commons.lang.RandomStringUtils

String charset = (('A'..'Z') + ('a'..'z')).join()
Integer length = 9
String randomString = RandomStringUtils.random(length, charset.toCharArray())
log.info randomString;



tC.setPropertyValue("PrimaryEmail",randomString+"@uvvutesting.biz");
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="f02f1716-04e3-4060-a7ef-e51bcbb46647">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrType", "UserIdNotFound");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="ea48664d-659f-4664-97bd-e36383bdeb60">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">16E43398C7835576E05305991F0AC9D4</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">16E43398C7765576E05305991F0AC9D4</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>KsujRnRiy@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>UserIdNotFound</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>16E43398C7755576E05305991F0AC9D4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:16E43398C7755576E05305991F0AC9D4</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>16E43398C7825576E05305991F0AC9D4</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:16E43398C7825576E05305991F0AC9D4</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1432541252833</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_563ab863-58c8-4a31-8972-b86b9608040a</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynmcMrYxBuMKVHEJGzIhyQDJZOZlS8gNFmMksGRz+fqVDDiYQJbdJ5fare7T3UdHuuVoHpa8JucQCcJoYT0PKfdSa12LI+oxxAn3KJoD9wT2hs3+o1cqmh46bNEKvU5d+9up2GjsVmzdcbGrl5Ft6W6tWtKlbVyrmK5ZNpF05TyGHuUCUVHXSqbl6Kajl5yR6Xpm2XPMom27v7XCG0RcxpYuRVPbg1rzuhYIsfAMY7VaFVd2kUVTo2SalvHefxziAOZIa9zuKkoTRY29Py76gCEMcRGzuXFr5Hxufe4NyZQiEUewz+VfymUaZs2QPj4n0xst2wt+j05YumwjyijBKCRbpPrTBxEwv9AMpywiIphfLMIyVWAd1ljHVpneaEYe2pWBcggjjnQeIGsfawATiIBiKLwOenXt5rqppVtHEaJ8wqI5zy//Gx6gCYRsAb7OD2XtoV0f8EynGreAvR7FYcxJAk+KrAuEge+nCfj6UIWXCCZk/Ui4JOiaK3TGMbyT5a4bHTIFLv7PgI6GswvyhsIYGlsRP/Bq2OpZ31ei8toNxj5q/+rO6MqtpwCOnVNDNtrd8oSUGYl2O5pW7CTd8L16D02xuLPZKtk8PRqx0Uatpoh6T6hdeTBnbMnJXTLqlPpVc+y3+OOg/WuYRLT28HMT/v4WBIsOWr1Z/uy9/VJ77d4bra7z2g9ES0Tbn75to+52sF22as9rtg7Y09i1vw/C2vKHFTyP/zJn5hL4eOqMH/wHUjbL30qR87bmLQgBje9/vLbL2/dSv56Vc4Q/bzuc+WE8ngEWh6WiQa9T6MopIfG1mCkL8fVJ6uotlPhwAVRoDbVLaYcXS7kjvidnuFtblbuybdfcdtUtOU61cmc6tunUalbXbLZrnfJBZHYoTiC2GZ0QlUtJ7o42XwPEc48D9SHSExZLpePaFxE7SKBCjw7kIWCUw4hJeZ6GdDHdjClP/sRWDGQ1Cy0WMivUCk9MPNPnqDkREOU02bJymjwATBYElHArXnNJbC5kL5YoiUVoFRNUpBBLaY+UynqlsusYnMwXISikxpz5cQjFRbBIO2Pw3bekI8xT6+BulJ62i3Wd/ju0QPr4RDlwVUsL5BjhzOVSPhRyueDyccGH8M3YJ+pgyX6KiOAdkvyvD5oofmQckRUdIGeep4ZcVOO0oCyRnxCcET27rqWKy3PfOIxjiazishgnSZzec5EMbUiJs4wh4FhK0mbE/gA1su3GVfqfIT7Jmtnz2GIR0KFAAuaSKoV0ecWFPwSuLvye5Pj62tdELqXsmYC1OGdrh/KxohB/+Z7BHlZ+0vwiPysW+R+jOhPrKI+sU973gtCpWint31wgBGYyLJGqxaLj4OcCnEueN2ZNzrAIyaRxLODyn4KSo7qGMGYxFb2OlhqOJTLFKTYL8D6cPoVJVTh7lpF/f5fpJKUABvmY4ySNr25XT3GfTo9kdp/0vNJWna+UNo+u8cn82XLUp1OON/4B</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_002_DTCreate_primary_email_address_does_not_identify_an_unique_user" searchProperties="true" id="b93aed37-a08a-4a98-90a1-ea6b60d6b5d4"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="47173130-098d-49cb-92fa-852d722508b6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="9efd8a0d-1fe3-4b7c-9777-5f6a22167452"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="8d74dc3e-f18c-4968-84ea-16fa737800bc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="30e06db0-1a42-4970-b382-aa4f7eff3fd8"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="49d5a13b-2292-40d7-bcfd-057524c02035">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="f279fc49-b0cb-4a61-9c30-d160fc586ee4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="cec2a505-4206-4225-b8a3-cda6c833d375">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="9c14de42-36d1-4d4c-9ee1-c12988a83e56">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Standard User Create" id="62e70980-1af0-435b-9525-b5f939169f8e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="98867d3f-ee6a-40a9-b86c-9680112ee1a0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrType", "UserIdNotValid");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">16E43398C7BD5576E05305991F0AC9D4</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">16E4390ABB2549F6E05307991F0AB206</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1432541287992@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>UserIdNotValid</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>16E4390ABB2449F6E05307991F0AB206</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:16E4390ABB2449F6E05307991F0AB206</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>16E43398C7F55576E05305991F0AC9D4</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:16E43398C7F55576E05305991F0AC9D4</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1432541305073</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_bd803c65-d554-4f38-b67c-9e18169d3332</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvPsKzYXV6CKa0KAZIJJspuXLSHLWIktO5YEJF8/kgEHE8iy++RSu9V9uvvoSFcUxJHldihFGcMJqWziiFA3t7YUnhE3ARRTl4AYUZdB1+tMJ66lGS7Yb1Eqo35L+WfhN4wqrDmq7zi2agfVhrqo1aHaRGbDrDX9arVqCVdKORoRygBhLcUyTEc1HNVy5kbDNRzXqmn1uvOiVJ5QRkVs4aIZyg7UhraUkLHU1fX1eq2tq1qSLXXLMEz9r+nEgyGKgdK+2laUJ8raO3+o+QiiKIIaTGL9Si/5XPnU9fCSAMYztMvln8tl6EZTFz4+xctfSrEX+SMSJPmyB0hCMAQR/gSyP1PEwsSvdKJlkmEWxmeLMA0ZWEUbqELTJr8UvQztwkAlhBkFKg2BuYs1QwHKEIGo8jgbtZRfl00t3zrPAKFBksW0vPxveBBZoShJka/SfVk7aJcHPNGp9hWC7ojAiFO8QneSrCmAiO6mieDloSq/MxTgzQRTQdANlej0Q3hHy203+niJKPs/AzoYzjbIE4g4ag+Drtftw4dndDtZw9W1HfbSW+xtbOPvVg7g0Dk3FKPdLo9IWZBouyO5f5zAcYOM4pcm1c1rszZ1gsjz9CUZ6jXrZrxZ3OLmbDMbP97wXuP6KWoskylfQM8OBs92mnbHYPCG6fh6qMO3m+XcodNUD536a/3z5val01299h6ta8ifXuDk0xzfzz8a0x4e20H6blkPtYe7NAqH908byHvMfhu8ZDic8JvnR9B/4KPAwMFtavYX1Ua/0SrKOcBftu3PvMcXrwiy/VLSYNSvDMWUAPtZzKQF+2qQu7qpFB/KEGFKW+6S2uFyIXfYd8UMt2uzNrCr1WajV+/2HKdeGxhO1XCaTXNodHrNvr0XmS2KI4i9hARY5pKSu6XNzwBh7FJEfJSpq4QLpaPKDxH7gIHKiMzEIUgIRfNEyLNVwyCB9XrIP3loszhmkRHCaqZU7hJ2T+6zTsBQVpJk0yxJ8gxBnGIkdVvSmgpeUyZa8Q5WnEWmtgIaQVwoeyZF1rXshqNTHKcRkkD1OPF5hLQ0TPPG6HT7tVQAaW6dDeb5YTtb1vG/fQeEj4+lA5W1dJGYIjpxt5j7Qs4XbB8WvA/f4T6W50q0k2UYbpGUf32xRNKjoIioaA+58Dw2lKLqxwUVifwVhgXPi9taiLg49u39ON6Bqb1rfLXi+TWXidC6UDhT9xDkQpE+5skbInqxXb9I/gvER1kLexkbZyHxGGAoFlSp5MsL7nsPUXnfjwTFN5c+JkopRc8Y2rBTtl4k3ioS8Y/PGehC6SfMv8VnnWT+16hOxDrII+oU1z3DZClXUvo/zhACJiIsFqKVZIfBTwU4lbxsLJpcYGGCSQvO0Pk/FalGLQVAmHDCRn0lNxwqZI6TfaTI/XL6FiYX4eJVhv/9WabinAIQibccxXl8ebm6kvtkeaCyu6TfhLZpdLpdy7abw63Q1rdC27WMWtGUErr2N/N3y0Gfjjne/gM=</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98867d3f-ee6a-40a9-b86c-9680112ee1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c14de42-36d1-4d4c-9ee1-c12988a83e56</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_014_DTCreate_token_type_parameter_not_valid" searchProperties="true" id="a4e41e99-f0a4-4c86-8326-fe71212d4472"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="dec25e5d-1f62-45f2-931a-bcf8e82db5da"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "TokenTypeNotValid");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="2f6f9a78-0cb7-48e5-9cb3-b871385e6c33"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="a55f4a21-fa1a-4f5b-ba2a-1bef1f5e790e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="1df1c00b-5ddf-4b84-af23-f36abdcf84a4"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="f417c9f3-a6aa-4ec6-9eea-d5f7ce249efb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="889c675a-35c7-415f-ac68-7a28b359ae9a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="beee0dea-0100-4e64-b341-fd8709f3b2db">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="86452378-7656-4a18-b202-bf0d4a00c308">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrType", "TokenTypeNotValid");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">16E43398C8185576E05305991F0AC9D4</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">16E43398C80C5576E05305991F0AC9D4</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1432541324074@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>TokenTypeNotValid</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>16E43398C80B5576E05305991F0AC9D4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:16E43398C80B5576E05305991F0AC9D4</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>16E43398C8175576E05305991F0AC9D4</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:16E43398C8175576E05305991F0AC9D4</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1432541325644</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_b3a454da-8d75-4da9-ab85-551ce5dc6d82</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+o4EP0rKH1chSSUAIkKEoW2S0WBC7S36svKdYbgNrFT2wnQX3/tACmhH8vuE3gynjkzc3zsC4HiqOZ3hQAuCaOVdRxR4efWtpFy6jMkiPApikH4Evuz7t3Qr1VtH+23GJVBv23883yO6m49QGYraLqm+uOZ6Lnlmq7rYHAD3AhaNeUqRAoDKiSism3UbMc1bdesuXO75dsN365Va3bzyag8ABcqtnKp2sYO1Fq0jaWUiW9Zq9WqujqvMh5aNdt2rMe74QwvIUZG52JbUZ6Id3b+uBoAhijCVcxi68Iq+VwEwp+RkCKZctjlCr7LZVu2ZymfQJDwzCj2QjCgC5Yve4gySjCKyDvS/bkDuWRBpRuFjBO5jL8twrF1YBPW2MROnZ4ZVhnaiYFKCLlAplgiZxdrCgvgQDFU7qeDtnF22tTyrXOOqFgwHovy8r/hAZpBxBIITLEvawft9IBfdKpzAdgfUBylgmQw0mRNEAaxmybg00NVJhwWZD0kQhF0LTQ66xDe0XLbjT4JQcj/M6CD4WyDPKAohc6m+zT0bt4uR/feL+SO3ydDazqj7i1Nrto5gEPn3FCMdrs8ImVBou2Op+thZt93GzK8fbyjLBz/4qMx865fk8do+NIabGJ4azw5wevirpGF9Px3f/Y8HjMsejb6q5mx6WgaP7UeL2N+5Uwm4Yo/bFb9iAXzyeNvMoKpTR5ayQt5H+IoG87E66THxei6Kf/24ht6ezkZeNHLEL8vkpvbe/5cD3t9xBsThCKPy2YWpJcz2WLjYH6DcLso5wB/2bY/87P0+QWw3C81DQb9yrWaEpI/i5m2kMBc5K5+osVHSKDS6OhdWjv8VMkdCXw1w+3aaVzVz8+9Vq/lNF232biy3XPb9Tzn2u72vH59LzJbFEcQe4wuiM6lJXdLm58B4tgXQAPgZsZSpXTC+CFiH0lUGdCpOgSMCpgzJc8OgkWWsFUNeby+ea83w2TzullsMqMyYnJMx7y7kMBLmuw4JU2eAiYJAS3cmtdCEVtI1Ys3lKUycqoZqlJIlbRzrbJ+rd5yLUHiJAKN1IpZkEZQTZZJ3hlLbH9rJsIit06v5vlp+7au42/7FiifgGgHoWu5BDVG+HS5uL67L+T7guuHBe/Dd9OA6IOl+ik5wVsk5U8fNNH8KDiiKtpDLjyPDaWo1nFBRaIgI7ggenFdKxVX576zH8cbcqpv1TTL0vye4yq0pSTOsWaAUyVJmzl7BWoV262T9L9AfJS1sJexpXJJZxJJiBVVKvnyhAt/BkJf+APF8fWpr4lSStUzCWv5la0XqceKRvzjewb7WPsp80T9rBgPPkb1RayDPKpOdd9LQkO90tq/+YYQmKmwRKkW44fBvwrwVfKysWhygUUqJj2nEr7/UtFy1DYQxiylctA3csOhROY45SYB/8PpU5hchYtnGfn3d5lJcgpgUI85QfL4+nb1NfdpeCCzu6RfK619+ZPSltF1Ppk/Ww76dMzxzh8=</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98867d3f-ee6a-40a9-b86c-9680112ee1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c14de42-36d1-4d4c-9ee1-c12988a83e56</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_015_DTCreate_Securitytoken_reponse_type_query_parameter_null" searchProperties="true" id="38883ee1-fbaa-4061-8979-591ea8ed2a46"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ade0ef6e-6e0c-4b6c-9998-de07a3d118ba"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType","");
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="8eff55e5-69b8-4426-afec-463b6737ba57"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="141a39a8-cd2d-4f21-9931-4374c3979b45"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="8fa1f876-ad18-48c5-8a28-e3601b458073"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="0cf34d00-9052-4057-8320-3c511655594f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="a5f4b0ff-2135-4036-81c1-d776a233cda3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="cdeea8c6-3c7e-46c0-b3b8-caa644d1f586">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="837d3b4b-12fc-4bf2-8160-768eaa6f1f85">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrType", "ResponseTypeNotValid");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">16E43398C8F05576E05305991F0AC9D4</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">16E43398C8E45576E05305991F0AC9D4</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1432541357941@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value/></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>ResponseTypeNotValid</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>16E43398C8E35576E05305991F0AC9D4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:16E43398C8E35576E05305991F0AC9D4</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>16E43398C8EF5576E05305991F0AC9D4</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:16E43398C8EF5576E05305991F0AC9D4</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1432541359411</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_2266c449-9548-483f-90c9-7f9fa9093691</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtc7I6EP0rDv3YQUDQClOd6VV7S1v74kvfvtxJwyJpIVAS0PrrnwSViq293vuJybLZPbt7cpJThqKw4ZwxBiknMa0topAyp7B2lCylTowYYQ5FETCHY2d8Nrx2GnXdQZstSs3td5R/Go1WC1uWrdpNq61abdNXbR3b6olv+8jWbbNlG8KVsQxcyjiivKM0dKOp6k210ZzobUdvOWazblv6i1J7gJSJ2MKlritrUAvWUQLOE0fT5vN5fW7W43SmNXTd0J6G12McQISU7umqoiJR2l3747oHGMIQ13EcaadaxefUY86YzCjiWQrrXN6+XLqm25rw8RiZHSnlXvBc6sfFsodoTAlGIVki2Z8h8CD2amfhLE4JD6K9RRi6DKzCAqvYsOiRolWhHRiogjBlSGUBMtaxRuBDChRDbTpyO8rRYVMrtk5SRJkfpxGrLv8bHqA5hHECnso2Za2hHR7wh051TwE7LsVhxkgON5KsCcLA1tMEfHio2l0KPllcEyYIumASnbYNb2e56kafzIDx/zOgreGsgjygMIPuCw3ul/209+x++JdueDW/Prm6D459BPNOAWDbuTCUo10td0hZkmi1Y9zqR/du8tbmrY8kOx/ok+HlxcXcX+A3upz079L32ybchoNEH9wuLBwGx8/azdXj8HiSnKdtaI1R/zl8nRrooTdjY9NY3gwHhp4v3XFgEmt4PRmxIHtyR6/RaHY3eL+cTZfvb0926vvG9H5A30ycvDftE8+Yfmovtzc+zI5fr7XF9LF1gXLy9wUeTI350+NlY846ZTlb+Ku2zZkfZ69vgPlmKWng9mvnYkqI/y5m0kI81S9cnUSKD+NAudKVu6R2OJmQO+I5YoartdEaWKZpt3vtwXmzedIa6E1Tb9q2ca6f9ey+tRGZFYodiL2Y+kTmkpK7os3vAHHkMKAepGoeZ0LpmPJLxD7iqObSkTgEMWUwiYU8G+bsxLaWns9QMM+jPHtlZhbnVqLUbmJ+S2/TM59DWtFkw6ho8ggwSQhI4Za8ZoLYjItefKA846FRz1GdQiakPZUq6zSsdlNjJEpCkEi1KPayEOpJkBSd0djq21ARZoV1NJgUp21vXbv/Ni0QPh6RDkzW8heIMcIPl0tjU8j+gq3tgjfhzzKPyIMl+slTgldIqr++aCL5UXJEVLSBXHruGipRtd2CykReTnBJ9PK6Fiouzn13M44PZNQ/6lmeZ8U9l4rQmpA4QxsDzoQkfU7id6BauV07SP9LxDtZS3sVW8YDOuaIQySoUiuWB1z4Y2DywncFxxeHviYqKUXPOCz4T7ZeKB4rEvGv7xnsYOknzHfiM49T72tUP8TayiPqFPc9J3QmV1L7P/cQAsciLBGqFafbwX8K8FPyqrFscomFCya9Zhz2/6lJOeooCOM4o9ztK4VhWyILnPwzAefL6VuYQoXLZxn593eZSgoKYBCPOUaK+PJ2dST36WxLZtdJ9yit+ZvSVtF1v5m/W7b6tMvx7h8=</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98867d3f-ee6a-40a9-b86c-9680112ee1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c14de42-36d1-4d4c-9ee1-c12988a83e56</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_016_DTCreate_Securitytoken_reponse_type_query_parameter_not_valid" searchProperties="true" id="987e4250-ac2a-438e-9cd1-cdfebbbe01ba"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="21c4f056-c029-4696-87c1-8d9fea5d7998"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="62e0fe63-6602-4fc6-991d-aa68901c7b18"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="87a6dfbd-4e72-4db1-b364-5c0a83780199"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="545cdc12-b436-4753-96bf-330cd2fa2dcf"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="d01062fb-238d-4b62-b3b5-654b331cb77a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="691ca64a-712c-45d4-bbd9-b83bc3a5711a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="d917e4f9-09eb-4b26-ab94-9134281fd799">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="311a1690-4d5f-45f7-b55e-78c346a81eb9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrType", "ResponseTypeNotValid");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">16E43398C9265576E05305991F0AC9D4</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">16E43C975B870C64E05307991F0A1483</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1432541389563@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>ResponseTypeNotValid</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>16E43C975B860C64E05307991F0A1483</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:16E43C975B860C64E05307991F0A1483</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>16E43398C9255576E05305991F0AC9D4</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:16E43398C9255576E05305991F0AC9D4</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1432541391283</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_67207371-6ff3-4204-858f-c0c3c905d619</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMr5hsF2BKsYkG2bIDUgmm5ctRW4bMbZsLJlLvn4kAw4ml2X3yaV2q/t099GRzhlKYtPrMwY5JyltrJOYMq+0dpUip16KGGEeRQkwj2Nv0r8eeWZT99B+i9IYDrrKP+2OqXesjqG2w9BSW6beUh3bCVWsYwu7uh20DVe4MlbAkDKOKO8qpm7Yqm6rpj3VHU/veIbetEz7WWk8Qs5EbOHS1JUdqDXrKjPOM0/TVqtVc2U10zzSTF03tKfr0QTPIEFK73xbUZko7+38cTMADHGMmzhNtHOt5nMeMG9CIop4kcMuV/BZLl3TXU34BIxE35RqLwRDGqbl0kc0pQSjmLwi2Z9r4LM0aPTjKM0JnyWfFmHoMrAKa6xio0W/KVod2omBaghzhlQ2Q8Yu1hhCyIFiaDyMh13l22lTK7dOc0RZmOYJqy//Gx6gS4jTDAKV7cvaQTs94Aed6p0D9oYUxwUjS7iRZM0QBrabJuDTQzXucgjJekSYIOiaSXTaIbyj5bYbAxIB4/9nQAfD2QZ5RHEBvasfj6mt+/o04CzBd53RGIfufPn8+teqWwI4dC4N1Wi3yyNSViTa7vDXtnY7vwosNobi51k0H7Yy3exHo9e7p8nfm+yhyJ/AdG7v3bP7Z/d6FpObpT/K0Ph39uMssjFac4fNXS3XZs/okiR9H6466+fHiGav99b35cJ0Bovra37XHzn34dJ0Loebq/EvuODF5OHmkv52kufZ9GWUoLuHNtI2JNoshj7P/Ktw0v/1sxXlbX7hGy+PU6dblXOAv27bn/lJ8TIHzPdLSYPhoHEppoT412ImLSRQw9LVy6T4MA6UKz25S2qHVwi5I4EnZrhdG+2LlmW5ju+atm132he6bem26xqXet93B629yGxRHEH0UxoSmUtK7pY2XwPEiceABpCry7QQSseULyIOEEeNIR2LQ5BSBtNUyPPczFbcXufYeKVza9Zao5fFjHFLadyk/Jbe5v2QQ16TZMOoSfIYMMkISN2WtGaC14yLVizQsuCx0VyiJoVCKHsuRdYzW46tMZJkMUigWpIGRQzNbJaVjdHY9muqCLPSOr6Yloft07KO/+07IHwCIh2YrOU7iCnCB3eLvi/k84JbhwXvw/eLgMhzJdrJc4K3SOq/3lgi6VFRRFS0h1x5HhtqUbXjgqpEwZLgiufVbS1EXBz73n4cC2Q0F81iuSzKay4XoTWhcIY2AVwIRdpM099AtWq7dpL8V4iPslb2OraCz+iEIw6JoEqjXJ5w30+Ayft+KCi+PvUxUUspesZhzT+y+bF4q0jEXz5nsIelnzDfic8qzYO3UX0Q6yCPqFNc95zQSK6k9G8+IQRORVgiRCvND4N/FOCj5HVj1eQKCxdMeik4fP6nIdWoqyCM04Ly4UApDYcKWeLkmwy8N6d3YUoRrl5l5N+fZSopKYBBvOUYKePLy9WT3KfRgcrukr4TWt/t2N+dtu63W6XQdrZCa7Qcq2pKDV3vnfm95aBPxxzv/QE=</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98867d3f-ee6a-40a9-b86c-9680112ee1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c14de42-36d1-4d4c-9ee1-c12988a83e56</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_013_DTCreate_token_type_parameter_null" searchProperties="true" id="6320fe60-552c-4428-be5a-e94d43e113aa"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="bf88d96a-9904-4636-b3f1-a5a7e8d614c8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType","");
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "NOT_FOUND");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="24aba101-6222-4e44-8e68-d63887ccc5da"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="4cca31a1-6195-45ab-8134-cfaee7a2217d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="fd085690-4874-4d6f-b75c-dd2095da83f4"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="f62bf50c-bdaf-476a-b5f2-a93cb76869e0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="12ea1511-d8af-4e5e-9092-f581fa953724">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="0f7ea5c9-2cfb-4db9-9766-b6fddc2f0dca">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="a0fd93e3-eb05-4390-87dc-45b66831acc1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">16E43398C9635576E05305991F0AC9D4</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">16E43398C9565576E05305991F0AC9D4</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1432541424871@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value/></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>NOT_FOUND</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>16E43398C9555576E05305991F0AC9D4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:16E43398C9555576E05305991F0AC9D4</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>16E43398C9625576E05305991F0AC9D4</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:16E43398C9625576E05305991F0AC9D4</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1432541426552</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_78a7d3d5-f047-4b62-acea-b511407591f7</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZWyDDcEVqCKQyboGcuGS28uWIreNsrZkLJnb149kwMGEZNl9cqnd6j7dfXSkS47iqOZ2OYdUEEYrqzii3M2tbS1LqcsQJ9ylKAbuCuyOu8OBW6uaLtpv0Spev6393bxATb/uO3pg2k3dfmvUdIQB6W+OZdlm02lZQVO6cp6BR7lAVLS1mmk5uunoNWdiXrhm07Xr1Zpjv2qVR0i5jC1dqqa2A7XibW0mROIaxnK5rC7rVZaGRs00LeN5OBjjGcRI61xuK8oTpZ2dP676gCGKcBWz2Lg0Sj6XPnfHJKRIZCnscvlf5TINs2VIH5+T8IdW7AXfowHLlz1EGSUYRWSDVH+GIGbMr3SjkKVEzOIvi7BMFViHFdaxZdMfmlGGdmagEsKUI53PkLWLNYIAUqAYKtOR19Z+nDe1fOskRZQHLI15efnf8ABdQMQS8HW+L2sH7fyAJzrVuQTsehRHGScLuFVkTWQdfDdNwOeHqtynEJDVgHBJ0BVX6IxDeEfLbTf6JAQu/s+ADoazDfKIogw6Zjh/N+qth3htzo2bJvRn4543SHyC7XYO4NA5NxSj3S6PSFmQaLsDP/beXmYPL9FPu9tdTbzBHax9a77Jskd/3bMb5txZT5ZDtrl/aF292bOAPj86dsj8m6f5U7C8fUhj4izCn/2pzTY3/OVpury9D+8n/ny6uh9uwttb8TtI+XM6+Y3ou/f6vNkEz2McXD1OG+/olZmz1wcyHPaumz3/r3pz1mgl88Eo6HnxcGouIoABW6PYetgsduUe4S/b9md+nL29Axb7paKB16/8klNC4nsxUxbi60Hu6iZKfLgAKrSO2qW0w82k3BHflTPcrq3GtV2vty56rUbNcZqNa9Opm06rZf0yu71W396LzBbFEcQeowFRuZTkbmnzPUAcuxyoD6m+YJlUOq59E7GPBKp4dCQPAaMcJkzKMwvtFWcr20pbtlVvhAvHZsukSRKtcsvEHb1Lu4GAtKTJllXS5BFgkhBQwq14zSWxuZC9mKNFJiKrukBVCpmU9lSprFuzLxyDkziJQCE1YuZnEVSTWZJ3xuDbrxIcnltH15P8tH1Z1/G/fQukj0+UA1e1XIEcI5y4XOr7Qr4u2D4seB++m/lEHSzZT5ESvEVS/vVBE8WPgiOyoj3kwvPYUIpqHBdUJPIXBBdEL65rqeLy3Hf245gjqzqvZotFlt9zqQxtSImzjDHgTErSesL+AWoU242z9L9AfJS1sJexZWJGxwIJiCVVKvnyjAt/DFxd+J7k+Orc10QppeyZgJU4ZetF8rGiEH/7nsEuVn7SfC8/S5b6H6M6Eesgj6xT3veC0FCtlPavvyAEZjIskarF0sPgpwKcSl42Fk0usAjJpLdMwNd/KkqO2hrCmGVUeH0tNxxKZI5TrBNwP5w+hclVuHiWkX9/l+kkpwAG+ZjjJI+vbldXcZ+GBzK7S3paaR3nO6Uto+t8Mn+2HPTpmOOdPw==</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98867d3f-ee6a-40a9-b86c-9680112ee1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c14de42-36d1-4d4c-9ee1-c12988a83e56</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_017_DTCreate_email_case_insensitivity_all_upper_P2" searchProperties="true" id="ade7af26-7f9c-4758-b219-d09ad8667127"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="8a3ae109-bc8f-42ec-a05a-5f126c5cb476"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="bb6dead4-883a-428d-9f09-ff134562f892"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="f1832468-ae42-4213-ada0-7801f00c3bb3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="786e91f9-abc4-45dd-bef1-a8c27638c3b4"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="bb4e51a4-5278-478e-a7ba-b53f4018dc8f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="77477400-dafd-4e62-9fde-ba0ac1f98aea">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="ed65e470-5c9f-472c-a9b0-1ff2d84843e4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Change Primary Email" id="31d25512-5549-4ffb-a01b-5b202917975e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String email = tC.getPropertyValue("PrimaryEmail").toString();

tC.setPropertyValue("PrimaryEmail", email.toUpperCase());

</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="851385af-6867-4db7-9861-d2411ce9af91">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="5b3ec304-2834-417e-9abc-bd06c59921d9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">16E4390ABCB449F6E05307991F0AB206</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">16E4390ABCA849F6E05307991F0AB206</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>TEST_1432541456804@UVVUTESTING.BIZ</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>16E4390ABCA749F6E05307991F0AB206</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:16E4390ABCA749F6E05307991F0AB206</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>16E4390ABCB349F6E05307991F0AB206</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:16E4390ABCB349F6E05307991F0AB206</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1432541458374</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_29268987-6a83-496c-bec6-56a0a60f79e4</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZrb+I6EP0rKP1YhTyAQKKCxKtbdmlpgT62X66MM4AhcVLbAdpfv3aALKG0l3slJOTJ+MyZh499xVEY2F6Tc2CCRLSwCQPKvdRa1xJGvQhxwj2KQuCewN6oedv37KLpof0WrdDr1LV/bNd2am6tqjuoVtLLroP1CWBHrzjIRI45rbpQlq6cJ9CjXCAq6pptWhXdrOh2ZWzWPPmzq0XLdl61whMwLrGlS9HUdqQ2vK7NhYg9w1iv18V1qRixmWGbpmW83PZHeA4h0hpX24zSQKyx88dFHzAEAS7iKDSujJzPlc+9EZlRJBIGu1j+V7FMw3QN6eNzMrvQsr3g9+g0SpdtRCNKMArIB1L1uQUxj/xCM5hFjIh5+GUSlqmAddhgHVtleqEZeWpnAuUYMo50PkfWDmsIU2BAMRQeh726dnFe19KtY4Yon0Ys5Pnlf+MDdAVBFIOv831aO2rnA56oVOMKsNejOEg4WcGdGtYYYeC7bgI+H6pwz2BKNn3C5YBuuGJnHNI7Wm6r0SEz4OL/NOigOVuQJxQk0JihIX95G5sJ+b0MK25sxAOouGt8OeP1lMChc2rIWrtdHg1lNkQ7+JvF0p0/sOXi7he/XDQX991Vqwkf6ycyGJZFqftSHTzPH29G1w/l1w/WX3x8dJ7jO/bz8hU/L9qr2bq8CX6Qp8W0Ofg1Dh4c9DKg7tPj8rWZPNQ6q+p4yXu+01/Gz7T2+DOy36l1GS7eKgKtzH7L9W/j1n2/y9buXXL7w0Fd98X9bU9F5+HmoxYk68nvR/by+Oy+8V49S+eAf962P/OjZLIALPZLNQa9TuFadgmJ78VMWYivT1NXL1biwwVQoTXULqUdXiLljvie7OF2bTndcsk1m612q1R2r52uWSmZVde1rqXNNp29yGxZHFFsR3RKVCwludux+Z4gDj0O1Aemr6JEKh3XvkHsIIEKPTqUhyCiHMZRXXNQFaa+O5VHvCTPucxAd92JozslHxCaVFxcmmiFu0gM6IA1pwJYTp0tK6fOQ8AkJqAkXE04lyPOhcR8Q6tEBFZxhYoUEinyTOmtZ5drFYOTMA5AcTbCyE8CKMbzOK2Rwbf/to4wT61ts929rnXNWrtrtasdWduyqepqVmR9bbOVHsov0z/+tq+U9PGJcuAq0RbIbsOJO8jaZ/mpGs7Ju2oP30x8os6fLLtgBG+Z5D/9nSY1RtkoDbvjPeXM89iQQzWOE8oC+SuCs/OQ3epS7KU8NPa9ekNW8a2YrFZJeh0yCW1IJbSMEeBEKtf7OFoCNbLtxlnXRMb4KGpmz3NLxJyOBBIQyjkqpMsz3gUj4Opd0JNHYXPuoyMXUtZMwEacsrUD+aZRjL999mAPKz9pvpd/64j5f1t1AusgjsxTPgsEoTO1UlfE+xcDgSMJS6S4RewQ/BTAqeB5Y1bkjIuQkzRJBHz9paBUq64hjKOEil5HSw2HSpryFO8xeH+dPsGkYp293si/P990ko4ABvnm4yTFV5ewp2afzg7UeBf0tCA3q98Jcp5d45P5s+WgTscz3vgD</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_018_DTCreate_email_case_insensitivity_all_lower_P2" searchProperties="true" id="f1f6277a-740b-4e43-b1af-bcae0b352b2f"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4e5b1bab-b21f-4d4d-bf57-9aa3e5f0b4de"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="c8f86044-a310-43ba-ba1f-a015d619b49b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="dff14972-5f6f-4924-8449-f9d1aad717b9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="a371067c-c826-4557-8294-0043df2048f6"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="16c531b4-41f5-4fc0-b4bb-2165d9aa49d7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="1b5a7a8b-4be6-40ae-a58a-8f76a0f7a98f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="fe6bb816-1075-472f-8143-e32acc3d4826">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Change Primary Email" id="88169b84-7faf-4ffe-8a69-b7e7d03a1624"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String email = tC.getPropertyValue("PrimaryEmail").toString();

tC.setPropertyValue("PrimaryEmail", email.toLowerCase());

</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="3b6da7eb-a2be-4c0a-b4dd-b2e369076b11">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="5bd965dd-aade-4054-9463-def3533a7224">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">16E43398C9FC5576E05305991F0AC9D4</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">16E43398C9F05576E05305991F0AC9D4</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1432541512145@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>16E43398C9EF5576E05305991F0AC9D4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:16E43398C9EF5576E05305991F0AC9D4</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>16E43398C9FB5576E05305991F0AC9D4</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:16E43398C9FB5576E05305991F0AC9D4</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1432541513745</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_0a4a2f0a-6d80-41aa-b4d5-463e7d31267b</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZXwFjCtQRYAkzgAzCeSy87Il5MZoYsuOJYPJ169kwMGEZNl9cnW71X36oqO+YCgKTbfHGKScxLSWRyFlbqHtKFlK3RgxwlyKImAux+60Nx65Zl130f6IUvMGHeVvHdnIXOhIbfqOrtoGQurc9huq3bSg5VuG2WzNhSljGXiUcUR5RzF1o6HqDdVszHTH1duuadYdw/6t1B4hZcK3MKnryg5UzjrKkvPE1bT1el1fW/U4DTRT1w3teTya4iVESOlebDMqAqXdnT2u+4AhDHEdx5F2oVVsLnzmTklAEc9S2MXyP4ula3pbEzY+I8E3pTwLvkcXcSH2EY0pwSgkb0jWZwx8Gfu1XhjEKeHL6NMkDF06ViHHKjZs+k3RqtDOdFRBmDKksiUydr7uYQEpUAy1h3uvo3w7r2vF0VmKKFvEacSq4n/DA3QFYZyAr7J9Wjto5zs8UanuBWDXozjMGFnBRA5rgjCwXTcBn++q9iuFBclHhIkBzZlEpx3COxK31RiQABj/Pw06aM7WySMKM+h69x4Ek0lixaP10rl6/Os3WN8nj5fff7x0CgCHxoWibO1WPBrKcoi2J15y/U4Lktu8d2sNx5bnx/lk5Sxbwc0mv356C1IymPwe5D8he36a9q+fkpvHYPXGnMs2NY2Zt2lZ1y/pa2PaZze3f6zEjO+iH7f+9HUBcHvDvHxhmOvJ2/jtcrQeUJhee2b83GabOb/pPSxbm0mvEb4+ru+yRTR6Hl+T5kvvuoWCDfMG9o8RiR/gZTxshLMnb3XXKdM5wF/V7e/8NJv/Acz3ohwDb1C7El1C/Gsykxriq4vC1E0k+TAOlCtdeUpyh5sJuiO+K3q4lY3m0LasttNvX102Gq3mUG9YeqPdNq70Xr89sPcks0VxBLEf0wWRsSTlbsfma4A4chlQH1J1FWeC6ZjyhccB4qjm0XtxCWLKYBZ3FAPaTWwbjuq3sanaC9tRHQsbKpjz5hy1zabRspXaJOY/6c+0t+CQVtjZMCrsfA+YJAQkhcsJZ2LEGRdVeUWrjIdGfYXqFDJB8qnkW9e0nYbGSJSEIDFrUexnIdSTZVLUSGPbr6kizAptX+8Pr5yh7vSHRr81ELW1dVnXor6mfllcyk/TP/63r5Sw8Yk0YDLRSxDdhhNvkLHP8kM1miffqr37XuYTef9E2XlK8BZJ9df7NMkxKkfpfjjbQy4tjxUVr9pxQmUgf0VweR/KV12QvaCH7r5Xr8iov9az1SornsNUuNYEExraFHAmmGszi1+AauVx7axnokR8FLXUV7FlfEmnHHGIxBzVCvGMvWAKTO4FnrgK+blLRyWkqBmHnJ/S9UOx00jEX6492MXSTqh/ic86Tv33Vp3wdRBH5CnWAk5oICX5RGw+GQgcC7dEkFucHjo/5eBU8KqyLHKJhYtJmmccPv9Tk6zVURDGcUa5N1AKxSGTFjj5JgH33eiDm4Ksy+2N/Pv6ppJiBDCInY+Rwr98hF05+zQ4YONd0NOEPLz6ipCr6Lof1B81B3U6nvHuPw==</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:tearDownScript>if(context.expand( '${#Project#runTeardown}' )=='true')
	{
	log.info("Executing TearDown for Suite '" + testSuite.getName() + "'");
	
	for ( testCaseResult in runner.results )
	{
	   currentTestCaseName = testCaseResult.getTestCase().name;  
	   currentTestCase = testCaseResult.getTestCase(); 
	   log.info("Current TestCase : '"+ currentTestCaseName + "'");
	   log.info("Current TestCase Status : '" + testCaseResult.getStatus().toString() + "'");
	   
	   if ( testCaseResult.getStatus().toString() == 'FAILED' )
	   {
	      log.info("Re-executing failed TC");
	      def currentRunnerTC = currentTestCase.run(null, false);
	      log.info("Status on re-execution : '" + currentRunnerTC.status + "'");
	   }
	}
	log.info("Execution of TearDown for Suite '" + testSuite.getName() + "' Completed" );
}</con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="3_DTCreate_and_SAML_Exchange_FUNC" id="35f4a356-ffd7-4db3-9a4a-7202952a10c1"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_001_DTCreate_audience_parameter_value_is_requesting_node" searchProperties="true" id="3f25f536-97ce-48df-a244-a56b062df62b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="90052827-45b1-4d79-8878-defc3373e80d"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="40f9a705-5e55-46c6-9d9e-01b99373b84e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="e6f8eb58-d8b1-4bb5-97d8-df4364a3f5bd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="3151b8ab-b219-44f8-b39f-2019c888e9d7"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="a4ec867e-3dc9-421d-80d4-3cf581748727">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="bad5282a-f22d-4cf1-840f-20282cf6a6fa">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="b661573f-6c0e-4000-8e78-29b14dcd3f2a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set AudienceList" id="a6b74c1a-4d64-42e0-a370-a95332166910"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def urnNode = context.expand( '${#Project#urnNode}' )

def NODE_ID = context.expand( '${#TestCase#NODE_ID}' )
tC.setPropertyValue("audienceList",urnNode+NODE_ID);

tC.setPropertyValue("audienceIgnoreAll","true");
tC.setPropertyValue("audienceIgnoreNodes",urnNode+tC.getPropertyValue("NODE_ID"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="4516c62f-d697-4c5d-97f6-144af578f16f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="84983740-7bf4-4eae-8f41-21498a002515">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="29469b00-21f5-4e5b-a5be-e42194bd8021"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">18243BFB91AF56AEE0533D991F0A9081</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">18243BFB91A756AEE0533D991F0A9081</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433914679914@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>18243BFB91A556AEE0533D991F0A9081</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:18243BFB91A556AEE0533D991F0A9081</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>18243BFB91A656AEE0533D991F0A9081</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:18243BFB91A656AEE0533D991F0A9081</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433914681762</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_06a81fe0-409c-4e37-8664-72f6746a14e2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc6o6FP0rDuexg3ypBaY6Y2ttOUeto7Z6+3InhqCpEDQJiv76m6BSsbXXe5+YbHbWXvsjK7ljIApNt8kYohzHpJRGIWFuZq0rCSVuDBhmLgERYi6H7rDZ7bhmWXfBcYtS8lp15W9o24EB9EA1puhWrdiWqTpOBahG1bLNytQ3bB0KV8YS5BHGAeF1xdSNqqrXVEMf6VXXqrq6Ua7p+rtSekOUCWzhUtaVA6mU1ZU550tX0zabTXljlWM600xdN7RJtzOEcxQBpXG3zygLRBsHf1j2EURhCMswjrQ7reBz5zN3iGcE8ISiQyz/Uixd0x1N+PgMz34p+V7keySIs+UDIDHBEIR4B2R9uojPY7/UDGcxxXweXUzC0CWwilKoQqNCfilakdqVQAWGlAGVzYFxwBqgAFFEICq9Dry68uu6rmVbRxQQFsQ0YsXlf+ODyBqF8RL5KjumdaB2PeA3lWrcIeh6BIYJw2vUk8O6BBCxQzcRvB6q1KcowGkHMzGgKZPstFN6Z8t9NVp4hhj/Pw06ac4e5A2ECWq0u0a3uXjo9+h8Wvm9AU/69jkhdEx7rJ4ROHXODHlr98uzocyH6Ai/nYzAwB5+aPpm8GL9now7N93UfLdYeP+8aM6CinHTab15g+3KTD5u42B+04tgz64G+ut212//qbQ9tnwc9LtN+jYG+tLpMbzavk7exy/D1mL+wtkz2/zVsdns3ky6m4e1R6dpb+N5/W0ytZ6cVqfTJJ3dZP4IWlo6tpYOf2qPUpuOu6FZndQ+dhCNqvawUs/TOeFftB3P/DCZfiDIj0s5Bl6r1BZdAvxnMZMW7KtB5uoupfgwjghXGnKX1A43EXKHfVf0cL82xPmw7tv3jtGsVWvNx0e9alktxzHaetPRbeMoMnsWZxQfYhJgGUtK7n5sfiYII5ch4iOqruNEKB1TfkBsAQ5KHhmIQxAThkaxkGdjtdslsySordeRbaRwETurxa0DGFVKvZi/kBfaDDiiRVG2C6I8QBAvMZLKLQebiclmXBRjBdYJD43yGpQJSoS2UymzrlmxqxrD0TJEkqoWxX4SovJyvsxKo7H911QBZJl18DjKjtvFxM7/HWsgfHwsHZjM5R6JPqIvt0vFrR4TuZiwYZwmfIRvJj6WJ0sUlFMM90yKvz7nRA5IPiQioyPl3PPcUEDVzhPKA/lrDPNJz+9rIePi4DeO7VgBo7wqJ+t1knWgUrE0KuA1oXOGNkQwEbq0HcULRLQcQrvqEshZn0XO7UV+CZ+TIQccRWJcStnyilt/iJi89T0x6Om1T4pCSFE3jlL+ne0hFC8WyfjHRw10ofQT5r74bGLqf7brG6yTOCJPcelzTGZyJS+A7YWhgLGAxUK6YnoK/h3Ad8GLxrzIORcupmmacHT5T0lqUl0BEMYJ4V5LyQynOpnx5Nslcj+dvsBkUpy/zfC/P85UnI0AROJFx3CGL69YV84/mZ1o7SHoBbmt/iS3RXaNL+avlpM6nc944x8=</con:value></con:property><con:property><con:name>audienceIgnoreAll</con:name><con:value>true</con:value></con:property><con:property><con:name>audienceIgnoreNodes</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_004_DTCreate_Verify_UUID_status_for_deletion_of_ULC" searchProperties="true" id="524ee824-6537-4171-b4ee-0d5932899286"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="bf10d521-e7ea-40be-b4d6-203037a3f5dc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="14fa2fb3-08ce-492f-8172-b0102c839737"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="b7cb2650-1515-4d93-932c-db1ca35be6d8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="e5889555-d4ce-4ac0-9a18-32228b5f006f"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="f61d8907-f68a-43c3-bf2c-879d289a8aaf">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="cd3dea62-1dc1-4374-a724-39540591f35d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="156ed890-5c34-417f-8ea9-63be7d8219a5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="bfcfa952-2325-4561-beef-62f6c7975bb5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="418a46c4-dfe8-46dd-8070-f7cf924320c2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy GET" id="f46e607c-fa25-4c26-99a4-674ef222dfbc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")
tC.setPropertyValue("ResponseTypePolicyGet","SUCCESS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC PolicyDelete" id="65734750-c91f-4894-9528-3c8344d73aad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Node User Assertion UUID status to deleted" id="6c8dadd0-74b2-4600-9c6a-8391721bd373"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def assertId = tC.getPropertyValue("assertionUUID");

a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
assert a.samlGetUUIDNodeAssertionStatus(assertId) == "deleted";
	



</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">18245C6DC9001F28E0533E991F0A053B</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">18245C6DC8F81F28E0533E991F0A053B</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433916605756@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>18245C6DC8F61F28E0533E991F0A053B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:18245C6DC8F61F28E0533E991F0A053B</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>18245C6DC8F71F28E0533E991F0A053B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:18245C6DC8F71F28E0533E991F0A053B</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433916607228</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_9d602c50-80bf-4c93-9362-401876e65ae2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZSxfsMEVqPJCkiFDCIuTbDIvW4rcGDG2DJZMyHz9SgY8mJAsuy8hardOn77oSBccp4nlB5xDLmjGGps0YdwvrV2tyJmfYU65z3AK3BfED4PbkW81kY/3W7TGcNDV/u5ELrJIC+lt9DLTHdKx9Y7tWrqDzLbngtvCYElXzgsYMi4wE13NQmZLR65uonvk+sjzTa/pmc4PrfEIOZfY0qWJtB2pDe9qcyGWvmG8vr42X+1mlseGhZBpPN2OQjKHFGu9i21GZaC8t/MnzQgIJAlpkiw1Loyaz0XE/ZDGDIsih12s6KNYyEAdQ/pEnMZftGovREM2y8plH7OMUYIT+gur+tyCmGdRI0jiLKdinn6YhIkUsA4bohPTYV80o07tTKAaw5xjnc+xucOawgxyYAQaD9NhV/tyXtfKrfc5ZnyW5SmvL/8bH2BrSLIlRDrfp7Wjdj7giUr1LoD4Q0aSgtM1jNWwLjEBvusmkPOhGpMcZnQzolwO6IYrdsYhvaPlthoDGgMX/6dBB83ZgjzipIDeLPh2nWbBQ+tt8KdxfTtb3sXO9OHyr5vRc7ckcOhcGqrWbpdHQ1kN0XZH+GNCFihdvbnX9+Lr3WbxEAY39uLueYTssQjk+QhurkaG89Ue5TcM8n5o3E1Ch1qPi2e78/xwOR1b3F2srOdfP+x4nvDHp+vb4OfEfBreBKsRtFdR0hnm7Dre/DL763Y/tJ+9NR7D09e39Pu3YJZ9L8I+nrBlPI+Hg0GWj6PF95Slk5/jJxsNnjyB12gRf+O33SqdA/512/7Mh8XLAojYL9UYDAeNK9klLD4XM2WhkT4rXf2lEh8ugAmtp3Yp7fALKXc08mUPt2uzbTmtvjvot68888pqX6KWbV92OuYVCuS/f+xFZsviiGI/YzOqYinJ3Y7N5wRJ6nNgEeT6Oiuk0nHtE8QBFrgxZFN5CDLG4T7rarjd9kgHeTp5QS3dwfLPC8CLboEXyTPecdvQ0hrjTNyxuzyYCcjr6typqfMUCF1SUBKuJpzLEedCVmWF14VIzOYaNxkUUuRzpbe+5bRbBqfpMgHF2UizqEiguZwvyxoZfPtr6Zjw0mp6befSsty+17cHqGWVtR1sa+vYnlceyg/TP/62r5T0iahy4CrRP0B2G07cQWif5btquCfvqj18UERUnT9ZdpFTsmVS//R7mtQYVaM0vbzfU648jw01VOM4oSpQtKakOg/VrS7FXspDb9+rFTabq2axXhdlexzHNnIJb0g1NI0QSCHV6+0++wnMqCCMs66KivVR5Mpe51eIOQsFFpDKWWqUyzPeBiFw9TYYyuOwOffhUQsp6yZgI07Z+ol81yjGnz59iE+UnzRP5M9rlke/23UC6yCOzFM+DQRlsVqpa+Ltg6EgmYSlUuCy/BD8FMCp4HVjVeSKi5DT9FII+PhLQymXVA5CsoKJ4UArDYdqWvIUb0vwfzu9gykFu3rB0X9/wum0HAEC8t3HaYmvLmJfzT+LDxR5F/QDUXY/E+U6u94783vLQZ2OZ7z3Dw==</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:13BC58846BFA5DE7E05305991F0A40A4</con:value></con:property><con:property><con:name>SAML1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4BZbN3RWo4pJkqYWQAQbYvGwZuW2U2DJIsrl8/UoGHEwgy27xQKndOn36oiM9cDvwTavFOTBBQprbBj7lVmJtaBGjVmhzwi1qB8Atga1xa9C3zAKy7NMWLdfrNrS/iwauGiaq5ZFpQr7kLMy87bpOHkqLiuMi+Vs40pXzCHqUC5uKhmYioyz982ZxYiDLLFoGKpjF0puWmwLjElu6FJB2JLXlDW0pxMrS9c1mU9gUCyHzdBMhQ58P+mO8hMDWmg+HjJJArHn0xwUHMPg+LuAw0B/0jM+Dw60x8agtIgbHWM6tWEhHdV36OJx4P7R0Lzg96obJsmPTkBJs+2Rvq/oMQCxDJ9fyvZARsQxuJmEgBZyHLc5jo0R/aHqW2p1AGYaM23m+tI0j1ghcYEAx5H6Peg3tx31dS7ZOmE25G7KAZ5f/jQ/QGPxwBU6en9I6Ursf8Eqlmg+ArR7FfsRJDC9qWFc2Bn7sJuD7oXKvDFyy7RMuB3TLFTv9nN7F8lCNLvGAi//ToLPmHECmth9Bc8vYgpOK98KWAzYZey3fNSu73iae8EZC4Nw5MaStPSwvhjIdosMO0in7lLDpr+Xij+kgGA7Lb51dJ4rJnMszgUZOxxhW1ub4MSqZ7kcwn3vDrttHrWl16P4yty/79/7P/YA/t1/f3bH712xPJ63pXmelzt6ceU/GzGnP91H8Z9WbPdfGcySKs0608t77/qg1G76FP1mlGw9besz7m/bza1+ng1a7Jvbu0mxDdwDuUF+/1mu7yu+PRprOGf+s7XTmx9HiHbA4LdUY9Lq5J9klW3wvZspCnLybuForJT5cABVaU+1S2mFFUu6IY8keHtboqf3ULnVrNdStoGq1/IjKRVSt140n1CqXi48nkTmwuKDYCalLVCwluYex+Z4gDiwO1AGWj8NIKh3XvkHs2sLO9ehIHoKQcpiEUp5X9eV6/7E14rURGU7d9Nb+ckHea1jLvYRiSIes5QpgWU0uZjR5BJisCCjhVnPN5WBzIWuxtuNI+EYhtgsUIintTKmsZZZqZZ2TYOWDYqoHoRP5UFgtV0lldH74l4KDeWIdPU6S03Yzr8tvpxJIH4coB65yaYNsI1y5XNApkdsJV84TPsG3IoeogyXrKRjBBybZT59jouYjnRGZ0Yly6nlpyKDqlwmlgZyY4HTQ0+taqrg8981TO9Z2YV2I4jhKGlBV+sYkvK5S1JGpjwFHUpl2k/ADqJ6i6HddAynxi+CpPUsxEks6FraAQE5MLlnece+Pgat7vydHfXvvoyITUpZOwFZcs3V8+WZRjL991mALKz9pfpV/m5B9Jn4N6yyOzFNe+4JQT63UFbC7MRc4lLBEilfIzsGvAVwLnjWmRU65CDlQi0jA7S85pUoNzcY4jKjodbXEcK6UCU+xW4H16fQFJhHj9HVG/v15lifJCGCQbzpOEnx1yVrqCFDvTG2PQS8Ft2bUO/Vq8RHVOrVEcMsHwX3qFGtpUTLsml/MXy1ndbqc8eY/</con:value></con:property><con:property><con:name>SAML2</con:name><con:value>SAML2 Assertion=nVZtU+o6EP4rTM9HpzQtlNKOMMOr9orKCHrRL3diuoVom2KTIp5ff5IClSJ6ufdTJ9vNs092N0/2nOM4srwO55AKmrDKOo4Y93JrS8tS5iWYU+4xHAP3BPEmneuRZ1WRh3dbtIrfb2n/gGMHNg5C3Xadhl5363XdtZ6RDgRblmmSZ6dBpCvnGfiMC8xES7OQaevI0q3a1ESeVfMsp2pb5pNWeYCUS2zpUkXaltSat7SFEEvPMN7f36vvtWqSzg0LIdOYXY8mZAEx1trnmxPlgdL21p9UAyAQRaRKktg4N0o+5wH3JnTOsMhS2MYKvouFDOQa0ifgdP5LK/ZC4LMwyZc9zBJGCY7ob6zycw1ikQSVTjRPUioW8beHMJEC1mFNdGLW2S/NKFM7EajEMOVY5wtsbrHuIIQUGIHK/Z3f0n6dVrV86zTFjIdJGvPy8r/xAbaCKFlCoPPdsbbUTgc8kqn2ORDPZyTKOF3BjWrWJSbAt9UEcjpUZZxCSNcjymWDrrliZ+zTO1hustGnc+Di/xRorzgbkAccZdB+uA5Hj/MAd7q9xSRAw0XHH18OHf668ls5gX3n3FCUdrM8aMqiiTY7LrpPi/VL3B1fZBd/r7tjZ0KRSLr9GA0sq14fiJtpGl3RBX69vTbSzrzzcrEOzq4sPKN/ja2aG8TL5P55PntMwR6EEe90Lh4FmKP+zCTRuPk2GJ4tz+5Xo5mY+r9fHm/8CzPrn509pu/m5WoWGcPRk+36l9kzW8fdEfuAMB47Mm1Ld5LdvoU3T69u/wq/ThbxY6s4zh7/sm135yfZ8wsQsVuqNvD7laGsEhY/i5my0EAPc1dvqcSHC2BCa6tdSju8TModDTxZw80aDbvDbr3fbKJ+AzmOPUB2DTmuaw5Rx7Zrg53IbFgcUOwlLKQqlpLcTdv8TJDEHgcWQKqvkkwqHdd+QOxjgSs+u5OXIGEcpklLCyzcxA3i6LZlWXo9REjHJsF6zQ5dYjdMUndrWuUmEbfsNu2EAtKyOtdK6nwHhC4pKAlXHc5li3Mhs/KGV5mIzOoKVxlkUuRTpbeeVW/aBqfxMgLF2YiTIIugulws8xwZfPO1dEx4bu2h3mDYHKBmb2D2nH5jgOpI5RXZMr8W6uaX8tvjH/7bZUr6BFQ5cHXQLshqw5E3yNyd8ks2Gkffqh18Jwuoun8y7SKlZMOk/Ouzm1QbFa10N5juKBeeh4YSqnF4oCJQsKKkuA/Fqy7FXspDe1erN1x9q2arVZZXx1EymEp4Q6XCQJYxAZJJAfuYJq/AjALFOOm1KIgfBC/sZYqZWLCJwAJi2U6VfHnCeDABrsYDX96I9amzRymkTJ2AtThm60VytFGMf5x+iEeUnzSP5ec9SYPPih3B2osjzymnA0HZXK3US/HxTV+QRMJSqXFJug9+DOBY8LKxSHLBRciGes4EfP+nosSrpWFCkowJv6/lhn1BzXmKjyV4n05fYHLNLoY4+u9TnE7zFiAgRz9Oc3z1FnvqCrD5nihvgx7qctN0e65TUwLSzHXZ3ujysFdrFkkpsWt/MX+17OXpsMfbfwA=</con:value></con:property><con:property><con:name>ResponseTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_005_DTCreate_Verify_UUID_status_for_deletion_of_account" searchProperties="true" id="984153b2-93f4-40e1-8122-5c6abe9db62c"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6de39969-38ec-410a-9b9b-29c2dc11968d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="c246c474-84dd-4118-8840-b22cc8cc4403"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="f344c825-fb5c-4a00-89f9-c32d648b14d5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="72bb2577-8d86-47cc-9196-b258bc9bc6d3"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="47a7d346-d37f-4466-bd79-49ccaaced490">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="9c14bfc1-1edc-4c1c-9562-619d6f052f4c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="244ff433-e21e-44c6-a4cb-18485e4f6351">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="66c88c45-cc8d-4155-aa4c-86d48c764c9f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="c9f38f18-411c-4931-8371-203bbad11e30">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="c34a4aa6-af92-4c83-88aa-8e2b418a9b4f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call AccountDelete" id="e2d5c1e8-94a1-47ab-89be-18b7b7985348"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountDelete API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Node User Assertion UUID status to deleted" id="416ec649-14b6-4965-98b0-d331e347f1b9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def assertId = tC.getPropertyValue("assertionUUID");

a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
assert a.samlGetUUIDNodeAssertionStatus(assertId) == "deleted";
	



</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">18243BFB924956AEE0533D991F0A9081</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">18243BFB924156AEE0533D991F0A9081</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433914765938@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>18243BFB923F56AEE0533D991F0A9081</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:18243BFB923F56AEE0533D991F0A9081</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>18243BFB924056AEE0533D991F0A9081</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:18243BFB924056AEE0533D991F0A9081</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433914767301</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_6c9d3b55-4233-4384-aa6e-9a252dbdc738</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+o4EP0rKH2sQr4TiAoSJeXe6AJtod8vK+MY8DY4YDsJ9NevHSAllHbZfYo8GZ85nhkfzxUDi9j0O4whynFCautFTJhfWFtKSomfAIaZT8ACMZ9Df9wZ9H2zrvtgv0WphUFL+cuFzciaOI5qm5al2lbDVgFwkdoEpmNGkwh6VkO4MpaikDAOCG8ppm44qu6qhv6g277h+KZTtxz3Tak9IcoEtnCp68qO1Jq1lDnnS1/T8jyv51Y9oTPN1HVDexn0x3COFkBpX21PVASi7Z0/rEcIojiGdZgstCut4nMVMX+MZwTwlKJdrOi7WLqmNzXhEzE8u1DKvSgKyTQpll1AEoIhiPEHkPkZID5PolonniUU8/ni20MYugRW0Rqq0LDJhaJVqZ0JVGFIGVDZHBg7rBGaIooIRLXHUdhSLs6rWrH1gQLCpgldsOryv/FBJENxskSRyvbH2lE7H/BEptpXCPohgXHKcIaGslmXACK2qyaC50PV7iia4nUfM9GgaybZaYf0jpbbbAR4hhj/PwU6KM4W5AnEKWrrI/Jn6L2adzpejTvZs9t9+IBjYrj6oFUQOHQuDGVpt8ujpiybaLtjngWWSy+jaLNiMyPJvbuhm/U3t/ekx0b38yc6oPeXrt1Lnzvvb0vv5ZGM0tXqLljcJ7/WgXl79+7kzDLyvD8cGcEtfL1vhn/0l3G4iptWP7mdB4MA56+9AZs057+Gl5thY51zts6v3z/e8u6zGfazwKbXgw+Ostf10+/fzCPO6LHvzaYb6uUfz+H69bXz1JiFrfI4B/yrtv2dH6eTvxHk+6VsgzCo9USVAP9ZzKQFR+q0cPWXUnwYR4QrbblLaoefCrnDkS9quF0bDdPsWUaj55me63m9G92xrJtm0+jpHavRvd6LzJbFEcVuQqZYxpKSu22bnwnChc8QiRBVsyQVSseUHxADwEEtJCNxCRLC0EPSUnTLMF29Gam67k5Vu2k2xRUHE9VDDoR602hM0FSpDRN+S25pZ8oRraqzV1HnEYJ4iZGUcNnhTLQ44yIrK5ClPDbqGagTlAqRp1JvfdNuOBrDi2WMJGdtkURpjOrL+bLIkca2X1MFkBVWw2vYN6bpdr2uFeiOWeQ22ObWtjyvuJTfHv/43z5TwifC0oHJg14jUW104g0y9qf8kg335Fu1h++kEZb3T6SdUwy3TKq/PrtJtlHZSqObhz3l0vPYUEHVjg9UBooyDMv7UL7qQuyFPLT3tVoBo76qp1mWFuWxbUujAl4TamhoYwRToV6bh+QdEa2E0M56KkrWR5FLe5VfyudkzAFHC9FLtWJ5xmwwRkzOBqG4DutzB49KSJE3jtb8lK0bi7lGMv5x9IE+lH7CfCc+eUKjz3KdwDqII84pRgOOyUyu5DOx+aYpYCJgsRC4hB6CnwI4FbxqLJNccuGimyYpR9//qUnlaikAwiQlPAyUwnCopgVPvlki/9PpC0wh2OUEh/99hFNx0QIQibmP4QJfPsS+7H8yO1DkXdBvRNn9SZSr7NpfzF8tB3k67vH2Pw==</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:EAE7B7D46BA71E2FE0401F0A079922CD</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_006_DTCreate_Verify_UUID_status_for_deletion_of_user" searchProperties="true" id="2ce9a106-cb7c-45b3-8feb-ebcb68ed7cfb"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1f9f3c21-e8e1-42da-8ebf-e8a05cd6d696"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="ebb83950-0fc0-4410-9f96-25fdbf6e8b06"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="b5470653-54c0-4cf9-8e20-048f24e3fac7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="0694ec88-1e30-47e6-aa43-7ca13b826ba5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="558a9f83-edce-48fe-843b-6c104cf3d46d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUIDFirstUser", tC.getPropertyValue("assertionUUID"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="59053704-d4ce-4b84-8e19-e3b7a13bc840">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="90bbfbe5-5d18-4a42-bb47-fab3528094a5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set EmailId for Second User" id="b9bb2f65-1ff8-4ff5-a3f9-bc42529ce31e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Second User Create" id="a8420706-7d70-4c18-8b15-617a58e37ef9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="2aef7c95-950f-4a36-b316-2bed392e708c"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator for Second User" id="2d297290-7e5d-43c9-aa55-3f59e4ac6e56">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator for Second User" id="145e1a9b-7883-4608-af98-2fd8c16181c0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create for Second User" id="793630e7-9ba6-45d4-a7d6-3eb947e58019">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create for Second User" id="ce2c359d-12f3-4df2-af06-aaa855e61c19">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="1a009899-63a4-460b-aabd-b43f26b336f8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="e1c1634b-e73b-4088-97c0-dce0f2f066ea">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call UserDelete" id="54e599f1-63ec-4805-a152-16ae1c102d12"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserDelete API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Node User Assertion UUID status to deleted" id="0a9c08c3-d09b-4117-9d7c-14f2dd23f0af"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def assertId = tC.getPropertyValue("assertionUUID");

a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
assert a.samlGetUUIDNodeAssertionStatus(assertId) == "deleted";
	



</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Node User Assertion UUID status to active for first user" id="52c4896e-258a-4846-95ce-6701fbed67ab"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def assertId = tC.getPropertyValue("assertionUUIDFirstUser");

a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
assert a.samlGetUUIDNodeAssertionStatus(assertId) == "active";
	



</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>1822F318F7C0677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>1822F318F77F677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433909963316@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1822F318F77D677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1822F318F77D677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>1822F318F7BF677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:1822F318F7BF677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433909963370</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_c2f0cc2a-f33b-4637-a22e-1b01bc63d9d7</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynmcMr6CwRWo4pp4NzAk5LKTly0hy0aJLRlLNpCvX8mABxOSZffJpXbr9FF366ivGYgj0+0xhlKOKalt4ogwt7B2lCwlLgUMM5eAGDGXQ3fem9y5Zl13wWGLUvOGHeVvaAY6hCZQA8taqHbTclRgmkg1FrqxgE3Lb/uOcGUsQx5hHBDeUUzdaKh6UzX0R912jaZrWXWj7bwqtWeUMoEtXOq6sie1YR1lyXniatp6va6vrTpNQ83UdUP7a3I3h0sUA6V7vTtRESjt7v1h3UcQRRGsQxpr11rF59pn7hyHBPAsRftY/lexdE1va8LHZzi8Usq9yPdIQIvlABBKMAQR/gAyPxPEl9Sv9aKQppgv4y8PYegSWEUbqELDJleKVqV2IVCFYcqAypbA2GM9oACliEBUe3rwOsrVZVUrtj6mgLCApjGrLv8bH0RyFNEE+So7HGtP7XLAM5nqXiPoegRGGcM5mspmTQBEbF9NBC+Hqs1SFODNHWaiQTdMstOO6Z0sd9kY4hAx/n8KdFScHcgziDLUbT8N/ZYxnTnbN7/PwcsgnelB9O6HmHYKAsfOhaEs7W550pRlE+123L4u0hEE4c32B/7RmtJt8+YP81ffzBaT+etsYY4Ns7GhELXYvT8L3+zn28S7v532UQJv33om7Ifbm81K+3AmvXVj8jRt9z+ex/xuDTfBx8vSuA1aEzvMyYv+liTjEVvns9G7P6QzLzVBI7x5iRvb/JfxkPAsy+fvfMHmP7fen/ergK7m1i1HKy9PwvR+qsdPnfI4R/yrtsOdn2eLNwT5YSnbwBvWxqJKgH8vZtKCfTUoXN1Eig/jiHClK3dJ7XAzIXfYd0UNd2ujZZpjy2iNnf646Tjjkd6wrFG7bYz1ntUa9A8is2NxQnFASYBlLCm5u7b5niCMXYaIj1I1p5lQOqZ8gzgEHNQ88iAuASUMPdKOYuu2ZfnAUO0GNFU7sEwVtPW2uvCbhtNuGdCyhc5OKf9Jfqa9gKO0qs5ORZ0fEMQJRlLCZYcz0eKMi6ysQJ7xyKjnoE5QJkQ+lXrrmnaroTEcJxGSnLWY+lmE6skyKXKksd1XUIKssBpOyx6ZZnPgDKyh3jCL3A53ubUtxyku5ZfHP/13yJTw8bF0YPKgfSSqjc68QebhlJ+y0Tz7Vh3ge5mP5f0Taecphjsm1V+/u0m2UdlKD6PHA+XS89RQQdVOD1QG8nMMy/tQvupC7IU8dA+1WgGjvqpneZ4V5bFtS0sFvCbU0NDmCGZCvbaP9B0RrYTQLnoqStYnkUt7lV/Gl2TOAUex6KVasbxgNpgjJmcDT1yHzaWDRyWkyBtHG37ONojEXCMZfzv6QBdKP2Geic+apv7vcp3BOoojzilGA45JKFfymdh+0RSQClgsBI6mx+DnAM4FrxrLJJdcuOimRcbR139qUrk6CoCQZoR7Q6UwHKtpwZNvE+T+dvoEUwh2OcHhfx/hVFy0AERi7mO4wJcPsSv7n4RHirwPel6UneF3olxl1/1k/mw5ytNpj3f/AQ==</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:EAE7B7D46BA71E2FE0401F0A079922CD</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_0bbba6ad-0535-4cd5-9018-329be8e3d6ec</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_027_DTCreate_DelegationToken_Create_followed_by_STS_Create" searchProperties="true" id="66a5d712-a745-4d71-8dc0-ace2e21fdceb"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="cfcc77a4-324b-445e-b692-278f5df9005c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","dt_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("assertionUUIDPrior", null);
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="10e1896a-253f-4b82-8910-81e33a8bd45f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="a9586672-39a4-44ba-8d48-4aecc84219a4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="7a49b3fd-7f4a-4a17-8371-6cf574924fd9"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="67cd4e64-9944-4635-8e1c-fa1d64fe53df">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="40f1098f-8f77-4e6b-8c43-dbf25b44e805">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="1cf775bf-5b8f-4d1c-8d07-61e5d4066a1b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="eaf571ef-f77c-4e60-bbe6-ca90e2452cd9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUIDPrior", tC.getPropertyValue("assertionUUID"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="97036e18-627b-4cc4-b824-cfddb5315a02">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="5b87c619-3e5b-4dd7-b18b-2500c026ad22"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>1822F318F7FC677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>1822F318F7F4677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>dt_1433910019140@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1822F318F7F2677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1822F318F7F2677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>1822F318F7F3677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:1822F318F7F3677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433910020798</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_c8bae6c4-2d4b-47bb-91eb-8aeb1e0d4fc8</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMr4SG1eginDJMgkzBBgm4WVLltugiS0TSzZMvn4lAx5MSJbdJ5fardNH3a2jvmEojkyvwxiknCS0to0jyrzC2lKylHoJYoR5FMXAPI69aWf04Jl13UOHLUpt2Gspf2PXR3CNbdUMbF+1Hd9Xmwb4qovAN0AP7BC7wpWxDIaUcUR5SzF1o6Hq16qhz3TbMxzPdOsN01wotTmkTGALl7qu7EltWUtZcb72NG2z2dQ3Vj1Jl5qp64b2NHqY4hXESGnf7E5UBErbe39cDwBDFOE6TmLtRqv43ATMm5IlRTxLYR8r+CiWrulNTfgEjCy/KOVeCIY0TIplF9GEEowi8oZkfkbAV0lQ60TLJCV8FX94CEOXwCpssYoNm35RtCq1C4EqDFOGVLZCxh5rAiGkQDHUfkyGLeXLZVUrts5SRFmYpDGrLv8bH6A5RMkaApUdjrWndjngmUy1bwB7Q4qjjJEcvslmXSMMbF9NwJdD1cYphGT7QJho0C2T7LRjeifLXTZ6ZAmM/58CHRVnBzJHUQbtsDu18ej1x3yaOfdX7miUThuDn/Z0/thpFQSOnQtDWdrd8qQpyyba7bh7Xrzl5K/FPfidpxdzdXcFTzlfGE5Hf+b+2Hns8Ykz07emb941brkPGV6Yt8ufs0HY3X6dPIxoYs7N+/FL6uZja70ehyS4v2Kvdp9r5KsfLBd3zyPjbRbb8bY5MOjVarC5Miwnv3roO86iRzrP/WFnsvm1upu/zvHkGcfr+xXLb5Mfj91nd8Eam4x9w2NjilvlcY74V22HOz/N/F+A+WEp22DYqw1ElRD/XMykhQRqWLh6ayk+jAPlSlvuktrhZULuSOCJGu7WhmuaA8twB87AunacQV9vWFa/2TQGesdyu7cHkdmxOKHYTWhIZCwpubu2+Zwgjj0GNIBUzZNMKB1TPkHsIY5qQzoRlyChDGZJS3EC8O3rAKuW4xuq7Qa+6jfDpuoG2DdCP2yYYCm1bwn/Tr+nnZBDWlVnp6LOE8BkTUBKuOxwJlqccZGVV5RnPDLqOapTyITIp1JvPdN2Gxoj8ToCyVmLkyCLoL5erYscaWz3NVWEWWE1HNfum+Z11+laPb1hFrnt7XJrW45TXMoPj3/675Ap4RMQ6cDkQW9BVBvOvEHG4ZTvsnF99q06wHeygMj7J9LOU4J3TKq//nSTbKOylSb92YFy6XlqqKBqpwcqAwU5weV9KF91IfZCHtqHWr0io/5az/I8K8pj25aWCnhNqKGhTQFnQr1+z5IXoFoJoV30VJSsTyKX9iq/jK/olCMOseilWrG8YDaYApOzwVBch+2lg0clpMgbhy0/Z+tGYq6RjD8dfbCHpZ8wj8Vnk6TBn3KdwTqKI84pRgNO6FKu5DPx+4OmwImAJULgkvQY/BzAueBVY5nkkgsX3eRnHD7+U5PK1VIQxklG+bCnFIZjNS148t9r8P44vYMpBLuc4Mi/j3AqKVoAg5j7GCnw5UPsyf6nyyNF3gf9QJTNz0S5yq79zvzecpSn0x5v/wM=</con:value></con:property><con:property><con:name>assertionUUIDPrior</con:name><con:value>_e5437520-1bfa-4a00-8643-61a4ccfb21fa</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>66c88c45-cc8d-4155-aa4c-86d48c764c9f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a8420706-7d70-4c18-8b15-617a58e37ef9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>793630e7-9ba6-45d4-a7d6-3eb947e58019</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ce2c359d-12f3-4df2-af06-aaa855e61c19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2d297290-7e5d-43c9-aa55-3f59e4ac6e56</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>145e1a9b-7883-4608-af98-2fd8c16181c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2aef7c95-950f-4a36-b316-2bed392e708c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_007_DTCreate_retailer_Active_full_user_with_deleted_ULC" searchProperties="true" id="86facdec-4d75-4535-9f07-0d10fce84c0c"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="580fd442-28ef-4834-9f84-95cebd0ec875"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("assertionUUIDPrior", null);
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="0a19f8f0-1a4f-4f4c-b395-8ac8c2177432"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="a47031f9-190b-4973-8b39-adc2396d7ea2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="072b978d-42bb-4e79-b4d5-0caa3bb13586"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="d4526130-8d2e-4e9e-8470-f7de9924cef9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="22bd58d7-3ccc-458f-93f9-748026a25ff6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="2e9db158-8bbf-4c1f-a547-1b42a197b6a6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="ff9b6f18-1292-4d8a-8f53-2540c9f1036f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="8792746c-4fe8-4931-9869-ab52e7c4c062">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUIDPrior", tC.getPropertyValue("assertionUUID"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy GET" id="0e21b828-4518-47f8-bd9c-442eb071476d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC PolicyDelete" id="9168902f-2986-4475-aa66-1baa8031e25e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Node User Assertion UUID status to deleted" id="d5559064-917b-4586-9f01-d8920c5662f4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def assertId = tC.getPropertyValue("assertionUUID");

a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
assert a.samlGetUUIDNodeAssertionStatus(assertId) == "deleted";
	



</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate again" id="d90990ff-2cb8-4672-9d4b-2495efcae1e7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("policyList","");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get again" id="7bf35fd0-86eb-4862-b33d-967cb9405101">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUIDPrior", tC.getPropertyValue("assertionUUID"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy GET again" id="3ca2977a-a876-4ed2-81f1-e4de747ff1ee"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="f1d8c22d-705a-49fa-9716-540e2ca7bfb0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>1822F318F849677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>1822F318F841677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433910076780@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1822F318F83F677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1822F318F83F677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>1822F318F840677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:1822F318F840677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433910078224</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_f73f79bc-86f6-45cd-b6bc-cb6b3ad77158</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc+o2EP0rjO9jx/gbG09ghkBIyIQkF8gXLx0hr0GpLYMlg9NfX8mAgwlJaV9gtF6dPdpdHe0FQ3Fk+h3GIOUkobU8jijzC2tLyVLqJ4gR5lMUA/M59sed4Z1v1nUf7bcotUGvpfwZulboNmdY9RphQ7UdHKizhlhi8WuhwHUNxxOujGUwoIwjyluKqRuOqjdUQ5/otm94vunUm5Y3VWrPkDKBLVzqurIjlbOWsuB86WvaZrOpb6x6ks41U9cN7XV4N8YLiJHSvtieqAiUtnf+uB4AhijCdZzE2oVW8bkImD8mc4p4lsIuVvBdLF3Tm5rwCRiZ/1LKvRAMaJgUyy6iCSUYReRvJPMzBL5Iglonmicp4Yv420MYugRWIRdJM2z6S9Gq1M4EqjBMGVLZAhk7rBGEkALFUHsaDVrKr/OqVmydpIiyMEljVl3+Nz5A1xAlSwhUtj/Wjtr5gCcy1b4A7A8ojjJG1nAvm3WJMLBdNQGfD1V7TCEk+R1hokFzJtlph/SOltts9MgcGP8/BToozhbkGUUZtF8xjNLh7+vVS+8+mw979uCBL/JL3vOSVkHg0LkwlKXdLo+asmyi7Y6lrnt/PL9OmzbKwmdupfmjvbIa6Ha1mXJiPneipyx+twex3XGvicdJQNjDa9wIXm/x5CON3t43TL9xVk6wsnqe9wZ5/MC7/CV/CcjUWWjZsLE2btD1W2R/dFajRucyue7fv5Op2UX8bkheHlF0f2feBpdPN7/jwXu0QmM9HxvsRY/WJHzF/QgEgHY9tVvlcQ74V237Oz/OZu+A+X4p22DQq/VFlRD/WcykhQRqWLj6Syk+jAPlSlvuktrhZ0LuSOCLGm7Xhmeafcvw+p6tN1y3f6U7lnXVbBp9vWN53cu9yGxZHFHsJjQkMpaU3G3b/EwQxz4DGkCqrpNMKB1TfkDsIY5qAzoSlyChDCZJS9Gb4LhN3VJtD4WqbTZNdWZ5jjrTjRnghu0iByu1+4Q/0Ie0E3JIq+rsVtR5BJgsCUgJlx3ORIszLrKyQuuMR0Z9jeoUMiHyqdRb37Q9R2MkXkYgOWtxEmQR1JeLZZEjjW3/TRVhVlgN17OvTLPRdbtWT3fMIre9bW5ty3WLS/nt8Y+/7TMlfAIiHZg86CWIasOJN8jYn/JLNhon36o9fCcLiLx/Iu08JXjLpPrps5tkG5WtNLqa7CmXnseGCqp2fKAyULAmuLwP5asuxF7IQ3tfqxUy6qt6tl5nRXls29JSAa8JNTS0MeBMqNfHJPkLqFZCaGc9FSXro8ilvcov4ws65ohDLHqpVizPmA3GwORsMBDXIT938KiEFHnjkPNTtm4k5hrJ+MfRB/tY+gnzo/jbJGnwWa4TWAdxxDnFaMAJncuVfCY+vmkKnAhYIgQuSQ/BTwGcCl41lkkuuXDRTbOMw/dfalK5WgrCOMkoH/SUwnCopgVP/rEE/9PpC0wh2OUER/59hFNJ0QIYxNzHSIEvH2Jf9j+dHyjyLuhpUbb6P4lylV37i/mr5SBPxz3e/gc=</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:09786461B03C23CBE05305991F0A52EF</con:value></con:property><con:property><con:name>assertionUUIDPrior</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_f73f79bc-86f6-45cd-b6bc-cb6b3ad77158</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_008_DTCreate_Consuming_the_deleted_assertion_for_RightsTokenCreate_API" searchProperties="true" id="6a014fd1-13fa-4e93-a65c-6a7d79c1385c"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="96258c15-498d-4a58-b277-5875c4b4621a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="e33c20ff-e0bb-4d52-a6ea-2705f1591499"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="9c450627-8d26-496d-91d2-ee064fcba4a9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="b3055b9f-734d-4233-8106-d85a4083dc1c"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="9cdaeae1-3d16-452d-8aaf-c4662eba42ad">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="ed3ee3fe-acd2-4243-8e1c-c54b08230e20">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="a1ecb9c7-3e27-4f56-a179-63d7619f1994">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="ac06f87d-1ce3-4006-85c5-4e71917a2b37">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="520b1e3f-a33a-403b-b97c-f348cd3f2d21">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set UUID status to 'deleted'" id="dc48a885-cdb7-4377-80b8-ff5119d52b31"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try  {
	dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
	assert 1 == 2;
}
finally {
	assert dbUtils.samlSetStatus(tC.getPropertyValue("assertionUUID").toString(),
		"deleted") == 1;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="a9ce1a59-68e7-4480-9c40-5b3762658ba1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeRightsTokenCreate","unauthorized");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>1822F318F896677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>1822F318F88E677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433910130658@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1822F318F88C677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1822F318F88C677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>1822F318F88D677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:1822F318F88D677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433910132803</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_9aa92751-f7e9-4559-a13d-9f2639169730</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc9o4FP0rjPvYMf7G2BOYoSbMuglJCzRp87Ij5GtQY8sgyYTk169kgosJybL75NH11bnnfuhIFxzlmR0OOAcmSEFb2zyjPKysPa1kNCwQJzykKAceChxOB+Pr0G6bIdpv0VrxsKf9HSAU2L5n6akPge56XqAjy0n0ILU7TmB1At8xpSvnJcSUC0RFT7NNy9PNjm6ZM9MNrSC0zXZgug9a6w4Yl9jSpS137UhteU9bCrEKDePp6an95LQLtjBs07SMn+PrKV5CjrT+xS6jKhDrv/rjdgIYsgy3cZEbF0bD5yLh4ZQsKBIlg9dYyXuxTMMMDOmTcLL4pNV7IYlpWlTLCNGCEowy8oJUfcYglkXSGmSLghGxzN9NwjIVsA5brGPLpZ80o0ntTKAGQ8aRzpfIesWaQAoMKIbWj0nc0z6d17Vq64whytOC5by5/G98gG4gK1aQ6Hyf1iu18wFPVKp/ATiMKc5KTjZwo4Z1hTDw124CPh+q9Y1BSrbXhMsB3XLFzjikd7TcVWNIFsDF/2nQQXN2IHcoK6H/1Xn47Gdfs7F4/BqV+Fecp5s7nkbXwHsVgUPnylC3drc8Gsp6iHY71qn7azof3/Gx8+KxCSHoZTt++Y5cces58cBdu8Mfw7srM/LLyeU6mf3lXS6vZ9Hv0T1DTuy6Dz/F49XGmsUOE2n6nN2AdzMN4rlf3I49fxbFs2kZdUw2/3IPxHy89/JObt2u1rb/c2lsBY+vvM146M2fvi/4ZLx42NAb5+plOxzR8vvnsTdl6R1h0fZ+ksa9Op0D/k3b/sxPy/lvwGK/VGMQD1sj2SUkPhYzZSGJnlau4UqJDxdAhdZXu5R2hKWUO5KEsoe7tdW17ZFjdUfd7rDj+6NL03OcyyCwRubA6UZf9iKzY3FEMSpoSlQsJbm7sfmYIM5DDjQBpm+KUiod1z5AHCKBWjGdyENQUA6zoqeZloPSxEn1wPW7ujvvJjqyO4nedaGLoOvLZFytdVOIW3rLBqkA1lRnv6HOE8BkRUBJuJpwLkecC1mVNdqUIrPaG9SmUEqRZ0pvQ9vtegYn+SoDxdnIi6TMoL1arqoaGXz3tXWEeWW1/K57adudyI+coenZVW2Hu9q6ju9Xh/Ld9I//7SslfRKiHLhK9AvIbsOJO8jaZ/mmGp2Td9UeflAmRJ0/WXbBCN4xaf76M01qjOpRmlzO9pRrz2NDA9U4TqgOlGwIrs9DfatLsZfy0N/3ao2s9rpdbjZl1R7XdQwm4Q2phpYxBVxK9XqeFY9AjRrCOOuqqFkfRa7tTX6lWNKpQAJyOUutannG22AKXL0NYnkctuc+PBohZd0EbMUpW5TJd41i/OHTB4dY+UnzN/l5Kljyp10nsA7iyDzl00AQulArdU08vzMUuJCwRApcwQ7BTwGcCt401kWuuQg5TfNSwPt/Wkq5ehrCuCipiIdaZThU04qneF5B+MfpDUwl2PULjvz7E04n1QhgkO8+Tip8dRGHav7p4kCRX4O+I8rRR6LcZNd/Y35rOajT8Yz3/wE=</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:2B51564DB75034103EC420349481F9A8</con:value></con:property><con:property><con:name>expectErrTypeRightsTokenCreate</con:name><con:value>unauthorized</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:16E79A13B7B43722E05305991F0AEC63</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3118c0d4-b8db-4f7b-b50e-8c6c3466ed29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0575c3b8-5dbd-4ff6-b0e5-a56a59c3d656</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_009_DTCreate_Consuming_the_mergedeleted_assertion_for_RightsTokenCreate_API" searchProperties="true" id="75a32521-90bf-4a2d-bd79-59ce38a08e09"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="687f99ef-b41c-4ba8-9134-65784bdf9aaf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectErrTypeRightsTokenCreate", "SecTokenMergeReplacementRequired:1125");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="3a936a52-8662-4621-85cd-d3d2d8da9c6f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="7aa8696b-a828-4c03-a531-1fae1a3f0c2b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="bd4e7d71-dea1-4f2a-a6d3-616785ec1aaf"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="1b216142-4fdd-4d09-abac-1b5bef60b1a1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="76da5cb6-1421-4b14-b825-1a88e116908b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="4b6e9ce5-ad2c-4e29-80c0-e25cb4b0b4e3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="13d05644-601c-4447-afae-a8ef6c3b1f88">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="c6f32c8c-86d7-4682-8248-aef0b1b0f4f1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set AssertionUUID status to 'mergedeleted'" id="b275e9f8-4299-4b82-b379-7a99a0b679a7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try  {
	dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
	assert 1 == 2;
}
finally {
	assert dbUtils.samlSetStatus(tC.getPropertyValue("assertionUUID").toString(),
		"mergedeleted") == 1;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="912d9b14-e887-419b-9d41-afe86f1a9a3a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>1822F318F8E3677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>1822F318F8DB677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433910188946@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1822F318F8D9677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1822F318F8D9677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>1822F318F8DA677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:1822F318F8DA677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433910190422</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_d2bedb78-beac-4af9-bdbf-7b447c05470e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc9o6EP0rjPt4x/gDYxtPYIbykXBD0hRI2/TljiyvQY0tgSUDya+vZMDFhORy75NH69XZo93V0V5xlCZ20OUcMkEYrW3ThPKgsLa1PKMBQ5zwgKIUeCBwMO3ejQO7bgbosEWrjfpt7Z/IDiEKPV8PAWHdQXFLD6Mw1r3QcTxsNh3PBOnKeQ4jygWioq3ZptXUTVe3zJnpBLYZWH7dbfk/tdo3yLjEli51U9uT2vK2thBiGRjGZrOpbxp1ls0N2zQt48fdeIoXkCKtc7U7UREo6+z9cT0CDEmC65ilxpVR8bmKeDAlc4pEnsE+VvReLNMwW4b0iTiZf9LKvRCNaMyKZQ9RRglGCXlFKj93IBYsqnWTOcuIWKTvHsIyFbAOW6xjy6GfNKNK7UKgCsOMI50vkLXHmkAMGVAMtcfJqK19uqxqxdZZhiiPWZby6vK/8QG6hoQtIdL54Vh7apcDnslU5wpwMKI4yTlZw71q1iXCwPfVBHw5VO0hg5hsx4TLBt1yxc44pney3GWjT+bAxf8p0FFxdiDfUJJDZ3w93kz6s/vw5vmbj783H+5/Ok+v7mCQPrYLAsfOhaEs7W550pRlE+12dJ34dv51OzRX6yy7nrlL0uTXeDu6Hzw2Hh9ult1wdff9r8fP8cNs/czdH7ckEy80GvaY1ffG9ublafCFfScrd3WNp09zi/a/us2nzLVvhmSbsg3Z3DB2Gz30MIFXZxpvHxfkRxT+vV60wJy0xM1rtv41v8Xd+1GTotdW+HxNHdsfOzz2R09PXdMdfe2mz/FmOW+XxzniX7Ud7vw0D38BFoelaoNRvzaUVULiYzFTFhLpceEaLJX4cAFUaB21S2lHkEu5I1Ega7hbW75tDxuWP/T7XdfzhgOz2WgMWi1raHYbfu/zQWR2LE4o9hiNiYqlJHfXNh8TxGnAgUaQ6WuWS6Xj2geIfSRQbUQn8hIwymHG2poHVuRaka3HrhfpjtsMdd8xsQ6hixt2FLcarVCr3TPxhX7JurGArKrOXkWdJ4DJkoCScNXhXLY4FzIrK7TORWLV16hOIZcinym9DWzHbxqcpMsEFGcjZVGeQH25WBY5Mvjua+sI88Jqeb4zsG235/UafbNpF7nt73LrNDyvuJTvHv/03yFT0iciyoGrg34GWW048waZh1O+yYZ79q06wHfziKj7J9MuMoJ3TKq//nSTaqOylSaD2YFy6XlqqKAapwcqA0Vrgsv7UL7qUuylPHQOtVohq76q5+t1XpTHcRpGJuENqYaWMQWcS/V6mbFnoEYJYVz0VJSsTyKX9iq/XCzoVCABqeylWrG8YDaYAlezwUheh+2lg0clpMybgK04Z+slcq5RjD8cfXCAlZ80P8jPhmXRn3KdwTqKI88pRwNB6Fyt1DPx8k5TYCZhiRQ4lh2DnwM4F7xqLJNcchGym8JcwPt/akq52hrCmOVUjPpaYThW04KneFlC8MfpDUwh2OUER/59hNNJ0QJYTovSv8BXD3Gg+p/OjxR5H/QdUW59JMpVdp035reWozyd9njnNw==</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:EAE7B7D46BA71E2FE0401F0A079922CD</con:value></con:property><con:property><con:name>expectErrTypeRightsTokenCreate</con:name><con:value>SecTokenMergeReplacementRequired:1125</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:16E79A13B7B43722E05305991F0AEC63</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3118c0d4-b8db-4f7b-b50e-8c6c3466ed29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_010_DTCreate_Consuming_the_expired_assertion_for_RightsTokenCreate_API" searchProperties="true" id="3614242a-47a5-4ec3-9664-bb9aa6b2b19d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="06017d2b-1856-4d3f-bd58-ce1740bccb8a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectErrTypeRightsTokenCreate", "unauthorized");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="f8230dc7-3b27-4c9d-bb93-bad23b7082d1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="e5bfee47-96b1-47fe-a663-ab3ade01b399"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="d691ed5a-df0a-43e1-a752-f6f4bbcd7b95"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="08adb5d3-ccca-4c9a-82ad-12bf4b206050">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="b6aa37d8-fd47-4a5e-a1d7-5ec2981fb275">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="74c4cd1e-3d70-41b8-b955-b51e4618db03">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="e45b35c3-cf72-4765-b76f-361f35a7b55b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="fbfa91b4-8188-4299-92cd-abb4e797e8f7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set AssertionUUID status as Expired" id="90ca1efe-d927-44ae-9901-8283a30b507d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try  {
	dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
	assert 1 == 2;
}
finally {
	assert dbUtils.samlSetExpire(tC.getPropertyValue("assertionUUID").toString(),-13,"months") == 1;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="3a5cbc78-2298-4db1-bb15-b264119ef6f2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1822F318F930677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1822F318F928677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433910247048@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1822F318F926677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1822F318F926677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>1822F318F927677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:1822F318F927677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433910248535</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_82c1809a-c59c-42fe-9ae5-0422ff1c7c33</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+I6EP0rKPtYhXySQFSQApSSLbQroKjdlyvjDMTd4LCxw0d//doBsoTSXu59ijwZnzmeGR/PLUPL2PR8xiDlJKGV7TKmzMutTSVLqZcgRphH0RKYx7E39ocDz6zqHjpuUSpBt6n8UzexUdcbSMW1BlZtcw5qA0FN1W3TnM8N7GLLEq6MZRBQxhHlTcXUDeHgqIY+0W3PNDzDqTYa1k+lMoWUCWzhUtWVA6ktayoR5ytP0zabTXVjVZN0oZm6bmgvw8EYR7BESut2f6I8UNo6+ONqCBjiGFdxstRutZLPbci8MVlQxLMUDrHCz2Lpmt7QhE/IyOKbUuyFMKDzJF92EE0owSgm70jmZwg8SsKKHy+SlPBo+ekhDF0Cq7DFKjZs+k3RytSuBCoxTBlSWYSMA9YI5pACxVB5HgVN5dt1Vcu3TlJE2TxJl6y8/G98gK4hTlYQqux4rAO16wEvZKp1C9gLKI4zRtbwKJt1hTCwQzUBXw9V+ZHCnGwHhIkG3TLJTjuld7bcZ6NLFsD4/ynQSXH2IFMUZ9Dyd85LlPgse204aBIa3cX47mHaDaPpczMncOqcG4rS7pdnTVk00X5HW/8VLobfkT3bTW7iJz/uDe6tn5FN/WzQ72GjQ97idje4GaBdNNBpULu5+fGq7azsQQ/fnbnRD1/aYL1E/vIRP77Y/XEbP0X90a/ONhxvnqev9+Ysce3H+/u4v+kNA/8t6L/cDTL3HQ++sy4PHSdg4K+eQsMmj1Pa06yn9/v2eDDrJr1h+3n44Lg30+Wb3x+9NovjnPAv2453fpzN3gDz41K2QdCt9ESVEP9azKSFhOo8d/VWUnwYB8qVltwltcPLhNyR0BM13K+Numn2LKPea5iu47q9O71mWXeNhtHTfaveaR9FZs/ijGInoXMiY0nJ3bfN1wTx0mNAQ0jVdZIJpWPKF4hdxFEloCNxCRLKYJI0ldrMcHF9NldtF4Fqz8yZiuqOroZ1B7v1Wc1xwVQqjwl/ok+pP+eQltXZLanzCDBZEZASLjuciRZnXGTlN1pnPDaqa1SlkAmRT6XeeqZdr2mMLFcxSM7aMgmzGKqraJXnSGP7r6kizHKr4dbtO9N0Om7H6uo1M89td59b23Ld/FJ+evzzf8dMCZ+QSAcmD9oGUW248Abpx1N+yIZz8a06wvtZSOT9E2nnKcF7JuVff7tJtlHRSqO7yZFy4XluKKFq5wcqAoVrgov7ULzqQuyFPLSOtfqNjOrvarZeZ3l5bNvSUgGvCTU0tDHgTKjXbpL8AqoVENpVT0XB+ixyYS/zy3hExxxxWIpequTLK2aDMTA5GwTiOmyvHTxKIUXeOGz5JVsnFnONZPzl6IM9LP2E+Yf4bJI0/FuuC1gnccQ5xWjACV3IlXwmdp80BU4ELBECl6Sn4JcALgUvG4skF1y46KZZxuHzPxWpXE0FYZxklAddJTecqmnOk+9W4P11+gCTC3YxwZF/H+FUkrcABjH3MZLjy4fYk/1PFyeKfAj6iSg7X4lymV3rg/mj5SRP5z3e+gM=</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:EAE7B7D46BA71E2FE0401F0A079922CD</con:value></con:property><con:property><con:name>expectErrTypeRightsTokenCreate</con:name><con:value>unauthorized</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:16E79A13B7B43722E05305991F0AEC63</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3118c0d4-b8db-4f7b-b50e-8c6c3466ed29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_011_DTCreate_with_ULC_at_Org_level_Requesting_with_previously_requested_node" searchProperties="true" id="3edef873-4d98-45b3-a206-a02033906b55"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="93327cca-e22a-483c-957e-c2b3c5f9ec4a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="51846856-1b1a-4788-886d-5db8d1ec0654"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="56060d2b-d002-4480-8bd4-5338136706b8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="8fffcba2-a9fd-45d8-a70c-ec01d9a6e4bf"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="c2001c6d-e8a6-4e46-8909-bdd1fbc22219">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="f0eb8998-b585-4452-8d6d-1cf032b4f299">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUIDFirstUser", tC.getPropertyValue("assertionUUID"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="2f9cb602-9bd4-462d-a44d-55873b983eed">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy Create at Org Level" id="bf6948c6-b197-46c4-92c0-39f75eb80537">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULCatOrg")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="019a37fe-9662-4614-b716-fad09ba15f89">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="0d19b154-c9a3-4d51-a74c-1ea649ff4bd1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="42df4e88-19e9-4539-8b6b-c8b32ef08529"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

 
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenCreate API")


myTC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue('NODE_ACCOUNT_ID_FULL'));
myTC.setPropertyValue("assertionUserIdFULL",tC.getPropertyValue('NODE_USER_ID_FULL'));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>ACCOUNT_OID</con:name><con:value>1822F318F975677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_67d171d7-7429-4239-8eeb-34b289612c58</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_2483953b-5d4b-42de-a3f9-d75eba77fc3e</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1822F318F973677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1822F318F973677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>1822F318F974677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:1822F318F974677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:EAE7B7D46BA71E2FE0401F0A079922CD</con:value></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433910305067@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+o6EP4rTP3olL5CS0eYQQpHHFCPcET8ciekC0RLWpoU0F9/kgKVInq591Mn282zT3Y3T/aKoUVoek3GIOEkoqXNIqTMy6x1JU2oFyFGmEfRApjHsTdo9nueWdY9tN+ilLp+Xfmn6gSGYwSO6thmTbVNq6a6ABPVsiemW6saJq64wpWxFLqUcUR5XTF1o6LqVdXQh7rtmaZnVMuu7b4opSdImMAWLmVd2ZHasLoy5zz2NG29XpfXVjlKZpqp64b23O8N8BwWSGlcbU+UBUoaO39cDgBDGOIyjhbalVbwuQqYNyAziniawC5W8F0sXdNrmvAJGJldKPleCLp0GmXLFqIRJRiF5APJ/PSBz6Og1AxnUUL4fPHtIQxdAquwwSo2bHqhaEVqZwIVGCYMqWyOjB3WI0whAYqh9OexW1cuzqtatnWYIMqmUbJgxeV/4wN0BWEUQ6Cy/bF21M4HPJGpxhVgr0txmDKygjvZrDHCwHbVBHw+VOkhgSnZ9AgTDbphkp12SO9ouc2GT2bA+P8p0EFxtiBPKEyhEd2Tl+V4cWf50dP4Q/c1fVi90Z8urZlbzwgcOmeGvLTb5VFT5k203dFrRfFkTR4++MPDh+88Xyb30Jtco4+XeD7XWNh6pfB692yTcUyqy5k/7Y07KxLc3I7v2I0fvFc7m0qvrw9odU5+PXTTe3fcAtrsxC/PnY/lHfB2ett+qUCbjNwRzPhLzdpQDr+dyxZNeulzp91z7OF8ubld9x77hp1qm7cR/m0+uX+YW/nlN0d6moxg1Nff6vlxDvgXbfs7P0gnr4D5finboOuXOqJKiP8sZtJCAnWauXqxFB/GgXKlIXdJ7fBSIXck8EQNt2vDNc2OZbidmmNXHafT1iuW1a7VjI7etNzW9V5ktiyOKLYiOiUylpTcbdv8TBAvPAY0gERdRalQOqb8gOgjjkpd+iguQUQZDKO6MnUM13aCimoaurjnk4muTmquo1ZrhjOdWsbEqUyU0l3E7+l90pxySIrq7BTU+REwiQlICZcdzkSLMy6yskSrlIdGeYXKFFIh8onUW8+03YrGyCIOQXLWFlGQhlCO53GWI41tv6aKMMushuPabdOstpyW5esVM8utv82tbTlOdim/Pf7xv32mhE9ApAOTB70GUW048Qbp+1N+yUb15Fu1h2+mAZH3T6SdJwRvmRR/fXaTbKO8lR7bwz3l3PPYUEDVjg+UBwpWBOf3IX/VhdgLeWjsa7VERnlZTlerNCuPbVtaIuA1oYaGNgCcCvV6H0ZvQLUcQjvrqchZH0XO7UV+KZ/TAUccFqKXStnyjNlgAEzOBl1xHTbnDh6FkCJvHDb8lK0VirlGMv5x9MEeln7C/CA+6ygJPst1AusgjjinGA04oTO5ks/E+zdNgSMBS4TARckh+CmAU8GLxjzJORcuummScvj+T0kqV11BGEcp5V1fyQyHaprx5O8xeJ9OX2Aywc4nOPLvI5xKshbAIOY+RjJ8+RB7sv/p7ECRd0G/EWXrJ1Eusmt8MX+1HOTpuMcbfwE=</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433910306537</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value>1822F318F97D677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>16E6BDF713FC47D4E05307991F0A5CD6</con:value></con:property><con:property><con:name>rightstokenFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:16E6BDF713FC47D4E05307991F0A5CD6</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8fffcba2-a9fd-45d8-a70c-ec01d9a6e4bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_012_DTCreate_with_ULC_at_Org_level_Requesting_with_other_node_of_same_Org" searchProperties="true" id="b6198751-1baf-4623-880d-929bcda16662"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="fb62bde4-1a4f-4060-885f-9b8802e1ab10"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveLLASP"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="66f0fa1d-d2cf-4f57-b9b4-a422593cb78b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="420eb6ac-aa5d-4a24-b778-947a99a0cea0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="d1e3266c-f0cc-4b45-9604-e650cb3b4aba"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="3c1b4cd5-ec86-4d00-a24a-c984ec19a3f5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="608719b0-a4dc-45b4-8b3d-571725346770">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUIDFirstUser", tC.getPropertyValue("assertionUUID"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="306eb800-1e57-42bd-b5ee-99e05a2551f0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy Create at Org Level" id="3a7097e0-08bc-40d0-9478-73a32980355e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULCatOrg")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set NODE_ID of Different Node" id="28a13dfa-4cb4-4b0b-a8b6-3523dddd1a65"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTLCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="9c15d50f-7fb6-4cc0-882a-6a0c9135f4f2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="42ff0c35-b92d-41b2-90a8-98c7459598e2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="99d61345-940f-4bc7-b95d-0b49cc555054"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenCreate API")

myTC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue('NODE_ACCOUNT_ID_FULL'));
myTC.setPropertyValue("assertionUserIdFULL",tC.getPropertyValue('NODE_USER_ID_FULL'));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1822F318FA73677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1822F318FA6B677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433910362854@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>87648</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1822F318FA69677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1822F318FA69677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>1822F318FA6A677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:1822F318FA6A677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433910364268</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_de9f9256-a089-40d8-9376-e0949395ebc6</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZXzlYlegigSYOEMuE7IkmZctIbdBiS07lmxMvn4lAx5MQpbdJ5fare7T3UdHOmMoCk13wBiknMS0UUQhZW5p7SlZSt0YMcJciiJgLsfudHA9cc2m7qLdFqXhDXvK3z44gWO22irSu45q635XdaxOWwXdsR3LacEct4UrYxl4lHFEeU8xdaOl6m3V0B902zUtVzebtm3/VhozSJmILVyaurIFVbCesuQ8cTVttVo1V1YzTheaqeuG9nQ9meIlREjpn20qKhOl/a0/bvqAIQxxE8eRdqbVfM585k7JgiKepbDN5R/LpWu6owkfn5HFN6XaC75Hg7hcXiAaU4JRSN6R7M818GXsNwbhIk4JX0ZHizB0GViFAqvYsOk3RatDOzFQDWHKkMqWyNjGuocAUqAYGn/dez3l22lTK7c+pIiyIE4jVl/+NzxAcwjjBHyV7craQjs94Ced6p8Bdj2Kw4yRHG4kWROEgW2nCfj0UI27FAJSTAgTBC2YRKftwztYbroxJAtg/P8MaG84myAzFGbQH01/vdPJlfWWzWfjaTq8/rkIvl+Zq2X43CsB7DuXhmq0m+UBKSsSbXYk7WcUPHUza5GszWJ5ObmgvjF99LLoN550PbNop4/Dx4fuj7x4esz1VTQZt38P22m0bt38+jGfjHPfsJ6Mn8/e22UrD2y+npPv78XMuHU86/XunE8snHVnrTvMzs0xsy/10cs6DC6dAiet5ftL0Rq9aEPrfH5t2k9XPzrPne+JHQ2uPJQP28Hd28WzP5uNr0avN9e9qpw9/HXb7sxPs/kLYL5bShp4w8ZYTAnxr8VMWoivBqWrm0jxYRwoV/pyl9QONxNyR3xXzHCzNrqmObaM7njQHrQ7nfFIb1nWyHGMsT6wuhfnO5HZoDiAeBHTgMhcUnI3tPkaII5cBtSHVM3jTCgdU76IOEQcNTx6Lw5BTBk8xEKeDbx47a6tzjoOkijDGHesIrJeaUdp3MT8lt6mg4BDWtfkTk2T7wGThIAUbslrJojNuOjFG8ozHhrNHDUpZELaU6myrml3WxojURKCRKpFsZ+F0EyWSdkZjW2+poowK633o4fytB2t6/DfrgXCxyfSgclazkGMET5cLqbb2hVytGBD3y94F36Q+UQeLNFPnhK8QVL/9Ycmkh8VR0RFO8iV56GhFlU7LKhK5OcEV0Svrmuh4uLc93fjeENG862Z5XlWTsC2LS0V4TUhc4Y2BZwJWVo/xK9AtSqEdtIdUKE+yFzZ6/gyvqRTjjhEgi6NcnnCpT8FJi99T/C8OPVFUUsp+sah4J/ZLkLxYJGIv3zTYBdLP2G+E59VnPp/xvVJrL08ok5x53NCF3Il9X99hBQ4FmGJUK443Q/+WYDPkteNVZMrLFywaZ5xOP6nISWppyCM44xyb6iUhn2ZLHHydQLuH6cPYUolrp5m5N/fZiopKYBBPOgYKePLG9aV/KeLPandJj2its5XaltH1/9g/mjZ69Mhx/v/AA==</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:EAE7B7D46BA71E2FE0401F0A079922CD</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_de9f9256-a089-40d8-9376-e0949395ebc6</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>16E6F7E7549E7078E05305991F0A2354</con:value></con:property><con:property><con:name>rightstokenFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:16E6F7E7549E7078E05305991F0A2354</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8fffcba2-a9fd-45d8-a70c-ec01d9a6e4bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_013_DTCreate_with_ULC_at_Org_level_Requesting_with_node_of_different_Org_FLAKY" searchProperties="true" id="651e779f-8706-46ec-8a64-77654f4c8318" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="63a6a21b-00f7-4fce-9cce-1a34b2dac107"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveDECE:CS"));
tC.setPropertyValue("actionSkipPolicyCheck","true");</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="24ef0292-17e8-4d45-9d1b-33a36d3017ba"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="a8a9b424-8474-47aa-b37b-175fc303d15a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="7d811718-fd89-4ca6-b52f-3f93755ce3dd"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="941aba36-33a2-40e9-b71a-7767511a2762">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="a01f9f88-3e6a-41c8-8d44-3fbd0a8970c7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUIDFirstUser", tC.getPropertyValue("assertionUUID"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="8f1e85de-160f-4e5a-81d9-f8b83b6330ee">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create at Org Level" id="bcab8242-121b-41bd-80ee-1eaffa9e8762">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULCatOrg")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set NODE_ID of Different Org Node" id="4be76d40-98af-4e71-a426-b3a4be12556a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
//nodeIdRTL2
tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL2"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="00120302-1c12-432e-acb5-8ad9bd74312b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="3fdff7ae-91a4-4bb4-b344-0f3ecde73df3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="cc59ef11-3525-4e06-9286-0a0bd30841f4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenCreate API")
myTC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue('NODE_ACCOUNT_ID_FULL'));
myTC.setPropertyValue("assertionUserIdFULL",tC.getPropertyValue('NODE_USER_ID_FULL'));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>16E76F297A452373E05307991F0AC960</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>16E79A13B6A63722E05305991F0AEC63</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1432555478751@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>24</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>16E79A13B6A53722E05305991F0AEC63</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:16E79A13B6C83722E05305991F0AEC63</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>16E76F297A442373E05307991F0AC960</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:16E79A13B6CA3722E05305991F0AEC63</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1432555482961</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_8177383a-1744-44a8-9b70-1c677a9a72c7</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMr6D7QpUeQhhyYRAMJOdycuUIjegrC0TSQaSrx/JgANMyLL75Op2q/v0RUd9yVGW2mHEOTBBclpbZynlYaltaQWjYY444SFFGfBQ4DCOBrehXTdDtDui1fpXLe2XbzWbju8g3Wq6ru66yNeDp6apW7jRbKIANW3clKacF9CnXCAqWpptWp5uerrtTSw7NN3Q8+oN23nUag/AuPQtTeqmtgW15i1tLsQiNIzValVfOfWczQzbNC3jx+A2xnPIkNa+3GRUBmLtrT2uJ4AhTXEd55lxaRzYXCY8jMmMIlEw2MZKTsUyDTMwpE3CyeyLVp2FpE+neSl2EM0pwSglb0jVZwBinie1KJ3ljIh5djIJy1SOdVhjHVsu/aIZh9DOdHSAkHGk8zmytr7GMAUGFEPt+7jf0r6c17Xy6IQhyqc5y/ih+N/wAF1Cmi8g0fkurS208x1+UKn2JeCwT3FacLKEOzWsC4SBb7sJ+HxXtRGDKVnfEi4HdM0VOmMf3pG4qcYVmQEX/6dBe83ZOHlAaQHtYMDhAv5eYtSIe0XvfvI4hOFiyIJZ1CoB7BuXiqq1G/FoKKsh2pwYvLlPvdXt46TzEC3pvbeAYcyeHeZ2IItHL+x2PfoR3bj0mizQ9Gm9akY3UeIESdy4N7owsGz2zWRj9h39cFb3XjoYxXj5c5wE3vyxd5E+29CLvhWjx9jHP8UkbRav/HVm3CXeX8XzkN0XNHvrcX9apNcP6UWvM+rcvdjjIEAXYtW/uVk5PYNk9DV+4NTyW1U6e/gPdbs7HxdPz4DFTlRj0L+qXcsuIfE5mSkNSfRpaRouFPlwAVRobXVKcUdYSLojSSh7uJGtRrcZRJbztdGJnKZtd03PMb0gsK7NqNtpODuS2aA4gtjJ6ZSoWIpyN2PzOUCchRxoAkxf5oVkOq594vEKCVTr07G8BDnlMMlbGoDfmJq+vN2NwNRdf5roT4689mbg+Z7t4KnnJVrtLhdDOmTRVAA7ZGfvgJ3HgMmCgKJwNeFcjjgXsiovaFmI1KovUZ1CIUmeKb4Nbdf3DE6yRQoKs5HlSZFCfTFflDUy+OZr6wjzUtvxA9e1v3Ztx7clYLdruqaqq6pvo+l55aU8mf7xv12lpE1ClAFXiX4F2W344A1yd1meroa/X42d+6hIiLp/suyCEbxBcvjrfZrUGFWjNO5Oftk70JXtseLAr3GcUhUqWRJc3YjqXZd0LwmivevWC7LqL/ViuSzKB5FJ14bkQsuIAReSu14n+T9Ajeq4cdZDUSE+ilrpD7EVYk5jgQRkcpJqpXjGZhADV5tBX16G9blrx0FIWTMBa/GRrpPKrUYh/nTxwSFWdlI9kp9VzpL3Vn3gay+OzFMuBoLQmZLUI/F6YiRwLt0SSW8523f+kYOPgh8qqyJXWIScpKdCwOk/NcVbLQ1hnBdU9K+0UrHPpSVO8bqA8N3oDzclXVf7G/n3BU4n5QhgkFsfJ6V/9QyHavbpbI+Pt0FPULL/GSUfomv/of5Ts1en4xlv/wY=</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:EAE7B7D46BA71E2FE0401F0A079922CD</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_3bc5daaa-faf4-44e9-ac28-0b9d061bfd04</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>16E79A13B7B43722E05305991F0AEC63</con:value></con:property><con:property><con:name>rightstokenFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:16E79A13B7B43722E05305991F0AEC63</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8fffcba2-a9fd-45d8-a70c-ec01d9a6e4bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_014_DTCreate_Forbidden_user_is_in_blocked:tou_and_request_with_ULC" searchProperties="true" id="cad0a6f5-e915-4398-a917-48c0a078809b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="69d00a75-85b8-4283-afe0-294630020a65"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "UserNotActive");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="d4e6286a-40df-40b9-82b8-88de047ffc11"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="c7fc85ab-e1c2-4978-8b9c-04489d6d424a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="930ea198-7342-4039-bf33-6642796da8ac">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433910384914@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>UserNotActive</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1822F318FB53677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1822F318FB53677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>1822F318FB54677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:1822F318FB54677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433910386392</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_4f20e56f-8efa-4a3a-a83c-ffa352ab1e78</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxGlj6vgOBBIooLEV1fZpbQFbru3L1euMwHTxKGxQ6G//jqhSYHS3u6VkJAn45kzM8fHPhckjiyvKwSkkiVc8wdt/Z9GaJlgN0PDgZAYDVInBnHq1AhDUrct8oCh5eiaL0QGPheScNnWLRPXDYzVb4ZtD5tew601bOde124hFSq0cqmZuraJIy68Im1bz1LuJUQw4XESg/Ak9abdy5GnPD1SYtI75zuURcK0s5By5SFEawFQiCJao0mMztGBz3kgvCmbcyKzFF5zBqKtv+59fn6uPddrSTpHlmmayHSR8gkEm5/pnW/lZgh8Hia7dZ/whDNKIvZCclCXIBdJoHWjeZIyuYg/CI0RNvPQBmyoQXGDn+noLUGB7ouRDkCmghhiQXAZbAIhpMApaH9N/LZ+9rUJ7vbOUsJFmKSxOFr/GSTga4iSFQSGKCsr0X094ol2dc6Bej6nUSbYGsY5TVaEgtCuUwjZZsSEIl8gtGL82kaUDAP6JyM5R/s4FWx0ojMDNgch/8+89me1i3JLogw6+BJ+/FzaUcCT+4v6vO83nNuVcNG25bQLCPvOO1DVqF/Xx0StePW66Wl9930YYHG1vXYnj1u0HFyO/aXb+rHqje566wW+W5Cb2fb+rvnyM+DrK2u8pDB/vPW/X4tll8Tb22FUH6IWGSP4dvM8CerUv/g1fhEv4xG9Gy0eyMvmYfKzO0noevm9Pqk7v/2YNscTgSIfx3iQXlxtZG8+M++y+8vp7XYSkBfW/zv7JmI3vZk17d9sHrrL+/tx87H9VtN+DYfGUg6m2cMSqCyXOTX8gXah5kXk59KSW1hghIWrt8r1SUjgUu/ku3JZ8TIlPizw1DB362F36PTs4dA1sd10TWtoNkx8YXZN23XtQb9b6s8OxRHEfsJDlufKFXbHn88B0tgTwANIjXWS0QUI/ZOIAyKJ5vOJOhgJFzBLlII3nb7TtHEdt0y34QysRs9uDWy31WrZPbfRUjo8TuQVv0q7oYT0UL2dA/WeAGUrBrnE5zwXiuhCqpY8kXUmI1xbkxqHTF0Caa7DntVwbCRYvIogB4ziJMgiqK0Wq6JBSOz+LYNQUVgnw1lx/j4s7/hb2QnlE7DcQeS19EBNE05cQ/WykA8LtvB+wWX4bhaw/JiptsqU0R2Sw09vbMlpUlFFVVRCrjyPDQdR0XFBVaJgzWjF9+qSVhqvVKBTjuOJ1J5q2XqdFQNo5QqXqvAII7OFpkAzJVPbWfIIHFUh0JduiAr1UebKfogvkws+lURCrOiiFcsvPA+mIPLnga/ovvnq2+MgpeqbhI08ZetH6hWRI/70oUE9mvsp87X6e07S4G1cJ2Lt5VF1qjeBZHyer/L7YPsBKWiiwjIlYEm6H/xUgFPJD41VkyssUrHpIZPw8RctV6a2TihNMi79gV4Y9tWywCm3K/DenN6FKRT59YrdiA+v2N+Xo6nSrZjolS/7b2eDFXShoHYJVmBp6xv1WlTJ+XxPnV8BHgm0i03TsU3XcazGgUBbDsZVAw8q6bwzv7fs9fT4PHT+BQ==</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:EAE7B7D46BA71E2FE0401F0A079922CD</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_4f20e56f-8efa-4a3a-a83c-ffa352ab1e78</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8fffcba2-a9fd-45d8-a70c-ec01d9a6e4bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_015_DTCreate_user_is_in_blocked:tou_and_request_without_ULC" searchProperties="true" id="24383488-5931-4493-aae2-917a36d09de3"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="235aa7bd-e075-4644-a6c5-9729bfd26810"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="75423a5a-5d9b-45b4-b939-dc102eb5e126"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="b4fa8034-3d24-4c29-8a2f-ae65c0797008"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="d8abbe2d-daf6-43de-8aa6-b9ef0c2e2849"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="6ccd75b5-f5a8-4ea6-8c13-d8cdb7b0a97c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="20d07c27-e688-4e13-831e-a4c57af9d2ae">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="a7adb2d0-f111-407b-b1c9-83cee961f1f6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>1822F318FB86677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>1822F318FB7E677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433910404256@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1822F318FB7C677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1822F318FB7C677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>1822F318FB7D677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:1822F318FB7D677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433910405728</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_4cbe5fdb-d093-47b0-97d4-5daeec4ee586</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynmcMr5j4wpUgQ2EJCQMZCaTedkSchs0a2RiyUDy9SsZ8GAmZNl9cqndOn3U3Trqa4aWiel3GIOMk5TWtsuEMr+wtpQ8o36KGGE+RUtgPsf+tDO698267qPDFqU2DFvKXzaegRNHMzXSm5ZquzNdbbqRrToRAsA2gOM1hCtjOQwp44jylmLqhqPqDdXQn3TbNy3f9uqe4fxUat8hYwJbuNR1ZU9qy1rKgvOVr2mbzaa+seppNtdMXTe0H6P7KV7AEint692JikBZe++P6xFgSBJcx+lSu9YqPtcR86dkThHPM9jHis7F0jW9qQmfiJH5lVLuhWhI47RYBoimlGCUkHck8zMCvkijWieZpxnhi+XZQxi6BFZhi1Vs2PRK0arULgSqMMwYUtkCGXusCcSQAcVQ+zYZtpSry6pWbH3KEGVxmi1Zdfnf+ABdQ5KuIFLZ4Vh7apcDfpCp9jVgf0hxkjOyhgfZrCuEge2rCfhyqNo4g5hs7wkTDbplkp12TO9kuctGSObA+P8p0FFxdiDfUZJDO7iPEdnehi/upPtrlOQv4WTjfL0dzxvDVkHg2LkwlKXdLU+asmyi3Q42o9bXd9xZ3w3YarH9EgcG7wBGq3vLopMxH3fjLtPSwQaPN9GX52A9eth4JFjoPcSH40HUNR7f5vx1TkZTN/vZn/YfNn3om3ffWPD+3Lmh4WjiNn/O7OEov/+xeR4/3T7fOYOB82IMlovJy2MabpxleGe5D6A5A/I4vllN3zqBfdugg28hNmjQ09Z30U3f7LXK4xzxr9oOd36az34B5oelbINhWOuLKiH+uZhJC4nUuHD1V1J8GAfKlbbcJbXDz4XckcgXNdytDc80+5bh9btu2HDdfk93LKvXbBp9vWN5QfcgMjsWJxSDlMZExpKSu2ubzwnipc+ARpCp6zQXSseUTxBDxFFtSCfiEqSUwVPaUhwUx2bDcVXPsj3Vns0cddY0THXmeJ6DLE93kK3UHlL+SB+zTswhq6qzW1HnCWCyIiAlXHY4Ey3OuMjKK1rnPDHqa1SnkAuRz6Te+qbtORojy1UCkrO2TKM8gfpqsSpypLHd11QRZoXVcD27Z5qNwA2sUHfMIrfhLre25brFpTx7/NN/h0wJn4hIByYP2gVRbfjgDbIOpzybDUM/zsYBvpNHRN4/kXaeEbxjUv31u5tkG5WtNOk9HSiXnqeGCqp2eqAyULQmuLwP5asuxF7IQ/tQq1dk1F/r+XqdF+WxbUvLBLwm1NDQpoBzoV5vT+nfQLUSQrvoqShZn0Qu7VV+OV/QKUcclqKXasXygtlgCkzOBkNxHbaXDh6VkCJvHLb8I1uQiLlGMv509ME+ln7CPBafTZpFv8v1AdZRHHFOMRpwQudyJZ+JtzNNgVMBS4TApdkx+EcAHwWvGsskl1y46KZZzuH8n5pUrpaCME5zyoehUhiO1bTgyd9W4P92+gOmEOxygiP/PsKppGgBDGLuY6TAlw+xL/ufzo8UeR/0jCgHn4lylV37D/OflqM8nfZ4+x8=</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:EAE7B7D46BA71E2FE0401F0A079922CD</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_4f20e56f-8efa-4a3a-a83c-ffa352ab1e78</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8fffcba2-a9fd-45d8-a70c-ec01d9a6e4bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a7adb2d0-f111-407b-b1c9-83cee961f1f6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_016_DTCreate_active_user_with_ULC_and_MUC" searchProperties="true" id="7a73c4fc-573d-4706-8405-e51a28bf4695"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1a553b78-bd8b-452e-a3fa-0d7ed65865f9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent,urn:dece:type:policy:ManageUserConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="6fe9f26d-3715-4023-bb4a-9b231208cea9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="3448e8bc-64a0-49dc-b08f-47bee16308ef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="a885e348-3fd0-414c-8ff7-2f38e1c629d5"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="7ed701f6-8513-4e30-93b5-90fb844bd65e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="6f3b9c1c-d258-4421-aa0b-76cbdae3ede8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="8511b97c-4968-4d4c-8a05-6680142d95f1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="b6681b4a-00f6-4024-a35b-e21fe9300c66">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="a8f562dd-9a79-490d-aff4-f9a0dba9bbbb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy GET" id="b577c345-c1ab-4d84-ac85-081f81bcd7b8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUC Policy GET" id="e084633f-adb9-4422-a778-c1da233297c2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("POLICY_CLASS","ManageUserConsent");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Checking status of MUC" id="766aabcf-4dad-4d08-bf49-bda3114656d6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

assert tC.getPropertyValue("status")=="HTTP/1.1 404 Not Found"
</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>1822F318FBDE677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>1822F318FBD6677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433910455035@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent,urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1822F318FBD4677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1822F318FBD4677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>1822F318FBD5677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:1822F318FBD5677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433910456516</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_a209e5d6-8273-4bd4-bdf4-86c8d6589d6b</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZXzBGNsVqOI+bAKTgiSTzcuWkBujjS2BJQPJ169kwIMJybL75FK7dfqou3XUNxwlsR20OYdUEEYruySmPMitTS1LacAQJzygKAEeCBzM2uO7wK6aATpu0SqjXlP7C9mmD/XQ1T27UdOdeejo83Dh6J6LvdCte37ozqUr5xmMKBeIiqZmm1ZdN13dMh9MJ7CdwHGqdct+0SpPkHKJLV2qpnYgteNNbSnEKjCM7XZb3daqLI0M2zQt43l8N8NLSJDWutmfKA+Utg7+uBoChjjGVcwS48Yo+dyEPJiRiCKRpXCIFX4WyzRM35A+ISfRN63YC+GILli+7CLKKMEoJu9I5WcMYsnCSjuOWErEMvn0EJapgHXYYR1bDv2mGWVqVwKVGKYc6XyJrAPWFBaQAsVQeZyOmtq366qWb31IEeULlia8vPxvfIBuIGYrCHV+PNaB2vWAFzLVugEcjCiOM042MFHNukIY+KGagK+HqtynsCC7O8Jlg+64Ymec0jtb7rPRIxFw8X8KdFKcPcgTijNo/dEZ13vt8Wi++KPuDe/efzxyI5oOf7oMN3MCp865oSjtfnnWlEUT7Xd0Xlnv9fZ9/Gv6fNtf3scoydhm3Vm+WuL9ZTdxM3cZNZ58skT910GWTbb379Eu7KbDTeMVCdSZ3y7Q7iW9ZZNH0neeltnLoP+0HiSLzq8JFjiKbuvtDqyzl8nt4s1cvv8wvv9AxEvtu4fhfL0ij427Ph/TeHjvPye+i1iHiOH37fN2Oo5//TlcJ77Tmc2iTcqcZnGcE/5l2/HOz7L534DFcanaYNSrDGSVkPhazJSFhPoidw1WSny4ACq0ltqltCPIpNyRMJA13K8tz7YHNcsbdHp1t9EY9M16rdb3fWtgtmtet3MUmT2LM4pdRhdExVKSu2+brwniJOBAQ0j1Dcuk0nHtC8SeLFFlRKfyEjDK4YE1NR9jH/luqFvIsXXHsUFH4Hj63HYBexDW6w1fq0yY+El/pu2FgLSszo2SOk8BkxUBJeGqw7lscS5kVtZok4nYqm5QlUImRT5Veiu3enWDk2QVg+JsJCzMYqiulqs8Rwbff20dYZ5brYbn9G3b7Ta6tZ5Zt/Pc9va5dWqNRn4pPz3++b9jpqRPSJQDVwftgKw2XHiDasdTfsiGe/GtOsK3s5Co+yfTLlKC90zKv353k2qjopWm/Ycj5cLz3FBCNc4PVAQKNwQX96F41aXYS3loHWu1RlZ1Xc02mywvj+PUjFTCG1INLWMGOJPq9fbAXoEaBYRx1VNRsD6LXNjL/DKxpDOBBCSylyr58orZYAZczQYjeR121w4epZAybwJ24pKtG8u5RjH+cvTBAVZ+0nwvP1uWhr/LdQHrJI48pxwNBKGRWqln4u2TpsBMwhIpcCw9Bb8EcCl42VgkueAiZDfNMwGf/6ko5WpqCGOWUTHqabnhVE1znuJtBcFvpw8wuWAXExz59xFOJ3kLYJBzHyc5vnqIA9X/NDpR5EPQT0TZ+UqUy+xaH8wfLSd5Ou/x1j8=</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:0978A3E57DED637EE05305991F0A15D8</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_017_DTCreate_active_user_with_MUC" searchProperties="true" id="b819473d-53be-4da1-92cb-470517d44028"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f1fd8801-64be-48d0-a2c2-9df4d5223113"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:ManageUserConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="b976634c-0083-4554-87ed-2de78b2c508e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="e0aca5ae-2281-4c5d-8da2-234764a6882d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="0d91ba55-1fb3-42cc-8594-a48be77ab512"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="e35c75dd-d0b3-4f88-9589-027b186aa0e9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="85970f1e-cd2c-4dcf-8551-9523a3710f34">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="e4f8793e-1d3a-4523-82e5-cb565247c912">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="0c0ab0a7-067f-4653-9697-60df2cdcd152">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="ed4c8323-4aa2-445d-b6aa-46d70ef6f238">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy GET" id="12dfa7d5-23a8-4590-83c2-f3f4ba251145"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("POLICY_CLASS","ManageUserConsent");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")


myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Checking status of MUC" id="2bbe7bc8-a58f-4022-8b1d-03a1bc572c65"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

assert tC.getPropertyValue("status")=="HTTP/1.1 404 Not Found"
</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">18230D4673CCE984E0533E991F0A5883</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">18230D4673C4E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433910509761@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>18230D4673C2E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:18230D4673C2E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>18230D4673C3E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:18230D4673C3E984E0533E991F0A5883</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433910511181</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_40508287-1ad7-4123-a18e-153628881c81</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynlMGV/BxhWoIlxmvOTOJVRetoTcGGVsmVgyl3z9SgY8mAlZdp9A7dbpo+7WUd8wFEem12YMUk4SWtnEEWVebm0qWUq9BDHCPIpiYB7H3rB9f+eZVd1Dhy1Kxe82lb9tvaa7puuoBgoc1TZMS0WGC6pRs+qm67oGdg3hylgGPmUcUd5UTN2oqXpdNfSRbntmzbMaVcO235TKBFImsIVLVVf2pDasqSw4X3qatl6vq2urmqShZuq6oU3v74Z4ATFSWje7E+WB0tbeH1cDwBBFuIqTWLvRSj43AfOGJKSIZynsYwXnYuma3tCET8BIeKUUeyHw6TzJlx1EE0owisgnkvm5B75Igko7CpOU8EV89hCGLoFV2GAVGza9UrQytQuBSgxThlS2QMYe6wXmkALFUBm/+E3l6rKq5VtHKaJsnqQxKy//Gx+gK4iSJQQqOxxrT+1ywC8y1boB7PkURxkjK3iQzbpEGNi+moAvh6o8pTAnmzvCRINumGSnHdM7We6y0SUhMP5/CnRUnB3IBEUZtMzJR6M+Dhdv4durnbynvdXqr9i9f3UaYTMncOycG4rS7pYnTVk00W5HhAerSfftOpj2owY8jc3RqN0NPwe9wWB9/7i2p4N+9pE5btp7bGwy/8fgSXvOfmrbTyu77vv9z/CjgbYr0Hp3hm/fOq93M4OTZdLXa/A8nsL4uq33B1trspkyY2K8u5P3OEL6w5SxDVvcOr+ex9tfhL36qJaOZ252/fjoY5rW60/Dn88NC93rPz6n7WQcdgZuszjOEf+y7XDnh9nsHTA/LGUb+N1KX1QJ8e/FTFpIoM5zV28pxYdxoFxpyV1SO7xMyB0JPFHD3dpwTUvv2nXH6li9hmv39Jol/jSMvt6uua51EJkdixOKnYTOiYwlJXfXNt8TxLHHgAaQqqskE0rHlG8Qu4ijik9fxCVIKINR0lSQOTdhZoHqzixXtXUHqQg7DbVm6uJTfdaYuzOl8pDwR/qYtucc0rI6OyV1fgFMlgSkhMsOZ6LFGRdZ+UCrjEdGdYWqFDIh8qnUW8+03ZrGSLyMQHLW4iTIIqguF8s8Rxrb/ZqCEsuthiPyaZr1jtOxunrNzHPb3eXWthwnv5Rnj3/67ZAp4RMQ6cDkQW9BVBu+eIPMwynPZsPQj7NxgG9nAZH3T6SdpwTvmJQ//e4m2UZFK730RgfKheepoYSqnR6oCBSsCC7uQ/GqC7EX8tA61OoDGdWParZaZXl5bNvSUgGvCTU0tCHgTKjXdpT8AqoVENpFT0XB+iRyYS/zy/iCDjniEItequTLC2aDITA5G/jiOmwuHTxKIUXeOGz4V7ZOJOYayfjb0Qd7WPoJ85P4WSdp8LtcX2AdxRHnFKMBJzSUK/lMbM80BU4ELBECl6TH4F8BfBW8bCySXHDhoptmGYfzXypSuYRyYJxklPtdJTccq2nOk2+X4P12+gMmF+xigiP/PsKpJG8BDGLuYyTHlw+xJ/ufhkeKvA96RpTN70S5zK71h/lPy1GeTnu89Q8=</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>ManageUserConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:0978A3E57DED637EE05305991F0A15D8</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_018_DTCreate_Forbidden_user_is_basic_and_issuer_is_lasp:linked" searchProperties="true" id="f3b58a3c-3aa0-4076-95c2-d12c1296e57b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ef446309-52e4-4541-9c3e-a7f244a995a0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "LinkedLaspBindingAccessPermissionDenied");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="88713cb6-96d9-426f-a545-32dc74581556"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="11a4df83-6129-4000-9080-07400b0694af"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="77fb0b90-9ece-45d4-a8ce-94d9d515852f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="e61244e9-54a9-4561-bae4-c2100ffe453c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUIDFirstUser", tC.getPropertyValue("assertionUUID"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="ad8377ff-7573-4fae-91f2-b54729e30346">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="1b845940-7717-43ee-a6df-6ea55969c3df">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set EmailId for Basic User" id="955396bd-7779-4ffa-8776-df30d5c225e9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Basic User Create" id="12d64ecb-3c63-4cde-b047-20cd5031a664"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("BasicUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set NODE_ID as LLASP" id="20a6ebce-6e17-4797-a386-1bf13dc520b9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdLLASP"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="5443fd87-2bf1-4bc2-a77d-89e36737d471">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ID</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433910574731@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>LinkedLaspBindingAccessPermissionDenied</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>18230D4674A4E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:18230D4674A4E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>18230D4674E6E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:18230D4674E6E984E0533E991F0A5883</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433910574796</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_7a0e1fcc-fbb2-4fdd-b54d-cf419855bb6f</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0Vynmc8hVzcwWqCJAZEkISIGzIy5aQ26DElh1L5vb1KxlwMIEsu08utVvdp7uPjnTNUOBbTpMxiDkJaWEV+JQ5qbWuJDF1QsQIcygKgDkcO8PmQ8+xNMNB+y1KoduuK39XkAGmh7HqTaeWanuuq05LtqtizzZr1VJpOi17wpWxBLqUcUR5XbEMs6QaZdU0RobtWGXHrGmmZb0phTHETMQWLpqh7ECtWF2Zcx45ur5cLrVlUQvjmW4Zhqm/PvSGeA4BUhrX24rSRHFj5481FzD4PtZwGOjXes7n2mXOkMwo4kkMu1zuuVyGbtR04eMyMrtSsr3gdqkXpssWoiElGPlkg2R/HoDPQ7fQ9GdhTPg8OFuEacjAKqywik2bXil6HtqFgXIIY4ZUNkfmLtYAPIiBYii8DLp15eqyqaVbRzGizAvjgOWX/w0P0AX4YQSuyvZl7aBdHvBEpxrXgJ0uxX7CyAL6kqwRwsB20wR8eajCUwweWfUIEwRdMYlOP4R3tNx2o01mwPj/GdDBcLZBxshPoEHcRbdXnLj3k+FqsJwyTjZk7t+Em7tqPQVw6JwastFul0ekzEi03fGXH1VL0a+b1gf1a7U7L94Epd/9fnNUSarU0ysrvRaxeSdORn+eKuPX8j2tFJfocdNzZ51Jf/KC8TNtBXaz+PA8mz/Pbh+jtT2dkZpeSj7vb5cP8+Xkbb1+ZbWRV67406cgHid3ZWtd7hXHwerOWkXx7z+Tp189czaYvEzewLfv+2HLiOzn9ygYbobmGJPKI9vgZT0r5wB/3rY/88Nk+g6Y75eSBt124VZMCfGfxUxaiKt6qasTSfFhHChXGnKX1A4nEXJHXEfMcLs2q1bRaNvlit0sdWpVu2OUisVOrWbeGs1StVrci8wWxRHEVkg9InNJyd3S5meAOHAYUBdidREmQumY8kPENuKo0KUDcQhCymAUCnmO0Mb64J/V5bvrmgZa2MVqxQuCd6IU+iF/pI9x0+MQ5zW5ktPkAWASEZDCLXnNBLEZF734RIuE+6a2QBqFREh7LFXWsexqSWckiHyQSPUgdBMftGgepZ3R2fZrqQiz1DrojNLTdrau43/7Fggfl0gHJmu5ATFGOHG5GPtCzhZsGocF78M3E5fIgyX6yWOCt0jyv75oIvmRcURUtIeceR4bclH144KyRO6C4Izo2XUtVFyc+8Z+HJ/I1D61ZLFI0gnYdlGPRXhdyJypDwEnQpbWo/ADqJ6F0C+6AzLUR5kzex5fwud0yBGHQNClkC4vuPSHwOSl3xU8X136osilFH3jsOKnbC1fPFgk4h/fNNjB0k+Yn8RnGcbu17hOxDrII+oUdz4ndCZXUv/XZ0iBQxGWCOUK48PgpwKcSp43Zk3OsHDBpmnC4fyfgpSkuoIwDhPKu20lNRzKZIqTryNwvpy+hUmVOHuakX9/m6kkpQAG8aBjJI0vb1hH8p/ODqR2l/SM2to/qW0eXeOb+bvloE/HHG/8Aw==</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:EAE7B7D46BA71E2FE0401F0A079922CD</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_7a0e1fcc-fbb2-4fdd-b54d-cf419855bb6f</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_019_DTCreate_Forbidden_user_is_basic_and_affiliate_node_is_lasp:linked" searchProperties="true" id="7ccb063f-fff4-4157-8f20-07d86aaec66d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="34ced2f2-7b0d-4f3e-9351-e9cea93eb246"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "LinkedLaspBindingAccessPermissionDenied");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="1e9e93e7-aee8-4671-b7eb-9b1631843134"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="679f638b-a6d9-4196-a2b1-e0ed71a16218"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="54c95ed4-8943-47a1-aa14-33bc5ef64b1e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="b79eaea9-b894-4ed7-82b2-6b7f81dfb67a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUIDFirstUser", tC.getPropertyValue("assertionUUID"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="d1aa377a-bfb1-4f4f-b8c0-bdce967909ea">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="adebf394-0c86-4dc2-8f4d-05aa12bbe35f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set EmailId for Basic User" id="e1f96ee0-818b-4420-b9a7-e8ebcbcdae60"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Basic User Create" id="ca1afe6e-085b-46ef-84d2-da5eac1d7819"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("BasicUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity and Affiliate Node Settings" id="745634c8-2d80-4e74-ab78-db46968a5274"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = 0;
String urnNode = tP.getPropertyValue("urnNode");
String nodes = tP.getPropertyValue("nodeAffiliationRTL").toString();
String audienceList = "";
String affiliationList = "";
List nodeList = nodes.tokenize(",");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It [$i]: $it";
	
	if (i == 0) {
		tC.setPropertyValue("NODE_ID", it);
		affiliationList = it;
		if (nodeList.size != i + 1) {
			affiliationList = urnNode+affiliationList + ";";
		}
		
	} else {
		
		audienceList = audienceList +urnNode+ it;
		affiliationList = affiliationList +urnNode+ it;
		if (nodeList.size != i + 1) {
			audienceList = audienceList + ";";
			affiliationList = affiliationList + ";";
		}
	}

	i++;
}
log.info "audienceList [$audienceList]";
log.info "affiliationList [$affiliationList]";
assert audienceList.length() > 0;

tC.setPropertyValue("audienceList",audienceList);
tC.setPropertyValue("affiliationList",affiliationList);</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="07a85139-62d1-447e-a5df-6c35f123d898">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433910602921@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>LinkedLaspBindingAccessPermissionDenied</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>18230D467509E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:18230D467509E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>18230D46754BE984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:18230D46754BE984E0533E991F0A5883</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433910602943</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_30dc722b-d18d-4b99-899d-9cec2b8b2b58</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+o6EP4rTM/HM6UvgNCOMIMC156jooAe9cudkCwQbZPSpLz4629SoFIUL/d+6mS72X1298mTnAsUha7fFgISSTkrraKQCT+zNo00YT5HggqfoQiEL7E/bN9c+27Z9tFui1EKOk3j74pNcN11xyZxGsSsjj3PbHgeMT0M2B03xu641lCuQqQQMCERk03DtZ2aaZ+Zjj2yq7575lfrZbfmvBilR0iEiq1cyraxBbUSTWMmZexb1nK5LC8rZZ5MLde2Hevp5nqIZxAho3W+qShLlLS2/rhMAEMY4jLmkXVuFXzOifCHdMqQTBPY5iLHctmW7VnKhwg6/WHke4EEbMKz5SVinFGMQvqOdH9uQM44KbXDKU+onEVHi3BsHdiEFTaxU2U/DKsI7cRABYSJQKaYIWcbawATSIBhKD0Mgqbx47SpZVtHCWJiwpNIFJf/DQ+wBYQ8BmKKXVlbaKcH/KJTrXPAfsBwmAq6gFtN1hhhENtpAj49VOkugQldXVOhCLoSGp21D+9guelGh05ByP8zoL3hbII8ojCFFgku6TV+fVqOXhfvT223g9O3+1m3ffHroZkB2HfODPloN8sDUuYk2ux4pPe3V7g/T+5m79wiVw/BtB9Y3XZvOHt+efPGzyMWMvpX/368fnip89ceiWFoDec96EWj5Oc7ckeLp4urs5ck+v08eKnO3XVtckH7o+s/tbj/K/jDu0/8yRq/cL763X/sBewSV+LpzR1vrDAfIdKHyd1o8TgY1Gvd9XSyxsvkcRkvJLHbPyUjsb1K6s/y8v562czL2cNftO3O/DAdvwKWu6WmQdAp9dSUkPxezLSFEnOSufqxFh8hgUmjpXdp7fBTJXeU+GqGm7XTcCt2p3pWr9ntrteodu1apdL1PKdnt2uNRmUnMhsUBxAvOZtQnUtL7oY23wPEkS+AEUjMBU+V0gnjm4gdJFEpYAN1CDgTMOJKnomLOAhYvr7NptKTq7jihbbqvFG65bLP+kl7IiEpSnK9IMkDwDSmoHVb01ooXgupWjFHi1SGTnmBygxSpeyJFlnfrTZqlqBRHIIGakWcpCGU41mcNcYSm69rIiwy66A7yg7b0bIO/+06oHwI1Q5C13IBaorwxd1S2RVytGDH3i94F76dEqrPlWqnTCjeICn++mCJpkdOEVXRDnLueWgoRLUOC8oTkQXFOc/z21qJuDr2rd045sgpz8vpYpFmE6hWK1aiwltK5RxrCDhVqrQe8TdgVh7COukKyFEfZM7tRXypnLGhRBIiRZdStjzhzh+C0Hd+oGi+OvVBUUip+iZhJb+yXYbqvaIRf/ukwT7Wfsp8pz5LnpCPcX0Ray+PqlNd+ZKyqV5p+V8fIQXmKixVwsWT/eBfBfgqedGYNznHIhWbxqmE439KWpGaBsKYp0wGHSMz7KtkhlOuY/A/nD6FyYQ4f5nRf3+amTSjAAb1nhM0i68vWF/zn033lHab9IjYet+JbRFd65P5s2WvT4ccb/0D</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:EAE7B7D46BA71E2FE0401F0A079922CD</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_30dc722b-d18d-4b99-899d-9cec2b8b2b58</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f515729-222c-4855-a1eb-794dabf0e092</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>48932eb6-c422-4f94-a1e2-992ab799d008</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b8456478-3a08-46ef-8d65-31fec1aa96dd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_020_DTCreate_Forbidden_LinkedLaspAccountBindingLimitReached_for_user_with_ULC" searchProperties="true" id="959688c2-f546-4caf-8503-23103577b369"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="66581c6c-114c-4dde-8d0c-d8cf1f2c3a81"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveLLASP"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="01a9bcfd-fd06-43e4-8698-1648c66c9292"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="fb9e1f7a-25f4-4f50-a4fd-0fcfb56bab12"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="b6999684-10d4-418a-b3c3-783ff1744b1a"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="9c8eaf52-96bd-4635-9bd3-6cb956948dad">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="584d5e7a-0fbc-4651-959f-a4e0a1bd3851">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUIDFirstUser", tC.getPropertyValue("assertionUUID"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


tC.setPropertyValue("SAML_RTL",tC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL_RTL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_RTL",tC.getPropertyValue("NODE_USER_ID"));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="e31f75a4-b62b-497f-8835-640691345366">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="6277243b-d5a2-449c-a41c-03613ebc1a15">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User" id="35cd7097-c2e4-4172-8891-0de448e3d804">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdLLASP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get1 1" id="865b2792-9f4e-4b42-86ad-4b7a845639cc">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy GET" id="ae3387fc-93fe-43eb-9383-0496c1308149"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set EmailId for Standard User" id="596034b7-981e-4fae-9878-0fa616be467f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Standard User Create" id="9607ca05-9185-4a62-b797-d06342151414"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_RTL"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL_RTL"));
tC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_RTL"));

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="d70e79b4-aaee-4d21-933f-eda8ab8f7adc"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator Standard User" id="c55dc4d3-7d8e-4be2-bc0f-b68119e18a82">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator Standard User" id="9d7d7724-8f49-4660-9937-b29c8fed414d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUIDFirstUser", tC.getPropertyValue("assertionUUID"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML_RTL",tC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL_RTL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_RTL",tC.getPropertyValue("NODE_USER_ID"));

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create for Standard User" id="392bf6f1-c3c0-44f5-94bc-0ecb633abfca">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create for Standard User" id="f418a05b-e577-4906-b015-dc2f0153d5ec">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="0d2fcc8e-dd69-4172-b936-626b9d2b2834">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdLLASP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="bea54586-9969-4f80-80da-6e96f3a24037">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy GET 1" id="29ba99db-1ffd-4135-b3b8-a98660c393a4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set EmailId for Third User" id="666b14cc-d6f6-4694-a429-db87ea5cf8be"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Third User Create" id="7926f459-72f6-404f-9d6a-faf18759b048"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_RTL"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL_RTL"));
tC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_RTL"));

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for Third User" id="48f27436-b8f2-4e8c-a82b-d482a4ab9c3f"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator Third User" id="1cc95e33-d792-407c-8494-737a1c6f89c2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator Third User" id="8e2b289d-1828-4774-a8f5-972256dfc92e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUIDFirstUser", tC.getPropertyValue("assertionUUID"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create for Third User" id="362b5bfa-f60e-4b25-ac7d-21b1ef199871">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for Third User" id="a977c07f-808a-4d2a-b915-fdb9e5067362">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdLLASP"));
tC.setPropertyValue("expectErrType", "LinkedLaspAccountBindingLimitReached");


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get1" id="5ff2ff30-7c79-4958-ba09-5d06ad6a1e6e" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy GET 1 1" disabled="true" id="5bccea47-a4b7-42e6-acab-d17edaab877d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>18230D46757CE984E0533E991F0A5883</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>18230D467574E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433910623812@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>18230D467572E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:18230D467572E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>18230D467573E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:18230D467573E984E0533E991F0A5883</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433910625301</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_f9b592d6-0e22-4393-bf6d-b8fdb7969ff4</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_ca5a4e4d-c6cc-4bce-b267-3b9516d28a88</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc9o6EP0rjPuYMf7ANsYTmCEhNG5JoYHm6+WOIi9YqS07lmwgv76SARcTksu9T6D16uzR7upozxmKI9PrMwYZJwltrOKIMq+0dpU8o16CGGEeRTEwj2Nv2r8ZeWZT99Bui9LwB13lH4xsZIEVqNjBWLWeMajPptNWW88d23AC00WuK1wZy8GnjCPKu4qpG7aqO6qhz3TLM9tey2paRvtJadxBxgS2cGnqypbUinWVkPPU07TlctlctppJttBMXTe0h5vRFIcQI6V3vjlRGSjrbf1xMwAMUYSbOIm1c63mcx4wb0oWFPE8g22s4KNYuqZ3NOETMLL4olR7IfDpPCmXl4gmlGAUkTck83MDPEyCRj9aJBnhYfzhIQxdAquwwio2LPpF0erUTgSqMcwYUlmIjC3WLcwhA4qh8evW7ypfTqtauXWWIcrmSRaz+vK/8QFaQJSkEKhsd6wttdMBj2Sqdw7Y8ymOckYK+CGbNUUY2LaagE+HakwymJPViDDRoCsm2Wn79A6Wm2wMyAIY/z8F2ivOBuQORTn0WmubXr+5OHtZwOMw6LTx5Gayesj1AeuWBPadS0NV2s3yoCmrJtrseMnXITz6lxR+3UH6jXVGbopv+Lf7VvaTjh98s7DD2Iew/f2OtMc/+8Pw8uz719XjdDhCZ9yGh7yY/bTvrx1+vZpd9H3/e3qRzvpv7Xx5NYqTcPyorRfFrNDPnu4fvt7/+D25j3wjWRrBNRhk/FLkZ/A2WQ9ZNgzw1zAY3KKL1/mVc/86bpnsKeo78OZmvuWE2+Me8K/bdnd+mj+/AOa7pWwDf9AYiioh/rmYSQsJ1Hnp6qVSfBgHypWe3CW1w8uF3JHAEzXcrA3XbOkDy2nb7dZVx7WudLsl/nSMod63Xbe1E5kNiwOKlwmdExlLSu6mbT4niGOPAQ0gU4skF0rHlE8QB4ijhk9vxSVIKINZ0lUMbAXt4Lmj2qbhqJali3s+d7Dqms7c7Lhzy+0gpfEj4WM6zvpzDlldnds1db4FTFICUsJlhzPR4oyLrLyiIueR0SxQk0IuRD6TeuuZlmtrjMRpBJKzFidBHkEzDdMyRxrb/Joqwqy0Gm3XGtjOpdEfXtiG6ezn1rpyB+Wl/PD4h992mRI+AZEOTB70AkS14cgbZO5OeZgN8/hbtYPv5wGR90+knWcEb5jUP/3tJtlGVSuNRv3pZEe68j001HC1wyNVoYKC4OpGVO+6kHshEL1dtV6R0Xxt5kWRlwWyrJaWCXhN6KGhTQHnQr/Ws+Q3UK2C0E56LCrWB5Ere51fzkM65YhDLLqpUS5PmA6mwOR04IsLsTp19KiFFHnjsOLHbJeRmGwk40+HH+xh6SfME/GzTLLgb7mOYO3FEecUwwEndCFX8qFYf9AWOBGwREhcku2DHwM4FrxurJJcceGim55zDh9/aUjt6ioI4ySn3B8opWFfT0uefJ2C99fpHUwp2dUMR/59iFNJ2QIYxOTHSIkvn2JP9j9d7GnyNugHsmx+Jst1dr135veWvTwd9njvDw==</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc7I6EP4rDr3sYABRhKnO2Nq+o1P7ofbz5kwMQaIQkARRf/2boFKxtcdzrjTLZvfZ3SdPcsVgGBhOhzGccBLRyioMKHNya0tJE+pEkBHmUBhi5nDkjDqDe8eoag7cb1EqvW5L+cezJ3XbcBuqhg1DNWt2TZ14DVedND13YtkN2/NM4cpYinuUcUh5SzE0va5qDVXXxprpGJZjGFWrUf9UKq84YSK2cKlqyg7UirUUn/PYASDLsmpWq0bJFBiapoP3wf0I+TiESvtqW1GeKGnv/FHVxQgHAaqiKARXoORz5TJnRKYU8jTBu1zuqVwa0GwgfFxGphdKsRe7PepF+fIG0ogSBAOygbI/A8z9yK10gmmUEO6HJ4vQNRlYxSukIt2kFwooQzszUAlhwqDKfKjvYg2xhxNMEa68DHst5eK8qeVbxwmkzIuSkJWX/w0PpkscRDF2VbYvawft/IA/dKp9hZHToyhIGVniB0nWGCLMdtPE6PxQlacEe2R1T5gg6IpJdOAQ3tFy240umWLG/8+ADoazDfIKgxS3ny3juk+uaU037T57W879u+b8z4ini5dWDuDQOTcUo90uj0hZkGi74+3pc21OXwPYJ09vsdmnbxl46FvWZIyGS/vy8X2xjAZgdrlazzLjPULhwJji7OG5F4LHiTYhWY8/8lmYrQywoTSjS/vWszrXN12NZOTxdWa82MaLb/og6y9e4vTypdZ7Rc0BW8zeJh+Da/DccB+egsvPjXervz7R0Zp9ZO7mer5+6y/8eg3+Wdz42vBjQDaoVZRzgL9s25/5UTqZYcT3S0mDXrdyJ6YE+e9iJi3EVb3c1Yml+DCOKVfacpfUDicVckdcR8xwu9abRk3rmg2rbtVu7aZ5q9Vr4o+t32mderNZ24vMFsURxJuIekTmkpK7pc3vAFHoMExdnKjLKBVKx5RfInYhh5UeHYpDEFGGx5GQ51ij9tyahb6frfTpxpprpmnV2TxWKg8Rf6SPScfjOClrslXS5CFGJCZYCrfkNRPEZlz0YgGXKQ/06hJWKU6FtCdSZR3DbNYBI2EcYIkUhJGbBrga+3HeGcC2v4YKEcutw9txftpO1nX8bd8C4eMS6cBkLddYjBH/cLno+0JOFqxrhwXvw3dSl8iDJfrJE4K2SMqfvmgi+VFwRFS0h1x4HhtKUcFxQUUid0lQQfTiuhYqLs59ez+OBdSri2q6XKb5BEyzBhIRHgiZ08EIo1TI0noczTEFRQhw1h1QoD7KXNjL+FLu0xGHHIeCLpV8ecalP8JMXvo9wfPVuS+KUkrRN45X/CfbTSAeLBLxr28a5CDpJ8xP4ieLEvdrXD/EOsgj6hR3Pid0KldS/9cnSIEiEZYI5YqSw+A/BfgpedlYNLnAwgWbJinHp79UpCS1FIhQlFLe6yq54VAmc5x8HWPny+lbmFyJi6cZ+fe3mUpyCiAsHnSM5PHlDetI/tPpgdTukp5QW+M3tS2ja38zf7cc9OmY4+2/</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:18230D467572E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>18230D467573E984E0533E991F0A5883</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:0978AB2E92101C76E05307991F0AE547</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>87648</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d78198ae-91b5-4d0e-9dd3-886048f0c2bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>423186c5-583a-4a1c-9e7a-24032ed24d34</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c55dc4d3-7d8e-4be2-bc0f-b68119e18a82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9d7d7724-8f49-4660-9937-b29c8fed414d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d2fcc8e-dd69-4172-b936-626b9d2b2834</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea54586-9969-4f80-80da-6e96f3a24037</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1cc95e33-d792-407c-8494-737a1c6f89c2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8e2b289d-1828-4774-a8f5-972256dfc92e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>362b5bfa-f60e-4b25-ac7d-21b1ef199871</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35cd7097-c2e4-4172-8891-0de448e3d804</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b6999684-10d4-418a-b3c3-783ff1744b1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977c07f-808a-4d2a-b915-fdb9e5067362</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>48f27436-b8f2-4e8c-a82b-d482a4ab9c3f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6277243b-d5a2-449c-a41c-03613ebc1a15</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ff2ff30-7c79-4958-ba09-5d06ad6a1e6e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ae3387fc-93fe-43eb-9383-0496c1308149</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>865b2792-9f4e-4b42-86ad-4b7a845639cc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>29ba99db-1ffd-4135-b3b8-a98660c393a4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_021_DTCreate_Forbidden_LinkedLaspAccountBindingLimitReached_for_user_without_ULC" searchProperties="true" id="2f103b66-d9a2-4da0-98b7-ca21e613ba95"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a3dffb74-f567-4a2b-be3d-d836883398b6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveLLASP"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="b1511f72-3365-48cf-b4d7-9c46b1b0032c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="72514b7f-ce16-4b51-8201-41bd4e6dd496"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="0c8ddb26-94fd-4f1c-9aac-4a44c87be091"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="1f66243c-a0bd-4064-9dae-abf40369de8e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="deb4ecde-4d2a-41a0-826d-559a03b48645">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUIDFirstUser", tC.getPropertyValue("assertionUUID"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


tC.setPropertyValue("SAML_RTL",tC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL_RTL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_RTL",tC.getPropertyValue("NODE_USER_ID"));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="7d89899d-69f0-447b-9ef3-db13b90aa166">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="dad22ae4-63d1-49d9-974e-c5b790326ddf">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User" id="5f5396fc-257e-406c-94bf-c28e331d7b50">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdLLASP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get1 1" id="3df21ea1-cc67-4eab-b617-1d486b6ea4fa">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy GET" disabled="true" id="1fd933f7-620f-428b-9d5f-cf11a6cd5fac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set EmailId for Standard User" id="85c6f706-7b91-41d2-947f-c9f1f997a687"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Standard User Create" id="46bccf91-eda5-41d5-a756-cc6813e132b0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_RTL"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL_RTL"));
tC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_RTL"));

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="99899e85-fd42-4169-b7ad-14260781aaab"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator Standard User" id="351fefd9-f93a-4197-9f2c-96fcd56efec7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator Standard User" id="ce0fdf59-bd74-4a25-8daa-9fdba3bc87be">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUIDFirstUser", tC.getPropertyValue("assertionUUID"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML_RTL",tC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL_RTL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_RTL",tC.getPropertyValue("NODE_USER_ID"));

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create for Standard User" id="ee1273b8-e322-4fbc-a54c-8bafee7ec955">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create for Standard User" id="31c29bfc-150d-4c99-bf07-f5680833c31b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="465cb3a8-5e27-424b-a7f4-8fe451d1bc3d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdLLASP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="5c24ca43-ff29-4e7a-924e-42eedccc6bd8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy GET 1" disabled="true" id="9289fdb2-d700-4ef0-aaae-670aec6a088d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set EmailId for Third User" id="411d3620-c700-4adc-9f16-97921b8bc51b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Third User Create" id="326a6b5e-9a8d-42c3-a978-bea6288da2ea"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_RTL"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL_RTL"));
tC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_RTL"));

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for Third User" id="11996f4c-7a25-4d93-8d45-913ec1d350d3"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator Third User" id="5520c513-ddaf-4a63-a5ef-36ca87523106">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator Third User" id="f050eaae-f872-4c67-9362-f31691452761">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUIDFirstUser", tC.getPropertyValue("assertionUUID"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create for Third User" id="a26b28af-6fa5-4b0a-a17a-b85fc58505ab">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for Third User" id="8915604f-e0b6-439b-9853-13a17ae70052">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdLLASP"));
tC.setPropertyValue("expectErrType", "LinkedLaspAccountBindingLimitReached");


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get1" disabled="true" id="bb645862-6d1f-443c-bfbd-d556a7b461c5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy GET 1 1" disabled="true" id="468ca89c-9594-4bab-bcaf-e6ab0f451eb2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>18230D467648E984E0533E991F0A5883</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>18230D4675D8E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433910787633@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>LinkedLaspAccountBindingLimitReached</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>18230D4675D6E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:18230D4675D6E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>18230D467647E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:18230D467647E984E0533E991F0A5883</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433910787652</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_fc4432d1-e24d-4b00-9250-7e9846cf8e0b</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_fc4432d1-e24d-4b00-9250-7e9846cf8e0b</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMpaNubkCVSQkM97cCDDJ7LxsCbkBJbZEJNlcvn4kAx7MJFl2n1xqt7pPdx8d6VziJPaCnpQgFOWsskpiJoPc2rFSwQKOJZUBwwnIQJFg1Lu7DbwqCvB+i1UJ+x3rnynx/ZoXuTZ4fmT7E4TstldHdhPaLb9Bpi1AE+0qZQohkwoz1bE85NZt1LBdNEZ+UEMBalRRvfHTqjyBkDq2dqkiawdqJTvWXKlF4DjL5bK6rFW5mDkeQq7z4+52ROaQYKt7vq0oTyS6O39SjYBAHJMq4Ylz7pR8ziMZjOiMYZUK2OWKPsqFHNR2tE8k6eyLVeyFKGRTni8vMeOMEhzTDTb9uQM151GlF8+4oGqefFiEi0xgG1bEJq7PvlhOGdqJgUoIhcS2nGN3F2sIUxDACFS+D8OO9eW0qeVbxwIzOeUikeXlf8MDLIOYLyCy5b6sHbTTA77Tqe45kCBkJE4lzeDekHWBCcjdNIGcHqoyEDClq1sqNUFX0qBzDuEdLbfd6NMZSPV/BnQwnG2QJxyn0D3jN2criC++it73xxv42YvXr6t+2EhrqJMDOHTODcVot8sjUhYk2u64+fa8al089+6/vZ71R+nz5DGLbmujt+UFdgabhTd/vrt6+Pq0QdcPQ/ry1WvH6zNRp23/dnM7Chvjn+vr5nCwYE/fB42eCP8KN2OPbVTtb8R/SLf1dnezHC+TEQ8ZsMHjI5tIt+Eg7/XHTa+dva3XzuPL/HLjD6J02oNV9C17vn+WV1mzP6gPXC8TD4Ok2aTtFzl+7BTlHOAv2/ZnfpROXoCo/dLQIOxXrvWUsPpczIyFRvY0dw0WRnykAqasrtlltCNItdzRKNAz3K7dlldDfb/RbPjNK31YrlC9Vrtqt91r1Ku3WrW9yGxRHEG85GxKTS4juVvafA6QJIEEFoGwM55qpZPWJxH7WOFKyIb6EHAmYcyNPMfqhWzE3BfCra8w3vickemEW5V7rh7Yg+hNFYiyJDdLkjwEQhcUjG4bWkvNa6l0K95wlqrYrWa4yiDVyi6MyAae36o7kiaLGAxQJ+FRGkN1MV/kjXHk9uvZmMjcOrwa54ftw7KO/+07oH0iahykqeUC9BTh+G7x2kF9X8iHBbvosOB9+F4aUXOudDuVoGSLpPzrN0sMPQqK6Ir2kAvPY0MpqnNcUJEoyigpeF7c1lrE9bHv7sfxht3qWzXNsjSfgFZ2R+jwjlY51xkBSbUqrcf8FZhThHBOugIK1EeZC3sZX6rmbKSwgkTTpZIvT7jzRyDNnR9qmq9OfVCUUuq+KVip92yXsX6vGMSfPmlIQIyfNg/0Z8lF9Htc78Q6yKPr1Fe+omxmVkb+1x+QgnAdlmrh4uIw+HsB3kteNhZNLrAozaZJquDjPxWjSB0LE8JTpsK+lRsOVTLHqdYLCH47/REmF+LiZUb//Wlm05wCBPR7TtI8vrlgA8N/NjtQ2l3Sd8W23m98JrZldN0/zH9aDvp0zPHuLw==</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZtU+o6EP4rTP3olL5QoHSEGQW94lFRQA/65U5MtxBPm0KSluKvv0mBShG93Pupk+1m99ndJ09yxlEU2t4558AEiWkli0LKvdza1hJGvRhxwj2KIuCewN7o/O7Ws6umh7ZbtEq/19b+NmumY7stW3eDlqs7DQvrqGH7es3B2EYt2/HrtnTlPIE+5QJR0dZs06rrZkO3zLHpeHbLs+xqy3JftcozMC5jS5eqqW1AZbytzYSYe4axXC6ry1o1ZlPDNk3LmNzdjvAMIqR1ztYV5YlYZ+OPqz5gCENcxXFknBklnzOfeyMypUgkDDa5/O9ymYbZMqSPz8n0RCv2gt+nQZwvu4jGlGAUkg+k+nMHYhb7lfNwGjMiZtG3RVimCqxDhnVsOfREM8rQjgxUQsg40vkMWZtYQwiAAcVQeRr229rJcVPLt44ZojyIWcTLy/+GB2gKYTwHX+fbsjbQjg94oFOdM8Ben+Iw4SSFe0XWOcLAN9MEfHyoygODgGS3hEuCZlyhM3bh7S3X3eiRKXDxfwa0M5x1kGcUJtC5Pr1Ob1AsLk67lzfXjekbmdir0ap3wR7bOYBd59xQjHa93CNlQaL1jsHd641RXzUb3SHUaYt36x+DlLFH1HsZTbPBxAqvJsn9y+1t3YBR8oyyVtBo/kLx3c1bfcjTq0ejeSpm02D8GGVi/j4lL+Gkm3I3SJbZ+OV9Och6j/70LXoXA2K/zsPVq7NYPLlvdw/OtfF02ht/BOliGF9c/4qWwW9r4i5PF1n4iF9+AyPXzb+aMPE/Lq+M1cxtF+Xs4C/btmd+lLy9AxbbpaJBv1e5klNC4mcxUxbi60Hu6s2V+HABVGgdtUtph5dIuSO+J2e4XluuXTN7TqPZsJuXLde5NOu12mWrZV2Z53XXrW1FZo1iD2I3pgFRuZTkrmnzM0AceRyoD0xP40QqHdd+iNhDAlX6dCgPQUw5jGMpz9astnpfUOzHS/MPW7Ss1Fqi90VTq9zHYkAH7DwQwMqS3CxJ8hAwmRNQuq1ozSWvuZCtWKA0EaFVTVGVQiKVnSmR9WzHrRucRPMQFFAjiv0khOp8Ns8bY/D119YR5rl1eDnOD9u3Ze3/23ZA+vhEOXBVywXIKcKBu8XcFvJtwZa5W/A2/HniE3WuZDsFI3iNpPzrkyWKHgVFZEVbyIXnvqEU1dgvqEjkpwQXPC9uayni8th3tuNYIKu6qCZpmuQTcJyawWR4Q6qcZYwAJ1KVVuP4D1CjCGEcdQUUqPcyF/YyvkTM6EggAZGkSyVfHnHnj4CrO78vaZ4d+6AopZR9E5CJQ7ZuKN8rCvGPTxrsYeUnzQ/ys4yZ/zmuA7F28sg65ZUvCJ2qlZL/1TekwLEMS6RwxWw3+KEAh5KXjUWTCyxCsuktEfD9n4pSpLaGMI4TKvo9LTfsqmSOU6zm4H06fQmTC3HxMiP//jTTSU4BDPI9x0keX12wnuI/ne4o7SbpQbGt9xo/iW0ZXeeL+atlp0/7HO/8Aw==</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:18230D4675D6E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>18230D467627E984E0533E991F0A5883</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:0447B08682E0408BE05307991F0A5087</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>87648</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d78198ae-91b5-4d0e-9dd3-886048f0c2bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>423186c5-583a-4a1c-9e7a-24032ed24d34</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c55dc4d3-7d8e-4be2-bc0f-b68119e18a82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9d7d7724-8f49-4660-9937-b29c8fed414d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d2fcc8e-dd69-4172-b936-626b9d2b2834</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea54586-9969-4f80-80da-6e96f3a24037</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1cc95e33-d792-407c-8494-737a1c6f89c2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8e2b289d-1828-4774-a8f5-972256dfc92e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>362b5bfa-f60e-4b25-ac7d-21b1ef199871</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35cd7097-c2e4-4172-8891-0de448e3d804</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b6999684-10d4-418a-b3c3-783ff1744b1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977c07f-808a-4d2a-b915-fdb9e5067362</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>48f27436-b8f2-4e8c-a82b-d482a4ab9c3f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6277243b-d5a2-449c-a41c-03613ebc1a15</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ff2ff30-7c79-4958-ba09-5d06ad6a1e6e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ae3387fc-93fe-43eb-9383-0496c1308149</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>865b2792-9f4e-4b42-86ad-4b7a845639cc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>29ba99db-1ffd-4135-b3b8-a98660c393a4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_022_DTCreate_DCOORD_VALIDATION_TOKEN_RETRY_LIMIT_same_node" searchProperties="true" id="74363f63-5510-4c84-909b-b0b3167ef4a9"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e6417a8a-e4c6-4ce4-adec-55df174ae328"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="03580f4f-2971-4037-ab86-f7a971ccfa34"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="fb967ba9-d308-4b73-824c-8cbe2b5fd4e6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="ffea1aea-5220-4b37-9b6f-a01e73d96443">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="0186f679-026c-4308-981a-9e0d60fda145">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUIDFirstUser", tC.getPropertyValue("assertionUUID"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


tC.setPropertyValue("SAML_RTL",tC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL_RTL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_RTL",tC.getPropertyValue("NODE_USER_ID"));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="39eaaefc-aa20-4ef0-9dea-4813c85c0037">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="4784315b-0210-4eee-9900-58c9022df5e6"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User" id="87466e48-e04e-4c41-b7ad-d0df9cdfc22e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="1a7e4ad3-fd85-4a74-a17f-8da322fba7a1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User 1" id="06fdc104-8ff8-4e8b-bf69-6d91c2e015be">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 1" id="e2b7d865-eb0f-42b1-a651-00cde1be16f6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User 2" id="475371da-a950-466c-a976-ad971ab635b8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 2" id="1cb7da96-20ea-4793-8d4e-06747ba571d3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User 3" id="076e8a92-e32f-409e-9620-cb214fe8a4c5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("expectErrType", "ValidationTokenRetryLimitReached");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>18230D46767BE984E0533E991F0A5883</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>18230D467673E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433910817155@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>ValidationTokenRetryLimitReached</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>18230D467671E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:18230D467671E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>18230D467672E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:18230D467672E984E0533E991F0A5883</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433910818626</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_1c7b6d52-f035-4915-ab9a-ec7da89157c1</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ceaf1d16-9ec2-468d-89eb-1cd4ba90d0a9</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtk5pIEP4rFvm4hbwLUqtVRtw7EuNuVi+V+OVqGBqdLAzIDOrm198MKhH35bz7RHXT0/30yzzTtwxlqemPGIOSk5x29llKmV9rB0pVUj9HjDCfogyYz7E/H32Z+mZX99HpiNIJg4Hyt4HdqBc7pprolqPafcNRUdRHKmA3Rp4QXWwIU8YqCCnjiPKBYurCSu+phr7Qbd8yfd3terqxVDrfoGTCtzDp6soR1J4NlDXnha9pu92uu7O6ebnSTF03tO9fpnO8hgwpw9tDRnWgcni0x90YMKQp7uI80261ls1tzPw5WVHEqxKOseK3Yuma3teETczI6oPSnIU4pElei2NEc0owSskvJOvzBfg6jzujdJWXhK+zN5MwdOlYhT1WsWHTD4rWhnaloxbCkiGVrZFx9PUICZRAMXT+egwHyofrulYfXZSIsiQvM9YW/xseoFtI8wJilZ3SOkK73uErlRreAvZDitOKkS3M5LAWCAM7dhPw9a46DyUkZD8lTAzonkl02jm8C/FQjYCsgPH/06Cz5hycfENpBcPEW2+N8XSl25g97/N0P9ErcNn9TlyCGsC5ca1oWnsQL4ayGaLDiXLZR3dkvq60b5+f8uVnbx3Owqcg8EYrzXkKvOV0HpJReJMV0T7/+GB5DomcWTFzR5Pi5lMa/Jz9+nE3iRbfK1GHrbGlW/3Hxl3HGd2g76hM75cLbfOnsczcOIR8intzsDc2Q6FbUHeXmH0rCj99jYKvP+AmCZ7JagQPER3N/gzmU+2TPlmux85N/yb746c+aNI5w9/Wne78vIp+AuYnUY5BGHTuRJcQf5/MpIbEalKb+oUkH8aBcmUoT0nu8CtBdyT2RQ8PsuGZlh7YPbfnmpO+Z090x7Im/b5xp48cz7NOJHNAcQFxnNOEyFiScg9j8z5AnPkMaAylus0rwXRMecdjgDjqhPRRXIKcMljkgkY9KxLX2VK9yEhU20hA9Rxxz+PIsu1eYiGEXaUzy/k9vS9HCYeyzc5ui50fAZOCgKRwOeFMjDjjoiobtK14anS3qEuhEiRfSr71TdtzNEayIgWJWcvyuEqhW6yLukYaO3xNFWFWaw1X1NM0e2N3bAW6Y9a1DQ61tS3XrS/lm+lf/jtVStjERBowmehHEN2GF2+Q4TunLF9Uo/fqW3VyP6piIu+fKDsvCT4gaf/6PU1yjJpRepwsTpAby0tFy6t2mVATKN4S3NyH5lUXZC/oYXjq1QYZ3U232m6ruj22bWmlcK8JNjS0OeBKsNfzIn8CqjUutKueigb1ReRG38ZX8TWdc8QhE7PUqcUrdoM5MLkbhOI67K9dPFohRd047PlrunEq9hqJ+N3VB/tY2gn1g/js8jL+3a5XfJ3FEXmK1YATupKSfCae3xgKnAu3RBBcXp47f83Ba8HbyqbIDRYupimqOLz9pyOZa6AgjPOK8jBQasU5m9Y4+XMB/m+jF25qwm42OPLvK5xK6hHAIPY+Rmr/8iH25fzT1RkjH4O+QcrGe6TcRjd8oX6pOavT5YwP/wE=</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVbbbuo6EP0VlD5u5UrKJSpItNDdFHoD2qL9cuQ6A7gNdogdCHz9tgOkhJYezpGQkCfjmTUzy8u+4GgWOl6Lc4gFYbSUzkLKvcza0JKYegxxwj2KZsA9gb1B667nOYblod0WreS3G9o/GNDYDuyKXgfs6G6lFui1OrzpNg7cN1S3AgvVpSvnCfiUC0RFQ3Ms+1y3KrptDS3XK1vyZ1Tc8h+t9AIxl7Gli2FpW1Apb2hTISLPNJfLpbEsGyyemI5l2eborjfAU5ghrXmxqShLFDe3/tgIAEMYYgOzmXlhFnwuAu4NyIQikcSwzRUcy2WZVt2UPgEnkzMt3wuBT8csW14hyijBKCRrpPpzB2LKglIrnLCYiOnsaBG2pQLrkGId2y4908witBMDFRDGHOl8iuxtrD6MIQaKofTc9xva2WlTy7YOY0T5mMUzXlz+NzxAFxCyCAKd78raQjs94Dedal4A9nyKw4STBdwrskYIA99OE/DpoUqPMYxJ2iNcEjTlCp25D+9guelGm0yAi/8zoL3hbIK8oDCBZuVptX6IzXAYuc71ey8pt9zqJfX9/kenkQHYd84M+Wg3ywNS5iTa7MCv6TP7wC83q48x7/SZ+VqdJunbqnsepU9iVF2mC2s0IZcr+/ej+avbTde3aaVau47TShxyf+0+JsvRcw/di2r7jzWvjJ+ij5tya22xl/7r6nb8QEb21Z1NKlUy/XW3nN+t+WXQN4cwWjw73SC5+U2GN6Nu92GISHvVFuU23L7URtX1s+13qu90/UzDq/TmqjfflnuAv2jbnflB8vYOWOyWigZ+u3Qtp4TEz2KmLCTQx5mrFynx4QKo0Jpql9IOL5FyRwJPznCztmtO2Wq7lWql6nTqNbdjnZfLnXrdvrZa57VaeScyGxQHEK8YHROVS0nuhjY/A8QzjwMNINYXLJFKx7UfIraRQCWf9uUhYJTDkEl5tud8WXGWiM1r56Fti0TM3bVFIsG10j0TD/Qhbo0FxEVRrhZEuQ+YRASUcitic8lsLmQz5miRiNA2FsigkEhtj5XMeo5bOzc5mUUhKKjmjAVJCEY0jbLWmHzz7+gI88za7wyz43a0sMNvux5In4AoB65quQQ5R/jmdnF2hRwt2Lb2C96FbyUBUSdLNlTEBG+QFD998kQRJCeJrGgHOfc8NBSimocF5YmCBcE50/P7Wsq4PPjN3TjmyDbmRrJYJNkEXLdsxjK8KXXONgeAE6lLqyH7AGrmIcyTLoEc9UHm3F7El4gpHQgkYCbpUsqWJ9z6A+Dq1vcl0dNTnxSFlLJvAlLxne0qlC8WhfjHRw32sPKT5kf5t2Rx8Dmub2Lt5ZF1yktfEDpRK3UBrI6QAjMZlkjpYvF+8O8CfJe8aMybnGMRkk1viYDjX0pKkxoawpglVPhtLTPs62SGU6wi8D6dvoTJpDh/m5F/f5zpJKMABvmi4ySLr65YT/GfTva0dpv0iNzaP8ltEV3zi/mrZa9Phxxv/gU=</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:18230D467671E984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>18230D467672E984E0533E991F0A5883</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>39eaaefc-aa20-4ef0-9dea-4813c85c0037</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ffea1aea-5220-4b37-9b6f-a01e73d96443</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0186f679-026c-4308-981a-9e0d60fda145</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_023_DTCreate_DCOORD_VALIDATION_TOKEN_RETRY_LIMIT_for_different_nodes" searchProperties="true" id="7a5f2324-1bc9-4533-b7d2-80f97b09b4f5"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="c8f1bcd1-4543-42bb-badd-d36c226b6be7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="1b7c8048-1f22-4133-9458-e9b4e9cab23b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="4d417f57-edce-4b9c-a284-cbbcf31c903e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="8ef6dc23-9baf-4ec0-b05e-d7867934c822">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="f37ad338-9fee-4ba2-9193-7f61c0285b81">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUIDFirstUser", tC.getPropertyValue("assertionUUID"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


tC.setPropertyValue("SAML_RTL",tC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL_RTL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_RTL",tC.getPropertyValue("NODE_USER_ID"));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="7065041a-3fe7-4dc3-a184-e333ded261f8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="49e212ef-0403-4df6-b095-f641e1c91a01"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User" id="335a9563-ae94-4dde-b8e9-6ae40b5f1688">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="668b3b9b-a20b-4485-9636-49688fb01927">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User 1" id="914a6fbe-630f-44e2-9b18-f03042fd8ed5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdLLASP"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveLLASP"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 1" id="f4775049-fa8d-4e8d-a9a4-05452855a587">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User 2" id="2e8a01e4-1338-497b-b0e5-7940543fbb26">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdDLASP"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 2" id="7bdf86b9-1c9a-4011-a601-3da228db689e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User 3" id="7b33ef7b-0916-4f50-9933-377560894137">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("expectErrType", "ValidationTokenRetryLimitReached");
tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdAccportal"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>18230D467747E984E0533E991F0A5883</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>18230D46773FE984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433910969754@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>ValidationTokenRetryLimitReached</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>18230D46773DE984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:18230D46773DE984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>18230D46773EE984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:18230D46773EE984E0533E991F0A5883</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433910971282</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_1d51c9a5-201a-4f96-a5e4-6064ef287426</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_cfeb0bd6-cfd6-488c-80ad-7b12780bb41d</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZrU/I6EP4rTP3olF65tCPMIMURBZWbol/OxHSBaJtCk3J5f/2bFKgU0cM5nzrZbp59srt5slcMhYHpNhiDmJOIFtZhQJmbWmtKElM3Qowwl6IQmMuxO2h0O65Z1F2036IU2l5N+cfwSwZ2UEk1dQOp9sQpq6gEtlrWyzZMzGrFNsvClbEE2pRxRHlNEa4lVS+rhj7UbdeyXdssGo79phSeIWYCW7gUdWVHas1qyozzuatpq9WquLKKUTzVTF03tHG3M8AzCJFSv9qeKA0U13f+uOgDhiDARRyF2pWW87nymTsgU4p4EsMulv9TLF3THU34+IxML5RsL/htOonSZRPRiBKMAvIHyfx0gc8iv9AIplFM+Cz88RCGLoFVWGMVGza9ULQ8tTOBcgxjhlQ2Q8YOqw8TiIFiKIz67ZpycV7V0q3DGFE2ieKQ5Zf/jQ/QJQTRHHyV7Y+1o3Y+4IlM1a8Au22Kg4SRJTzIZp0jDGxXTcDnQxWeYpiQdYcw0aBrJtlph/SOlttseGQKjP+fAh0UZwvyjIIE6pWnm+rtvfkSsX7FoBsyvDPmm2TQDFvVWkrg0Dk1ZKXdLo+aMmui7Y5+yNG812wm2sfdov/5aJmfgxew0d2rfqP3R6O3dXf0semVN+WB13i7eQ7ekvvrW8Itw2kt76wVQUybdlf3m95l3LMnY6//MHJIv2OU+Bw5jx2t7/TC19gjVvNuuRhfNu7LveRPtYSrNy2y6F42bLtpVayX17fHYVO/H41bzbcxub1d6v5lEI7Avm6bi+vxgpJGLTvOAf+8bX/nB8n7B2C+X8o2aHuFG1ElxH8XM2khvjpJXd25FB/GgXKlLndJ7XATIXfEd0UNt2ujalq6Z5crFavVcqp2Sy9ZVstxjBu9UapWrb3IbFkcUWxGdEJkLCm527b5nSAOXQbUh1hdRolQOqb8gughjgpt2heXIKIMhlFNQYZl2Eh3VAf5umpX3h1xz+2KihzTqVpl7EDVUQoPEX+kj3FjwiHOq3Mlp859wGROQEq47HAmWpxxkZUFWiY8MIpLVKSQCJGPpd66pl0taYyE8wAkZy2M/CSA4nw2T3Okse3XVBFmqdWoiHx6ptc0vZanl5ppbr1tbs2KYaeX8sfjH//bZ0r4+EQ6MHnQaxDVhhNvkLU/5bdslE++VXv4RuITef9E2nlM8JZJ/tdXN8k2ylrJ6zQGT3vSme+xIYerHR8pC+UvCc5uRPauC7kXAlHfV2uBjOKimCyXSVog27a0WMBrQg8NbQA4Efq1GUafQLUMQjvrschYH0XO7Hl+CZ/RAUccQtFNhXR5xnQwACang7a4EOtzR49cSJE3Dmt+ytYMxGQjGf86/GAXSz9hfhKfVRT7X+U6gXUQR5xTDAec0KlcyYdi80Nb4EjAEiFxUXwIfgrgVPC8MUtyxoWLbnpPOPz8pyC1S2gHxlFCedtTUsOhnqY8+WYO7pfTN5hUsrMZjvz7EKeStAUwiMmPkRRfPsWu7H86PdDkXdAfZNn7TZbz7OrfzN8tB3k67vH6Xw==</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZXzl5gpUkUASUoRkgFxftoTcBhEjE0syJl8/kgEHk5Bl9wVK7Vb36e6jI50xtAhtr80YxJxEtJQuQsq8zNrUREy9CDHCPIoWwDyOvVH7tu/ZZdNDuy1aqddpav/gACbmxK/qOJA/br2O9bqJfL02sexa3ZxMXMuXrowJ6FHGEeVNzTatim5Wdcscm67nOJ7plBuu9aqVHiFmMrZ0KZvaFlTKmtqM86VnGKvVqrxyylE8NWzTtIzn2/4Iz2CBtNbZpqIsUdza+uOyDxjCEJdxtDDOjILPmc+8EZlSxEUM21z+sVymYTYM6eMzMv2l5XvB79EgypYXiEaUYBSSD6T6cwt8FvmldjiNYsJni6NFWKYKrEOKdWy59JdmFKGdGKiAMGZIZzNkbWMNIYAYKIbSw7DX1H6dNrVs6zhGlAVRvGDF5X/DAzSBMFqCr7NdWVtopwf8plOtM8Bej+JQMJLAQJF1iTCw7TQBnx6qdB9DQNI+YZKgKVPojH14B8tNNzpkCoz/nwHtDWcT5BGFAlqvolb1cQKT1+sxCqqDKk3s6NkZn1e6zQzAvnNmyEe7WR6QMifRZsdgep+Orx4EibFoDEaQJqIzbiQXJOpA+vSyjtqP/bX7XGnzXv9P3b3h8/YlvDXu5+Lx/ep25Ize+Ed73H4bWqvn9dN1aL2QK2rZI9p4GYY3V+JpfvX7tdOvLsnNauZeG42g+nK+/jMJLxf2b+ul+iFQ+nCzJNWnu/uX9cfybsbl+Zyt2SDt3o3D8PnGXJEanhkBbubl7OEv2nZnfiQmc8B8t1Q06HVKl3JKiP8sZspCfD3IXL2lEh/GgXKtpXYp7fCElDvie3KGm7VVtx2z41ZrNafbbdTdrllxnG6jYV2a7Uq97uxEZoPiAOJFRAOicinJ3dDmZ4B44TGgPsR6EgmpdEz7IWIHcVTq0aE8BBFlMI6kPNtvppM6DXc+i5k1t+fMJ8KvVH1bKw0ifkfv4nbAIS5qcq2gyUPAZElACbfiNZPEZlz24h0lgodWOUFlCkJKe6xU1rPdesVgZLEMQSE1FpEvQigvZ8usMwbb/Ns6wiyzDrvj7LQdrevw264F0scnyoGpWs5BjhG+XC62V9kVcrRgy9wveBe+LXyiDpbsJ48J3iApfvqkieJHzhFZ0Q5y7nloKEQ1DgvKE/kJwTnR8+taqrg8963dON6RVX4viyQR2QRc1zFiGd6QMmcZI8BCytJ6HL0BNfIQxkl3QI76IHNuL+ITfEZHHHFYSLqUsuUJl/4ImLr0e5Ln6akvikJK2TcOKf/OdhHKB4tC/OObBntY+UnzvfxbRfFn4d/F2ssj65R3Pid0qlZK/9dHSIEjGZZI5Yri/eDfBfguedGYNznHwiWbJoLD8S8lJUlNDWEcCcp7HS0z7MtkhpOvl+B9On0Jkylx/jQj//4200lGAQzyQcdIFl/dsJ7iP53uSe026RG17fyktkV0rS/mr5a9Ph1yvPUX</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:18230D46773DE984E0533E991F0A5883</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>18230D46773EE984E0533E991F0A5883</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>39eaaefc-aa20-4ef0-9dea-4813c85c0037</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ffea1aea-5220-4b37-9b6f-a01e73d96443</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0186f679-026c-4308-981a-9e0d60fda145</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_024_DTCreate_before_DCOORD_VALIDATION_TOKEN_RETRY_TIMEOUT" searchProperties="true" id="f60c3252-cb58-4c3c-a24f-32df68d59f0b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d6dbc67e-f1a3-409d-86bc-8754ed18b2d0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="750f75a9-703f-408c-9652-d8e03713854d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="c34d4e41-bbd9-45a2-9d81-d4b1c8ee3666"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="1366cb5a-ab62-486e-9c29-ff13b9caab28">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="c4b89d1a-e613-43cb-9668-18b9bd8e2789">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUIDFirstUser", tC.getPropertyValue("assertionUUID"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


tC.setPropertyValue("SAML_RTL",tC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL_RTL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_RTL",tC.getPropertyValue("NODE_USER_ID"));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="c82c9268-304e-4491-8b26-ca2dd22f8304">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="dee99fa1-f9d9-4cf9-8673-209258934ba2"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User" id="e744ed1c-c7c8-45f9-96e9-f71d61986e89">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="5de72eac-e395-4323-9f25-8c995ea4a92a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User 1" id="dd344ff3-7970-4c0b-b507-ebff5badeb17">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 1" id="a3a6fa0f-26b9-44a4-af99-df19609e5636">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User 2" id="5f421850-00ce-48d9-857f-e821886e582e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 2" id="f1d63f1b-f2a3-49ba-a4bd-741fc713fce5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="delay" name="Delay" id="a4944dd7-89df-4a32-8b50-ed89922e6b51"><con:settings/><con:config><delay>800000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User 3" id="6b5f686d-2e9d-4af5-aee0-73d47519730f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("expectErrType", "ValidationTokenRetryLimitReached");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 3" id="c64e4b7c-0b86-4eab-9c26-b81475348326">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>1823408762AF0C31E0533D991F0A18C9</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>1823408762A70C31E0533D991F0A18C9</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433911123132@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>ValidationTokenRetryLimitReached</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1823408762A50C31E0533D991F0A18C9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1823408762A50C31E0533D991F0A18C9</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>1823408762A60C31E0533D991F0A18C9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:1823408762A60C31E0533D991F0A18C9</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433911124674</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_c46ca1d4-ad6b-47f6-9bb9-1b798f89968e</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_af85fcca-68e7-4620-8c3e-6ca3f4a4a925</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU/I6EP0rTP3o9L2UtiPMIEUvKqKA6MOXOyENEC0JNikv/vqbFKgUwcu9nzrZbs6e7G5O9oqBWWwFdcZQwjElpdUsJizIrFUlTUhAAcMsIGCGWMBh0Ku3HwJLMwKw26KUWmFV+Rs6LgRm5KggckeqUxm7qj8a+ao5qvje2PN910PClbEUtQjjgPCqYhlmWTVc1TT6hhPYlcD0tHLZGiqlAUqYwBYumqFsSa1YVZlyPg90fblcaktbo8lEtwzD1N/aDz04RTOg1K42J8oCJbWtP9QiBFEcQw3SmX6lF3yuIhb08IQAniZoGys6FcvQDV8XPhHDkwsl34uiFhnTbNkAhBIMQYy/gMxPG/EpjUr1eEITzKezk4cwDQmsohVUoemQC0UvUjsTqMAwYUBlU2BusbpojBJEICq9dFtV5eK8qmVb+wkgbEyTGSsu/xsfRBYopnMUqWx3rC218wGPZKp2hWDQIjBOGV6gR9mscwAR21YTwfOhSk8JGuPVA2aiQVdMstP36R0sN9kI8QQx/n8KtFecDcgAxCmqDV/fP/7qpNb40u4lE5teX8b3H2H/7q3+XM0I7Dtnhry0m+VBU+ZNtNmxBs7roLWKB8359at/+3rrLHr4w2xa89t79+6r79GvaRKGH9MXFr98TR7v4KB5ObRa5XA+fOl78N3nd+af98vnlMZPy+ENs2mj667vnaGLF85gMb1fPrijy95dp7P+bJbxk39zu27PXgeedx2GZGL0jMm6kbRJCz6C6z+Ddt9YT0z2FuvJ4+fzsvNyf/dFmq4BRrSaH2ePf9G2u/O9dPSOIN8tZRu0wtKNqBLgv4uZtOBIHWeuwVyKD+OIcKUmd0ntCFIhdzgKRA03a9OzbMfwKq5Vd42GbTaNsm2Hvm/eGHXTa/g7kdmwOKDYoGSMZSwpuZu2+Z0gnAUMkQgl6oKmQumY8gtiCDgotUhXXAJKGOrTquJ40cg3wUitjIChOhGIVDC2hfiavvgV+UJ1LaX0SHmHdJL6mKOkqM6Vgjp3EcRzjKSEyw5nosUZF1n5BIuUx6a2ABpBqRD5ROptYDleWWd4No+R5KzPaJTGSJtP51mOdLb5WiqALLOaFc9pWpbbqDTs0Chb+7l17Eolu5Qnj3/4b5cp4RNh6cDkQa+RqDY68gYZu1P+yIZ79K3awdfTCMv7J9LOEww3TIq/vrtJtlHeSt1mf0c59zw0FFD1wwPlgaIFhvl9yF91IfZCHmq7Wn0CU/vU0sUizcrjOLaeCHhdqKGp9xBMhXqt+/QDET2H0M96KnLWB5Fze5FfyqekxwFHM9FLpWx5xmzQQ0zOBi1xHVbnDh6FkCJvHK34MVsjFnONZPzr6AMDKP2E+Ul8ljSJvst1BGsvjjinGA04JhO5ks/E+kRTQCpgsRA4muyDHwM4FrxozJOcc+Gim0YpR6f/lKRyVRUAIU0Jb4VKZthX04wnX89R8O30AyYT7HyCw/8+wqk4awEopkXhn+HLhziQ/U8me4q8DXpClMu/iXKRXe2H+adlL0+HPV77Bw==</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVbZcuI6EP0VynlMGa9srkAVYcl4hmxAMkxebilyA0psCSyZJV8/kgEHE8jl3ieX2q3u091HR7riKAptr8k5xIIwWlhFIeVeaq1rSUw9hjjhHkURcE9gb9C87Xl20fTQbotW8Nt17R80rpbGGCO9XIWK7pZtU69iB/QyRs7YRS6q2SXpynkCPuUCUVHXbNMq6WZZt8yh6XpOyXMqxYrpvGiFZ4i5jC1diqa2BbXidW0qxMwzjOVyWVw6RRZPDNs0LWN02xvgKURIa1xtKkoTxY2tPy4GgCEMcRGzyLgycj5XAfcGZEKRSGLY5gpO5TINs2ZIn4CTyYWW7YXAp2OWLluIMkowCskHUv25BTFlQaEZTlhMxDQ6WYRlqsA6rLCOLZdeaEYe2pmBcghjjnQ+RdY2Vh/GEAPFUHjq+3Xt4ryppVuHMaJ8zOKI55f/DQ/QBYRsBoHOd2VtoZ0f8EinGleAPZ/iMOFkAXeKrDOEgW+nCfj8UIWHGMZk1SNcEnTFFTpjH97BctONNpkAF/9nQHvD2QR5RmECjceBXcJhzRqK3mPUrk4oi6q1l+sp/9GspwD2nVNDNtrN8oCUGYk2O5o37IVFP96bQdgZDV6imNw/vJrry1av7Xf+vL2T68pTa+D4D/z3ZbCyrt9/flTIuEug/MHKb/5vfheZy/cF+N1Jh/7q3UVo3ukLNzTLN3bpaSUb+HQ/as5uppejy9qf13ml/9RlXYuLh+VL+ecb9IzyzfPNr47orGsfN61r1yjZj3bTNqIf61Gn3xuxVre9sFpty61n5ezhz9t2Z36QvL4BFrulooHfLnTllJD4XsyUhQT6OHX1Zkp8uAAqtIbapbTDS6TckcCTM9ysrartuGa1UrabZbPlWB2z5DjtWs3qmk2r2qrtRGaD4gBii9ExUbmU5G5o8z1AHHkcaACxvmCJVDqufROxjQQq+LQvDwGjHIZMyrPlwnq5rNXmy/kHs97mVWdmV+JSqSz1+46Je3ofN8cC4rwoV3Ki3AdMZgSUcitic8lsLmQz5miRiNAqLlCRQiK1PVYy69lutWRwEs1CUFCNiAVJCMXZdJa2xuCbr60jzFNrvzNMj9vJwg7/7XogfQKiHLiq5RrkHOHI7WLvCjlZsGXuF7wL30wCok6WbKiICd4gyf/65IkiSEYSWdEOcuZ5aMhFNQ4LyhIFC4Izpmf3tZRxefAbu3HMkVWcF5PFIkkn4LqOEcvwhtQ5yxgATqQurYfsHaiRhTDOugQy1AeZM3seXyKmdCCQgEjSpZAuz7j1B8DVre9Loq/OfVLkUsq+CViJY7ZWKF8sCvG3jxrsYeUnzQ/ys2Rx8DmuI7H28sg65aUvCJ2olboA1idIgZkMS6R0sXg/+LEAx5LnjVmTMyxCsuk1EXD6T0FpUl1DGLOECr+tpYZ9nUxxivUMvE+nL2FSKc7eZuTfH2c6SSmAQb7oOEnjqyvWU/ynkz2t3SY9Ibel7+Q2j67xxfzVstenQ443/gI=</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:1823408762A50C31E0533D991F0A18C9</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>1823408762A60C31E0533D991F0A18C9</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>39eaaefc-aa20-4ef0-9dea-4813c85c0037</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ffea1aea-5220-4b37-9b6f-a01e73d96443</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0186f679-026c-4308-981a-9e0d60fda145</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_025_DTCreate_DCOORD_VALIDATION_TOKEN_RETRY_TIMEOUT" searchProperties="true" id="03081ee7-0ba8-46ba-aaa1-3933100dac3b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7dd6a4d4-2e27-4cf0-bd66-356acdf3fde6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="188e72a5-1896-4546-b934-8622dcf1f058"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="0f9d6dd6-f335-41f5-afc7-2e4beae1f58d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="596c47c6-f1aa-4f3d-aa4b-c0328f4f8917">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="fb01e336-08ee-4837-b46b-9c08b75ee410">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUIDFirstUser", tC.getPropertyValue("assertionUUID"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


tC.setPropertyValue("SAML_RTL",tC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL_RTL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_RTL",tC.getPropertyValue("NODE_USER_ID"));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="f6237c7f-2e6e-4136-aad4-86003adff099">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="aee84a7e-3a72-4480-bdda-7d58c9e5d2a0"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User" id="6e0aa19f-4f68-4222-b5ed-b23d7cee1b9c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="b4a5567a-de2b-4eb4-80d0-3f2036237212">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User 1" id="b2567c6a-40b7-401a-920e-09a4e024cbe3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 1" id="55510b55-7141-42be-a18f-82dd9152bdba">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User 2" id="de0932c4-b0ff-443f-a604-9cee8c9bf29f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 2" id="4320174c-898b-48c5-bb9d-297134b6f904">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="delay" name="Delay" id="0c753723-8fed-47a7-b5df-82fd742cf448"><con:settings/><con:config><delay>896000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User 3" id="93463621-9f91-4050-843b-7c414f9ce8e2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 3" id="7f54e411-d821-4963-8b72-0532ded98028">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>182398C305E62EA4E0533D991F0A1859</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182398C305DE2EA4E0533D991F0A1859</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433912082165@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182398C305DC2EA4E0533D991F0A1859</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182398C305DC2EA4E0533D991F0A1859</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>182398C305DD2EA4E0533D991F0A1859</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:182398C305DD2EA4E0533D991F0A1859</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433912084678</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_efa474e0-8e46-40b7-8330-80dcdd587728</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_38f2bdad-c747-460d-8caa-c48db93e0f2b</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynmcMr4H4wpUESA7TkImA4RK5mVLyG2jiS0TSzaQr1/JgAcTkmX3ydXtVvfpi476iqEkNr0eY5BxktLGOokp80ptR8kz6qWIEeZRlADzOPYmvdG9ZzZ1D+2PKA1/0FH+hhDZLRt01QX7UrX1eUt1LUuIeoCDwHFbLdMVpozl4FPGEeUdxdQNR9UvVUOf6rbnGJ5jNh3n8pfSmEHGhG9h0tSVHag16ygLzpeepq1Wq+bKaqZZpJm6bmjPo/sJXkCClO7VNqMyUNbd2eNmABjiGDdxmmhXWs3mKmDehEQU8TyDXazgs1i6prc1YRMwEl0o1VkIfBqmpdhHNKUEo5i8I1mfEfBFGjR6cZRmhC+ST5MwdOlYhTVWsWHTC0WrQzvTUQ1hxpDKFsjY+RpDCBlQDI2nsd9RLs7rWnl0miHKwjRLWF38b3iAFhCnSwhUtk9rB+18hycq1b0C7PkUxzkjBTzIYV0iDGzXTcDnu2o8ZhCS9T1hYkDXTKLTDuEdidtqDEgEjP+fBh00Z+tkhuIcusPp+vlp/D0rfj4Vz/PXH0938zv6GrXas1WnBHBoXCqq1m7Fo6Gshmh7YuS+2M8prB8ds9hoaES+begN+3ZpLLD/PPORvZnc30bz+NfPRe4WLFu/h/174+GxGA79zSspgiXBbMYTP03o4qVY5EZ6PX+ws/bUsF+uk+LJvTNuTGoOr18M5PZurfX3cTJYaz/RY2rcjvqr363eHZDonfizt/Hy2xvyl4MgS0c9K+BtN8ra1uyvJEoiMupU6Rzgr+v2d36Sz38D5ntRjoE/aNyILiH+NZlJDQnUsDT1lpJ8GAfKla48JbnDywXdkcATPdzKhmtabbdv6c5gYA579lB3LGvQbhs3es9wnfaeZLYojiD2UxoSGUtS7nZsvgaIE48BDSBTizQXTMeULzwOEEcNn47FJUgpg2naUZDbNoK5Zak4NFzVDtxQnWOrrYYGtEPLDUIbHKXxkPIf9EfWCzlkdXZu1dh5DJgsCUgKlxPOxIgzLqryhoqcx0azQE0KuSD5TPKtZ9quozGSLGOQmLUkDfIYmsvFsqyRxrZfU0WYlVqj5dpD07zst/rWQHfMw9raVqtVXspP0z/+t6+UsAmINGAy0WsQ3YYTb5C9z/JDNS5PvlV79708IPL+ibLzjOAtkvqvP9Mkx6gapfFwuodcWR4ral6144SqQEFBcHUfqlddkL2gh+6+V2/IaL4186LIy/bYtqVlwr0m2NDQJoBzwV6bafoKVKtcaGc9FRXqo8iVvo4v5ws64YhDImapUYpn7AYTYHI38MV1WJ+7eNRCirpxWPNTun4s9hqJ+MvVB3tY2gn1o/is0iz4064Tvg7iiDzFasAJjaQkn4nNJ0OBU+GWCIJLs0PnpxycCl5XVkWusHAxTfOcw+d/GpK5BHNgnOaU+wOlVByyaYmTb5bg/TH64KYk7GqDI/++wqmkHAEMYu9jpPQvH2JPzj+NDhh5F/QTUu5/Rcp1dN0P6o+agzodz3j3Hw==</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0Vynnc8g0wwa5AFbdMPOGSALlMXraE3GBNbNmxZC7z9SsZcDCBLLtPLrXa3ae7j450w1AYlJ0WY5BwEtHSOgwoczJrQ0kT6kSIEeZQFAJzOHYmrUHfKWuGg/a/KCW321D+rtTn5ZmHPBVfV6/Vas3w1DpGSMXVujezK2CIbeHKWAouZRxR3lDKhmmpRk01jalRdSzTqdS0Wt14U0rPkDARW7hohrIDtWYNxec8dnR9tVppq4oWJQu9bBim/jroT7APIVKaN9uKskRJc+ePNQ8wBAHWcBTqN3rB58ZjzoQsKOJpArtc3rlchm7YuvDxGFlcKfm/4Ll0HmXLDqIRJRgF5A+S/RkA9yOv1AoWUUK4H54twjRkYBXWWMVmlV4pehHahYEKCBOGVOYjcxdrDHNIgGIoPY3dhnJ12dSyX6cJomweJSErLv8bHqBLCKIYPJXty9pBuzzgiU41bwA7LsVBysgShpKsMcLAdtMEfHmo0kMCc7LuEyYIumYSnX4I72i57UaXLIDx/zOgg+FsgzyjIIXmY9Rz2/pj0rrXQxgvRr2yN/MHlt17XTUyAIfOmSEf7XZ5RMqcRLvwaVSPB49ty/r19vPXRodZ592YVvu9Cq3x/u9R8HqLRS1+b/kyMNcWmupvyCRPlfma/Wnf/UjCwS1pD+/Slj9m66cN/E5D83kY3Le9H6/rOzudDEfTh77VmTzbG33umqv78cyNDbbop/b1ouuy8Qdq3S95bzqMO+7Pl3C8eTGBb/we1My7AbLYWzJpweiv1a7cI/xF2/7MT9LZb8B8v5Q0cLulWzElxL8XM2khnjrPXJ1Yig/jQLnSlH9J7XBSIXfEc8QMt2uzXq7Y9U7FsLrdcq9V7RlWpdK1bfPWaJl1y96LzBbFEcROROdE5pKSu6XN9wBx6DCgHiTqMkqF0jHlm4hdxFHJpWNxCCLKYBoJea4ze7ac+Zh7ydx8Z8w2P5az9821qZSGER/RUdKac0iKmnxd0OQxYBITkMItec0EsRkXvfhAy5QHprZEGoVUSHsiVdYpV+uWzkgYByCR6mHkpQFosR9nndHZ9ltWEWaZddybZqftbF3He/sWCB+PSAcma2mDGCOcuFzK+0LOFmwahwXvw7dSj8iDJfrJE4K3SIpbnzSR/Mg5IiraQ849jw2FqPpxQXkib0lwTvT8uhYqLs59cz+OD2RqH1q6XKbZBKrVip6I8LqQOVOfAE6FLG2m0TtQPQ+hX3QH5KiPMuf2Ir6U+3TCEYdQ0KWULS+49CfA5KXvCp6vL31RFFKKvnFY81O2TiAeLBLxt28a7GDpJ8wP4rOKEu9zXCdiHeQRdYo7nxO6kCup/5szpMCRCEuEckXJYfBTAU4lLxrzJudYuGDTLOVwfqckJamhIIyjlHK3q2SGQ5nMcPJNDM6n05cwmRLnTzPy728zlWQUwCAedIxk8eUN60j+08WB1O6SnlHbzndqW0TX/GL+ajno0zHHm/8A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:182398C305DC2EA4E0533D991F0A1859</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>182398C305DD2EA4E0533D991F0A1859</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>39eaaefc-aa20-4ef0-9dea-4813c85c0037</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ffea1aea-5220-4b37-9b6f-a01e73d96443</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0186f679-026c-4308-981a-9e0d60fda145</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_026_DTCreate_after_DCOORD_VALIDATION_TOKEN_RETRY_TIMEOUT" searchProperties="true" id="c1b60287-4377-45b5-920d-4f019c77e6e5"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d8c1087c-4c23-4f07-8159-87329318a692"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="40561341-7273-4777-842e-3c7a6a3dfc7b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="0bf58f02-1a23-4688-8228-71306df661af"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="9cc3217b-8f26-46c3-a889-af563a3b9d03">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="cf411b15-af90-43b6-a504-4be1812016bb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUIDFirstUser", tC.getPropertyValue("assertionUUID"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


tC.setPropertyValue("SAML_RTL",tC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL_RTL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_RTL",tC.getPropertyValue("NODE_USER_ID"));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="9d63215a-35c3-44f1-bd20-b1356256c192">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="417b0202-1e16-46f0-8940-0721cf9c405f"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User" id="0bcdfbe3-11f5-4918-a4bd-3e056b5479b7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="08d45a06-0edc-4269-b8e9-8cbb67d20cbc">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User 1" id="ace8ecd7-9e0f-4bf5-a56b-de1071bd2a67">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 1" id="48ac7021-7dd0-4975-b6b8-b943da30c442">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User 2" id="a1d5fbe5-b703-4d59-acd7-efe8bcec15f1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 2" id="a870ac52-34ba-4fbf-89a8-3271080f3e91">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="delay" name="Delay" id="2016e546-a150-41c9-9903-232de03a269f"><con:settings/><con:config><delay>900000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User 3" id="e0b8b5aa-9247-4a3b-beb8-b3d135b01f49">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 3" id="d1d44b3b-0a5f-45d1-823f-32302f142f96">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433912145516@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09794D8382D426A4E05307991F0A8400</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09794D8382D426A4E05307991F0A8400</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09794D7F5EBD26C4E05307991F0AE82F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09794D7F5EBD26C4E05307991F0AE82F</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1417787352180</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_3ae9cee1-f6f9-45ba-8923-5a644617befa</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_25a02c4d-9f23-4321-8a6b-a3d85a2cfb81</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc9o6EP4rjPtsfMHGlwnMAIbGzbWQpqQvZ4Qsg1pbNpLsQH99JQMuJiSHc548Wq++/bS7+rRXDKSJ6Q8YQ5TjjLQ2aUKYX1l7SkGJnwGGmU9AipjPoT8b3N36Zlv3wWGL0gqDnvJPByAPImSocTf2VMteANX1zI5qg65ldQ1ngWIgXBkrUEgYB4T3FFM3LNUwVd1+Mixft32j2za7xg+l9YwoE9jCpa0re1Ib1lNWnOe+pr2+vrZfO+2MLjVT1w1tfnc7gyuUAqV/tTtRFYj29/6wHSGIkgS2YZZqV1rD5ypi/gwvCeAFRftY0XuxdE33NOETMbz8pNR7URSSOKuWI0AygiFI8G8g83OH+CqLWoNkmVHMV+m7hzB0CayiDVShYZFPitakdiFQgyFlQGUrYOyxpihGFBGIWt+mYU/5dFnVqq1PFBAWZzRlzeV/44NIiZIsR5HKDsfaU7sc8Eym+lcI+iGBScFwie5ls+YAIravJoKXQ7UeKYrx5hYz0aAbJtlpx/ROlrtsBHiJGP8/BToqzg7kGSQF6jvR5/v8NTK25goTltMvC2t78zUOvs1fehWBY+fKUJd2tzxpyrqJdjvofDaO78ty4SWF1/3+4zEcPwyXW9OdGmucTr5QOwbejKaOc1ds4HDp3nx/KO2vIz564U/LL8MgDJ9tYz34wcuRZ9/TF+OlnGzcgXbTMebT4V1mD2csKWZ28XNTBMzl1+vVhAdLe85hvp0tfv+aM3C7+fxcUne9uL9GD89jk4ajmDp2J7+5hl5wbT1r35fzu159nCP+Tdvhzs+KxU8E+WEp2yAMWhNRJcA/FjNpwZEaV65+LsWHcUS40pe7pHb4hZA7HPmihru17jmeFTgTezwMzO7IGut2R3c8z5jog7FrTg4is2NxQnGUkRjLWFJyd23zMUGY+gyRCFG1zAqhdEz5ADEAHLRCMhWXICMMPWU9xXU83YOertqGvVAty3FVYC8cNbaBZ5iWu7AcW2ndZ/yBPNBBzBFtqrPTUOcpgjjHSEq47HAmWpxxkZU1KAueGO0StAkqhMhTqbe+wLc1htM8QZKzlmZRkaB2vsqrHGls9zVVAFllHemj8cQd6+5obIycoDvWLV3mVbdFfk19WF3Kd49/+u+QKeETYenA5EGHSFQbnXmD9MMp32TDPvtWHeAHRYTl/RNp5xTDHZPmr7/dJNuobqXp+OlAufY8NTRQtdMD1YGiEsP6PtSvuhB7IQ/9Q63WoL1uF2VZVNVxpAxSAa8JNTS0GYKFUK/tU/YLEa2G0C56KmrWJ5Fre5NfwVdkxgFHqeilVrW8YDaYISZng1Bch82lg0cjpMgbRxt+zjZKxFwjGX84+kAfSj9hfhSf14xGf8t1BusojjinGA04Jku5ks/E9p2mgJmAxULgMnoMfg7gXPCmsU5yzYWLbloUHL3/pyWVq6cACLOC8DBQKsOxmlY8+TZH/l+nNzCVYNcTHP73EU7FVQtAJOY+hit8+RD7sv/J8kiR90HfirLbcc3AMruDhii7lq7XSWmw678xv7Uc5em0x/t/AA==</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZtU/I6EP0rTP3IlL5Q3jrCDAhc66OogIh+uRPSUCJtAk1aKr/+JgUqRfFy76dOtpvds7snJ7lmIPBNu80YCjmmpJAEPmF2am0qUUhsChhmNgEBYjaH9qj9cG+bJd0Ghy1Kwek2lb/NCtBNaLlqY26WVatsGmodVGcqKLv1CjDhfFY3hCtjEXII44DwpmLqhqUapqpXxkbZtmp2WUQuV9+VwgSFTMQWLiVd2YNKWFNZcL6yNW2z2ZQ25RINPc3UdUObPtyP4AIFQGld7ypKE4WtvT8suQgi34clSAPtWsv5XLvMHmGPAB6FaJ/LPZdL1/SGJnxchr0rJduLXIfMabq8AYQSDIGPt0D25wHxBXULbd+jIeaL4GwRhi4DqyiBKjQscqVoeWgXBsohDBlQ2QIY+1hDNEchIhAVXoZOU7m6bGrp1nEICJvTMGD55X/Dg0iMfLpCrsoOZe2hXR7wh061rhG0HQL9iOEYDSRZVwAitp8mgpeHKjyFaI6Te8wEQRMm0WnH8E6Wu250sYcY/z8DOhrOLsgE+BFqseGgP7yLu53y5MkZvnQf7nTrdnlbrgRvzRTAsXNqyEa7W56QMiPRbkdfGzjs2VpPJ+jFND+qb28Pc6146zKtqIe0Whwnescrmq/z2+Ln9L3DOvHAGz1W1mD19Nad/sVGz+uZpm/jgTX0NuPt2+LPknkTgwa1em9TH7jBZur14vH2tQaXgznvvKJtchOC7cSZdR/9SVKesWligfrGrXwmd++sVnyfbpcPgw+kO/Sm91y8bzwuX/UFp7CZlXOEP287nPlRNPtAkB+WkgZOt9AXUwL8dzGTFuyq89TVXknxYRwRrrTkLqkddiTkDru2mOFurTdqDatb61d6na5ZvbF6eqWs1xoNo6+3e3WzfxCZHYoTiDeUzLHMJSV3R5vfAcLAZoi4KFRjGgmlY8ovEbuAg4JDhuIQUMLQmAp5Xka6xz23sYmttRFVvM9axXQ/Gn5VKQwofySPYXvOUZjX5GpOk4cI4hVGUrglr5kgNuOiF2sQR9w3SjEoERQJaQ+lytqmVa9oDAcrH0mkWkDdyEel1WKVdkZju6+pAshS67A3Tk/b2bpO/x1aIHxcLB2YrKWDxBjRD5eLeSjkfMGN44IP4duRi+XBEv3kIYY7JPlfXzSR/Mg4Iio6QM48Tw25qNppQVkiN8YwI3p2XQsVF+e+dRjHGpTWpSiOo3QANalvoQivCZkztBGCkZClzzFdIqJlIbSL7oAM9UnmzJ7HF/EFGXHAUSDoUkiXF1z6I8Tkpe8InieXvihyKUXfOEr4T7YbXzxYJOJf3zTQhtJPmJ/EZ0ND92tcP8Q6yiPqFHc+x8STK6n/n2dIAakIi4Vy0fA4+E8BfkqeN2ZNzrBwwaZZxNH5PwUpSU0FQEgjwp2ukhqOZTLFyT9XyP5y+hYmVeLsaYb//W2m4pQCEIkHHcNpfHnD2pL/xDuS2n3S72pbL9fNrmVW2zm1rVu6njUlh671zfzdctSnU463/gE=</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:09794D8382D426A4E05307991F0A8400</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>09794D7F5EBD26C4E05307991F0AE82F</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>39eaaefc-aa20-4ef0-9dea-4813c85c0037</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ffea1aea-5220-4b37-9b6f-a01e73d96443</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0186f679-026c-4308-981a-9e0d60fda145</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:tearDownScript>if(context.expand( '${#Project#runTeardown}' )=='true')
	{
	log.info("Executing TearDown for Suite '" + testSuite.getName() + "'");
	
	for ( testCaseResult in runner.results )
	{
	   currentTestCaseName = testCaseResult.getTestCase().name;  
	   currentTestCase = testCaseResult.getTestCase(); 
	   log.info("Current TestCase : '"+ currentTestCaseName + "'");
	   log.info("Current TestCase Status : '" + testCaseResult.getStatus().toString() + "'");
	   
	   if ( testCaseResult.getStatus().toString() == 'FAILED' )
	   {
	      log.info("Re-executing failed TC");
	      def currentRunnerTC = currentTestCase.run(null, false);
	      log.info("Status on re-execution : '" + currentRunnerTC.status + "'");
	   }
	}
	log.info("Execution of TearDown for Suite '" + testSuite.getName() + "' Completed" );
}</con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="4_DTCreate_Node Role_CREATED_BY_NODE_OID" id="5dea510f-fa18-4ce4-87c8-d142bbdc5a16"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_001_DTCreate_RTL_User_created_by_node_LLASP" searchProperties="true" id="e0ed5199-919f-4881-b13a-53c33e7855e1"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f39307dd-92b4-40d8-9101-5716343cc838"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdLLASP"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="63887c05-71f6-4a12-a9be-89845b048499"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="62a59346-7ea9-4765-96d7-c8e9793630e5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="f5a0ad51-b141-4685-a788-94f2efcd936d"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="48f1e5f8-054b-4f73-9a38-3883eb8105b2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="a1edc2b6-bd19-4837-a7f3-60b9a4a9f2a6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="8cd2f091-5943-4fa6-9ee8-3e2574c0a700">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="f052e4a6-e313-4f9f-8098-0f1a32fcb042">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL2"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="e45ff33a-be7a-4a11-9521-68435e582f02">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B37DBA506F2201E05307991F0ABD36</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B37F7ED47421F7E05307991F0AFFEB</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418037631153@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B37F7ED47321F7E05307991F0AFFEB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B37F7ED47321F7E05307991F0AFFEB</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B37DBA506E2201E05307991F0ABD36</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B37DBA506E2201E05307991F0ABD36</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418037632673</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_7fee70d8-54fd-4d56-956f-b0a17c9261e5</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuo4FP0VlPNYhTghIRAVJCCgpvTCQC+cvoyM44DbxKaxA7RfP3aAHEJphxmpEvXO9tprX7zsSw6T2PI6nONUEEYrmySm3MutLS1LqccgJ9yjMMHcE8ibdG5vPKsKPLjfolUCv6X97UYYuyBs6I4dhbodOnW96dQjfQag6aKmVTexI105z3BAuYBUtDQLmLZuWjpoPJimZzblX7UBrBet8oRTLrGlSxVoO1Ib3tIWQiw9w1iv19V1rcrSuWEBYBrT25sJWuAEau3LbUZ5oLS980fVECMcx6iKWGJcGiWfy5B7EzKnUGQp3sUKv4sFDNA0pE/IyfyXVuzFYUAjli97kDJKEIzJJ1T1ucViwcJKJ56zlIhF8m0SJlDAOt4gHZk2/aUZZWpnApUYphzqfAHNHdYYRzjFFOHK4zhoab/O61q+9SGFlEcsTXh5+d/4YLrCMVviUOf7tHbUzgc8Uan2JUZeQFGccbLCd2pYlxBhvusmRudDVUYpjsjmhnA5oBuu2BmH9I6W22r4ZI65+D8NOmjOFuQJxhluT96mz39dPX6+XAzHa5Yt3ebs/rr/GNKF3coJHDrnhqK12+XRUBZDtN0RQPT0Li6e6bD+cvG6+Zz8DjbRzdD4Pfxodl5G46B7MVov3hjrv5KOsxmPnfHwZZnempGTOumgzqb34dtgUm/Owon5AKfj39ePvjGN66NgaFw98avP0cWzObrx3ev+yE/s5tWrafYif/oefj6bWdJg12sUvk+Gq9rdK70XZFnrXuHY/HzZrOCUkfHAuBktG83r+8dWkc4B/7Jtf+Yn2ewVI7FfqjEI/MpAdgmKn8VMWUioR7mrt1TiwwWmQmurXUo7vEzKHQk92cPtGjS7NdfvdhxQ71tSyPrAqQG32TQHoNP1a/W9yGxZHFHsMRoRFUtJ7nZsfiaIEo9jGuJUX7FMKh3XfkD0oYCVgI7lIWCU4wfW0hzXsrANZrobzuq67YahPoM20mcIA7cBUQM2LK1yx8Q9vU87kcBpWZ3tkjqPMSJLgpWEqwnncsS5kFV5h6tMxGZ1BasUZ1LkU6W3nmU3HIOTZBljxdlIWJjFuLpcLPMaGXz7a+kQ8dzaA73+oNEHjV7f7Ll+vQ9soOoKHFlfC3TzQ/lt+sff9pWSPiFRDlwl2sWy2/jEHQT2WX6phnPyrtrDd7KQqPMnyy5SgrZMyp/+TJMao2KUxv2HPeXC89hQQjWOEyoChSuCivNQ3OpS7KU8tPe9eofV92q2WmV5d1wlg6mEN6QamsYEo0yq18cDe8PUKCCMs66KgvVR5MJe5peJBZ0IKHAiZ6mSL894G0wwV2+DQB6HzbkPj1JIWTeBN+KUrRfLd41i/OPTB3lI+UnzSP6sWRr+adcJrIM4Mk/5NBCEztVKXRMf3wwFYhKWSIFj6SH4KYBTwcvGosgFFyGnaZYJ/P2XilKulgYRYhkVga/lhkM1zXmKjyX2/jh9gckFu3jBkX9/wukkHwGE5buPkxxfXcSemn86P1DkXdAvojxw+77t1ixT/nMgyoNBv1sUpcSu/cX81XJQp+MZb/8D</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_002_DTCreate_ACSPTL_User_created_by_node_RTL" searchProperties="true" id="ada6022c-a2d9-4aba-b9e4-e1857d275b16"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="83a941bd-50cf-4992-8d61-bb0c3d74c7fd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="e47af3d7-2263-43d7-af88-68dc0c261585"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="cf8f9c0e-78c1-46ad-bad2-697e6abd768d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="b778309c-9522-4a92-8235-c3f8a6c53534"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="f66963a7-28e7-47ad-b222-c019c8e5681c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="d3a438de-cf6a-441c-bda1-6355997e7aad">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="d283f069-2c95-459c-9bed-a846b2236812">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="508e35c3-97d5-4c64-b185-25ea7c8f566c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdAccportal"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="bd8f3061-b4d2-4f68-a415-52dba259bbd6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>09B37FD906B97722E05305991F0A0783</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>09B37FD906AD7722E05305991F0A0783</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418037694454@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B37FD906AC7722E05305991F0A0783</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B37FD906AC7722E05305991F0A0783</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B37FD906B87722E05305991F0A0783</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B37FD906B87722E05305991F0A0783</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418037696044</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_1d98586f-effd-49b5-a12d-b69a904f6e17</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtc6o6EP4rDudjB3kREJjqjK+tt9X2aNvT0y930rBoTiFQEtT2198ElYq1vd77icmyefbJ7ubJnjMUR6bfYQwyThJaW8cRZX5hbSl5Rv0EMcJ8imJgPsf+rDO+9s267qPdFqU26reUv43Ac23XCVUIw0C1vGdbRYYZqM+OhzzdCh0wmsKVsRxGlHFEeUsxdcNSDVPV3TvD8E3dN7y667hPSu0BMiawhUtdV7ak1qylLDhPfU1brVb1VaOeZHPN1HVDexxfz/ACYqS0zzcnKgJl7a0/rgeAIYpwHSexdq5VfM4D5s/InCKeZ7CNFXwVS9d0TxM+ASPzH0q5F4IRDZNi2UM0oQSjiLwjmZ8x8EUS1DrRPMkIX8RfHsLQJbAKa6xiw6I/FK1K7USgCsOMIZUtkLHFmkIIGVAMtfvpqKX8OK1qxda7DFEWJlnMqsv/xgfoEqIkhUBlu2NtqZ0OeCRT7XPA/ojiKGdkCRPZrCnCwLbVBHw6VO02g5CsrwkTDbpmkp22T+9guclGn8yB8f9ToL3ibEAeUJRD+zGxHpdOpDPrj23qZNj5Fd/fXt7dBOS+VRDYdy4MZWk3y4OmLJtosyPtG4+D1cD1ml3jYpL0Lq0gvB4yY/Lrmp7dvg4f+Y3VeMzRWTTpeu+/79czK03Nn7eBfjE+G5oRNQaLW4+PeuP+Ymb/deO5ob0c80ag3f+cwzhtvPUvpnd0dXU2se31ZLJAln7/ZHs8irtPbzSYOM7zFL1fXdCpk7++LDLW7xr65SBPgqvr3Bs6TPMelq+/Le2lVR5nj3/Vtrvzs/z5D2C+W8o2GPVrQ1ElxL8XM2khgRoWrn4qxYdxoFxpy11SO/xcyB0JfFHDzVr3uo3msO/pTtdtNk1zoNsN3fY8Y6h39Kbb2InMhsUBxV5CQyJjScndtM33BHHsM6ABZOoyyYXSMeUbxD7iqDaiU3EJEsrgLmkpruF4ZjM0VcPzPNVqAlKRGzbVEBzPdQyjEYRIqU0SfkNvsk7IIauqs1VR5ylgkhKQEi47nIkWZ1xk5RUtcx4Z9SWqU8iFyGdSb33Tcm2NkTiNQHLW4iTII6ini7TIkcY2X1NFmBXW3rDTHHrmwGj2urZldwe6pRd5Ffm1OgO3uJRfHv/w3y5Twicg0oHJg3ZBVBuOvEH67pSfsmEffat28J08IPL+ibTzjOANk+qvj26SbVS2UqfXG8xmO9al86GhAqwdnqmMFSwJLq9E+bALvRcK0d6V6xXVX+v5cpkXBWpKJcwEvCYE0dBmgHMhYG93yQtQrYTQTnotStYHkUt7lV/OF3TGEYdYtFOtWJ4wHsyAyfFgJG7E+tTZoxJS5I3Dmh+z9SIx2kjG304/2MfST5hvxWeVZMFHuY5g7cUR5xTTASd0LlfypXj7oi9wImCJ0Lgk2wc/BnAseNVYJrnkwkU3Peccvv5Tk+LVUhDGSU75qK8Uhn1BLXjytxT8D6dPMIVml0Mc+fcpTiVFC2AQox8jBb58i33Z/3S+J8rboMd1udP7Tper7NqfzJ8te3k67PH2Pw==</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_003_DTCreate_LLASP_User_created_by_node_RTL" searchProperties="true" id="5763dd5d-476b-4c63-a991-dbd04492e682"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="655ad4ad-da76-4d69-810f-f2ce88f5800d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveLLASP"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="d3ad2e70-7591-45f2-a5f5-2261c1b7b58a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="0feee679-6447-4172-8f70-9c440feec232"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="9ae2f296-85de-49db-90e7-9435ea671853"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="c29320be-9356-4842-98e5-8106582eca23">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="01151a85-0f1a-4c75-99c6-e7d64d7e8a4b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="96a8981b-7e3c-4908-9a48-11c16d53c4c3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="9f31cefe-0d20-4d2d-86f1-8533ee16fa85">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdLLASP"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="f94d972c-1271-45a9-996b-bf1b045a2380">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B37DBAF0F97734E05305991F0A4A3E</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B37DBA4D6D772CE05305991F0AEE82</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418037751528@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>87648</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B37DBA4D6C772CE05305991F0AEE82</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B37DBA4D6C772CE05305991F0AEE82</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B37DBAF0F87734E05305991F0A4A3E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B37DBAF0F87734E05305991F0A4A3E</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418037753048</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_6705b47b-3667-4d62-9dd6-69b88aabb376</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtc7I6EP0rDs9n5EUUYaoz+Nb60tqq7bT9cieEoGkxYBLU9tc/CSoVa3u99xOTZXP2ZHdzslcMLCPT9RhDlOOYlLbLiDA3szaUlBI3Bgwzl4AlYi6H7tS7HblmWXfBYYtS6ncayj81W6/6lu2rlVrNVq2gZqpOENTUmuPX6wD4fsWuCVfGUtQnjAPCG4qpG5ZqmKpenxmGaxquUS+bjv2qlJ4QZQJbuJR1ZU9qyxrKgvPE1bTNZlPeVMoxnWumrhva8+1oChdoCZTm1e5EWSDa3PvDcoAgiiJYhvFSu9IKPlcBc6d4TgBPKdrHCn6KpWu6owmfgOH5HyXfi4I+CeNs2QYkJhiCCH8CmZ9bxBdxUPKieUwxXyx/PIShS2AVbaEKDYv8UbQitQuBCgwpAypbAGOPNUEhoohAVHqc9BvKn8uqlm2dUUBYGNMlKy7/Gx9E1iiKExSo7HCsPbXLAc9kqnmFoNsnMEoZXqM72awJgIjtq4ng5VCle4pCvB1hJhp0yyQ77ZjeyXKXjQ6eI8b/T4GOirMDeQJRipr0KcBjxuKbPugC+PG64pu5vkreXyfzRkbg2Dkz5KXdLU+aMm+i3Y673rNRpW+fGn+jyXA9qnbNObsOPh9GK3i/gZR7Zuc9BMPx072zTjfvvjW08YDZ13eLTbQYJGYLBL41uHvRbIyjhwEee4+0kvSH9kfV37wsemmE/Rt+zd9eB4Nwphn+yu+/Ptw/axpN/d7D8H3+aA+fro1Jb/W4GW9eZjdPwzCd6b3QmH5WJ51JxzEGrQfv/aGRH+eIf9F2uPPT1H9DkB+Wsg36nVJPVAnw38VMWnCghpmrm0jxYRwRrjTlLqkdbirkDgeuqOFurTutit1peT29V7ftitXVqxW96jhGT/csr9I9iMyOxQnFdkxCLGNJyd21ze8E4dJliASIqus4FUrHlF8QO4CDUp9MxCWICUOzWMhoaANoVnXVcGBFtUJf3PNKxVEtKzQRQJZTdQKldBfzMRlTL+SIFtXZKqjzBEGcYCQlXHY4Ey3OuMjKCqxTHhnlNSgTlAqRp1JvXdOqVzWGl0mEJGdtGQdphMrJIslypLHd11QBZJm1rbe7vXpXr7c7dtvu1Lq6pcu8Zvk19VZ2KX88/um/Q6aET4ClA5MHbSFRbXTmDdIPpzzNhnn+rTrAe2mA5f0TaecUwx2T4q+vbpJtlLfSaORN7w+kc99TQwFXOz1SHipYY5jfiPxdF3IvBKJ5qNYKlFfldL1Os/rYUgipgNeEHhraFMFU6NfHLH5HRMshtIsei5z1SeTcXuSX8gWZcsDRUnRTKVteMB1MEZPTQV9ciO2lo0chpMgbR1t+ztaOxGQjGf86/EAXSj9hvhefTUyDr3KdwTqKI84phgOOyVyu5EPx8UNbwFjAYiFxMT0GPwdwLnjRmCc558JFN/kpRz//KUntaigAwjglvN9RMsOxnmY8+UeC3C+nbzCZZOczHP73IU7FWQtAJCY/hjN8+RS7sv/J/EiT90HPybLVqbVt22wfy3K3WzfzpBTYNb+Zv1uO8nTa482/</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_004_DTCreate_DLASP_User_created_by_node_RTL" searchProperties="true" id="b65f6e16-5231-42b8-84af-d4bd76fafac2"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="783a85c6-7093-402b-9d4f-de0ad9e72672"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="be346845-4488-41ab-a442-6e5312068857"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="89bf369e-62a6-4755-80b2-7dd102b251ed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="8ae6bd0a-b2b0-49e0-b8ce-20a62a6176e4"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="b4ee442c-1cf3-499f-a6be-f92215a4adf7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="ef105294-06c1-428d-9f03-67d6905ee486">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="da63fd28-bb51-43e0-89b2-546ab0433589">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="c1aaa2c7-e5bf-42d0-9506-6f29a7d39ef1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdDLASP"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="919225b2-fcf0-4e3e-b152-ab3094c5f3af">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>09B37DBA52B02201E05307991F0ABD36</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>09B37DBA201B7716E05305991F0A9E90</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418037809757@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B37DBA201A7716E05305991F0A9E90</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B37DBA201A7716E05305991F0A9E90</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B37DBA52AF2201E05307991F0ABD36</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B37DBA52AF2201E05307991F0ABD36</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418037811237</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_35566188-3c4a-4076-b9ba-77456154dee0</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtc6o6EP4rDv3YQV4EVKY6g2CnnNoeq/a0p1/uxBA1PZAgCWr760+CSsXaXu/9xGTZ7D7ZffJkrxhIYtP1GEMZx5TUNklMmFtYO0qeEZcChplLQIKYy6E79u4GrlnXXbDfotTCoKP807BtxzFaLbUBLaBaetNRp+0pUJtNy3YM24oQ0oUrYzkKCeOA8I5i6oalGqaqtyaG4Zqmazh1p6W/KLVfKGMitnCpi11bUBvWURacp66mrdfr+rpRp9lcM3Xd0J7vBmO4QAlQulfbExWJsu7OH9YjBFEcwzqkiXalVXyuIuaO8ZwAnmdolyv6Kpeu6W1N+EQMzy+Uci+KQjKjxdIHhBIMQYzfgazPHeILGtW8eE4zzBfJl4cwdBlYRRuoQsMiF4pWhXZmoArCjAGVLYCxizVCM5QhAlHtcRR2lIvzulZsnWSAsBnNElZd/jc8iKxQTFMUqWx/rB208wOeqFT3CkE3JDDOGV6he0nWFEDEdt1E8PxQtWGGZngzwEwQdMMkOu0Q3tFyW40AzxHj/6dBB83ZBvkF4hx1H0bXk15v8HvxNHzREudukfrTYAmWCfY6BYBD58JQtna7PCJlSaLtjsGkf3k5efidaKs5eZ9Pl0n81G7erAbUSuCtd/v6nFF8PRqmG8T0gZY//uCpp8VP44eFNf5j3PjPfnwf+hN6M9LuN07DjL23YPruv8747eUomAxuPW/1NPRG47fpYzhzuBW9JCm4pX3SC19eHvh8aM0W70n0/AOTKV7Tpm3Hy2H2OOmN0vVAS/yWMXxvrnD42CmPc4C/atvf+XE+fUWQ75eSBmFQuxZdAvx7MZMWHKmzwtVNpfgwjghXunKX1A43F3KHI1f0cLvW271GM+h5tuldm0LI+rrd0JvttnGte72g4exFZoviCKJPyQzLXFJyt7T5HiBMXIZIhDJ1RXOhdEz5JmIAOKiFZCQuASUMTWhHsaDZjtB0qjYNJ1ItYJsqaInLrk9tZNlg5rQcobP3lP8kPzNvxlFWVWeros4jBHGKkZRwyXAmKM64qMoSrHIeG/UVqBOUC5HPpN66ptWyNYaTNEYSs5bQKI9RPV2kRY00tv0KSJAVVl/3+9etvt7yA99vBk5ft3RZV90W9TX1XnEpvzz+8b99pYRPhKUDkwftIdFtdOIN0ven/FQN++RbtQ/v5RGW90+UnWcYbpFUf32wSdKopFIw8MbDPejS99hQiasdH6lMFa0wLG9E+a4LuRcC0d13awnqy3q+WuVFf5pSCDMRXhN6aGhjBHOhX28T+gcRrQyhnfVYlKiPMpf2Kr6cL8iYA44SwaZasTxjOhgjJqeDUFyIzbmjRyWlqBtHG37K5sdispGIvx1+oAulnzAPxWdNs+ijXSdiHeQR5xTDAcdkLlfyoXj7ghaQirBYSBzNDoOfCnAqedVYFrnEwgWbpjlHX/+pSe3qKABCmhMeBkphONTTAid/S5H74fQpTCHZ5QyH/32IU3FBAYjE5MdwEV8+xa7kP5kfaPIu6SlZFuTxmkLsClm2t7Lc7rc/+FlB1/1k/mw5qNMxx7t/AQ==</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_005_DTCreate_Portal_User_created_by_node_RTL" searchProperties="true" id="94790442-fafe-4a78-b483-925f0fdaec61"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="25b0046f-7ae5-4078-9c72-89ba1ae27163"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="a21e21e2-8251-47b5-b4db-009d9aa82def"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="d7813876-cd59-4309-afd6-c9b63d6f0c91"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="73fd330c-08e1-4e30-afb2-643e05796fa6"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="0ad5f769-a55b-4fbf-9910-06d56166bf47">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="125f1402-0875-40cd-b9bd-305ab8dc61f1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="3d71fb72-4b00-48db-9914-a9f96bd711c7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="af4d8a6d-a01a-427c-a818-7c2325b1f946">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdportal"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="1f2612e0-b8ed-443b-9ad1-aff68bc71315">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>0FBEC31EBB3607B1E05305991F0ADC5A</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>0FBEC2611A5307C3E05305991F0A9EA7</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1424684126616@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0FBEC2611A5207C3E05305991F0A9EA7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0FBEC2611A5207C3E05305991F0A9EA7</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0FBEC31EBB3507B1E05305991F0ADC5A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0FBEC31EBB3507B1E05305991F0ADC5A</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1424684130838</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_92a08608-7498-4064-8c73-b059cf311014</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtc6o6EP4rDudjBwkgVZjqjG89l9t3tfXYL3diiBoPJJQE1P76k6BSsbXXez8xWTa7z+4+eZIrDqPQ8tqc40QQRivrKKTcy61NLU2oxyAn3KMwwtwTyBu27249qwo8uN+iVfxeU/vHtSBoXIKGXq+5Db0GLmt6A9VtfQocF81s0wRmTbpynmKfcgGpaGoWMB0dWLplj4Dr2bZng6rbsF+1ygtOuIwtXapA24Fa86a2ECL2DGO1WlVXdpUlc8MCwDR+3d0O0QJHUGtdbSvKEyWtnT+qBhjhMERVxCLjyij5XAXcG5I5hSJN8C5XcCoXMIBrSJ+Ak/kPrdiLA5/OWL7sQsooQTAk71D15w6LBQsq7XDOEiIW0ckiTKAC63iNdGTW6A/NKEM7M1AJYcKhzhfQ3MUa4BlOMEW48jzwm9qP86aWbx0lkPIZSyJeXv43PJhmOGQxDnS+L2sH7fyAX3SqdYWR51MUppxk+F6RNYYI8900MTo/VOUxwTOyviVcEnTNFTrjEN7RctuNHpljLv7PgA6Gsw3yAsMUt26z+f34gri3l2MySen7zwcCs87srj3tN3MAh865oRjtdnlEyoJE2x03Fu1Peo7NHu+mTwZY1Qz7FQ/BCKzqDZDM+7XsfuFDJ75gWaPn3lxOHgabruMwE81G5qj29/Wz33ltZPH4uX5xj+46a9iPO8unyWNvupz6i/pmNX7PxoOff4HnX5zZK8ulS+v1Jpqu3gadyU30VE9EkvjRgD1t1ozdv9CLbAxf25uJ78+fkgv/sbNcTvx3N0XNopwD/GXb/swP0+kSI7FfKhr4vcq1nBIU34uZspBAn+WuXqzEhwtMhdZSu5R2eKmUOxJ4cobbNbju9Lu22e90bAfUO2YfOLY8NK55Ddq9rtPei8wWxRHELqMzonIpyd3S5nuAKPI4pgFO9IylUum49k3EHhSw4tOBPASMcjxiUp5/Z6KRvcWCvb9bGXqrLYEDGjX3UqvcM/FAH5L2TOCkJMmmVZLkAUYkJljptqI1l7zmQrbiDWapCM1qBqsUp1LZEyWynlVrOAYnURxiBdSIWJCGuBov4rwxBt9+LR0inlsH/VF+2E6Wdfxv3wHpExDlwFUtHSyniL+4W6x9IacLdg4L3odvpwFR50q2UyQEbZGUf32wRNGjoIisaA+58Dw2lKIaxwUViYKMoILnxW0tRVwe+9Z+HG+w+lZNsyzNB1BX8pbI8IYq0QCWMcQolcK0GbHfmBpFFOOsW6AAfpS8sJchpmJBhwIKHEnGVPLlGdf+EHN17fuS6etz3xSllLJ1Aq/FV7ZuKJ8sCvG3rxrkIeUnzY/ys2JJ8DGxL2Id5JF1yltfEDpXK3UDbE7wAjEZlkjtYslh8K8CfJW8bCyaXGARklDTVODTfypKlJoaRIilVPg9LTccCmWOU2xi7H04fQqTa3HxOCP//jrTSU4BhOWTjpM8vrpjPXUE6PxAbHdJP+mtdWmabccC9a59qLduv10vmlJC1/pk/mw56NMxx1t/AA==</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_006_DTCreate_Forbidden_DSP_User_created_by_node_RTL" searchProperties="true" id="c78b4a43-c0bd-465f-8419-4c610c606d3e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f0ff4e85-386f-4811-a0f0-73217f11c5dc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "RoleInvalid");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="8a5c292d-ef8f-4f98-92cf-11f4d0cd478c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="386cdb5a-ae98-4bb5-8f23-a9e906827563"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="f7fe916e-9d84-4faf-a63f-69f7aeb29f62"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="1442d9a6-5c3b-4e72-a577-7b25748c7e2e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="fb3621e6-2ba6-4d75-9eb3-2014067128d9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="349be917-d7ed-4cea-afa6-7c5e6089fad4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="290db9f1-90f5-418f-89a9-bafd488f86df">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdDSP"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>09B37FD908D57722E05305991F0A0783</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>09B37FC665DA2209E05307991F0AB20B</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>DSP</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418037904593@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>RoleInvalid</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B37FC665D92209E05307991F0AB20B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B37FC665D92209E05307991F0AB20B</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B37FD908D47722E05305991F0A0783</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B37FD908D47722E05305991F0A0783</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418037906293</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_743867a0-bbb8-48e3-8aac-bc3fc60c80ad</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc/I4DP0rTPrYCblACGQKM7TQLi3QFlh6edkxjghuEyfEDpf++s8OkBIKXXafMlZk6Ug6PvYVQ4FvOk3GIOYkpIVV4FPmpNa6ksTUCREjzKEoAOZw7Aybva5jFnUH7bYohU6rrvxjl0vVio10dTKZVNVyFUpqFSGsTnBpiis6rurIFa6MJdChjCPK64qpG2XVMFW9OjIMxyw5Zb1ol613pTCGmInYwqWoK1tQK1ZXZpxHjqYtl8vislQMY08zdd3QXnvdIZ5BgJTG1aaiNFHc2PrjogsYfB8XcRhoV1rO58plzpB4FPEkhm0u91QuXdNrmvBxGfEulGwvuB06DdPlDaIhJRj55AvJ/vSAz0K30PS9MCZ8FpwswtBlYBVWWMVGmV4oWh7amYFyCGOGVDZDxjbWAKYQA8VQ+HvQqSsX500t3TqKEWXTMA5Yfvnf8ABdgB9G4KpsV9YW2vkBj3SqcQXY6VDsJ4wsoC/JGiEMbDtNwOeHKjzFMCWrLmGCoCsm0Wn78A6Wm260iAeM/58B7Q1nE2SM/AQaf3mXtY91JVgF5d5L0lsn1O991m7f9XVYTwHsO6eGbLSb5QEpMxJtdkxbhhWb3cdX9lHuJzev6+Sr177/ukPthykaL+b9yuXcMwevVtedVRZDrWLTOUSPXoyCN/ykV9+eKzQeP5qtt+HqaVwy8JtOHi77Vuft9QXdVsKHIKp5zYd4cGlZg1rXGwfe8+LOitrm8Kv2sGxDZBp3Zt9eV0qdu+X1TdD3lu/RKBqvZ0b7+SuISLNavn/pLu8/61k5e/jztt2ZHyaTD8B8t5Q06LQKt2JKiP8uZtJCXHWaujqRFB/GgXKlIXdJ7XASIXfEdcQMN2u9dl2yb1s1vdoq27ZptnWrpFu1mnGrN3W7WtqJzAbFAcSbkE6JzCUld0Ob3wHiwGFAXYjVRZgIpWPKLxFbiKNChw7EIQgpg1Eo5JlNrGjpmnw18+frlb0oEXtlJR8fSqEf8kf6GDenHOK8JJdzkjwATCICUrclrZngNeOiFXO0SLhvFBeoSCERyh5LkXXMctXSGAkiHyRQLQjdxIdiNIvSxmhs8zVVhFlqHbRH6WE7Wdbhv10HhI9LpAOTtVyDmCIcuVtKu0JOF2zvF7wL30xcIs+VaCePCd4gyf/6ZomkR0YRUdEOcuZ5aMhF1Q4LyhK5C4Iznme3tRBxcewbu3HMUXFeTBaLJB2ALeUtFuE1oXKGNgScCFVaj8JPoFoWQjvrCshQH2TO7Hl8CZ/RIUccAkGXQro8484fApN3fkfQfHXugyKXUvSNw4ofs9344r0iEf/6pMEOln7C/CQ+yzD+LvxYrL08ok5x5XNCPbmS8r8+QQocirBECFcY7wc/FuBY8rwxa3KGhQs2TRIOp/8UpCLVFYRxmFDeaSmpYV8lU5x8HYHz7fQjTCrE2cuM/PvTTCUpBTCI9xwjaXx5wTqS/9TbU9pt0p9ie1OpWK2aaeq1VGztjdhem/p11pQcusYP80/LXp8OOd74Aw==</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_007_DTCreate_Coordinator_User_created_by_node_RTL" searchProperties="true" id="efb98d62-a84a-4060-998d-448b4dede4cb"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="39bb3f80-6b33-491c-8e55-def360f24491"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="b80cbab3-7999-4cde-a03b-2528f34c225f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="0f657562-ebe0-47db-85b6-9d1d8a2763f4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="fc448ab2-a4fb-476e-9716-2817b18d1822"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="fe2a982f-b91b-4d5b-bc3a-4fe5c973e707">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="704dbc26-c301-4d4f-b2dc-10b7c09ff46e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="cfb04d3f-856f-43b2-a49c-114df62fad51">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="9e2f047a-6afe-443a-bce8-21361a42e3a5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdCoo"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="41139e15-7ffd-407a-abe5-833a6deb58c8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>09B37DBAF1EF7734E05305991F0A4A3E</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>09B37DBAA3DC773EE05305991F0A1FAC</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>COO</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418037939887@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B37DBAA3DB773EE05305991F0A1FAC</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B37DBAA3DB773EE05305991F0A1FAC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B37DBAF1EE7734E05305991F0A4A3E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B37DBAF1EE7734E05305991F0A4A3E</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418037941537</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_4f0b36b1-b13d-4a65-91e5-ec49143ed7b6</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+o4EP0rKPexCklIKBAVpPClpgulF2jV9mVlnAn4Ntg0dgLl168dICWUdtl9ijwZz5yZOT72DUfLqOJ6nEMsCKOlzTKi3M2sTS2JqcsQJ9ylaAncFdideMOBWymbLjps0Up+t6n97YTmzL6eWfrMsgPdQddVvWFBVQfsNCzHhqA2u5aunCfgUy4QFU2tYlqOblV0sz61LLfiuJZTrledV630BDGXsaVL2dT2oDa8qS2EWLmGsV6vy2u7zOK5UTFNy3geDiZ4AUuktW52FWWJ4tbeH5cDwBBFuIzZ0rgxCj43AXcnZE6RSGLY5wq+y2UaZsOQPgEn819avhcCn4YsW3YQZZRgFJEtUv0ZgliwoORFcxYTsVh+W4RlqsA6bLCOLYf+0owitAsDFRDGHOl8gax9rDGEEAPFUHoc+03t12VTy7ZOY0R5yOIlLy7/Gx6gKURsBYHOD2XtoV0e8EynWjeAXZ/iKOEkhXtF1hXCwPfTBHx5qNJDDCHZDAiXBN1whc44hney3HWjS+bAxf8Z0NFwdkGeUJRAa/i6Ws8iKx23yebeM3ow6l09dZ7D4e1bMwNw7JwZ8tHuliekzEm02/HSrjxcRdNO5e6Z2e2Ipbfrt7El1p3GOzSuWL+bGk+3vyf95AXmjfXirwde9+/erxbVwB88Bnh6N3l4SYjDRt4bdML7EfqI4yHMg3CMoloItSq5NuYf1er9K29PbH/7zO6t9y5re+PV2+++V107L4OPLbnDfyYDq1Ln0evz03P06GzuLPAfw4SO6t3HodhGDdbMyznCX7Qdzvwkmf0BLA5LRQO/W+rLKSHxs5gpCwn0MHN1V0p8uAAqtJbapbTDTaTckcCVM9ytzUbbrnXbXt/q9Wo12+mZVdusNhpW3/Qcz+4dRGaH4gRih9GQqFxKcne0+RkgXrocaACxnrJEKh3XfojYRQKVfDqWh4BRDlMm5TnZCnMW1Lc8XRJr0ailNheOXXMCrXTPxIiOYi8UEBc12Slo8hgwWRFQwq14zSWxuZC9eEdpIiKrnKIyhURKe6xUVm6tVw1OlqsIFFJjyYIkgvJqsco6Y/Ddt6IjzDPruDfNTtu3dZ3+O7RA+gREOXBVSxvkGOHM5WIeCvm+4NpxwYfwXhIQdbBkP0VM8A5J8dcnTRQ/co7Iig6Qc89TQyGqcVpQnihICc6Jnl/XUsXluW8dxvGOyu/lJE2TbAA1pW+xDG9ImbOMCeBEytLHlL0BNfIQxkV3QI76JHNuL+JLxIJOBBKwlHQpZcsLLv0JcHXp+5Lnm0tfFIWUsm8CNuKcrRPJB4tC/OObBrtY+Unzg/ysWRx8jutMrKM8sk555wtC52ql9P/jG1JgJsMSqVwsPg5+LsC55EVj3uQci5BsmiUCvv9TUpLU1BDGLKHC72qZ4VgmM5ziYwXup9OXMJkS508z8u9vM51kFMAgH3ScZPHVDesq/tP5kdTuk55TW8/utqXa9o7V1up7nbwpBXStL+avlqM+nXK89Q8=</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_008_DTCreate_DECE_User_created_by_node_RTL" searchProperties="true" id="0fa7206c-190b-4c04-8507-4fbcb8fcb7ae"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a792a7dd-51c9-40f6-9158-827ed7302eec"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
tC.setPropertyValue("actionSkipPolicyCheck","true");</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="b5742a4a-cfe1-4731-8058-0c5f922dfcc9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="9be50403-4a62-4eaa-ba09-a15c851a02c0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="e8ccd207-6136-4c04-9541-3cb87387933b"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="c7a79f85-5adc-4792-a867-49bd7f9ed169">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="c67dc7e9-9e47-4646-b8b0-8ee8d282c569">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="8b10e3e9-9f20-4800-8377-8eef7b2b6252">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="ea2c2b7e-5fe0-4701-9477-e9c307eccda8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdDECE"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="336fb1fb-378d-44e2-bb6c-eef7438f2898">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>1800B5463767D824E0533D991F0AF8E6</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>1800B546375BD824E0533D991F0AF8E6</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>DECE</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433763599013@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1800B546375AD824E0533D991F0AF8E6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1800B546375AD824E0533D991F0AF8E6</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>1800B5463766D824E0533D991F0AF8E6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:1800B5463766D824E0533D991F0AF8E6</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1433763601153</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_e0b174ff-5838-4c01-899a-dadf4521d6d2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZXzBBuMKVJEhF2dImAkkm52XLUVqQIktgSUbyNePZMCDCcmy++RSu9V9uvvoSGcCJbEb9oSAVFLOaqskZiIsrB0jS1nIkaAiZCgBEUocjnq3g9Ct2yHabTFqUb9j/AP2s9PyJhPTDxqB6WHbMYN2G5kEkYnnuw5pEle5CpFBxIRETHYM13Z8026adjB2nLDRDP2g3rT9X0btEVKhYiuXum1sQa1Ex5hJOQ8ta7lc1peNOk+nlmvbjvV0OxjhGSTI6J5tKioSpd2tP64TwBDHuI55Yp1ZFZ8zIsIRnTIksxS2uchHuWzLblvKhwg6/WKUe4FEbMKL5TfEOKMYxfQN6f7cgpxxUuvFU55SOUs+LMKxdWATVtjEjse+GFYV2omBKghTgUwxQ8421j1MIAWGofZwH3WML6dNrdg6ThETE54morr8b3iA5RDzORBT7MraQjs94JFOdc8AhxHDcSZoDnearHOEQWynCfj0ULUfKUzoakCFIuhKaHTWPryD5aYbfToFIf/PgPaGswnyiOIMuq/Pre+S0MZ1+/XveApzQd6aZO2C0+KdAsC+c2EoR7tZHpCyJNFmx0v763W+ehz0nOUwukH9gX9/l66T4VsCy5u27P204xX8ajkXkZv71nz4Fca/RmO8TlpSXC9G1yPeCnoejeyHwcXjOGnfuulL4CyGL2TSdtfBFbEerDunAVbUbyQLdrN+O/evVp73QF+SEfvrqdmfLb4vk+jywsmmq6vz2VMjP/96N5zMV5yjnzeDPLq6vvZvBldBpyxnD3/Vtjvzo+z5BbDcLTUNon7tUk0Jyc/FTFsoMSeFazjX4iMkMGl09S6tHWGm5I6SUM1ws3YC2z73vWaj1Wz2A9e7sP1Go99uO5d27zK4aO5EZoPiAOI3ziZU59KSu6HN5wBxEgpgBFIz55lSOmF8ErGPJKpF7F4dAs4EjLmS59eYYtKeptN4nTkCXt78pU/bi9wzandcDtkw7U0kpFVN9iqafA+Yzilo4da8ForYQqpeLFCeydip56jOIFPSnmqVDV0v8C1Bk3kMGqmVcJLFUJ/P5kVnLLH5uibCorDeX4yL0/ZhXYf/di1QPoRqB6FrOQc1RjhyuXi7Qj4uuLVf8C58LyNUHyzVT5lSvEFS/fWHJpofJUdURTvIpeehoRLVOiyoTERyikuil9e1UnF17ru7cSyQU1/UszzPigl4XsNKVXhLyZxjjQBnSpbWY/4KzCpDWCfdASXqg8ylvYovkzM2kkhCouhSK5YnXPojEPrSjxTPV6e+KCopVd8krOQx27dYPVg04k/fNDjE2k+Zf6jPkqfkz7iOxNrLo+pUd76kbKpXWv/XH5ACcxWWKuXi6X7wYwGOJa8ayyaXWKRi03Mm4eM/NS1JHQNhzDMmo75RGPZlssAp13MI/zi9C1Mocfk0o//+NjNpQQEM6kEnaBFf37Ch5j+b7kntNulxtfV7n6ltFV33nfm9Za9Phxzv/gY=</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_009_DTCreate_DECE:CS_User_created_by_node_RTL" searchProperties="true" id="00a31403-4f9d-4aa6-93f0-2077fecd623e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="cfd02bf9-9c97-4b70-933b-680b343bd1ef"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveDECE:CS"));
tC.setPropertyValue("actionSkipPolicyCheck","true");</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="0e7950d0-8c27-41f4-9d2b-5ef435d54072"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="b8286e02-7946-4fb7-ad6f-12c38bdcec40"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="a33f6904-0b8c-46c8-8f73-341ff4841150"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="ed98139a-567f-48dd-93f9-b150f49adb88">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="c9e473cf-f1d1-4ce1-a20d-631cd560b789">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="01986b8c-1674-4664-b00e-b0a586075688">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="980de3e8-2908-4846-8d0e-8cacec1e87b4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdDECECS"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="d8094e76-8aa4-42cf-9b35-52155c8bc626">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>09B37DBB516B21E9E05307991F0AA509</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>09B37F7ED62321F7E05307991F0AFFEB</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418037984574@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>24</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B37F7ED62221F7E05307991F0AFFEB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B37F7ED61F21F7E05307991F0AFFEB</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B37DBB516A21E9E05307991F0AA509</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B37DBB516721E9E05307991F0AA509</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418037986356</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_b644e56a-84cc-4826-b105-6485ca01f2d1</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtd6o4EP4rHu7HPQihiMKpnqNVt/Taa6ttb9cve2IIkhYSJMGX/vpNUKnYl3X3i5hhMvPMzMOTXHKYxJbX5RxngjBa2yQx5V5hbWt5Rj0GOeEehQnmnkDetHs78qy66cHDFq3m99va33PHtnHDgXrLRki3W5ajz4HZ0B271UDQBKEVAOnKeY59ygWkoq1ZJrB1YOlm6wEAz2p4ANRbdnOm1Z5wxmVs6VI3tT2oDW9rkRCpZxjr9bq+vqizbGFYpgmM59vRFEU4gVrncldRkSjr7P1RPcAIxzGqI5YYl0bF5zLg3pQsKBR5hve5gq9ymYbpGtIn4GTxQyv34sCnISuWV5AyShCMyRtU/bnFImJBrRsvWEZElHxZBDBVYB1vkI6ATX9oRhXamYEqCDMOdR5BsI81wSHOMEW49jjx29qP86ZWbH3IIOUhyxJeXf43PJiucMxSHOj8UNYe2vkBP+lU5xIjz6cozjlZ4V+KrClEmO+nidH5oWp3GQ7JZkS4JOiGK3TGMbyT5a4bfbLAXPyfAR0NZxfkCcY57iznWzDYspdnNxpSuhheN5b9WzCjqbhvFwCOnQtDOdrd8oSUJYl2O2b3m/7N4+K613O6edwfRG7y+vhXAAyncf/mcm73Z/wtiFjkj8Kb36/b/AGy++3dKE5B4+ZpeUM2rWs8Wr3cT5I7x/jzqg98FE9kZWufbDaDefroz6KLKHF/DsfLVvSWOr/vollvjrrrt4Ebrp7GydSy2O0fz5MZf/4Jek/T+4dre8ni6R1eTS74Io3T8Xo8fn1sl+Uc4a/aDt/8NJ+/YCQOS0UDv18byilB8b2YKQsJ9LBw9VIlPlxgKrSO2qW0w8ul3JHAkzPcrU23d9Hs93oN4DQtMHAHZuPCbLouGJrdbsN0DyKzQ3EC8YrRkKhcSnJ3tPkeIEo8jmmAM33Fcql0XPsmYh8KWPPpRH4EjHL8wNqaE7ioFcJQDwPQ0G0XObrrOLbeAKbdvMCg1QwDrfaLiTEdZ91Q4KyqznZFnScYkZRgJeGK4VxSnAvZlSVc5SIG9RWsU5xLkc+U3nqWFBODkySNscJsJCzIY1xPo7TokcF3T0uHiBdW2yw+uy8LPH136IX0CYhy4KqUHpbzxJ+cMuahji/qdU9Oo0P4bh4Q9YXJxoqMoB2S6qt3viiilGQpfhA/wC69Tw2VyMZpUWWyYEVQyfry7JaSLkWgc5jIEtaX9Xy1yosZNJXYZTK8ITUPGFOMcqlR2wf2iqlRhjDOOhBK1CeZS3sVXy4iOhVQ4EQyplYsz7gBTDFXNwBfkn5z7vWiklL2TeCN+Mx2Fcvbi0L87QUHeUj5SfOdfKxZFryP65NYR3lknfICIAhdqJU6DLZfEAMxGZZIGWPZcfDPAnyWvGosm1xiEZJN81zgr9/UlD61NYgQy6nw+1phONbMAqfYpth7d/oQppDl8p5G/v2ippOCAgjL2x0nRXx13HqK/3RxpLv7pB+kd9gc9B0wtID8cyS9w+GgVzalgq7zwfzRctSnU453/gE=</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_010_DTCreate_RTL:CS_User_created_by_node_RTL" searchProperties="true" id="12d13424-ad00-464f-ac18-8867d4802c88"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1b3a0a95-bcbe-42db-bdf6-4518f534a4ad"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="72931d01-4115-48ed-b04a-8df4085a910b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="b9ebceae-f2d9-4b94-aea4-06dd5fae5bb6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="67557f44-06a2-4de7-987d-5d4e39796e2d"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="5aa33a86-c3d1-4d42-9b35-386a5288a0a9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="be07ad93-fb6b-44ec-ba1f-e5b956651465">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="607a4f77-446e-4e5f-be06-2510bb55832e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="99c6ba82-437d-44c7-90f1-162af293f078">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTLCS"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="b738430e-49f5-41ad-8d66-9d0bcb770f81">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>09B37DBAF20B7734E05305991F0A4A3E</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>09B37DBA52E72201E05307991F0ABD36</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418038038960@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B37DBA52E62201E05307991F0ABD36</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B37DBA52E62201E05307991F0ABD36</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B37DBAF20A7734E05305991F0A4A3E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B37DBAF20A7734E05305991F0A4A3E</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418038040565</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_d2aea04c-3f88-46a8-be5d-d20353fadc5e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbZcuo4EP0VynlMGe8srkCV2W64AySBbDcvKSHLWIktGUsGMl8/kgEHE5Jh5smlduv0UXfrqK8YiCPT9RhDKceUVDZxRJibW1tKlhKXAoaZS0CMmMuhO/PGI9es6i7Yb1Eqw15LefVNgIBuQ9UKGg3VroGGOkeOr/qmbjlWAHzoIOHKWIaGhHFAeEsxdcNWDVPVG/eG4Zo1V3eqlm6+KJVHlDKBLVyqurIjtWEtJeQ8cTVtvV5X11aVpgvN1HVDex6PZjBEMVDaV9sT5YHS9s4fVn0EURTBKqSxdqWVfK585s7wggCepWgXy/8ulq7pTU34+AwvLpRiL/KHJKD5sgsIJRiCCP8NZH7GiIfUr3jRgqaYh/G3hzB0CayiDVShYZMLRStTOxOoxDBlQGUhMHZYUxSgFBGIKg/TYUu5OK9q+db7FBAW0DRm5eV/44PICkU0Qb7K9sfaUTsf8ESm2lcIukMCo4zhFZrIZk0ARGxXTQTPh6rcpijAmxFmokE3TLLTDukdLbfZ6OEFYvz/FOigOFuQRxBlqN3YzN5r4aoxf0PR4jqM53erjTkcjUbooZUTOHTODUVpt8ujpiyaaLsjfoy41W8+G/MP51kb92+v/wpmT4vLX0mfhm/J1Li27D+DZDShi5Q9ekZtvPoNJrfOfPKAm/OXyKvzdGo0bt7X02BYM/kUh+vsBs81qHVegg69o5sne0nAco6bbyadPPfS34nDXy7H7+usZ2eXIFzOwqdo+au70t4vB9olrS05ftQmHsQjNFuO/9yloSPM/VZxnAP+Zdv+zs8ykS7I90vZBsNeZSCqBPjPYiYt2FeD3NVNpPgwjghX2nKX1A43E3KHfVfUcLvWmx2r3ut4A1P36nXL7uuOpTvNpjHQPduz+nuR2bI4otilJMAylpTcbdv8TBDGLkPER6m6oplQOqb8gNgDHFSGZCouASUM3dOWos+BXQuCQG2aTUO17cZcBbYJVcO2/KAR+IEDbaUyofyG3KRewFFaVme7pM5TBHGCkZRw2eFMtDjjIitLsMp4ZFRXoEpQJkQ+lXrrmnbD0RiOkwhJzlpM/SxC1SRM8hxpbPs1VQBZbu12+7btDWxz0KvrNavT121d5lWvi/zW67X8Un57/ON/+0wJHx9LByYP2kGi2ujLG+S4zv6UX7LhnHyr9vBe5mN5/0TaeYrhlkn512c3yTYqWmnav3/tzl6NPe/C/dhQgtaOT1VE81cYFpeieNqF4guNaO8LtgTVZTVbrbK8RHWphamA14QkGtoMwUxI2Mc9fUdEKyC0s96LgvVR5MJe5pfxkMw44CgWDVXJl2cMCDPE5IAwFHdic+70UQop8sbRhp+ydSMx3EjGP84/0IXST5hvxWdNU/+zXCewDuKIc4r5gGOykCv5Vnx80xmQClgsVI6mh+CnAE4FLxuLJBdcuOimecbR938qUr5aCoCQZoQPe0puOJTUnCf/SJD76fQFJlftYozD/z7HqThvAShGRuGf48vX2JX9TxYHsrwLekqZHbNfM0UH5cpc3ypzp2fViqSU2LW/mL9aDvJ03OPtfwA=</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_011_DTCreate_ACSPTL:CS_User_created_by_node_RTL" searchProperties="true" id="68a3c703-772c-4682-a65a-3442bb06b2a2"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="3b5017ae-7008-4563-8a6c-c70c0570aaf3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="7b882b8e-3d5f-4640-a916-e4ecd5e352c1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="1e9b7d62-1366-4ad0-9113-6426e34f4054"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="e2d17006-73bf-476b-9eb7-c6e811ea3b5e"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="2cb2643c-358e-46a9-8a61-46f7640d4676">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="ece2dc53-980f-4f54-9f1e-ac05b1aaf7fc">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="459808b0-9f37-4e83-8870-60c0e7e58684">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="bb0c00b7-f59e-482a-9e31-f26705bb6287">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdAccportalCS"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="a8c50431-abdf-4c0a-ae87-b084e21d852b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>09B37FC666162209E05307991F0AB20B</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>09B37DBAA407773EE05305991F0A1FAC</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418038096754@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B37DBAA406773EE05305991F0A1FAC</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B37DBAA406773EE05305991F0A1FAC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B37FC666152209E05307991F0AB20B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B37FC666152209E05307991F0AB20B</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418038098334</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_1fe78f6e-fe45-49db-b125-26c6fc61a542</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZXwBG9sVqDLXYjaZzECSmuRlS8hto8SWiSVxma9fyYAHk8uy++RSu3X6qLt11FcMZakdhIxBwUlOG9sspSworV1NFDTIESMsoCgDFnAczMOb68BumgE6btEa02FX+9uKoePFLugxtB297UcLfWHZjm672I2xayGnbUtXxgRMKeOI8q5mm1Zbt2zd9O4sK7A7gek0Td9/0hoPUDCJLV2apnYgtWVdbcn5KjCMzWbT3LSaeZEYtmlaxq+b6zleQoa03tX+RGWgonfwx80IMKQpbuI8M66Mms9VxII5SSjiooBDrOijWKZh+ob0iRhJvmjVXoimNM7L5QDRnBKMUvIbqfzcAF/mUSNMk7wgfJl9eAjLVMA6bLGOrTb9ohl1ahcC1RgWDOlsiawD1gxiKIBiaNzPpl3ty2VVK7feFYiyOC8yVl/+Nz5A15DmK4h0djzWgdrlgO9kqncFOJhSnApG1vBdNesKYWCHagK+HKrxo4CYbK8Jkw26ZYqdcUrvbLnPxpAkwPj/KdBJcfYgDygV0PPxrRjhaLbIlu7E/Gbng9y/noL7e8a6JYFT59JQlXa/PGvKqon2O25nv34/cuwV1ks+yY1JMrSeRsMCg/jr2pgth50s3gibD7+OVvTnevTyKJLnxe5eOEbLWWyt12jySL8m093WL9DrYrNuk1F/VSThZG2iJ3u+uemP737OlsScdiZPwHcCHgSns1k//fpzGiWT590tE/foDvVb7uye3HxbiAc/ufViP0ri5eqb1XecJ7u4eXnxutVxTvjXbcc7PxeLZ8D8uFRtMB02xrJKiH8uZspCIj0uXYOVEh/GgXKtp3Yp7QiElDsSBbKG+7Xp91ud8cB1XcuxbdMfmU7L7Pi+NTbDvm32jyKzZ3FGcZDTmKhYSnL3bfM5QZwFDGgEhb7OhVQ6pn2COEQcNaZ0Ji9BThnc5V3NA4DIbtt6x5N3r408U/fANXXwsGW64EHLjrTG95zf0tsijDkUdXVu19R5BpisCCgJVx3OZIszLrPyitaCp1ZzjZoUhBT5QultYLc9x2AkW6WgOBtZHokUmqvlqsyRwfZfW0eYldbBeByareEodFuW7/dlbtumyqvKb8drlRfG+PD45/+OmZI+EVEOTB20D7La8OYNcgPneMo32XDefauO8KGIiLp/Mu28IHjPpP7rTzepNqpaKRwMRvPB/Ei78j431JCN80NVwaI1wdWdqF52KfhSInrHer2i5mtTrNeirFBHSWEh4Q2piJYxByykgu3u8hegRgVhXPRcVKzPIlf2Oj/Bl3TOEYdM9lOjXF4wH8yBqflgKq/E9tLhoxZS5o3Dlr9nG6RytlGMPx1/cICVnzT/kJ9NXkR/yvUO1kkceU45HnBCE7VST8Xug8bAuYQlUuTy4hT8PYD3gteNVZIrLlx200Jw+PhPQ6lXV0MY54Ly6VArDaeKWvLkuxUEf5zewJSiXU1x5N/HOJ2ULYBBzn6MlPjqMQ5U/9PkRJUPQd8I87Afhm3T7XRao1KYnb0wW+NwUCWlxq73xvzWcpKn8x7v/QM=</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_012_DTCreate_LLASP:CS_User_created_by_node_RTL" searchProperties="true" id="5571bdf9-b4a9-4acf-8d25-cf4ddc902d3e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="5369f8d6-2c9f-4cd6-a8c2-ca149fe79882"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="a5378ee7-7377-484f-8fac-cc79a0d9029d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="1f80caa0-fbb3-42da-9575-8bda640ab867"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="c6f1ca6c-cf4d-495c-a74e-bc6be001b20f"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="97107cbd-43e2-4f56-82c0-f3bf621af256">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="23f37166-468a-4208-9dc2-2701f6d8d888">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="a16945da-34cc-49b1-a7d6-d5bbc1e62b5d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="01f3b546-0e31-4fec-8bdb-bf05ce4e814b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdLLASPCS"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="fd1f7234-894f-408a-b0c7-83e9e70b4e19">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>09B37DBA20877716E05305991F0A9E90</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>09B37DBA530E2201E05307991F0ABD36</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418038156855@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B37DBA530D2201E05307991F0ABD36</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B37DBA530D2201E05307991F0ABD36</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B37DBA20867716E05305991F0A9E90</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B37DBA20867716E05305991F0A9E90</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418038158355</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_b97e83fb-2487-4544-baff-6f70c3bc5d65</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtd6I6EP4rHvbjHuRFEORUz/EFt7RarXTbu/2yJ4agaSFQEpT212+Cyop9ud7rF0+GycwzM0+e5IKCONKdPqUoYzghjSKOCHVKa1fKM+IkgGLqEBAj6jDo+P3pxNGbqgMOW6SGN+pKv5cdC9mtcCnrhm3JhmkY8hKEodwOLRW2ltAM2iZ3pTRHHqEMENaVdFUzZE2XVftO0xzddtRW02hZj1LjHmWUx+YuTVXagypoV1ozljqKst1um9tWM8lWiq6qmvLPdOLDNYqB1LvYVVQmynp7f9gMEERRBJswiZULpeZzEVDHxysCWJ6hfa7gs1yqonYU7hNQvPomVXtR4JEwKZdDQBKCIYjwGxD9mSK2ToJGP1olGWbr+NMiNFUEllEBZagZ5Juk1KGdGaiGMKNApmug7WMtUIgyRCBq/Fx4XenbeVMrt95lgNAwyWJaX/43PIhsUJSkKJDpoaw9tPMDftCp3gWCjkdglFO8QTeCrCmAiO6nieD5oRrzDIW4mGDKCVpQgU45hney3HVjhFeIsv8zoKPh7ILcgyhHPa+4SbfPt97dxg1/3QYzhXNqrGvzp03SLQEcO5eGarS75QkpKxLtdtxsLuNpMn/o6PZ4lnsPaXzb7jB3fmVM73/NXePHT/fOeHtQFfRjMHp+vX4wn5dXoR/7g3RBBiOoPyyVa7gK1Ge21ZbFdPambJ8LaMONycAEP05bVy5bPU4ouNfc+c0PsuC/7cvrd5f2LxVtapuBNwxm7pMdpOvr79lrOvZfimAxKIhVXD6mXrG6evz+4hczt1uVc4S/bjuceT9fPiHIDktBA2/UGPMpAfa1mAkLDuSwdHVSIT6UIcKkntgltMPJudzhwOEz3K3VzqBljQZ9XbXblqW1XdVsqWano43VfsftqAeR2aE4gThMSIhFLiG5O9p8DRDGDkUkQJm8SXKudFT6IuIIMNDwyIIfgoRQdJdwGdV1ZJuaKdum1ZYNu9OWO4Zuy7ppBi0DLbXlEkmNm4TNyCzrhwxldXU2auq8QBCnGAkJFwynnOKU8a68gE3OIq25AU2Cci7ymdBbh2uLqVAcpxESmJU4CfIINdN1WvZIobt/XQaQltbh0DWM/tjQx8OR2m4NXNVQRV9Vi/fXstrlofy0/NNvh05xnwALByoKHSA+bfTuDrIc81DlJ93onNxVh/D9PMDi/PG2swzDHZL6p79sEjSqqDSZ9P3576H/WzsgrzacGmrBldO6qnzBBsPqWFSXO9d8rhK9w8heQPOlmW82eTkkS6hhxsMrXBQ1xUcw5yL2epc8I6JUIZSzbowK9Unmyl7Hl7M18RlgKOaUapTLM54IPqLiieDxU1Gc+/6opeR9Y6hgH9mGEX/eCMRfvoCgA4UfN8/53zbJgr/j+iDWUR5eJ38hMExWYiVui9dPuAETHhZznUuy4+AfBfgoed1YNbnCwjibljlDn39pCAHrSgDCJCfMG0ml4VhUS5zsNUXOX6d3YUrdrh5y+N9fcjIuKQC5LHH/Mr64jx3Bf7I6EuZ90o+0mSvySOcMKrXZ2mnzYNRqV02poeu9M7+3HPXplOO9Pw==</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_013_DTCreate_DLASP:CS_User_created_by_node_RTL" searchProperties="true" id="492d2f6f-d130-4db9-bcf4-5a5c20e8d868"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d5f7b9df-addf-45f4-b0de-aabb6f89a856"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="9beb5797-07b3-49d8-8d7e-578ca6e03090"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="6ab56c16-c3ed-4585-acb2-225df700aaef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="3e6bc9ed-a856-46f1-87af-5d99aee20ba4"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="05490c38-b2c8-49a5-a64d-9cc046d14f86">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="9bb8ed89-abb4-41d9-bd03-0210b8a2b890">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="eb792f8a-3339-43c4-8827-985ec1714245">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="fa7e1c87-ec60-461f-bc40-ddb10afcf427">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdDLASPCS"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="018fadfb-79ea-490d-a403-9fd550968b93">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>09B3BA99A6E260CCE05307991F0A9026</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>09B3BA7FFD2060CEE05307991F0AB40E</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418038216204@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B3BA7FFD1F60CEE05307991F0AB40E</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B3BA7FFD1F60CEE05307991F0AB40E</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B3BA99A6E160CCE05307991F0A9026</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B3BA99A6E160CCE05307991F0A9026</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418038217987</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_98cd1378-b3b0-4427-8250-01a0a7cb8190</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZSwbG18qUGVuW2wIYYAkZF6mhCyDEiMxlgxOvn4lEzyYXJbdJ5fardNH3a2jvuJwk1hByDlOBWG0lm8SyoPC2tKylAYMcsIDCjeYBwIFs/BmFFh1EMDjFq027LW0X76HIrPhevqysQS6bVuu7lkO0IEJAXTR0jN9IF05z/CQcgGpaGkWMG3dtHTgzU0zsPwAOHW/4f7Uavc45RJbutTlrgOpnLe0tRDbwDD2+31936izdGVYAJjG4mY0Q2u8gVr76nCiIlDafvNH9QgjnCSojtjGuDIqPlcRD2ZkRaHIUvwWK/osFjCAb0ifiJPVN63ci6MhjVmx7ELKKEEwIa9Q5ecGizWLamGyYikR682nhzCBAtZxjnRk2vSbZlSpXQhUYZhyqPM1NN+wpjjGKaYI1+6mw5b27bKqFVvnKaQ8ZumGV5f/jQ+mO5ywLY50fjzWG7XLAT/IVPsKo2BIUZJxssNj1axbiDB/qyZGl0PVJimOST4iXDZozhU745Te2fKQjR5ZYS7+T4FOinMAuYdJhtv2IPTz4SD5fm8b4/yp6UTfG4+vmwc2Aq2CwKlzYShLe1ieNWXZRIcd85fQJS/T8VP3+fmOpT/smKJOiKKFt3BNNgr9kJuj/ovFmcO8eRiG88nwe3b3uvXI/XU33v9YdLcWpg3Lc5Ofk2Q1XSeLZo7XM/txcf2Ug/n2+rF/vUCNsd8c22Ngr15/7h08ffh7dDte/ECdpwldZm7fyW9EY99BqQDzh+lycn1rPz67D5v8L8+li7v+PXhslcc54V+1He/8LFs+YSSOS9UGw15tIKsExddipiwk0uPCNdgq8eECU6G11S6lHUEm5Y5EgazhYQ38TqMT+n7Y7JtN0O32gdMAru+bAxD6wGoeRebA4oxil9GYqFhKcg9t8zVBtAk4phFO9R3LpNJx7QvEHhSwNqRTeQkY5XjOWlrsOQhInrqJTKjbOG7qHsaOvnR9+XVtJ44trTZm4pbepmEscFpVZ7uizlOMyJZgJeGqw7lscS5kVn7DXSYSs76DdYozKfKp0tvAsj3H4GSzTbDibGxYlCW4vl1vixwZ/PC1dIh4YZXZtO1wYFuDngWajU4f2EDltciv6zaLS/np8c//HTMlfSKiHLg6aAfLauN3b5AXOMdTvsuG8+FbdYQPs4io+yfTLlKCDkyqv/50k2qjspV6o3A2+dWd/TKPzMsN54YKuHF+rjJetCOovBbl4y41X6pE+1iy37D+u57tdllRJFepYSrhDSmKpjHDKJMi9jJnz5gaJYRx0YtRsj6LXNqr/DKxpjMBBd7IlqoVywtGhBnmakQYyluRXzp/VELKvAmci49s3USON4rxlxMQCpDyk+aJ/OxZGv0p1wdYJ3HkOeWEIAhdqZV6LV4+6Q3EJCyROsfSU/CPAD4KXjWWSS65CNlNy0zgz//UlIC1NIgQy6gY9rTCcCqqBU/xssXBH6d3MIVul4Mc+fdJTidFCyAsxz9OCnz1Hgeq/+nqRJjfgr7XZncw6JkDqc39U23u2KBfJqXCrv3O/N5ykqfzHm//Aw==</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_014_DTCreate_Portal:CS_User_created_by_node_RTL" searchProperties="true" id="6c809043-b867-45c8-8612-3af33e1aec2d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="105b9f68-e17b-4100-9ee9-1b3495ba3c69"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
tC.setPropertyValue("actionSkipPolicyCheck","true");</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="417fda44-a57b-47e5-9115-7c54a9418d5b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="c144fe2b-e61e-4131-b255-6d3c62d0ff42"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="9743130f-3004-474e-87ff-7fbfd1318379"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="9ef36478-dd10-48c8-9a92-1071a3649be5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="4ef88b89-abef-44b0-a3db-c889f5a66279">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="fd359910-41c7-4d3b-84ab-49ef54b6b2fc">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="fffc0686-cefd-449a-8824-ae66ad1ac984">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdportalCS"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="2d0ea638-aceb-4fee-9136-f01e7a083ee0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>09B3BA7FFD3360CEE05307991F0AB40E</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>09B3BA9D8AE5354EE05305991F0AEB02</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418038280723@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B3BA9D8AE4354EE05305991F0AEB02</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B3BA9D8AE3354EE05305991F0AEB02</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B3BA7FFD3260CEE05307991F0AB40E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B3BA7FFD3160CEE05307991F0AB40E</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418038282246</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_cd94a7b8-bdd7-418c-9dd7-cabd24ca4918</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynlMGcvGjrErUGUw2TC5TmAySV62hNyAJkYylgxkvn4lAx4gl2X3Cbrd6j590VGfCzxLnTASAnJJOautZikTYaltGUXOQo4FFSHDMxChJOEgurkOnToK8faIUevHLeNvkgQu9kdNc5QkvunaTWIG+h/Bo8RxCXYDu6lMhSigz4TETLYMB9muaTsmag5tO2ygEPl1D529GLVHyIXyrUzqyNiAWomWMZUyCy1ruVzWl406zyeWg5BtPd1cD8gUZthon68zKgPl7Y09qSdAIE1JnfCZdW7t2ZwnIhzQCcOyyGETK/ksFrJQYCmbRNDJiVGdhaTPxrwUu5hxRglO6W+s63MDcsqTWpROeE7ldPZpEjbSjk1YEZPYLjsxrH1oRzraQ5gLbIoptje+HmAMOTACtR8P/ZZxclzXyqPDHDMx5vlM7Iv/DQ+wBaQ8g8QU27Q20I53+EGl2udAwj4jaSHoAm71sGaYgNh0E8jxrmr3OYzp6poKNaArodFZu/AOxHU1YjoBIf9Pg3aas3byiNMC2o3F2ejH4nTly3siHmXw9u3n7+g69xksWyWAXeNSUbV2LR4MZTVE6xMv/mPG5x6///USPPiLF/dH5r0sXzve0Lu3Xy8DmVhifHk9BXzVGV7GL+IK3Nubwv7eXd0lT/Z8fFnExQQnkfvtqemdTVLepbfd2+eo99y5zhqD+58xP724uotOX7uPXl+mz73eaMaGD3E/aEYjQvxBz7Pdp5V/czXojW8w/2t1+S0h48GT7DZ9Plc1HM4jG06/t6p0dvDv67Z3flCMfgGRW1GPQT+uXaguYfk1mWkNTcxxaRpmmnyEBCaNtj6luSMsFN3RJFQ9XMso6DQ6kX9xETfsM9Tt9ZDXQH4Q2Bco6riotyWZNYoDiF3OxlTH0pS7HpuvAZJZKIAlkJsLXiimE8YXHmMsca3PHtQl4EzAkLcM17W90ch1TEAJMl2f6BuvRTdxfMd2MEGuUbvl8o7d5dFYQr7Pzu4eOz8AoRkFTeF6woUacSFVVeZ4UcjUri9wnUGhSD7XfBs6btOzBJ1lKWjM1ownRQr1bJqVNbLE+tcxMRGlNo46sR35KIiiOECe00Mu0nXV9T3rBRflpfw0/cNv20opm4RqA6ET7YDqNhy+QU4Qetss31XD+/Ct2rqPioTq+6fKLnNK1kj2P/2ZJj1G1ShRQTKeS5wSYW+xV0cOFXvurcPMqojJgpLqYlTPu2J9xRPtbdPmuD6vF4tFUbbJ13yYK/eWokXbGgApFI29DfkrMKtyYR31ZlSoDyJX+n18hZyygcQSZmqoaqV4xJIwAKGXhL66F6tjN5C9kKpuElbyI103VQuORvzlDkRCou2U+l79LHme/GnXB7524qg81Y4gKZtoSb8Xb59MB+HKLVVMx/Nd5x85+Cj4vrIqcoVFqmkaFRI+/1LTFNYyMCG8YLIfG6Vil1ZLnPItg/CP0Ts3JXNXqxz9913OpOUIEFALoKClf/0ih3r+2WSHmjdB37NzEDejXqPhuWt29tbs3OsgpyrKHrr2O/V7zU6dDme8/Q8=</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_015_DTCreate_Coordinator:CS_User_created_by_node_RTL" searchProperties="true" id="a3c8a6d1-58ae-446a-a169-890e0d364158"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4c29deea-6fa4-468c-b9e2-3f799aa9ff8c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
tC.setPropertyValue("actionSkipPolicyCheck","true");</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="89cd2419-933b-414f-ab79-ea8b158dc385"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="7b32d586-a904-4d1d-944d-ee5dcd071cbb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="c56c0baf-6551-4b06-af79-1db25a823a9b"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="8c6d2a18-29c9-43dd-973c-8b62a575cf04">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="986c8386-2610-4a49-8355-66c0a477b424">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="220a15e0-ca2f-4fcb-a411-7c84048e92e8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="7ad46fd6-8a33-4cbf-b4ff-4d1484989447">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdCoordCS"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="0ee7b765-f93f-4bf1-a8fa-947f3866247a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>09B3BA80FB5D60D2E05307991F0AB7EA</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>09B3BA99A70960CCE05307991F0A9026</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418038334545@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B3BA99A70860CCE05307991F0A9026</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B3BA99A70660CCE05307991F0A9026</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B3BA80FB5C60D2E05307991F0AB7EA</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B3BA80FB5A60D2E05307991F0AB7EA</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418038336505</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_3d8da16d-f065-4b38-afc8-d8ad7feb619a</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc9o6EP0rjPvYMZaNMdgTmDGBNG5DS0LSpLzcUeQF1NgySDKQ/PpKBlxMPi73vsBovdo9u3t0pDOB08QJQiGAS5qx2iZNmAgKa8fIOQsyLKgIGE5BBJIE43B4FTh1FOD9FqMW9TvGP424HWPbi80p8pqm+9hom3hK2mbcxnFrCo+e7WPlKkQOERMSM9kxHGS7pu2YqH1r20HDDlCrbtvuxKj9BC5UbOVSR8YO1EZ0jLmUi8Cy1ut1fd2oZ3xmOQjZ1sPwakzmkGKje7atqEjEuzt/Uo+BQJKQOslS68yq+JzFIhjTGcMy57DLFb+XC1nIt5RPLOjsk1HuhThi06xYnmOWMUpwQl+w7s8Q5DyLa2EyyziV8/TdImykA5uwISaxXfbJsKrQTgxUQcgFNsUc27tYNzAFDoxA7e4m6hifTptasfWWYyamGU9Fdfnf8ABbQZItIDbFvqwdtNMDvtGp7hmQIGIkyQVdwXdN1gUmIHbTBHJ6qNqIw5RurqhQBN0Ijc46hHe03HajT2cg5P8Z0MFwtkF+4iSH7u+vo7X7FH8+vx/NrPv5MloMJwOOvrR7w04B4NC5MJSj3S6PSFmSaLvjGnn86mEQ/ej/RtfLaPLQaCy+vKCLC37fI1+aLXdotQcPo6e7l/tGFPfx82wVfp3bzWXuut6EZxOgU6/PfnB7fHV5x6/x6Pby58t1jw2swcphXigm42j41Hr6PED9GfJjwS8fny5/Db5f2Mly48++DVlj3nKG9943kuLx3YDEzkv6Inwr7I0GN5PVCK99/PnuV9gpyznAX7Xtz/w4f/wNRO6XmgZRv3ahpoTlx2KmLVQdgsI1WGjxERKYNLp6l9aOIFdyR+NAzXC7Rn6v0Qvb6KLXDD3Udwao2UAt37cvUNhrDcK9yGxRHEE8z9iU6lxacre0+RggSQMBLAZurrJcKZ0wPojYxxLXInajDkHGBNxmSkZ922k7bmy6fhOrH69lPk5bYLawrXH7hDRso/Y9kz/UUMOpBF5VZ7eizjdA6IKClnDNcKEoLqTqyhKvcpnY9RWuM8iVyHOtt4HjtpuWoOkiAY3ZSrM4T6C+mC+KHlli+++YmIjC6hZHwnq3wONv+14on5hqB6FL6YGaJ7y6ZVDQ3Nfxqt7mm7fRPnyYx1SfMNVYySnZIql++ssXTZSSLCTLeBwQscdduh8bKqGt46rKbPGKkpL25eWtNF2pQHc/kiWuL+v5apUXQ2hpteMqvKVEz7bGQHIlUs+32RMwqwxhnXQjlKiPMpf2Kr5cztlYYgmpokytWJ7wBBiD0E+ASLF+c+r7opJS9U3CRr5lO0/U80Uj/vCFQwKi/ZR5pP7WaoR/x/VGrIM8qk71ApCUzfRK3wbPHzGDKh3L+GHwtwK8lbxqLJtcYpGKTY+5hPe/1LRAdQxMSJYzGfWNwnAomgVO+byA4K/TqzCFLpcPNfrvLzWTFhQgoJ53ghbx9X0baP6z2YHw7pK+1l7fD1vI89D5+aH2+sjxyqZU0HVfmV9bDvp0zPHuHw==</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_016_DTCreate_Forbidden_DSP:CS_User_created_by_node_RTL" searchProperties="true" id="e1f252bf-c257-46ad-8b29-20b41835f351"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="51a0c682-710c-414c-b4b0-7a778f2af5f4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "RoleInvalid");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="57d335a7-169b-4702-80c6-f0c426eecbe9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="b244f811-5b09-44a3-8c10-9315dfa2c82e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="4675e2a8-7f51-4662-b32f-01bdcb2df5a1"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="e7288426-3dfc-4757-8ff0-5f6c3a9abd31">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="0ad79ea3-ed0c-4623-94e0-a99e23d9e80d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="e4d1fbba-eda9-4fa6-b2a4-77b1a94b7426">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="a3d5379d-288c-465f-9c04-1e3cce9fd0a3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdDSPCS"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>09B3BA80FB7B60D2E05307991F0AB7EA</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>09B3BB174EC260C6E05307991F0A6A2A</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418038393771@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>RoleInvalid</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B3BB174EC160C6E05307991F0A6A2A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B3BB174EC160C6E05307991F0A6A2A</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B3BA80FB7A60D2E05307991F0AB7EA</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B3BA80FB7A60D2E05307991F0AB7EA</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418038395258</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_367ade99-e8ec-46e2-bf53-0c05f60d7706</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvO4ZXzhalegykBIyADJAMmwedkScoOVtSWwZEPy9SsZcDC5LLtPLrVb3ae7j450xVEU2q7HOcSCMFraRSHlbmZtaUlMXYY44S5FEXBXYHfqjYauXTZddNyilQa9lvZXpd5APjiODk3AerUOtr5Y1iq6ic3asm76jYZZl66cJzCgXCAqWpptWlXdsnWzObMst2K51Wa56TSetdITxFzGli5lUzuA2vGWFgixdg1ju92Wt5Uyi1eGbZqWMR8NpziACGntq31FWaK4ffDHZR8whCEuYxYZV0bB58rn7pSsKBJJDIdc/le5TMN0DOnjc7L6oeV7wR/QJcuWXUQZJRiF5A2p/oxABMwveeGKxUQE0ZdFWKYKrMMO69iq0h+aUYR2YaACwpgjnQfIOsSawBJioBhKj5NBS/tx2dSyrbMYUb5kccSLy/+GB2gKIVuDr/NjWQdolwf8pFPtK8DugOIw4SSFsSLrGmHgh2kCvjxU6SGGJdkNCZcE3XGFzjiFd7bcd6NHVsDF/xnQyXD2QZ5QmEB7N09DWHQ9EiwbT7uHeXdu1nb9p9HNr20rA3DqnBny0e6XZ6TMSbTfMfIGdgeSdPFiWcDT59Hd/TDu0NrNSxg8JEg83o6Hz5YBTqfvsEq0nf1uzh5monkX3D3XjMltpT9728QvPW+0E9XxY2SvJ1Ea0oc3B7HGdB4uJ931S+dmg+7i3/zuqT/uVz18Az+fO/M//3j1vQ3zm+Pmc5AGK7IZBv729nrC1uNk/it27EVI8P2Wvi5Rr+YNWnk5J/iLtuOZnyaLF8DiuFQ0GPRKfTklJL4XM2Uhvr7MXN21Eh8ugAqtrXYp7XATKXfEd+UM92vT6VQ6XtPsdxpe3ezZ12atYjYcx+qbXqdx7R1FZo/iDGKX0SVRuZTk7mnzPUAcuRyoD7GeskQqHde+idhDApUGdCIPAaMcZkzKs7VaJKjuRKkZsxdr47yyxOZVR2yIVhozcU/vY28pIC6KcrUgyhPAZE1AKbciNpfM5kI2Y4PSRIRWOUVlConU9ljJrGtXmzWDk2gdgoJqRMxPQiivg3XWGoPvv7aOMM+sk+tZdty+LOz837EH0scnyoGrWjog5wif3C6VYyFfF9w4LfgY3kt8ok6WbKiICd4jKf5654kiSE4SWdERcu55bihENc4LyhP5KcE50/P7Wsq4PPjt4zg2qLwpJ2maZANoKIGLZXhD6pxlTAEnUpdeZ+xvoEYewrjoEshRn2XO7UV8iQjoVCABkaRLKVtecOtPgatbfyCJvrv0SVFIKfsmYCc+s3VD+WJRiL991GAXKz9pfpCfLYv993F9Euskj6xTXvqC0JVaqQvg9QtSYCbDEildLD4N/lmAz5IXjXmTcyxCsmmRCPj6T0lpUktDGLOEikFPywynOpnhFK9rcN+dPoTJpDh/m5F/f5zpJKMABvmi4ySLr65YV/Gfrk609pD0g9x2rEb1umvVzW79VG7rnp3LbRFd+4P5o+WkT+ccb/8D</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_017_DTCreate_RTL_User_created_by_node_RTL2" searchProperties="true" id="c9ccb151-c651-4cad-af3c-ec8195277ce7"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL2"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL2"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1433763782119@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B37F7ED47321F7E05307991F0AFFEB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B37F7ED47321F7E05307991F0AFFEB</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B37DBA506E2201E05307991F0ABD36</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B37DBA506E2201E05307991F0ABD36</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418037632673</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_7fee70d8-54fd-4d56-956f-b0a17c9261e5</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuo4FP0VlPNYhTghIRAVJCCgpvTCQC+cvoyM44DbxKaxA7RfP3aAHEJphxmpEvXO9tprX7zsSw6T2PI6nONUEEYrmySm3MutLS1LqccgJ9yjMMHcE8ibdG5vPKsKPLjfolUCv6X97UYYuyBs6I4dhbodOnW96dQjfQag6aKmVTexI105z3BAuYBUtDQLmLZuWjpoPJimZzblX7UBrBet8oRTLrGlSxVoO1Ib3tIWQiw9w1iv19V1rcrSuWEBYBrT25sJWuAEau3LbUZ5oLS980fVECMcx6iKWGJcGiWfy5B7EzKnUGQp3sUKv4sFDNA0pE/IyfyXVuzFYUAjli97kDJKEIzJJ1T1ucViwcJKJ56zlIhF8m0SJlDAOt4gHZk2/aUZZWpnApUYphzqfAHNHdYYRzjFFOHK4zhoab/O61q+9SGFlEcsTXh5+d/4YLrCMVviUOf7tHbUzgc8Uan2JUZeQFGccbLCd2pYlxBhvusmRudDVUYpjsjmhnA5oBuu2BmH9I6W22r4ZI65+D8NOmjOFuQJxhluT96mz39dPX6+XAzHa5Yt3ebs/rr/GNKF3coJHDrnhqK12+XRUBZDtN0RQPT0Li6e6bD+cvG6+Zz8DjbRzdD4Pfxodl5G46B7MVov3hjrv5KOsxmPnfHwZZnempGTOumgzqb34dtgUm/Owon5AKfj39ePvjGN66NgaFw98avP0cWzObrx3ev+yE/s5tWrafYif/oefj6bWdJg12sUvk+Gq9rdK70XZFnrXuHY/HzZrOCUkfHAuBktG83r+8dWkc4B/7Jtf+Yn2ewVI7FfqjEI/MpAdgmKn8VMWUioR7mrt1TiwwWmQmurXUo7vEzKHQk92cPtGjS7NdfvdhxQ71tSyPrAqQG32TQHoNP1a/W9yGxZHFHsMRoRFUtJ7nZsfiaIEo9jGuJUX7FMKh3XfkD0oYCVgI7lIWCU4wfW0hzXsrANZrobzuq67YahPoM20mcIA7cBUQM2LK1yx8Q9vU87kcBpWZ3tkjqPMSJLgpWEqwnncsS5kFV5h6tMxGZ1BasUZ1LkU6W3nmU3HIOTZBljxdlIWJjFuLpcLPMaGXz7a+kQ8dzaA73+oNEHjV7f7Ll+vQ9soOoKHFlfC3TzQ/lt+sff9pWSPiFRDlwl2sWy2/jEHQT2WX6phnPyrtrDd7KQqPMnyy5SgrZMyp/+TJMao2KUxv2HPeXC89hQQjWOEyoChSuCivNQ3OpS7KU8tPe9eofV92q2WmV5d1wlg6mEN6QamsYEo0yq18cDe8PUKCCMs66KgvVR5MJe5peJBZ0IKHAiZ6mSL894G0wwV2+DQB6HzbkPj1JIWTeBN+KUrRfLd41i/OPTB3lI+UnzSP6sWRr+adcJrIM4Mk/5NBCEztVKXRMf3wwFYhKWSIFj6SH4KYBTwcvGosgFFyGnaZYJ/P2XilKulgYRYhkVga/lhkM1zXmKjyX2/jh9gckFu3jBkX9/wukkHwGE5buPkxxfXcSemn86P1DkXdAvojxw+77t1ixT/nMgyoNBv1sUpcSu/cX81XJQp+MZb/8D</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties/><con:tearDownScript>if(context.expand( '${#Project#runTeardown}' )=='true')
	{
	log.info("Executing TearDown for Suite '" + testSuite.getName() + "'");
	
	for ( testCaseResult in runner.results )
	{
	   currentTestCaseName = testCaseResult.getTestCase().name;  
	   currentTestCase = testCaseResult.getTestCase(); 
	   log.info("Current TestCase : '"+ currentTestCaseName + "'");
	   log.info("Current TestCase Status : '" + testCaseResult.getStatus().toString() + "'");
	   
	   if ( testCaseResult.getStatus().toString() == 'FAILED' )
	   {
	      log.info("Re-executing failed TC");
	      def currentRunnerTC = currentTestCase.run(null, false);
	      log.info("Status on re-execution : '" + currentRunnerTC.status + "'");
	   }
	}
	log.info("Execution of TearDown for Suite '" + testSuite.getName() + "' Completed" );
}</con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="5_DTCreate_and_SAML_Exchange_ Node Role_with_and_without_ULC" id="cc576f4c-b5ec-4515-847f-29720ad95ab2"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_001_DTCreate_RTL_with_and_without_ULC" searchProperties="true" id="25828ef1-828f-481c-a0ca-459023ed2ff8"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="01e0c82d-93d9-464a-b2b6-6b41faf0f281"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="c9dff5a4-02e4-45b3-9e3e-16df5ff9486c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="dc06410d-daa1-419f-9a2f-a33173e779c1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="ed7b98b8-e28f-49a1-8dcd-dcea75f2f6c9"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="5d1ef9b7-f8d5-408a-93eb-121c6a1f486a" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="0f7fe22f-54ef-4517-bb83-03227ec5de81" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="ac036d9c-17f2-41f4-ade9-86abe0c3e547" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="102162bc-b113-491d-93a9-3ba493eb0af5" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 1" id="0fb777ed-3421-4fcb-b690-e29d46afe2bf" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate_with_ULC" id="2d99dfe5-0953-4b92-9c67-b1aa95c58fbb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 2" id="77ceac25-631b-4549-98cf-8b7724db03bf">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Get" id="9890e821-e978-4c6d-acca-a3e264fc81ae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")

tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")
tC.setPropertyValue("ResponseType","SUCCESS")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13BD604CCBA33BAAE05307991F0A529B</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13BD60698250512FE05307991F0AE776</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1429076292660@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>13BD6069824F512FE05307991F0AE776</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:13BD6069824F512FE05307991F0AE776</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>13BD604CCBA23BAAE05307991F0A529B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:13BD604CCBA23BAAE05307991F0A529B</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1429076294715</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_e8fa3997-70ef-43b8-adf5-d563ae2d6581</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZSxfMa5AFdcKGxIyOHOpvGwpUgOaGJlYsiH5+pUMeICQLLtPLrVbp4+6W0d9JfAycaKOEJBJlvLaZplwEZXWlpFnPEqxYCLieAkikiSKO7fjyKmjCO+3GLVRv2X8DeEMu81mw2wgmJme+xSamM58k/qBi8GhgR/aylWIHEZcSMxly3CQ7ZvIM23/AfmRa0fIrTds99Go/YBMKGzlUkfGjtRGtIyFlKvIstbrdX3t1tNsbjkI2dav23FMFrDERvtqe6IyUNbe+ZM6BQJJQuokXVpX1pHPFRVRzOYcyzyDXSz6USxkoaalfKhg8y9GtRfoiM/SctnDPOWM4IS9YZ2fW5CLlNY6yTzNmFwsPzyEjTSwCRtiEtvjXwzrmNqFQEcMM4FNscD2DmsKM8iAE6h9n45axpfLqlZufcgwF7M0W4rj5X/jA7yAJF0BNcX+WDtqlwOeyVT7Ckg04iTJBSvgTjfrChMQu2oCuRyqdp/BjG3GTKgG3QjNzjqkd7LcZqPP5iDk/ynQQXG2ID9wkkM7nruT2SLAZBKSwJsWbvojIHeNxVvx3CoJHDqXhqq02+VJU1ZNtN1RPH6/TuTY7a3kcP07oy9vm2KEnmlzPnmNPZzffYVv6XLTeOTTt0H68iQWSxzP1zeDn1nzL4fGN7HVHVjS+X4t7ppDa7gZz4ffnh4weVv1bl4CxLIBp7/wdWO0WRUL3rTktTX6+W2S/eU/+7dzCNX9G9vjR/++eEZ3v7DvBm4w9PGwm9427u/7XvzVu5kMmt31ulUd54D/sW1/5+P86TcQuV/qNhj1a0NVJSw/FzNtYdScla7RSouPkMCl0da7tHZEuZI7RiNVw+3adrv9AHm9nmd33W6nM0C+ixrNpj1EHd9pdvcis2VxQrGX8hnTsbTkbtvmc4JkGQngFDKzSHOldML4BLGPJa6N+FRdgpQLeEhbRkgbTUqobbokDE0voI4Zuo5jIgK4EVCXUkKM2l0qJ3ySdWYSsmN1Do/UeQqErRhoCdcdLlSLC6my8oKLXCZ2vcB1DrkS+UzrbeR4oW8JtlwloDlby5TmCdRXi1WZI0tsv46JiSitPdQbDMMBCnsDu9foBwPkIZ1X5Kv8OqhbXsoPj3/6b58p5UOZdhD6oF1Q1YZ3bxCK/P0p32UjOPtW7eE7OWX6/qm0y4yRLZPjX3+6SbdR1UrTwcOecuV5ajhCtU4PVAWiBSPVfahedSX2Sh7a+1q9YLv+Us+LIi/L43mulSl4S6mhbcVAcqVerw/pM3CrgrAueioq1ieRK/sxv1wueCyxhKXqpVq5vGA2iEHo2WCkrsPm0sHjKKTKm4SNPGfrJWqu0Yw/HX1IRLSfMt+rzzrN6J9yncE6iKPOqUYDyfhcr/Qz8fpBU5BUwTIlcGl2CH4O4FzwY2OV5IqLVN30lEv4+E9NK1fLwISkOZejvlEaDtW05ClfVxD9cXoHUwp2NcGxfx/hTFa2AAE19wlW4uuHONL9z+cHirwLel6U0fAzUT5m135nfm85yNNpj7f/AQ==</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:13BC58846BFA5DE7E05305991F0A40A4</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>102162bc-b113-491d-93a9-3ba493eb0af5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0f7fe22f-54ef-4517-bb83-03227ec5de81</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5d1ef9b7-f8d5-408a-93eb-121c6a1f486a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ac036d9c-17f2-41f4-ade9-86abe0c3e547</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0fb777ed-3421-4fcb-b690-e29d46afe2bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_002_DTCreate_ACSPTL_with_and_without_ULC" searchProperties="true" id="813b6c6a-f98b-4b76-b486-ac31c5b7c30b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="873b0c3f-4d8f-406e-817a-beda2d160879"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdAccportal"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="a53cbc0e-83f2-449e-bec9-c633f6c85b12"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="83c60db0-3e42-4db9-b4c8-7b4ab620d74b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="ebe107b5-37c7-4d7e-85af-d1dc16d831d5"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="ccf66fbf-cd1a-4e4c-9fac-b627e2b9a74a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="f176bcb7-cf3b-41e7-8d28-2616a8a57366">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="4d88334f-4f62-430c-a881-05d47ce83893">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="4860a41f-b951-4d42-a07b-b357279a7d5f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 1" id="eaa5e29e-1109-45c6-9555-23dea6bee5ad">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate_with_ULC" id="36a1e423-0a53-4c3b-8ab7-1bbb9ff4da86">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 2" id="28abb387-565e-43e4-a9d5-e266f6fe163b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13BCC5BD554F07F2E05305991F0A2204</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13BCC5BD554307F2E05305991F0A2204</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1429072336935@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>13BCC5BD554207F2E05305991F0A2204</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:13BCC5BD554207F2E05305991F0A2204</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>13BCC5BD554E07F2E05305991F0A2204</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:13BCC5BD554E07F2E05305991F0A2204</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1429072338442</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_ee0f5806-f326-4909-959b-63adf8ef13f1</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbV+o6EP4rrPq4V+mdS5ewFletW7yhbvXlrJhOabSk0KQF+fU7KVApoodznroyncx8mfnyZU4Zmkam22EMEk5iWllOI8rc3NpS0oS6MWKEuRRNgbkcu+PO6NI1q7qLtluUitdvKf8A6IHT0GtqYJk11W7qTbXpNF/VmoX8oAGBYQWGcGUsBY8yjihvKaZuOKpuq4Zzr9uupbuWU3XqtRel8ggJE7GFS1VXNqCWrKWEnM9cTVssFtWFVY2TiWbquqE9jS7HOIQpUtqn6xPliZL2xh9XfcAQRbiK46l2qpV8Tn3mjsmEIp4msMnlf5dL1/SmJnx8RiYnSrEXfI8Gcb7sIRpTglFEVkjWZwQ8jP1KJ5rECeHh9NtDGLoMrMISq9iw6YmilaEdGaiEMGFIZSEyNrHuIIAEKIbKw53XUk6O61q+9T5BlAVxMmXl5X/DAzSDKJ6Br7LtsTbQjg94oFLtU8CuR3GUMpLBlSTrDGFgm24CPj5U5SaBgCwvCRMEXTKJTtuFt7dcV6NPJsD4/2nQTnPWQR5RlEL7Iry9DUfmDZk9+KszwmnNNP23RryKcCsHsOucG4rWrpd7pCxItN4xeM5MPmWWQ2aLq7PG1UX2dm0vM7O3tP4MLoK59342fxyfm172cvv+fJlqH8/NjI4GDAav51dPYeN62X1Lw1+Jdj+kQb+W6e9PT+zW+LO48nz/lk26D97vxeWvZyuunc9SCquuef3y8vTh+Npw2X+7HzWyc29x0+90jeCWhMOx4cwfwhdCXt9Ww8FqxWtze16frH4/tIrj7OAv27Z3fpy+vgHm26WkgdevDEWXEP9ZzKSF+GqQu7ozKT6MA+VKW+6S2uGmQu6I74oerteG1e31nG7fceyBXh+aA92xdKfZNIZ6xzR1eysyaxR7EHsxDYjMJSV3TZufAeKpy4D6kKhZnAqlY8oPEfuIo4pH78QliCmD+7il6K9WgGri2jUcp67aug0qchxL9S1HENJyaoZjKpWrmF/T66QTcEjK6lwvqfMdYDIjICVcMpwJijMuqjJHWcojo5qhKoVUiHwi9dY17YajMTKdRSAxa9PYTyOozsJZXiONrb+mijDLrb1hpz5smgOj3us6ttMd6LYu6yrra3cGjfxSfnv8/X/bSgkfn0gHJg/aBdFtOPAGmdtTfqlG7eBbtQ3fSX0i758oO08IXiMp//pkk6RRQaVOrzcYj7eoC+d9Qymwtn+mIpefEVxcieJhF3ovFKK9bdccGdV5Nc2yNO+QbVtaIsJrQhANbQw4FQL2cR+/A9WKENpRr0WBei9zYS/jS3lIxxxxmAo6VfLlEePBGJgcDzxxI5bHzh6llKJuHJb8kK0XidFGIv5x+sEuln7CfCM+izjxP9t1INZOHnFOMR1wQidyJV+Kj294gWMRlgiNi5Pd4IcCHEpeNhZFLrBwwabXlMP3fypSvFoKwjhOKff6Sm7YFdQcJ/+Ygfvp9CVMrtnFEEf+fYpTSU4BDGL0YySPL99iV/KfTnZEeZP0G102f9LlMrr2F/NXy06d9jne/gs=</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>102162bc-b113-491d-93a9-3ba493eb0af5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0f7fe22f-54ef-4517-bb83-03227ec5de81</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5d1ef9b7-f8d5-408a-93eb-121c6a1f486a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ac036d9c-17f2-41f4-ade9-86abe0c3e547</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0fb777ed-3421-4fcb-b690-e29d46afe2bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_003_DTCreate_LLASP_with_and_without_ULC" searchProperties="true" id="978f57ca-3de5-4bf4-af9e-d74438e17529"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7322a9af-4645-4122-9ec5-225cbd40f20f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdLLASP"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="6303d03d-222c-4c95-a670-bea5cbfdc02c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="77f9f8bc-d419-4383-a7bb-c26f65ca72bb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="1c69a282-13cd-4d51-9b55-81e92eac8d69"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="b6914b17-82ff-480b-96f8-eed5d168eb5a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="421aa1c7-5a48-439a-afa9-d105c79c403b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="033c9dc4-fe43-4d41-9baa-fc5331ac5e10">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="19ca9d67-337c-4636-96b7-02fb637ac3f7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 1" id="f9e1cd65-4c45-4bae-bbc6-7d2acbd48430">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate_with_ULC" id="c754c88b-d06f-469f-8100-f92cfb35e9c8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveLLASP"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 2" id="0e6f97b8-6391-4086-8256-3a3c4d1aab65">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13BCC5BD558207F2E05305991F0A2204</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13BCC5BD557607F2E05305991F0A2204</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1429072429161@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>87648</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>13BCC5BD557507F2E05305991F0A2204</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:13BCC5BD557507F2E05305991F0A2204</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>13BCC5BD558107F2E05305991F0A2204</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:13BCC5BD558107F2E05305991F0A2204</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1429072430868</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_82c02b2a-a166-4038-8d95-cbf1761facdc</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc9o6EP0rjPuYMZK/wHgCM4SPlhvSJoGmSV/uKPIa1NoyWDKQ/PorGXAxIbnc++TRenX2aHd1tJeCJLEddIWATLKU1zZJzEVQWNtGnvEgJYKJgJMERCBpMOnejAO7jgOy32LURv228bdvU2w/28QkVqNhutjxTT9seSZ9jqxmw4oIDalyFSKHEReScNk2bGx5JnZNy5tiN3DsAPt1x3F+GrUHyITCVi51bOxIbUTbmEu5CBBar9f1tVNPsxmyMbbQ4814QueQEKNzuT1RESjr7PxpPQQKcUzrNE3QJar4XIYimLAZJzLPYBcrfC8WRriFlE8o2OyTUe6FcMSjtFj2CE85oyRmr0Tn5wbkPA1r3XiWZkzOk3cPYWENbMKGmtRy+ScDVamdCVRhmAliijmxdlj3EEEGnELt+/2obXw6r2rF1mlGuIjSLBHV5X/jA3wFcbqA0BT7Y+2onQ94IlOdS6DBiNM4F2wFX3WzLggFsasm0POharcZRGwzZkI16EZoduiQ3tFym40+m4GQ/6dAB8XZgjyQOIdOOJZPQ8u7xnOfXd90190rFv4ess/96bpdEDh0LgxlabfLo6Ysm2i743b0JK5/tIbufXozGE7o7fTb9dPm9UW2UDNt0WQ2GT9iZL142Q9r+DrNFsu/0Piu0VpC5kMOgzgevD6No8Ey+oK+XFvf19aX6O7398fGxoXpOrlw+retHxcZW17NL0gI0hvPLMjvVi8/h18fRvOn6Cfv+ZOLHmohyfPksdH8fP8r/PxXMn94TNDMdsLZ3WYROvOLm3Z5nAP+Vdv+zk/y519A5X6p22DUrw1VlYj8WMy0hYVmVLgGCy0+QgKXRkfv0toR5EruWBioGm7XlnPV63lXfc/zLdwc2gPsOdhrtawh7to2dvcis2VxRLGX8ojpWFpyt23zMUGaBAJ4CJm5SnOldML4ALFPJKmN+L26BCkXME3bBvWdsGn5YPqEuqbbfMYmoXbTdMPIbTVD28euZdS+pvIb/5Z1IwlZVZ2bFXW+B8oWDLSE6w4XqsWFVFlZklUuY6u+InUOuRL5TOttYLu+hwRLFjFozihJwzyG+mK+KHKExPZrK0qisPZwbzD0B9jv9Zu9Zr8xwC7WeS3ya+Or4lK+e/zjf/tMKZ+QaQehD3oFqtrw5g2yAm9/yuNs2Kffqj18Nw+Zvn8q7TJjdMuk+utPN+k2KltpPO5ObvekS99jQwUXHR+pDBWuGC1vRPmuK7lXAtHZV2tJrPqynq9WeVEg13VQpuCR0kMLTYDmSr9epulv4KiEQGc9FiXro8ilvcovl3M+kURCorqpVizPmA4mIPR0MFIXYnPu6FEJqfImYSNP2Xqxmmw04w+HHxpQ7afMt+qzTrPwT7lOYB3EUedUw4FkfKZX+qF4eactaKpgmZK4NDsEPwVwKnjVWCa55CJVNz3nEt7/U9Pa1TYIpWnO5ahvFIZDPS14ypcFBH+c3sAUkl3OcOzfhziTFS1AQU1+ghX4+ikOdP/z2YEm74KeluWm95EsV9l13pjfWg7ydNzjnX8A</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>102162bc-b113-491d-93a9-3ba493eb0af5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0f7fe22f-54ef-4517-bb83-03227ec5de81</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5d1ef9b7-f8d5-408a-93eb-121c6a1f486a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ac036d9c-17f2-41f4-ade9-86abe0c3e547</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0fb777ed-3421-4fcb-b690-e29d46afe2bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_004_DTCreate_DLASP_with_and_without_ULC" searchProperties="true" id="81b9b519-d8ec-4820-a795-885588bb47e4"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a29424eb-292a-4e51-826e-5cbb7bc4d098"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdDLASP"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="cf53baae-31c1-4b58-b580-a0745062cc12"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="98fd9570-69c0-4820-aa45-847110a222d8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="6e4b3228-07e6-44ca-a3ed-749f16b9514b"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="bacb8f11-04e1-422f-8c14-2503fe5c8ec7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="dab801e6-12b1-4718-95df-b2c83ff56c5a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="c26ac892-83a8-4c0c-a177-daf7fcbc1535">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="8279c26d-7be8-4033-b2fb-4b06387e4feb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 1" id="c3b76cb4-fc35-4ac2-87c4-961b2ff68f03">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate_with_ULC" id="76e79a55-ab64-434f-b40f-8cc44d9d636a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 2" id="0af3d083-fd25-4231-a808-df5e212135ef">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13BCC5BD55C107F2E05305991F0A2204</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13BCC5BD55B507F2E05305991F0A2204</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1429072521872@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>13BCC5BD55B407F2E05305991F0A2204</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:13BCC5BD55B407F2E05305991F0A2204</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>13BCC5BD55C007F2E05305991F0A2204</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:13BCC5BD55C007F2E05305991F0A2204</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1429072523362</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_33322620-0c2e-44a3-a8b9-d5fc7d995463</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+I6EP0rKH1chThfQKKCBAnVsoVuBbTb9uXKOA4YEgdih4/++rUDpITSXu59ijwZnzmeGR/PLYNxZLhtxnDKSUIr2ziizM2tTSVLqZtARphLYYyZy5E7ag/6rlEFLjxuUSo9v6n8Y5qmYdQMoAJkYNWyoKnCxsRRAztE9cBxbKtmClfGMtyjjEPKm4oBdFsFlqrbY2C5punaRtWoG29K5RmnTGALlypQDqS2rKnMOF+6mrbZbKobs5qkU80AQNdeBv0RmuEYKq3b/YnyQGnr4I+qAUY4ilAVJbF2q5V8bgPmjsiUQp6l+BAr+CoW0ICjCZ+AkemNUuzFQY+GSb70IE0oQTAi71DmZ4D5LAkq7WiapITP4i8PoQMJrOItUpFu0RtFK1O7EqjEMGVQZTOoH7CGOMQppghXnoa9pnJzXdXyreMUUhYmaczKy//GB9M1jpIlDlR2PNaB2vWAFzLVusXI7VEUZYys8YNs1iVEmB2qidH1UJXHFIdk2ydMNOiWSXbaKb2z5T4bPplixv9PgU6Kswd5hlGGW4vOxrYjzQTBLonatf4wnXfXqyd/N980cwKnzrmhKO1+edaURRPtd4x2dWet//jzZx49eNkr98J6/Kvb3XVWUb87Rpu3URZEaX8OfGLej+ajN689QHeD+80j67/ESfj0ypk5nT4NVgPfGQ+9l+1Piid2TUeRz9vv40fBpet01z877c525tQ0oqPF8mnXnnXQcjZ77lrvw9fugm5e07H3q0fI8Md7PVusULDo4OCtD0zv3tYBGuiNZnGcE/5l2/HOj7LJHCN+XMo26PmVO1ElyL8XM2khgRrmru5Sig/jmHKlJXdJ7XAzIXckcEUN92vd7Hie3fFt2wOgfmd0gW0C23H0O9A2DGAdRWbP4oyil9CQyFhScvdt8z1BFLsM0wCn6jrJhNIx5RtEH3JY6dGhuAQJZXicNJUJCI0QGI46QZNQtZwGUCd1K1Brk4YOTdOybN1WKg8J/01/p+2Q47SszvWSOg8xIkuCpYTLDmeixRkXWVnBdcYjvbqGVYozIfKp1FvXsBq2xki8jLDkrMVJkEW4upwt8xxpbP81VIhYbvWA171rdEHD8z2v7te6wAIyr3l+DdDJL+WXxz//d8yU8AmIdGDyoB0sqo0vvEHW8ZSfslG7+FYd4dtZQOT9E2nnKUF7JuVfH90k26hoJb/fHj0eSRe+54YSrnZ+pCJUsCaouBHFuy7kXghE61itFdSrq2q2Xmd5gSzL1FIBrwk91LURRpnQr904WWCqFRDaVY9FwfoscmEv88v4jI445DgW3VTJl1dMByPM5HTQExdie+3oUQop8sbxll+yeZGYbCTjb4cf5CLpJ8yP4rNJ0uCjXBewTuKIc4rhgBM6lSv5UOy+aAuUCFgiJC5JT8EvAVwKXjYWSS64cNFNk4zjr/9UpHY1FYhQklHe85XccKqnOU++W2L3w+kTTC7ZxQxH/n2IU0neAgiLyY+RHF8+xa7sfzo90eRD0Muy3LG+k+Uyu9Yn82fLSZ7Oe7z1Fw==</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>102162bc-b113-491d-93a9-3ba493eb0af5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0f7fe22f-54ef-4517-bb83-03227ec5de81</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5d1ef9b7-f8d5-408a-93eb-121c6a1f486a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ac036d9c-17f2-41f4-ade9-86abe0c3e547</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0fb777ed-3421-4fcb-b690-e29d46afe2bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_005_DTCreate_Portal_with_and_without_ULC" searchProperties="true" id="8ac2ef7a-7f9c-44b7-9161-6d7f9d43d0fb"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a4596f39-e32c-4555-a66f-c1aeafd6b633"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdportal"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="14457afa-8848-44c8-a523-4c89dc6fa982"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="0cf764b6-4745-44e3-834b-793da8c2874d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="817dd53b-480b-4fe0-bcd7-076de9cbe20c"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="08d523b6-6592-46e6-aad0-809be1fd4221">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="5d4d91cb-b249-455e-bc1a-fe9bdb3e650b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="b6ec0a03-64d3-434d-b258-65b8744e91dd">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="54455afc-3b72-4c52-bbc4-f8bc55d5fc50">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 1" id="ffd4b845-5f85-4c90-919f-0789b515c226">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate_with_ULC" id="2c73dd1c-b156-4e6d-83fb-2f4b61d742ef">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 2" id="75a02f9f-8a9d-40c9-bd29-cbdfd13a6f95">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B3E1BDD2BB4D08E05307991F0A13ED</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B3E1B9C5514D10E05307991F0A1D43</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418039171761@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B3E1B9C5504D10E05307991F0A1D43</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B3E1B9C5504D10E05307991F0A1D43</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B3E1BDD2BA4D08E05307991F0A13ED</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B3E1BDD2BA4D08E05307991F0A13ED</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418039173301</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_cab5718f-88ac-4a46-b44d-a89ac223b066</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+o6EP4rTP3o9I0WpB1hBq0eURQFDkf9ciekKY22SWnSgv76kxSoFMHLvZ862W52n9198iTnDMRR3e0yhlKOKakt44gwt7C2lSwlLgUMM5eAGDGXQ3fUve+7dc1wwWaLUut5beUfCKaNM7MVqK0WgKoN7KY6tW1fBS0HwHrdmhrNpnBlLEM9wjggvK3UDdNWzbpqtMam6dq2aze0ZsN6VWoTlDIRW7hohrIGtWRtJeQ8cXV9sVhoC0uj6UyvG4apP9/3RzBEMVA656uKikRpZ+0PNR9BFEVQgzTWz/WKz7nP3BGeEcCzFK1z+YdyGbrh6MLHZ3h2opR7kd8jAS2Wl4BQgiGI8CeQ/blHPKR+rRvNaIp5GB8swjRkYBUtoQpNm5woehXakYEqCFMGVBYCcx1riAKUIgJR7few11ZOjptasXWcAsICmsasuvxveBDJUUQT5KtsU9Ya2vEB93Sqc46g2yMwyhjO0YMkawIgYutpInh8qNpjigK87GMmCLpkEp2+DW9nueqGh2eI8f8zoK3hrIJMQJShjpVM+871y+85CZfvj7O+H1rNs/t41MxguwCw7VwYytGuljukLEm02hFPP5oPT/EcnvovvPWURpb90ggaz6F/k0WTu/rz7TyMrs3eqxnlp9fO5M0a+nfDP95kZjvv8wkJL27y/utgdHtvL8Mb0Hcu+4H3dPfqTJj+5E1pNxwMuT0coOg1HhuD08VozPqUg1tvDB7z3ulDPr19+2PfGGN4nX2GIH57Nya/6sD5NcjtVth9u3r/RM/eVf/ppV2Ws4W/atuc+VE2fUOQb5aSBj2vdi2mBPjPYiYt2FeDwtVNpPgwjghXOnKX1A43E3KHfVfMcLU2nAvryrzwvPpF1/aM1pXRsIwzxzGvja5pXXkbkVmh2IF4SUmAZS4puSva/AwQxi5DxEepmtNMKB1TfojoAQ5qPTIUh4AShsZUyLMZzKKEW2AZhDgwpwZOsubCYMlC6PcD5QMySLsBR2lVlO2KKA8RxAlGUrklsZlgNuOiGXOQZzwytRxoBGVC21Mps27dbjV0huMkQhKqHlM/i5CWhEnRGp2tvnUVQFZYMYMJTTmIihOhH6xv99+mFcLHx9KByZIukBgn2nPJWJt6Dtd9tl33Jnw387E8YKKvPMVwhaT664sukiclV74K2yAvN+waKsH13brKfH6OYcn78vYWoi5koLMZzhxocy3L86wYx5mUu1SE14XqmfoIwUyo1MeYviOilyH0o66EEvVO5tJexZfxkIw44CgW5KkVyyPeACPE5BugJ2i/PPaBUUkp+sbRku+zXUbi/SIR//jEgS6UfsL8KD4Lmvpf49oTayuPqFM8ATgmM7mS18HHAW5AKsJiIWQ03Q6+L8C+5FVj2eQSCxdsmmYcHf5TkwrVVgCENCO85ymFYVs1C5z8I0Hul9O3MIUwly81/O9PNRUXFIBIvO8YLuLLC9eV/CezLeVdJ90jvs5lo2HYnmlUxNezrbIpFXSdb+bvlq0+7XK88xc=</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>102162bc-b113-491d-93a9-3ba493eb0af5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0f7fe22f-54ef-4517-bb83-03227ec5de81</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5d1ef9b7-f8d5-408a-93eb-121c6a1f486a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ac036d9c-17f2-41f4-ade9-86abe0c3e547</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0fb777ed-3421-4fcb-b690-e29d46afe2bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_006_DTCreate_DECE_with_and_without_ULC" searchProperties="true" id="7833ea4c-ea29-4d83-9283-9e4402dae47b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1faa8e6a-8e7f-4def-bb7c-84b0d98764fc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
tC.setPropertyValue("actionSkipPolicyCheck","true");</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="b3517d21-a2a4-4ccf-a391-d351c9f00b01"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="daf3689d-d839-4c33-95d6-cf6410a7927b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="6a34ea95-1dbe-4e8d-86b0-4b723b422af8"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" disabled="true" id="59dc320b-e273-47ce-912a-677ba330a590">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="df66c090-94af-4feb-9b46-30ac486e2a2b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdDECE"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="3cc16cae-d805-44e0-8cef-94ef8d672940">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="8b0969bf-861f-45e0-b0d3-549c3e290ccf">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 1" id="251b5493-df9f-44fe-9de4-f2e062e58751">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate_with_ULC" id="208c6efe-5725-4d19-9b79-850b34d624af">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 2" id="eee9c6cb-d5e7-473a-8314-27abc802b52b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B3E1BDBC394D02E05307991F0A0577</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B3E1A4BB471E6EE05305991F0A14FC</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>DECE</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418039193144@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B3E1A4BB461E6EE05305991F0A14FC</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B3E1A4BB461E6EE05305991F0A14FC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B3E1BDBC384D02E05307991F0A0577</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B3E1BDBC384D02E05307991F0A0577</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418039194744</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_1d264f17-ef74-4a9d-8821-4471f8556ab2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtb+I4EP7eXxGlH1ch7yREBSkQaFHptgdtb69fTsZ2wNvEobEDYX/92aFJgdJu9yQkNJPxzDMvfsYXDKSJFYSM4ZyTjCrjqKv+ayKr7cSmp+HYczQHdJDm+5apOY5nxr7rtsHcUpUxYwUeU8YB5V3VMkxHM0zNNu5NK7CdwPBalmk+qcojzplwLUxahqqUaUJZUIXtqkVOgwwwwgIKUswCDoNZeDMJhGUAakxq72KHsgqY95acrwJdhy2EIU4S2IJZql/oBzYXiAUzsqCAFzl+jYlYV309u9lsWhu7leUL3TIMQzc6urBBjCzO1d5ZfRijMY2znTwANKMEgoT8AhLUDebLDClhsshywpfpB65N3TSkaw2XUIOmQ89V/S1Ahe6Lng5A5gxobAnM2tkUxzjHFGLlYTruqudf6+Du7H0OKIuzPGVH8p9BwnSNk2yFkcbqzGp0X/d4oly9CwyDMYVJwcgaf5djsgIQM+UuxzEpJ4SJ4UNMqdqvlEz8SD1lGP5JWy70fawCun6iOhFZYMb/T8/2+7Xz8giSAvesyXbkTR7Bj/DZWbq+TTd2isiwYJuwW0HYN96Batr9Kh8PazNbr4fWZv9plJF/ovXd3TLVB2t/8NCejHRvFk3+7oSDWYkQnT75l1eZ/Xy9WHop/Ob3r6INWFw7CLWvrog7sYuS/pWis7S4DbfRt8eyY9+UDwPozofO87PjTzfXs1/LKXr2Lb8/jpj+8jD4eWnpUeZfzR4tsMxYuLp82Ja3qD80+zMPsvbZ8KXtGmExGXHPjOJLfRwa3bec9nM4VNaUMCvmPzHktSjHYxwpI9EvwD+nF6khSIsr02AlOYpxTLnak6cktQSFICCCAtHMnezYnudHoeNY9tB2TGMUhsNRZDsdxzdHndCvOWiH4gjiIKMxkbEky+7m53OAMA0Ypgjn2jor4BIz9ROPEeBAGdOpuBwZZfg+E3fC8KHluq5mxY6nOSZoa/O252ud2GvPEZz72EWq8j3jt/Q2D2OO80MSdw9IfIohWREsmV6OOhOzzrioygtYFzwxW2vQorgQuyCXdBxYju/qjKSrBEvMepqhIsGt1XJV1Uhnu39LA5BV2sFoFBp2NAzbttfp9DtDwzHMkREaQvJ826zu54fpH3+rKyVsEJEGTCbax6Lb+N2qsgO3zvJdNdyTK612HxaIyGsoys5zAndIDj+9TZMco2aUouFgWGNuTI8VB27144yaSGhNYHMhmk0uFoGgiV7drBfQemkV63VRtceTFJgL97qpW6Y+w7AQPLa9z54x1RsX+pfWSIP6KHKjP8RX8CWdccBxKoZJqcQvvCFmmMk3xFjch/KrD5SDkKJuHJf8lG6QiKeGRPzpawQGUNoJ9Z3422Q5emvXCV97cUSe4uHACV1ISS6M7QdTATPhlgiGy/J956ccnAp+qGyK3GDhYprmBccff1EkdXVVAGFWUD6O1EqxT6cVTr5d4eDN6J2birJfd3DJPtzBP24mM0FsKVAbW/J7Y41U4wKxKld9haWrluJJKYLTxR59vwLcZ/C25XmW7/2WwQ8z6b1Tv9fs1fT4PvT+Aw==</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>102162bc-b113-491d-93a9-3ba493eb0af5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0f7fe22f-54ef-4517-bb83-03227ec5de81</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5d1ef9b7-f8d5-408a-93eb-121c6a1f486a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ac036d9c-17f2-41f4-ade9-86abe0c3e547</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0fb777ed-3421-4fcb-b690-e29d46afe2bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b0969bf-861f-45e0-b0d3-549c3e290ccf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3cc16cae-d805-44e0-8cef-94ef8d672940</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_007_DTCreate_DECE:CS_with_and_without_ULC" searchProperties="true" id="a676e315-e6f2-4e76-be7f-f96cfd1b8026"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="c47f19be-9327-47d3-806e-390d60a36a41"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdDECECS"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveDECE:CS"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="b6bdc316-8a43-442a-bbb2-daa81b81403b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="744fc1c5-5e2d-4158-9e0d-ccc1aee60fcb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="9dddf23a-e98c-4451-b1c5-693aa76733d3"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="dfdf6826-3c9a-470b-925f-fbedf6d59405">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="1af31aec-8280-4721-94da-b69bb27bbf3f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="c3c1e0df-79c7-4581-ada9-114fec51af26">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="b127dd0d-4fed-458b-8a10-e1f7eaa2e3c3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 1" id="a11390c6-57f2-4b53-8e16-c1e35bd88551">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate_with_ULC" id="38c3448e-5dd8-476f-ae5a-681e0c28c43b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveDECE:CS"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 2" id="2a020647-7e50-4d00-97fa-9d1aa02e7aff">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13BCC5BD564307F2E05305991F0A2204</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13BCDCA181C9437FE05307991F0AB4B0</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1429072625770@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>24</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>13BCDCA181C6437FE05307991F0AB4B0</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:13BCDCA181C6437FE05307991F0AB4B0</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>13BCC5BD564007F2E05305991F0A2204</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:13BCC5BD564007F2E05305991F0A2204</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1429072628083</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_5550ceb5-3755-443d-84bf-0f14eac9af7b</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0Vynmc8hUbsCtQhSFkmdzDZZN52RJyA5rYMrFkA/n6kQw4mECW3RcotVvdp7uPjnTJUBRaXpsxSDiJaWUVhZR5ubWppAn1YsQI8yiKgHkce4P23a1naYaHdluUSr/bVP5xHMfAMHHUat1xVNuuBmrDnkxVY2ragLCLpvWJcGUshT5lHFHeVCzDdFTDVk1naNhe1fEsU3Ns85dSGUPCRGzhohnKFtSKNZU55wtP15fLpbasanEy0y3DMPWXu9sBnkOElNblpqI8UdLa+mMtAAxhiDUcR/qlXvK5DJg3IDOKeJrANldwKpehG64ufAJGZhdKsReCPp3G+bKDaEwJRiH5QLI/d8DncVBph7M4IXwenSzCNGRgFVZYxaZNLxS9DO3MQCWECUMqmyNzG+sZppAAxVAZPfebysV5U8u3DhNE2TROIlZe/jc8QDMI4wUEKtuVtYV2fsAjnWpdAvb6FIcpIxncS7IuEAa2nSbg80NVHhOYktUtYYKgKybR6fvwDpabbnTJDBj/PwPaG84myBiFKbReomBofrg3T92Xj7TWuXbnxvgh436o95s5gH3n3FCMdrM8IGVBos0OyH6n91eDa1z7aIwjozFIr8L1j/rsx+h11p74bK7Tl+Gi9vp3GLTXzL8LOn7ttRFe+x9vS3swzZ4iZwCN8Kf718068X86jeH4zb2mdm8d97L7Ee/qMDJf5/UgmLuYpkk4zqq/sjf39maIe2370Q799G3IqnZIrmYs4rfje26taiNyV31Eo+jJN9q1XsP0TfrULMrZw1+27c78IJ38Bsx3S0mDfrfSE1NC/HsxkxYSqNPc1VtI8WEcKFdacpfUDi8VckcCT8xwszarfqfj+F2nZhtGvWddGU7VcFzX7BltyzLsnchsUBxA7MR0SmQuKbkb2nwPEEceAxpAomZxKpSOKd9E7CKOKn36LA5BTBkM46aCAMyJBbZqWyhQbQO7agPVkGqjKnKsac1FDUep3Mf8gT4k7SmHpKzO9ZI6PwMmCwJSwiXDmaA446Ir7yhLeWhqGdIopELkE6m3nmU3HJ2RaBGCxKxHcZCGoC3mi7xHOtv8WyrCLLfaRn7sThZ4+G3XC+ETEOnAZCk+iHnCkVvG3NVxot7awW20C99OAyJPmGgsTwjeICl/+uSLJEpBlvwHsx3swvvQUIqsHxZVJAsyggvWF3e3kHQhAq3dRN6Rqb1raZal+RCEtuuJCK8LzTP1AeBUaNR6GL8B1YsQ+lkXQoH6IHNhL+NL+ZwOOOIQCcZU8uUZL4ABMPkC6AvSr859XpRSir5xWPFjtk4oXi8S8bcPHOxh6SfMj+JvGSfB57iOxNrLI+oUDwBO6Eyu5GWwPkEMHIuwRMhYnOwHPxbgWPKysWhygYULNk1SDqe/VKQ+CX3AOE4p73eV3LCvmTlOvl6A9+n0JUwuy8U7jfz7Q00lOQUwiNcdI3l8ed16kv90tqe726SH0tvttM2G2anZ1Xovl976Rnp92zeKppTQtb6Yv1r2+nTI8dYf</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>102162bc-b113-491d-93a9-3ba493eb0af5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0f7fe22f-54ef-4517-bb83-03227ec5de81</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5d1ef9b7-f8d5-408a-93eb-121c6a1f486a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ac036d9c-17f2-41f4-ade9-86abe0c3e547</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0fb777ed-3421-4fcb-b690-e29d46afe2bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_008_DTCreate_RTL:CS_with_and_without_ULC" searchProperties="true" id="94235c9b-9e1d-4cf8-aba1-e617e1b451cf"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b0ae5ba8-b0e3-4043-bc03-e768d58bfb90"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTLCS"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="69091d54-f0a3-41e7-a3df-1feefbe1f897"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="758193cf-9e8c-4cea-b628-81106fee2ad4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="410b70ab-d9a0-4c7c-899e-bfd98b29362c"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="2970c3a4-50eb-410e-b1da-3f5ab4ec2528">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="5f6606c6-ca58-4d0d-af1c-d32ba789a1c1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="43c128b9-d98b-4be0-92bb-8fba5e225aac">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="49bc2a7b-8c6c-4dae-ab0f-a7cedab5fecf">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 1" id="f16ad82d-6457-4d17-b135-5ba1c2d3dc01">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate_with_ULC" id="430e57fd-ae66-4970-9b36-7e9f5486527c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 2" id="92135ae9-2ef6-41b3-b9b0-a507a0cfad8b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13BCDAB04B084350E05307991F0ABAB8</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13BCC5BFB5AB037CE05307991F0A39BA</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1429072711478@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>13BCC5BFB5AA037CE05307991F0A39BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:13BCC5BFB5AA037CE05307991F0A39BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>13BCDAB04B074350E05307991F0ABAB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:13BCDAB04B074350E05307991F0ABAB8</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1429072713115</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_1ac30c99-82b6-4ca8-a789-9fa2b3cfa895</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMvIVsCtQZSCZZcgVyNQkL1NCbkCJLRtLJsDXj2TAA4Rk2X1yqd06fdTdOupLjuPI8gPOIRM0YZVlHDHuF9amlmfMTzCn3Gc4Bu4L4g+D2xvfqho+3m3RKr1uU/ttYmIbxPP0hjWu6Q7BDR3XG57uTbA1tskENzxXunKeQ49xgZloapZhurrh6KY7MhzfrvmuXbUs50Wr/ISMS2zpUjW0Laklb2ozIVIfoff39+q7XU2yKbIMw0S/bm+GZAYx1lqXmxMVgbLW1p9UQyAQRaRKkhhdogOfy5D7QzplWOQZbGOFn8UykOEh6RNyOv2mlXsh7LFJUiw7mCWMEhzRNVb5uQUxS8JKEE2TjIpZ/OkhTEMB67AkOjEd9k1Dh9TOBDpgmHGs8xk2t1gDmEAGjEDladBrat/Oq1qxdZRhxidJFvPD5X/jA2wBUZJCqPPdsbbUzgc8kanWJRC/x0iUc7qAO9WsKSbAt9UEcj5U5SGDCV3eUC4bdMkVO7RP72i5yUaXToGL/1OgveJsQH7iKIcWHbmri+9rIOP0fsUon/L7RjxZRzcXvFkQ2HcuDGVpN8ujpiybaLNjvHbv0u4r9Mc0jp06XY9eXrpWGz093773591eYjfmbzR4fZqiRXyB+8Fr/8r7cTFPnfn6IZgPQ0TSp7uQovDh0fIc/hBfP72Es1fDW/0Ypg3U80Y189fUXr39CB4fQ2RfGDc/1+HzOAkWJm7/s14JHq5HAvXTTvpI4Hv666H/+PjcHwzGU3KL2q9vN7Vn9154V83yOHv8D227Oz/Mx69AxG6p2qDXrVzLKmHxtZgpCw31SeHqp0p8uAAmtJbapbTDz6Xc0dCXNdysTbvd6QZtw2kbdcd2jSvDtY2655nXRtAO2o2dyGxYHFHsJGxCVSwluZu2+ZogiX0OLIRMXyS5VDqufYHYxQJXemwgL0HCOIySplYHaEwsl+h2rQa6EzpjvYGtui7V1rXqhutOTKmzd4m4Z/dZMBGQHapz/UCdB0BoSkFJuOpwLlucC5mVOV7kIjKrC1xlkEuRz5Te+pbTcBGncRqB4oziJMwjqKaztMgR4puvpWPCC2unc+U4wbVjXXfrRs1uXxmOofJa5LderxWX8tPjH//bZUr6hFQ5cHXQNshqw4k3yNmd8kM2aiffqh18kIdU3T+ZdpFRsmFy+OtvN6k2KltpcDX63Rn+Nne8S/djwwE0Oj5VGS1cUFJeivJpl4ovNaK1K9gcm9V5NV8s8qJGjmOjTMIjKYkmGgLJpYStRskbMFRCoLPei5L1UeTSfsgvFzM2FFhALBuqUizPGBCGwNWA0JN3Ynnu9HEQUuZNwFKcsnUiOdwoxl/OP8Qnyk+aH+TnPcnCv+U6gbUXR55TzgeCsqlaqbdi9UlnkETCUqlySbYPfgrgVPBDY5nkkouQ3TTOBXz+p6Lkq6lhQpKciV5XKwz7klrwFKsU/L9OH2AK1S7HOPrvc5xOixYgIIc/Tgt89Rr7qv/ZdE+Wt0GPlbnjtq/bbhAYdr2zr8y21w7KpBywa30wf7Ts5em4x1t/AA==</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>102162bc-b113-491d-93a9-3ba493eb0af5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0f7fe22f-54ef-4517-bb83-03227ec5de81</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5d1ef9b7-f8d5-408a-93eb-121c6a1f486a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ac036d9c-17f2-41f4-ade9-86abe0c3e547</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0fb777ed-3421-4fcb-b690-e29d46afe2bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_009_DTCreate_ACSPTL:CS_with_and_without_ULC" searchProperties="true" id="bfa1d26b-7171-458a-aecd-3c12222d6036"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6230fef4-30cd-422d-81f2-171e6bf8af0c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdAccportalCS"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="a082ca21-4ff6-4aa8-965b-a804658ff301"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="422ea444-1d0f-4131-96aa-d0f01821c3ff"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="6d72d059-a86a-4180-9214-3f4e5f96ac45"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="79b6b409-69ab-467a-808e-a8e625604cb5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="b4fb960c-5349-4c73-9956-90b160ae7c37">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="18fbef23-4f5d-499f-8a0e-8a3ce9ab9c6a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="453b817f-d409-4545-96c5-c9e8ea943ac7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 1" id="e7d304e2-f22c-40ca-95f9-eaceb2839c56">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate_with_ULC" id="59a1ae73-4e19-4af5-b8d1-90866d958936">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 2" id="fb257f5b-50d5-40d1-999e-c373015b302f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13BCDC6D3D1D436FE05307991F0A369B</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13BCC5BFB66B037CE05307991F0A39BA</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1429072806434@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>13BCC5BFB66A037CE05307991F0A39BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:13BCC5BFB66A037CE05307991F0A39BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>13BCDC6D3D1C436FE05307991F0A369B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:13BCDC6D3D1C436FE05307991F0A369B</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1429072807954</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_348e4989-2692-4e13-8d21-d3d4f683ed81</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc9o6EP0rjPts/InBnsAMNtA6JW0ayEfzckfIa3BiS8SSgeTXVzLgYkJyuffJo/Vq9+zu0ZEuGMpS0+szBjlPKGlsspQwr7R2lSInHkUsYR5BGTCPY2/Svxp7ZlP30H6L0ggHXeUfy+6A7XZc1XRcU7XBsNROZBpqZEV27HQsiDqGcGWsgJAwjgjvKqZutFTdVo3WVLc9q+OZdtNuuY9K4w5yJmILl6au7EBtWFdZcL70NG29XjfXVpPmc83UdUN7uBpP8AIypPQuthWVifLezh83I8CQpriJaaZdaDWfi4h5k2ROEC9y2OWKPsqla7qrCZ+IJfMvSrUXopDEtFwGiFCSYJQmb0j25wr4gkaNfjqnecIX2YdFGLoMrMIGq9iwyRdFq0M7M1ANYc6QyhbI2MW6gRhyIBgatzdhV/ly3tTKrdMcERbTPGP15X/DA2QFKV1CpLJ9WTto5wc80aneBWAvJDgtWLKCH5KsS4SB7aYJ+PxQjesc4mQzTpgg6IZJdNohvKPlthuDZA6M/58BHQxnG+QOpQX0Nvc3bEa0+ep72LFf6Nvs4Xq1fhuPWdzvlgAOnUtDNdrt8oiUFYm2O8i19vPNfNIu/Ylm4ZmJENyGNrujcRaYydRt3d9+u0kn86X/uHiO1n3ELvXh/fThSXdn1rd7OhoFj1eLy3xzz9sPfnGdDadvjvMwvc6D+82tG+PVs0Gnl3M2i/nr45OzyN82vg4vobv+7hfc/31pu44F+OvvzuVtZo1f2mNE19Hk6/SxCEOIht/jYJD+yn6Nr7pVOQf467b9mZ8UsyfAfL+UNAgHjZGYEuKfi5m0JJEal67eUooP40C40pO7pHZ4hZC7JPLEDLdrw/KDQeAMrIER2JYzGuotS2+7rjHS+5bj+nuR2aI4ghhQEicyl5TcLW0+B4gzjwGJIFdXtBBKx5RPIg4QR42Q3IhDQAmDKe0qbmxaqK0LkseWodq6Ls6505qpTgvAaLkzI0KgNH5Q/pP8zPsxh7yuzu2aOt8ATpYJSAmXDGeC4oyLrrygVcFTo7lCTQKFEPlc6q3Y12lpLMmWKUjMWkajIoXmcrEse6Sx7ddUEWalNRiN+ro1GPYdy3Bd3x3qti77Kvvb7ljlgdE+LP/4375TwidKpAOThfogpg0n7iBjX+W7bjgn76p9+H4RJfL8ibbzPMFbJPVff9kkaVRRqR8Ew0kw2cOuvI8NtcjacVFVsmiV4OpMVDe7EHwhEb39vF6Q0XxpFqtVUY7Iti0tF+E1oYiGNgFcCAV7ndJnIFoVQjvruqhQH2Wu7HV8BV+QCUccMsGnRrk8430wASbfB6E4EptzHx+1lKJvHDb8lC1IxdtGIv70+YM9LP2E+Vp81jSP/o7rRKyDPKJO8TzgCZnLlbwqXj8gBqYibCJEjuaHwU8FOJW8bqyaXGHhgk2zgsPHfxpSvboKwpgWhIcDpTQcKmqJk78uwfvr9C5MKdrVKy7592ecmpQUwEKThH8ZX17GnuQ/mR+o8i7psTAHLX/kO44QkXZQE2bX71dNqaHrvTO/txz06ZjjvT8=</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>102162bc-b113-491d-93a9-3ba493eb0af5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0f7fe22f-54ef-4517-bb83-03227ec5de81</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5d1ef9b7-f8d5-408a-93eb-121c6a1f486a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ac036d9c-17f2-41f4-ade9-86abe0c3e547</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0fb777ed-3421-4fcb-b690-e29d46afe2bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_010_DTCreate_LLASP:CS_with_and_without_ULC" searchProperties="true" id="4d0c1add-42e8-4c82-8095-f5c80189af0d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="62dc5b01-6266-4931-895d-48d355023b62"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdLLASPCS"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="e84d585b-95a7-485f-b2ee-9a21f7247365"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="407197a3-fdf9-4d82-8af1-cf382ba2d7cb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="6ee80503-ab35-439c-9c38-3103646b39ee"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="b74b12a9-f69d-42fc-9aac-c7eed77df9d8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="6684a44d-1e05-4e92-b673-cac151f717e3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="31d803da-f19b-4da4-9b8e-eef4d009b3e9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="dfc734d4-e924-43bd-af52-1a4c9c9e9e09">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 1" id="dc561bdb-6954-4672-989d-c9c58f09fc8a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate_with_ULC" id="1aec258c-e2e2-4f35-841b-b660f356143d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 2" id="52a5961f-44b1-422c-b011-1e24d21ed373">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13BCC5BFB6A9037CE05307991F0A39BA</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13BCDAB04C4A4350E05307991F0ABAB8</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1429072898448@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>13BCDAB04C494350E05307991F0ABAB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:13BCDAB04C494350E05307991F0ABAB8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>13BCC5BFB6A8037CE05307991F0A39BA</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:13BCC5BFB6A8037CE05307991F0A39BA</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1429072900193</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_92e0cca1-a2d3-4639-a2af-dd54b289f632</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvO4ZXzl5gpUGZOLU4TJQMhk5mVKyA2I2DKxJAP5+pEMOEAuy+4TqN06fdTdOuoLhpLY9nzGIOMkpZV1ElPmFda2JjLqpYgR5lGUAPM49kb+Xd+zq6aH9lu0Sthra39aNpgYI0tHduTobt1pyX9oqkdRzZ3Yzda07tjSlTEBIWUcUd7WbNOq6aarW7UH0/WclldrVM1a/bdWeYSMSWzpUjW1Hak1a2tzzpeeYaxWq+rKqabZzLBN0zKe7vojPIcEaZ2L7YmKQFln54+rEWCIY1zFaWJcGEc+FxHzRmRGERcZ7GJFn8UyDbNlSJ+Ikdk3rdwLUUinabEMEE0pwSgmr0jl5w74PI0qfjxLM8LnyaeHsEwFrMMa69hy6TfNOKZ2JtARw4whnc2RtcMawhQyoBgq42HY1r6dV7Vi60OGKJumWcKOl/+ND9Ac4nQJkc72x9pROx/wg0x1LgB7IcWxYCSHgWrWJcLAdtUEfD5U5T6DKVn3CZMNumaKnXFI72S5zUaPzIDx/1Ogg+JsQR5RLKADgXN9Zz39vBFJnT4uhs834omRBzruN9sFgUPnwlCWdrs8acqyibY75nZ0LwY/n1oiFKuk33Py2uvDeBLl038GwnqcbQa/ePNVGOPv8+DGXPbqxuJ6ZbnPk9H15jUeO3ezR6v+jFe/+Mq3r18eHRdvJjej3L/9YQ9z4IyP+5un9Ec3cp8T7oa/roloisHlaLJY3oof17+HVsyH4cJMruz6IHzNHUiGU7EIJ/zOt/DrML69HW8Ww2BmtsvjHPA/tu3v/EhMFoD5fqnaIOxVrmSVEP9azJSFRPq0cPWWSnwYB8q1jtqltMMTUu5I5MkabteW0w2CWveqW/ebptMILs2aYzZaLevK9J1W19+LzJbFCcUgpVOiYinJ3bbN1wRx4jGgEWR6ngqpdEz7ArGHOKqEdCgvQUoZPKRtrQHIhKmS2gnG8p5jR28166A3rKnbdO2mWY+QVhmk/Dv9nvlTDtmxOjeO1HkImCwJKAlXHc5kizMus/KCcsFjq5qjKgUhRT5TeuvZbrNmMJIsY1CcjSSNRAzV5XxZ5Mhg219bR5gV1iC4dF3/yrWvgp5Zd7qXpmuqvBb5bTTqxaX89Pin3/aZkj4RUQ5MHbQLstrwwRvk7k/5STbqJ2/VHt4XEVH3T6adZwRvmRx/eusm1UZlK/X7/uj+TzD6Y+2ZlxtODUfgxum5ynhRTnB5LcrHXWq+VInOvmQvyKq+VEWei6JKrusYmYQ3pChaxgiwkCK2eUifgRolhHHWi1GyPolc2o/5CT6nI444JLKlKsXyjBFhBEyNCKG8Fetz54+jkDJvHNb8I1sQy/FGMf5yAsIeVn7SfC9/VmkWvZXrA6yDOPKcckLghM7USr0Wm096A6cSlkidS7ND8I8APgp+bCyTXHLhspsmgsPnXypKwNoawjgVlIc9rTAcimrBk2+W4L05vYMpdLsc5Mi/T3I6KVoAgxz/GCnw1Xvsqf6nswNh3gU91eae3zXdwG25Ts081Oau322WSTli13lnfm85yNNpj3f+Ag==</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>102162bc-b113-491d-93a9-3ba493eb0af5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0f7fe22f-54ef-4517-bb83-03227ec5de81</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5d1ef9b7-f8d5-408a-93eb-121c6a1f486a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ac036d9c-17f2-41f4-ade9-86abe0c3e547</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0fb777ed-3421-4fcb-b690-e29d46afe2bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_011_DTCreate_DLASP:CS_with_and_without_ULC" searchProperties="true" id="1f11a657-adb3-4330-9c96-83c4f34f370b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="61cff956-f910-457d-9f26-80e8f64f33ea"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdDLASPCS"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="4daec07e-7f12-4436-8060-3c66d597050e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="9f1ce8f7-cdac-4b71-9f4f-01f1c1d5adf5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="28c67be3-7657-48b6-9bcb-db7c4bfd37fe"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="fde67290-dedf-4f92-aa33-a5b89685cc50">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="35064285-859b-4121-be6a-9a6204b88b84">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="f23b7bbc-125a-4052-9484-ec833bbe8bc5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="232399f2-74f4-43a8-a207-5df795be327f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 1" id="0d2475f8-e398-4d3b-af90-ae8c909b2b13">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate_with_ULC" id="a08ab374-9f5f-409f-8995-e536060c6d54">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 2" id="ccdb8a3a-4eb2-47b6-ac17-520286dd8b70">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13BCC5BFB79E037CE05307991F0A39BA</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13BCDCA1828B437FE05307991F0AB4B0</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1429072990601@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>13BCDCA1828A437FE05307991F0AB4B0</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:13BCDCA1828A437FE05307991F0AB4B0</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>13BCC5BFB79D037CE05307991F0A39BA</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:13BCC5BFB79D037CE05307991F0A39BA</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1429072993383</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_acf40b67-ebe3-42c7-8715-81e3fd39a0a3</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZXwFgytQZUxImIVAApnMzMuULLdBWVsGS+aSr1/JgAcIybL75FK7dfqou3XUNwwlsel6jEHGSUormySmzC2sLSXPqJsiRphLUQLM5dideMOBa1Z1Fx22KJV+t6X8Rjiy9aDuqBCApdomdtSGY9TUhgFWFFpNpCNLuDKWQ58yjihvKaYuHHRbNWpT3XZtw7X0arNh/1Iq3yFjAlu4VHVlT2rDWsqc84Wraev1urq2qmk200xdN7Qfw8EEzyFBSvtmd6IiUNbe++NqCBjiGFdxmmg32onPTcjcCZlRxPMM9rHCj2Lpmt7UhE/IyOyLUu6FsE+jtFj6iKaUYBSTNyTzMwQ+T8OKF8/SjPB58uEhDF0Cq7DBKjZs+kXRTqldCXTCMGNIZXNk7LGeIIIMKIbK81O/pXy5rmrF1mmGKIvSLGGny//GB+gK4nQBocoOx9pTux7wQqbaN4DdPsVxzsgKHmSzLhAGtq8m4OuhKuMMIrIZECYadMMkO+2Y3tlyl40umQHj/6dAR8XZgXxHcQ7t+44XvKDXO51v77568f3oTdMG/ftZ8py2CgLHzoWhLO1uedaUZRPtdqzWENT8uEvC76vXu/RtOHh9NNbj4ejWjB7819p868xGs/jby1u0fG6k9namvdXzl1X9q0/hdqKZY3/wV//x/i1wnuYPP80fvVWwSTrfXnwymNgo0Ua1rfccLZfjbrR97mjGbOKtnO0d/Rks70fmMJ6wmGfZOGD1wbAxT6Jv02CNalvYDAaPa46mg83DfW/667lrt8rjHPE/tR3u/CQPXgHzw1K2Qb9b6YkqIf65mEkLCdWocHUXUnwYB8qVttwltcPNhdyR0BU13K0Nq+P7tU6v4zS7uuX4t3rN0p1m0+jpntXseAeR2bE4o+inNCIylpTcXdt8ThAnLgMaQqau0lwoHVM+Qewijip9+iQuQUoZTNOWEkDQdOpWQ3UaqKnaRgPUANuhWjPNUK9jbISNmlJ5SPmIjjIv4pCdqrNzos5PgMmCgJRw2eFMtDjjIitLtMp5bFRXqEohFyKfSb11TbtR0xhJFjFIzlqShnkM1cV8UeRIY7uvqSLMCqvv39q217PNXtfU61bnVrd1mdciv45TLy7lh8c//3fIlPAJiXRg8qAdENWGC2+QeTjlu2zUL75VB3gvD4m8fyLtPCN4x+T0159ukm1UtlJ34E3Gv/3Jb+PAvNxwbjgB187PVcYLVwSX16J83IXmC5VoH0q2REZ1Wc1Xq7yokm1bWibgNSGKhjYBnAsR207Tv4FqJYR21YtRsj6LXNpP+eV8TicccUhES1WK5RUjwgSYHBH64lZsrp0/TkKKvHHY8Es2PxbjjWT86QSEXSz9hHksPus0C/+U6wLWURxxTjEhcEJnciVfi+0HvYFTAUuEzqXZMfglgEvBT41lkksuXHRTkHP4+E9FClhLQRinOeX9rlIYjkW14Mm3C3D/OL2DKXS7HOTIv09yKilaAIMY/xgp8OV77Mr+p7MjYd4HPdfmru8ZDbPh2ZbTO9bmjt3Ry6ScsGu/M7+3HOXpvMfb/wA=</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>102162bc-b113-491d-93a9-3ba493eb0af5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0f7fe22f-54ef-4517-bb83-03227ec5de81</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5d1ef9b7-f8d5-408a-93eb-121c6a1f486a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ac036d9c-17f2-41f4-ade9-86abe0c3e547</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0fb777ed-3421-4fcb-b690-e29d46afe2bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_012_DTCreate_Portal:CS_with_and_without_ULC" searchProperties="true" id="5e530a38-8795-45bd-ba2f-f296cd7da5aa"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="5278705c-7ce0-4ad6-aff2-44d955374aad"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdportalCS"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="65af09f6-f3a9-4497-ab94-863360cdb109"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="2b83d2d1-7ee5-4f22-b064-cf59ac310f59"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="52047376-40dc-422f-8de2-07ca27557f4b"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="ed9f2e24-8b07-4958-b845-98a6b562babc">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="f7312181-6a7c-4dce-8930-00c17fd21631">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="8d231f04-99cf-4458-82bd-3b707188b15e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="d8b09e3c-bd25-4269-9597-6ac12550e3ff">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 1" id="38d66b93-50b2-4419-a2d6-c35607dffcb5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate_with_ULC" id="f4db802d-9dbe-4c8e-9fc3-cfdd26a5464d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 2" id="be3151c4-988f-46ae-a6e4-00af9477cb2c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13BCDC6D3E2D436FE05307991F0A369B</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13BCC5BFB7B2037CE05307991F0A39BA</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1429073085542@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>13BCC5BFB7B1037CE05307991F0A39BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:13BCC5BFB7B1037CE05307991F0A39BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>13BCDC6D3E2C436FE05307991F0A369B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:13BCDC6D3E2C436FE05307991F0A369B</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1429073087215</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_5735c75d-438d-40d7-b08c-ca71c3f81a64</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMpZvGLsCVRiHhA2ZZIEENi9bQhagGSMZSwYyX7+SAQ8ml2X3BUrt1umj7tZRX3O4SqygwznOBGG0tlsllAeFtaXlGQ0Y5IQHFK4wDwQKRp2HQWDVQQCPW7RaP2ppf7ue7SLPjXXHbsofEHv6DDSRjqBnInveNGHDka6c57hPuYBUtDQLmK4OHN10x8AJHDsAZt30/Fet9oIzLrGlSx1oB1I73tKWQqSBYWy32/rWrrNsYVgAmMb0YTBCS7yCWvt6f6IiUNY++KN6jBFOElRHbGVcGxWf65gHI7KgUOQZPsSKP4sFDOAb0ifmZPFNK/fiuE/nrFh2IWWUIJiQX1Dl5wGLJYtrnWTBMiKWq08PYQIFrOOdTJrp0G+aUaV2IVCFYcahzpfQPGAN8RxnmCJcex72W9q3y6pWbB1nkPI5y1a8uvxvfDDd4ISlONb58VgHapcDfpCp9jVGQZ+iJOdkg7+rZk0hwvxQTYwuh6o9ZXhOdgPCZYPuuGJnnNI7W+6zEZEF5uL/FOikOHuQF5jkuB3fvzkDRlkeiqvXht1lmcg6bvdqOgStgsCpc2EoS7tfnjVl2UT7HXf57S9Aw4duNOFXu7G7fBvcE2ebhut4Fg/unh9vd8PJ2Nn4UTNsgr/Slz+aFn9cvDybfn82ux+iSW/SGLPFVWiAKHtFP7pr/+opiZ4GLHX7bJr+HDSSH0trOr3f3Pl4Pt6spxMhAW+Xz/3tYvoy2uLY6i35bPqErwY+nE+a2Z13G7JRI3kd3Vvz57c/IzdaT1CrPM4J/6rteOdH+ewHRuK4VG3Qj2o9WSUovhYzZSGxPi9cg1SJDxeYCq2tdintCHIpdyQOZA33a9MOu1G3Edk3VtexG70b4NrA832zBzp2ww+PIrNncUaxy+icqFhKcvdt8zVBtAo4pjHO9A3LpdJx7QvECApY69OhvASMcjxmLc1v2C6cO1h3mqa857EUXWg2oVp6PvSsBnJcrfadiUf6mHXmAmdVdfYq6jzEiKQEKwlXHc5li3Mhs7KGm1wkZn0D6xTnUuQzpbeB5TRdg5NVmmDF2VixOE9wPV2mRY4Mvv+3dIh4YY06YWR2POB3OpEPXOsGOEDlVeW3ceP3ikv56fHPvx0zJX1iohy4OmiIZbXxuzfICtzjKd9lo/HhW3WE7+QxUfdPpl1kBO2ZVD/97ibVRmUrEY5SecFhgrh55F5uOTdU4I3zk5UR4w1B5cUon3ep+lIn2seiraFZX9fzzSYv6uQ4tpFJeEPKommMMMqljL2N2U9MjRLCuOjNKFmfRS7tVX65WNKRgAKvZFPViuUFQ8IIczUk9OW92F06gVRCyrwJvBMf2bqJHHAU4y9nIBQg5SfNT/Jvy7L4d7k+wDqJI88pZwRB6EKt1Hvx9kl3ICZhiVQ6lp2CfwTwUfCqsUxyyUXIbprlAn/+paYkrKVBhFhORT/SCsOprBY8xVuKg99O72AK5S5HOfLvs5xOihZAWA6AnBT46kUOVP/TxYk0H4Keq3PXDXuhF5rA9roVdfbDTpmUCrv2O/N7y0meznu8/Q8=</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>102162bc-b113-491d-93a9-3ba493eb0af5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0f7fe22f-54ef-4517-bb83-03227ec5de81</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5d1ef9b7-f8d5-408a-93eb-121c6a1f486a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ac036d9c-17f2-41f4-ade9-86abe0c3e547</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0fb777ed-3421-4fcb-b690-e29d46afe2bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_013_DTCreate_Coordinator:CS_with_and_without_ULC" searchProperties="true" id="19a45105-883f-42d4-a729-641491e72cb7"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9fa66516-1995-4620-955b-410f0b273155"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdCoordCS"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="f5f0a87c-a229-4823-9b4f-356f662ce9aa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="196807f1-33c3-4ad7-bd97-ba775c196dcb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="6a9a3ec1-eb56-4d29-8fc0-da50b6d0b0e0"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="1a0e050d-91fa-4610-8f5a-faa2fc2c1d79">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="c6ab178a-e20d-4480-838a-ed2595dd0a16">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="bcbbaff8-1200-4254-806e-027e4f7fd615">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="57ae3b08-97b1-40d3-bf26-e1bfcbc4a46e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 1" id="c985a04e-ac98-4d2b-badc-96035c8053f9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate_with_ULC" id="95fb9815-a7bc-4141-9062-3092fefd369b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 2" id="ccc5efa8-a646-4e45-bb02-525bdb659150">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13BCE1C93D5322CDE05305991F0A016D</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13BCDC6D3E3D436FE05307991F0A369B</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1429073170954@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>13BCDC6D3E3B436FE05307991F0A369B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:13BCDC6D3E3B436FE05307991F0A369B</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>13BCE1C93D5122CDE05305991F0A016D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:13BCE1C93D5122CDE05305991F0A016D</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1429073173193</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_a457a9ea-b505-4d41-9b15-ad15908f15ea</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc6JKEP0rFvu4hXwboaJVCmajG/OhJrubl1vj0OjchcEwg5L99XcGlYgxud77RE3TdJ/uPpzpS4aS2PR6jEHGSUobRRJT5pXWjpJn1EsRI8yjKAHmcexNe+Mbz2zqHtp/ojSGQUf5C9nOBXIBqXNHd1Q7tA3VnRuOikLDcfV2ZDiAhCtjOQwp44jyjmLqwkG3VcOZ6bZn257Zatp2+1lpPEHGRGzh0tSVHaiCdZQl5ytP0zabTXNjNdNsoZm6bmg/xzdTvIQEKd3LbUVloqy788fNEDDEMW7iNNEutZrPZci8KVlQxPMMdrnCj3Lpmu5qwidkZPFFqb6FcEijtDz6iKaUYBSTP0j2Zwx8mYaNXrxIM8KXyYdFGLoMrEKBVWzY9Iui1aGdGaiGMGNIZUtk7GJNIIIMKIbG42TYUb6cN7Xy01mGKIvSLGH143/DA3QNcbqCUGX7snbQzg94olPdS8DekOI4Z2QNt5KsK4SB7aYJ+PxQjfsMIlLcECYIWjCJTjuEd3TcdiMgC2D8/wzoYDjbIE8ozqGbgp+a49aDvn74czF+Hl4/oZv1yGk9JYNOCeDQuTRUo90ej0hZkWgXfv3tufiRxD/cict1g/fu8x+vSH91kvEv9+ft14H15Fv4efMwSmb9EAXTnq0VkzigL9H8z2CCzfFVsbx/un7skdXXuICgDfoG+NfRcx/9vstHV4P+KL8u/FE4aJkT186/X31buPkDY6vX5cwfPtwU0Ux/eXi8z5bB3S8jTNk6HkU3o1+/V5Okl44Ldz7DfuhfDztVOQf467b9Pz/N538D5vujpMEwaFyJKSH+uZhJCwnVqHT1VlJ8GAfKla78SmqHlwu5I6EnZrg9G1bfHxi+awWOYZp+MNAdS3dc17jSe7rRCvYis0VxBNFPaURkLim5W9p8DhAnHgMaQqau01woHVM+iRggjhpDOhE/QUoZzNKOgi1omXprrl5gG1TbbOvqHHBb1dvzthlZkW21DKVxm/I7epf1Ig5ZXZ0vauo8AUxWBKSES4YzQXHGRVde0DrnsdFcoyaFXIh8JvXWM+22ozGSrGKQmLUkDfMYmqvlquyRxrZPU0WYlVa7/CW0Dws8frfvhfAJiXRgspQ+iHnCiVvG2Nfxrt7WydtoH76Xh0T+YaKxPCN4i6T+6o0vkigVWXCaZqGH2R535X5sqIXWjquqsoVrgivaV5e30HShAt39SF6Q0Xxp5ut1Xk7Bti0tE+E1IXqGNgWcC5F6naW/gWpVCO2sG6FCfZS5stfx5XxJpxxxSARlGuXxjBVgCkyuAEPB+uLc/aKWUvSNQ8FP2fxYrC8S8acbDvaw9BPme/HYiBG+jetErIM8ok6xAXBCF/Ikb4PXz5hBhI6l2WHwUwFOJa8bqyZXWLhg0zzn8PGbhhSojoIwTnPKh4FSGg5Fs8TJX1fgvTm9C1PqcrWokX/f1FRSUgCDWO8YKePL+9aT/KeLA+HdJT3W3sBvBdbA6gvluiq192KrvVbL7VdNqaHrvjO/txz06Zjj3X8A</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>102162bc-b113-491d-93a9-3ba493eb0af5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0f7fe22f-54ef-4517-bb83-03227ec5de81</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5d1ef9b7-f8d5-408a-93eb-121c6a1f486a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ac036d9c-17f2-41f4-ade9-86abe0c3e547</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0fb777ed-3421-4fcb-b690-e29d46afe2bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_014_DTCreate_Coordinator_with_and_without_ULC" searchProperties="true" id="5b5cfa49-57cf-41a3-9d47-69e8d1148883"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="219cefea-b8bf-4ffd-9546-efcf8a12a13d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);
tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="ffda6cfd-7c59-4e62-9e55-841a077db061"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="25a47974-2c76-4a23-8f94-ea07cf38aca8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="c4fdcb06-23b9-4c86-9864-79d192f5e225"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="3e9b4497-adb3-4b2f-9d25-291affa0c644">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="09378146-0eeb-4a7f-9381-8adaf6cb812f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="2735da39-6240-4274-9aeb-b065d2274f7c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="37fabf23-2dc0-482c-b41c-ca2d0ed3146f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdCoo"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 1" id="0b24d7c1-311f-4700-af36-a31688818810">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate_with_ULC" id="c3ae9e8b-cbd7-404e-99c6-f91af9b4dd3b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 2" id="0aaaa64c-1939-4914-b728-28cce479c800">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B3E1A4BBB01E6EE05305991F0A14FC</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B3E1BDD32E4D08E05307991F0A13ED</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>COO</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418039893672@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B3E1BDD32D4D08E05307991F0A13ED</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B3E1BDD32D4D08E05307991F0A13ED</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B3E1A4BBAF1E6EE05305991F0A14FC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B3E1A4BBAF1E6EE05305991F0A14FC</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418039895202</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_08914594-f7a3-425f-9e07-d8634a494131</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbZcuo4EP0VynlMGdvYbK5AFQRI4GZjCZPkZUrIbVCwJbBklnz9SAYcTJZh5smldqv7dPfRka44CoOC2+AcIkEYzW3CgHI3sda0OKIuQ5xwl6IQuCuwO2zc37mFvOmiwxYt123VtL/NStVyilVH98vI1p1C0derYJZ1r1KyHeRUHcu2pCvnMXQpF4iKmlYwLUe3CrpZGVmWWyy5TiVvOaU3LTeGiMvY0iVvantQG17TZkIsXMNYr9f5tZ1n0dQomKZlvNzfDfEMQqTVr3YVJYmi+t4f5z3AEAQ4j1loXBkZnyuPu0MypUjEEexzeT/lMg2zakgfj5PphZbuBa9LfZYsrxFllGAUkA+k+nMPYsa8XCOYsoiIWfhjEZapAuuwwTq2HHqhGVloZwbKIIw40vkMWftYA/AhAooh9zzo1rSL86aWbB1FiHKfRSHPLv8bHqArCNgCPJ0fytpDOz/gN52qXwF2uxQHMScreFBkXSAMfD9NwOeHyj1F4JPNHeGSoBuu0BnH8E6Wu260yBS4+D8DOhrOLsgYBTHUx/01Gm56xer95mXtX3qz+9dhvwLW6o7VEgDHzokhHe1ueULKlES7HdHNXem547+iXvGd92+L8NjmyOw4HfPpcVDBPes2qjJz0njqrGfO6IbafxqlV3IZv986jcvV8K+XMZldN9+aaP64Xjerw4fqw+rhNX4bi0n/Dwcclp/ftrOmdddHsf0Rzv1mYTkvze4nnZvR8yu2WYSX9KXZa89Lt/GwOHlekc447FswgR7Dt71Ca7tujC4vK1uzlpZzhD9rO5z5YTx5BywOS0WDbivXkVNC4ncxUxbi6X7i6i6U+HABVGh1tUtphxtLuSOeK2e4W5vVpt22Gk6z2ehY7VK7bRZts1itWh2zYTmd64PI7FCcQLxm1Ccql5LcHW1+B4hDlwP1INJXLJZKx7VfIraQQLkuHchDwCiHEZPyHGw8s+KUQ1LxQxv4Zokq5H3+oeUemHikj1HDFxBlFdnJKPIAMFkQULKtWM0lrbmQnViiVSwCK79CeQqxFPZIaaxbcCpFg5NwEYDCaYTMiwPIL2aLpC8G330LOsI8sQ7ao+Ss/VjV6b9DA6SPR5QDV7U0QQ4Rvrla7EMhPxdcPi74EL4Re0QdK9lNERG8Q5L99UkSxY6UIbKiA+TU89SQiWqcFpQm8lYEpzRPL2up4fLU1w/jWKL8Mh+vVnEygLJSt0iGN6TIWcYQcCxFaTtic6BGGsI46wZIUZ9kTu1ZfLGY0aFAAkJJl1yyPOPKHwJXV35Xsnxz7nsik1L2TcBGfGe7DuRzRSH+9UWDXaz8pPlJftYs8j7H9U2sozyyTnnjC0KnaqXUf/sDKTCTYYnULRYdB/8uwHfJs8a0ySkWIdk0iQX8/CenBKmmIYxZTEW3pSWGY5FMcIrtAtxPpy9hEh1OH2bk319mOkkogEE+5zhJ4qv71VX8p9Mjod0n/aq1zVbLLrSclllJtLa811q73UqbkkFX/2L+ajnq0ynH6/8A</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48ce6c76-313c-4d61-ac86-6bd7fd0a210f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>102162bc-b113-491d-93a9-3ba493eb0af5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0f7fe22f-54ef-4517-bb83-03227ec5de81</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5d1ef9b7-f8d5-408a-93eb-121c6a1f486a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ac036d9c-17f2-41f4-ade9-86abe0c3e547</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0fb777ed-3421-4fcb-b690-e29d46afe2bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:tearDownScript>if(context.expand( '${#Project#runTeardown}' )=='true')
	{
	log.info("Executing TearDown for Suite '" + testSuite.getName() + "'");
	
	for ( testCaseResult in runner.results )
	{
	   currentTestCaseName = testCaseResult.getTestCase().name;  
	   currentTestCase = testCaseResult.getTestCase(); 
	   log.info("Current TestCase : '"+ currentTestCaseName + "'");
	   log.info("Current TestCase Status : '" + testCaseResult.getStatus().toString() + "'");
	   
	   if ( testCaseResult.getStatus().toString() == 'FAILED' )
	   {
	      log.info("Re-executing failed TC");
	      def currentRunnerTC = currentTestCase.run(null, false);
	      log.info("Status on re-execution : '" + currentRunnerTC.status + "'");
	   }
	}
	log.info("Execution of TearDown for Suite '" + testSuite.getName() + "' Completed" );
}</con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="6_DTCreate_RTL" id="7b45a65e-09f5-4d8a-a1e9-c818d2439c97"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_001_DTCreate_retailer_After_15_minutes_of_user_CREATED_DATE" searchProperties="true" id="b270d9f0-2161-4582-89c2-75e51110426b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e8bca579-8703-458c-9a98-b928ded73f73"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="bde14ee9-05dd-4ee1-a248-7015eb7089ce"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="1e20b2e4-f48b-4240-bd4e-babe287fd5d3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="093ef7ef-2c1e-4790-8f11-262225ae9eb4"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" disabled="true" id="cbdc7b18-d5c0-442f-b85f-5e2bfe935c1f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" disabled="true" id="7fd3e55e-6474-412b-8ff6-a08cabfac2ac">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" disabled="true" id="4115a097-8bb5-4e1e-bf2f-c517a0e0bbbd">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set User Created date" id="b7106060-d3df-45da-a389-11c5bc92ba36"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand( '${#Project#targetSystem}' );
String useroid = tC.getPropertyValue("USER_OID");


a = new dbUtils.dbUtils(log,dbHost);

def time = "-16/1440";

log.info "time:"+time;
sql = """DECLARE
BEGIN
UPDATE ACCOUNT_USER set CREATED_DATE = sysdate """+ time +""" where USER_OID = hextoraw('""" + useroid +"""');
END;""";

a.dbConnExecuteUpdate(sql,dbHost);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="2e3aaad2-eccb-446d-ac28-8861b4bddab9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13BD567C7D420DD1E05305991F0AA17A</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13BD565D3A432966E05305991F0AC705</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1429074667083@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>13BD565D3A422966E05305991F0AC705</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:13BD565D3A422966E05305991F0AC705</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>13BD567C7D410DD1E05305991F0AA17A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:13BD567C7D410DD1E05305991F0AA17A</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1429074669373</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_ad867b82-38e8-428c-81b9-fca1097b680b</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b7106060-d3df-45da-a389-11c5bc92ba36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_002_DTCreate_retailer_Grant_for_active_full_user_without_ULC" searchProperties="true" id="d993eafa-d2bc-425b-836a-2048a317bf16"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e4236355-708a-4e39-a9d7-d6a4beb82fbf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
//tC.setPropertyValue("PrimaryEmail","ikalyan@gmail.com");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="77bc5b19-f5dd-4012-af7b-13f17c586969"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="a068926f-451f-45a7-aa26-a9fce40575b5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="07aeaa9f-15f5-45fd-9608-4e989eb950be"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="b105d13b-ed38-4952-a84c-234e5c48de37">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="02a01fa2-0d9a-4aeb-9a6e-149768a08f5d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="021fbe3b-2335-4d51-a5eb-29bc8e6ddeb0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="bbf2fd04-7156-4425-a974-e732825b4854">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>13BD565D3A5C2966E05305991F0AC705</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>13BD567C7D530DD1E05305991F0AA17A</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1429074724876@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>13BD567C7D520DD1E05305991F0AA17A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:13BD567C7D520DD1E05305991F0AA17A</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>13BD565D3A5B2966E05305991F0AC705</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:13BD565D3A5B2966E05305991F0AC705</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1429074726626</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_591f4933-2c49-4434-9c9c-7600b3d4fd64</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZXwB2+AKVDmYZJzJbQLJJHnZEnKDldgSsWQg+fqRDHgwuSy7Ty61W92nu4+OdMRRltp+wDnkgjDaWGUp5X5p7WlFTn2GOOE+RRlwX2B/FFyc+3bT9NF2i9aIwp72jwnY7brQ0W1n6uptz3L1yWTi6mCblhu3Wp7nIunKeQER5QJR0dPkL0c327rljE3HN7t+q930HO9Ra9xBzmVs6dI0tQ2oFe9piRBz3zCWy2Vz2WqyfGbYpmkZ9xfnI5xAhrT+0bqiMlHe3/jjZgwY0hQ3McuMI6PmcxRzf0RmFIkih02u+LNcpmF2DekTczL7plV7IY7olJXLAaKMEoxS8oZUfy5AJCxuBOmM5UQk2adFWKYKrMMK69hq02+aUYd2YKAawpwjnSfI2sS6gSnkQDE0bm+invbtsKmVW8c5onzK8ozXl/8ND9AFpGwOsc63ZW2gHR7wg071jwD7EcVpwckCLhVZ5wgD30wT8OGhGtc5TMnqnHBJ0BVX6IxdeHvLdTdCMgMu/s+AdoazDnKH0gL6l8vTYRK2yeiHW/z0up3rk2ubdcfWT4/3SgC7zqWhGu16uUfKikTrHU/2VWg8t6JbM3gV5yIY3iU3t8/d7/ftM7wM3PEZtp+fiuIluD5+DR5N8/77bIro5cPv4MI4X5x24gE7+zmBu2v7x9BLTifL87tJYEQiP3t7jB5+jUdmZ0BHneGTe19kk/avWza8d757QWH9uE3DE4ZeEwuJ38mvcZ6wiXP5cElm03Fg2NHi9uR0gVdLM7m6aEVXuNOrytnBX7dtz/yomDwBFtulokEUNk7klJD4WsyUhcT6tHT150p8uAAqtL7apbTDL6TckdiXM1yvrdZx6LhO2AqcY7vrukPTaZlOt2udmMHAM52tyKxR7EEcMDolKpeS3DVtvgaIM58DjSHXF6yQSse1LyKGSKBGRG/kIWCUw5hJeeaEpG8YYDYlMTfRynubTBdZrjUumbiiV3kwFZDXFblTU+QbwGROQMm2YjWXtOZCduIFLQqRWs0FalIopLDnSmN9u91xDE6yeQoKp5GxuEihOU/mZV8Mvv7aOsK8tN4Mx+VZ+7Sq/X/bBkifmCgHrmo5BjlE+OBqsbeFfFqwZe0WvA0fFDFRx0p2U+QEr5HUf/0liWJHxRBZ0RZy5blvqEU19guqEsULgiuaV5e11HB56vvbcbwgq/nSLBaLopxAu90ychnekCJnGSPAhRSl1zF7BmpUIYyDboAK9V7myl7HV4iEjgQSkEm6NMrlAVf+CLi68iPJ8tWh74laStk3ASvxkW2QyueKQvzliwb7WPlJ87X8LFke/x3XB7F28sg65Y0vCJ2plVL/109IgZkMS6RusXw3+EcBPkpeN1ZNrrAIyaZJIeDzPw0lSD0NYcwKKqJQKw27IlniFK9z8P86vQtT6nD1MCP//jLTSUkBDPI5x0kZX92vvuI/ne0I7Sbpe631Bl7o2GYYWrtaG1heUDWlhq7/zvzestOnfY73/wA=</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b7106060-d3df-45da-a389-11c5bc92ba36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_003_DTCreate_retailer_Grant_for_active_standard_user_without_ULC" searchProperties="true" id="4b068477-53d2-4859-8b46-541a7addbe27"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6e13be8b-239d-409c-a7b3-4706cb55f0f4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="00715cfe-f258-4f9d-9ba8-c27d796997c1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="8f2dfe0d-f80c-420f-83e7-e67d289cf47c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="3653877f-6214-4b6c-b8f5-204e2bf77f47"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User" id="04d6b915-c604-4173-8a71-2c25704a5abf">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="11110a7a-37bc-4480-b283-79fbce87986b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="09b537e9-afad-4eaf-8f6e-27e19869000b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="cdab5f41-2654-480a-9088-1b1361052ee5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set EmailId for Standard User" id="dd51214a-74f5-487e-87c1-2c414c8296f1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Standard User Create" id="b511e495-ca37-4c1b-b1da-e685fe04bb06"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="0eb4a031-b828-42fd-9bc5-7b9ee0ce7e35"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="38c7908a-abf7-4f8e-9238-90bb58fe94f9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="4bc4319c-ccc3-44db-a0ad-5885582b8014">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create_Standard" id="fabb013c-9aad-402f-b690-faa6cf7e6988">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for SecondUser" id="5ab78592-ba39-4084-a3ff-8deaf2d3922b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 1" id="73a28beb-2668-4b37-aa41-230686c1a613">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>13BD565D3A6D2966E05305991F0AC705</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>13BD567C7D7D0DD1E05305991F0AA17A</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1429074778324@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>13BD567C7D7C0DD1E05305991F0AA17A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:13BD567C7D7C0DD1E05305991F0AA17A</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>13BD565D3A6C2966E05305991F0AC705</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:13BD565D3A6C2966E05305991F0AC705</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1429074779954</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_7aa61c5d-f4d2-4a31-b526-2a79b1d0d1d6</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_d26edb33-6c05-4112-9a33-0dc76135ec4d</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcqM4EP0VF/M4hREYMFCxqxxfEs8mkxnsXCYvW7IQWAkWGAmM5+tXwjZjnMt694lS0zp91N066gsGV7HhDRjDGScJbZWrmDKvsvaUPKNeAhlhHoUrzDyOvNng9sYz2sCDhy1KazrqKX/DLgotxzbU0HZM1bRNQ3UdvavqMDA7bmibgesIV8ZyPKWMQ8p7igF0U9UNVXfmuu5ZtmfYbcNwnpXWA86YwBYubaDsSZWspyw5Tz1N22w27U2nnWSRZgCga0+3NzO0xCuo9C92J6oCZf29P2oHGOE4Rm2UrLQLreFzETBvRiIKeZ7hfazgo1hAA64mfAJGoi9KvRcHUxom1XIIaUIJgjH5DWV+bjFfJkFrEEdJRvhy9eEhdCCBVVwiFekm/aJoTWpnAjUYZgyqbAn1PZaPQ5xhinDr3p/2lC/nVa3aOs8gZWGSrVhz+d/4YFrgOElxoLLDsfbUzgd8J1P9C4y8KUVxzkiBv8tmTSHCbF9NjM6Hav3IcEjKG8JEg5ZMstOO6Z0sd9kYkQgz/n8KdFScHcgDjHPcv0qB/0qG9xurmK6fTfJXzuIFcCIn3fQqAsfOlaEu7W550pR1E+12BPOf5n05i/P8kV6BePk4AcnUj29e8nxup8H67sE0i+23ES6s7pVPU9/+FeDrxPp5T2xu5ovhNXTLThFk7teHJzcah9vHa8tNuvjuF1hHX5Pn8ps759nvyH996rj+/dPV+mm0YYm7vn7dXm714PEmmt5AYxJ3Cr80uy+gzIMHi1F/Zc6M6OdLaW7CyHqyr1979XGO+Ddthzs/yxcvGPHDUrbBdNSaiCpB/rmYSQsJ1LBy9VIpPoxjypW+3CW1w8uF3JHAEzXcrcGgOzK7ugksYHd1azwGVgdYrqtPwGA0GQ8PIrNjcUJxmNCQyFhScndt8zlBtPIYpgHO1CLJhdIx5RPEEeSwNaW+uAQJZXie9JTQcGwHYFPthF1bNbt2qC4A0lW8sExomJ2FZSOl9T3hd/QuG4QcZ011Nhvq7GNEUoKlhMsOZ6LFGRdZWcMi57HeLmCb4lyIfCb11jNMx9IYWaUxlpy1VRLkMW6ny7TKkcZ2X0OFiFXWIRiOJ84YOMOxPuyO7DEwgcxrlV8DXFaX8sPjn/47ZEr4BEQ6MHnQSyyqjd95g/TDKT/ORvc4Gwf4QR4Qef9E2nlG0I5J89efbpJtVLeSP54fKNeep4YGqnZ6oDpQUBBU34f6VRdiL+Shf6jVGrbX7bwo8qo6XSmDmYAX2qRbGjC0GUa5ELDtPHnFVKtRtLNei5r4SfDa3qSY8yWdccjxSrRTq1qeMR7MMJPjwVTciPLc2aMRUqSO45K/ZxvGYrSRjD+dfpCHpJ8w/xCfTZIFfyr2DtZRHHFOMR1wQiO5ki/F9oO+QImAJULjkuwY/D2A94I3jXWSay5cNNQi5/jjPy0pXj0FIpTklE9HSmU4FtSKJ9+m2Pvj9Aam0ux6iCP/PsWppGoBhMXox0iFL99iT14BGh2J8j7oqS4bY9ceueZEdzrDY12+dIejOikNdv035reWozyd9nj/Hw==</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVbZcuo4EH3PV7icxynjhcXYBVQ5bHEChGFJJbzcErIMmrFlsGSWfP2VDHaAkAx3XqDUbnWf7j46Uo2CMDBsh1IUMxwRyW3V5V9FXbOgUTaUkqZ5SsmoaMrcgJ6i+dXy3PeRBc25LLmUJsgllAHC6rKh6UVF1xXdmGhVWy/bZbOgG8ZMll5RTHlo7lLQZGkXBoTaadq6nMTEjgDF1CYgRNRm0B47/Z7NPW2QYZIbtQPKNGHcWDK2slUVFjwEURDAAoxCtaae+dQ8ao/xggCWxOiY06N1+bh3u90WtsVCFC9UQ9M0VbNU7uNRvLiXG3fZZuS5xI8O6yYgEcEQBPgDCFB9xJaRJznBIooxW4bfhNZVXROhFbSDCtRL5F5WPxOk6G6MdAYypkChS6BnwUbIRzEiEEnTkVuX72+b4GHvJAaE+lEc0ov1n0FCZIOCaIU8hWaVZehuj3ilXY0agrZLYJBQvEEDQZMVgIhKwxj5eNfDlJPPo1I6fmlHM4Yh+CcjqamnODls9UpnWniBKPs/8zqd1SHKKwgS1HhcsPKHs0+eXsxZuTLo62+mBnrbznSt1VMIp84HUPmoj+tLoua8Om5qud1+f7a3Jkbff2/2jFXxsfmxD3edoFOev3eiGZ2tKxXrnQ4HzB2bbDJthc7g5ZHCwbTy2nVKb35gas/dKFm4d9W/pkUrGc5HQwO6tDVgc2KVkuH0qYWtylNv+OaM1i/PM7dbobGhvnvV1fSRRM2/n3eTqu7jj9GzS4tjd+qY3fadPp66FC3Xr6DrueOuo06i+mdNpzWcGzM5GCfzfxBk2VJQw21JHT4vwH6WFmHBnuKnrvZK6BNliDC5IXYJWbETLj7Ys/kwD+u20zErpU75wdErptFst7WSpnc0RzMtq9hsljL9OaC4gNiMiI9FLqGwB/78DBCGNkXEQ7GyiRK4RFT+IWILMCC5ZMQPRkQo4l2Uf1WbpqFbTrH90Gk1+W/bcYyH4oNRqRY7lmU5sjSI2At5iR2fofhMvXX9TL1HCOIVRkLiBc8pJzplvCVrsElYoBc2oEBQwi+BWOiwbZSqZZXicBUgAVgNIy8JUGG1XKUNUunh31AApKl11J6k5+/b8i6/ZZ3gPh4WDlTU8oD4NNGVa6iUFfJ9waXTgrPwTuJhccx4W1mM4QHJ+adPtgia5FThFWWQc89Lw1lU9bKgPJG3wTDne35Jc43nKtDIxrEGhXUh2WySdACmULiYh1d1VTPVMYIJl6n9JPoXETUPod50Q+SoLzLn9nN8CVuSMQMMhZwuUrq84XkwRlQ8D1xO992tb4+zlLxvDO3YNVsz4K8IgfjHhwa0ofDj5iH/20ax9zmuK7FO8vA6+ZuAYbIQK3Ef7L8hBYx4WMwFLIpPg18LcC35uTFvco6FcTbNE4a+/yIJZarLAMIoIcxtyanhVC1TnGy/Qvan05cwqSIfr9gd/faKfev3xly3QiDnvvi/nRWc0gUivoviFEtd3vHXIk9OFifqfAR4KdDlplY1K2a5WrWKuUCXLYurtpM38KySxhfzV8tJTy/PQ+M3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EAF75C0876758893E0401F0A05995BAA</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EAF764F5BA1672CEE0401F0A07993CC4</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d78198ae-91b5-4d0e-9dd3-886048f0c2bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>423186c5-583a-4a1c-9e7a-24032ed24d34</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c55dc4d3-7d8e-4be2-bc0f-b68119e18a82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9d7d7724-8f49-4660-9937-b29c8fed414d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d2fcc8e-dd69-4172-b936-626b9d2b2834</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea54586-9969-4f80-80da-6e96f3a24037</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1cc95e33-d792-407c-8494-737a1c6f89c2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8e2b289d-1828-4774-a8f5-972256dfc92e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>362b5bfa-f60e-4b25-ac7d-21b1ef199871</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35cd7097-c2e4-4172-8891-0de448e3d804</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b6999684-10d4-418a-b3c3-783ff1744b1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977c07f-808a-4d2a-b915-fdb9e5067362</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>48f27436-b8f2-4e8c-a82b-d482a4ab9c3f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6277243b-d5a2-449c-a41c-03613ebc1a15</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f1028c4e-e345-447e-9a7b-bd84eba19265</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>85960cc5-2cb9-40f6-8be8-19f262d9f1d2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e9337998-e04f-43ea-b6b1-585fb4205efc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d0d859a-e97a-4f18-a15d-a1111083d8d0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8364bbe7-6e24-49dd-869c-6d5b19de823c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fabb013c-9aad-402f-b690-faa6cf7e6988</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>38c7908a-abf7-4f8e-9238-90bb58fe94f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4bc4319c-ccc3-44db-a0ad-5885582b8014</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_004_DTCreate_retailer_Grant_for_active_basic_user_without_ULC" searchProperties="true" id="0dbf01ce-effc-4052-a06f-65699c00ddfe"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="efd3e305-6d2d-4eae-ba8d-2e9f09355ee1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="dafd6bca-7aa6-4c7c-938f-142c12d8aff5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="e81f49e4-b316-45f1-af35-3c2b661878f5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="8e75e970-b77c-462e-a048-babbb4cc830d"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User" id="4f2884f2-90ec-4c4a-98fc-88fd40e81c3c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="5a339364-e683-4df6-8a3c-67933ef763b7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="32871368-13e7-4c76-80a8-10e023472dd7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="f1f11be0-9dac-4245-9e1f-1c650b37b4f8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set EmailId for Standard User" id="563bd766-2af3-4be3-b3d5-dca563827a75"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Standard User Create" id="a490520b-5e2e-4604-8112-648037997369"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();





def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="076cd7ea-4c42-4fa0-9f56-be9c6332fa6e"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for SecondUser" id="1d9544f3-c6e4-46dc-aa33-50d71771487c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 1" id="8e95dc7e-76dd-482a-9124-0dd28d7f530d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create for Standard User" id="6816d358-2547-418f-b3e6-1f7a9ba7bf74">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create for Standard User" id="1424c880-c406-4ee8-bbd8-be700e054f99">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set EmailId for Third User" id="a9c97536-815d-431e-8706-b9003b4e78d2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Third User Create" id="1777ff7b-d7f6-4f7f-8a4b-70b9a43f799c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for Third User" id="7921002b-57d7-4a50-837e-cdf71afa88b2"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="1d3b67f2-bbef-46b1-a9f8-7411c3211cce">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="3eda2deb-fb0b-47d6-b61f-7ad487603fe5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create for Basic User" id="c2c97cd6-868a-4f5a-b49f-ff763130c904">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for Third User" id="616c7756-5fb3-4fe8-a84b-5bbf444a1d86">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>0A7FA9945AF866FCE05307991F0A33AF</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>0A7FA993106266F8E05307991F0A65B5</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418914193049@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0A7FA993106166F8E05307991F0A65B5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0A7FA993106166F8E05307991F0A65B5</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0A7FA9945AF766FCE05307991F0A33AF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0A7FA9945AF766FCE05307991F0A33AF</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418914193051</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_7aa61c5d-f4d2-4a31-b526-2a79b1d0d1d6</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_c278bf12-7b49-42b6-a856-85d5d9ea554a</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvO4ZXzBBuMKVBkIiSd3YJKpedlS5AY02LIjyUD4+pUMOJghWXafXGq3uk93Hx3pgqMktv2Ac2CCpLS2TmLK/cLa0XJG/RRxwn2KEuC+wP44uLv17brpo/0WrRYOOtrfjm21pqgNettyp7qDnLb+2nAt3XWddhM7bdRqutKV8xxCygWioqPZpuXolq1b3sRyfMfzXbPu2d4vrfYMjMvY0qVuajtQa97R5kJkvmGsVqv6qlFP2cywTdMyft7djvEcEqR1L7YVFYlYd+eP6xFgiGNcx2liXBgVn4uI+2Myo0jkDHa5os9ymYbZNqRPxMnsm1buhSik07RY9hFNKcEoJhuk+nMHYp5GtSCepYyIefJpEZapAuuwxjq2HPpNM6rQzgxUQcg40vkcWbtYI5gCA4qh9mMUdrRv502t2DphiPJpyhJeXf43PECXEKcZRDrfl7WDdn7AE53qXgD2Q4rjnJMl3CuyZggD300T8Pmhao8MpmR9S7gk6JordMYhvKPlthsDMgMu/s+ADoazDfKM4hy64Xc8CtBk8hAK8nJLnhfZmOGnxd31U9ApABw6F4ZytNvlESlLEm13BI+D6D1b32R3dHA7ezBHDS++am1+sRvLsyPW7NHJvfH0gPtXl5BvGtmIO7n1+P4dwhcHZS/WHI+vr+9/3wSzXjDMsfMyzy57G2+UGSLHV0kvG1x5o/7Lj14/++tysXhrjG4f5z9S8xWP7xbi5Zl6JjP7Sei1xHrlrDZDkVkso1fNt0X+++fbNVnMfj314P0qnHXKcg7wV237Mz/OX38DFvulokE4qA3llJD4WsyUhUT6tHD1MyU+XAAVWlftUtrh51LuSOTLGW7XZtAaBu224wbDVrM57F+absNstdvW0AwajWC4F5ktiiOI/ZROicqlJHdLm68B4sTnQCNg+jLNpdJx7YuIAyRQLaQjeQhSymGSSnm2XFi+2hsbGjHCzU0jX3gtt+Gmnla7T8UDfWDBVACranKroskjwCQjoIRb8ZpLYnMhe/GGlrmIrfoS1SnkUtqZUlnfdjzX4CTJYlBIjSSN8hjq2TwrOmPw7dfWEeaFdXQ5KU7bp3Ud/9u3QPpERDlwVUsP5BjhxOXi7Av5tGDbPCx4Hz7II6IOluynYARvkVR/fdBE8aPkiKxoD7n0PDZUohrHBZWJoiXBJdHL61qquDz33f043lD9rZ4vl3kxgJbSNybDS9GxXMO0jTHgXCrT+yRdADXKKMZZ10AJ/Ch5aa9CzMWcjgUSkEjG1IrlGff+GLi690NJ9fW5j4pKStk6AWtxytaP5ZtFIf7yWYN9rPyk+VF+VimLPiZ2ItZBHlmnvPYFoTO1UlfA+ye8wKkMS6R4peww+KkAp5JXjWWTSyxCEuo1F/D5n5pSpY6GME5zKsKBVhgOlbLAKd4z8D+c/ghTiHH5OiP//jzTSUEBDPJNx0kRX12yvjoCdHagtrukJwS3YZlNSwqudyi4Tbf3wc8Kuu4f5j8tB3065nj3Hw==</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVbZcuo4EH3PV7icxynjhcXYBVQ5bHEChGFJJbzcErIMmrFlsGSWfP2VDHaAkAx3XqDUbnWf7j46Uo2CMDBsh1IUMxwRyW3V5V9FXbOgUTaUkqZ5SsmoaMrcgJ6i+dXy3PeRBc25LLmUJsgllAHC6rKh6UVF1xXdmGhVWy/bZbOgG8ZMll5RTHlo7lLQZGkXBoTaadq6nMTEjgDF1CYgRNRm0B47/Z7NPW2QYZIbtQPKNGHcWDK2slUVFjwEURDAAoxCtaae+dQ8ao/xggCWxOiY06N1+bh3u90WtsVCFC9UQ9M0VbNU7uNRvLiXG3fZZuS5xI8O6yYgEcEQBPgDCFB9xJaRJznBIooxW4bfhNZVXROhFbSDCtRL5F5WPxOk6G6MdAYypkChS6BnwUbIRzEiEEnTkVuX72+b4GHvJAaE+lEc0ov1n0FCZIOCaIU8hWaVZehuj3ilXY0agrZLYJBQvEEDQZMVgIhKwxj5eNfDlJPPo1I6fmlHM4Yh+CcjqamnODls9UpnWniBKPs/8zqd1SHKKwgS1HhcsPKHs0+eXsxZuTLo62+mBnrbznSt1VMIp84HUPmoj+tLoua8Om5qud1+f7a3Jkbff2/2jFXxsfmxD3edoFOev3eiGZ2tKxXrnQ4HzB2bbDJthc7g5ZHCwbTy2nVKb35gas/dKFm4d9W/pkUrGc5HQwO6tDVgc2KVkuH0qYWtylNv+OaM1i/PM7dbobGhvnvV1fSRRM2/n3eTqu7jj9GzS4tjd+qY3fadPp66FC3Xr6DrueOuo06i+mdNpzWcGzM5GCfzfxBk2VJQw21JHT4vwH6WFmHBnuKnrvZK6BNliDC5IXYJWbETLj7Ys/kwD+u20zErpU75wdErptFst7WSpnc0RzMtq9hsljL9OaC4gNiMiI9FLqGwB/78DBCGNkXEQ7GyiRK4RFT+IWILMCC5ZMQPRkQo4l2Uf1WbpqFbTrH90Gk1+W/bcYyH4oNRqRY7lmU5sjSI2At5iR2fofhMvXX9TL1HCOIVRkLiBc8pJzplvCVrsElYoBc2oEBQwi+BWOiwbZSqZZXicBUgAVgNIy8JUGG1XKUNUunh31AApKl11J6k5+/b8i6/ZZ3gPh4WDlTU8oD4NNGVa6iUFfJ9waXTgrPwTuJhccx4W1mM4QHJ+adPtgia5FThFWWQc89Lw1lU9bKgPJG3wTDne35Jc43nKtDIxrEGhXUh2WySdACmULiYh1d1VTPVMYIJl6n9JPoXETUPod50Q+SoLzLn9nN8CVuSMQMMhZwuUrq84XkwRlQ8D1xO992tb4+zlLxvDO3YNVsz4K8IgfjHhwa0ofDj5iH/20ax9zmuK7FO8vA6+ZuAYbIQK3Ef7L8hBYx4WMwFLIpPg18LcC35uTFvco6FcTbNE4a+/yIJZarLAMIoIcxtyanhVC1TnGy/Qvan05cwqSIfr9gd/faKfev3xly3QiDnvvi/nRWc0gUivoviFEtd3vHXIk9OFifqfAR4KdDlplY1K2a5WrWKuUCXLYurtpM38KySxhfzV8tJTy/PQ+M3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EAF75C0876758893E0401F0A05995BAA</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EAF764F5BA1672CEE0401F0A07993CC4</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d78198ae-91b5-4d0e-9dd3-886048f0c2bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>423186c5-583a-4a1c-9e7a-24032ed24d34</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c55dc4d3-7d8e-4be2-bc0f-b68119e18a82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9d7d7724-8f49-4660-9937-b29c8fed414d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d2fcc8e-dd69-4172-b936-626b9d2b2834</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea54586-9969-4f80-80da-6e96f3a24037</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1cc95e33-d792-407c-8494-737a1c6f89c2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8e2b289d-1828-4774-a8f5-972256dfc92e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>362b5bfa-f60e-4b25-ac7d-21b1ef199871</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35cd7097-c2e4-4172-8891-0de448e3d804</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b6999684-10d4-418a-b3c3-783ff1744b1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977c07f-808a-4d2a-b915-fdb9e5067362</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>48f27436-b8f2-4e8c-a82b-d482a4ab9c3f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6277243b-d5a2-449c-a41c-03613ebc1a15</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f1028c4e-e345-447e-9a7b-bd84eba19265</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>85960cc5-2cb9-40f6-8be8-19f262d9f1d2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e9337998-e04f-43ea-b6b1-585fb4205efc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d0d859a-e97a-4f18-a15d-a1111083d8d0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8364bbe7-6e24-49dd-869c-6d5b19de823c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1d3b67f2-bbef-46b1-a9f8-7411c3211cce</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3eda2deb-fb0b-47d6-b61f-7ad487603fe5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c97cd6-868a-4f5a-b49f-ff763130c904</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_005_DTCreate_retailer_Grant_active_full_user_with_ULC" searchProperties="true" id="6a443cc9-7a71-4547-8660-822525b87f5c"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="8f809755-5c7d-4838-9cf5-70fc6db155ff"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="f950d93e-c328-45b7-95fd-9d6bfb726f8c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="03eea890-2267-40e4-891c-c894f820c1c4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="bd763153-f804-4177-bdec-63636a3d8fa8"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="fa9c2d05-3d0b-4c33-9a62-0b6ff87618bf">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="1173ee97-450c-4983-864f-cf991a6b43b1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="a4403156-8488-4fce-93dc-dedf8876176e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="8042de5a-ef32-4cbe-ba68-c0bd2b021f31">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>0A7D2F0DCF7A345BE05307991F0AF3DC</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>0A7D2E969C2D3451E05307991F0AD4E5</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418904027390@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0A7D2E969C2C3451E05307991F0AD4E5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0A7D2E969C2C3451E05307991F0AD4E5</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0A7D2F0DCF79345BE05307991F0AF3DC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0A7D2F0DCF79345BE05307991F0AF3DC</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418904032049</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_42fa891f-2057-4aca-9a71-db619f30f254</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0Vynmc8t3m4gpUEQgZkpBkMcns5mVLyG1QxpaJJRvI169kwMEEsuw+udRunT590ZEuGYojy+syBiknCa2t4ogyr7C2lSylXoIYYR5FMTCPY8/vju49SzM8tNui1Ib9tvK3Wa/bYcMOVddqtlTHDEBtTkNbbaG6g7Djug2jKVwZy2BIGUeUtxXLMB3VtFSzOTFNz215tqFZtv2q1F4gZQJbuGiGsiW1Ym1lzvnC0/XlcqktbS1JZ7plGKb+5+jex3OIkdK53GRUBEo7W3+sBYAhirCGk1i/1Cs+lwHzfDKjiGcpbGMFp2IZutHShU/AyOxCKfdCMKRhUix7iCaUYBSRDyTrMwI+T4JaN5olKeHz+GQSpiGBVVhhFZsOvVD0KrUzgSoMU4ZUNkfmFmsMIaRAMdSex8O2cnFe14qtkxRRFiZpzKrL/8YHaA5RsoBAZbu0ttTOBzxSqc4lYG9IcZQxksODHNYFwsC23QR8PlTtKYWQrO4JEwO6YpKdvk/vYLmpRp/MgPH/06C95mxAXlCUQcfOw1fM1wG9Q+707akxsI2EuVfWT3fYLgjsOxeGsrWb5cFQlkO02fE2xv6NdZv/9WPa7DuDaTqEZWv5Ngp7V6Nn/tjrvpH6fcaXty6u967w3diIP9ax+Zw+/eKDjxbO183QpQa9W1B9Fr7o89u148w/jBdq01nvvT9uwGjux8Eo0Nc/74xZ8PLHjev+HvWCe2va/Ok/RADLqTN+fPXjcPoQrO3m6lfPdvwfdYM4IzxZ99mNMUxvG812mc4e/6ptd+b9bPoGmO+WcgyG/dpAdAnx78VMWkighoWrt5DiwzhQrnTkLqkdXibkjgSe6OFmbXQbfWtg9HuDRst23Ktrw7WNRqtlDozuwO73diKzYXFAsZfQkMhYUnI3Y/M9QRx7DGgAqZonmVA6pnyD2Ecc1YZ0LA5BQhlMEiHP0/dGCM7sAzkuMvG8iS2wwhwvIqX2kPBH+ph2Qw5pVZOdiiaPAZMFASnccq6ZGGzGRS3eUZ7xyNRypFHIhLSnUmU9y2m6OiPxIgLJVI+TIItAW8wXRWV0tvlaKsKssI6vJ8VpO5nX4b9dCYRPQKQDk7lcgWgjHLlcrF0ipxNu7Ce8g+9mAZEHS9STpwRvmFR/fY6JnI9yRkRGO8ql56GhgqofJlQGCnKCy0Evr2uh4uLcd3bteEfau5bleVY0oCH1LRXwQnRMVzcs3QecCWVaT5LfQPUSRT/rGiiJHwQv7VWKGZ9TnyMOsZiYWrE84973gcl7fyhGfXXuo6ISUpSOw4ofs/Ui8WaRjL991mAPSz9hfhKfZZIGnx07grUXR+Qprn1O6Eyu5BWwPjEXOBGwRIhXku6DHwM4FrxqLItccuFioKYZh9N/alKV2grCOMkoH/aVwrCvlAVPvl6A9+n0BaYQ4/J1Rv79eaaSYgQwiDcdIwW+vGQ9eQTobE9tt0G/CO51q97qWeKmcM19we07125ZlAq7zhfzV8tenQ5nvPMP</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b7106060-d3df-45da-a389-11c5bc92ba36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_006_DTCreate_retailer_Grant_for_active_standard_user_with_ULC" searchProperties="true" id="cb425fa0-fb5f-46e6-b8e8-ab3f304facd3"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0fad6762-4aea-4422-9c4c-5452b4f00937"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="e8a4ac20-e6dd-4438-a4c5-b1b5fc17d268"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="0c1b3362-22be-4961-bcf8-0478aad85db6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="779b9f5f-fd8c-48b1-99bc-0c3a97cc793b"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User" id="eb9c7fd3-b8ad-4976-9cdb-ced7c164f939">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="2818adf9-7ee8-47a7-b4c5-6c162bb6cdd6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="1b9ba19b-61f8-4e07-ba55-72c1042a4c58">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="85716e29-bfae-4b18-8ed5-00c013f0d57e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set EmailId for Standard User" id="fe4fcacb-3db5-4249-b532-fe83c4f1f2f4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Standard User Create" id="6412ca8f-237f-4a67-92da-0361a1d7b169"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="4a895122-98c0-4206-a2cf-7edcaaa70713"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="aadfda47-9d8e-488d-9d07-21fdeaaad0ae">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="6a0932b0-3e95-44ca-b77a-e4e6f25500d6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create_Standard" id="90538ac0-ae1b-413c-a8d8-26f389eae525">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for SecondUser" id="7c6823eb-9fba-47ca-bd24-ef0342d2693f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 1" id="a8f24207-0bda-4d5a-b808-d8d49f84cdf6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0A7D56C595632680E05305991F0A09E4</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0A7D471733A97154E05305991F0AB1C2</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418904139784@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0A7D471733A87154E05305991F0AB1C2</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0A7D471733A87154E05305991F0AB1C2</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0A7D56C595622680E05305991F0A09E4</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0A7D56C595622680E05305991F0A09E4</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418904139804</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_7aa61c5d-f4d2-4a31-b526-2a79b1d0d1d6</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_e1caa20b-9b9f-40f6-bc35-209dcab3fff0</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FP4rTH10StMLt44wUwHPwY1uFfD2ciakqxBtU2jSgv76nRSpFNHDOU+drK5861uXfMkZx1FouR7nkAgas8o6Chl3c2tbSxPmxphT7jIcAXcFcUfe1dC1qsjF2y1aZdBra/+ASTC20FRvTVuB7qCgrk+JXdMt1PIJntpBECDpynkKA8YFZqKtWch0dNPSzebYtFxkularWm+Yz1rlHhIusaVLVe7akFrztjYXYuEaxmq1qq7sapzMDAsh03i8Go7IHCKsdc42GeWBks6HP6n6QCAMSZXEkXFmlHzOfO6O6IxhkSbwEcv/LhYyUMuQPj6nsxOt2Av+gAVxvuxiFjNKcEjfsarPFYh57Fe8cBYnVMyjb5MwkQLWYU10YjrsRDPK1I4EKjFMONb5HJsfWHcQQAKMQGVyN2hrJ8d1Ld86TjDjQZxEvLz8b3yAZRDGC/B1vk3rg9rxgAcq1TkD4g4YCVNOM7hWw7rABPhHN4EcD1W5SSCg6yHlckDXXLEzduntLTfV6NEZcPF/GrTTnA3IPQ5T6EDfG6BsNbm0+nfj+956aDydZi2DXr0/tXMCu865oWjtZrk3lMUQbXZg+zJ7uvQf7FvanL5Fv+z68zm6QY2Ezln4+EphNkGPf7+u5k5InUnrMl7eOj3OvOn8vjG859ctp8dgeTq6HS9q12ayDq3ZK57T7u1kdHU9o5On1fJifTFNX/x3MncY3I9+TQwIX18e8IPthLf4OulP3m+zyOOz13iaNW1v5vH06uU0Gk4mz8vew8QeX7C/nutOu0hnh3/Ztj3zo3T6AkRsl2oMBr3KhewSFj+LmbJQXw9yV3ehxIcLYELrqF1KO9xUyh31XdnDzRp5jV6t3q21anXLqjdRH9VsVGu1zAvkoVbf2YrMhsUexW7MAqpiKcndjM3PBEnkcmA+JHoWp1LpuPYDYg8LXBmwO3kIYsZhHLe1wDT9Gq4T3Zki0B3s+zpWJx6ZTbuJfBPbjUCrXMfiN/udeIGApKzOtZI63wGhCwpKwtWEczniXMiqLHGWitCsZrjKIJUinyi9dS2nWTM4jRYhKM5GFPtpCNXFfJHXyOCbr6VjwnNrF3X7F80+anb7ZrfRq/eRg/K6qvpa6Dw/lN+mv/9vWynp41PlwFWi5yC7DQfuIHOb5Zdq1A7eVVt4L/WpOn+y7CKhZMOk/OtzmtQYFaN01x9vKRee+4YSqrGfUBHIzygpzkNxq0uxl/LQ2fZqiavLapplad6dhpLBRMIbKkUDWcYISCoF7G0cvwIzChTjqNuiIL4XvLCXKaZizkYCC4jkOFXy5RHPgxFw9TwYyBOxPvbtUQopSydgLQ7ZuqF82ijGP75+iEuUnzTfyM8qTvzPjh3A2okj85SvA0HZTK3UTfH2zVyQWMJSqXFxsgt+COBQ8LKxKHLBRciBmqYCvv9TUeLV1jAhccrEoKflhl1BzXmKtwW4n05fYHLNLh5x9N9fcTrNR4CAfPpxmuOru9hVR4DNdkT5I+i+LjsNs2HbXrNh1pxdXT43u1ZRlBK7zhfzV8tOnfZnvPMH</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVbZcuo4EH3PV7icxynjhcXYBVQ5bHEChGFJJbzcErIMmrFlsGSWfP2VDHaAkAx3XqDUbnWf7j46Uo2CMDBsh1IUMxwRyW3V5V9FXbOgUTaUkqZ5SsmoaMrcgJ6i+dXy3PeRBc25LLmUJsgllAHC6rKh6UVF1xXdmGhVWy/bZbOgG8ZMll5RTHlo7lLQZGkXBoTaadq6nMTEjgDF1CYgRNRm0B47/Z7NPW2QYZIbtQPKNGHcWDK2slUVFjwEURDAAoxCtaae+dQ8ao/xggCWxOiY06N1+bh3u90WtsVCFC9UQ9M0VbNU7uNRvLiXG3fZZuS5xI8O6yYgEcEQBPgDCFB9xJaRJznBIooxW4bfhNZVXROhFbSDCtRL5F5WPxOk6G6MdAYypkChS6BnwUbIRzEiEEnTkVuX72+b4GHvJAaE+lEc0ov1n0FCZIOCaIU8hWaVZehuj3ilXY0agrZLYJBQvEEDQZMVgIhKwxj5eNfDlJPPo1I6fmlHM4Yh+CcjqamnODls9UpnWniBKPs/8zqd1SHKKwgS1HhcsPKHs0+eXsxZuTLo62+mBnrbznSt1VMIp84HUPmoj+tLoua8Om5qud1+f7a3Jkbff2/2jFXxsfmxD3edoFOev3eiGZ2tKxXrnQ4HzB2bbDJthc7g5ZHCwbTy2nVKb35gas/dKFm4d9W/pkUrGc5HQwO6tDVgc2KVkuH0qYWtylNv+OaM1i/PM7dbobGhvnvV1fSRRM2/n3eTqu7jj9GzS4tjd+qY3fadPp66FC3Xr6DrueOuo06i+mdNpzWcGzM5GCfzfxBk2VJQw21JHT4vwH6WFmHBnuKnrvZK6BNliDC5IXYJWbETLj7Ys/kwD+u20zErpU75wdErptFst7WSpnc0RzMtq9hsljL9OaC4gNiMiI9FLqGwB/78DBCGNkXEQ7GyiRK4RFT+IWILMCC5ZMQPRkQo4l2Uf1WbpqFbTrH90Gk1+W/bcYyH4oNRqRY7lmU5sjSI2At5iR2fofhMvXX9TL1HCOIVRkLiBc8pJzplvCVrsElYoBc2oEBQwi+BWOiwbZSqZZXicBUgAVgNIy8JUGG1XKUNUunh31AApKl11J6k5+/b8i6/ZZ3gPh4WDlTU8oD4NNGVa6iUFfJ9waXTgrPwTuJhccx4W1mM4QHJ+adPtgia5FThFWWQc89Lw1lU9bKgPJG3wTDne35Jc43nKtDIxrEGhXUh2WySdACmULiYh1d1VTPVMYIJl6n9JPoXETUPod50Q+SoLzLn9nN8CVuSMQMMhZwuUrq84XkwRlQ8D1xO992tb4+zlLxvDO3YNVsz4K8IgfjHhwa0ofDj5iH/20ax9zmuK7FO8vA6+ZuAYbIQK3Ef7L8hBYx4WMwFLIpPg18LcC35uTFvco6FcTbNE4a+/yIJZarLAMIoIcxtyanhVC1TnGy/Qvan05cwqSIfr9gd/faKfev3xly3QiDnvvi/nRWc0gUivoviFEtd3vHXIk9OFifqfAR4KdDlplY1K2a5WrWKuUCXLYurtpM38KySxhfzV8tJTy/PQ+M3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EAF75C0876758893E0401F0A05995BAA</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EAF764F5BA1672CEE0401F0A07993CC4</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d78198ae-91b5-4d0e-9dd3-886048f0c2bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>423186c5-583a-4a1c-9e7a-24032ed24d34</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c55dc4d3-7d8e-4be2-bc0f-b68119e18a82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9d7d7724-8f49-4660-9937-b29c8fed414d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d2fcc8e-dd69-4172-b936-626b9d2b2834</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea54586-9969-4f80-80da-6e96f3a24037</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1cc95e33-d792-407c-8494-737a1c6f89c2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8e2b289d-1828-4774-a8f5-972256dfc92e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>362b5bfa-f60e-4b25-ac7d-21b1ef199871</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35cd7097-c2e4-4172-8891-0de448e3d804</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b6999684-10d4-418a-b3c3-783ff1744b1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977c07f-808a-4d2a-b915-fdb9e5067362</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>48f27436-b8f2-4e8c-a82b-d482a4ab9c3f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6277243b-d5a2-449c-a41c-03613ebc1a15</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f1028c4e-e345-447e-9a7b-bd84eba19265</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>85960cc5-2cb9-40f6-8be8-19f262d9f1d2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e9337998-e04f-43ea-b6b1-585fb4205efc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d0d859a-e97a-4f18-a15d-a1111083d8d0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8364bbe7-6e24-49dd-869c-6d5b19de823c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fabb013c-9aad-402f-b690-faa6cf7e6988</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>38c7908a-abf7-4f8e-9238-90bb58fe94f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4bc4319c-ccc3-44db-a0ad-5885582b8014</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_007_DTCreate_retailer_Grant_for_active_basic_user_with_ULC" searchProperties="true" id="908d90a4-db34-4a60-9485-b7a980825e12"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="05e373f7-4a20-47a7-906d-e05b652f0af4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="6d52599c-01b6-4b27-a222-39dde8ea0d98"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="c369b399-d4d3-4bca-8ed0-70335670c204"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="29338744-fdc8-46a1-a7a5-5efa81c95fd3"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User" id="29aaed36-4080-4003-99b5-78d9ce5e8ae0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="ba46d36b-7748-4c13-a129-36dcc122a40a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="fc195b21-d220-4514-b2a6-56d369cad196">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="811911f7-1ed8-49dc-b7d6-f66ff0f7cd53">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set EmailId for Standard User" id="a607e7cb-cd9f-4091-8ed9-fc3f8654436a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Standard User Create" id="9a70cd9c-c549-4240-bbe6-aab53ae265ce"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();





def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="b77002ca-e7fe-4b72-b677-69cdea0e4539"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for SecondUser" id="8274b10d-19be-434b-96f9-e6c12de45ca4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 1" id="f20078d1-6d3a-43b4-ada4-4538ab627f48">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create for Standard User" id="3d67edc0-5244-4d92-8d24-78dc7538600b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create for Standard User" id="197fc392-895d-432a-b048-fa4659beef45">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set EmailId for Third User" id="f6eec49e-7323-42db-8231-9d9465f0da8c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Third User Create" id="d5bb5272-cad8-4399-a1d3-665b842256f7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for Third User" id="17d9cef2-3ca3-4f8a-a520-fcf9d6d35bcc"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="d709af54-b3e2-45a8-b82f-461d32e282b6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="9445dbee-d7f8-4d4e-b8fe-b3f2e7cb9a41">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create for Basic User" id="73e6c600-fadd-4b8e-b6a3-b231f4871705">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for Third User" id="3737c7af-7e1c-4a4c-8663-80fffb650424">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0A7D56C849D144A1E05307991F0A9C55</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0A7D56C7E7EE44A9E05307991F0A3A93</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418904306322@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0A7D56C7E7ED44A9E05307991F0A3A93</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0A7D56C7E7ED44A9E05307991F0A3A93</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0A7D56C849D044A1E05307991F0A9C55</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0A7D56C849D044A1E05307991F0A9C55</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418904306350</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_7aa61c5d-f4d2-4a31-b526-2a79b1d0d1d6</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_3a972dae-1252-4d70-a404-f65240298749</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+I4FP0rKPO4CkkgARIVpABtlxkoLVCmOy8r41yCS+JA7ASYX792gJRQ6LIrISHfXJ977oePfcdQGFQclzGIOYloaRsGlDmZtakkMXUixAhzKAqBORw7Y3fQdypl3UHHLUqp120qf9fq1ZkH2FPntu2pZsWsqQg1LBU39AY2anq9atWEK2MJ9CjjiPKmUtENUzUqqtGYGBVHN8Wv3Kjav5TSFGImsIVLWVcOpLasqSw4XzmattlsyptqOYp9raLrhvY26I/xAkKktO72GWWB4tbBH5cFNQgCXMZRqN1pBZ87jzlj4lPEkxgOsbxrsXRNtzXh4zHif1PyveD16DzKlh1EI0owCshvJOszAL6IvJIb+FFM+CK8moShS2AVtljFhkm/KVqR2o1ABYYxQypbIOOANYI5xEAxlF5Hvaby7bauZVsnMaJsHsUhKy7/Gx+gKQTRCjyVHdM6ULsd8EKlWneAnR7FQcJICk9yWFcIAzt0E/DtUKXnGOZk2ydMDOiWSXbaKb2z5b4aXeID4/+nQSfN2YNMUZBAa+ZD/94KjfViGXRdNKDf3VkfJvNhaDYzAqfOmSFv7X55NpT5EO13dF78iu7j9ujJrJr240vy5m3AGHc8Mut0pw9uu22g3Ro6PwKv8xNXE28yrump9qDt/uqkA3tdHa+tcBD9YW2MjVvr9dL37Tj5SZ+fFqS+HJDXV+vlub69b+D0vfH+CL+C5SZsb1m/Pgzr6/YgWL7O34bT7/NhYzrq/3anb49a0PuzwnY7axqZMZ72vXd95QX+0m/m6ZzwL9qOZ36czN4B8+NSjkGvW3oQXUL8azGTFiIOQebqrKT4MA6UKy25S2qHkwi5I54jerhf6269a9U6DdPu6qbpGve6VdXrtm086K7dsayjyOxZnFHsRHROZCwpufux+ZogDh0G1INYTaNEKB1TvkDsIo5KPToShyCiDCaRkGejmi7pzJovN7FNF9iMw1rib7HOldJTxId0GLtzDnFRk62CJo8AkxUBKdxyrpkYbMZFLdYoTXhglFNUppAIaY+lyjoVs2FpjISrACRTLYy8JIDyarHKKqOx/X9FRZhl1tH9JDttV/M6/3YsgfDxiHRgMpc2iDbCp8ul6ljHRK4n3DhN+AjvJh6RB0vUk8cE75kUP32MiZyPfEZERkfKuee5oYCqnSeUB/JSgvNBz69roeLi3LeO7Vij8rqcpGmSNaAu9S0W8EJ0DEvTK9oYcCKUaTeJlkC1HEW76RrIiZ8Fz+1Figlf0DFHHEIxMaVsecO9PwYm7/2eGPXtrY+KQkhROg5bfsnWCcSbRTL+8lmDHSz9hPlZ/G2i2Pvo2AWskzgiT3Htc0J9uZJXwO7KXOBIwBIhXlF8Cn4J4FLwojEvcs6Fi4GaJRyufylJVWoqCOMoobzXVTLDqVJmPPluBc6H0yeYTIzz1xn59+eZSrIRwCDedIxk+PKSdeQRoP6J2h6CXhDc+n39visE1z4V3KprV/OiFNi1Ppk/W07qdD7jrX8A</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVbZcuo4EH3PV7icxynjhcXYBVQ5bHEChGFJJbzcErIMmrFlsGSWfP2VDHaAkAx3XqDUbnWf7j46Uo2CMDBsh1IUMxwRyW3V5V9FXbOgUTaUkqZ5SsmoaMrcgJ6i+dXy3PeRBc25LLmUJsgllAHC6rKh6UVF1xXdmGhVWy/bZbOgG8ZMll5RTHlo7lLQZGkXBoTaadq6nMTEjgDF1CYgRNRm0B47/Z7NPW2QYZIbtQPKNGHcWDK2slUVFjwEURDAAoxCtaae+dQ8ao/xggCWxOiY06N1+bh3u90WtsVCFC9UQ9M0VbNU7uNRvLiXG3fZZuS5xI8O6yYgEcEQBPgDCFB9xJaRJznBIooxW4bfhNZVXROhFbSDCtRL5F5WPxOk6G6MdAYypkChS6BnwUbIRzEiEEnTkVuX72+b4GHvJAaE+lEc0ov1n0FCZIOCaIU8hWaVZehuj3ilXY0agrZLYJBQvEEDQZMVgIhKwxj5eNfDlJPPo1I6fmlHM4Yh+CcjqamnODls9UpnWniBKPs/8zqd1SHKKwgS1HhcsPKHs0+eXsxZuTLo62+mBnrbznSt1VMIp84HUPmoj+tLoua8Om5qud1+f7a3Jkbff2/2jFXxsfmxD3edoFOev3eiGZ2tKxXrnQ4HzB2bbDJthc7g5ZHCwbTy2nVKb35gas/dKFm4d9W/pkUrGc5HQwO6tDVgc2KVkuH0qYWtylNv+OaM1i/PM7dbobGhvnvV1fSRRM2/n3eTqu7jj9GzS4tjd+qY3fadPp66FC3Xr6DrueOuo06i+mdNpzWcGzM5GCfzfxBk2VJQw21JHT4vwH6WFmHBnuKnrvZK6BNliDC5IXYJWbETLj7Ys/kwD+u20zErpU75wdErptFst7WSpnc0RzMtq9hsljL9OaC4gNiMiI9FLqGwB/78DBCGNkXEQ7GyiRK4RFT+IWILMCC5ZMQPRkQo4l2Uf1WbpqFbTrH90Gk1+W/bcYyH4oNRqRY7lmU5sjSI2At5iR2fofhMvXX9TL1HCOIVRkLiBc8pJzplvCVrsElYoBc2oEBQwi+BWOiwbZSqZZXicBUgAVgNIy8JUGG1XKUNUunh31AApKl11J6k5+/b8i6/ZZ3gPh4WDlTU8oD4NNGVa6iUFfJ9waXTgrPwTuJhccx4W1mM4QHJ+adPtgia5FThFWWQc89Lw1lU9bKgPJG3wTDne35Jc43nKtDIxrEGhXUh2WySdACmULiYh1d1VTPVMYIJl6n9JPoXETUPod50Q+SoLzLn9nN8CVuSMQMMhZwuUrq84XkwRlQ8D1xO992tb4+zlLxvDO3YNVsz4K8IgfjHhwa0ofDj5iH/20ax9zmuK7FO8vA6+ZuAYbIQK3Ef7L8hBYx4WMwFLIpPg18LcC35uTFvco6FcTbNE4a+/yIJZarLAMIoIcxtyanhVC1TnGy/Qvan05cwqSIfr9gd/faKfev3xly3QiDnvvi/nRWc0gUivoviFEtd3vHXIk9OFifqfAR4KdDlplY1K2a5WrWKuUCXLYurtpM38KySxhfzV8tJTy/PQ+M3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EAF75C0876758893E0401F0A05995BAA</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EAF764F5BA1672CEE0401F0A07993CC4</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d78198ae-91b5-4d0e-9dd3-886048f0c2bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>423186c5-583a-4a1c-9e7a-24032ed24d34</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c55dc4d3-7d8e-4be2-bc0f-b68119e18a82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9d7d7724-8f49-4660-9937-b29c8fed414d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d2fcc8e-dd69-4172-b936-626b9d2b2834</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea54586-9969-4f80-80da-6e96f3a24037</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1cc95e33-d792-407c-8494-737a1c6f89c2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8e2b289d-1828-4774-a8f5-972256dfc92e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>362b5bfa-f60e-4b25-ac7d-21b1ef199871</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35cd7097-c2e4-4172-8891-0de448e3d804</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b6999684-10d4-418a-b3c3-783ff1744b1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977c07f-808a-4d2a-b915-fdb9e5067362</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>48f27436-b8f2-4e8c-a82b-d482a4ab9c3f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6277243b-d5a2-449c-a41c-03613ebc1a15</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f1028c4e-e345-447e-9a7b-bd84eba19265</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>85960cc5-2cb9-40f6-8be8-19f262d9f1d2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e9337998-e04f-43ea-b6b1-585fb4205efc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d0d859a-e97a-4f18-a15d-a1111083d8d0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8364bbe7-6e24-49dd-869c-6d5b19de823c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1d3b67f2-bbef-46b1-a9f8-7411c3211cce</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3eda2deb-fb0b-47d6-b61f-7ad487603fe5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c97cd6-868a-4f5a-b49f-ff763130c904</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_008_DTCreate_retailer_Grant_blocked:tou_full_user_with_ULC" searchProperties="true" id="455c13a2-fc37-438c-9eab-65414699c78c"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="5f4d42cc-4ddc-42e2-8c70-15ed229dfa04"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList","urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "UserNotActive");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="21b0033c-fbc6-43fc-a08c-9e6016e152de"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="bbdd1846-7e5e-481e-a408-fcb0eaaa01fa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="48e8c9da-52ad-40f0-8625-97294dd4f255"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="1c159bad-6491-43fe-99bf-3745558b7585">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="cf2e0573-d815-48e0-ba5f-b1369d23e98e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" disabled="true" id="0f1f6419-f99e-46c7-9c4f-0f8b211879a0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy Create" id="8c947733-c717-49cb-bd23-d447e70a8193" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy GET" id="2cd4757e-9767-4f8c-b274-c6baa98f103d" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("policyID_before_DTC",tC.getPropertyValue("PolicyID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="79f66a66-0769-46a9-bf58-982b276ea24b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 1" disabled="true" id="a8856570-c10a-4267-aad5-585bedceed36">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>0D4F92EB70802D6AE05307991F0A71FB</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>0D4F92C9D4B12D6CE05307991F0A45C6</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1422006136135@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>UserNotActive</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0D4F92C9D4B02D6CE05307991F0A45C6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0D4F92C9D4B02D6CE05307991F0A45C6</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0D4F92EB707F2D6AE05307991F0A71FB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0D4F92EB707F2D6AE05307991F0A71FB</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1422006138655</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_bff82516-4ba6-4378-96f2-b286e4d788bb</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbZcuo4EP0VyvcxZbwEs7gCVawJdUnIxSST5GVKyG1QYsvGksHk60cy4GACGWZeoNRunT696Eg3DAW+abcZg5iTkJbSwKfMzqxNJYmpHSJGmE1RAMzm2Hba9yPbLOs22m9RSsNeU/l75nl10zKqamWGxM91ra42qp6pzsx6FSpurV6fzYQrYwkMKeOI8qZi6oal6oZqXk/1hl3RbaNerprWm1J6hpgJbOFS1pUdqZQ1lQXnka1p6/W6vL4uh/FcM3Xd0F7uRw5eQICU1s02oyxQ3Nr547ILGHwfl3EYaDdawefGZbZD5hTxJIZdLPdcLF3TG5rwcRmZ/1LyveAOqRdmyy6iISUY+eQTyfrcA1+Ebqntz8OY8EVwNglDl8AqpFjFRoX+UrQitQuBCgxjhlS2QMYOawIexEAxlJ4mw6by67KuZVunMaLMC+OAFZf/jQ/QFfhhBK7K9mntqF0OeKJSrRvA9pBiP2FkBQ9yWCOEge26CfhyqNJjDB5JR4SJAU2ZZKcd0jtabqvRI3Ng/P806KA5W5Bn5CfQqk4DE5vWwx0nZDTD1qzvLEniJNH6vpkROHTODHlrt8ujocyHaLvj1XymkzF+w/rT3UPqT7r94f108ficNiaPf343DKu6eLmj4+XgJVqNxr83a8ufrKLBtNJ/+IuNcTqejoK3VDcHn1fhhJLnj+rz+s79aGxCunpl1/25M5iv71BX61iDUazrjc6AaaNN/cN/c947V1Nrif/cbW6rEw3a3vW0x1GbBN7i4en2duKYnbS9hivzdTB3lk/NPJ0D/kXb/sw7yewdMN8v5RgMe6WB6BLiP4uZtBBX9TJXO5LiwzhQrrTkLqkddiLkjri26OF2rfcqg4bZ79T02sDsVdt93brWa42GMdDbNWPQ2YvMlsURxW5IPSJjScndjs3PBHFgM6AuxOoqTITSMeUHxB7iqDSkE3EIQspgGgp5Nvy02qjFiJBPn0Tz9+pH3fU+WCVSSg8hH9Nx3PY4xAVNNsyCJk8Ak4iAFG4510wMNuOiFku0SrhvlFeoTCER0h5LlbXNSt3SGAkiHyRTLQjdxIdytIiyymhs+2+qCLPMOulPs9N2Nq/jb/sSCB+XSAcmc+mAaCOcuFz0fSLnE7YOE97DtxOXyIMl6sljgrdMip++xkTORz4jIqM95dzz2FBA1Y4TygO5K4LzQc+va6Hi4ty39u1YovKynKxWSdaAmtS3WMBrMkVNNzUHcCKUaTMNP4BqOYp20TWQEz8KntuLFBO+oA5HHAIxMaVsecG97wCT9/5QjHp66aOiEFKUjkPKT9m6vnizSMY/PmuwjaWfMD+Kv3UYu18dO4F1EEfkKa59TuhcruQVsDkzFzgUsESIVxgfgp8COBW8aMyLnHPhYqBmCYfzX0pSlZoKwjhMKB/2lMxwqJQZT76JwP5y+gaTiXH+OiP//jxTSTYCGMSbjpEMX16ytjwCdH6gtrug3wW32+hVOroQ3O6h4FasbjUvSoFd65v5u+WgTscz3voH</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:09B4AE25D60E3124E05307991F0A1ADC</con:value></con:property><con:property><con:name>policyID_before_DTC</con:name><con:value>urn:dece:policyid:org:dece:09B4AE25D60E3124E05307991F0A1ADC</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b7106060-d3df-45da-a389-11c5bc92ba36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8c947733-c717-49cb-bd23-d447e70a8193</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2cd4757e-9767-4f8c-b274-c6baa98f103d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_009_DTCreate_retailer_Grant_blocked:tou_standard_user_with_ULC" searchProperties="true" id="cda96106-22b6-4923-a517-2f998f276a42"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ebd87d1d-7c1a-4100-9253-affac15b20e6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList","urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "UserNotActive");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="4bcd7971-59aa-4cfb-9a45-a97b62b065a4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="aad9ab22-d16c-416b-b0ad-70d43da43cc7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="9c4b5cb0-a736-4af4-9150-f51082ebe826"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS for First User" id="f76e916e-a3f6-48d8-8249-10f4434c3d92">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="c34b9b80-4cb1-4df2-a5b3-94948ebf2829">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="631f86f4-ec84-474a-9f8f-9eb605ff6297">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="332a25c1-2cce-4f7c-a97e-27619bdf3a5b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set EmailId for Standard User" id="a87e02f4-f3d5-4bbb-9cc6-18fdf5027e1f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Standard User Create" id="703a12d1-e40a-41fb-b4c2-d674ca3f17bb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="f0100c7c-dc2e-45cd-aa51-3387511f3d56"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for SecondUser" id="73eeba3b-fc4e-454b-afdc-6ea4b4f4f61a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>0D5047C1B7D84268E05305991F0A0D3B</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>0D5046C0341D425CE05305991F0A2BAC</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1422009182235@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>UserNotActive</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0D5046C0341C425CE05305991F0A2BAC</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0D5046C0341C425CE05305991F0A2BAC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0D5047C1B7D74268E05305991F0A0D3B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0D5047C1B7D74268E05305991F0A0D3B</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1422009182235</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_7aa61c5d-f4d2-4a31-b526-2a79b1d0d1d6</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_a4426032-9106-4382-ba13-96c149c07e86</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuo4FP0VlD5WIU4IAaKCRLnMoaelFOjtvIyM44DbxIbY5tKvHztASmjpMCMhIe9sr732xcu+4jCOHL/JOU4EYbSwjiPK/dRaN2RCfQY54T6FMea+QP6oeXfrO0Xgw/0Wo9Br142/oes6Hig5Zs0GnumWqo45gXbJrHnIdmsIVHDVU66cS9yjXEAq6oYD7LIJbNMpjW3gl9SvVvQ8+49ReMIJV9jKpQiMHak1rxszIea+Za1Wq+KqVGTJ1HIAsK2Xu9sRmuEYGo2rbUZpoKSx80fFACMcRaiIWGxdWTmfq4D7IzKlUMgE72IFp2IBC9Qs5RNwMr0wsr046NGQpcsWpIwSBCPyAXV97rCYsaDQjKYsIWIWn0zCBhrYxGtkqpLRC8PKUzsTKMcw4dDkM2jvsIY4xAmmCBceh726cXFe19Kt4wRSHrIk5vnlf+OD6RJHbI4Dk+/T2lE7H/CbSjWuMPJ7FEWSkyXu62GdQ4T5rpsYnQ9VGCQ4JOtbwtWArrlmZx3SO1puq9EmU8zF/2nQQXO2IE8wkrgRLxLrz8tHcN9rPbbLb2DAIoQ2/ZuHx2k9JXDonBqy1m6XR0OZDdF2x3xIWpKA50lVughEyw5fdKPHZwcseqvKuMaHmw2/Fd77gkovkJsWLb+F49fgYTMdTILatOOua+8vr78vB+6g/NZv31ar5P0jkC8393HZuRw5pX6ltaArGEpexoPhgFUf1l7Pdruj/mvn4/ox+AXBazhbvz9NuuvFL8u7rNpdOR49/HUdiOvLyvrmGVrInldYtZ6lc8A/b9uf+ZGcvGEk9ks9Br12oau6BMXPYqYtJDDD1NWfa/HhAlNhNPQurR2+VHJHAl/1cLsG7TJwvW6p0m22Xafc7IByCZRrNbsLmk232dmLzJbFEcUWoyHRsbTkbsfmZ4Io9jmmAU7MJZNK6bjxA2IbCljo0aE6BIxyPGZKnsNIlmrLMEk8WGEsZBs5fVtWV8wo9Jm4p/dJMxQ4yUtyKSfJQ4zInGCt23qsuZprLlQpFnApRWQXl7BIsVTKnmiR9R23WrY4iecR1kStmAUywsX5bJ4WxuLbf8eEiKfWYWecHraTaR1/21dA+QREO3CdyzVWXcTf3C3OPpHTCXuHCe/hmzIg+lypcoqEoC2T/KfPKdHjkY2IymhPOfM8NuRQreOEskDBkqBszrPbWom4OvaNfTsWsLgoyuVSpg2oaHlLFLylU7SAY40wkkqYNmP2jqmVoVhn3QIZ8aPgmT1PUYoZHQkocKwmppAuz7j2R5jra7+nJn197psiF1KVTuC1+M7WitSTRTP+8VWDfKT9lHmg/lYsCT479g3WQRyVp7r1BaFTvdI3wObEXCCmYInSLpYcgn8H8F3wvDErcsZFqIGaSIFPfyloUaobECEmqei1jdRwKJQpT7GZY//T6QtMqsXZ44z8++vMJOkIIKyedJyk+PqO9fURoNMDsd0F/aq3LVBy7ZbS29ah3jrXzVZWlBy7xhfzV8tBnY5nvPEP</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVbZcuo4EH3PV7icxynjhcXYBVQ5bHEChGFJJbzcErIMmrFlsGSWfP2VDHaAkAx3XqDUbnWf7j46Uo2CMDBsh1IUMxwRyW3V5V9FXbOgUTaUkqZ5SsmoaMrcgJ6i+dXy3PeRBc25LLmUJsgllAHC6rKh6UVF1xXdmGhVWy/bZbOgG8ZMll5RTHlo7lLQZGkXBoTaadq6nMTEjgDF1CYgRNRm0B47/Z7NPW2QYZIbtQPKNGHcWDK2slUVFjwEURDAAoxCtaae+dQ8ao/xggCWxOiY06N1+bh3u90WtsVCFC9UQ9M0VbNU7uNRvLiXG3fZZuS5xI8O6yYgEcEQBPgDCFB9xJaRJznBIooxW4bfhNZVXROhFbSDCtRL5F5WPxOk6G6MdAYypkChS6BnwUbIRzEiEEnTkVuX72+b4GHvJAaE+lEc0ov1n0FCZIOCaIU8hWaVZehuj3ilXY0agrZLYJBQvEEDQZMVgIhKwxj5eNfDlJPPo1I6fmlHM4Yh+CcjqamnODls9UpnWniBKPs/8zqd1SHKKwgS1HhcsPKHs0+eXsxZuTLo62+mBnrbznSt1VMIp84HUPmoj+tLoua8Om5qud1+f7a3Jkbff2/2jFXxsfmxD3edoFOev3eiGZ2tKxXrnQ4HzB2bbDJthc7g5ZHCwbTy2nVKb35gas/dKFm4d9W/pkUrGc5HQwO6tDVgc2KVkuH0qYWtylNv+OaM1i/PM7dbobGhvnvV1fSRRM2/n3eTqu7jj9GzS4tjd+qY3fadPp66FC3Xr6DrueOuo06i+mdNpzWcGzM5GCfzfxBk2VJQw21JHT4vwH6WFmHBnuKnrvZK6BNliDC5IXYJWbETLj7Ys/kwD+u20zErpU75wdErptFst7WSpnc0RzMtq9hsljL9OaC4gNiMiI9FLqGwB/78DBCGNkXEQ7GyiRK4RFT+IWILMCC5ZMQPRkQo4l2Uf1WbpqFbTrH90Gk1+W/bcYyH4oNRqRY7lmU5sjSI2At5iR2fofhMvXX9TL1HCOIVRkLiBc8pJzplvCVrsElYoBc2oEBQwi+BWOiwbZSqZZXicBUgAVgNIy8JUGG1XKUNUunh31AApKl11J6k5+/b8i6/ZZ3gPh4WDlTU8oD4NNGVa6iUFfJ9waXTgrPwTuJhccx4W1mM4QHJ+adPtgia5FThFWWQc89Lw1lU9bKgPJG3wTDne35Jc43nKtDIxrEGhXUh2WySdACmULiYh1d1VTPVMYIJl6n9JPoXETUPod50Q+SoLzLn9nN8CVuSMQMMhZwuUrq84XkwRlQ8D1xO992tb4+zlLxvDO3YNVsz4K8IgfjHhwa0ofDj5iH/20ax9zmuK7FO8vA6+ZuAYbIQK3Ef7L8hBYx4WMwFLIpPg18LcC35uTFvco6FcTbNE4a+/yIJZarLAMIoIcxtyanhVC1TnGy/Qvan05cwqSIfr9gd/faKfev3xly3QiDnvvi/nRWc0gUivoviFEtd3vHXIk9OFifqfAR4KdDlplY1K2a5WrWKuUCXLYurtpM38KySxhfzV8tJTy/PQ+M3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EAF75C0876758893E0401F0A05995BAA</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EAF764F5BA1672CEE0401F0A07993CC4</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:09B4AE26464A2FC3E05307991F0A94D5</con:value></con:property><con:property><con:name>policyID_before_DTC</con:name><con:value>urn:dece:policyid:org:dece:09B4AE26464A2FC3E05307991F0A94D5</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d78198ae-91b5-4d0e-9dd3-886048f0c2bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>423186c5-583a-4a1c-9e7a-24032ed24d34</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c55dc4d3-7d8e-4be2-bc0f-b68119e18a82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9d7d7724-8f49-4660-9937-b29c8fed414d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d2fcc8e-dd69-4172-b936-626b9d2b2834</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea54586-9969-4f80-80da-6e96f3a24037</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1cc95e33-d792-407c-8494-737a1c6f89c2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8e2b289d-1828-4774-a8f5-972256dfc92e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>362b5bfa-f60e-4b25-ac7d-21b1ef199871</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35cd7097-c2e4-4172-8891-0de448e3d804</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b6999684-10d4-418a-b3c3-783ff1744b1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977c07f-808a-4d2a-b915-fdb9e5067362</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>48f27436-b8f2-4e8c-a82b-d482a4ab9c3f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6277243b-d5a2-449c-a41c-03613ebc1a15</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f1028c4e-e345-447e-9a7b-bd84eba19265</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>85960cc5-2cb9-40f6-8be8-19f262d9f1d2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e9337998-e04f-43ea-b6b1-585fb4205efc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d0d859a-e97a-4f18-a15d-a1111083d8d0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8364bbe7-6e24-49dd-869c-6d5b19de823c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fabb013c-9aad-402f-b690-faa6cf7e6988</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>38c7908a-abf7-4f8e-9238-90bb58fe94f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4bc4319c-ccc3-44db-a0ad-5885582b8014</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_010_DTCreate_retailer_Grant_blocked:tou_basic_user_with_ULC" searchProperties="true" id="29ab7a65-a577-4f4b-b6bc-17a782cd216a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a201425f-50a8-4ec0-b7d6-3ff5eaa94737"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList","urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "UserNotActive");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="6f4641a5-2a5f-4b39-94d5-2c8176f837b0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="5d5ff3f6-9b87-45f3-b6e8-fd870dea6d53"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="fde971c4-8878-40db-85f3-998fd7ce0ef8"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS for First User" id="df51ba56-6921-41d5-b0d7-605436877bde">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="f56d8936-8f23-41b0-8036-7e9c964d6f3c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="ff30bec6-57c6-4bc5-9ce0-af29224d1865">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="55610cce-0e7b-4053-bb20-b2cda82fd821">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set EmailId for Basic User" id="3ad0bfd4-1051-4be3-b746-428101a362fa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Third User Create" id="4ac97a5a-cbbe-4b52-8bde-e39a444f9fab"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for Third User" id="bf3ce6fd-2d94-4626-8b0f-898377c544d2"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for Third User" id="c3306a37-6c3c-4448-9304-729360c588d9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>0D503F2FB06D28BAE05305991F0A1B2C</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>0D503E5B33C22888E05305991F0AC6DD</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1422009039749@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>UserNotActive</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0D503E5B33C12888E05305991F0AC6DD</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0D503E5B33C12888E05305991F0AC6DD</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0D503F2FB06C28BAE05305991F0A1B2C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0D503F2FB06C28BAE05305991F0A1B2C</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1422009039779</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_7aa61c5d-f4d2-4a31-b526-2a79b1d0d1d6</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_81f6e8c2-d965-4d59-8b2c-2c654ec58913</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdd6o4FP0rLu4z8qFYYFXXsmpbO9raot7bvsyK4YhpMSgJov31k6BSsdpx5omVw8k++3xkJ9cMzUPTbTIGMScRLa3nIWVuZq0rSUzdCDHCXIrmwFyOXa/Z77lmWXfRfotS6rbryt+2Ma2BjU3Vd2qWWvUtR7UnJlZNXLOqgC3bMSrClbEEupRxRHldMXXDUnVDNStDQ3dN2zVqZaNafVNKY4iZwBYuZV3ZkVqzujLjfOFqWpqm5bRSjuJAM3Xd0P70ex6ewRwpjettRlmguLHzx2UfMIQhLuNorl1rBZ9rn7keCSjiSQy7WP65WLqmO5rw8RkJfin5XvC7dBplyxaiESUYheQTyfr0gc8iv9QMgygmfDY/m4ShS2AV1ljFRpX+UrQitQuBCgxjhlQ2Q8YO6wWmEAPFUBq9dOvKr8u6lm0dxoiyaRTPWXH53/gAXUEYLcBX2T6tHbXLAU9UqnEN2O1SHCaMrOBRDusCYWC7bgK+HKo0iGFK1j3CxICumWSnHdI7Wm6r0SYBMP5/GnTQnC3IGIUJNJr01Utqg4fbdzse0Z75jqqRjZJ4/TuoZwQOnTND3trt8mgo8yHa7uCM+STRP6Zoc8WNz5WNN4/Y6z3fvTa1VyOcGPd3V1VvsP6ziZ8dozZ8vF+uTG/mLZ+u+pNWZzzqPaHl42jpBIZvO71UHw1Jberfsar/5t0+DFr60J6m0Sh4HYYo9B/mPTZ+0/rv7bSforWF02jpvLU7D23vXhvDoPMc3DX/qg5u0rT7O31eQHc0tj+fQmuGPup5Ogf8i7b9mfeSyTtgvl/KMei2S7eiS4j/LGbSQnx1mrm6Cyk+jAPlSkPuktrhJkLuiO+KHm7XetvSK52rltPRO6ZdMzu6VdEtxzFu9abZMqp7kdmyOKLYiuiUyFhScrdj8zNBPHcZUB9idRUlQumY8gNiG3FU6tIXcQgiymAYCXk2HL6q+u804BO0WSTg46WdJjNsKqXHiD/Rp7g55RAXNblS0OQXwGRBQAq3nGsmBptxUYslWiU8NMorVKaQCGmPpcq6ZtW2NEbmixAkU20e+UkI5cVskVVGY9uvqSLMMutLZ5idtrN5Hf/bl0D4+EQ6MJnLDYg2wonLRd8ncj7h2mHCe/hm4hN5sEQ9eUzwlknx19eYyPnIZ0RktKecex4bCqjacUJ5IH9FcD7o+XUtVFyc+8a+HUtUXpaT1SrJGnAl9S0W8JpMUdNNzQOcCGXaDKMPoFqOol10DeTEj4Ln9iLFhM+oxxGHuZiYUra84N73gMl7vytGfX3po6IQUpSOw5qfsrVC8WaRjH981mAXSz9hHohPGsX+V8dOYB3EEXmKa58TGsiVvAI2Z+YCRwKWCPGK4kPwUwCngheNeZFzLlwM1CThcP5PSapSXUEYRwnl3baSGQ6VMuPJNwtwv5y+wWRinL/OyL8/z1SSjQAG8aZjJMOXl6wrjwANDtR2F/S74Fo3lUrLMG3bPhTcVq3dzotSYNf4Zv5uOajT8Yw3/gE=</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVbZcuo4EH3PV7icxynjhcXYBVQ5bHEChGFJJbzcErIMmrFlsGSWfP2VDHaAkAx3XqDUbnWf7j46Uo2CMDBsh1IUMxwRyW3V5V9FXbOgUTaUkqZ5SsmoaMrcgJ6i+dXy3PeRBc25LLmUJsgllAHC6rKh6UVF1xXdmGhVWy/bZbOgG8ZMll5RTHlo7lLQZGkXBoTaadq6nMTEjgDF1CYgRNRm0B47/Z7NPW2QYZIbtQPKNGHcWDK2slUVFjwEURDAAoxCtaae+dQ8ao/xggCWxOiY06N1+bh3u90WtsVCFC9UQ9M0VbNU7uNRvLiXG3fZZuS5xI8O6yYgEcEQBPgDCFB9xJaRJznBIooxW4bfhNZVXROhFbSDCtRL5F5WPxOk6G6MdAYypkChS6BnwUbIRzEiEEnTkVuX72+b4GHvJAaE+lEc0ov1n0FCZIOCaIU8hWaVZehuj3ilXY0agrZLYJBQvEEDQZMVgIhKwxj5eNfDlJPPo1I6fmlHM4Yh+CcjqamnODls9UpnWniBKPs/8zqd1SHKKwgS1HhcsPKHs0+eXsxZuTLo62+mBnrbznSt1VMIp84HUPmoj+tLoua8Om5qud1+f7a3Jkbff2/2jFXxsfmxD3edoFOev3eiGZ2tKxXrnQ4HzB2bbDJthc7g5ZHCwbTy2nVKb35gas/dKFm4d9W/pkUrGc5HQwO6tDVgc2KVkuH0qYWtylNv+OaM1i/PM7dbobGhvnvV1fSRRM2/n3eTqu7jj9GzS4tjd+qY3fadPp66FC3Xr6DrueOuo06i+mdNpzWcGzM5GCfzfxBk2VJQw21JHT4vwH6WFmHBnuKnrvZK6BNliDC5IXYJWbETLj7Ys/kwD+u20zErpU75wdErptFst7WSpnc0RzMtq9hsljL9OaC4gNiMiI9FLqGwB/78DBCGNkXEQ7GyiRK4RFT+IWILMCC5ZMQPRkQo4l2Uf1WbpqFbTrH90Gk1+W/bcYyH4oNRqRY7lmU5sjSI2At5iR2fofhMvXX9TL1HCOIVRkLiBc8pJzplvCVrsElYoBc2oEBQwi+BWOiwbZSqZZXicBUgAVgNIy8JUGG1XKUNUunh31AApKl11J6k5+/b8i6/ZZ3gPh4WDlTU8oD4NNGVa6iUFfJ9waXTgrPwTuJhccx4W1mM4QHJ+adPtgia5FThFWWQc89Lw1lU9bKgPJG3wTDne35Jc43nKtDIxrEGhXUh2WySdACmULiYh1d1VTPVMYIJl6n9JPoXETUPod50Q+SoLzLn9nN8CVuSMQMMhZwuUrq84XkwRlQ8D1xO992tb4+zlLxvDO3YNVsz4K8IgfjHhwa0ofDj5iH/20ax9zmuK7FO8vA6+ZuAYbIQK3Ef7L8hBYx4WMwFLIpPg18LcC35uTFvco6FcTbNE4a+/yIJZarLAMIoIcxtyanhVC1TnGy/Qvan05cwqSIfr9gd/faKfev3xly3QiDnvvi/nRWc0gUivoviFEtd3vHXIk9OFifqfAR4KdDlplY1K2a5WrWKuUCXLYurtpM38KySxhfzV8tJTy/PQ+M3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EAF75C0876758893E0401F0A05995BAA</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EAF764F5BA1672CEE0401F0A07993CC4</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:09B4AE2646722FC3E05307991F0A94D5</con:value></con:property><con:property><con:name>policyID_before_DTC</con:name><con:value>urn:dece:policyid:org:dece:09B4AE2646722FC3E05307991F0A94D5</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d78198ae-91b5-4d0e-9dd3-886048f0c2bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>423186c5-583a-4a1c-9e7a-24032ed24d34</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c55dc4d3-7d8e-4be2-bc0f-b68119e18a82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9d7d7724-8f49-4660-9937-b29c8fed414d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d2fcc8e-dd69-4172-b936-626b9d2b2834</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea54586-9969-4f80-80da-6e96f3a24037</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1cc95e33-d792-407c-8494-737a1c6f89c2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8e2b289d-1828-4774-a8f5-972256dfc92e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>362b5bfa-f60e-4b25-ac7d-21b1ef199871</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35cd7097-c2e4-4172-8891-0de448e3d804</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b6999684-10d4-418a-b3c3-783ff1744b1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977c07f-808a-4d2a-b915-fdb9e5067362</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>48f27436-b8f2-4e8c-a82b-d482a4ab9c3f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6277243b-d5a2-449c-a41c-03613ebc1a15</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f1028c4e-e345-447e-9a7b-bd84eba19265</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>85960cc5-2cb9-40f6-8be8-19f262d9f1d2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e9337998-e04f-43ea-b6b1-585fb4205efc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d0d859a-e97a-4f18-a15d-a1111083d8d0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8364bbe7-6e24-49dd-869c-6d5b19de823c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1d3b67f2-bbef-46b1-a9f8-7411c3211cce</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3eda2deb-fb0b-47d6-b61f-7ad487603fe5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c97cd6-868a-4f5a-b49f-ff763130c904</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_040_DTGET_retailer_Full_user_assertion_with_RightsTokenGet" searchProperties="true" id="1436dea1-f2a7-458d-a4f7-ed3e5d31ecfe"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="71d3890b-56a1-4987-9a72-81c1d22b82ed"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="3a68224f-89a4-4cd3-8c72-e5554e16190e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="32fc64db-2b7b-44bb-b75a-aaab300f5b8f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="facc9dd9-f6e7-4e33-9da9-c5c06550c879"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="1b6be086-dbe9-4bb2-8d7d-ddc311af4f8d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="d806551e-1899-4dd1-8710-ccbeff17b0bb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="47ccaa27-54a6-423b-bd74-229193b4b624">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="95796669-f180-4271-891f-ca0cbabad9bc">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="3e449f98-fa8e-4623-9d9a-558d3898c5ac">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="3919a798-25b3-4c2e-b97c-ffba3a235067"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeRightsTokenCreate","");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>0D51431CEF20098AE05307991F0A7C19</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>0D5142F867AF0980E05307991F0A3F4E</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1422013385477@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0D5142F867AE0980E05307991F0A3F4E</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0D5142F867AE0980E05307991F0A3F4E</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0D51431CEF1F098AE05307991F0A7C19</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0D51431CEF1F098AE05307991F0A7C19</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1422013391229</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_853e1a1b-3c96-40f3-8524-0634b3802976</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbZcuo4EP0VyvfxlrG8YGxXoIpgyBDIBmSpvEwJWYBubNmRZELy9SMZcDAhGWaeXN1udZ9edNRnHCaxFXQ4x0yQlNbWSUx5UGhbWs5okEJOeEBhgnkgUDDpXI0Cqw4CuDui1QZhS/vba9jYhOZMt5Hv6g6Y27rXsBwduLYzsz1g+U1XmnKe4wHlAlLR0ixgNnRg6pY9Nc3AMQPbqTcb/rNWe8CMS9/SpA60Lag1b2lLIbLAMN7e3upvdj1lC8MCwDSerkYTtMQJ1Npnm4yKQKy9tUf1CCMcx6iO0sQ4Myo2ZxEPJmRBocgZ3saKvosFDOAb0ibiZPFLK8/iaEDnaSF2IU0pQTAmH1DV5wqLZRrVOvEiZUQsk2+TMIFyrOM10pHp0F+aUYV2oqMKQsahzpfQ3Poa4zlmmCJcux8PWtqv07pWHJ0ySPk8ZQmviv8ND6YrHKcZjnS+S2sL7XSHRyrVPsMoGFAU55ys8LUa1gwizLfdxOh0V7VbhudkPSJcDuiaK3TGPrwDcVONkCwwF/+nQXvN2Th5gHGO29lwuLwS5NFcPd2yyOrPALYWVmpNo0GrALBvXCjK1m7Eg6Esh2hzYrhc+FNjnN9d9kaTR05uLhbhKHsOG0tnJVji3c6zi9XF3V8gu3nujobAA+PHl+Vd0hS2Ty5/2/3mY/JOTJp4L8K/FOn5bPiKnhmd+Q/XL8i5993XKPN++4vO/OF8GuJRf5VzePln7iSj8OPedd+uswGb3r2Ek94dScbmuvPxFLPRcCzG/feON7qjzihcmO7zNt0D/FXd7s5P8tkfjMROVGMwCGt92SUofiYzpSGRPi9Mg0yRDxeYCq2tTinuCHJJdyQKZA83MggbpmOb3V7f7APf6/RAwwZN35dSp9k1/R3JbFAcQOymdE5ULEW5m7H5GSBKAo5phJm+SnPJdFz7wWMIBawN6FhegpRyPE0ljTqNyG06UEcRdHTHhZE+c5qe7npz12+oy9/wtNp1Km7oDevMBWZVdnYq7DzGiGQEKwpXE87liHMhq/IKV7mIzfoK1inOJckzxbeB5XgNg5Mki7HCbCRplMe4ni2zokYG33wtHSJeaLtAltXrAa/bM7vN0O0BB6i6goasrwXOi0v5bfqH/3aVkjYRUQZcJXqOZbfxkTfI2mX5pRru0bdq576TR0TdP1l2wQjaIKn++pwmNUblKI170x3k0vJQUfFqHCZUBopWBJX3oXzVJdlLemjvevUK66/1fLXKi+40FQ0y6d5QpTCAZUwwyiWBvU/TF0yN0otx0mtRAj8IXuqrEHOxpBMBBU7kONUK8YT1YIK5Wg8G8kasT909KiFl6QRei2O6bixXG4X4x+0HBUjZSfWt/LylLPrs2BFfe3FknnI7EIQulKReivdv5gKl0i2RHJeyfefHHBwLXlWWRS6xCDlQs1zg7//UFHm1NIhQmlMxCLVCsU+oBU7xnuHg0+iLm4KzyyWO/PsWp5NiBBCWqx8nhX/1FgfqCtDFHilvg37hZavvuU1Jyb4H9nnZ7ju9sigVdO0v6q+avTodznj7Hw==</con:value></con:property><con:property><con:name>expectErrTypeRightsTokenCreate</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3118c0d4-b8db-4f7b-b50e-8c6c3466ed29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_041_DTGET_retailer_Standard_user_assertion_with_RightsTokenGet" searchProperties="true" id="46cd1be0-3a55-4d6f-9810-c3b77f902141"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ac78f0c6-e9c5-48e1-b3b4-53652a025635"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="0f8fd8de-d239-4c89-9cae-202ba2562683"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="cce3a7c2-71ce-4723-aed9-249f11134693"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="1cd7e8cc-baa5-40d5-8253-90de744442ac">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="eae1279b-365f-4edb-8870-87daec4f45f7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUIDFirstUser", tC.getPropertyValue("assertionUUID"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="ba8023ae-e80a-4f2d-aa15-2eb86ccb9068">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="b7ced5ec-67ba-4b00-8f2a-5e8d2c493a44">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set EmailId for Second User" id="3a518f40-6b36-4da4-ae3d-c6df7a04574b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Second User Create" id="93256b65-9d8e-4498-8efd-b69125b591eb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="b4087151-f71e-4f41-8296-0ec5495131b5"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator for Second User" id="22ddb309-ebe1-4491-b13a-51ce056f1a2b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator for Second User" id="b0e73519-ee9f-4430-bb44-cb412c3ac914">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create for Second User" id="944ae41c-ffd2-40f1-a443-d65ed3811522">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create for Second User" id="4cb67904-a02e-4d03-b3e1-b1c36ded556d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="eb726ac4-f75c-4772-a2a0-437232c822e4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="4f4ef919-2c39-4b8a-9f37-ebd0979c4457">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="04886a7b-4d78-4ba0-accc-4386538d5b0f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeRightsTokenCreate","");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0A7D562921A92686E05305991F0A6AEE</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0A7D7903C71C2098E05305991F0AAF8F</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418904686331@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0A7D7903C71B2098E05305991F0AAF8F</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0A7D7903C71B2098E05305991F0AAF8F</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0A7D562921A82686E05305991F0A6AEE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0A7D562921A82686E05305991F0A6AEE</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418904686346</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_18d2934f-da88-4680-9d41-72d1e3cd25c4</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbZcuI4FP0Vyv1sLG94qUCVwzLNZO2QzvYypcgXEDEysSSW/vqWDLiBkAwzTy5dX5177qIjnXE8zZw44RwKQXNWW04zxuPS2jRkweIcc8pjhqfAY0HiQXJ1GTt1FOPtFqPW7zSNf+wwdSLXG5opDkPTa4TIjFLPNgMntcElqeMTT7lyLqHPuMBMNA0H2Z5pO6Yd3ttObKPYDerIDl6M2gMUXGErlzoyNqSWvGmMhZjFlrVYLOoLt54XI8tByLaeri4HZAxTbLTO1hmVgYrWxp/UUyCQZaRO8ql1Zu35nKU8HtARw0IWsImVfhYLWSiylE/K6eibUe2FtM+GeblsY5YzSnBGf2FdnysQ4zytJdkoL6gYTz9NwkYa2IQlMYntsW+GtU/tRKA9hgXHJh9je4N1B0MogBGo/bzrN41vp3Wt3HpfYMaHeTHl+8v/xgfYHLJ8BqnJt2ltqJ0OeKRSrTMgcZ+RTHI6h2s9rDNMgG+6CeR0qNptAUO6vKRcDeiSa3bWLr2D5boaHToCLv5Pg3aaswZ5wJmElv2Tv2Ts8jF5lH9HwQvmbm/xmHSi6fitWRLYdS4NVWvXy4OhrIZovUMC6vGhfzF2wldAMyLgwrP7xF+ey0I+er2noP8QeW728Hzl2tHcfyDOanU1YbKX4e+T5a2w8u7qBskna0Wu8UCizJXBhD4Ek2X+Yl82Ckc+FzeZe9Ho3nZ+obDzMps8vl3aF7PRYDFBNPie3CTey1MOf10/d9u3b4sl7r/LgJGQFWjE82D0I+r98K/fnptVOjv8923bMz+QrxMgYrvUY9Dv1HqqS1h8LWbaQlNzWLrGMy0+XAATRkvv0toRSyV3NI1VD9drlAQdv+FEjp2ETiNsdJHvIj+K7B5KGkm3uxWZNYsDiu2cDamOpSV3PTZfEyTTmANLoTDnuVRKx40vEDtY4Fqf3alDkDMO93nTCN3QR8R5NdNXFJiejxwTDxuu6eMQ+RhFMPQco3adixt2UyRDAcW+Ovt76nwHhM4oaAnXE87ViHOhqvKO51Jkdn2O6wykEvlC623seKFvcTqdZaA5W9M8lRnUZ+NZWSOLr7+KEuGltY3a3V7YRWG7a7eDjqqth3Rdy/o66Lw8lJ+mf/hvWynlk1LtwHWi56C6DUfuIGeb5Ydq+Efvqi18IlOqz58quygoWTPZ//VnmvQYVaN0173fUq48Dw17qNZhQlWgdE5JdR6qW12JvZKH1rZX77j+XpfzuSy7E2gZLBS8pVO0kGMNgEglYKv7/A2YVaFYJ90WFfGD4JV9n6IUYzYQWMBUjVOtXJ7wPBgA18+DvjoRy1PfHnshVekELMUxWztTTxvN+MvXD4mJ9lPmW/VZ5EX6p2NHsHbiqDzV60BQNtIrfVOsPpkLkitYqjQuL3bBjwEcC75vrIpccRFqoF6lgM//1LR4NQ1MSC6Z6HeM0rArqCVPsZpB/MfpA0yp2dUjjv77K86k5QgQUE8/Tkt8fRfH+giw0Y4ob4Ie6nIQIbcd2OcOisJdXU56Ya8qyh671gfzR8tOnQ5nvPUb</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:EAE7B7D46BA71E2FE0401F0A079922CD</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_cdb04c71-1d0e-4d07-816c-a447d1f68127</con:value></con:property><con:property><con:name>expectErrTypeRightsTokenCreate</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_015_DTCreate_retailer_ACCOUNT_USER.STATUS_of_'deleted'" searchProperties="true" id="3ad14b1b-9ef2-4b3d-b71e-791e62c911e6"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2d0aa910-275d-491b-ab46-b79393f3ada3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="dd17a710-6c08-4a91-ba7e-825bb71ac3bf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="ed611f35-c387-49ef-8dbe-996954735c48"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="ccd7a07f-1626-4a64-8221-1d6344f2276f"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="da5d1703-4ccd-45ab-8f07-70b4023be0f9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="882e9a68-26ee-4d6b-b206-710e518d1e0f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="f324fd2f-6426-4a33-a349-b65db9c0b942">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator-cs" id="dcbd72c5-e19a-4fe8-adf0-f08116ba441b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTLCS"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator-cs" id="7f5c5185-c750-4c6c-bccf-aa838fec65d7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="7c3457b5-4fc1-4244-abe5-f31d0830661a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == deleted" id="a2d030ce-85a6-4b00-8c4d-077b8179f1a0">
        <con:settings/>
        <con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userStatus","urn:dece:type:status:suspended");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserStatusUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
log.info "runnerTC--"+runnerTC.status

assert "$runnerTC.status" == "FINISHED";

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="278dd510-0acb-4880-919d-041ccf28e2e0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0A7D5628EC7844A5E05307991F0A471E</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0A7D566D348E44A7E05307991F0A0458</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418904744860@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0A7D566D348D44A7E05307991F0A0458</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0A7D566D348D44A7E05307991F0A0458</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0A7D5628EC7744A5E05307991F0A471E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0A7D5628EC7744A5E05307991F0A471E</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418904746321</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_029e2d15-24a1-4da0-85a1-07bd332e3fea</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc6o6FP0rDuexgwSEozDVGSv1lGmrVnt62r6ciSFoWkgsSdT2198ElYr9uN77xGSzs/baH1nJKYdZ6gRdznEuCKO1dZZSHhTWtiFzGjDICQ8ozDAPBAom3eurwKmDAO62GLUobBt/fd/HvufH5hQkrum60DWh18CmD+KG3cIN6KGGcuVc4ohyAaloGw6wXdN2TLt1azuBbQeOXwcueDRqdzjnClu51IGxJbXmbWMuxCKwrNVqVV816iyfWQ4AtnV/fTVBc5xBo3O6yagIlHe2/qgeY4TTFNURy6xTq+JzGvNgQmYUCpnjbaz4q1jAAr6lfGJOZj+Mci+OI5qwYtmDlFGCYEreoK7PNRZzFte66YzlRMyzL5OwgQY28RqZyHbpD8OqUjsSqMIw59Dkc2hvscY4wTmmCNd+j6O28eO4rhVbb3NIecLyjFeX/40PpkucsgWOTb5La0vteMBPKtU5xSiIKEolJ0s80MO6gAjzbTcxOh6qNspxQtZXhKsBXXPNztqnd7DcVCMkM8zF/2nQXnM2IHcwlbgT8fBhwvz498Po8s+s8RDBq+l9BKbXQ9AuCOw7F4aytZvlwVCWQ7TZcXf5fN09B+zp9/o8X8hH0Bt4w2R8j2cybA3c12QgeyeT/mA1k8+PoyeQjDK37132/WzVPJGXZ87F2gZ/Tn6J7MQL49zHaxr+enu6gfJk5U/T20n358VZr9f1Rm+jXrMP2YPl5WdL++nZvWg583l0ctW3JLuRf/hzGk5XQ9Fk7lPjDjzeLy5vxtngrgHD3ms6vJi1y3T2+FdtuzM/kdMnjMRuqccgCmt91SUovhczbSGxmRSuwUKLDxeYCqOjd2ntCKSSOxIHqoebNeg2Q++n0zrvNZuu2/XOgdcATd+3+6DrNu3znchsWBxQ7DGaEB1LS+5mbL4niLKAYxrj3FwyqZSOG98ghlDAWkTH6hAwyvEtU/JsL5x85j87dOnZrQQ0k5b9Qh2KMqM2YGJIh3k3ETivarJX0eQxRmRBsBZuPddcDTYXqhYvcClFateXsE6xVNKea5UNHLflWZxkixRrplbGYpni+mK+KCpj8c3XMSHihXV8fvu3N/lbHAfry+QO/+3qoHxioh24TugMq17iT24Ye5fN11m39rPewXdlTPTpUkUVOUEbJtVf77Oih6QclF1aO96l+6GhAm0dZlVGi5cElSNfXtxKz5UCdHaNeYH1l7pcLmXRiqZWulzBK/mxPQs41gQjqTTq9ZY9Y2qVKNZRF0JJ/CB4aa9SlGJOJwIKnKnZqRXLI14AE8z1CyBSQ78+9nlRCalKJ/BafGbrper1ohl/+8BBAdJ+yjxSnxXL4/eOfYK1F0flqR4AgtCZXunL4PWL4UBMwRIlYyzfB/8M4LPgVWNZ5JKLUAM1lQJ//aem9altQISYpCIKjcKwr5kFT/G6wMG70weYQpbLdxr594eaSYoRQFi97jgp8PV1G+gjQGd7ursN+lF6f4YNtxUq6W3uSy9wvVZZlAq7zgfzR8tenQ5nvPMP</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property><con:property><con:name>userStatus</con:name><con:value>urn:dece:type:status:suspended</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dcbd72c5-e19a-4fe8-adf0-f08116ba441b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f5c5185-c750-4c6c-bccf-aa838fec65d7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7c3457b5-4fc1-4244-abe5-f31d0830661a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_020_DTCreate_retailer_ACCOUNT_USER.STATUS_status_of_'blocked:tou'" searchProperties="true" id="00eb4009-94ea-488f-a947-82857c505319"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="8041458b-b36a-4086-841c-f6e2af629001"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="7f6e3a1d-d348-4c27-bf9f-7e7c2fd7ece6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="098a1066-b1d7-402c-bd25-85938940f456"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="bf488fb2-6cd7-4a35-ab68-a23f4cb0574e"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="d4329602-0d6f-4660-828e-d43349347c5d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="8f52d1d5-667d-430f-b5b3-d89645768e2c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="5b8e0f58-910a-4a41-bfdf-06b6244f36d0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0A7D793B06E020ADE05305991F0AD7F0</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0A7D793AF47820AAE05305991F0AC126</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418904806842@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0A7D793AF47720AAE05305991F0AC126</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0A7D793AF47720AAE05305991F0AC126</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0A7D793B06DF20ADE05305991F0AD7F0</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0A7D793B06DF20ADE05305991F0AD7F0</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418904808455</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_6cf24e71-89ea-49f3-aa39-dee1d3e04c27</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZrb+I6EP0rKP24CnmUR4gKEi2lzS6lXWAp2y9XxpmAaeKE2Alpf/3aAbKE0l7ulZCQJ+MzZx4+9hVDgW/aXcYg5iSklSzwKbNza1tJYmqHiBFmUxQAszm2x92HgW1WdRvttygVp9dW/qnNrXqtbtTVuodArV1CTUWW6aqW2ao1TcMDcw7ClbEEHMo4orytmLpRUw1TNayJYdriZzaqTbPxolSmEDOBLVyqurIjlbG2suQ8sjVts9lUN5fVMF5opq4b2uxhMMZLCJDSudpmlAeKOzt/XHUBg+/jKg4D7Uor+Vy5zB6TBUU8iWEXy/0slq7pLU34uIwsLpRiL7gO9cJ8eYNoSAlGPnlHsj4PwJehW+n6izAmfBl8moShS2AVMqxio0YvFK1M7UygEsOYIZUtkbHDGoEHMVAMlV8jp61cnNe1fOskRpR5YRyw8vK/8QGagh9G4Kpsn9aO2vmAJyrVuQJsOxT7CSMpDOWwRggD23UT8PlQlacYPJINCBMDmjHJTjukd7TcVqNHFsD4/2nQQXO2IFPkJ9DhXbwe3fpZ8Eanw1/1H7/H49HUWpN6+tDOCRw654aitdvl0VAWQ7TdgX6+3/+6c55hoE2plz6P3GT1cuN50cu0Nnt3l3H0DVzWvZvfvi4W0yBtjcY38x/hxDfw9+dg5s4mL7PpfXZHatZ3875hPVohoFWDjad89k1rrdarp+Fq8Pzqb9JrM3sbXd+/zwY18+ltuPYc/rMffBtiqycyuL13Luf3ceD83JCw2d04gwd899gP0t/frSgywnenXaRzwL9s25/5cTJfAeb7pRwDp1fpiy4h/rWYSQtxVS93tSMpPowD5UpH7pLaYSdC7ohrix5u13q32Wu2Lq/1Rq9v6t3erV6/1OutltEXi2Zf34vMlsURxZuQekTGkpK7HZuvCeLAZkBdiNU0TITSMeULxB7iqOLQkTgEIWUwCYU8+xG0TGOVsg1qvC5Ny8suV1nmrpXKMOSP9DHuehzisiTXS5I8AkwiAlK35VgzMdeMi1KsUZpw36imqEohEcoeS5G1zZpV1xgJIh8kUS0I3cSHarSM8sJobPtvqgiz3Dq6neSH7dO0jr/tKyB8XCIdmMzlGkQX4cTdYuwT+Txh6zDhPXw3cYk8V6KcPCZ4y6T86e+UyPEoRkRktKdceB4bSqjacUJFIDcluJjz4rYWIi6OfWffjjWqrqtJmiZ5A5pS3mIBLzTHqGu6qY0BJ0KY3ibhK1CtQNHOugUK4kfBC3uZYsKXdMwRh0BMTCVfnnHtj4HJa98Rk56d+6YohRSl45DxU7YbXzxZJOMvXzXYxtJPmJ/E3yaM3b8dO4F1EEfkKW59TuhCruQN8PbJXOBQwBKhXWF8CH4K4FTwsrEocsGFi4GaJxw+/1KRotRWEMZhQrnTU3LDoVDmPPlbBPZfpw8wuRYXjzPy768zleQjgMVDUPjn+PKOteURoIsDsd0FPaG33X6t2RR62z3U2xvDbBRFKbHrfDB/tBzU6XjGO38A</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_023_DTCreate_retailer_ACCOUNT_USER.STATUS_of_'merge_deleted'" searchProperties="true" id="8e5fb293-68c0-4a23-bc0f-c7436da867e2"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7bddb65e-5a06-406e-8ff0-d075d6a53570"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "UserIdNotFound");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="53a4fa53-c481-43e8-8f77-3c1c97010827"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="ad2a0f3f-caf0-4fda-b4dc-428b21e25d2f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="817f5af7-7ac8-4e58-b579-2c349a4cc623"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="483ddffd-7215-4cc6-91ae-a6a8acb0f95f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="a37f9e07-17ab-45bf-821d-6b0d0c159822">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="c6711e9e-9ca5-4a0d-9458-51a6a1b988cf">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == mergedeleted" id="251316f6-c934-4563-95b1-077a784b60a1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def useroid = tC.getPropertyValue("USER_OID");
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbNode - $e";
	assert 1 == 2;
} 
finally {
	assert dbUtils.userSetStatus(useroid,"mergedeleted") == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="2ed4da17-ba92-46d4-a69b-0097ca526fe7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>0A7D793BBD132094E05305991F0A995C</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>0A7D793AF4B420AAE05305991F0AC126</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418904860658@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>UserIdNotFound</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0A7D793AF4B320AAE05305991F0AC126</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0A7D793AF4B320AAE05305991F0AC126</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0A7D793BBD122094E05305991F0A995C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0A7D793BBD122094E05305991F0A995C</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418904862448</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_881b89e6-43fe-4143-8f3c-3528b4fff98e</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMr4T2xWoIpDsMAkkAyxJ5WVLyG0QY8uOJRuSrx/JgAcTkmX3yaV26/Tpi450xVAcmX6XMcg4SWhjE0eU+aW1reQZ9RPECPMpioH5HPuT7vDeN5u6j/ZblMag31b+cV1j7nrQUm0rBNU2bEt1QwurlmO6czsMQ88F4cpYDgPKOKK8rZi6YauGqRru1DB9w/JNvema5ovSmEHGBLZwaerKjtSGtZUl56mvaev1urm2mkm20ExdN7Tn4f0ELyFGSudqm1EZKOvs/HEzAAxRhJs4ibUrreZzFTB/QhYU8TyDXazgs1i6pnua8AkYWXxTqr0QDGiYlMseogklGEXkHcn6DIEvk6DRjRZJRvgy/jQJQ5fAKmywig2bflO0OrUzgWoMM4ZUtkTGDmsMIWRAMTT+Hg/ayrfzulZunWaIsjDJYlZf/jc+QAuIkhQCle3T2lE7H/BEpTpXgP0BxVHOSAEjOawpwsB23QR8PlTjMYOQbO4JEwO6YZKddkjvaLmtRp8sgPH/06CD5mxBZijKodOajeD550b/GQ69dHE7HxsrXDz13lcjt10SOHQuDVVrt8ujoayGaLuj56zMR/Z+8df4Up9PLu+nd4v1dDoy5i/PYP26vybm03xu90j/cvY2xS0vRT+Im65b0xYDB13wu8wYtKhrxZvwZTh7/Mlv8/X3Hy19g0bDG2f4krmD7vc3r1vYN8bsKZyOf9ire/T8MHvQekSPI6f/ooUXMYwD72Jur2/568jJ7NUwvd7gnmYVlsMeJty7uxjv0j3iX7ftz/wkn68A8/1SjsGg37gVXUL8azGTFhKoYenqp1J8GAfKlY7cJbXDz4XckcAXPdyu9e5l/9Kzrq/7hmnqnn2jO5bueJ5xq3c9z+ntRWbL4ohiL6EhkbGk5G7H5muCOPYZ0AAytUhyoXRM+QKxjzhqDOhYHIKEMpgmQp6N1S8EZvz+5hTZ2rBTbhQLc53OV7nSGCX8gT5k3ZBDVhdlpybKY8AkJSCVWw42E5PNuCjGKypyHhnNAjUp5ELbMymzvmm7jsZInEYgqWpxEuQRNNNlWpZGY9uvqSLMSuv4Zloet08TO/63r4HwCYh0YDKXaxB9hBO3i7FP5POE3cOE9/DdPCDyZImC8ozgLZP6rz9zIgekGhKR0Z5y5XlsqKFqxwlVgYKC4GrSq/tayLg4+J19O15R87WZF0VeNuBSClwm4IXqGI6mm9oEcC6k6W2a/AKqVSjaWfdARfwoeGWvU8z5kk444hCLiWmUyzMu/gkwefEPxKxvzn1V1EKK0nHY8FO2XiQeLZLxl+8a7GPpJ8yP4rNOsuBPx05gHcQReYp7nxO6kCt5B7x9Mhc4EbBEqFeSHYKfAjgVvG6silxx4WKg5jmHz/80pCy1FYRxklM+6Cul4VAqS578LQX/j9MHmFKNq+cZ+ff3mUrKEcDiKSj8S3x5y/ryCNDFgdzugp5Q3O6tfW2Zerd7qLg9w2xVRamx63wwf7Qc1Ol4xju/AQ==</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_024_DTCreate_retailer_ACCOUNT.STATUS_of_'deleted'" searchProperties="true" id="99adf62e-3416-4ece-85e8-98a63eb42424"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9a5fb0f5-23be-47fd-a4df-4a071f15684c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="2cdccc58-ebfe-4c89-a5d1-1d3556f63fa7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="b395b136-f268-4a76-bebb-b51569aa7166"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="7db81fcf-3dca-4b6d-ab44-3dd7fd26d8d3"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="55d4fa83-e185-4466-b024-fec0162c15be">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="8e46c92b-c3d7-4c8d-90b6-ec3290655251">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="5243455c-3e71-4ad2-96e4-9266e2846330">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT_STATUS ==deleted" id="427c8f05-6c8c-4fe8-9d6c-3bbb51755d04">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acctoid = tC.getPropertyValue("ACCOUNT_OID");

try {
	a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	assert a.accountSetStatus(acctoid,"deleted") == 1;
}
catch(Throwable e) {
	log.info "Error - dbUtils.dbAccount - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="e4339324-33df-4666-b96f-43d437e0a056">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>0A7D79046589209CE05305991F0A087A</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>0A7D8639CEA1684CE05307991F0A3BDF</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418904896966@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0A7D8639CEA0684CE05307991F0A3BDF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0A7D8639CEA0684CE05307991F0A3BDF</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0A7D79046588209CE05305991F0A087A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0A7D79046588209CE05305991F0A087A</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418904898786</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_7e8dbd69-ecdf-4c80-ac61-3e4685a1baa5</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMr4SjCtQBTik2BDCAMlO5mVLkRtQYksgyUDy9SMZ8GAmybL75FK71X26++hIVwKliRu2hQAuCaOVbZpQEebWppFxGjIkiAgpSkGEEoeT9t0gdKt2iA5bjEo/ahr/1AMcu/4MmcirY9MHLzCDZ3xpzgLk2a7joXjmK1chMuhTIRGVTcO1Hd90XNMJpo4bOl5Yq1cdp/HTqDwCFyq2cqnaxh7UVjSNhZTL0LI2m01141UZn1uubTvWj7vBBC8gRUbraldRnoi39v64GgOGJMFVzFLryir5XMUinJA5RTLjsM8Vf5bLtuyGpXxiQebfjGIvxH06Y/myiyijBKOEvCPdnzuQCxZX2smccSIX6adFOLYObMIWm9jx6TfDKkM7M1AJIRfIFAvk7GONYQYcKIbKw7jfNL6dN7V865QjKmaMp6K8/G94gK4hYUuITXEoaw/t/IAfdKp1BTjsU5xkgqxhqMm6RBjEfpqAzw9VGXGYke2ACEXQrdDorGN4J8tdNyIyByH/z4COhrML8oiSDFpxx4snCUy3T0/dlTMKfkJys5hlctoVzRzAsXNuKEa7W56QsiDRbkfndphc1Hs/7MH00R+17RePB4vgr97GGr5168MXG0XDzm2f9H5MxgPOo06K7jygFwvaFpTf1CCaXr94T7LrP0YX3yMr7Wzqg/Fbx42D0fv97fUj+/749+1rNEQjd/AcN7or0eUMPVM5urh/mDfQ9maEpv3hNLneQu/twV8uasHt+82TOvb+g/3efUZDvqKjEWPNopwj/GXb4cxPsucXwPKw1DToR5WemhKSX4uZtpDYnOWu4VKLj5BApdHSu7R2hJmSOxKHaoa7td2uR/WG7V/WgsC1G91ru+bZtUbD6dltO6i3DyKzQ3ECscvojOhcWnJ3tPkaIE5DATQGbq5ZppROGF9EjJBElT4dq0PAqIApU/LseIJsX2s2Ci43fDUjtWRpw+JVGpUhk/f0nrdnEnhZkmslSR4DJksCWrc1rYXitZCqFSu0zmTiVNeoSiFTys61yIauH9QsQdJlAhqolbI4S6C6XCzzxlhi93VNhEVuHV9P88P2aVmn/w4dUD4x0Q5C19IBNUX44G7xD4V8XnBwXPAhfDuLiT5Xqp2SE7xDUv71myWaHgVFVEUHyIXnqaEU1TotqEgUrwkueF7c1krE1bFvHcaxQtVVNVuvs3wAdS1vXIVXmuPULNu1JoAzJUxvU/YK1CqiWGfdAgXwk+SFvQwxkws6kUhCqhhTyZdnXPsTEPra7yumb899U5RSqtZJ2MqPbN1EPVk04i9fNTjE2k+ZR+qzYTz+PbEPYh3lUXWqW18SOtcrfQO8fcILzFRYorSL8ePgHwX4KHnZWDS5wCIVoZ4zCZ//qWhRahoIY5ZR2Y+M3HAslDlO+baE8LfTH2FyLS4eZ+TfX2cmySmAQT3pBMnj6zs21EeAzo/Edp/0VG+DS08Jbdu+DPyd3tZ3eut1ol7RlBK61h/mPy1HfTrleOsX</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_029_DTCreate_retailer_ACCOUNT.STATUS_of_'pending'" searchProperties="true" id="0fc6fe70-549d-4a44-8eee-91e1056d1b70"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b182fb4f-0cab-4295-a030-472a30c656e2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="32d2d7df-2cb8-4c82-9fa6-eea6f53b53a3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="a70dc933-f385-4e91-adb1-4ed1a101c069"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="c38ff450-37b8-401d-9579-4fb074ca040d"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="fa8df183-79e8-48af-9bfc-9af210022005">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="911a1884-56b1-44f2-8d1c-324d5ff583b6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="061a7449-5529-4580-93b0-752ab17bda66">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT_STATUS ==pending" id="0adf612c-e532-416a-8e9e-82e8b549d1ea">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acctoid = tC.getPropertyValue("ACCOUNT_OID");

try {
	a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	assert a.accountSetStatus(acctoid,"pending") == 1;
}
catch(Throwable e) {
	log.info "Error - dbUtils.dbAccount - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="a9b3b313-b5ca-4e02-afe5-eb51165dd6cf">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>0A7D863AC57E6890E05307991F0A32EA</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>0A7D7905609820A6E05305991F0A3749</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418904955920@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0A7D7905609720A6E05305991F0A3749</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0A7D7905609720A6E05305991F0A3749</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0A7D863AC57D6890E05307991F0A32EA</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0A7D863AC57D6890E05307991F0A32EA</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418904957410</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_2b79a91f-6fcb-4479-b10c-71d9cf1a3c57</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynlMGV+wAbsCVSYkizMhN0iY5GVLyA1oYktgyUDy9SsZcDC5LLtPLrVb3ae7j450xlES237AOaSCMFpZJzHlfm5taVlKfYY44T5FCXBfYH8Q9K99u2r6aLdFq4Tdlva3W7M8L6o3dMtzPd2JcKSPnQjpXt1z6njiWZ5tSVfOMwgpF4iKlmablqNbtm41h5btW47vutWG03zRKk+QchlbulRNbQtqzVvaTIi5bxir1aq6qlVZOjVs07SM3/3rAZ5BgrT22aaiPFHa3vrjagQY4hhXMUuMM6PkcxZxf0CmFIkshW2u6LtcpmF6hvSJOJmeaMVeiEI6YfnyHFFGCUYxeUeqP30QMxZVgnjKUiJmybdFWKYKrMMa69hy6IlmlKEdGaiEMOVI5zNkbWM9wARSoBgqjw9hSzs5bmr51mGKKJ+wNOHl5X/DA3QJMZtDpPNdWVtoxwf8olPtM8B+SHGccbKEG0XWOcLAt9MEfHyoyl0KE7K+JlwSdM0VOmMf3sFy040umQIX/2dAe8PZBHlCcQbt09XiZdRFRudqJL1rmdH8VVu7/QuUhq0cwL5zbihGu1kekLIg0WbHZa8HgxdrOWbk7eo+qIe9P/bv8V83a/x4Pl9Zj53TmhctFmzI1+TuVczptE7N1fU7Hb4lvfseaTzN7NHgFWynOUIvYZjE3d6pc/7+ip9p5x0NrDgY9xC4wfTN6Ly6i+m90W+iVZhdBWNW6y1n9yswgpH3vB55aT2bBM8jI8brlyjpvd89dpbXt158wZ2kA/1WUc4e/rJtd+YH2fgPYLFbKhqE3cqlnBISP4uZspBIn+Su/lyJDxdAhdZWu5R2+JmUOxL5coabtRk0us16LTh3G9160zMvTLdmNjzPujSDmn0R7ERmg+IA4jmjE6JyKcnd0OZngDjxOdAIUn3JMql0XPshYhcJVAnpgzwEjHIYMinP4zFirjNxUmZRKyU1yx5PxMxzpCbfMHFLb9NgIiAta7Jb0uQHwGROQAm34jWXxOZC9mKBlpmIreoSVSlkUtpTpbK+5IZrcJLMY1BIjYRFWQzV+Wyed8bgm6+tI8xz68PFMD9t39Z1+G/XAukTEeXAVS0dkGOELy4XZ1fI9wU39wvehQ+yiKiDJfspUoI3SMq/Pmii+FFwRFa0g1x4HhpKUY3DgopE0ZLggujFdS1VXJ779m4cC1RdVLPlMssH0FD6lsrwUnQs1zBtYwA4k8r0NmSvQI0iinHUNVAAP0he2MsQMzGjA4EEJJIxlXx5xL0/AK7u/VBSfX3so6KUUrZOwFp8ZTuP5ZtFIf7xWYN9rPyk+U5+ViyNPib2Ray9PLJOee0LQqdqpa6At294gZkMS6R4sXQ/+FcBvkpeNhZNLrAISahxJuD7PxWlSi0NYcwyKsKulhv2lTLHKd7m4H84fQqTi3HxOiP//jzTSU4BDPJNx0keX12yvjoCdLqnttukh4Lb8Ey3bnoN2wzqueC6W8FtOF7RlBK69ifzZ8tenw453v4H</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_032_DTCreate_retailer_ACCOUNT.STATUS_of_'mergedeleted'" searchProperties="true" id="a3b925f9-4665-42d6-874d-e0960ea85d08"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2e36cdfd-9b02-435e-84f3-90b3cfdd39c6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="28c19df6-4fa4-4774-8b7a-e5c8aaef26b4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="0ed42fa2-07aa-464b-9fb6-00121849baa4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="86f9dde4-47e4-4523-904a-74f34f49411d"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="c615a152-7c4c-4074-b80c-a4433135db4d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="27f0b9fc-8cbf-4a20-86f0-b715f4ea49da">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="4ecceb72-4337-4ebb-ac72-b7872e3ad05e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT_STATUS ==mergedeleted" id="43206140-de29-4c59-acdf-20f6d00ec3a0">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acctoid = tC.getPropertyValue("ACCOUNT_OID");

try {
	a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	assert a.accountSetStatus(acctoid,"mergedeleted") == 1;
}
catch(Throwable e) {
	log.info "Error - dbUtils.dbAccount - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="2cac0e65-0634-4fe8-8903-d5a038a0576e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>0A7D89D5072467E6E05307991F0AA49A</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>0A7D793B070620ADE05305991F0AD7F0</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418905013949@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0A7D793B070520ADE05305991F0AD7F0</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0A7D793B070520ADE05305991F0AD7F0</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0A7D89D5072367E6E05307991F0AA49A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0A7D89D5072367E6E05307991F0AA49A</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418905015467</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_9b5f6c17-cb7a-43de-b862-b64f8225b2d6</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvO4ZXwBY3AFqjwhyTgDEy+QFDsvW4rcNmJsGSSZy3z9SgY8mEmy7D651G51n+4+OtINR1lqez7nwATJaWOXpZR7pbWvFYx6OeKEexRlwD2Bvak/Hnl20/TQaYvWCIZ97W/T7UV2jEy9hWJbb786Hf01tno6xh1wup24Cy0sXTkvIKBcICr6mm1abd2ydas7s2zPcjyn1eza7e9a4wUYl7GlS9PUjqB2vK8thFh5hrHdbpvbVjNniWGbpmXMx6MpXkCGtMHNoaIyERsc/XEzAgxpips4z4wbo+ZzE3FvShKKRMHgmCt6L5dpmD1D+kScJJ+0ai9EAY3zcnmLaE4JRin5iVR/xiAWedTw0yRnRCyyd4uwTBVYhx3WsdWmnzSjDu3KQDWEjCOdL5B1jDWBGBhQDI3nSdDXPl03tXLrjCHK45xlvL78b3iAbiDNVxDp/FTWEdr1Ad/o1OAGsBdQnBacbOCbIusKYeDHaQK+PlQjZBCT3YhwSdAdV+iMc3gXy0M3hiQBLv7PgM6GcwjygtICBsbj6Of9cj/a5MWX76vCZU+z6cs06IZ53i8BnDuXhmq0h+UFKSsSHXY8G1nodLps8829CyezBz948tkPIboP4M/C2z/DvRt+6eySiYt7Wc7Xj+tx5Eadu3C5a41HyehuOW4ZQUT/mM6Tx+XuOZhHz9+tnj//En7utdvGLdu1X4tw4rS+TlZDYztF6CGe/4UeOmwWLqfz9fp1nM3Cx/XL3v/jx9dkEm678+XED61hsYGvyc/uyz6Nt06UHsu9wF+3nc78tHhdAhanpaJBMGzcyykh8bGYKQuJ9Lh09VZKfLgAKrSB2qW0wyuk3JHIkzM8rE3fHXZ7Q8d07VbHvevcmU5LnqaedW/6frvnn0TmgOIC4m1OY6JyKck90OZjgDjzONAImC4ZIZWOax9EHCKBGgGdyEOQUw6zXMqz1cFpsl+4+2W0KCwULbjl7mEnWnut8S0XT/SJ+bEAVhdlpybKE8BkRUAptyI2l8zmQjZjjTaFSK3mBjUpFFLbmZJZz253HYOTbJWCgmpkeVSk0FwtVmVrDH742jrCvLRO7mblcXu3sMt/px5In4goB65q+QxyjvDG7dI+FfJ+wd3zgk/h/SIi6mTJhgpG8AFJ/dcvniiCVCSRFZ0gV56XhlpU47KgKlG0IbhienVfSxmXB39wGscaNdfNYrMpygG4SuCYDC9Vx3IM0zamgAspTftZ/gOoUUUxrroHKuAXySt7HWIhFnQqkIBMMqZRLq+4+KfA1cUfSK7vrn1V1FLK1gnJ67dst6l8tCjEH75rsIeVnzSH8rPNWfRrYm/EOssj65T3viA0USt1B+zf4QXOZVgi1Stn58HfCvBW8rqxanKFRUhCvRYC3v/TULLU1xDGeUFFMNRKw7lUljjFfgXeL6ffwpRqXD3PyL+/z3RSUgCDfNRxUsZXt6ynjgBNzuT2mPRScd1e67Ppmo5t+sNScZ2D4g7de7NqSg3d4Dfz75azPl1yfPAP</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_033_DTGET_retailer_NODE_USER_SAML_ASSERTION.STATUS_mergedeleted" searchProperties="true" id="461ed72c-25ff-4109-af8b-33dac11b504e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6c344a27-29b0-4312-9837-a05b56e11432"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
tC.setPropertyValue("expectErrTypeSTSGET", null);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="346ab110-7fe3-4b1f-8d58-6ef287e16a0b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="9c5b0fc3-f25c-448c-b160-94bf7d03f6f2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="1a89f9a1-5ceb-444a-aa96-a5f24d543643"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="972b7f99-7da4-4c48-82b1-61524c27c9f8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="2e5da8fe-822f-466c-814f-b68a4602a1e4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="64c17e78-5886-4828-9c73-4d8ed0a6ca8f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="3b37da0b-8898-4bd3-a30a-f92dba72175c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set NODE_USER_SAML_ASSERTION.STATUS to mergedeleted" id="f6b351c3-a439-4067-8fb6-f2c4100cd065">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try  {
	dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
	assert 1 == 2;
}
finally {
	assert dbUtils.samlSetStatus(tC.getPropertyValue("assertionUUID").toString(),"mergedeleted") == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator1" id="3216fab0-e29e-4821-9075-87aed5af3e9a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>0A7D793AF4CF20AAE05305991F0AC126</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>0A7D8A4BC8A24B8FE05305991F0AFC70</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418905071614@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0A7D8A4BC8A14B8FE05305991F0AFC70</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0A7D8A4BC8A14B8FE05305991F0AFC70</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0A7D793AF4CE20AAE05305991F0AC126</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0A7D793AF4CE20AAE05305991F0AC126</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418905074148</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_ced444e7-0513-486e-a25c-7c5e65cce03a</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynmcMpaNzcUVqHIwBDLkMphks/OyJeQGNDEysWRw+PqRDHgwuSy7Ty61W6dPX3SkS46XkeV6nEMiaMwq2TJi3M2tbS1NmBtjTrnL8BK4K4gbeLcj16oiFx+2aJWh39b+IRDatg0NHTlmTbebddCx5RC9QRyoO4QAqmHpynkKQ8YFZqKtWci0ddPSzebEtFyz4SK76tjmT63yBAmX2NKlirQ9qYy3tYUQK9cwNptNdVOrxsncsBAyjefbUUAWsMRa53KXUR4o6ez9STUEAlFEqiReGpdGyecy5G5A5wyLNIF9rPCzWMhALUP6hJzOL7RiL4RDNovzZRezmFGCI7rFqj63IBZxWPGieZxQsVh+moSJFLAOGdGJabMLzShTOxOoxDDhWOcLbO6xxjCDBBiByuN42NYuzutavnWSYMZncbLk5eV/4wNsDVG8glDnh7T21M4H/KBSnUsg7pCRKOV0DXdqWFeYAN93E8j5UJWHBGY0G1EuBzTjip1xTO9kuauGT+fAxf9p0FFzdiBPOEqhQ7amtUGb19b9bLEKr0eDwBu3ei/Xo79e2jmBY+fcULR2tzwZymKIdjvCb/wx8qfmL/oDx4ObweDX/U3YarUWFNhzbQjbyXM0n4223+ObbOAvgm1au8o867s3vf67P+69zHsP2aMfBMG3bVaLzCx5WG9ay9nt23jzY9D378DcjO788SN+xZOZgec+Wr7+zDh6EE+3OAzqd1s8mde9BQ/8l+234NGemM/1Db9ZzXqGM1g1srmDHq/nN32btIt0jviXbYczH6TTX0DEYanGYOhX+rJLWHwtZspCQ32Wu7orJT5cABNaR+1S2uGmUu5o6Moe7tbIa/iNVs3r292ehTyvh5waclots4+8rmnVDyKzY3FCsRuzGVWxlOTuxuZrgmTpcmAhJPo6TqXSce0LRB8LXBmysTwEMeMwidta2Gxhc0pM3WrZSLcJQvrUMqd63bQxIs0ZNhu2VrmLxT27T7yZgKSszk5JncdA6EqOithNOJcjzoWsyitepyIyq2tcZZBKkU+U3rqW3XQMTperCBRnYxmHaQTV1WKV18jgu6+lY8Jzaxd1e/1mDzW7PbPb8Os9ZCNV17y+FrrKD+Wn6Z/+O1RK+oRUOXCV6BXIbsO7O6juOocs31XD+fCuOsB7aUjV+ZNlFwklOyblX3+mSY1RMUrj3uRAufA8NZRQjdOEikDhmpLiPBS3uhR7KQ+dQ69ecfW1mq7Xad6dhpLBRMIbKkUDWUYAJJUC9jaJX4AZBYpx1m1RED8JXtjLFFOxYIHAApZynCr58oznQQBcPQ+G8kRk5749SiFl6QRk4iNbN5JPG8X4y9cPcYnyk+YH+dnESfinYx9gHcWRecrXgaBsrlbqpnj7ZC5ILGGp1Lg4OQb/COCj4GVjUeSCi5ADNU0FfP6nosSrrWFC4pSJoa/lhmNBzXmKtxW4f5zeweSaXTzi6L+/4nSajwAB+fTjNMdXd7GrjgCbH4nyPuipLjc9+6rb9Ez7qtk/1uV+t4GKopTYdd6Z31uO6nQ6453f</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectErrTypeSTSGET</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3b37da0b-8898-4bd3-a30a-f92dba72175c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_034_DTGET_retailer_NODE_USER_SAML_ASSERTION.STATUS_deleted" searchProperties="true" id="1bacfda3-6bbe-49ef-bec7-ede7ff035923"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="69c05a39-a043-4c97-a2ca-54baec411ad7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGET", null);
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="8a663d42-67b1-4945-85e7-4e6044ee6482"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="10ef5f9f-faa3-47b6-9127-82bd98d67b39"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="66473a83-7295-48c5-985f-2c9713465b61"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="96ae4eae-4cf9-4333-86cc-52f5d3ad46a8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="8d2d61bd-0829-45f8-b201-94abd864cf06">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="0c6d304b-b2f9-4ed8-b295-3357a30c081e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="195fc64a-c109-42a4-b80f-b21006139ae5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set NODE_USER_SAML_ASSERTION.STATUS to deleted" id="88f43aef-62a0-4993-a5ea-9e88b5a67a71">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try  {
	dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
	assert 1 == 2;
}
finally {
	assert dbUtils.samlSetStatus(tC.getPropertyValue("assertionUUID").toString(),"deleted") == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator1" id="9cb621f6-af85-41c3-940d-169bbdcd3736">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("expectErrTypeSTSGET", "unauthorized");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>0A7D7904ABA1209EE05305991F0A439B</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>0A7D863B17294B7EE05305991F0AE20A</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418905135153@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0A7D863B17284B7EE05305991F0AE20A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0A7D863B17284B7EE05305991F0AE20A</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0A7D7904ABA0209EE05305991F0A439B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0A7D7904ABA0209EE05305991F0A439B</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418905136853</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_fe287c3f-d70d-408e-86b5-1d69165a2027</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FP4rTPdz6YUWaEeYKYKKB9QBt3p8ORPTBQTbpDZpAX/9TgpUipfDOU+drK5861uXfMkZR3Fk+wHnkArCaG0dR5T7hbWjZSn1GeKE+xTFwH2B/WkwHvl23fTRfotWG/Y72j82Dpuegxt6qwGm7rjQ1FFogd5yLRd7FnLt5ot05TyDIeUCUdHRbNNydMvWrfa9ZftWy3edettynrXaA6RcYkuXuqntSK15R1sIkfiGsVqt6qtGnaVzwzZNy3gaj6Z4ATHSumfbjIpAaXfnj+shYIgiXMcsNs6Mis9ZyP0pmVMkshR2scLvYpmG6RnSJ+Rk/ksr90I4pDNWLM8RZZRgFJF3pOozBrFgYS2I5iwlYhF/m4RlKmAd1ljHlkN/aUaV2olAFYYpRzpfIGuHNYEZpEAx1H5Phh3t12ldK7bep4jyGUtjXl3+Nz5Ac4hYAqHO92ntqJ0O+EWlumeA/SHFUcZJDjdqWBOEge+6Cfh0qNpdCjOyHhEuB3TNFTvjkN7RcluNPpkDF/+nQQfN2YI8oCiD7mwZtu+erq5CNu2/T5Y3LZeucOLRxd2gUxA4dC4MZWu3y6OhLIdou4PGs+z6+TUZp73z90lj6t2+/P1q526PXjfOF9S6mo1G6WXKHtpPazt4cNePCEfXweD3YnVJHc6vbqzn55G53DyLceiJ/nh1ffFuPi8fh/FDcps1xYQNs3jIEuJNcuPSmIbmtZm1aXCzWeXvSXOx/Ot6fP66tkzxSK9eg7w5eGoLdtFqj9aWPfKuNk/37+PpcoGcTpnOAf+qbX/mp9nLErDYL9UYDPu1C9klJH4WM2UhoT4rXP1EiQ8XQIXWVbuUdviZlDsS+rKH27UZtPotz3SCXmDapjcYmG7DdD3PujADp+H19iKzZXFE8ZzRGVGxlORux+Zngjj2OdAQUj1nmVQ6rv2A2EcC1YZ0Ig8BoxzumZRnSKyVYKtWvmkKK3SWXhTNEszTpVa7YeKW3qbBTEBa1WS3oskTwCQhoIRbzTWXg82FrMUbyjMRWfUc1SlkUtpTpbK+7bRdg5M4iUAxNWIWZhHUk0VSVMbg26+tI8wL62RwX5y2b/M6/rcvgfQJiXLgKpceyDbCF5eLs0/k+4Tbhwnv4YMsJOpgyXqKlOAtk+qvjzFR81HOiMxoT7n0PDZUUI3jhMpAYU5wOejldS1VXJ777r4db6j+Vs/yPCsa0FL6lkp4KTqWa5i2MQWcSWXa3LNXoEaJYpx0DZTEj4KX9irFTCzoVCABsZyYWrE84d6fAlf3/lCO+vrUR0UlpCydgLX4ynYeyTeLYvzjswb7WPlJ8538rFgafnTsC6yDODJPee0LQudqpa6AzTdzgZmEJVK8WHoI/hXAV8GrxrLIJRchB+olE/D9n5pSpY6GMGYZFcO+VhgOlbLgKTYJ+B9On2AKMS5fZ+Tfn2c6KUYAg3zTcVLgq0vWV0eAzg/Udhf0WHDbzUbPatltp9eqCO7ANoOyKBV23U/mz5aDOh3PePcP</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectErrTypeSTSGET</con:name><con:value>unauthorized</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3b37da0b-8898-4bd3-a30a-f92dba72175c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_035_DTGET_retailer_Assertion_Expired" searchProperties="true" id="6d9924b3-bd9c-464f-8262-348e0c988c15"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="27e30f9f-5c17-4f06-9dab-3b9bc7bfaff7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);
tC.setPropertyValue("expectErrTypeSTSGET", null);
tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="07b3218c-0fcf-424e-a37f-177d4e78e671"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="902fc7e1-cff8-4328-8d9e-ff2fe90e85b8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="9382df58-ca9b-42b1-825a-cbb4a549845d"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="a78636c1-0d2e-4286-99d5-c6cc9e06d067">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="ce1b0a2c-57a8-4ee2-910d-62a91c4737d3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="e6576f1c-124a-44d6-a9f3-3f85b95dadd1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="e794390e-d887-41cd-89f6-b7dbc0dbc06b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Expire Assertion" id="e21f6364-5d66-4af2-84e4-c994960a5847">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try  {
	dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
	assert 1 == 2;
}
finally {
	assert dbUtils.samlSetExpire(tC.getPropertyValue("assertionUUID").toString(),-13,"months") == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator1" id="6bef48ca-75a2-4700-8d32-826ad9205988">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("expectErrTypeSTSGET", "unauthorized");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>0A7D7903C7C42098E05305991F0AAF8F</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>0A7D56C8CCC344A3E05307991F0A1ED3</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418905196628@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0A7D56C8CCC244A3E05307991F0A1ED3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0A7D56C8CCC244A3E05307991F0A1ED3</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0A7D7903C7C32098E05305991F0AAF8F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0A7D7903C7C32098E05305991F0AAF8F</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418905198172</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_3138f1ec-b3a0-47ac-89be-5be84695b04b</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc9o6EP4rjPvIGF+42Z7ADIHSUiApl6ZNXs4IaQEVWwZJJoRfX8mAg2mSwzlPHq1Xu9/ufvqkG4Gi0A1aQgCXNGaFXRQyEaTWhpFwFsRIUBEwFIEIJA4mreEgcEt2gE5bjEKv0zD+8WpzzyfYNmuk6psVUp6Zvj8rmzBDlTrx7XIN+8pViAR6TEjEZMNwbadiOq7peFPHDRwvqNZK9arzZBQegAsVW7mUbOMIaicaxlLKdWBZz8/PpedyKeYLy7Vtx/o1HEzwEiJkNG8OFaWJePPoj0sEMIQhLuE4sm6snM8NEcGELhiSCYdjLvJeLtuyfUv5EEEXn4xsL5Aem8fpso1YzChGId0j3Z8hyGVMCq1wEXMql9G7RTi2DmzCDpvYqbBPhpWHdmWgHEIukCmWyDnGGsMcODAMhR/jXsP4dN3U0q1TjpiYxzwS+eV/wwNsC2G8BmKKU1lHaNcHfKNTzRvAQY/hMBF0C3earGuEQRynCfj6UIXvHOZ0N6BCEXQnNDrrHN7F8tCNDl2AkP9nQGfDOQR5QGECzXaxhsMoqe1/Ol49enB3g/1+7w3HpD9qpADOnVNDNtrD8oKUGYkOO8buS21F+9Nij9zFvV3L+ZZ0il9XbP7jdzxZVUJJeL3v/vT3q/Ho8ZfsDAaPxNv395vlYMMZTeJRv1am3dXDj6finbzvVjtfEr/2MijeTtnzfPLTR49P89WXW7oMW97TyJ1aj7eLmm+73WqbT76Ou6PN0C9W2kMGu6e+Ra3F48NjtzgcjcZ1D9W+vYz3vSc+v5uRYSMr5wx/3nY685Nk9huwPC01DXqdQldNCcmPxUxbKDHnqWuw1uIjJDBpNPUurR1BouSOkkDN8LC2W/VOXR2Qdr1ddm3f+2xXy3bV952u3Wp1ve5JZA4oLiC2YzanOpeW3ANtPgaIo0AAI8DNbZwopRPGBxE7SKJCj43VIYiZgGms5Nnni/Vma5MlrKhDVj4Qz47LLp4ZhbtY3rN73ppL4HlNruY0eQyYrilo4da8ForYQqpebNA2kaFT2qISg0RJO9cqG7gVr2oJGq1D0EitKCZJCKX1cp12xhKHr2siLFLr+PM0PW3v1nX579QC5UOodhC6lltQY4Q3LpfKqZD3C/bOCz6FbyWE6oOl+ik5xQck+V+vNNH8yDiiKjpBzjwvDbmo1mVBWSKypTgjenZdKxVX5755GscGlTalZLtN0gHUtb5xFV6JjlO1bNeaAE6UMr1M4xUwK4tiXXUNZMAvkmf2PMRELtlEIgmRYkwhXV5x709A6Hu/p6i+u/ZRkUupWidhJ9+ytUP1ZtGIP3zW4ABrP2X+rj7PMSevE3sj1lkeVae69iVlC73SV8DLO7zAsQpLlXjF/Dz4WwHeSp43Zk3OsEhFqFki4f0/Ba1KDQNhHCdM9jpGajhXyhSnfFlD8Or0V5hUjLPXGf3355lJUwpgUG86QdP4+pIN9BFgizO1PSa9FNxqre212223UmmVU8GtHwTX+dwpZ03JoWv+Zf7bctanS443/wA=</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectErrTypeSTSGET</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">unauthorized</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3b37da0b-8898-4bd3-a30a-f92dba72175c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_036_DTGET_retailer_Cannot_get_token_created_by_nonaffiliated_llasp" searchProperties="true" id="491c0405-b3c5-4a73-abd3-36dec33b8514"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9e91edef-72a3-47b2-97a1-d4b7d58554d7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);
tC.setPropertyValue("expectErrTypeSTSGET", null);
tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdLLASP"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveLLASP"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="6f244f67-e9c7-459f-b266-8157a987c615"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="335aef20-329e-47fc-ad09-e16fff2cda7c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="944439cc-ebbf-4701-b4bf-38432dd622ee"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="d9efc1ab-e290-49a7-af19-16924d5e21bc">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="b2f36827-16f9-4cb3-b34a-e96920b7c287">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="e1a85777-2127-4195-944a-e5fb1c7d0ebf">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="fcf3590d-a4ad-48aa-b3b5-8633a7ec2869">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator1" id="5ac69a9a-7b6c-4a4f-9a46-20ff2b7b67a4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("expectErrTypeSTSGET", "token_rejected");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>0A7D7904F15220A0E05305991F0A8425</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>0A7D793E00352096E05305991F0ADC7A</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418905257931@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0A7D793E00342096E05305991F0ADC7A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0A7D793E00342096E05305991F0ADC7A</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0A7D7904F15120A0E05305991F0A8425</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0A7D7904F15120A0E05305991F0A8425</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418905259440</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_25d87aff-a1f1-44da-9c5d-ce9de7772286</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbkto4EP0VynncMr5gA3YNVDkD7JLAJMNlhszLlpDboMGWPZIMJF+/kgEHM5dl9wnUbp0+fdGRbjhKYtsPOAcmSEpr+ySm3C+sHS1n1E8RJ9ynKAHuC+xPg/HIt+umj05btNqw19H+bkaW59pNV28ucVt3cAvrbQtM+S8KbRy52DOX0pXzHIaUC0RFR7NNy9EtW7faM8v2Lc9323XPazxptQdgXGJLl7qpHUnteUdbC5H5hrHb7eq7Rj1lK8M2TctYjEdTvIYEad2bQ0ZFINY9+uN6CBjiGNdxmhg3RsXnJuT+lKwoEjmDY6zwvVimYXqG9Ak5WX3Syr0QDmmUFstbRFNKMIrJL6TqMwaxTsNaEK9SRsQ6eTcJy1TAOuyxji2HftKMKrUrgSoMGUc6XyPriDWBCBhQDLX5ZNjRPl3XtWLrjCHKo5QlvLr8b3yAbiFOMwh1fkrrSO16wDcq1b0B7A8pjnNOtnCnhjVDGPixm4Cvh6p9ZxCR/YhwOaB7rtgZ5/Qulodq9MgKuPg/DTprzgHkAcU5dP9sMMGHA+cOrKyf8IY9/zKJs/W4Mdp0CgLnzoWhbO1heTGU5RAddiwbM3bfi8dD9zN+NIarWfBj821xG43Irjl6am9waH9xAmczbc/C6PnOjXk0vrs34x/edHGfTnbPo83nBV0YbUDpPPkKbPPSm88FMvstp73KDasvnn59dfbtJ3f5df7X469Wy+kLgfrPoj+ZNOcPdm9socGM/nE/C8c/WrtB1ljfPi5aqwUyviyDe2JtJ/fTgcV3nTKdM/5V2+nMT/PlM2BxWqoxGPZqA9klJD4WM2UhoR4Vrn6mxIcLoELrql1KO/xcyh0JfdnDw9oMWr2WZzoDy7VsMzD7ptswXc+zBmbQdmz3JDIHFhcUb1MaERVLSe5hbD4miBOfAw2B6ds0l0rHtQ8Qe0ig2pBO5CFIKYdZquQ52aaJw1km3ferfZNiz2HrF0+r3aXiG/3GgkgAq0qyW5HkCWCSEVC6rcaay7nmQpbiBW1zEVv1LapTyKWyMyWyvu20XYOTJItBETWSNMxjqGfrrCiMwQ+/to4wL6yjUTD9Xhy3dxO7/HaqgfQJiXLgKpvPIPsIb9wuzimV91Nun6d8gg/ykKiTJQsqGMEHJtVPv+dEDUg5JEVOJ9Kl76WhgmtcplSGCrcEl7Ne3thSyOXR755a8oLqL/V8u82LJrSUxDEJL3XHcg3TNqaAcylOP2fpBqhRohhX3QQl8Yvgpb1KMRdrOhVIQCKnplYsr7j6p8DV1T+U076/9l1RCSlLJ2Av3rLdxvLZohh/+LLBPlZ+0vxd/uxSFv7u2BtYZ3FknvLmF4Su1ErdAj/fmQycSlgi9Stl5+BvAbwVvGosi1xyEXKglrmA97/UlDB1NIRxmlMx7GmF4VwsC57iZwb+b6dXMIUelw808u8vNJ0UI4BBPus4KfDVPeurI0BXZ4J7DPpacxt902w4tuk1zzW3d9sKyqJU2HVfmV9bzup0OePdfwA=</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>87648</con:value></con:property><con:property><con:name>expectErrTypeSTSGET</con:name><con:value>token_rejected</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3b37da0b-8898-4bd3-a30a-f92dba72175c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_037_DTGET_retailer_Cannot_get_token_created_by_nonaffilaited_dlasp" searchProperties="true" id="9676ccc5-d0d6-40cd-90ef-eb44f804395c"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="8ba8177d-2927-4cfb-afb6-df83b30dce67"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);
tC.setPropertyValue("expectErrTypeSTSGET", null);
tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdDLASP"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGET", null);

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="a6b604d0-1c2e-491c-8ed3-a4d9563155a5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="ead231bd-a1b7-4b7f-b17c-63179db69142"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="bf11b413-4b80-4ae0-85ee-09d53b9ae94c"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="dae8f8f5-1d06-4890-911d-d664b43ebd1c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="e088fa9c-c32c-42f2-b95c-853803c6973b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="b1c1bb37-9454-4ca2-8e3d-32ec005a5b91">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="e827d25c-36f4-4788-8964-ae0629de008b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator1" id="5b0e24ce-70cf-4f31-b719-716bd13f2c12">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("expectErrTypeSTSGET", "token_rejected");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>0A7D79050DEB20A4E05305991F0AE199</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>0A7D863B173D4B7EE05305991F0AE20A</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418905318247@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0A7D863B173C4B7EE05305991F0AE20A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0A7D863B173C4B7EE05305991F0AE20A</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0A7D79050DEA20A4E05305991F0AE199</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0A7D79050DEA20A4E05305991F0AE199</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418905319765</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_7cd71578-dee6-4da8-a9f9-61164fab562c</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtc6o4FP4rDvdjBwmI8jLVGSzeLrNae9W6t37ZSUPQtBCUBLT99ZugUrEv6+4Hx8nh5DnPecmTXDOYxIbrMYYzTlLa2CUxZW5p7Sp5Rt0UMsJcChPMXI7cqTcaukYTuPC4RWkEflf5G0BodizLVCPoYNVsR1C1W09tFTimZdmh0YlwJFwZy3FAGYeUdxUD6KaqG6puz3TDNYDbtpu67SyUxhxnTGALlyZQDqR2rKusOF+7mrbdbpvbVjPNlpoBgK79Hg2naIUTqPSu9xmVgbLewR81Q4xwHKMmShPtWqv5XIfMnZIlhTzP8CFW+FUsoAFHEz4hI8sfSrUXhwGN0nJ5A2lKCYIxeYOyPiPMV2nY8OJlmhG+Sr5MQgcSWMU7pCLdpD8UrU7tQqAaw4xBla2gfsCa4AhnmCLceJgEXeXHZV0rt84ySFmUZgmrL/8bH0wLHKdrHKrsmNaB2uWAn1Sqd42RG1AU54wU+E4O6xoizA7dxOhyqMZ9hiOyGxImBnTHJDvtlN7Zcl8Nnywx4/+nQSfN2YPMYZzjXtS6J9Z823eG5D55A1BjYNs2wIv5YHZLAqfOpaFq7X55NpTVEO13zL2Zc2sXd5tR9BjSYWI858zueMtFPLAWZrQaid9vzb8N/Inx6zaeOPlo/NvIf3pj89Fezt/6cd9fT4pxYemt4Z+Dm2DxNI7S279+3W46xXOwsVNjbu/CUb9PJs9vI7PT9iazhzuwK97+uB9fXQ3u7ALorc3icTJ+NF950Jn5+qIVLR7J/IrTl74fjh62/cEiWHardE74123HMz/Nn54x4selHIPAb/wUXYL8ezGTFhKqUenqrqX4MI4pV3pyl9QONxdyR0JX9HC/Bp7lWw5oA3/gGcAzB6DdAm3H0X8Cb6A7zlFk9izOKN6kNCIylpTc/dh8TxAlLsM0xJlapLlQOqZ8g+hDDhsBnYhDkFKGZ6mQZ73TAa/R8gUgor/o7IXEb6+JE1l8qzTuUj6m48yLOM7qotyuifIEI7ImWCq3HGwmJptxUYwNLHIe680CNinOhbZnUmZdw7TbGiPJOsaSqpakYR7j5nq1Lkujsf2/oULESqs/9Kb35YH7MrXzb8cqCJ+QSAcms+lj0Un8yf1iHlP5OmX7NOUjvJeHRJ4tUVKeEbRnUv/0PilyRKoxKXM6kq58zw01XO08pSpUWBBUTXt1ZwspF4e/d2zJBjY3zbwo8rIJlhS5TMAL5dHbGjC0KUa5kKfXWfqCqVahaBfdBRXxs+CVvU4x5ys65ZDjRExNo1xecPlPMZOXfyDmfXfpy6IWUpSO4x3/zHYTi4eLZPzt2wa5SPoJ873426ZZ+N6xT7BO4og8xd3PCV3KlbwHXr+YDJQKWCIULM1OwT8D+Cx43VgVueLCxUA95Rx//aUhpamrQITSnPLAV0rDqVyWPPnrGrvvTh9gSkWunmjk399oKilHAGHxsGOkxJc3rSuPAF2eSO4h6Lnq2p1WX7daN2bfGtRUV8hwVZQau94H80fLSZ3OZ7z3Dw==</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectErrTypeSTSGET</con:name><con:value>token_rejected</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3b37da0b-8898-4bd3-a30a-f92dba72175c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_038_DTGET_retailer_Cannot_get_token_created_by_nonaffiliated_retailer" searchProperties="true" id="97a37604-47d3-4f1a-9ea0-1ec0a19110eb"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="28f7bd82-6b55-4b15-8169-d1b7b0294dca"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);
tC.setPropertyValue("expectErrTypeSTSGET", null);
tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL2"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
tC.setPropertyValue("expectErrTypeSTSGET", null);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="a54ddfb4-de7a-4856-98cb-8d94d5fb8dbb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="2f629db1-1bdd-479c-a7ec-2eb52203f708"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="f0bc38eb-07cb-4c7d-82a9-8fd01957748b"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="38889d5b-6b89-43bb-9b2e-6f712a7ecea5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="fe9fd41e-29d8-47c1-8756-70190ff1ce50">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="dba464dc-8995-487c-b5f0-3903c6abf358">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="5ddea335-77f4-4a0b-80d8-bffb1f6e6260">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator1" id="c96dfcff-7bc2-4ef5-ba52-5d6b6a152f29">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("expectErrTypeSTSGET", "token_rejected");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>0A7D790465D2209CE05305991F0A087A</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>0A7D56C434692688E05305991F0A96F0</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418905375737@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0A7D56C434682688E05305991F0A96F0</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0A7D56C434682688E05305991F0A96F0</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0A7D790465D1209CE05305991F0A087A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0A7D790465D1209CE05305991F0A087A</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418905377187</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_a003c25e-5311-4ab2-874d-781803ca3090</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtc6o6EP4rDudjBwkURJnqjNW+cGx7Omq99/bLmRiCpIWEJkFtf/1JUKnYl+u9n5gsm91nd588yZmAWeoEfSEwl4TRxjpLqQhKa9coOA0YFEQEFGZYBBIFk/7tTeA0QQB3W4xGOOwavz3XngM090zcAa7pxlHH7DiRb8477ci17RjA6FS5ClHgkAoJqewaDrBd03ZMuz21ncCxA89rOqfuo9GYYS5UbOXSBMYW1Fp0jUTKPLCs1WrVXJ02GV9YDgC29fftzQQlOING72xTUZmI97b+qBlhhNMUNRHLrDOr5nMWiWBCFhTKguNtruirXMACHUv5RIIsfhjVXhyFNGblcgApowTBlLxB3Z9bLBMWNfrpgnEik+zLImygA5t4jUxku/SHYdWhHRmohpALaIoE2ttYYxxjjinCjYdx2DV+HDe1cuuUQypixjNRX/43PJguccpyHJliV9YW2vEBP+lU7wyjIKQoLQRZ4jtN1hwiLLbTxOj4UI17jmOyviFCEXQtNDprH97BctONIVlgIf/PgPaGswkyg2mBe9NZCq0VH18mYMrGYXTijfyRk/ObEeuWAPadS0M12s3ygJQViTY7inh2HoJrdiqekxuQ+63bi2S+vircyUu2tP95YSvwNsxEy50mnsd/LsD11fM8JG80dqKbsH+9XIxy+VSs8VC40cl1/vOv65E9s/tukl2vgE99dofg23PisYv4USzokCbu6JYUIwbu/J8pvweEXzxYV48n92E0uHyL+wV8vQovC4s+ITC/LWbJjA8ez6P5Q7cqZw9/3bY785Ni/oSR3C01DcJh41JNCcrvxUxbSGTGpWuQa/ERElNp9PQurR1BoeSORIGa4WYN+v7QV4em5Q1tB3QGF8A7BV6nY1+CPmj7/Z3IbFAcQBwwGhOdS0vuhjbfA0RZIDCNMDeXrFBKJ4xvIg6hhI2QjtUhYFTgKVPyjH1ie2+OD0DObLvF7RVv2S9p7BuNOyZ/0V+8H0vM65rs1TR5jBHJCdbCrXktFLGFVL14gctCpnZzCZsUF0rauVbZwHHbniVIlqdYI7UyFhUpbuZJXnbGEpuvY0IkSuv4YvrbKc/bl5Ud/ts1QflERDsIXc05VoPEn1wv7q6Ur0tu75e8C98vIqKPluqo5ARtkNR/vRNFM6RiSVnTDnTle2ioxbUOS6pSRUuCKrJXV7ZScnX2e7uRvMDmS7NYLotyCL7WOK7CK+GxPQs41gSjQqnT65Q9Y2pVUayjroIK+EHyyl6HWMiETiSUOFOsaZTLI+7+CRb67g8V3dfHPixqKVXrJF7Lz2yDVL1bNOJvnzYoQNpPme/VZ8V49D6xT2Lt5VF1qqtfErrQK30NvH7BDMRUWKIEjPH94J8F+Cx53Vg1ucIiFaHmhcRf/2loZeoaECFWUBkOjdKwr5YlTvma4+Dd6UOYUpCrFxr59yeaSUoKIKzedYKU8fVFG+gjQBd7irtNeii6XmvgnrqtttNqt/dFt9O6BFVTauh6H8wfLXt9OuR47w8=</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectErrTypeSTSGET</con:name><con:value>token_rejected</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3b37da0b-8898-4bd3-a30a-f92dba72175c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_039_DTGET_retailer_Cannot_get_token_created_by_nonaffiliated_accessportal" searchProperties="true" id="184d9176-fb2f-46a5-a36d-dbb7d769c153"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7cf36baa-fb8d-488d-80ed-1c6dba8fda85"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);
tC.setPropertyValue("expectErrTypeSTSGET", null);
tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="edefbcf1-e141-4b12-8885-2c8e539f0531"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="7f297eca-0a36-4f09-a722-e8007a1b83a1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="8fb509ad-9bee-4d68-9b61-09daf8863d82"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="ecd61735-a286-4c37-a5a9-a511b024b553">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="f42b0d18-a98b-4a57-acd6-73eb45b68dc2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="475425d5-1395-4ae6-853b-990d5cf3e3c2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="89bacb8d-7e25-48fb-8075-8cc326716b23">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator1" id="80e6cfa2-77d0-4b7d-bf2e-1ba1982befcf">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdAccportal"));
tC.setPropertyValue("expectErrTypeSTSGET", "token_rejected");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>0A7D790560C120A6E05305991F0A3749</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>0A7D863B174D4B7EE05305991F0AE20A</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418905436224@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0A7D863B174C4B7EE05305991F0AE20A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0A7D863B174C4B7EE05305991F0AE20A</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0A7D790560C020A6E05305991F0A3749</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0A7D790560C020A6E05305991F0A3749</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418905438088</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_4ac07907-4c2a-45d8-9bae-a54ea1e8f913</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynmcMr5gc3EFqsxthwmELDDZJC9bityAElsGSeaSr1/JgIMJZNl9cqnd6j7dfXSkW46i0PZ8zoEJEtPCJgop91JrXUsY9WLECfcoioB7Antjf9D37KLpocMWrdBr17W/yxZykF2y9FK1ZupONUB6DVtIR241sKumVa2YJenKeQI9ygWioq7ZpuXolq1b1Ylle7btueViqeS8aIVHYFzGli5FU9uD2vC6Nhdi4RnGer0urkvFmM0M2zQt42nQH+M5REhr3O4qShOxxt4fFwPAEIa4iOPIuDVyPrcB98ZkRpFIGOxzBZdymYZZM6RPwMnsRsv2QtCj0zhdthCNKcEoJB9I9WcAYh4HBT+cxYyIeXSxCMtUgXXYYB1bDr3RjDy0KwPlEDKOdD5H1j7WCKbAgGIo/B716trNdVNLt04Yonwas4jnl/8ND9AVhPECAp0fytpDuz7gmU41bgF7PYrDhJMV3CuyLhAGvp8m4OtDFR4YTMmmT7gk6IYrdMYxvJPlrhttMgMu/s+AjoazC/KIwgQaRuv5pW9Z6/FbB894sNw+vUIlbv013Jr1FMCxc2rIRrtbnpAyI9Fux8/y5geagP0ROoPVxE2mwWjeehp3O83u2Pi5eLfLE+cxohXRfWta1XD94Bqr9x+zio/cx4+O22OdieMPpv0/+NYa/rKmT3fz1uC+ioZu7G8+mEFGvUl/c+8yNPTbm1+z5/b9Nun278KXec8wX/5cvw5WlWWzNW0xJMbvpvVc/YCXtxdml38/+rJdD0/v63W0HN7xelbOEf687XDmx8nrG2BxWCoa9NqFrpwSEt+LmbKQQJ+mrt5CiQ8XQIXWULuUdniJlDsSeHKGu7XpV9qVmumWzZZpm365Y7ol063VrK7plypO7SAyOxQnEFsxnRKVS0nujjbfA8SRx4EGwPRVnEil49o3EdtIoEKPjuQhiCmHSSzlObSZs6rFDplbC+oiWinXeBTOQSvcx2JIh8yfCmB5SXZzkjwCTBYElG4rWnPJay5kK5ZolYjQKq5QkUIilZ0pkfVsp+oanESLEBRQI4qDJITiYr5IG2Pw3dfWEeapddSZpIftYlmn/w4dkD4BUQ5c1dIEOUU4c7c4h0IuF1w9LvgQ3k8Cos6VbKdgBO+Q5H99skTRI6OIrOgAOfM8NeSiGqcFZYmCFcEZz7PbWoq4PPaNwziWqLgsJqtVkg6gouSNyfBScyzXMG1jDDiRwrSdxO9AjSyKcdUtkAE/SZ7Z8xATMadjgQREkjGFdHnFtT8Grq79nmT65to3RS6lbJ2AjThna4XyyaIQf/uqwR5WftL8ID/rmAWfEzsT6yiPrFPe+oLQmVqpG2B7gRc4lmGJ1K6YHQc/F+Bc8rwxa3KGRUhCvSYCLv8pKFGqawjjOKGi19ZSw7FQpjjFdgHep9OXMKkWZ48z8u+vM52kFMBSdaR/Gl/dsZ46AnR2JLb7pKd6Wy2XmlbFaTnNSudYbztSgLOm5NA1vpi/Wo76dMrxxj8=</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectErrTypeSTSGET</con:name><con:value>token_rejected</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3b37da0b-8898-4bd3-a30a-f92dba72175c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:tearDownScript>if(context.expand( '${#Project#runTeardown}' )=='true')
	{
	log.info("Executing TearDown for Suite '" + testSuite.getName() + "'");
	
	for ( testCaseResult in runner.results )
	{
	   currentTestCaseName = testCaseResult.getTestCase().name;  
	   currentTestCase = testCaseResult.getTestCase(); 
	   log.info("Current TestCase : '"+ currentTestCaseName + "'");
	   log.info("Current TestCase Status : '" + testCaseResult.getStatus().toString() + "'");
	   
	   if ( testCaseResult.getStatus().toString() == 'FAILED' )
	   {
	      log.info("Re-executing failed TC");
	      def currentRunnerTC = currentTestCase.run(null, false);
	      log.info("Status on re-execution : '" + currentRunnerTC.status + "'");
	   }
	}
	log.info("Execution of TearDown for Suite '" + testSuite.getName() + "' Completed" );
}</con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="7_DTCreate_RTL_CS" id="7ba2747a-d003-4490-adb7-000be3a2dc11"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_001_DTCreate_retailer_After_15_minutes_of_user_CREATED_DATE" searchProperties="true" id="19b4cae7-c9f5-4ad9-8151-64820cb13c9a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="48f0ff93-bceb-481d-b3ac-3e16f12dc80e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTLCS"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="9911c189-84e7-49e2-a5fc-3a07f88941aa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="a7dc197d-0e7d-4056-95ed-d976d84a96e5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="28e0836b-4bca-41dc-a4a0-7de81315351e"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" disabled="true" id="408bb1ea-44d5-4e4a-b154-cb832b617a37">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" disabled="true" id="796b4ed2-4010-4930-b351-54a05e724e41">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" disabled="true" id="f6c47ae7-67a1-4f3e-a5dc-870e6e54cc3e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set User Created date" id="9e4154f0-8ab8-4d37-b17a-d25b5db5edb3"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand( '${#Project#targetSystem}' );
String useroid = tC.getPropertyValue("USER_OID");


a = new dbUtils.dbUtils(log,dbHost);

def time = "-16/1440";

log.info "time:"+time;
sql = """DECLARE
BEGIN
UPDATE ACCOUNT_USER set CREATED_DATE = sysdate """+ time +""" where USER_OID = hextoraw('""" + useroid +"""');
END;""";

a.dbConnExecuteUpdate(sql,dbHost);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="c2b0561a-f379-4b0e-a5f6-6bbc0fd092a6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B57D2A5D7E240DE05307991F0A7EB6</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B57D2AF7AE23FFE05307991F0A9F93</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418045908010@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B57D2AF7AD23FFE05307991F0A9F93</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B57D2AF7AD23FFE05307991F0A9F93</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B57D2A5D7D240DE05307991F0A7EB6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B57D2A5D7D240DE05307991F0A7EB6</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418045913935</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_eff0a7b3-4d55-4a2c-a7a2-3d7d7b776665</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b7106060-d3df-45da-a389-11c5bc92ba36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_002_DTCreate_retailer_Grant_for_active_full_user_without_ULC" searchProperties="true" id="927f9dc1-ee83-4725-ad5d-7266034914e6"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="fb28a103-2e0b-4212-bb0b-5b061287c54a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTLCS"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="6dac669d-1eaf-4423-9baa-6669969d673d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="1e6c926a-9c7b-415a-a89f-2abf384f4141"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="be93431d-8244-4e70-965d-92cd9f1dfd8b"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="cd7c27b5-9e8b-433d-bcd6-dae6cdd0e121">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="43775ca4-c230-4f89-a9d6-eb61e74a94ef">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="3ac06fc3-33d6-4be7-a289-5d10e8afed89">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="adf7e555-2259-4783-ad2a-f1f2d61eb2bd">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>09B586F830F520B6E05305991F0AE7E6</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>09B5853996AE441DE05307991F0AA610</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418045977912@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B5853996AD441DE05307991F0AA610</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B5853996AD441DE05307991F0AA610</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B586F830F420B6E05305991F0AE7E6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B586F830F420B6E05305991F0AE7E6</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418045980621</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_3e705fc7-56d6-413e-89bc-4854a5afc384</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMr5isCtQRQJJvENIBhMmyUtKkdugjS2DJYOZr1/JgAPksuw+udRudZ/uPjrSOUNJbHpdxiDjJKW1Iokp80prW8kz6qWIEeZRlADzOPaC7u3AM+u6h3ZblJrfaysvptXQjQaOVDdsGKrtAKhuy8WqGbr6q2s0wWjYwpWxHHzKOKK8rZi6YauGqeqtsWF5VsszWvVm03xWahPImIgtXOq6sgVVsLYy43zuadpqtaqvrHqaTTVT1w3t8XYQ4BkkSOmcbyoqE2WdrT+uh4AhjnEdp4l2rh34nIfMC8iUIp5nsM0VfpVL13RXEz4hI9MfSrUXQp9Gabm8RDSlBKOY/EGyP7fAZ2lY68bTNCN8lnxZhKHLwCoUWMWGTX8o2iG0EwMdIMwYUtkMGdtYI4ggA4qh9jDy28qP06ZWbh1niLIozRJ2uPxveIAuIU7nEKpsV9YW2ukBP+lU5xyw51Mc54wsYSjJOkcY2HaagE8PVbvPICLFgDBB0IJJdNo+vKPlphs9MgXG/8+A9oazCTJBcQ6d/JqM6O/5YriA1XNzYK3v5o9TnrzliLVLAPvOpaEa7WZ5RMqKRJsdfh6vfi9vNDO+/dU19F/uBPDkuRE1nhLykDrPjt2Kzrg1CoqpdW/0WWAbZy37oj8Ii2tr8HT5rI+fzpI/yV9m49kOntjdQ1DMZ5NBcu0GGn3L+25gPDaGyDEu/O5jkoQ36+VyWPz0I5T05u619uos1oiHk7uh1ixuIJqFfDW6MbJo4veG1n1yNnYy/+eN33pqV+Xs4T+07c58kL/+DZjvlpIGfq92JaaE+PdiJi0kVKPS1ZtL8WEcKFc6cpfUDi8XckdCT8xws9bdi0bLuWpZ+pVt6hdOX29YesN1jSu922/2nZ3IbFAcQbxMaURkLim5G9p8DxAnHgMaQqYu01woHVO+idhDHNV8OhKHIKUMxqmQ55aZRrpNHHNFrTRbTOE1Khz2tlZqw5Tf0busG3HIDiXZOZDkEWAyJyB1W9KaCV4zLlqxQMucx0Z9ieoUcqHsmRRZz7RbDY2RZB6DBKolaZjHUJ/P5mVjNLb5mirCrLSO+uOXy+ClPA3al7Ud/9u1QfiERDowWdAFiFHCJxeMvqvm66rd/ap34bt5SOThEj3lGcEbJIe/3qkiOVLxZFfWDnflfmw4CK0dV1VlC5cEV4yv7m0h50IAOrvBLFB9Uc+Xy7wcRVMKXSbCa0LvDC0AnAt9Wo/TN6BaFUI76TKoUB9lruyH+HI+owFHHBJBnFq5POH2D4DJ298XhC9OfVocpBR941Dwz2yXsXi5SMTfPm6wh6WfMN+LzyrNwvdxfRJrL4+oU1z+nNCpXMmLYP0FM3AqwhIhYWm2H/yzAJ8lPzRWTa6wcMGm15zD139qUpvaCsI4zSn3e0pp2NfLEidfz8F7d/oQppTk6o1G/v2RppKSAhjEy46RMr68aj3Jfzrd09xt0g+y27Bc1+n2bNvolbLb3Mhu1zH0qikH6DofzB8te3065njnHw==</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b7106060-d3df-45da-a389-11c5bc92ba36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_003_DTCreate_retailer_Grant_for_active_standard_user_without_ULC" searchProperties="true" id="0c51337b-3748-4cbf-a579-f96ecbd9f608"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0a6f1aa3-44fe-468d-9a71-3a8f1b5c3aeb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTLCS"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="1f290b96-ad22-4823-8c76-f55a266920a4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="032ba535-de53-4a1c-8f9f-f4a7464a2b96"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="96773a00-a675-4220-9dd5-436936df66f5"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User" id="e7fef4c9-faf8-419c-be76-4047e8309033">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="5efbbb1f-841d-4262-81a0-47a50aab3227">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="b5d5ce2b-2ab7-45be-b036-7e50d80cd5cf">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="56ec5a39-0397-465f-bcae-a138d86f1895">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set EmailId for Standard User" id="1e86bad6-f233-4a81-adfe-5bde376aaa62"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Standard User Create" id="2157e0ca-1138-4aae-aa27-26efcc2e967a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="e1ced512-7f50-41e3-b02d-135f7957929a"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="229a6058-764a-4ef4-9497-e1a5011f90fa">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="efa2e897-9fe0-4e4f-a953-5052639ac55a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create_Standard" id="11472464-25eb-4804-925b-190fd1932be6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for SecondUser" id="2237dbb6-3c76-4e7a-b274-894a3a18f47a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 1" id="d1d70412-cd88-493b-8835-f077539a5b31">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>09B58558A22C4437E05307991F0A2FEE</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>09B57D2AF7C123FFE05307991F0A9F93</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418046100980@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B57D2AF7C023FFE05307991F0A9F93</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B57D2AF7C023FFE05307991F0A9F93</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B58558A22B4437E05307991F0A2FEE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B58558A22B4437E05307991F0A2FEE</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418046101031</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_7aa61c5d-f4d2-4a31-b526-2a79b1d0d1d6</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_1342997f-75cb-43e5-8071-ac82e01055a9</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvNIGd/xpQJVXMKEJCQMZpjLy5SQ26CMkYklA8nXr2TAg5kky+6TS+3W6aPu1lFfMbRKzKDDGGScpLS2WyWUBYW1peQZDVLECAsoWgELOA7Czug+MBt6gI5blNqw31J+GZZt+r4bq66D56ptgaN6umuoCHsm6IbuOMgXrozlMKSMI8pbiqkbtmqYqu5NDSuw9cBsNlzP+6nUZpAxgS1cGrpyILVjLWXJ+TrQtO1229hajTRbaKauG9r30X2Il7BCSvtqf6IiUNY++ONGBBiSBDdwutKutIrPVcSCkCwo4nkGh1jRe7F0Tfc14RMxsviklHshGtI4LZY9RFNKMErIK5L5GQFfplGtkyzSjPDl6t1DGLoEVmGHVWzY9JOiValdCFRhmDGksiUyDlgTiCEDiqH2dTJsKZ8uq1qxdZohyuI0W7Hq8r/xAbqBJF1DpLLjsQ7ULgd8I1PtK8DBkOIkZ2QDD7JZ1wgDO1QT8OVQtXEGMdndEyYadMckO+2U3tlyn40+WQDj/6dAJ8XZg8xQkkOb3+T+vFeP8NgM7XVTGz6Z3u3NwNl99loFgVPnwlCWdr88a8qyifY7bhf1mzvfDLt1r6/9pCMadtKtdfv5uTPovT7HeKHls9nD5+bitf/zafXgoOF8k06ndXI/ub1pdkN//PDdS7CmzzzcTZuP7tj67YVfwnqzudxkg9cwGoXjDEfxbzK5MZ6e+z+2N/foO57ffRtN+uv14u7e7Vmr7K7+dfpYf5jNwB3fPd7yb0/IQaMvX3641zqZWj/6r4fjnvGv2o53PsznT4D5cSnbYNivDUSVEP9YzKSFRGpcuAZrKT6MA+VKW+6S2hHkQu5IFIga7te633U8x/E6ptm1bUsQdizd9X1joHfMwfX1UWT2LM4o9lIaExlLSu6+bT4miFcBAxpBpm7SXCgdUz5A7COOakM6EZcgpQymqZDRuWM4sYdVy4vFPY+blormtq66YESm2ZwbXhQrtYeUP9LHrBNzyKrq3Kyo8wQwWROQEi47nIkWZ1xk5Rltcp4YjQ1qUMiFyGdSbwPT9hyNkdU6AclZW6VRnkBjvVwXOdLY/msK1WGFtde7tu3OwDYHfVdvWt1r3dZlXov8um6zuJTvHv/83zFTwici0oHJg3ZBVBveeIOM4ynfz4Z/mo0jfCePiLx/Iu08I3jPpPrrTzfJNipbaXI9/dULfxlH3qX7uaECrZ2fqowWbQguL0X5tAvFFxrRPhbsGTWeG/lmkxclcqUWZgJeE5JoaCHgXEjYyzT9DVQrIbSL3ouS9Vnk0l7ll/MlDTnisBINVSuWFwwIITA5IAzFndhdOn1UQoq8cdjxt2y9RAw3kvGH8w8OsPQT5rH4bNMs+lOuN7BO4ohzivmAE7qQK/lWvLzTGTgVsESoXJqdgr8F8FbwqrFMcsmFi26a5xze/1OT8tVSEMZpTvmwrxSGU0ktePKXNQR/nP6CKVS7HOPIv89xKilaAIMY/hgp8OVrHMj+p4sTWT4EPVdmt292Bm5PN63B4FSZ/YFvlUmpsGv/Zf7bcpKn8x5v/wM=</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVbZcuo4EH3PV7icxynjhcXYBVQ5bHEChGFJJbzcErIMmrFlsGSWfP2VDHaAkAx3XqDUbnWf7j46Uo2CMDBsh1IUMxwRyW3V5V9FXbOgUTaUkqZ5SsmoaMrcgJ6i+dXy3PeRBc25LLmUJsgllAHC6rKh6UVF1xXdmGhVWy/bZbOgG8ZMll5RTHlo7lLQZGkXBoTaadq6nMTEjgDF1CYgRNRm0B47/Z7NPW2QYZIbtQPKNGHcWDK2slUVFjwEURDAAoxCtaae+dQ8ao/xggCWxOiY06N1+bh3u90WtsVCFC9UQ9M0VbNU7uNRvLiXG3fZZuS5xI8O6yYgEcEQBPgDCFB9xJaRJznBIooxW4bfhNZVXROhFbSDCtRL5F5WPxOk6G6MdAYypkChS6BnwUbIRzEiEEnTkVuX72+b4GHvJAaE+lEc0ov1n0FCZIOCaIU8hWaVZehuj3ilXY0agrZLYJBQvEEDQZMVgIhKwxj5eNfDlJPPo1I6fmlHM4Yh+CcjqamnODls9UpnWniBKPs/8zqd1SHKKwgS1HhcsPKHs0+eXsxZuTLo62+mBnrbznSt1VMIp84HUPmoj+tLoua8Om5qud1+f7a3Jkbff2/2jFXxsfmxD3edoFOev3eiGZ2tKxXrnQ4HzB2bbDJthc7g5ZHCwbTy2nVKb35gas/dKFm4d9W/pkUrGc5HQwO6tDVgc2KVkuH0qYWtylNv+OaM1i/PM7dbobGhvnvV1fSRRM2/n3eTqu7jj9GzS4tjd+qY3fadPp66FC3Xr6DrueOuo06i+mdNpzWcGzM5GCfzfxBk2VJQw21JHT4vwH6WFmHBnuKnrvZK6BNliDC5IXYJWbETLj7Ys/kwD+u20zErpU75wdErptFst7WSpnc0RzMtq9hsljL9OaC4gNiMiI9FLqGwB/78DBCGNkXEQ7GyiRK4RFT+IWILMCC5ZMQPRkQo4l2Uf1WbpqFbTrH90Gk1+W/bcYyH4oNRqRY7lmU5sjSI2At5iR2fofhMvXX9TL1HCOIVRkLiBc8pJzplvCVrsElYoBc2oEBQwi+BWOiwbZSqZZXicBUgAVgNIy8JUGG1XKUNUunh31AApKl11J6k5+/b8i6/ZZ3gPh4WDlTU8oD4NNGVa6iUFfJ9waXTgrPwTuJhccx4W1mM4QHJ+adPtgia5FThFWWQc89Lw1lU9bKgPJG3wTDne35Jc43nKtDIxrEGhXUh2WySdACmULiYh1d1VTPVMYIJl6n9JPoXETUPod50Q+SoLzLn9nN8CVuSMQMMhZwuUrq84XkwRlQ8D1xO992tb4+zlLxvDO3YNVsz4K8IgfjHhwa0ofDj5iH/20ax9zmuK7FO8vA6+ZuAYbIQK3Ef7L8hBYx4WMwFLIpPg18LcC35uTFvco6FcTbNE4a+/yIJZarLAMIoIcxtyanhVC1TnGy/Qvan05cwqSIfr9gd/faKfev3xly3QiDnvvi/nRWc0gUivoviFEtd3vHXIk9OFifqfAR4KdDlplY1K2a5WrWKuUCXLYurtpM38KySxhfzV8tJTy/PQ+M3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EAF75C0876758893E0401F0A05995BAA</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EAF764F5BA1672CEE0401F0A07993CC4</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d78198ae-91b5-4d0e-9dd3-886048f0c2bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>423186c5-583a-4a1c-9e7a-24032ed24d34</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c55dc4d3-7d8e-4be2-bc0f-b68119e18a82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9d7d7724-8f49-4660-9937-b29c8fed414d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d2fcc8e-dd69-4172-b936-626b9d2b2834</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea54586-9969-4f80-80da-6e96f3a24037</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1cc95e33-d792-407c-8494-737a1c6f89c2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8e2b289d-1828-4774-a8f5-972256dfc92e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>362b5bfa-f60e-4b25-ac7d-21b1ef199871</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35cd7097-c2e4-4172-8891-0de448e3d804</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b6999684-10d4-418a-b3c3-783ff1744b1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977c07f-808a-4d2a-b915-fdb9e5067362</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>48f27436-b8f2-4e8c-a82b-d482a4ab9c3f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6277243b-d5a2-449c-a41c-03613ebc1a15</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f1028c4e-e345-447e-9a7b-bd84eba19265</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>85960cc5-2cb9-40f6-8be8-19f262d9f1d2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e9337998-e04f-43ea-b6b1-585fb4205efc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d0d859a-e97a-4f18-a15d-a1111083d8d0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8364bbe7-6e24-49dd-869c-6d5b19de823c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fabb013c-9aad-402f-b690-faa6cf7e6988</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>38c7908a-abf7-4f8e-9238-90bb58fe94f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4bc4319c-ccc3-44db-a0ad-5885582b8014</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_004_DTCreate_retailer_Grant_for_active_basic_user_without_ULC" searchProperties="true" id="bd57d323-e60b-4aea-bdfa-f851abb074cf"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="acb4fae6-6b22-48ae-ae8d-23e8ceaa1640"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTLCS"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="f37cd649-af05-4897-af13-7180dff1b547"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="5aad04d0-79bc-4453-addf-70302d2173b5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="74b54f36-78ff-4d9a-8ed1-51d5911d6714"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User" id="2be246d7-ec81-42e4-a52e-a6b92790a025">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="90b7137a-febe-4654-8b3a-9fe86d80e8ce">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="5d21aa53-8ff3-4843-8f4e-9edcc05ee0b7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="221469b8-3f82-4c47-89ec-cbb412b86db6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set EmailId for Standard User" id="4eb53001-7869-4baf-aa98-17eec41d1617"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Standard User Create" id="e4e56b35-c10c-48c5-a39d-26f751bc607e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();





def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="f20b54ea-ce03-467a-8aec-e02f2e7b65d4"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for SecondUser" id="438ebdd9-6116-4dcc-ad60-a70712da59d6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 1" id="b54a3013-ee64-44b6-a2da-419fa9607bac">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create for Standard User" id="c688c7c0-c4a0-4df7-bbb0-c1bd3321a72a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create for Standard User" id="cce17db5-238f-4cbb-8016-3beb931857d1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set EmailId for Third User" id="ee542047-0edb-4cce-9b5a-d511a10fc571"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Third User Create" id="904553bb-5d0c-40d6-b3d0-4de1a67c3569"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for Third User" id="14f4d93c-7e10-4064-ae31-324aa247c4ea"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="32bce121-d26c-4c6a-b0aa-bb6b65c16221">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="1df057f4-c90c-4696-be15-0521c21271f1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create for Basic User" id="e23ad178-e55d-4a32-950a-4297aa4ddabe">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for Third User" id="f1aea950-a091-40b9-b7e9-2264ecc9eb94">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>09B586F8313B20B6E05305991F0AE7E6</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>09B57D2AF7E323FFE05307991F0A9F93</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418046308712@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B57D2AF7E223FFE05307991F0A9F93</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B57D2AF7E223FFE05307991F0A9F93</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B586F8313A20B6E05305991F0AE7E6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B586F8313A20B6E05305991F0AE7E6</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418046308744</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_7aa61c5d-f4d2-4a31-b526-2a79b1d0d1d6</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_93ceb22f-9bba-44a7-ba85-cbc4c1f8d6a4</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZrb+I6EP0rKP1YhbwgIVFBYnnscvsmLO3ul8o4Q+KSODR2KOXXrx0gJWzby70SEvJkPHNm5vjYFwwlsel1GYOMk5TW1klMmVdY20qeUS9FjDCPogSYx7Hnd6+vPLOue2i/RamN+m3laWZbDm65pmqAYasN22iqLTxvqk2zNUcIW3jWNIQrYzmMKOOI8rZi6kZDNUxVb00My2uIn1l3TOe3UptCxkRs4VLXlR2oNWsrEedLT9NeX1/rr1Y9zULN1HVDe7y+8nEECVI6F9uKikRZZ+eP6wFgiGNcx2miXWgVn4uAeT4JKeJ5BrtcwWe5dE13NeETMBKeKeVeCEZ0nhbLHqIpJRjFZINkf66BR2lQ68ZhmhEeJZ8WYegysAprrGKjQc8UrQrtxEAVhBlDKouQsYs1hjlkQDHUfo5HbeXstKkVWycZomyeZgmrLv8bHqAriNMlBCrbl7WDdnrADzrVuQDsjSiOc0ZWcCPJukQY2G6agE8PVbvLYE7WV4QJgq6ZRKcdwjtabrvRJyEw/n8GdDCcbZApinPoLFrT77R1GyfrN9I3WjSMnMH1TTNamtftAsChc2EoR7tdHpGyJNF2xxU8T01sEDd89B+snz3LMmdY+0e/H8A59rvnz9YA+Xhx9zoJhr/c4U0QQb75sX6I19g+1+1fVuPx7WGiNRfDy0vqEvv+V6jNZhuY3uXnGt00e/1FfuNPGnOy6AWPvfMct+wcJUawDtyHjf2jHz0Mptpz040W2nT80497k/7g2nI2zvx7eN/73dWvei9Xl3djprfLcg7wV237M+/ns2fAfL+UNBj1a0MxJcS/FjNpIYE6L1y9pRQfxoFypSN3Se3wciF3JPDEDLdr3f3WbNnDlmVYXVP/Zg/0pqU3XdcY6t2BM7D3IrNFcQSxl9I5kbmk5G5p8zVAnHgMaACZukpzoXRM+SJiH3FUG9GxOAQpZTBJhTwbedgwxeFwYoDICBZh+uboLLI3LaV2k/Jbept15xyyqijbFVEeAyZLAlK5JbGZYDbjohkvaJXz2KivUJ1CLrQ9kzLrmY1WU2MkWcYgoWpJGuQx1JfRsmiNxrb/poowK6zjweSp5z8V50H7tLrjb/tGCJ+ASAcmC/oGYpjwwRVj7av5vGr3sOp9+G4eEHm8RFd5RvAWSfXTO1kkS0qm7Mva4y7djw2V0NpxVWW2YEVwyfny5haCLiSgsx/MC6q/1PPVKi9G4Uipy0R4TSieofmAc6FQb5N0AVQrQ2gnXQcl6qPMpb2KL+cR9TnikAji1IrlCfe/D0ze/yNB+fWpj4tKStE3Dmv+ka0Xi7eLRPzl8wZ7WPoJ8534e02z4H1cH8Q6yCPqFNc/JzSUK3kVvH3CDJyKsESIWJodBv8owEfJq8ayySUWLtg0yzl8/qUm1amtIIzTnPJRXykMh4pZ4ORvS/Denf4KU4hy+Uoj//5MU0lBAQzibcdIEV9etp7kPw0PVHeX9Fh4nb7ZHToD07SGw0J4na3wukPXKptSQdf5y/y35aBPxxzv/AE=</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVbZcuo4EH3PV7icxynjhcXYBVQ5bHEChGFJJbzcErIMmrFlsGSWfP2VDHaAkAx3XqDUbnWf7j46Uo2CMDBsh1IUMxwRyW3V5V9FXbOgUTaUkqZ5SsmoaMrcgJ6i+dXy3PeRBc25LLmUJsgllAHC6rKh6UVF1xXdmGhVWy/bZbOgG8ZMll5RTHlo7lLQZGkXBoTaadq6nMTEjgDF1CYgRNRm0B47/Z7NPW2QYZIbtQPKNGHcWDK2slUVFjwEURDAAoxCtaae+dQ8ao/xggCWxOiY06N1+bh3u90WtsVCFC9UQ9M0VbNU7uNRvLiXG3fZZuS5xI8O6yYgEcEQBPgDCFB9xJaRJznBIooxW4bfhNZVXROhFbSDCtRL5F5WPxOk6G6MdAYypkChS6BnwUbIRzEiEEnTkVuX72+b4GHvJAaE+lEc0ov1n0FCZIOCaIU8hWaVZehuj3ilXY0agrZLYJBQvEEDQZMVgIhKwxj5eNfDlJPPo1I6fmlHM4Yh+CcjqamnODls9UpnWniBKPs/8zqd1SHKKwgS1HhcsPKHs0+eXsxZuTLo62+mBnrbznSt1VMIp84HUPmoj+tLoua8Om5qud1+f7a3Jkbff2/2jFXxsfmxD3edoFOev3eiGZ2tKxXrnQ4HzB2bbDJthc7g5ZHCwbTy2nVKb35gas/dKFm4d9W/pkUrGc5HQwO6tDVgc2KVkuH0qYWtylNv+OaM1i/PM7dbobGhvnvV1fSRRM2/n3eTqu7jj9GzS4tjd+qY3fadPp66FC3Xr6DrueOuo06i+mdNpzWcGzM5GCfzfxBk2VJQw21JHT4vwH6WFmHBnuKnrvZK6BNliDC5IXYJWbETLj7Ys/kwD+u20zErpU75wdErptFst7WSpnc0RzMtq9hsljL9OaC4gNiMiI9FLqGwB/78DBCGNkXEQ7GyiRK4RFT+IWILMCC5ZMQPRkQo4l2Uf1WbpqFbTrH90Gk1+W/bcYyH4oNRqRY7lmU5sjSI2At5iR2fofhMvXX9TL1HCOIVRkLiBc8pJzplvCVrsElYoBc2oEBQwi+BWOiwbZSqZZXicBUgAVgNIy8JUGG1XKUNUunh31AApKl11J6k5+/b8i6/ZZ3gPh4WDlTU8oD4NNGVa6iUFfJ9waXTgrPwTuJhccx4W1mM4QHJ+adPtgia5FThFWWQc89Lw1lU9bKgPJG3wTDne35Jc43nKtDIxrEGhXUh2WySdACmULiYh1d1VTPVMYIJl6n9JPoXETUPod50Q+SoLzLn9nN8CVuSMQMMhZwuUrq84XkwRlQ8D1xO992tb4+zlLxvDO3YNVsz4K8IgfjHhwa0ofDj5iH/20ax9zmuK7FO8vA6+ZuAYbIQK3Ef7L8hBYx4WMwFLIpPg18LcC35uTFvco6FcTbNE4a+/yIJZarLAMIoIcxtyanhVC1TnGy/Qvan05cwqSIfr9gd/faKfev3xly3QiDnvvi/nRWc0gUivoviFEtd3vHXIk9OFifqfAR4KdDlplY1K2a5WrWKuUCXLYurtpM38KySxhfzV8tJTy/PQ+M3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EAF75C0876758893E0401F0A05995BAA</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EAF764F5BA1672CEE0401F0A07993CC4</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d78198ae-91b5-4d0e-9dd3-886048f0c2bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>423186c5-583a-4a1c-9e7a-24032ed24d34</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c55dc4d3-7d8e-4be2-bc0f-b68119e18a82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9d7d7724-8f49-4660-9937-b29c8fed414d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d2fcc8e-dd69-4172-b936-626b9d2b2834</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea54586-9969-4f80-80da-6e96f3a24037</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1cc95e33-d792-407c-8494-737a1c6f89c2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8e2b289d-1828-4774-a8f5-972256dfc92e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>362b5bfa-f60e-4b25-ac7d-21b1ef199871</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35cd7097-c2e4-4172-8891-0de448e3d804</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b6999684-10d4-418a-b3c3-783ff1744b1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977c07f-808a-4d2a-b915-fdb9e5067362</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>48f27436-b8f2-4e8c-a82b-d482a4ab9c3f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6277243b-d5a2-449c-a41c-03613ebc1a15</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f1028c4e-e345-447e-9a7b-bd84eba19265</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>85960cc5-2cb9-40f6-8be8-19f262d9f1d2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e9337998-e04f-43ea-b6b1-585fb4205efc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d0d859a-e97a-4f18-a15d-a1111083d8d0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8364bbe7-6e24-49dd-869c-6d5b19de823c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1d3b67f2-bbef-46b1-a9f8-7411c3211cce</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3eda2deb-fb0b-47d6-b61f-7ad487603fe5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c97cd6-868a-4f5a-b49f-ff763130c904</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_005_DTCreate_retailer_Grant_active_full_user_with_ULC" searchProperties="true" id="f3924c6e-3488-42f4-96dd-0603f60053a6"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b713a372-6230-4e8e-b384-a86a0c7b40f7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTLCS"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="a910a2a8-2cef-4a4c-9c85-0567cdeb8d35"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="8efbd854-9a0c-48b8-9f41-4228bb1af516"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="af230fef-d722-4808-b852-e71c471db9c7"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="10075224-3855-4792-b9e5-1d8037a4bbeb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="336a3e10-0fba-4895-a331-78e584cdaba7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="98a3ae38-be7d-43d7-8117-ea78a3781f91">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="5cc0efaa-7929-40bf-b5a5-ee1fcad864af">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>09B586F8315020B6E05305991F0AE7E6</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>09B58558A2764437E05307991F0A2FEE</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418046377288@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B58558A2754437E05307991F0A2FEE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B58558A2754437E05307991F0A2FEE</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B586F8314F20B6E05305991F0AE7E6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B586F8314F20B6E05305991F0AE7E6</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418046380585</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_06d54fce-0606-484c-bad1-c7b8fddc9f68</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtc6o6EP4rDv14BgFFRaY6Y31p7emLFfWe9ksnDYvGQlASfPv1J0GlYrXXez8xWTa7z+4+eZJrhgK/YDcYg4iTkOZWgU+ZnVhrShxRO0SMMJuiAJjNse00Hh/sQl630X6Lkuu2asq7W6wUvYLuqrhkfahm0TNVBJWyauGi5+m4UgHdE66MxdCljCPKa0pBN0zVKKi6NTCKtmnaJTNfMMpvSm4EEROxhUteV3agVqymTDif2Zq2XC7zy2I+jMZaQdcN7c/jg4MnECClfr2tKEkU1Xf+OO8CBt/HeRwG2rWW8bl2me2QMUU8jmCXyz2XS9f0qiZ8XEbGV0q6F9wu9cJk2UQ0pAQjn2yQ7M8j8Eno5hr+OIwInwRnizB0GViFFVaxYdIrRctCuzBQBmHEkMomyNjF6oMHEVAMuWG/W1OuLptasnUQIcq8MApYdvnf8ABdgB/OwFXZvqwdtMsDnuhU/Rqw3aXYjxlZwJMk6wxhYLtpAr48VK4XgUdWD4QJgq6YRKcdwjtabrvRImNg/P8M6GA42yAj5MdQH0K7gbrTtyc+f6zov8PF/OVu89y6aQSvtQTAoXNiSEe7XR6RMiXRdkcH3xrT8u1Tg5d7en/lzNfVDxf/qrRXd47VGz2NcIzpcMIHr6u3l2Lzpgz9ITdetOKoXZyNLeC3ZDh2h693MAjg+f7O/Lyz1oa5McJRj3vNIHCI9kbx3YTPSS96cQY0njqirbDp9R/Ce9yb/vafl+Vl53X6EA3N6iJGf+7Lv3RW+uf+5eaRao9vLt2U3qrPVi0t5wB/1rY/8078MQXM90tJg24r1xFTQvxnMZMW4qpe4mrPpPgwDpQrdblLaocdC7kjri1muF3r1ZuSVe5YRcPsFPSbclsvFfVStWp09Ea70i7vRWaL4ghiM6Qekbmk5G5p8zNAHNgMqAuRughjoXRM+SFiC3GU69K+OAQhZTAIhTyDNauA5U4Xm0/d+GTr9XJZri71D6zknkL+TJ+jhschympyOaPJfcBkRkAKt+Q1E8RmXPRijhYx9438AuUpxELaI6mydsG0ShojwcwHiVQLQjf2IT+bzJLOaGz7LagIs8Tabw/em857chy0s8Ud/9v3Qfi4RDowWdANiFnCiRvG3FdzvurqYdX78I3YJfJ0iabyiOAtkuyvL65IkqRE2Ze1x526HxsyobXjqtJs7oLglPLpxS30XChAfT+YOcrP8/FiESejqEili0R4TQieoTmAYyFQ60H4CVRLQ2gX3QYp6qPMqT2LL+YT6nDEIRDEySXLC65/B5i8/ruC8atL3xaZlKJvHFb8lK3pi6eLRPzj6wbbWPoJc098lmHkfo3rRKyDPKJOcftzQsdyJW+C9Rlm4FCEJULDwugw+KkAp5JnjWmTUyxcsOkj5nD+T06KU01BGIcx5d2WkhgOBTPBydczsL+cvoVJNDl9pJF/f6WpJKEABvG0YySJL+9aW/Kfjg9Ed5f0m+6WSlajUCmZZrGS6G5lq7uFTrudNiWDrv7N/N1y0Kdjjtf/Ag==</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b7106060-d3df-45da-a389-11c5bc92ba36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_006_DTCreate_retailer_Grant_for_active_standard_user_with_ULC" searchProperties="true" id="e99e344f-5284-4be0-ac9d-d066535145f6"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7b5b4500-806a-488a-bd57-05c81cc17425"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTLCS"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="b03c826f-8f37-4a9a-9f30-75d931ca96f9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="507fa3ba-3ad5-4e11-8665-6264b5e97ede"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="917f3035-dcc6-4795-8eed-984890782602"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User" id="8115e306-d94a-4377-9990-f63c5628b3a6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="75ff043e-5fa3-4ef6-8b6f-c99b4076c45a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="4b9111fd-9c98-4774-9d73-1cfe7726ec30">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="607865b7-fd99-4a2b-9d81-f4e38f3e7a52">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set EmailId for Standard User" id="5c946c9e-0223-4a68-adca-21dac76ba650"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Standard User Create" id="43b43d71-420d-4d11-9933-e1d8c40048fe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="f42fcec0-e1dc-412d-88f5-46ff721905f4"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="09c790b2-4a5c-4068-b9e7-58bc60b011db">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="42d73a1a-684d-4c7d-bd16-82b71a239177">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create_Standard" id="9a951b15-e8e1-4f6a-ba69-6aa7cd53adb1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for SecondUser" id="8b4a43b5-a3c5-47a7-899d-73d875d9dd10">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 1" id="8b7e7816-40c6-4546-b0ba-44f7c6f3b36a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B5855673EE20B0E05305991F0AA778</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B5853996FA441DE05307991F0AA610</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418046528818@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B5853996F9441DE05307991F0AA610</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B5853996F9441DE05307991F0AA610</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B5855673ED20B0E05305991F0AA778</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B5855673ED20B0E05305991F0AA778</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418046528858</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_7aa61c5d-f4d2-4a31-b526-2a79b1d0d1d6</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_0ab348f6-7cf0-4e01-bcf7-ee6e1c643496</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZSzfsStQ5QDZeHJjgGQ2eZkychuUGJlYMpB8/UoGPJiQLLtPLrVbp4+6W0d9xqJ5avgBY5BzktHGep5S5pfWtlLk1M8iRphPozkwn2N/FNxc+0YT+dFui9IIe23lN4omptVKHNXFCVItQLo6wYmrAjigY8cyLc8RrowVEFLGI8rbioF0S9UNFbXGuulbrm8bTaflPCmNB8iZwBYuTaRsSa1ZW5lxvvA1bbVaNVdmM8unmoGQrv19cz3CM5hHSudsc6IyUN7Z+uNmDBjSFDdxNtfOtJrPWcz8EZnSiBc5bGPFn8VCGvI04RMzMv2mVHshDmmSlctuRDNKcJSS90jm5wb4LIsbQTrNcsJn808PoSMJrMIaq1i36DdFq1M7EajGMGeRymaRvsUaQgI5UAyN+2HYVr6dVrVy6ziPKEuyfM7qy//GB+gS0mwBscp2x9pSOx3wSKY6Z4D9kOK0YGQJt7JZFxEGtq0m4NOhGoMcErK+Jkw06JpJdto+vYPlJhs9MgXG/0+B9oqzAXmI0gI63uBqMPbwS75OL54hzCbL1+tH3dMS97FdEth3Lg1VaTfLg6asmmizI78hQytIzOfhuIXs9J60SDe8nd3+FRqvZv7yw/05vMK/Ll/e8Bu+Ck3Deza49jSd/Mgv31d0XpxjdH+VupZnxnG/d3djs9U94H6WP+aXT7fmLx7ckudk8N14PNfeE/0+jL356u7aHmsL/aGLZvr6ud9f9EY/1kErMOEpvFw/TN6HLw+T7+nYC14HI8NGP9fDweJnuzrOHv+6bXfnR8XkGTDfLWUbhL3GhahSxL8WM2khsZqUrv5Cig/jQLnSkbukdviFkDsS+6KGmzXyzu2WbTuu2e8Z6Bz1kW0i2/P0CxQErtvaicyGxQHFbkYTImNJyd20zdcE8dxnQGPI1WVWCKVjyheIvYhHjZAOxSXIKINx1lZAj3XdtkBFJopVywBL9SzTVFtuK4oNJ3Fg4iqN24zf0bs8SDjkdXV2auo8BEwWBKSEyw5nosUZF1l5jZYFT/XmMmpSKITI51JvfcNq2Roj80UKkrM2z+IiheZitihzpLHN11AjzEprt9u3rODCMi56LnLM8z6ykMwrckV+XdcpL+Wnxz/8t8uU8ImJdGDyoOcgqg1H3iBrd8oP2bCPvlU7+KCIibx/Iu08J3jDpP7rTzfJNqpaadgf/+6Ofus73pX7oaEGrR2eqooWLwmuLkX1tAvFFxrR2RXsNWq+NovlsihL5EotzAW8JiRR10aACyFhb+PsBahWQWgnvRcV64PIlb3Or+AzOuIRh7loqEa5PGFAGAGTA0Io7sT61OmjFlLkjcOaH7N1UzHcSMZfzj/Yx9JPmAfis8ry+E+5jmDtxRHnFPMBJ3QqV/KtePukM3AmYIlQuSzfBz8GcCx43VglueLCRTdNCg6f/2lI+WorEcZZQXnYU0rDvqSWPPnbAvw/Th9gStWuxjjy73OcSsoWwCCGP0ZKfPka+7L/6XRPlrdBPyqz6XnOhWdZeq9UZnerzI6OqqTU2HU+mD9a9vJ02OOdfwA=</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVbZcuo4EH3PV7icxynjhcXYBVQ5bHEChGFJJbzcErIMmrFlsGSWfP2VDHaAkAx3XqDUbnWf7j46Uo2CMDBsh1IUMxwRyW3V5V9FXbOgUTaUkqZ5SsmoaMrcgJ6i+dXy3PeRBc25LLmUJsgllAHC6rKh6UVF1xXdmGhVWy/bZbOgG8ZMll5RTHlo7lLQZGkXBoTaadq6nMTEjgDF1CYgRNRm0B47/Z7NPW2QYZIbtQPKNGHcWDK2slUVFjwEURDAAoxCtaae+dQ8ao/xggCWxOiY06N1+bh3u90WtsVCFC9UQ9M0VbNU7uNRvLiXG3fZZuS5xI8O6yYgEcEQBPgDCFB9xJaRJznBIooxW4bfhNZVXROhFbSDCtRL5F5WPxOk6G6MdAYypkChS6BnwUbIRzEiEEnTkVuX72+b4GHvJAaE+lEc0ov1n0FCZIOCaIU8hWaVZehuj3ilXY0agrZLYJBQvEEDQZMVgIhKwxj5eNfDlJPPo1I6fmlHM4Yh+CcjqamnODls9UpnWniBKPs/8zqd1SHKKwgS1HhcsPKHs0+eXsxZuTLo62+mBnrbznSt1VMIp84HUPmoj+tLoua8Om5qud1+f7a3Jkbff2/2jFXxsfmxD3edoFOev3eiGZ2tKxXrnQ4HzB2bbDJthc7g5ZHCwbTy2nVKb35gas/dKFm4d9W/pkUrGc5HQwO6tDVgc2KVkuH0qYWtylNv+OaM1i/PM7dbobGhvnvV1fSRRM2/n3eTqu7jj9GzS4tjd+qY3fadPp66FC3Xr6DrueOuo06i+mdNpzWcGzM5GCfzfxBk2VJQw21JHT4vwH6WFmHBnuKnrvZK6BNliDC5IXYJWbETLj7Ys/kwD+u20zErpU75wdErptFst7WSpnc0RzMtq9hsljL9OaC4gNiMiI9FLqGwB/78DBCGNkXEQ7GyiRK4RFT+IWILMCC5ZMQPRkQo4l2Uf1WbpqFbTrH90Gk1+W/bcYyH4oNRqRY7lmU5sjSI2At5iR2fofhMvXX9TL1HCOIVRkLiBc8pJzplvCVrsElYoBc2oEBQwi+BWOiwbZSqZZXicBUgAVgNIy8JUGG1XKUNUunh31AApKl11J6k5+/b8i6/ZZ3gPh4WDlTU8oD4NNGVa6iUFfJ9waXTgrPwTuJhccx4W1mM4QHJ+adPtgia5FThFWWQc89Lw1lU9bKgPJG3wTDne35Jc43nKtDIxrEGhXUh2WySdACmULiYh1d1VTPVMYIJl6n9JPoXETUPod50Q+SoLzLn9nN8CVuSMQMMhZwuUrq84XkwRlQ8D1xO992tb4+zlLxvDO3YNVsz4K8IgfjHhwa0ofDj5iH/20ax9zmuK7FO8vA6+ZuAYbIQK3Ef7L8hBYx4WMwFLIpPg18LcC35uTFvco6FcTbNE4a+/yIJZarLAMIoIcxtyanhVC1TnGy/Qvan05cwqSIfr9gd/faKfev3xly3QiDnvvi/nRWc0gUivoviFEtd3vHXIk9OFifqfAR4KdDlplY1K2a5WrWKuUCXLYurtpM38KySxhfzV8tJTy/PQ+M3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EAF75C0876758893E0401F0A05995BAA</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EAF764F5BA1672CEE0401F0A07993CC4</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d78198ae-91b5-4d0e-9dd3-886048f0c2bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>423186c5-583a-4a1c-9e7a-24032ed24d34</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c55dc4d3-7d8e-4be2-bc0f-b68119e18a82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9d7d7724-8f49-4660-9937-b29c8fed414d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d2fcc8e-dd69-4172-b936-626b9d2b2834</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea54586-9969-4f80-80da-6e96f3a24037</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1cc95e33-d792-407c-8494-737a1c6f89c2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8e2b289d-1828-4774-a8f5-972256dfc92e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>362b5bfa-f60e-4b25-ac7d-21b1ef199871</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35cd7097-c2e4-4172-8891-0de448e3d804</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b6999684-10d4-418a-b3c3-783ff1744b1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977c07f-808a-4d2a-b915-fdb9e5067362</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>48f27436-b8f2-4e8c-a82b-d482a4ab9c3f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6277243b-d5a2-449c-a41c-03613ebc1a15</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f1028c4e-e345-447e-9a7b-bd84eba19265</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>85960cc5-2cb9-40f6-8be8-19f262d9f1d2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e9337998-e04f-43ea-b6b1-585fb4205efc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d0d859a-e97a-4f18-a15d-a1111083d8d0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8364bbe7-6e24-49dd-869c-6d5b19de823c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fabb013c-9aad-402f-b690-faa6cf7e6988</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>38c7908a-abf7-4f8e-9238-90bb58fe94f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4bc4319c-ccc3-44db-a0ad-5885582b8014</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_007_DTCreate_retailer_Grant_for_active_basic_user_with_ULC" searchProperties="true" id="98790051-0c52-41d6-80fa-f35e465775fc"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="09aa0d9d-d83b-477c-b335-79d760bb6379"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTLCS"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="ae653c9d-c6bb-4947-b5d2-cef9872312ae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="ea087b60-1ee8-47ae-aa4f-f5bd5a0ec52d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="c564eab5-d420-452b-9e66-d4697680e894"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User" id="5fdd7445-cd24-442e-b335-6e5fbaad63cf">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="9e75faab-5baa-4674-a498-99e9554207ee">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="ff9d46b5-4954-4b37-8604-af8bf6596969">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="6e49f8ad-c94c-4ae3-b003-3220ddd93a5c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set EmailId for Standard User" id="82460daa-87b5-409b-ac39-6be4bedf3b0f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Standard User Create" id="56541e51-d7be-4f13-acff-35caeb5da139"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();





def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="936b2481-3436-43e0-84f8-e4269720043c"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for SecondUser" id="112e99b4-b58f-4a92-85e9-3757bbebb437">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 1" id="bd9fab89-6dc8-4516-97c1-e1bf5cc03d85">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create for Standard User" id="7733da73-c440-42d8-9009-feca6831a584">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create for Standard User" id="8432753e-d6dc-4ed4-b127-b70d2f09ebf4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set EmailId for Third User" id="b347b2ac-c41c-4511-9574-5878f4ddea1c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Third User Create" id="8fd085e1-a56d-4f47-8641-ccbe1cb4bb9e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for Third User" id="07582099-bce4-4fde-895d-fc907dd1376f"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="989abb73-bc69-423c-8627-e940ac60b4b2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="6268dc87-989d-41c0-b76f-5a3bd840239b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create for Basic User" id="87fd856d-d9d6-4ba1-8049-9bc24fd1a95e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for Third User" id="49a63fcb-b635-4005-a2d6-640cc2212ae5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>09B6886AEDEB4761E05307991F0A99CE</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>09B681717F5C3368E05307991F0AC59F</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418050259948@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B681717F5B3368E05307991F0AC59F</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B681717F5B3368E05307991F0AC59F</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B6886AEDEA4761E05307991F0A99CE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B6886AEDEA4761E05307991F0A99CE</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418050259968</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_7aa61c5d-f4d2-4a31-b526-2a79b1d0d1d6</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_71b5c0e7-f1f3-43e8-8315-f1bc95a10162</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbZcuI6EP0VyvM4ZbxgFrsCVQ5k8Qxkg0xm5iUl5DYoY0vEkrGTr7+SAQ8my+XeJ5fare7T3UdHOuEoiW3P5xxSQRhtFElMuVda+1qWUo8hTrhHUQLcE9ib+pOxZzdND+22aI1g1NceTbeFzbnd1m0XWboTOabuIsB65Hbcru26UcvuSlfOMwgoF4iKvmablqNbtm72ZpbjOa7XajUds/1ba/yAlMvY0qVpaltQBe9rSyFWnmHked7MW02WLgzbNC3j52Q8xUtIkDY42VRUJkoHW3/cDAFDHOMmZolxYtR8TkLuTcmCIpGlsM0VfpTLNEzXkD4hJ4svWrUXwoBGrFwOEWWUYBSTV6T6MwGxZGHDjxcsJWKZfFiEZarAOhRYx5ZDv2hGHdqRgWoIU450vkTWNtYdRJACxdC4vwv62pfjplZunaWI8oilCa8v/xseoGuI2QpCne/K2kI7PuA7nRqcAPYCiuOMkzVcKbKuEAa+nSbg40M1blKISDEmXBK04AqdsQ/vYLnpxogsgIv/M6C94WyC/EBxBoNvxL8Cy/h2Ne1OR8QZXz4XeThcr6xO3i8B7DuXhmq0m+UBKSsSbXbAeOrcTIxfw9G1PUzb44e2fxNcX1/wkLSsbng7nl2M81du3TJW5PGtHbtW/nL/dZYv3Ivffzh9WCXTS3uO/UvmI+cOA8NG56FXRO7p+oK6t6fuonBG3+dWFneTy0n2m7I4ug9aOXwlS/Hsjouu6PlFNmz5v9hTFOD7+CF4PXVw0XuZd9oPk87P/HzSubBvcL8qZw9/3bY789Ns/gRY7JaKBsGocS6nhMTnYqYsJNSj0tVbKfHhAqjQBmqX0g4vk3JHQk/OcLM23dNOr9fxz0ZnvtPtWGdmu2V2Xdc6N33XHZ7tRGaD4gDikNGIqFxKcje0+RwgTjwONIRUX7NMKh3XPok4QgI1AnonDwGjHGZMynP79Wm+xIs/btaJrZzRF5annaTgTGtcMXFNr1M/EpDWNblb0+Q7wGRFQAm34jWXxOZC9uIZrTMRW801alLIpLSnSmU92+m1DU6SVQwKqZGwMIuhuVquys4YfPO1dYR5ab07mz0Op4/lcTA+LO7w364P0ickyoGrgk5BzhLeuWHsXTUfVm2b+1XvwvtZSNTpkk0VKcEbJPVff7miSFIRZVfWDnflfmiohTYOq6qyhWuCK8pXF7fUc6kAg91gnlHzuZmt11k5iq5SulSGN6TgWcYUcCYF6mXG/gA1qhDGUbdBhfogc2Wv48vEkk4FEpBI4jTK5RHX/xS4uv4Dyfji2LdFLaXsm4BCvGcbxvLpohB/+rrBHlZ+0nwjPzlLw7/jeifWXh5Zp7z9BaELtVI3wcsHzMBMhiVSw1i6H/y9AO8lrxurJldYhGTTPBPw8Z+GEqe+hjBmGRXBSCsN+4JZ4hQvK/D+Or0JU2py9Ugj//5K00lJAQzyacdJGV/dtZ7iP13sie426RvdtbpW97x92mp1evu6O2y751VTaugGb8xvLXt9OuT44B8=</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVbZcuo4EH3PV7icxynjhcXYBVQ5bHEChGFJJbzcErIMmrFlsGSWfP2VDHaAkAx3XqDUbnWf7j46Uo2CMDBsh1IUMxwRyW3V5V9FXbOgUTaUkqZ5SsmoaMrcgJ6i+dXy3PeRBc25LLmUJsgllAHC6rKh6UVF1xXdmGhVWy/bZbOgG8ZMll5RTHlo7lLQZGkXBoTaadq6nMTEjgDF1CYgRNRm0B47/Z7NPW2QYZIbtQPKNGHcWDK2slUVFjwEURDAAoxCtaae+dQ8ao/xggCWxOiY06N1+bh3u90WtsVCFC9UQ9M0VbNU7uNRvLiXG3fZZuS5xI8O6yYgEcEQBPgDCFB9xJaRJznBIooxW4bfhNZVXROhFbSDCtRL5F5WPxOk6G6MdAYypkChS6BnwUbIRzEiEEnTkVuX72+b4GHvJAaE+lEc0ov1n0FCZIOCaIU8hWaVZehuj3ilXY0agrZLYJBQvEEDQZMVgIhKwxj5eNfDlJPPo1I6fmlHM4Yh+CcjqamnODls9UpnWniBKPs/8zqd1SHKKwgS1HhcsPKHs0+eXsxZuTLo62+mBnrbznSt1VMIp84HUPmoj+tLoua8Om5qud1+f7a3Jkbff2/2jFXxsfmxD3edoFOev3eiGZ2tKxXrnQ4HzB2bbDJthc7g5ZHCwbTy2nVKb35gas/dKFm4d9W/pkUrGc5HQwO6tDVgc2KVkuH0qYWtylNv+OaM1i/PM7dbobGhvnvV1fSRRM2/n3eTqu7jj9GzS4tjd+qY3fadPp66FC3Xr6DrueOuo06i+mdNpzWcGzM5GCfzfxBk2VJQw21JHT4vwH6WFmHBnuKnrvZK6BNliDC5IXYJWbETLj7Ys/kwD+u20zErpU75wdErptFst7WSpnc0RzMtq9hsljL9OaC4gNiMiI9FLqGwB/78DBCGNkXEQ7GyiRK4RFT+IWILMCC5ZMQPRkQo4l2Uf1WbpqFbTrH90Gk1+W/bcYyH4oNRqRY7lmU5sjSI2At5iR2fofhMvXX9TL1HCOIVRkLiBc8pJzplvCVrsElYoBc2oEBQwi+BWOiwbZSqZZXicBUgAVgNIy8JUGG1XKUNUunh31AApKl11J6k5+/b8i6/ZZ3gPh4WDlTU8oD4NNGVa6iUFfJ9waXTgrPwTuJhccx4W1mM4QHJ+adPtgia5FThFWWQc89Lw1lU9bKgPJG3wTDne35Jc43nKtDIxrEGhXUh2WySdACmULiYh1d1VTPVMYIJl6n9JPoXETUPod50Q+SoLzLn9nN8CVuSMQMMhZwuUrq84XkwRlQ8D1xO992tb4+zlLxvDO3YNVsz4K8IgfjHhwa0ofDj5iH/20ax9zmuK7FO8vA6+ZuAYbIQK3Ef7L8hBYx4WMwFLIpPg18LcC35uTFvco6FcTbNE4a+/yIJZarLAMIoIcxtyanhVC1TnGy/Qvan05cwqSIfr9gd/faKfev3xly3QiDnvvi/nRWc0gUivoviFEtd3vHXIk9OFifqfAR4KdDlplY1K2a5WrWKuUCXLYurtpM38KySxhfzV8tJTy/PQ+M3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EAF75C0876758893E0401F0A05995BAA</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EAF764F5BA1672CEE0401F0A07993CC4</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d78198ae-91b5-4d0e-9dd3-886048f0c2bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>423186c5-583a-4a1c-9e7a-24032ed24d34</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c55dc4d3-7d8e-4be2-bc0f-b68119e18a82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9d7d7724-8f49-4660-9937-b29c8fed414d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d2fcc8e-dd69-4172-b936-626b9d2b2834</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea54586-9969-4f80-80da-6e96f3a24037</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1cc95e33-d792-407c-8494-737a1c6f89c2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8e2b289d-1828-4774-a8f5-972256dfc92e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>362b5bfa-f60e-4b25-ac7d-21b1ef199871</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35cd7097-c2e4-4172-8891-0de448e3d804</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b6999684-10d4-418a-b3c3-783ff1744b1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977c07f-808a-4d2a-b915-fdb9e5067362</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>48f27436-b8f2-4e8c-a82b-d482a4ab9c3f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6277243b-d5a2-449c-a41c-03613ebc1a15</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f1028c4e-e345-447e-9a7b-bd84eba19265</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>85960cc5-2cb9-40f6-8be8-19f262d9f1d2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e9337998-e04f-43ea-b6b1-585fb4205efc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d0d859a-e97a-4f18-a15d-a1111083d8d0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8364bbe7-6e24-49dd-869c-6d5b19de823c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1d3b67f2-bbef-46b1-a9f8-7411c3211cce</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3eda2deb-fb0b-47d6-b61f-7ad487603fe5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c97cd6-868a-4f5a-b49f-ff763130c904</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_008_DTCreate_retailer_Grant_blocked:tou_full_user_with_ULC" searchProperties="true" id="c947643a-cbf3-4f94-bd64-a0c2c0140242"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="56b3100e-d761-47f1-b5ed-4fae956dcce6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTLCS"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="8cf84fb2-ad9d-4797-bfa6-4b9801191cc1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="f106f282-5244-40ae-a528-58cbbafdfcb5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="4b5375a5-7862-4c25-b0cb-6b594cc969d2"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="84675130-d526-45c2-bd59-4a928b2a129a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="f7a499c5-c837-45e1-a9f8-5152ad2f8ac1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="1df68de4-7472-4b6a-a3eb-47b51ea339fb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy Create" id="22786f19-95fc-4039-b7ff-03516bbe2e17"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy GET" id="c808951a-b4e4-4915-b330-df9ae4ad807a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("policyID_before_DTC",tC.getPropertyValue("PolicyID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == blocked:tou" id="608e00e7-50b1-46ce-9688-6ab6584b447b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def useroid = tC.getPropertyValue("USER_OID");
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbNode - $e";
	assert 1 == 2;
} 
finally {
	assert dbUtils.userSetStatus(useroid,"blocked:tou") == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="0aadf942-8c8c-48e3-acea-325f62945ab1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator 1" id="3b09e61f-d4e9-4199-9c95-ab57a0aad5d0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>09B6AC7E50D7132DE05305991F0A562A</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>09B6AC6617EE3152E05307991F0AC2DD</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418050864558@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B6AC6617ED3152E05307991F0AC2DD</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B6AC6617ED3152E05307991F0AC2DD</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B6AC7E50D6132DE05305991F0A562A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B6AC7E50D6132DE05305991F0A562A</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418050866148</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_33448e90-373e-42d6-832f-8984da22d540</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbZcuI6EP0VyvM4ZbwvuAJVDsYTp8gGZJm8pIQsgxIjE0tmyddfyQQHE8jl3ieX2q3TR92toz6jYJbqnk8pyhnOSGM1Swn1SmtbKnLiZYBi6hEwQ9Rj0Bv6V31Pb6oe2G6RGlHQll4MwzRd1FJlwzGQbOqxLbuGnshuyzVjoOuxZarcldICRYQyQFhb0lXNlDVdVt2RZnpWy7PspukYz1LjAeWUY3OXJt+1IbWibWnK2NxTlOVy2VwazSyfKLqqasrTVX8Ip2gGpM7Z5kRloLzz6Q+bMYIoTWETZjPlTKn5nMXUG+IJAazI0Wes+FgsVVFbCveJKZ78kqq9KI5IkpXLLiAZwRCk+AOI/FwhNs3ihp9Oshyz6ezoITRVAMtoBWWomeSXpNSpnQhUY5hTINMp0D6xBihBOSIQNe4HUVv6dVrVyq2jHBCaZPmM1pf/jQ8iC5RmcxTLdHusT2qnAx7IVOcMQS8iMC0oXqBr0axzABH9rCaCp0M1bnOU4FUfU96gKyrYKbv09pabbAR4gij7PwXaKc4G5AGkBeo8huHt22Oyulj+Doun2zDERcLU6G9vqrZLArvOpaEq7Wa515RVE212hHfjgRH/jWjUBcqYXdh99m4l1zejyL1pKU+O81QUbxl5HnXD2Y0ZXly6H8E6dBTWerDS6zvd7PeS9XRk+9T/GIPfxd3rzXzgDB6D7vJtmfYeSXred8fnaz2/7zmTxFg+D1vB2u0vzd5lGOlYM+CCRGls0cyejy7H74b/9PBnGOT37HWQXlA/uoTRk/vnIqDt6jg7/Ou27Z0fFuNXBNl2KdogChohrxJgP4uZsOBYTkpXby7EhzJEmNQRu4R2eAWXOxx7vIabtdo6t/2u07PUwNYMPeiplqFarZYWqr5l6/5WZDYs9ih2M5JgEUtI7qZtfiYIZx5FJEa5vMgKrnRU+gExAAw0IjLglyAjFI2ytmS4dgwT15Vjp2XIZgItGbgukC3TcFCsmy3N5Tp7nbEbcpP7CUN5XZ2dmjoPEMRzjISEiw6nvMUp41l5B4uCpVpzAZoEFVzkc6G3nm66lkLxbJ4iwVmZZXGRouZ8Oi9zpNDNV5cBpKW12+2Zph+aehg4qm2c91RTFXlVHZ5fx7HLS3n0+Pv/tpniPjEWDlQc9BzxaqMDb5C5PeXRbOjqbja28H4RY3H/eNpZjuGGSf3XVzeJNqpaadAbvXSHL9qWd+W+b6hBK/unqqLFCwyrS1E97VzxuUZ0tgV7B833ZrFYFGWJHKGFOYdXuCRqyhDBgkvYepS9IaJUEMpJ70XFei9yZa/zK9iUDBlgaMYbqlEuTxgQhoiKASHid2J16vRRC8nzxtCKHbJ1Uz7cCMY/zj/Qg8KPm2/5Z5nl8Ve5DmDtxOHn5PMBw2QiVuKtWB/pDJhxWMxVLst3wQ8BHApeN1ZJrrgw3k3jgqHjfxpCvtoSgDArCIsCqTTsSmrJk63nyPty+gZTqnY1xuF/n+NkXLYARHz4o7jEF6+xJ/qfTHZk+TPod2W2bc3pBYZm6aUyOxtl7upBUCWlxq7zzfzdspOn/R7v/AM=</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:09B6AC8202631327E05305991F0A8921</con:value></con:property><con:property><con:name>policyID_before_DTC</con:name><con:value>urn:dece:policyid:org:dece:09B6AC8202631327E05305991F0A8921</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b7106060-d3df-45da-a389-11c5bc92ba36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8c947733-c717-49cb-bd23-d447e70a8193</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2cd4757e-9767-4f8c-b274-c6baa98f103d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5de4ed81-794e-4aaf-8f04-3b5f711685f8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_009_DTCreate_retailer_Grant_blocked:tou_standard_user_with_ULC" searchProperties="true" id="453a2db1-6547-440c-8c67-8742a00ec62d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ccef022b-c3d4-47c8-81ae-167badacc242"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTLCS"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="f56340aa-bad0-4f59-b11a-52f6d1427548"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="42024345-292b-43a9-b683-a5916af11ecc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="a6edbead-8d17-4383-978a-f940a7ba537e"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User" id="fcd59ef1-f779-414e-8a6c-1925ef4dff22">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="5adb3d0a-ad22-4b90-b211-cb8fba82771a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="317d284c-ced9-40b5-b02a-f7e6c00b1875">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="3e38f4c9-f80d-4022-856e-16fc587747df">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set EmailId for Standard User" id="3f696180-eacb-45c8-899f-80d0590245f8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Standard User Create" id="be814e7b-2cdf-496c-8697-e5925ef30601"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="4a87af57-a201-4c29-becb-db257427dda3"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="71ca7060-3875-462c-bcb2-357db96d19b5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="55e40f03-5ec1-4c1f-b652-a60b8403cf19">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create_Standard" id="018a7d9c-823d-419f-9b70-666be0a6564b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy Create" id="79d0d4e6-d3bb-43d1-807f-6f6a70719e74"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy GET" id="6aac5059-7be6-4fe6-92df-f147387e085e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("policyID_before_DTC",tC.getPropertyValue("PolicyID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == blocked:tou" id="993b1a9d-5a6f-4c0c-912f-4284dc131178">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def useroid = tC.getPropertyValue("USER_OID");
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbNode - $e";
	assert 1 == 2;
} 
finally {
	assert dbUtils.userSetStatus(useroid,"blocked:tou") == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for SecondUser" id="a4c77b3a-0a7f-4b69-8230-05b7983e9dc7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 1" id="fdfe4eb6-cf5c-4096-8839-fbbacf984880">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>09B6B827365A5465E05307991F0A8362</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>09B6B41AA2CE483AE05307991F0A92CF</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418051061400@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B6B41AA2CD483AE05307991F0A92CF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B6B41AA2CD483AE05307991F0A92CF</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B6B82736595465E05307991F0A8362</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B6B82736595465E05307991F0A8362</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418051061440</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_7aa61c5d-f4d2-4a31-b526-2a79b1d0d1d6</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_854819f5-38d3-4da7-a64a-1e2e5eea9c07</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtk6I4EP4rFvtxCnkRFKjRKgb11psXHRl37+bLVgyNZgcDkqDu/PpLUFlxXs67T1SaztNPujtP+pqhVWJ6PmOQc5LSxm6VUOaV1q5S5NRLESPMo2gFzOPYC/37O89s6h46blEao35X+eHYlmO4sa22nKilWhHqqKhtIdUAE2wA5GK9I1wZK2BEGUeUdxVTNyzVMFXdeTJsT295RqtpWe1npfENciawhUtTVw6kdqyrLDnPPE3bbrfNbauZ5gvN1HVD++v+LsRLWCGld70/URko7x38cTMCDEmCmzhdaddazec6Yl5IFhTxIodDrOijWLqmu5rwiRhZfFGqvRCNaJyWywDRlBKMEvKKZH7ugS/TqOEnizQnfLn68BCGLoFV2GEVGxb9omh1ahcC1RjmDKlsiYwD1hRiyIFiaMymo67y5bKqlVufckRZnOYrVl/+Nz5AN5CkGUQqOx7rQO1ywHcy1bsG7I0oTgpGNvAgmzVDGNihmoAvh2pMcojJ7o4w0aA7Jtlpp/TOlvts9MkCGP8/BTopzh7kG0oK6BG2nE4odgbtwSvhIbOv1sOrOe53/tC7JYFT59JQlXa/PGvKqon2O0aPdl6Y4VZbZ+kQzO8BbHn/mfvOY2hNxsHj8HHMIcDu9up+tmDPs9UzLeB1ov0dv6yXV8GGhM93i/ChlYx/fp/aA99ZoFk2eBrkxevrA9Jvb9fjl4In85nzsP7qgH77bWM//HxZ3k8ims8W/ijYheRreq91JnRjGqv5rTHPjSxz5+k4jidpZiJd/9O9+rqddavjnPCv2453PizmPwHz41K2wajfGIoqIf65mEkLidS4dPUyKT6MA+VKT+6S2uEVQu5I5Ika7te6e9O+ccxOq227ttW2B7rd0juuawx132m1zaPI7FmcUQxSGhMZS0ruvm0+J4hXHgMaQa5u0kIoHVM+QewjjhojOhWXIKUMntKu0kFWPHddXXXbYKsWQm3V1a1Ybdltw5jbNprjSGk8pHxMx7kfc8jr6uzU1HkKmGQEpITLDmeixRkXWVmjjai60dygJoVCiHwu9dYzLcfWGFllCUjO2iqNigSa2TIrc6Sx/ddUEWalNQgGluUPLXPY7+jt1s1At3SZ1zK/nU67vJQfHv/83zFTwici0oHJg96AqDa88wbpx1N+mA3TOM3GEd4vIiLvn0g7zwneM6n/+t1Nso2qVpoOnn4E4Q/jyLtyPzfUoLXzU1XRog3B1aWonnah+EIjeseCrVFz3Sw2m6IsUUdqYS7gNSGJhhYCLoSE/XpKX4BqFYR20XtRsT6LXNnr/Aq+pCFHHFaioRrl8oIBIQQmB4SRuBO7S6ePWkiRNw47/p4tSMRwIxl/Ov9gD0s/YZ6IzzbNo9/legfrJI44p5gPOKELuZJvxa8POgOnApYIlUvzU/D3AN4LXjdWSa64cNFN84LDx38aUr66CsI4LSgf9ZXScCqpJU/+KwPvt9MbmFK1qzGO/Pscp5KyBTCI4Y+REl++xp7sf7o4keVD0DfKbBm+bwZ9y2n5p8rsmsGwSkqNXe+N+a3lJE/nPd77Bw==</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVbZcuo4EH3PV7icxynjhcXYBVQ5bHEChGFJJbzcErIMmrFlsGSWfP2VDHaAkAx3XqDUbnWf7j46Uo2CMDBsh1IUMxwRyW3V5V9FXbOgUTaUkqZ5SsmoaMrcgJ6i+dXy3PeRBc25LLmUJsgllAHC6rKh6UVF1xXdmGhVWy/bZbOgG8ZMll5RTHlo7lLQZGkXBoTaadq6nMTEjgDF1CYgRNRm0B47/Z7NPW2QYZIbtQPKNGHcWDK2slUVFjwEURDAAoxCtaae+dQ8ao/xggCWxOiY06N1+bh3u90WtsVCFC9UQ9M0VbNU7uNRvLiXG3fZZuS5xI8O6yYgEcEQBPgDCFB9xJaRJznBIooxW4bfhNZVXROhFbSDCtRL5F5WPxOk6G6MdAYypkChS6BnwUbIRzEiEEnTkVuX72+b4GHvJAaE+lEc0ov1n0FCZIOCaIU8hWaVZehuj3ilXY0agrZLYJBQvEEDQZMVgIhKwxj5eNfDlJPPo1I6fmlHM4Yh+CcjqamnODls9UpnWniBKPs/8zqd1SHKKwgS1HhcsPKHs0+eXsxZuTLo62+mBnrbznSt1VMIp84HUPmoj+tLoua8Om5qud1+f7a3Jkbff2/2jFXxsfmxD3edoFOev3eiGZ2tKxXrnQ4HzB2bbDJthc7g5ZHCwbTy2nVKb35gas/dKFm4d9W/pkUrGc5HQwO6tDVgc2KVkuH0qYWtylNv+OaM1i/PM7dbobGhvnvV1fSRRM2/n3eTqu7jj9GzS4tjd+qY3fadPp66FC3Xr6DrueOuo06i+mdNpzWcGzM5GCfzfxBk2VJQw21JHT4vwH6WFmHBnuKnrvZK6BNliDC5IXYJWbETLj7Ys/kwD+u20zErpU75wdErptFst7WSpnc0RzMtq9hsljL9OaC4gNiMiI9FLqGwB/78DBCGNkXEQ7GyiRK4RFT+IWILMCC5ZMQPRkQo4l2Uf1WbpqFbTrH90Gk1+W/bcYyH4oNRqRY7lmU5sjSI2At5iR2fofhMvXX9TL1HCOIVRkLiBc8pJzplvCVrsElYoBc2oEBQwi+BWOiwbZSqZZXicBUgAVgNIy8JUGG1XKUNUunh31AApKl11J6k5+/b8i6/ZZ3gPh4WDlTU8oD4NNGVa6iUFfJ9waXTgrPwTuJhccx4W1mM4QHJ+adPtgia5FThFWWQc89Lw1lU9bKgPJG3wTDne35Jc43nKtDIxrEGhXUh2WySdACmULiYh1d1VTPVMYIJl6n9JPoXETUPod50Q+SoLzLn9nN8CVuSMQMMhZwuUrq84XkwRlQ8D1xO992tb4+zlLxvDO3YNVsz4K8IgfjHhwa0ofDj5iH/20ax9zmuK7FO8vA6+ZuAYbIQK3Ef7L8hBYx4WMwFLIpPg18LcC35uTFvco6FcTbNE4a+/yIJZarLAMIoIcxtyanhVC1TnGy/Qvan05cwqSIfr9gd/faKfev3xly3QiDnvvi/nRWc0gUivoviFEtd3vHXIk9OFifqfAR4KdDlplY1K2a5WrWKuUCXLYurtpM38KySxhfzV8tJTy/PQ+M3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EAF75C0876758893E0401F0A05995BAA</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EAF764F5BA1672CEE0401F0A07993CC4</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:09B6B8EFA8C2340FE05305991F0AFCC3</con:value></con:property><con:property><con:name>policyID_before_DTC</con:name><con:value>urn:dece:policyid:org:dece:09B6B8EFA8C2340FE05305991F0AFCC3</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d78198ae-91b5-4d0e-9dd3-886048f0c2bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>423186c5-583a-4a1c-9e7a-24032ed24d34</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c55dc4d3-7d8e-4be2-bc0f-b68119e18a82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9d7d7724-8f49-4660-9937-b29c8fed414d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d2fcc8e-dd69-4172-b936-626b9d2b2834</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea54586-9969-4f80-80da-6e96f3a24037</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1cc95e33-d792-407c-8494-737a1c6f89c2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8e2b289d-1828-4774-a8f5-972256dfc92e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>362b5bfa-f60e-4b25-ac7d-21b1ef199871</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35cd7097-c2e4-4172-8891-0de448e3d804</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b6999684-10d4-418a-b3c3-783ff1744b1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977c07f-808a-4d2a-b915-fdb9e5067362</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>48f27436-b8f2-4e8c-a82b-d482a4ab9c3f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6277243b-d5a2-449c-a41c-03613ebc1a15</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f1028c4e-e345-447e-9a7b-bd84eba19265</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>85960cc5-2cb9-40f6-8be8-19f262d9f1d2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e9337998-e04f-43ea-b6b1-585fb4205efc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d0d859a-e97a-4f18-a15d-a1111083d8d0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8364bbe7-6e24-49dd-869c-6d5b19de823c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fabb013c-9aad-402f-b690-faa6cf7e6988</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>38c7908a-abf7-4f8e-9238-90bb58fe94f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4bc4319c-ccc3-44db-a0ad-5885582b8014</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e24cdf24-ba83-45db-8fe8-73aaab5392a9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b5f29ab3-bcef-4ed9-9929-3206617d00e4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05420890-f510-4d7a-9adb-f7fcf4b2f8ea</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_010_DTCreate_retailer_Grant_blocked:tou_basic_user_with_ULC" searchProperties="true" id="3272748a-02c4-495e-9234-9f499eff42f4"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b7021d13-d7d2-4a2c-be0e-54aee718b001"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTLCS"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="f7a4c6b6-a2dc-404d-b5d5-66fb760e1cdf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="7e70b80c-211e-4f69-8bfe-027388fcb1c9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="8eeb336b-cfd0-41ab-94b4-dca2b856b2a6"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for First User" id="32a94862-bf71-447e-9dfd-ca3c3c8f5399">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="97f25b7a-f62d-4e4b-895e-2294e4f61c6e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="c267b0fc-3cbd-49a1-8874-e6e0d9ab3710">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="28935164-095a-45e3-9991-8ae621b4d529">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set EmailId for Standard User" id="e2fb3103-3c00-4259-966f-c3238d4a7981"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Standard User Create" id="db48c2da-96ed-4413-8922-ee41b476e763"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();





def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="71dd898b-fa72-4ac1-89fb-d956ae957c7f"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for SecondUser" id="599e0c39-7d91-4c70-97d2-f627c13a48c1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 1" id="01128a75-82bf-4cbc-929b-93de1c245b46">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create for Standard User" id="26d1bcbb-7a3d-41ee-a1e3-9b29c5c4b7dd">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create for Standard User" id="6add4396-c560-417f-80f4-ef7cf79f527a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set EmailId for Third User" id="1c0a1e71-987f-4d59-a6b8-5e9387c6c2c9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Third User Create" id="942e635e-e744-4202-b167-266c36a9379f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for Third User" id="264587d7-17b7-4223-9140-4218b4ccb862"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="7dbafed7-cd4b-48aa-ac32-966069a661fd">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="487897fe-72f1-410e-a534-65ba5b3ce214">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create for Basic User" id="063df27c-991c-47a3-a4d0-9e24dcaea45a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy Create" id="372c63f9-17cf-4291-a540-fbf3d752bb98"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy GET" id="86fb6638-f2d9-47dd-a15b-65ec5ab9496b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("policyID_before_DTC",tC.getPropertyValue("PolicyID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == blocked:tou" id="afb6d88d-d3bc-4422-9f86-078d7e4f05d2">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def useroid = tC.getPropertyValue("USER_OID");
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbNode - $e";
	assert 1 == 2;
} 
finally {
	assert dbUtils.userSetStatus(useroid,"blocked:tou") == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for Third User" id="62403255-386f-4b6d-a489-b431d42a8c15">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 1 1" id="1d931897-5fcb-4700-b9f5-64e412a56e06">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B6C5A1E9075FB5E05305991F0AB5C7</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B6BF63383D4EEEE05305991F0A2B26</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418051291173@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B6BF63383C4EEEE05305991F0A2B26</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B6BF63383C4EEEE05305991F0A2B26</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B6C5A1E9065FB5E05305991F0AB5C7</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B6C5A1E9065FB5E05305991F0AB5C7</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418051291193</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_7aa61c5d-f4d2-4a31-b526-2a79b1d0d1d6</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_fd1e44fc-fcc5-46d1-9c43-7e841836294f</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynlMGcsXbHAFqsDAFCEhFxNmMi8pIcsgYstgyVzm61cy4MHksuzyQqndOn3U3TrqGwbjyHDbjOGUk4RWtnFEmZtbm0qWUjeBjDCXwhgzlyPXb9/fuUYVuPC4RakMuk3lLQx0bFkhUkOEaqplB7raQJapOrhu6XXTNhpWKFwZy/CAMg4pbyoG0C1VN1RQH+s1FzguEMgA/FYqE5wygS1cqkA5kNqypjLnfOlq2mazqW7MapLONAMAXft1f+ejOY6h0rrZnygPlLYO/qgaYISjCFVREms3WsnnJmCuT2YU8izFh1jBV7GABhqa8AkYmV0pxV4cDGiY5EsP0oQSBCPyB8r83GM+T4JKO5olKeHz+MtD6EACq3iLVKRb9ErRytQuBCoxTBlU2RzqB6xnHOIUU4QrL8+DpnJ1WdXyreMUUhYmaczKy//GB9M1jpIlDlR2PNaB2uWAn2SqdYORO6AoyhhZ45Fs1iVEmB2qidHlUJXHFIdke0eYaNAtk+y0U3pny302umSGGf8/BTopzh5kAqMMt+6swXoyXcTe9UMUP7XN0Xgz9MfR3cPtUzMncOqcG4rS7pdnTVk00X5HVp9wx1wEj8b2d7ziaxNNve7DYqXtXjuvje5ucm0HwZCvhvf6YtYeslt7NcRPcz8zbke+w4P30fVL7emhnfay686fcM29of/zx2s7mxKnPnl57Dxx/e4dvj5N2e4lWPYHw8AwhveLSe3n8s90swAj7zqMf5lad5K+d/wx8pENb6/7wH6G88dd8IPMjF4jG9UM0CyOc8K/bDveeT+bLjDix6Vsg0G30hdVgvx7MZMWEqhh7uoupfgwjilXWnKX1A43E3JHAlfUcL8GjY7t1dp6rwHsWr9T64GaCWqNht4H7U7Nc44is2dxRtFLaEhkLCm5+7b5niCKXYZpgFN1nWRC6ZjyDWIXclgZ0GdxCRLK8DhpKmYdWzaa6mrdMaaqFUxDdYoaUK0DpDvAxk7gQKUySvgDfUjbIcdpWZ3rJXV+xogsCZYSLjuciRZnXGRlBdcZj/TqGlYpzoTIp1JvXcOq1zRG4mWEJWctToIswtXlfJnnSGP7f0OFiOVWz+tZVrtvGf2uIGd2esACMq/AEfl1HDu/lF8e//zbMVPCJyDSgcmDdrCoNv7wBtlu7XjKL7Nh6KfZOMK3s4DI+yfSzlOC9kzKn/52k2yjopWee+M3z3/Tj7wL93NDCVo7P1URLVgTVFyK4mkXii80onUs2ApWV9Vsvc7yEjlSC1MBrwlJ1DUfo0xI2G6cvGOqFRDaRe9FwfoscmEv88v4nPocchyLhqrkywsGBB8zOSAMxJ3YXjp9lEKKvHG85Z/ZvEgMN5Lxt/MPcpH0E+ZH8bdJ0uBvuT7BOokjzinmA07oTK7kW7H7ojNQImCJULkkPQX/DOCz4GVjkeSCCxfdNM04/vpLRcpXU4EIJRnlg66SG04lNefJd0vs/nX6AJOrdjHGkX+f41SStwDCYvhjJMeXr7Er+5/OTmT5EPRcmTt92zTrpmf1xO9EmY2OYRdJKbFrfTB/tJzk6bzHW/8A</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVbZcuo4EH3PV7icxynjhcXYBVQ5bHEChGFJJbzcErIMmrFlsGSWfP2VDHaAkAx3XqDUbnWf7j46Uo2CMDBsh1IUMxwRyW3V5V9FXbOgUTaUkqZ5SsmoaMrcgJ6i+dXy3PeRBc25LLmUJsgllAHC6rKh6UVF1xXdmGhVWy/bZbOgG8ZMll5RTHlo7lLQZGkXBoTaadq6nMTEjgDF1CYgRNRm0B47/Z7NPW2QYZIbtQPKNGHcWDK2slUVFjwEURDAAoxCtaae+dQ8ao/xggCWxOiY06N1+bh3u90WtsVCFC9UQ9M0VbNU7uNRvLiXG3fZZuS5xI8O6yYgEcEQBPgDCFB9xJaRJznBIooxW4bfhNZVXROhFbSDCtRL5F5WPxOk6G6MdAYypkChS6BnwUbIRzEiEEnTkVuX72+b4GHvJAaE+lEc0ov1n0FCZIOCaIU8hWaVZehuj3ilXY0agrZLYJBQvEEDQZMVgIhKwxj5eNfDlJPPo1I6fmlHM4Yh+CcjqamnODls9UpnWniBKPs/8zqd1SHKKwgS1HhcsPKHs0+eXsxZuTLo62+mBnrbznSt1VMIp84HUPmoj+tLoua8Om5qud1+f7a3Jkbff2/2jFXxsfmxD3edoFOev3eiGZ2tKxXrnQ4HzB2bbDJthc7g5ZHCwbTy2nVKb35gas/dKFm4d9W/pkUrGc5HQwO6tDVgc2KVkuH0qYWtylNv+OaM1i/PM7dbobGhvnvV1fSRRM2/n3eTqu7jj9GzS4tjd+qY3fadPp66FC3Xr6DrueOuo06i+mdNpzWcGzM5GCfzfxBk2VJQw21JHT4vwH6WFmHBnuKnrvZK6BNliDC5IXYJWbETLj7Ys/kwD+u20zErpU75wdErptFst7WSpnc0RzMtq9hsljL9OaC4gNiMiI9FLqGwB/78DBCGNkXEQ7GyiRK4RFT+IWILMCC5ZMQPRkQo4l2Uf1WbpqFbTrH90Gk1+W/bcYyH4oNRqRY7lmU5sjSI2At5iR2fofhMvXX9TL1HCOIVRkLiBc8pJzplvCVrsElYoBc2oEBQwi+BWOiwbZSqZZXicBUgAVgNIy8JUGG1XKUNUunh31AApKl11J6k5+/b8i6/ZZ3gPh4WDlTU8oD4NNGVa6iUFfJ9waXTgrPwTuJhccx4W1mM4QHJ+adPtgia5FThFWWQc89Lw1lU9bKgPJG3wTDne35Jc43nKtDIxrEGhXUh2WySdACmULiYh1d1VTPVMYIJl6n9JPoXETUPod50Q+SoLzLn9nN8CVuSMQMMhZwuUrq84XkwRlQ8D1xO992tb4+zlLxvDO3YNVsz4K8IgfjHhwa0ofDj5iH/20ax9zmuK7FO8vA6+ZuAYbIQK3Ef7L8hBYx4WMwFLIpPg18LcC35uTFvco6FcTbNE4a+/yIJZarLAMIoIcxtyanhVC1TnGy/Qvan05cwqSIfr9gd/faKfev3xly3QiDnvvi/nRWc0gUivoviFEtd3vHXIk9OFifqfAR4KdDlplY1K2a5WrWKuUCXLYurtpM38KySxhfzV8tJTy/PQ+M3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EAF75C0876758893E0401F0A05995BAA</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EAF764F5BA1672CEE0401F0A07993CC4</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:09B6C27CCD8254F6E05305991F0A1110</con:value></con:property><con:property><con:name>policyID_before_DTC</con:name><con:value>urn:dece:policyid:org:dece:09B6C27CCD8254F6E05305991F0A1110</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d78198ae-91b5-4d0e-9dd3-886048f0c2bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>423186c5-583a-4a1c-9e7a-24032ed24d34</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c55dc4d3-7d8e-4be2-bc0f-b68119e18a82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9d7d7724-8f49-4660-9937-b29c8fed414d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d2fcc8e-dd69-4172-b936-626b9d2b2834</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea54586-9969-4f80-80da-6e96f3a24037</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1cc95e33-d792-407c-8494-737a1c6f89c2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8e2b289d-1828-4774-a8f5-972256dfc92e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>362b5bfa-f60e-4b25-ac7d-21b1ef199871</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35cd7097-c2e4-4172-8891-0de448e3d804</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b6999684-10d4-418a-b3c3-783ff1744b1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977c07f-808a-4d2a-b915-fdb9e5067362</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>48f27436-b8f2-4e8c-a82b-d482a4ab9c3f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6277243b-d5a2-449c-a41c-03613ebc1a15</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f1028c4e-e345-447e-9a7b-bd84eba19265</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>85960cc5-2cb9-40f6-8be8-19f262d9f1d2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e9337998-e04f-43ea-b6b1-585fb4205efc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d0d859a-e97a-4f18-a15d-a1111083d8d0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8364bbe7-6e24-49dd-869c-6d5b19de823c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1d3b67f2-bbef-46b1-a9f8-7411c3211cce</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3eda2deb-fb0b-47d6-b61f-7ad487603fe5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c97cd6-868a-4f5a-b49f-ff763130c904</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>085681a2-8740-4d9e-b2db-f8aec3eb7ac6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>44866e02-7c24-4681-80d7-246064b530f3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>603e2f43-d90c-4948-90eb-47d8248c107e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_040_DTGET_retailer_Full_user_assertion_with_RightsTokenGet" searchProperties="true" id="052b0b97-1e95-4bdc-bfc2-4066aab69f98"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="cc37cb1e-d56e-42e9-9782-d7dfe664fca7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTLCS"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="5b10f253-18ce-4121-a208-dae5b402c073"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="c3274e58-835e-48a0-896e-bd63ba04b9c6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="f66f3c18-c6df-48c4-ab31-802b0093d29c"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="47b17ea0-1331-4867-9288-fa99770c83c7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="78a4df48-b517-4052-9469-8461b644d50d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="5013944a-59ea-49e5-9237-88a8024edec9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="2e1dcc48-2191-421f-9947-9d0d6368bef9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="a642a5a9-7f9d-49e0-a5fd-417d5720a1c5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="ddc49350-cf6b-4486-a6b7-0f82cf11db41"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeRightsTokenCreate","");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B6C97D42AE6B36E05305991F0A7836</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B6C9635C2B0764E05307991F0AB765</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418051350924@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B6C9635C2A0764E05307991F0AB765</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B6C9635C2A0764E05307991F0AB765</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B6C97D42AD6B36E05305991F0A7836</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B6C97D42AD6B36E05305991F0A7836</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418051352624</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_f816668d-3e6f-4c0a-a4e8-63fb6b13a3b2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc9o6EP0rjPvYMf7EBk9ghtjQ0DokgYRp89JR5DUoNTJYMh/99Vcy4GBCcrn3yaP16uzR7uporxiaJ6bXZQwyTlJa28wTyrzC2lbyjHopYoR5FM2BeRx74+5t6Jl13UOHLUptELSV33HTcBynGakWOLFqYx2pyIam6ljxi/NiWMh6MYUrYzkMKOOI8rZi6oatGqaqNx+Nhqe7XsOtO63Gs1KbQMYEtnCp68qe1Ia1lRnnC0/T1ut1fW3V02yqmbpuaD9vwzGewRwpnavdiYpAWWfvj+sRYEgSXMfpXLvSKj5XEfPGZEoRzzPYx4o+iqVreksTPhEj0y9KuReiAY3TYukjmlKCUUL+IpmfW+CzNKp1k2maET6bf3gIQ5fAKmywig2bflG0KrULgSoMM4ZUNkPGHmsEMWRAMdSeRoO28uWyqhVbHzNEWZxmc1Zd/jc+QFeQpAuIVHY41p7a5YBnMtW5AuwNKE5yRlYwlM26QBjYvpqAL4eq3WcQk01ImGjQDZPstGN6J8tdNgIyBcb/T4GOirMDmaAkh040A2MdLmehnYQ3k/mSPT1pI3/8FDzgdkHg2LkwlKXdLU+asmyi3Y4fg8avV7/18Pz0ywiHtt4wpv3wphf6s34ra2UULadwnw59f/L17/f7yWZ509Of/2xHXycr/Nqnq7DVdW96P4fj+HV5v82mN7PEsrpDhN3Y3kRD51v052H8jfXw6xql341w1F+QgPWWo+36Lh2G7q8X3lyEzxujr61zKzDSxArIUpvcuNcwHQUhS4Z60/QHD911uzzOEf+q7XDnx/nLK2B+WMo2GAS1vqgS4p+LmbSQSI0LV28hxYdxoFzpyF1SO7xcyB2JPFHD3VpvXTt+yw1ssxs415bT0xuW3mi1jL7edZuWcxCZHYsTin5KYyJjScndtc3nBPHcY0AjyNRVmgulY8oniAHiqDagI3EJUsrgMW0remRZsQGWajdcV7VNvaki022qYEZRM4pc0wWhzsOU39G7rBtzyKrq3Kyo8wgwWRCQEi47nIkWZ1xkZYlWOU+M+grVKeRC5DOpt55pNxsaI/NFApKzNk+jPIH6YrYocqSx3ddUEWaF1fd7tt3t22Y/cHXHuu7pti7zqrsiv67rFJfyw+Of/jtkSvhERDowedBrENWGM2+QfTjlu2w0zr5VB/huHhF5/0TaeUbwjkn111s3yTYqW2nUe/ztj38bB96l+6mhAq2dnqqMFq0ILi9F+bQLxRca0TkUbInqy3q+WuVFiVyphZmA14QkGtoYcC4kbPuY/gGqlRDaRe9Fyfokcmmv8sv5jI454jAXDVUrlhcMCGNgckAYiDuxuXT6qIQUeeOw4edsfiKGG8n40/kHe1j6CfO9+KzTLHor1xmsozjinGI+4IRO5Uq+FdsPOgOnApYIlUuzY/BzAOeCV41lkksuXHTTS87h4z81KV9tBWGc5pQPAqUwHEtqwZNvF+C9Ob2DKVS7HOPIv89xKilaAIMY/hgp8OVr7Mn+p9MjWd4Hfa/MjtXwTaEYjl0os7tT5mvXaZRJqbDrvDO/txzl6bTHO/8A</con:value></con:property><con:property><con:name>expectErrTypeRightsTokenCreate</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3118c0d4-b8db-4f7b-b50e-8c6c3466ed29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_041_DTGET_retailer_Standard_user_assertion_with_RightsTokenGet" searchProperties="true" id="3bbca7ef-ac6f-46d0-9569-088052c2177c"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d1730f04-f373-44e0-9f31-1d2e177ed586"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTLCS"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="d3cddeec-d896-4738-86cf-bb41dbcd2245"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="ab8ece13-1b0a-4691-a051-324b2057112c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="e39b8719-9bee-46ba-8ed1-5ad5e3c6705d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="86c27720-fa68-4218-9c8a-5c80143261b9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUIDFirstUser", tC.getPropertyValue("assertionUUID"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="99701c19-f329-40b8-9afe-720bc66f1c78">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="64222ef2-51ba-4c65-90b5-890b6d7a5d97">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set EmailId for Second User" id="0996c2e1-60b1-45d7-914a-fe848494b230"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Second User Create" id="011830d3-585a-4b2b-aeec-2e1623d52237"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="d7f27dd2-d5a2-474d-872a-82da1b80cdd2"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator for Second User" id="60079820-9f8e-437a-99bb-f65e266a7b2f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator for Second User" id="54fcbbb5-cc62-4318-aa91-52202c056909">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create for Second User" id="7d547303-e1c2-4319-ba6b-6d54af7028f6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create for Second User" id="01677fae-a605-4840-adaf-6727dcf3f1ba">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="42d4b1fb-4da3-497e-a195-8ed4486030e8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="084b2226-e63a-44b8-ba8f-742fa2f55354">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="a71244c1-3388-44c5-a444-0c2de3712051"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeRightsTokenCreate","");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B6CD7C732C0775E05307991F0A358C</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B6C9F8CED26B24E05305991F0AC640</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418051419346@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B6C9F8CED16B24E05305991F0AC640</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B6C9F8CED16B24E05305991F0AC640</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B6CD7C732B0775E05307991F0A358C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B6CD7C732B0775E05307991F0A358C</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418051419366</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_22dd1c3f-63aa-4153-a3f4-f92d0c0969fd</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbd6o6EP4rLvqMhIsirOpaFLHbXmyrtqe7L3vFEDC7EJQEtf31O0Fli70cz3liZZjMfDPz5UvOGUwTw/UYwzknGW1s0oQyt7R2lSKnbgYZYS6FKWYuR+7Eu71xjSZw4X6L0hj2u8ovwwhDHZmR2jYhVC29ZarQjCw1cowQIOC0nSgUrowVeEgZh5R3FQPolqobKuhM9ZYLHBdYzY5jvCiNJ5wzEVu4NIGyA7VhXWXO+cLVtPV63VybzSyPNQMAXXu+vZmgOU6h0jvfVlQmyns7f9QMMcJJgpooS7VzreZzHjJ3QmIKeZHjXa7wq1xAA44mfEJG4jOl2ovDIY2yculDmlGCYELeoezPLebzLGx4SZzlhM/TL4vQgQys4g1SkW7RM0WrQzsxUA1hzqDK5lDfxRrjCOeYItx4HA+7ytlpUyu3TnNIWZTlKasv/xseTFc4yRY4VNm+rB200wN+0qneOUbukKKkYGSFR5KsC4gw200To9NDNe5zHJHNDWGCoBsm0WmH8I6W2270SYwZ/z8DOhjONsgTTArc++G9eDzIB68BdAbmb/K22dytpjC4ibxuCeDQuTRUo90uj0hZkWi7Y9mOn1vo5WqcBMmPoWYGPx/uPBq9hYVx2afPP4KMz43XhzaaWv57fEkefpqzxWC8mnu3S3vGWtHL08WrMb0mQ8O/NBYP7/f3o/ekndCF7s2enEkAR15hjdaar11d9x9H1oPmtMF1/pRF8chO1yG6vibhQ/wYO8+P48AeLC83s5TGNg+Kl9//TAe3V5dMUIXYoFuVc4C/btuf+Ukx+40R3y8lDYb9xkBMCfLvxUxaSKhGpau7kOLDOKZc6cldUjvcQsgdCV0xw+0aOBdtv2/7tmlcANtuBaBlAttx9AHwzFbH34vMFsURRD+jEZG5pORuafM9QJS6DNMQ5+oqK4TSMeWbiH3IYWNIx+IQZJThadZVolaIZiGeqQibbdUyZuKcAwhUZGLdMkOATSB0dpTxO3qXexHHeV2dOzV1HmNEFgRLCZcMZ4LijIuuLOGq4IneXMEmxYUQ+VzqrWtYnZbGSLpIsMSspVlYJLi5mC/KHmls+zVUiFhp9f3AsryBZQz6NmibFwGwgOxr2V/bbpeH8svyj//tOyV8QiIdmCz0Aotp4w93UMdt7av80I3Wp3fVPrxXhESeP9F2nhO0RVL/9ZdNkkYVlcbB9Jc/+aXvcVfux4ZaaO24qipbuCKoOhTV1S4UX2hEbz+wJWwum8VqVZQjsqUW5iK8JiRR1yYYFULC3qbZK6ZaFUI76b6oUB9lrux1fAWf0wmHHKeCUI1yecIDYYKZfCAMxZnYnPr6qKUUfeN4wz+z+Yl43EjE375/kIuknzDfi886y/8W/lmsgzyiTvE+4ITGciXvircvmIEyEZYIlcvyw+CfBfgsed1YNbnCwgWbZgXHX/9pSPnqKhChrKB82FdKw6Gkljj52wK7f50+hClVu3rGkX9/x6mkpADC4vHHSBlf3sau5D+ND2R5l/SDMjuDjh/09faFYZXK3Noqs9+2QNWUGrreB/NHy0Gfjjne+wM=</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:EAE7B7D46BA71E2FE0401F0A079922CD</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_c52365cc-053f-4cf8-89c7-2561eb876897</con:value></con:property><con:property><con:name>expectErrTypeRightsTokenCreate</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_015_DTCreate_retailer_ACCOUNT_USER.STATUS_of_'deleted'" searchProperties="true" id="44a533cd-127f-45e8-82f9-d2ea475f2db4"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6d56efeb-0322-40c6-959e-f0c253825212"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="6f524983-2c8f-43b1-ae6c-6e724c15c173"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="39afc80d-236b-4c31-b604-fe039da296f5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="c1e4efb4-d430-42ae-8e8b-369bb681626f"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="8c2b7287-63b5-43e0-bb84-2d6a160396c8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="e206fc5c-7d31-4c01-9ffb-ae9776199b75">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="21efa567-d92c-44ad-aa5f-e55daf92d270">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator-cs" id="6815a51a-bb60-4dfc-aa60-ff89286ce81a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTLCS"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator-cs" id="6a2d308d-aed4-41d9-8c4f-fdf50f643be8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="7cdb6418-fb1f-4c1c-84e7-d299b93322a0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == deleted" id="c3b58b4a-2c26-4cfb-8d27-8c6a432791d9">
        <con:settings/>
        <con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userStatus","urn:dece:type:status:suspended");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserStatusUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
log.info "runnerTC--"+runnerTC.status

assert "$runnerTC.status" == "FINISHED";

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="dbfe502f-3532-49ac-bdcf-27c82c558aa0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B6C966D6600766E05307991F0A4C14</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B6D0E6EB707F18E05305991F0ABD4C</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418051476105@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B6D0E6EB6F7F18E05305991F0ABD4C</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B6D0E6EB6F7F18E05305991F0ABD4C</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B6C966D65F0766E05307991F0A4C14</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B6C966D65F0766E05307991F0A4C14</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418051478665</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_3891407b-7946-40e8-ad8b-824704b06c17</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvO4ZXwJGHAFqgiXCakQGAyZ7LxMyXIbNLFlkGQM+fqVDHgwk2TZfXKp3eo+3X10pFuO4sh2u5wDEyShlV0cUe7m1raWMuomiBPuUhQDdwV2ve740bWrpotOW7TKqN/WfqJWiCxogY5CH+u1BrZ1HwDpDfvGDCwfWy0nlK6cpzCiXCAq2pptWjXdsnWzObfqrtly682qZTV+aJVnYFzGli5VUzuC2vG2thJi7RpGlmXV7KaasKVhm6ZlvIwfPbyCGGmd20NFeSLWOfrjagAYoghXcRIbt0bJ5zbgrkeWFImUwTFX8FEu0zBbhvQJOFl+0Yq9EIxomOTLHqIJJRhF5A2p/oxBrJKg0o2WCSNiFX9YhGWqwDrssI6tGv2iGWVoVwYqIWQc6XyFrGOsGYTAgGKoLGajtvbluqnlW+cMUR4mLObl5X/DA3QLUbKGQOenso7Qrg/4Tqc6t4DdEcVRyskWnhRZ1wgDP04T8PWhKlMGIdk9Ei4JuuMKnXEO72J56EafLIGL/zOgs+EcgjyjKIXOX5PFzRt39qn/MCEz9uwvml3vvv9A7KSdAzh3zg3FaA/LC1IWJDrs8Op+42Zi2ONptB7Htdrmx6t3b6z8NLFXFPFlvem1erv9A/4WTL8bux+z4VtCXoYvk0UY0vu/m40dqy++3k8GNHvOsqfvA79rN76O++KJRt+mu4f58yZIwmmDxUl4Fw/Cnjd96S/Yk2+NHcxfb7bB3remc5Nnw9VysU1Zk4yd5eA7fnuwrPvRawYzw/5GYN9/bRflnOEv205n3kv9X4DFaaloMOpXhnJKSHwuZspCAj3MXd21Eh8ugAqto3Yp7XBTKXckcOUMD2uzdef0Wo7Td+pDs+E4A7N+YzZaLWtodms9q3YSmQOKC4i9hIZE5VKSe6DN5wBx7HKgATB9m6RS6bj2ScQ+EqgyojN5CBLKYZ5Ieab+Zt36lXEn29i/QkBvr6wWW5mU5KdETOiEdUMBrCzJzZIkzwCTNQGl24rWXPKaC9mKDdqmIrKqW1SlkEplZ0pkXbvWrBucxOsIFFAjToI0gup6tc4bY/DD19YR5rl1Npj/7Hk/89NgfFjb5b9TG6RPQJQDVwXdgRwlvHPB1E7VfFi1bZ1XfQrfTQOiDpfsqWAEH5CUf/2miuJIwZNTWSfchfuloRTauKyqyBZsCS4YX9zbUs6lAHROg9mg6qaabrdpPoqGEjomwxtS7yzDA5xKfdrPk1egRhHCuOoyKFBfZC7sZXypWFFPIAGxJE4lX15x+3vA1e0/koTfXfu0KKWUfROwE+/ZepF8uSjEnz5usIuVnzRP5SdLWPB7XO/EOssj65SXvyB0qVbqIth/wAycyLBESljCzoO/F+C95GVj0eQCi5Bs8lMBH/+pKG1qawjjJKVi1Ndyw7le5jjFfg3ub6c/wuSSXLzRyL8/0nSSUwCDfNlxksdXV62r+E+XZ5p7THopu31z4AzunGFjaDVz2a0fZPeuX+sVTSmh6/xh/tNy1qdLjnf+AQ==</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property><con:property><con:name>userStatus</con:name><con:value>urn:dece:type:status:suspended</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dcbd72c5-e19a-4fe8-adf0-f08116ba441b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f5c5185-c750-4c6c-bccf-aa838fec65d7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7c3457b5-4fc1-4244-abe5-f31d0830661a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_020_DTCreate_retailer_ACCOUNT_USER.STATUS_status_of_'blocked:tou'" searchProperties="true" id="cbbeec47-7905-4d1c-ae36-d45734cbaa88"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="81be167e-2662-4a4a-8871-66368f861845"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="9c7693c9-1f6d-4d8b-996d-d25b6dd06cf2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="cf34feae-461d-4393-b060-69bf327a66e8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="9137a079-4428-4381-b3fb-8ad4901fdb67"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="f89f2b6d-51a8-492b-b1e0-9001f377d150">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="a836adf4-76df-4a8d-b832-81370e218dbd">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="98f83989-393d-49fc-988e-f899d5a07c21">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == blocked:tou" id="e807598a-685f-447e-913d-36e3cab6da28">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def useroid = tC.getPropertyValue("USER_OID");
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbNode - $e";
	assert 1 == 2;
} 
finally {
	assert dbUtils.userSetStatus(useroid,"blocked:tou") == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="93c8e4bd-d0ba-409b-a44f-b308150a5e23">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>09B6D4CB6E0D2A25E05307991F0A3AB3</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>09B6C9683478076EE05307991F0AE221</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418051540388@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B6C9683477076EE05307991F0AE221</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B6C9683477076EE05307991F0AE221</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B6D4CB6E0C2A25E05307991F0A3AB3</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B6D4CB6E0C2A25E05307991F0A3AB3</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418051542118</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_22b88635-fc4a-4cfb-9659-b5323b016715</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvNIGV8wBlyBKm7JuhJyAYYd5mVLyG2jxJaJJXPJ149kwMEEsuw+udRudZ/uPjrSDUNRaDodxiDhJKalTRRS5mTWlpIm1IkRI8yhKALmcOyMO8MHx6zoDjpsUUpuv6X8M0dGvapXbRXqCKlWvVFT59iyVLOKmhjbttWc+8KVsRRcyjiivKWYumGphqnqjYlRcwzdqdUqzVrjt1KaQsJEbOFS0ZU9qA1rKQvOl46mrdfryrpaiZNAM3Xd0H4NH8Z4ARFS2je7irJESXvvjyseYAhDXMFxpN1oBZ8bjzljElDE0wT2ubxLuXRNb2rCx2Mk+KHke8FzqR9nyx6iMSUYheQDyf4MgS9ir9QJgzghfBFdLMLQZWAVNljFhkV/KFoR2pWBCggThlS2QMY+1gh8SIBiKP0cuS3lx3VTy7ZOEkSZHycRKy7/Gx6gKwjjJXgqO5S1h3Z9wDOdat8AdlyKw5SRFTxKsi4RBrafJuDrQ5WeE/DJ5oEwQdANk+i0Y3gny103+iQAxv/PgI6GswsyRWEK7b6L3EntxbS2TwmEy155Wl1aw5FPmm+tDMCxc2bIR7tbnpAyJ9Fux31kPo1H4NZo+qz1f3l3j9qYjNfl7X2gfwR3y+bHvBHY0/5k2P2w3fvZaD4brdHs9W7d2Fpl6oUdk+FbNFmY9jQOfBj6SEcaNO5p2qBsXfW3DzPDhp9dw/Z4Z/L3YAJTHvrb6ttLuRyXmy/P/oytp1Gzu6rb8bvn3s2e++Pf67/S9evCTeohI3j4YY3ohLXyco7wF22HMz9O56+A+WEpaeD2S7diSoh/L2bSQjzVz1ydpRQfxoFypS13Se1wUiF3xHPEDHdrvdm1+1avaw/0ntkxawO9VtXrzaZxq3eqnW71IDI7FCcQezH1icwlJXdHm+8B4shhQD1I1FWcCqVjyjcR+4ijkktH4hDElMEkFvLM3959FOgEJ+TVCFJuRlW8tYjOlNJjzJ/oU9LxOSRFTW4UNHkEmCwJSOGWvGaC2IyLXryjVcpDo7JCFQqpkPZEqqxjWo2axki0DEEi1aLYS0OoLBfLrDMa231NFWGWWUeDSXbaLtZ1+u/QAuHjEenAZC1dEGOEM5eLdSjkYsGmcVzwIXwn9Yg8WKKfPCF4h6T465Mmkh85R0RFB8i556mhEFU7LShP5K0IzomeX9dCxcW5bx/G8Y4q75V0tUqzAdSlviUivCZkztDGgFMhS9tJ/AZUy0NoV90BOeqTzLm9iC/lCzrmiEMk6FLKlldc+mNg8tJ3Bc83174oCilF3zhs+DlbLxQPFon42zcNdrD0E+Zn8VnHifc5rjOxjvKIOsWdzwkN5Erq//YCKXAswhKhXHFyHPxcgHPJi8a8yTkWLtg0Tzlc/lOSktRSEMZxSrnbVzLDsUxmOPl2Cc6n05cwmRLnTzPy728zlWQUwCAedIxk8eUN60j+0+BIavdJT9W217QbVate1+v24FhtB6Zp5E0poGt/MX+1HPXplOPtPw==</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_023_DTCreate_retailer_ACCOUNT_USER.STATUS_of_'merge_deleted'" searchProperties="true" id="c4f7d870-dab8-4d89-9bfd-1a18361e4fda"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e3265625-8720-46d0-a325-606f9f65205a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "UserIdNotFound");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="4bd503c3-b410-4cf4-92e2-e5444f3ef8df"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="ac8faf59-23dd-42ef-ae60-2c4448c9b3d7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="c964ddf2-0eed-44f7-b71e-33ccf673d1a1"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="a6e691b3-cda0-45ed-a0ce-1314410daa6f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="a97f15df-2caf-4f4b-a8c8-48d01e83ca40">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="bb8d84a5-1ec6-45e0-8214-0feb0e438365">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == mergedeleted" id="f64ea7e3-439c-44b0-857d-f95579d5be27">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def useroid = tC.getPropertyValue("USER_OID");
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbNode - $e";
	assert 1 == 2;
} 
finally {
	assert dbUtils.userSetStatus(useroid,"mergedeleted") == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="3f5b7712-e3cd-4b7c-a004-8c56127e824e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>09B6D86EBE404173E05307991F0AD954</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>09B6D4D020852A21E05307991F0A4CF5</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418051601475@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>UserIdNotFound</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B6D4D020842A21E05307991F0A4CF5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B6D4D020842A21E05307991F0A4CF5</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B6D86EBE3F4173E05307991F0AD954</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B6D86EBE3F4173E05307991F0AD954</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418051603245</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_ee5d900d-e0a7-4661-93d6-6473e77997df</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZXzhalegisQww2wSMkDI5WVLkRtQsCVHkrl9/UoGPJhclt0nl9qt7tPdR0e6ECiOXL8jBHBJGC2t44gKP7O2jJRTnyFBhE9RDMKX2B91bq59t2z76LDFKPWDlvE3QC30bDs0wUYNs1qvO6ZXCetmvdqoQKPheY1wqlyFSKFPhURUtgzXdqqm45p2c+zUfMfxa42y49nPRmkCXKjYyqVsG3tQa9Ey5lImvmWtVqvyqlJmfGa5tu1YjzfXIzyHGBnti11FWSLe3vvjcggYogiXMYutC6vgcxEKf0RmFMmUwz5X+Fku27I9S/mEgsy+GfleCPt0yrLlFaKMEowiskW6Pzcg5ywsdaIZ40TO40+LcGwd2IQ1NrFTpd8MqwjtzEAFhFwgU8yRs481hClwoBhK98N+y/h23tSyrWOOqJgyHovi8r/hAbqEiCUQmuJQ1h7a+QE/6FT7ArDfpzhKBVnCrSZrgjCI/TQBnx+qdMdhStbXRCiCroVGZx3DO1nuuhGQGQj5fwZ0NJxdkAmKUmgHm9Ws6zX7C7sZea+T2mpkkeR6Xmn0+q0MwLFzZshHu1uekDIn0W6HiJBceLT29PvH1u48rCZPTTx6WYnkeerIu/gH7XmXD83vXtdLUmaPekH8LEdcTAZOdDf4lbxtx090mQz4otOdPKVsPKzMh3QQuB4KZonzs8perh+eB/XmY2W2DX6u/7pv8MeHee+xaV9eP5Hfk8U2fegyESXb1+ewfj/+/d29iX/dTzpB5SWpX/1ad24fv89IehmtWnk5R/iLtsOZH6Uvr4DlYalp0A9KPTUlJL8WM20hoTnNXP1Ei4+QQKXR1ru0dvipkjsS+mqGu7XtXdaDZr172a30qk6j0rVrFVsdGKdndwKvVj2IzA7FCcQrRqdE59KSu6PN1wBx7AugIXBzyVKldML4ImKAJCr16VAdAkYFjJmSZ2e+ojVK0eZ1u+HpYtbkm3iBGKkbpVsmB3TAO1MJvKjJzYImDwGThIAWbs1roYgtpOrFG1qmMnLKS1SmkCpp51plfbfarFmCxEkEGqkVszCNoJzMk6wzlth9XRNhkVmH3XF22j6t6/TfoQXKJyTaQehaLkGNET64XKqHQj4t2HWOCz6E76Qh0QdL9VNygndIir/+0ETzI+eIqugAOfc8NRSiWqcF5YnCJcE50fPrWqm4OvftwzjeUPmtnC6XaTaAhtY3rsJbSuYcawQ4VbK0GbMFUCsPYZ11B+SoTzLn9iK+VM7pSCIJsaJLKVuecemPQOhLv694vj73RVFIqfomYS0/sl1F6sGiEX/5psE+1n7KfKc+K8bDP+P6INZRHlWnuvMloTO90vq/+YQUmKmwRCkX48fBPwrwUfKiMW9yjkUqNr2kEj7/U9KS1DIQxiylsh8YmeFYJjOccpOA/8fpXZhMifOnGfn3t5lJMgpgUA86QbL4+ob1Nf/p7Ehq90nfqW01sF27WXU7rnOsttWrXi1vSgFd+535veWoT6ccb/8D</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_024_DTCreate_retailer_ACCOUNT.STATUS_of_'deleted'" searchProperties="true" id="e5cfd252-5ec0-40ad-9429-8e2b067435d2"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9e0d3368-5839-4198-a7f6-3052cc6bdd0c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="0d49f38e-39cf-4604-b721-48bcfefab53e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="22399bac-98bf-4842-bec1-4a4d7c7857cc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="3a9ce0f1-6e14-482c-8caf-139ad8e803bc"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="42661a50-09cc-49af-808e-3631f5b43dc6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="bd301302-eb62-48a5-b9d2-216eca3da09d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="85cd052f-9abc-4f4a-a754-eb72fe2da0f4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT_STATUS ==deleted" id="ebb90503-cfa9-4828-b548-3c14c9c47294">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acctoid = tC.getPropertyValue("ACCOUNT_OID");

try {
	a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	assert a.accountSetStatus(acctoid,"deleted") == 1;
}
catch(Throwable e) {
	log.info "Error - dbUtils.dbAccount - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="4903976b-0834-4ea2-aa8d-647ffe10c04d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>09B6DAA63B71418FE05307991F0AE752</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>09B6D4CEB1742A29E05307991F0AF098</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418051638657@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B6D4CEB1732A29E05307991F0AF098</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B6D4CEB1732A29E05307991F0AF098</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B6DAA63B70418FE05307991F0AE752</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B6DAA63B70418FE05307991F0AE752</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418051640427</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_547aaca8-03dc-40bf-a0b8-ef2be016e83b</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZXzBBHAFqrhllklIwiXZmXnZEnLbVmJLRJK55OtHMuDB5LLsPrnUbnWf7j460qVAaeL6XSGAS8JoZZMmVPi5tW1knPoMCSJ8ilIQvsT+rDu+8d2q7aPDFqMyGrSNfxYtCJFbW5gXUA9Nz0VgojpCpodbNdTCTmsBF8pViAxGVEhEZdtwbcczHde0m3On7juuX6tV3Yb3y6g8AhcqtnKp2sYe1Ea0jVjKpW9Z6/W6uq5VGY8s17Yd68f4ZoZjSJHRudxVlCfinb0/rgaAIUlwFbPUurRKPpeB8GckokhmHPa5go9y2ZbdspRPIEj0xSj2QjCiIcuXfUQZJRgl5BXp/oxBxiyodJOIcSLj9MMiHFsHNmGDTex49IthlaGdGaiEkAtkihg5+1hTCIEDxVB5mI7axpfzppZvnXNERch4KsrL/4YH6AoStoTAFIey9tDOD/hOpzqXgP0RxUkmyApuNVmXCIPYTxPw+aEq9xxCsrkhQhF0IzQ66xjeyXLXjQGJQMj/M6Cj4eyCPKIkg84DsPTXN+qx4Lke15/D5va+0d0274Jus50DOHbODcVod8sTUhYk2u3ov4SjBaM/re+THzfWX/NXVr+f3KH+V2e54tMbEaVrfrtCm952eu0KbqWv0XxMB0lyEV4P56NtMvkaX0svGKznw2jiRsMfsjFB7Pvw8c6eWGskn7nsDeatcBLHE+n1kjCgP2uLh+nq299Zdt+CpvudjEUj+op+keH1OM2ao5jzu5fl06xXk0/NPk6T5rjxJFm7KOcIf9l2OPOzbPEEWB6WmgajQeVKTQnJz8VMW0hghrmrv9TiIyRQaXT0Lq0dfqbkjgS+muFubbd6F4Nu96LWa9ie07wa2vWa3Wi1nCu7O2zU3YPI7FCcQOwzGhKdS0vujjafA8SpL4AGwM0Vy5TSCeOTiAMkUWVEp+oQMCpgzpQ8O2lmJ1HMwwi7SS3KvPDVew1ZnRmVWybv6B3vhhJ4WZObJU2eAiZLAlq4Na+FIraQqhcvaJXJxKmuUJVCpqSda5X1Xa9ZtwRJlwlopFbKgiyB6jJe5p2xxO7rmgiL3DodzvPT9mFdp/8OLVA+AdEOQtfSAzVGeOdycQ+FfFiw6xwXfAjfzQKiD5bqp+QE75CUf/2hieZHwRFV0QFy4XlqKEW1TgsqEgUrgguiF9e1UnF17juHcbyg6ks1W62yfAANrW9chbeUzDnWDHCmZGk7Z89ArSKEddYdUKA+yVzYy/gyGdOZRBJSRZdKvjzj0p+B0Jf+SPF8c+6LopRS9U3CRr5n6yfqwaIRf/qmwT7Wfsp8rz5rxoM/43on1lEeVae68yWhkV5p/d9+QArMVFiilIvx4+DvBXgvedlYNLnAIhWbFpmEj/9UtCS1DYQxy6gcDYzccCyTOU65XYL/x+lNmFyJi6cZ+fe3mUlyCmBQDzpB8vj6hvU1/2l0JLX7pG/U1usPe06j5nbd1rHaXtmtZtGUErrOG/Nby1GfTjne+Q0=</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_029_DTCreate_retailer_ACCOUNT.STATUS_of_'pending'" searchProperties="true" id="4fd9277c-bc2a-4716-aeea-96321d5b703f"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="10403edd-5432-45b8-a541-65a6afdc9414"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="be65d500-f6a2-4d5d-a029-1071b2077022"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="76d437e6-ae32-43f0-9acb-d59093520412"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="dea30c34-c3c5-4305-85d7-c8182de037c3"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="974eb4ad-23bb-4800-9197-9347692adb43">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="d756dc87-c8f9-47bf-8830-f103dfdebefc">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="8682df9c-9993-4803-adb7-482689dd6980">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT_STATUS ==pending" id="b145ad04-cf4e-4415-9d01-38e5a68e9a2e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acctoid = tC.getPropertyValue("ACCOUNT_OID");

try {
	a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	assert a.accountSetStatus(acctoid,"pending") == 1;
}
catch(Throwable e) {
	log.info "Error - dbUtils.dbAccount - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="a0285e1f-b9d4-43be-9975-7ad5e0c2e15e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>09B6DE0AFF852E72E05305991F0AF82E</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>09B6DB59308F25E3E05305991F0AFA6A</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418051695686@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B6DB59308E25E3E05305991F0AFA6A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B6DB59308E25E3E05305991F0AFA6A</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B6DE0AFF842E72E05305991F0AF82E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B6DE0AFF842E72E05305991F0AF82E</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418051697366</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_70d0b85e-3c9e-4ae8-8cba-bd48a317ffce</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbZcuo4EP0VyvcxZbxhFlegymG5IQUkLMkk8zIlyw0IjAyWzJKvv5IBBxPIMPPkUrvVfbr76Ej3DC0C03EZg4iTkOa2i4AyJ7FWlTiiTogYYQ5FC2AOx87Q7XYcM6876LhFybUbVeWfgmHr4Bcrqo6soloo2qB6OvJV3cI+GLbtm54tXBmLoU0ZR5RXFVM3Cqphqnp5ZNiOYTmWnjcL1t9K7g0iJmILl7yuHEBtWVWZcr50NG2z2eQ3Vj6MJpqp64b23u0M8RQWSKnd7ytKEkW1gz/O+4AhCHAehwvtXsv43PvMGZIJRTyO4JDLv5ZL1/SKJnx8Ria/lHQv+G06DpNlHdGQEowC8olkf7rAp6Gfc4NJGBE+XVwtwtBlYBW2WMVGgf5StCy0GwNlEEYMqWyKjEOsAYwhAooh9zpoV5Vft00t2TqKEGXjMFqw7PK/4QG6hiBcgq+yY1kHaLcHvNCp2j1gp01xEDOyhp4k6xJhYIdpAr49VO4lgjHZdggTBN0yiU47hXe23HejQSbA+P8Z0Mlw9kHeUBBD7dMKingdvvc0zyzsHj2zF2wmn5V5wW1WEwCnzokhHe1+eUbKlET7HV5P94r1aeU1ahUHd+WVaXDMLF97eBn9Brdt2O8jFHS6eqn/7NKn3fZ3/a1F1/bdYNivk/YgtntBT5uF28eP8pP2yudkELSJ3n3YThca9Hxe6vPRm7lky3kwp2b3c7cL7BdxGMZP/VHH7zzbs4+J0Z+9zHmzP7pbftTNfuC/l2ZvFTd4f/TK/XBo/TXpNvXYrablnODP2o5nfhh7M8D8uJQ0aDdyLTElxH8WM2khvjpOXJ2lFB/GgXKlJndJ7XBiIXfEd8QM92u98lBsNHW31SoXzGbJbOq2pduVitEStrLZPIrMHsUZxHpIx0TmkpK7p83PAPHCYUB9iNR1GAulY8oPERuIo1ybDsQhCCmDUSjkeevBukQnxgp7RQPIxF7tPGvnzYQm90L+TJ8jd8whympyOaPJA8BkSUAKt+Q1E8RmXPRihdYxD4z8GuUpxELaI6myjlko2xoji2UAEqm2CP04gPxyukw6o7H911QRZol10Bwlp+1qXef/ji0QPj6RDkzW8gBijHDhcjGPhVwt2DROCz6Gd2OfyIMl+skjgvdIsr++aCL5kXJEVHSEnHqeGzJRtfOC0kT+muCU6Ol1LVRcnPvacRwrlF/l4/U6TgZQkvoWifCakDlDGwKOhSztRuEcqJaG0G66A1LUZ5lTexZfzKd0yBGHhaBLLlnecOkPgclLvy14vr31RZFJKfrGYcsv2eqBeLBIxD++abCDpZ8wv4jPJoz8r3FdiHWSR9Qp7nxO6ESupP7vrpAChyIsEcoVRqfBLwW4lDxrTJucYuGCTV7M4fqfnJSkqoIwDmPK2w0lMZzKZIKT75bgfDl9C5Mocfo0I//+NlNJQgEM4kHHSBJf3rCO5D+dnEjtIek3tX2wK5Zebpp208qorVt006Zk0NW+mb9bTvp0zvHaHw==</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_032_DTCreate_retailer_ACCOUNT.STATUS_of_'mergedeleted'" searchProperties="true" id="1ec7fd51-3fdd-4cfd-971d-a046507b8c06"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="98d3ada4-0747-4f37-b7f7-7c8cbcba11ef"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="8ce21667-b5eb-4ab7-b303-eb3a745943bf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="9e2bd098-abff-4c8a-af45-f61c0ee2fe56"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="a23d1e50-2505-4b80-b1bf-39d8fb020633"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="4cabee6a-9753-4b04-8a73-fbaee43bd1f2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="517bc82b-3acf-46a5-b7b0-0449348be41b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="757b2c84-1674-4b1a-948a-faf579a885c1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT_STATUS ==mergedeleted" id="434e6eb3-9518-490b-a062-ab94688cc3cd">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acctoid = tC.getPropertyValue("ACCOUNT_OID");

try {
	a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	assert a.accountSetStatus(acctoid,"mergedeleted") == 1;
}
catch(Throwable e) {
	log.info "Error - dbUtils.dbAccount - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="bd073c02-59c0-43bd-9336-fffdaec1ff08">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>09B6E16241555CB8E05307991F0ACDAD</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>09B6E15FE00A5CB2E05307991F0A6A03</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418051753240@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B6E15FE0095CB2E05307991F0A6A03</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B6E15FE0095CB2E05307991F0A6A03</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B6E16241545CB8E05307991F0ACDAD</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B6E16241545CB8E05307991F0ACDAD</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418051754920</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_7cef368d-bc4e-46c8-a2ee-f69911cd73d7</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZXyJubkCVQRycUISAgxJ5WVLkRujjC0RSXacfP1IBjyYXJbdJ5fare7T3UdHOhYoiV2/LwRwSRit5UlMhV9Yu0bKqc+QIMKnKAHhS+xP+9cj363bPtpuMWrBsGv8A63WAtte03QQNE3vyDsyEWrapt0J22HDc52nBVKuQqQQUCERlV3DtR3PdFzTbs+chu94vtuqe677aNTmwIWKrVzqtrEBlYuusZRy5VvW6+tr/fWoznhkubbtWA/XoyleQoKM3vG6oiIR7238cT0EDHGM65gl1rFV8TkOhT8lEUUy5bDJFX6Vy7bsjqV8QkGiH0a5F8KALlixHCDKKMEoJu9I9+ca5JKFtX4cMU7kMvmyCMfWgU3IsYkdj/4wrCq0AwNVEHKBTLFEzibWBBbAgWKo/ZoEXePHYVMrts44omLBeCKqy/+GB2gGMVtBaIptWRtohwf8pFO9Y8B+QHGcCpLBjSbrCmEQm2kCPjxUbcxhQfIREYqgudDorF14e8t1N4YkAiH/z4B2hrMOMkdxCr3FQzTh3mzaIeSyNZ6viH0ya686c0aibgFg17kwlKNdL/dIWZJovePCO7d/uz8z75fzPmTh03PQvHi+mQt2PbpC5464t7NhlD6PRwiu7kaTJyd7bM3s9iTtjCAnl8mt1w4DYcdjS7zx0+xe/rwdPvxkZ+lg4U5vhpdhczm4m0By2XYb1nv0Mr68OaHk8pe9Op9MnIej99sLfp/fMM4a9NEOLh7fJ3OZLF+jBgvOuXt1N47klZMt7+fX3bKcHfxV2/bMT9OnZ8Byu9Q0CIa1MzUlJL8XM20hobkoXP2VFh8hgUqjp3dp7fBTJXck9NUM12u7c9I8dZqu5zS8xuCkfWo3juxWp+Oc2f3BsD/ciswaxR7EAaMLonNpyV3T5nuAOPEF0BC4mbFUKZ0wvok4RBLVAjpRh4BRATOm5LmV5OB0njskzCVv5nkWu7+fwuazUbth8pbe8v5CAq9KcrsiyRPAZEVA67amtVC8FlK14gVlqYydeobqFFKl7FyLrO967YYlSLKKQQO1EhamMdRXy1XRGEusv66JsCisk9NZcdi+LGv/37YDyick2kHoWk5ATRE+uVucbSFfFuw6uwVvw/fTkOhzpdopOcFrJNVff1mi6VFSRFW0hVx67hsqUa39gspEYUZwyfPytlYiro59bzuOF1R/qadZlhYDaGl54yq8pVTOsaaAU6VKbzP2G6hVhrAOugJK1HuZS3sVXyqXdCqRhETRpVYsD7jzpyD0nR8omueHPigqKVXfJOTyM9sgVu8VjfjbJw32sfZT5rH6vDIe/h3XJ7F28qg61ZUvCY30Ssv/2xekwEyFJUq4GN8N/lmAz5JXjWWTSyxSsekplfD1n5pWpK6BMGYplcHQKAy7KlnglG8r8P86fQhTCHH5MiP//jQzSUEBDOo9J0gRX1+wvuY/jXaUdpP0o9g2zk5tu6PE1t0V22bfPiqbUkHX+2D+aNnp0z7He38A</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_033_DTGET_retailer_NODE_USER_SAML_ASSERTION.STATUS_mergedeleted" searchProperties="true" id="57a703b8-3666-4732-8521-6be9626db29f"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="81e4d4a4-a199-4c75-9eb1-69b9b6da9772"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTLCS"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
tC.setPropertyValue("expectErrTypeSTSGET", null);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="41809161-bc30-4d27-b7ae-a54e3569c517"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="47813c7e-4c00-4a66-978d-09ba543a65d9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="ac2fa3fd-7b09-4e6a-9811-4bc4a1788e5a"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="8b55be0b-3c62-468b-85b3-4e54e41c683a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="4add6bb1-d307-429a-97d7-d27cc92387ff">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="df25bbae-f299-4fad-bee2-a30c52226d5e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="dec88a9d-80fe-47ae-840e-8020f2914579">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set NODE_USER_SAML_ASSERTION.STATUS to mergedeleted" id="7d7ce198-1552-4750-b6fa-6c26e0d2e12e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try  {
	dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
	assert 1 == 2;
}
finally {
	assert dbUtils.samlSetStatus(tC.getPropertyValue("assertionUUID").toString(),"mergedeleted") == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator1" id="1a4f95f0-e0af-4832-81b0-ed60c933fa1d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B6E50928F1645FE05307991F0AD21A</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B6E4F1BF973AC1E05305991F0AA726</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418051813179@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B6E4F1BF963AC1E05305991F0AA726</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B6E4F1BF963AC1E05305991F0AA726</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B6E50928F0645FE05307991F0AD21A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B6E50928F0645FE05307991F0AD21A</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418051814719</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_5c2d7da4-f32d-48e1-bf6a-80a32d3fdd91</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZpb+o4FP0rKO9jFbKQhUQFKQ3wxAx0Yel0+qUytgPuSxyIHZb368cOkBJKO8wgpMg3N+eeu/jYtwwksekHjOGMk5TWtklMmV9YW0qeUT8FjDCfggQzn0N/HAwHvlnXfXD8RKn1Oy3lzYYmchGw1KhhItVqYkOdRQ5QmzoQhkaEkGcIV8Zy3KeMA8pbiqkblmqYqt6cGLYv/o1m3XWtV6X2jDMmsIVLXVcOpLaspSw4X/qattls6ptGPc3mmqnrhvYyHIzhAidAad/uMyoCZe2DP6wjDHEcwzpME+1Wq/jcIuaPyZwCnmf4EAt9FUvXdE8TPoiR+Q+l/BajPo3SYhkCmlICQUx+A1mfIeaLFNWCeJ5mhC+SL5MwdAms4i1UoWHRH4pWpXYlUIVhxoDKFsA4YI1whDNMIa5NR/2W8uO6rhWfTjJAWZRmCasu/xsfTNc4TpcYqeyY1oHa9YAXKtW+xdDvUxjnjKzxvRzWJYCYHbqJ4fVQtccMR2Q7IEwM6JZJdtopvbPlvhodMseM/58GnTRnD/IM4hy3eWiNNzwcEG+G/+4Nx24a8R0cj+e/hq2CwKlzYShbu1+eDWU5RAf41YgEW9J9eGK/H4f24gY4Tnaf7Vbhn9vVr5lz7wRhNxy9iJ8VDhqiiMhb/PyrMdmRn1PnYdMYLIZJ5DHYXyemNfLeA3sXLLXuDUuGL+YoWGeTm649TaeN7QA8vFt0iLThdO4uw6fgaTp8QYtZf+u5wR8Tr9EZhCuWoueA2sPZq2t7cfO1myWQTp9vkpdDumf8q7bjnh/ns3cM+XEpx6DfqfVElwD/XsykhSA1Klz9pRQfxjHlSlt+JbXDz4XcEeSLHu7XunfndG3dM5s93bHsXle3G7rreUZPDzqmERxFZs/ijGKY0ojIWFJy92PzPUGY+AxThDN1neZC6ZjyDWIHcFDr05HYBClleJK2lJmHEHadmWpGBlQtWzfUZhNFagQhamKRhchJqd2n/IE+ZEHEcVZV52ZFnUcYkiXBUsLlhDMx4owLhBVY5zw26mtQpzgXIp9JvfVNq2lrjCTLGEvOWpKiPMb15WJZ1Ehj+6epAsgKaxh2LSvoWWav4+pO466rW7qsa1Ff13WKTfll+ufvjpUSPohIByYTvcOi2/jCGWQes/xUDfviWXWED3JE5P4TZecZgXsm1Vcf0yTHqBylUXfyFo7fjCPv0v3cUIHWzrMqo6E1geWmKI92ofhCI9rHhq1AfVXP1+u8aJErtTAT8JqQREMbY5gLCdtN0l+YaiWEdtV5UbI+i1zaq/xyvqBjDjhOxEDViuUVF4QxZvKC0Bd7Ynvt7aMSUtSN4y2/ZAtjcbmRjL+9/0AfSj9hfhSPTZqhj3ZdwDqJI/IU9wNO6Fyu5Fmx+2IyYCpgiVC5NDsFvwRwKXjVWBa55MLFNM1yjr9+U5Py1VIAhGlOeb+jFIZTSS148t0S+x9On2AK1S6vceTf73EqKUYAYnH5Y6TAl6exL+efzk9k+RD0kzJbPeOu5zmNIDQKZbb3yhy4plMWpcKu/cn82XJSp/MZb/8D</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectErrTypeSTSGET</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3b37da0b-8898-4bd3-a30a-f92dba72175c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_034_DTGET_retailer_NODE_USER_SAML_ASSERTION.STATUS_deleted" searchProperties="true" id="e7e3a9ee-cc66-4266-9c65-9fccd26850ee"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="276730d6-2393-4f37-ab4a-bf1b5d91345b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTLCS"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGET", null);
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="0d8617c6-c100-4669-8e94-e2495a754784"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="6f02c8a0-501a-483d-a262-f779de8e3477"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="c859cf8b-21d2-4952-887e-3a36dcf5c701"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="ea311271-bcce-44b1-85b3-0f2bc4524fe7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="5cc87dcb-1cbd-4022-b554-b23a686aa16b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="f209e1d6-5462-4281-9949-7c801a0634f3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="a66852ec-1d6d-4e57-9e69-a4197708eaa5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set NODE_USER_SAML_ASSERTION.STATUS to deleted" id="641657f1-646b-47ff-889c-7b2ca7871847">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try  {
	dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
	assert 1 == 2;
}
finally {
	assert dbUtils.samlSetStatus(tC.getPropertyValue("assertionUUID").toString(),"deleted") == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator1" id="4dae3a68-587a-4930-b5b3-1f200f386fc8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("expectErrTypeSTSGET", "unauthorized");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B6E5B1BC963ABFE05305991F0A40C0</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B6E4F1BFA43AC1E05305991F0AA726</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418051872830@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B6E4F1BFA33AC1E05305991F0AA726</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B6E4F1BFA33AC1E05305991F0AA726</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B6E5B1BC953ABFE05305991F0A40C0</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B6E5B1BC953ABFE05305991F0A40C0</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418051874510</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_361850aa-afe0-424f-9e76-b38951b02505</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+o6EP4rTP3olL7Q8tIRZsqbB8UjBxQ5fnFiukC0TaFJKfjrb1KgUhQv937qZLvZfXb3yZNcMRT4puMyBhEnIS2sA58yJ7XWlTiiTogYYQ5FATCHY2fk3vUds6g7aL9FKfTadeUFrKpVq5Y8taSXddXybFCRjV9Vr2J7tmVVTbNaE66MxdCjjCPK64qpG5ZqmKpefTBsxyg7ZqWo29VnpTCGiInYwqWoKztQa1ZX5pwvHE1LkqSYlIphNNNMXTe0yV1/hOcQIKVxta0oTRQ1dv646AEG38dFHAbalZbzufKYMyIzingcwS6XdyqXruk1Tfh4jMwulGwveD06DdNlC9GQEox88oFkf+6Az0Ov4PqzMCJ8HpwswtBlYBXWWMWGRS8ULQ/tzEA5hBFDKpsjYxdrCFOIgGIoPA57deXivKmlWx8iRNk0jAKWX/43PEBX4IcL8FS2L2sH7fyA33SqcQXY6VHsx4ys4Lck6wJhYLtpAj4/VGEQwZSs+4QJgq6ZRKcdwjtabrvRJjNg/P8M6GA42yBj5MfQeHrWbweDBdeX5iQotW7mOOHeYNZhXK+nAA6dU0M22u3yiJQZibY7riFB95NK/3pQaRta9Vdzs8GdpPW61rqtrmV0a6TrfbxNB/1bNF9PLpv6XTt0Z9idd6ary9YmWY11/H53s3ka3KyXz38N+9mstIdaWFmaN9eD8avrQwDJ/Om9PWyySS+ht5eV4dM7166hVJoO3ag2xrT8eGnduL+Cx6QzWY//1K7762Y1ivqLcrNC/3afB/fsT+DWs3IO8Odt+zM/il/fAPP9UtKg1y50xZQQ/1nMpIV46jR1dRZSfBgHypWG3CW1w4mF3BHPETPcrvVas9yxm0azVbNLbrPb0e2SbtdqRld3Lb2l70Vmi+IIYiukUyJzScnd0uZngDhwGFAPInUVxkLpmPJDxDbiqNCjQ3EIQsrgIRTyzCv2cvVRXsZJxUo2/ptRmnO9XPKUwu+Q39P7yJ1yiPKSXM1J8hAwWRCQui1pzQSvGRetWKJVzH2juEJFCrFQ9kiKrGNaVVtjJFj4IIFqQejFPhQX80XaGI1tv6aKMEutw87DS2v0kp4G7WRtx//2bRA+HpEOTBbUBDFK+OaCMfbVnKzaNA6r3od3Y4/IwyV6yiOCt0jyvz6pIjmS8WRf1h535n5syIXWjqvKsnkrgjPGZ/e2kHMhAI39YJaouCzGq1WcjqIihS4S4TWhd4Y2AhwLfdo8hO9AtSyEdtZlkKE+ypzZ8/hiPqcjjriQA8oL6fKM238ETN7+PUH49blPi1xK0TcOa/6dreWLl4tE/OPjBjtY+gnzQHySMPI+x/VNrIM8ok5x+XNCZ3IlL4LNCWbgUIQlQsLC6DD4dwG+S543Zk3OsHDBpteYw+k/BalNdQVhHMaU99pKajjUyxQn3yzA+XT6EiaV5OyNRv79kaaSlAIYxMuOkTS+vGodyX86O9DcXdIvsmt1jWbXLZXclnEou27FLGdNyaFrfDF/tRz06ZjjjX8A</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectErrTypeSTSGET</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">unauthorized</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3b37da0b-8898-4bd3-a30a-f92dba72175c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_035_DTGET_retailer_Assertion_Expired" searchProperties="true" id="4d35f544-fde8-48f9-b686-3aad420ab7e2"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1c30a87d-28d0-4b23-86b3-d489b349019c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);
tC.setPropertyValue("expectErrTypeSTSGET", null);
tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTLCS"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="e6437c62-74a1-4e66-8cc0-f1a3ee0965e1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="d42241fc-7785-488a-910a-b6efa9a8e220"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="acc395c6-79d3-49b1-8fe5-a86ee5261622"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="22b0e703-1f89-4fe2-9194-a053072f1d6f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="827f34ea-03bd-4bb5-84a9-966327875689">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="e7531dbe-31b5-4cb3-96a0-bf0b53572634">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="6942c28b-e788-444c-b051-e9982efff717">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Expire Assertion" id="ccfbbaf5-6e4b-421e-ace7-ff29f1598a81">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try  {
	dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
	assert 1 == 2;
}
finally {
	assert dbUtils.samlSetExpire(tC.getPropertyValue("assertionUUID").toString(),-13,"months") == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator1" id="471a10c9-7f20-4c59-9ac2-d1119d789515">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("expectErrTypeSTSGET", "unauthorized");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B6E4F32BEE3AB7E05305991F0ACB85</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B6EBF2ECA87AEEE05307991F0A0F75</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418051930707@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B6EBF2ECA77AEEE05307991F0A0F75</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B6EBF2ECA77AEEE05307991F0A0F75</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B6E4F32BED3AB7E05305991F0ACB85</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B6E4F32BED3AB7E05305991F0ACB85</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418051932297</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_343205c1-0315-49f3-9212-c7473bc171ec</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbZcuo4EP0VyvdxynhhMbgCVSzmxpmQEMxNUnlJKXKDlRjJsWQg+fqRDDiYLMPMk0vtVvfp7qMjnXG0jG23xzmkgjBa2Sxjyt3c2tGylLoMccJdipbAXYHdoDe+dO2q6aL9Fq3iDzvao/3Ubj61nVDHdhjq9bmFdRRaju6gJtRQw4LQAenKeQY+5QJR0dFs06rrlq2brZnVcC3HtevVervxoFVuIeUytnSpmtoO1IZ3tEiIxDWM9XpdXdeqLF0Ytmlaxv34MsARLJHWPdtWlCdKuzt/XA0BQxzjKmZL48wo+ZyF3A3IgiKRpbDLFX6XyzTMtiF9Qk4Wv7RiL4Q+nbN8OUCUUYJRTN6R6s8YRMTCSi9esJSIaPltEZapAuuwwTq26vSXZpShnRiohDDlSOcRsnaxpjCHFCiGyp+p39F+nTa1fOssRZTPWbrk5eV/wwN0BTFLINT5vqwdtNMDftGp7hlg16c4zjhZwZUia4Iw8N00AZ8eqjJJYU42l4RLgm64QmccwjtabrsxJAvg4v8M6GA42yC3KM6g23/md3zEw9YfPuTvtPnQZMZ5dum9T8adHMChc24oRrtdHpGyINF2B+0FD9w5P78Z35xf9Kf+08VNfTwU0UsUBL2L2njTeEd34K+y+TU5v5rDxGI0XCxu79eiNszC68DPJoTa42Qwi0aZ+L2Ey6ZpPSTQipC38RYvMWar89eaxf96vzee2cWdOXkeoRlG8/bilnr3sTOuT/zfpB8bUU+0o2Ezbd9SA/+dWJcxqTcC72XI5vbU8ztFOQf4y7b9mQ+yp2fAYr9UNPCHlZGcEhI/i5mykFCf565uosSHC6BC66pdSjvcTModCV05w+3abPebXn1Us/vesNbrO57ZqJmNdtsamb1Bv9XYi8wWxRHEAaNzonIpyd3S5meAeOlyoCGk+oplUum49kPEIRKo4tOpPASMcpgxKc9WM7FeF1KwY16naZqu12YzaWXE0ipXTFzT67Q3F5CWNblV0uQpYJIQUMKteM0lsbmQvXhFq0zEVnWFqhQyKe2pUlm5r9UwOFkmMSikxpKFWQzVJEryzhh8+7V1hHlunXqzx0HwmB8H49vijv/t+yB9QqIcuCqoD3KW8MUNY+2r+bZq2zqseh++l4VEnS7ZVJESvEVS/vXBFUWSgij7sva4C/djQym0cVxVkS1cEVxQvri4pZ5LBejuB/OKqq/VbLXK8lE4SulSGd6QgmcZAeBMCtTbjL0ANYoQxkm3QYH6KHNhL+PLREQDgQQsJXEq+fKE6z8Arq5/XzJ+c+rbopRS9k3ARnxlG8Ty6aIQ//i6wS5WftI8kZ81S8OPcX0R6yCPrFPe/oLQhVqpm+DtG2ZgJsMSqWEsPQz+VYCvkpeNRZMLLEKy6SkT8P2fihKnjoYwZhkV/lDLDYeCmeMUbwm4H06fwuSaXDzSyL+/0nSSUwDLB6H0z+Oru9ZV/KeLA9HdJf2ku/2R7Q16jtPzvFx3na3umiOn0N0yuu4n82fLQZ+OOd79Bw==</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectErrTypeSTSGET</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">unauthorized</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3b37da0b-8898-4bd3-a30a-f92dba72175c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_036_DTGET_retailer_Cannot_get_token_created_by_nonaffiliated_llasp" searchProperties="true" id="4dfbf399-fd06-4aa8-bb58-b5d76844c602"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="bd95fa3f-3d4a-4822-a526-2ca3b2ff3402"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);
tC.setPropertyValue("expectErrTypeSTSGET", null);
tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdLLASP"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveLLASP"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="c666df13-c531-4512-ae31-8193b045097e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="c59656ea-576f-4b67-a7f7-5daa3a3dea4e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="facdc0a8-5441-4927-8d25-3f6967a82b0b"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="39dbd220-e63c-46a3-ba36-fd1506506e34">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="5b23691a-01c3-48aa-b35c-ce02186b3e77">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="5c054ad1-db97-4788-8e41-a65afe6a21bb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="997e8fe5-5081-4ce1-a4cb-953d3782af0b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator1" id="842a80b7-e05c-4e99-b2c6-92bcba64c34a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTLCS"));
tC.setPropertyValue("expectErrTypeSTSGET", "token_rejected");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B6E5B1A2A13AB9E05305991F0A6F93</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B6EBF4988C5B5EE05305991F0A70E5</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418051987713@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B6EBF4988B5B5EE05305991F0A70E5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B6EBF4988B5B5EE05305991F0A70E5</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B6E5B1A2A03AB9E05305991F0A6F93</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B6E5B1A2A03AB9E05305991F0A6F93</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418051989373</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_1030e3f4-5340-46bf-a744-d0979dd9ac6d</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMr5hAq5AlR2SWW+SSRYYMpOXLSG3sSZGMpbswHz9SgYcTC7L7pNL7dbp0xcd6YKjZWp7PueQC8Joa71MKfcq60ArcuoxxAn3KFoC9wT2Jv7drWe3TQ/tt2itcDTQ/nbcrtOJkak73bind/puX0dobunIMp1u151bsdORrpwXEFIuEBUDzTatjm7ZutmbWq5n9TzbanfP3SetNYOcS2zp0ja1Hak1H2iJEJlnGC8vL+0Xp83yhWGbpmX8uLud4ASWSBtebDOqAuXDnT9uR4AhTXEbs6VxYTR8LiLuTciCIlHksIsVfRTLNMy+IX0iThZftHovRCGNWbW8RJRRglFKfiNVnzsQCYtafrpgORHJ8sMkLFMB67DGOrY69ItmNKmdCNRgmHOk8wRZO6wxxJADxdD6Pg4H2pfTulZtneaI8pjlS95c/jc+QEtIWQaRzvdp7aidDvhOpYYXgL2Q4rTgpIRvalgzhIHvugn4dKjWQw4xWd8SLgd0zRU745De0XJbjRFZABf/p0EHzdmCzFBawPA2KZJ50L///WjbN5t49RAFP64nc//pvDOoCBw6V4a6tdvl0VDWQ7SDn65gdhaW81X4LZ34o3Mr5OXkJsnPfN+4GRezAnpfmWN+FW427k43jNzNrDQe+WV6V/Lpz81NNo9C4uMMJj+ch3C1QH/MiyBnzrPRIfdJx3rg+fMZjMmf/fIyeHwe/fUzCoJw0Zs93t9c2dPkvrc2+5uxMaezBDtjseAuA5nq09N3spn/Pkt/rZwEivjnoE7ngH/Ttj/zk2L+C7DYL9UYhKPWtewSEp+LmbKQSI8rVy9T4sMFUKEN1S6lHV4h5Y5Enuzhdm32g+6VG1i+7ZuOH/SvTNcx3X7fujb97nXf2YvMlsURxUtGY6JiKcndjs3nBPHS40AjyPWSFVLpuPYJ4ggJ1ArpWB4CRjlMmZTn5xIYxAXQJEaWM9+U+WZtMidDWusbE/f0PvdjAXlTk3sNTR4DJhkBJdxqrrkcbC5kLVaoLERqtUvUplBIac+Vynp2p+canCyzFBRTY8miIoV2lmRVZQy+/do6wryy3t76k4fqvH2Y2fG/fRGkT0SUA1fZBCAbCe9cL9Y+lQ9Ttq3DlPfwfhERdbRkRUVO8JZJ89froKgJqaekymlPuvY9NjRwjeOU6lBRSXA97PWVLZVcnv3hviUr1F61i7IsqiacK43LJbwhpc4yJoALKU2bKXsGatQQxkn3QM36KHJtb/IrREInAglYypFpVcsTLv4JcHXxh3LW16e+KhohZd0ErMV7tstUPloU40/fNdjDyk+aH+TnheXRa7vewTqII/OU974gdKFW6g7YfDAWmElYItWL5Yfg7wG8F7xprItccxFymuaFgI//tJQsDTSEMSuoCEdaZTiUyoqn2GTgvTq9ganUuH6ekX9/n+mkGgEM8lHHSYWvbllPzT9dHMjtLugbxQ2uO/1eL3AD9+pQcc/NK7cuSoPd8I35reWgTsczPvwH</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>87648</con:value></con:property><con:property><con:name>expectErrTypeSTSGET</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">token_rejected</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3b37da0b-8898-4bd3-a30a-f92dba72175c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_037_DTGET_retailer_Cannot_get_token_created_by_nonaffilaited_dlasp" searchProperties="true" id="1749ce48-2d26-4ee6-b54b-78f55a201dc4"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="09bd4bea-a444-4b86-92cd-9e71c181f168"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);
tC.setPropertyValue("expectErrTypeSTSGET", null);
tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdDLASP"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGET", null);

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="19af206d-03a8-42e3-9024-88149e1b0cb2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="0d75b9ca-e2b4-469e-99f1-77d8f1b5655d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="c8c1ab1a-fd39-4262-98e5-90b3a27e6b12"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="bcab6c01-edd8-4acc-afd6-8ba93f37e814">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="cadbc78d-7527-4972-94cb-c11b576bef83">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="009d1217-a12d-44c7-b382-498d15ebbc07">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="0c435a56-edc3-4aba-9db0-7beec9c04301">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator1" id="72295b9f-444e-4575-b44b-83504c0ad04d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTLCS"));
tC.setPropertyValue("expectErrTypeSTSGET", "token_rejected");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B6EBF498985B5EE05305991F0A70E5</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B6E4F275DC3AC3E05305991F0A7D1F</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418052042820@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B6E4F275DB3AC3E05305991F0A7D1F</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B6E4F275DB3AC3E05305991F0A7D1F</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B6EBF498975B5EE05305991F0A70E5</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B6EBF498975B5EE05305991F0A70E5</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418052044640</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_9f2470ff-4779-4af8-9299-be7d44c5d016</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+o6EP4rTP3olL5RaTvCDAVRVMRD1eP1y52YbiHaprVJEc6vv0mBSvHlcu+nTrab3Wd3nzzJKUNJbHo9xiDnJKWNZRJT5pXWjlLk1EsRI8yjKAHmcewFvfG1ZzZ1D223KI3RoKP8/dw2cNtCoYoATtQWfjZVF0euik5sK4KWG5lOW7gyVsCIMo4o7yimbrRUw1R1586wPcP1jHbTsJ0npfEAOROxhUtTVzaglqyjzDnPPE17f39vvlvNNJ9ppq4b2uP4OsBzSJDSPV1XVCbKuxt/3AwBQxzjJk4T7VSr+ZyGzAvIjCJe5LDJFX6XS9d0VxM+ISOzI6XaC+GIRmm57COaUoJRTP4g2Z8x8HkaNnrxLM0JnyffFmHoMrAKS6xio0WPFK0O7cBANYQ5QyqbI2MTawoR5EAxNO6no45ydNjUyq13OaIsSvOE1Zf/DQ/QBcRpBqHKtmVtoB0e8ItOdU8BeyOK44KRBdxIsmYIA9tME/DhoRq3OURkeU2YIOiSSXTaLry95bobAzIDxv/PgHaGsw7ygOICuuz3eTJ5vb8Ibnquv8puOH68LG7wY/Tyq1MC2HUuDdVo18s9UlYkWu+495/u+v7x6pjemfHF/GnomJNBhP66eg3P4E/2PFj+vnTNlyvSsqZA/tCLJxsfO/c69K0gIzezK+PCn5K0d5s93frJ5bmJ3YkVjFct7OftaXQeuOeh8yu2rk7msVZcjVN/MLSWmbtY5VP32nl1mBv1LSOzg8mD2799dpaPfh7D5WIyfrDGvnW8XPxy7Rm5CNNOVc4O/rpte+aD4vkFMN8uJQ1Gg8ZQTAnxn8VMWkioRqWrl0nxYRwoV7pyl9QOrxByR0JPzHC91l3/5MwftlzHbdu+fXam25Zuu64x1Htt/czeiswaxR7EfkojInNJyV3T5meAOPEY0BBydZEWQumY8kPEAeKoMaJTcQhSyuAuFfJsYLPtplG4SJIQGyjV2/lsdvLqvLSUxk3KJ3SS9yIOeV2UnZooTwGTjIBUbklsJpjNuGjGG1oUPDaaC9SkUAhtz6XMembLsTVGkiwGCVVL0rCIoZnNs7I1Glt/TRVhVloH173gtjxw35a2/2/bBeETEunAZDU+iEnCF/eLvi3l25JNY7fkbfheERJ5tkRLeU7wGkn91wdTJEUqmpQ1bUFXvvuGWlxtv6QqVbgguGJ7dWcLKReHv7sdyRtqvjWLxaIoh9CWIpeL8JrQOkMLABdCm1Z36StQrQqhHXQRVKj3Mlf2Or6Cz2nAEYdEUKZRLg+4+QNg8uYfCbIvD31W1FKKvnFY8q9s/Vi8WiTiHx822MPST5hvxec9zcOPcX0RayePqFNc/JzQmVzJS2D1DS1wKsISIV9pvhv8qwBfJa8bqyZXWLhg03PB4fs/DalLHQVhnBaUjwZKadjVyhInX2XgfTh9ClPKcfU+I//+QFNJSQEM4lXHSBlfXrOe5D+d7ejtJuknyW0NzbY98K1e36pJ7sAYVk2poet+Mn+27PRpn+PdfwA=</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectErrTypeSTSGET</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">token_rejected</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3b37da0b-8898-4bd3-a30a-f92dba72175c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_038_DTGET_retailer_Cannot_get_token_created_by_nonaffiliated_retailer" searchProperties="true" id="fe4ac639-da55-4c0d-a32a-5d8613d4316b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="94267910-7dfe-457c-9ec9-cf110c4e0dea"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);
tC.setPropertyValue("expectErrTypeSTSGET", null);
tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL2"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
tC.setPropertyValue("expectErrTypeSTSGET", null);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="fb35d01a-e9b8-476b-92b3-1400d786298e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="e17180cb-a2e9-4492-88b8-248cfcf277c2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="00e6dbfa-fd00-4bc5-88e3-b38b64923f2d"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="2872334f-0a53-401e-9e28-5f3eb605683a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="9adc278d-9e37-44bd-8b79-2052871c12cc">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="c3710a15-6005-4948-8dc2-d373cebf0e28">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="5ac9496e-560b-46b4-b3a2-8527307b83b1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator1" id="57025228-8f68-4ce0-bc41-85ede0255c65">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTLCS"));
tC.setPropertyValue("expectErrTypeSTSGET", "token_rejected");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B6EF5AA0556241E05305991F0A01FE</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B6F5F4BE51770CE05305991F0AA868</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418052098679@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B6F5F4BE50770CE05305991F0AA868</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B6F5F4BE50770CE05305991F0AA868</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B6EF5AA0546241E05305991F0A01FE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B6EF5AA0546241E05305991F0A01FE</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418052100189</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_57363d00-64bc-4400-ab15-ed7bed915ce6</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMr6Aje0KVEGAXc/kCmSSnZcpITegYMtGkgnk60cy4MFMkmX3yaV2q/t099GRLjlKYjvocg5MkJTWNklMeVBY21rOaJAiTnhAUQI8EDgYd2+uA7tuBuiwRauF/bb2E6xGa+aDp8PM8fVmA7m675qO3phF2PPAwbMmSFfOcwgpF4iKtmabVlO3bN30JpYT2GZg2fWW1fih1b4D4zK2dKmb2h7Uhre1hRBZYBivr6/110Y9ZXPDNk3LeL65HuMFJEjrXO4qKhKxzt4f1yPAEMe4jtPEuDQqPpcRD8ZkTpHIGexzRR/lMg3TN6RPxMn8i1buhSiks7RYXiGaUoJRTN6Q6s8NiEUa1brxPGVELJIPi7BMFViHDdax1aRfNKMK7cxAFYSMI50vkLWPNYIZMKAYao+jsK19OW9qxdYJQ5TPUpbw6vK/4QG6hjjNINL5oaw9tPMDvtOpziXgIKQ4zjlZw60ia4Yw8P00AZ8fqnbPYEY214RLgm64QmccwztZ7rrRJ3Pg4v8M6Gg4uyDfUZxDZ/xwu5wOF/1rPvWfSY5GbJndNUbhi7dsFwCOnQtDOdrd8oSUJYl2O27c0O3iMYXpxaQ3hyWlQzayx6IXNZfO0/Pb4+0arCf4miWs8eAPpl+91cty7nDT9RrijfYeH1rut6tv+XfDv+tf5BETf988pln3mVv+xWIy++sHJmPfNv35sCEel95Vv7v9ZwUem9Isvl4a+JkMb8L8+r4VhV/X4Us+aCEnGfeWqbvaLq2n++Fb9mRs8TZttstyjvBXbYczP86nL4DFYaloEPZrQzklJD4XM2UhkT4rXINMiQ8XQIXWUbuUdgS5lDsSBXKGu7Xp99zB0Ol2Tafp2k1rYDoN0/F9a2h2TWs4OIjMDsUJxKuUzojKpSR3R5vPAeIk4EAjYPo6zaXSce2TiH0kUC2kI3kIUsphkkp5dqev262bRuBNMwt5JnZh6c43UjFrt6m4o3esOxPAqprsVTR5BJhkBJRwK15zSWwuZC9WaJ2L2KqvUZ1CLqWdKZUN7KbnGJwkWQwKqZGkUR5DPVtkRWcMvvvaOsK8sI4Gk592cd4+rOz036EJ0iciyoGranogBwnvXC/moZQPS7at45IP4bt5RNTRkh0VjOAdkuqv30RRDClZUtR0AF36nhoqcY3TkspU0ZrgkuzllS2VXJ79zmEkK1Rf1fP1Oi+G0FIax2R4Q0qdZYwB51KatpN0CdQoQxhn3QMl6pPMpb2KLxcLOhZIQCIpUyuWZ1z8Y+Dq4g8l1zfnvioqKWXfBGzEe7arWD5aFOJP3zU4wMpPmu/l5zVl0e9xvRPrKI+sU977gtC5Wqk7YPsBLXAqwxKpXik7Dv5egPeSV41lk0ssQrJpmgv4+E9NyVJbQxinORVhXysMx1JZ4BTbDILfTn+EKdS4fJ6Rf3+f6aSgAJZPQelfxFe3bKD4T+dHcrtPeqq4Q2fY7A0cs9Uyr44Vt+u5XtmUCrrOH+Y/LUd9OuV45xc=</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectErrTypeSTSGET</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">token_rejected</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3b37da0b-8898-4bd3-a30a-f92dba72175c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_039_DTGET_retailer_Cannot_get_token_created_by_nonaffiliated_accessportal" searchProperties="true" id="3d44c56e-2ed1-4a64-8994-5c37a8a4c0a1"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="69e5e515-dc90-4c6c-ab27-11adacf81002"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);
tC.setPropertyValue("expectErrTypeSTSGET", null);
tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTLCS"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="c4c2e360-64bd-4264-b583-03d2006edffb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="98b842d7-b199-4ea7-b7c6-f0abb397fddf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for First User" id="c4889688-4ff4-4dfe-b3e5-5d418ccc7923"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="af2a1514-7a01-4ec4-81d5-7272a06e6ca2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="94ce99e2-0e17-4fb8-98a6-1c4901d87043">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="e54adb93-123b-49b6-b76b-54beaf3958b4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="0c37e421-19b4-4577-b4ac-854ef60450e0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator1" id="cf5a56c8-62d9-48ea-860a-4db548eeb60d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdAccportal"));
tC.setPropertyValue("expectErrTypeSTSGET", "token_rejected");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config>
      </con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B6F9573C7820A9E05307991F0AA246</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09B6F93E2D447CAAE05305991F0A7723</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418052153750@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09B6F93E2D437CAAE05305991F0A7723</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09B6F93E2D437CAAE05305991F0A7723</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09B6F9573C7720A9E05307991F0AA246</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09B6F9573C7720A9E05307991F0AA246</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418052155370</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_b936b748-7eb3-4572-bca4-a1c1876db71f</con:value></con:property><con:property><con:name>assertionUUIDFirstUser</con:name><con:value>_ab163a8e-186b-41b4-8e98-1a3fd2b4093e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZSxfCNgVqHKAJOQeINnMvKSE3BgltuxYMpd8/UgGPJhclt0nl9qt7tPdR0c65jiOLM/nHDJBE1ZbxhHjXmFta3nGvARzyj2GY+CeIN7Iv77yrDry8HaLVhv02tozajSxQ+ym7gIg3bGmSMeTwNbh6Mh1J+60aTUc6cp5DgPGBWairVnIdHTT0lFrbDY8y/RQq45a1m+t9ggZl7GlSx1pG1BL3tZmQqSeYSwWi/rCridZaFgImcbT9dWIzCDGWud4XVGRKOts/Ek9AAJRROokiY1jo+JzHHBvREOGRZ7BJlfwVS5kINeQPgGn4Q+t3AvBgE2TYtnFLGGU4Ii+Y9WfaxCzJKj5UZhkVMziL4swkQqsw5LoxHTYD82oQjswUAVhxrHOZ9jcxBrCFDJgBGoPw0Fb+3HY1Iqt4wwzPk2ymFeX/w0PsDlESQqBzrdlbaAdHvCTTnWOgXgDRqKc0zncKLKmmADfTBPI4aFqdxlM6fKKcknQJVfojF14e8t1N3o0BC7+z4B2hrMO8oijHDpu8xa92D9D6/3+yBKTZTP7vUpP+3ix7LcLALvOhaEc7Xq5R8qSROsd89PXfHLnjBvjX6Onl6xvLdLx4+Rs9XDSnZg2O/t5/jS0zlD/ZvnuXv6+u3d852mV9uCJI3s57orZ6OT64fWcwOL1MniJYHC7+se8gUV07/TdS+qHIxbGlmlevAmr2zPZ6OHs/JQPui2ITfMRWb9S02xkiXNlg3l+a7svV9fIfxgugqvZ9LKVB+9mHL++nlw8XITtspwd/FXb9syP8skLELFdKhoMerVTOSUsvhczZaGBPi1cvVSJDxfAhNZRu5R2eLmUOxp4cobrNXJPjk7dRtPuNpsW8t0+atio6brmKfJ9yznaiswaxR7EbsKmVOVSkrumzfcASexxYAFk+jzJpdJx7ZuIPSxwbcCG8hAkjMM4kfK8eCPCXQV5aDVXcTpPeasVpq3Vm1a7ScQtu838qYCsKsmtiiQPgdCUgtJtRWsuec2FbMUbnuciMutzXGeQS2XPlMh6ltNqGJzGaQQKqBEnQR5BPZ2lRWMMvv5aOia8sA774+fu6Lk4DcaXte3/27ZB+gRUOXBV0AnIUcKHCwZ5jW01X1YtS96pehvezwOqDpfsqcgoWSOp/vpLFcWRkifbsra4S/d9QyW0sV9VmS2YU1Iyvry3pZxLAehsB/OG62/1fD7Pi1E0ldBlMrwh9c40RkByqU+rcfIKzChDGAddBiXqvcylvYovFzM2ElhALIlTK5YH3P4j4Or2H0jCLw99WlRSyr4JWIrPbN1IvlwU4m8fN8Qjyk+a7+RnkWTB33F9Emsnj6xTXv6CslCt1EWw+oIZJJFhqZSwJNsN/lmAz5JXjWWTSyxCsmmSC/j6T01pU1vDhCQ5E4OeVhh29bLAKVYpeH+dPoQpJLl8o9F/f6TptKAAAfmy47SIr65aT/GfhTuau0n6UXbtvtVz7GbX9wvZbaxlVwqxXTalgq7zwfzRstOnfY53/gA=</con:value></con:property><con:property><con:name>SAML_RTL</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMPwHbE5ixTbjXbT4aCGmal46QF1Bjy8SSgfDrr2RiByjJTe+TR+vV7tndoyOdMZSllh8wBgUnOVXiQU/9iaZmx0YuaKbbmWqOOXU0FzxXM5E9S6ypY3g2qErMWAkxZRxR3lMtw7Q109Qs89bo+O2Ob3stz+s+qModFEyEFi4tQ1U2WUqZX6XtqWVB/RwxwnyKMmA+x/44uLzwhaePakxq/2yHskpY9BecL31dx60EMKQpbuE808/0A5+zhPljMqeIlwW85ExYT33Zu16vW2u7lRdz3TIMQzc8XfgkjMw/q/1P9WZIYjrLd+sI0ZwSjFKyRRLUJfBFnihBOs8LwhfZG6FN3TRkaA02WMOmQz+r+muCCt0HIx2ALBjS2AKZdbARzKAAikGZjOKe+vljE9ztvS0QZbO8yNjR+s8gAV1Bmi8h0VhdWY3u4xFPtKt/BtiPKU5LRlZwJWmyRBiY8q2AGdlcECbIlzClGr+yYTXDAP/JSM70fZwCtn6iMwMyB8b/z7z2Z7WLcofSEvpro2s8sWH6+HRDnu3u9Y+HqHSsUTjcTnoVhH3nHahm1C/rY6I2vHrZNEm6o/KyE6A4unk0ra/r4WPoguMOzMsHc5uH6XpoWiuM9Emn3LjmNOPzq8l1eXN/d0Oc0Zcfm+Xkap1dfe0UXfvTMrqid3//iOk/5JpMknw0v9h2wsF9EHsh/5rp820wXtyl1+yZf3v8q/3Q+f5lMLwplxPT3T7O78bdArrR+OIB3QyGn4oRvf++Tdz2L5dAajyHT5e915r2azg01nIwLqe/APN6KakRD5ShmBfi70uLtJBEm1Wu/lLqE+NAudqXu6Ss+KUQH5L4Ypi79XkYhE50bhpOELjt4fDccAxzaARGV4hc0HFq/dmhOIIY5XRGZC6psDv+vA8QZz4DmkChrfISL4Cp70QcII6UmI7Ewcgpg9tcKPjQHNieF0ah03HdKOi6kdFpW5bhuIbbduxIVa5yfk2vi2DGoThUb+9AvUeAyZKAlHjJcyaIzrhoyRNalTw1WyvUolCKS6CQOuxbjtvWGcmWKUjAepYnZQqt5WJZNUhnu6+lIcwq6+j89mc0/mlWh/DNGo//1e0QPgmRDkwWFIIYKZy4i6y6mjerNq39quvwQZkQedZEb3lB8A7J4a9XykiuNHypy6pxN+7HhoPQ+nFVTbZkRXDD/Oa6Fmov9KBfD+YJtZ5a5WpVVqPoSq0rRHhdSJ6pjwGXQrCeb/NHoHoTQv/QXdGgPsrc2A/xlXxBxxxxyARxlGr5gYfCGJh8KMSC+JuPvkIOUoq+cdjwU7YoFe8JifjdJwf2sfQT5m/is86L5HVcJ2Lt5RF1itcBJ3QuV/JmeH6DGTgXYYmQsrzYD34qwKnkh8amyQ0WLtg0LTm8/UeRGtVTEcZ5SXk8UCvDvm5WOPnzEvxXp9/CVNr8ctlu2JuX7f3lxVgoWIbUxpf8t7NGKrpg8cwU/hWWnroR70aRnM73dPoF4JFUe4Hn2YNh0G3bYbgv1bYVhk0DDyrp/2b+3bLX0+Pz0P8X</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:EBA9A993DFA753BBE0401F0A079932BB</con:value></con:property><con:property><con:name>NODE_USER_ID_RTL</con:name><con:value>EBAB4CE104AA85FFE0401F0A07997A64</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectErrTypeSTSGET</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">token_rejected</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a2d030ce-85a6-4b00-8c4d-077b8179f1a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3b37da0b-8898-4bd3-a30a-f92dba72175c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:tearDownScript>if(context.expand( '${#Project#runTeardown}' )=='true')
	{
	log.info("Executing TearDown for Suite '" + testSuite.getName() + "'");
	
	for ( testCaseResult in runner.results )
	{
	   currentTestCaseName = testCaseResult.getTestCase().name;  
	   currentTestCase = testCaseResult.getTestCase(); 
	   log.info("Current TestCase : '"+ currentTestCaseName + "'");
	   log.info("Current TestCase Status : '" + testCaseResult.getStatus().toString() + "'");
	   
	   if ( testCaseResult.getStatus().toString() == 'FAILED' )
	   {
	      log.info("Re-executing failed TC");
	      def currentRunnerTC = currentTestCase.run(null, false);
	      log.info("Status on re-execution : '" + currentRunnerTC.status + "'");
	   }
	}
	log.info("Execution of TearDown for Suite '" + testSuite.getName() + "' Completed" );
}</con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="8_DTCreate_and_SAML_Exchange_Affiliated Nodes" id="59361ac2-d2ee-4440-b78c-5404fa352a75"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DelegationTokenCreate_VerifiedEmail_RTL_with_Audience_Nodes_DSP_DSPCS" searchProperties="true" id="b9fd0919-7f19-4a0a-a17f-7fae1aa023e6">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="f12f404b-2b1a-4151-8c15-33157cc46ebd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
</script></con:config></con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="6c4cb6d0-73d8-4619-9b64-3dd5873b201d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="84969450-5894-496d-8878-b4e4a22192ae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="78ee27e4-1abe-4fd4-8bd8-91bb9cea2854"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="e673a289-9fe9-4375-aeda-566326290ac1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="3db3cc9e-c1ff-47ed-b412-04e716c6f4b5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="fe5c2a54-b7e6-4454-881a-caa775236f97">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Establish Entity and Affiliate Node Settings" id="b23147a1-2750-4bd7-8b45-2adec6699865"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = 0;
String nodes = "urn:dece:org:org:dece:RET;urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:LLASP";
String audienceList = "";
String affiliationList = "";
List nodeList = nodes.tokenize(";");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It [$i]: $it";
	
	if (i == 0) {
		tC.setPropertyValue("NODE_ID", it);
		affiliationList = it;
		if (nodeList.size != i + 1) {
			affiliationList = affiliationList + ";";
		}
		
	} else {
		
		audienceList = audienceList + it;
		affiliationList = affiliationList + it;
		if (nodeList.size != i + 1) {
			audienceList = audienceList + ";";
			affiliationList = affiliationList + ";";
		}
	}

	i++;
}
log.info "audienceList [$audienceList]";
log.info "affiliationList [$affiliationList]";
assert audienceList.length() > 0;

tC.setPropertyValue("audienceList",audienceList);
tC.setPropertyValue("affiliationList",affiliationList);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="dd1f9449-7b51-4005-8767-f7befab867bf">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="e3a12561-e2db-4225-aa3d-c4d00d045d6f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>ACCOUNT_OID</con:name><con:value>09C775D0820D5B63E05305991F0A2EAA</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value>urn:dece:org:org:dece:RET;urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:LLASP</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_42d69163-d4c5-418e-9dcd-9004654b86c2</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:LLASP</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09C775D0820C5B63E05305991F0A2EAA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09C775D0820C5B63E05305991F0A2EAA</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09C775E0D65B5B7DE05305991F0A3880</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09C775E0D65B5B7DE05305991F0A3880</con:value></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418123915231@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc7I6FP0rDt9jB7kIikx1Bm9n6L1qrfpyBsNWYyEoCV7660+CSsXaHs95YrLZWXvtS1ZyS70w0G2HUogZjkhhGwaE2qm1JiUxsSOPYmoTLwRqM2T3nMcHWy+qtnfcIhXcVk3629D9clUrl2TfQKZsaBbIVR/5clVVjbJpTKwy0rkrpQm4hDKPsJqkq5oha7qsVvuaZmsVW9OLWqkylgoDiCnH5i5FVTqQ2tKaNGdsaSvKZrMpbkrFKJ4puqpqyvDxoYfmEHpS/XafURoorh/8UdEHBEGAiigKlVsl53PrU7uHZ8RjSQyHWP5PsVRFrSrcx6d49kfK9oLvkmmULpseiQhGXoA/PVGfR2DzyC84wSyKMZuHPyahqQJYhi2SkWaQP5KSp3YlUI5hTD2Zzj3tgNWFKcRAEBTeum5N+nNd19Kt/dgjdBrFIc0v/xsfIGsIoiX4Mj2mdaB2PeCFStVvAdkuQUFC8RqexLAuPQT00E1A10MVXmKY4u0DpnxAt1SwU07pnS331WjhGVD2fxp00pw9yMALEqirq344/rgzhm6TwuOdO7pfOYvq5/DJdGopgVPn1JC1dr88G8psiPY7hq9P1nxy41t6WQ8WncfVvDXuviqKacDmOYk392j6QTpRz1q1x5O33fK58Rl9MvcdOuEAvZIFm5nqA1NI9dl4x52b3apjxcp0sNO6XT8mzV6PjbaDUQO/sYeXBUyWgTEeL+4cPHh/mQ/N4ehj4pQ/p/ekavZf3htWezfSG8yhwHrNoE1Hy5s2Xf0VbtFi4NaydE74523HM99LJgtA7LgUY+C2Ch3eJY/9LmbCgn15mrraSyE+lAFhUl3sEtphJ1zusG/zHu7XarVZqZhttVU2G2aj0mqrZkk1q1Wtozoly1KPIrNncUaxGZEpFrGE5O7H5neCKLQpEB9ieR0lXOmo9Atiy2NewSVdfggiQqEfcXnWqlutNCcTTi30N8hQP0JroZcQkgpPEXsmz7EzZRDnNdnIaXIXEF5iEMIt5prywaaM12LlrRMWaMW1VySQcGmPhcraumGZCsXhMgDBVAkjPwmguJwv08oodP/VZQ/R1Npt99PT9mNe5/+OJeA+PhYOVOTSAN5GuHC5qMdEfk64cprwEd5JfCwOFq8nizHaM8n/+hoTMR/ZjPCMjpQzz3NDDlU5TygL5K8xygY9u665ivNzXz+2Y+UVV8VkvU7SBlSEvsUcnouOZiqqrvQAJVyZdv3oA4iSoShXXQMZ8bPgmT1PMWFz0mMeg5BPTCFdXnHv94CKe9/lo7699lGRC8lLx2DLLtmaAX+zCMa/PmuQjYQfN7/wzyaK/a+OXcA6icPz5Nc+w2QmVuIK2P0wFyjisJiLVxSfgl8CuBQ8b8yKnHFhfKAmCYOf/xSEKtUkD6EoIcxtSanhVClTnmy3BPvL6RtMKsbZ6wz/+/NMxukIIOBvOopTfHHJ2uIIkNmJ2h6CfhfclmrpatNslEungqu3HScrSo5d/Zv5u+WkTuczXv8H</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418123916869</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value>09C775E0D65C5B7DE05305991F0A3880</con:value></con:property><con:property><con:name>audienceIgnoreAll</con:name><con:value>true</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fd52c9d3-8b99-4e90-9f6d-19ff5efc5448</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>573a939d-9280-452f-a9aa-d7f9e0039d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5333a278-be73-4359-bedb-c61a53c2ddc2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_002_DTCreate_Audience_with_invalid_URN" searchProperties="true" id="ae1e8b1c-2069-48bf-9283-18f877f7cbc3">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="f302cf55-f02f-4750-89ca-f5d8ea96010a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));

</script></con:config></con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="ecc24f6d-2b79-498a-b2eb-01a7acf39c89"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="93fd9561-5144-413a-8779-1fd7b664dcae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="060f4286-1086-48fd-8822-32ba7a5ae1f9"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="2054d815-a25c-4d14-9d56-b5201538d04d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="6b6e2f20-e33b-42eb-91c3-079fcf0cd931">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="583d8c41-19a4-4589-9e01-751d5136796a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Establish Entity and Affiliate Node Settings" id="be9492b0-e2d9-4ccf-9239-ad33926286a0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def urnNode = context.expand( '${#Project#urnNode}' )
String nodes = tP.getPropertyValue("nodeAffiliationRTL_llasp");
String audienceList = "urn:dece:org:org:LLASP" 

log.info "audienceList"+audienceList
tC.setPropertyValue("audienceList",audienceList);
tC.setPropertyValue("audienceIgnoreNodes","urn:dece:org:org:LLASP");</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="ee0bce4e-0de8-415c-b316-f823ba5c1d38">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="6c48c0ec-34bc-4455-bdc0-63c83c024434">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09C775D9843B5B73E05305991F0A2F9D</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_d737a6cb-b93d-4e06-9b36-1ec0c3ae9b2e</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:LLASP</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09C775D9843A5B73E05305991F0A2F9D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09C775D9843A5B73E05305991F0A2F9D</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09C775DC00C05B6FE05305991F0AEC5D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09C775DC00C05B6FE05305991F0AEC5D</con:value></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418123936446@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbZcuI4FP0VynnsMpYXMHYFqtjjdLYGkunkZUrIF1DalsGSWfrrRzLgBkIyzDy5dH117rmLjnTNcRxZfpNzSAVNWGkdR4z7ubWuZSnzE8wp9xmOgfuC+MPm/Z1vlZGP91u0UtCpa3+Hru3iKhnrY88OdQdQVffGdlU3gSBiY/DGFkhXzjMIGBeYibpmIdPRTUtH3sg0fdP1HadcM903rfQCKZfY0qWMtB2pNa9rMyHmvmGsVqvyyi4n6dSwEDKNn/d3QzKDGGuN621GeaC0sfMn5RAIRBEpkyQ2ro0jn+uQ+0M6ZVhkKexihZ/FQgbyDOkTcjq90oq9EAZskuTLNmYJowRH9DdW9bkHMUvCUjOaJikVs/jTJEykgHVYE52YDrvSjGNqFwIdMUw51vkMmzusAUwgBUag9DwI6trVZV3Lt45SzPgkSWN+vPxvfIAtIUrmEOp8n9aO2uWAZyrVuAbiB4xEGadLeFDDOscE+K6bQC6HKj2lMKHrO8rlgK65Ymcc0jtZbqvRoVPg4v806KA5W5AXHGXQ8Da3L7f29+B18tLP3n7MPftGJK3pj1pC6jmBQ+fcULR2uzwZymKItjte+6Q7tTyrak6felbn2f5NV3HKW1Y/mEXLd2h9W0zD+7B/mzZHjrtpr3+45uM7iBG9nazmtfVdf2zQt81T58bc9Df9GFe6NAjMJ8zvujeLwUunk8y/pe47m42jRV88Dey32rR599zaPEf3swrwieO+vnubt5eHycqMF788uHm20RgG/SlCTs3uPXS8v356jwGqF+kc8D+27c/8MBu/AxH7pRqDoFPqyS5h8bWYKQsN9Unu6s+V+HABTGgNtUtph59JuaOhL3u4XSOv7bqVThuhNqq0qr0uqtio4nlmDzW77UpnLzJbFicU2wmbUBVLSe52bL4mSGKfAwsh1ZdJJpWOa18gdrDApYAN5CFIGIdRUtdI6DloHMohr0BFdyYE69hxPd2phrWx5XhSB2pa6SERj+wxbU4EpMfq7Byp8wAInVNQEq4mnMsR50JWZYGXmYjM8hKXGWRS5FOlt77l1CoGp/E8AsXZiJMwi6A8n83zGhl8+7V0THhubaN2t1frolq7a7bdTrWLHKTqmtfXQq38UH6a/um/faWkT0iVA1eJtkB2G87cQfY+yw/VqJy9q/bwzSyk6vzJsouUki2T419/pkmNUTFKg+5oT7nwPDUcoRqnCRWBwiUlxXkobnUp9lIeGvteLXB5Uc6WyyzvjqtkMJXwhkrRQJYxBJJJAduMkl/AjALFuOi2KIifBC/sxxQzMWNDgQXEcpxK+fKC58EQuHoeBPJErC99exyFlKUTsBbnbO1IPm0U4y9fP8Qnyk+apejxVZKGfzp2BusgjsxTvg4EZVO1UjfF5pO5IImEpVLjkvQQ/BzAueDHxqLIBRchB2qcCfj8T0mJV13DhCQZE0FHyw2HgprzFJs5+H+cPsDkml084ui/v+J0mo8AkQ9G6Z/jq7vYV0eATQ9EeRf0jC57NcduVlqufajLVs8rdPmYXeOD+aPloE6nM974Bw==</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418123938006</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09C775DC00C15B6FE05305991F0AEC5D</con:value></con:property><con:property><con:name>audienceIgnoreAll</con:name><con:value>true</con:value></con:property><con:property><con:name>audienceIgnoreNodes</con:name><con:value>urn:dece:org:org:LLASP</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fd52c9d3-8b99-4e90-9f6d-19ff5efc5448</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>573a939d-9280-452f-a9aa-d7f9e0039d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5333a278-be73-4359-bedb-c61a53c2ddc2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_003_DTCreate_audience_parameter_value_with_nonexistent_node" searchProperties="true" id="c3ef4df5-bc6f-47a9-9042-05caa4faa8b0">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="325961ae-5987-414c-8660-5627bc91e041"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
tC.setPropertyValue("audienceIgnoreNodes",null);</script></con:config></con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="13647090-2bc4-41b4-87d2-df64889eb5f8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="565a0a2b-8d5a-4682-a8e5-d99071aa0cd2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="2c53c772-f43f-4308-ad8a-ccf0789e4344"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="f58b7145-b732-4f62-9a8f-6e9901049cfc">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="3ad97de5-fac1-4b83-85c3-86b82cc1d447">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="5a5befee-6734-442e-b3b1-51864b7e4eb0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Establish Entity and Affiliate Node Settings" id="92e36b84-90fc-4bc1-a4e7-e1a3221b5f3c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def urnNode = context.expand( '${#Project#urnNode}' )
String nodes = tP.getPropertyValue("nodeAffiliationRTL_llasp");
String audienceList = "urn:dece:org:org:dece:111222333444";

log.info "audienceList"+audienceList
tC.setPropertyValue("audienceList",audienceList);
tC.setPropertyValue("audienceIgnoreNodes","urn:dece:org:org:dece:111222333444");</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="5dc23654-f28c-402d-be82-0aba8d17b441">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="766088fb-24ea-4a35-912d-aa99059d7394">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>ACCOUNT_OID</con:name><con:value>09C775E0D7D75B7DE05305991F0A3880</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_e5debf33-4aac-4969-a756-af4d429a9e2b</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:111222333444</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09C775E0D7D65B7DE05305991F0A3880</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09C775E0D7D65B7DE05305991F0A3880</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09C775D9F23B5B87E05305991F0A9A45</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09C775D9F23B5B87E05305991F0A9A45</con:value></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418123991420@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZXzBBtsVqAIMM95cB5iE5GVLyG3QxMhEkrnM169kwAOEZNl9CVG7dfr0RUe64mie2kGbc2CCZLSynqeUB4W1qeWMBhnihAcUzYEHAgfD9u1NYFfNAO23aJUobGp/gxvDJKnVdAchrDt+3ddRw63rKHFix/aRD/ZEunKeQ0S5QFQ0Ndu0HN2yddMfWVZgeUHNq3r1xotWeQTGJbZ0qZrajtSaN7WZEIvAMFarVXVVq2ZsatimaRnj25shnsEcaa2rbUZFINba+eNqDBjSFFdxNjeujCOfq5gHQzKlSOQMdrHij2KZhukb0ifmZPpFK/dCHNEkK5ZdRDNKMErJb6TqcwtilsWVdjrNGBGz+YdJWKYC1mGNdWw59ItmHFO7EOiIIeNI5zNk7bAGkAADiqHycxA1tS+Xda3YOmKI8iRjc368/G98gC4hzRYQ63yf1o7a5YBnKtW6AhxEFKc5J0u4U8O6QBj4rpuAL4eqPDBIyPqGcDmga67YGYf0TpbbaoRkClz8nwYdNGcL8ojSHFrfH/+KVo3fr+nt903Gvr8uR8wSXofUpk6zIHDoXBjK1m6XJ0NZDtF2R2Qld8yPXLh+Godf/fv+2zd7PHK6m+d4/PD6+8fz8yZLrw3mTn+u2vV+Oh2HksHTJpwvookXOQ+T9fA+DNm4ezt+Ws8ws42b53o658ZCJBzd1u3rl3q95kxRbbkEhtP42/Xd4pqZT7NV9JXdpEnbXnfeftH+y5OROi/Dv4zn+n32w+z3B/DUpT8HriMSjzyy52aZzgH/Y9v+zA/zyS/AYr9UYxCFlb7sEhKfi5mykFhPCtdgocSHC6BCa6ldSjuCXModiQPZw+3a9LuNhhv6fbvWcTteo2e6NdP1fatvtv224+5FZsvihGI3owlRsZTkbsfmc4J4HnCgMTB9meVS6bj2CWKIBKpEdCAPQUY5jLKm5npe4lqOpcc4dnXHqTn6ZCL/uHiCJvI/v55grXKXiXt6z9qJAHaszs6ROg8AkwUBJeFqwrkccS5kVd7QMhepVV2iKoVcijxTehvYjucanMwXKSjOxjyL8xSqi9miqJHBt7+2jjAvrF2z2+t7PdPr9qxuI6z3TMdUdS3qa5ud4lB+mP7pt32lpE9MlANXiXZAdhvO3EH2Pst31XDP3lV7+HYeE3X+ZNkFI3jL5PjTn2lSY1SO0qA32lMuPU8NR6jGaUJloHhJcHkeyltdir2Uh9a+V2+o+lbNl8u86E5DySCT8IZK0TBtYwg4lwK2GWWvQI0SxbjotiiJnwQv7ccUczGjQ4EEzOU4VYrlBc+DIXD1PIjkiVhf+vY4CilLJ2Atztm6qXzaKMafvn5wgJWfND/In1XG4j8dO4N1EEfmKV8HgtCpWqmbYvPBXOBMwhKpcRk7BD8HcC74sbEscslFyIGa5AI+/lJR4tXUEMZZTkUUaoXhUFALnmKzgOCP0zuYQrPLRxz591ecTooRwCCffpwU+OouDtQRoNMDUd4Ffa/LPTOUuuF2GuGhLtc8zyyLcsSu9c783nJQp9MZb/0D</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418123992902</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value>09C775D9F23C5B87E05305991F0A9A45</con:value></con:property><con:property><con:name>audienceIgnoreAll</con:name><con:value>true</con:value></con:property><con:property><con:name>audienceIgnoreNodes</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:111222333444</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fd52c9d3-8b99-4e90-9f6d-19ff5efc5448</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>573a939d-9280-452f-a9aa-d7f9e0039d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5333a278-be73-4359-bedb-c61a53c2ddc2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_004_DTCreate_active_user_with_ULC" searchProperties="true" id="1c646bf3-675e-4c11-a7b5-00936bb0e1d5"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="41feff45-aa31-46be-bccf-127140051cd5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="31390ddc-347b-413a-a533-a2b0db39b8ec"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="fab2a098-b12e-41c0-9d6b-21a1d18d1f7c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="9a42e63c-1c5e-411f-846d-f0d22ac5c231"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="804076ca-6cd6-4c15-9eca-6ae71ab88355">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("audienceList", "urn:dece:org:org:dece:RET");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="dd862a6a-1c75-415c-b5ec-3a0ca5ebbeea">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="a07ed801-433a-4e2b-b34a-9577b0063e9b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy Create" id="2cb97bb8-9258-4d3c-bc7e-4b245c252409"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC_Single_Node")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy GET" id="a73382f4-afed-40d7-ba47-9ee9ab775337"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("policyID_before_DTC",tC.getPropertyValue("PolicyID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="8cc08e24-f7cb-4fdc-a25a-1ceaec118c02">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="6bbcfb14-03d5-410a-ba79-b80ef2db5806">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy GET 1" id="4c1d2c5a-b8db-4539-94db-9eaaf575a411"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;
tC.setPropertyValue("policyID_after_DTC",tC.getPropertyValue("PolicyID"));</script></con:config></con:testStep><con:testStep type="groovy" name="AssertPolicyID's" id="d84ddd06-c87e-4997-8dc5-fd778d022580"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def policyID_before_DTC = context.expand( '${#TestCase#policyID_before_DTC}' )
def policyID_after_DTC = context.expand( '${#TestCase#policyID_after_DTC}' )

assert policyID_before_DTC != policyID_after_DTC;</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0AA1C2ED68756F99E05307991F0A4A93</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0AA1C2C985DA5588E05305991F0AD0AF</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1419060526613@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0AA1C2C985D95588E05305991F0AD0AF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0AA1C2C985D95588E05305991F0AD0AF</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0AA1C2ED68746F99E05307991F0A4A93</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0AA1C2ED68746F99E05307991F0A4A93</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1419060528837</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_58cd51d2-25b4-4a9a-aa99-d23f69da62fa</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtc6I6FP4rDvuxgwQEBaY644pu2ba2q/Ztv9yJIWi2kLAkWNtfvwkqK9b2eu8nJoeT5zznJU9yzmGaWH6fc5wLwmhjnSaU+6W1qxU59RnkhPsUppj7AvnT/vWVbzWBD3dbtEYYdLV/HBdFjhlZuuXMbd2GHtQh9Dw9slpx24tg24qhdOW8wCHlAlLR1Sxg2ropt4AZ6PiW61utZsts/9Qa9zjnElu6NIG2JbXmXW0pROYbxsvLS/Ol1WT5wrAAMI3H66spWuIUar3zTUZloLy39UfNCCOcJKiJWGqcGzWf84j7U7KgUBQ53saKPooFDOAZ0ifiZPFFq/biKKQxK5cDSBklCCbkDar6XGOxZFGjnyxYTsQy/TAJEyhgHa+RjkybftGMOrUTgWoMcw51voTmFmuCY5xjinDjbhJ2tS+nda3cOssh5THLU15f/jc+mK5wwjIc6XyX1pba6YBHKtU7x8gPKUoKTlZ4rIY1gwjzbTcxOh2qcZvjmKyvCJcDuuaKnbFP72C5qUZAFpiL/9OgveZsQO5hUuCe8ePmbBUH98/Jdyt2586vx6LzZjyaP5J+tySw71waqtZulgdDWQ3RZkd2EV4E4xkTRXsWDG/TsEhu3uaLyc1XsPbW6+HKSZzOcDW+//YsiNXOnpLfT/H4okBBDtoPd7aFrvsPo2K8el4/Xrbe8rVtvV06IVpepg+P8Rkd51nn8dV2v31vPf1asuxpZljPF3Yyi52rt9Y313RHl/nN8PtZiu8Zs8OrMbtMzkaT558WmNw+dBbzsxnIaPvuzu1W6ezxr9t2Z35azH9hJHZLNQZh0BjJLkHxuZgpC4n0uHT1MyU+XGAqtJ7apbTDL6TckciXPdysQb9vDqxh0HY7dnvkeUPgtEDH88wR6Nt9r7UTmQ2LA4oDRmOiYinJ3YzN5wRR6nNMI5zrK1ZIpePaJ4gBFLAR0ok8BIxyPGNdzbYiO7JMRzc7wNTtjmvp7tzFOvZwPDc72MFuS2uMmbihN3k/FjivqbMJauo8wYhkBCsJVxPO5YhzIavyG64KkZjNFWxSXEiRz5Xe+pbtOgYnaZZgxdlIWVQkuJkts7JGBt98LR0iXloHYDAcuUPgDobmoBO0h8AGqq7AkfW1wNfyUH6Y/uG/XaWkT0SUA1eJfsWy2/jIHWTusnxXDefoXbWD7xcRUedPll3kBG2Y1H/9nSY1RtUoTYazHeXK89BQQzUOE6oCRSuCqvNQ3epS7KU89Ha9ypq/m8VqVZTN6SgVzCW6oTI0gGVMMSqkfr3O2DOmRgVinHRZVLwPYlf2OsNCLOlUQIFTOU2NcnnC62CKuXodhPJArE99etRCysoJvBbHbINEvmwU408fP8hHyk+ab+XnheXR34YdwdqLI/OUjwNB6EKt1EXx+sFYICZhiZQ4lu+DHwM4FrxurIpccRFynuaFwB//aSjt6moQIVZQEQZaadjX05KneM2w/9fpHUwp2dUbjvz7I04n5QggLF9+nJT46ir21Qmgiz1N3gZ9L8sDz3UCz3Fct5RlZyPLAeiPqqLU2PXemd9b9up0OOO9Pw==</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:0AA1C39778625536E05305991F0A7D86</con:value></con:property><con:property><con:name>policyID_before_DTC</con:name><con:value>urn:dece:policyid:org:dece:0AA1C39778625536E05305991F0A7D86</con:value></con:property><con:property><con:name>policyID_after_DTC</con:name><con:value>urn:dece:policyid:org:dece:0AA1C39778625536E05305991F0A7D86</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2cb97bb8-9258-4d3c-bc7e-4b245c252409</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a73382f4-afed-40d7-ba47-9ee9ab775337</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_009_DTCreate_with_affiliated_nodes_ULC_for_all_the_nodes_concecutive_DTC_Requests" searchProperties="true" id="220660ee-b671-4a3e-bdd9-7781fb4996f6">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="6f934d20-dff9-4a2f-b5aa-9d28fe78ae81"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
tC.setPropertyValue("audienceIgnoreAll", null);</script></con:config></con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="bcb6c1de-39fe-49e0-ae85-686b2c6e12e2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="88da7b16-262f-4c54-ac8c-f47eeb2dc1d3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="8cf65756-2087-41a7-ac9d-9b93fab98894"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="057c3e36-1d26-4fc2-a547-70b9030ba6c6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="8589d807-6fb2-4c38-b9ca-9cbdd879b457">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="dff60030-bc71-4393-9d4a-0591ce513a27">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Establish Entity and Affiliate Node Settings" id="224a35a9-c08f-4139-8dec-8bfbe60b13de"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = 0;
def urnNode = context.expand( '${#Project#urnNode}' )
String nodes = tP.getPropertyValue("nodeAffiliationRTL");
String audienceList = "";
String affiliationList = "";
List nodeList = nodes.tokenize(",");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It [$i]: $it";
	
	if (i == 0) {
		tC.setPropertyValue("NODE_ID", it);
		affiliationList = it;
		if (nodeList.size != i + 1) {
			affiliationList =urnNode+ affiliationList + ";";
		}
		
	} else {
		
		audienceList = audienceList +urnNode+ it;
		affiliationList = affiliationList +urnNode+ it;
		if (nodeList.size != i + 1) {
			audienceList = audienceList + ";";
			affiliationList = affiliationList + ";";
		}
	}

	i++;
}
log.info "audienceList [$audienceList]";
log.info "affiliationList [$affiliationList]";
assert audienceList.length() > 0;

tC.setPropertyValue("audienceList",audienceList);
tC.setPropertyValue("affiliationList",affiliationList);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="17c65b5f-26c4-49b7-82d9-2216de6f33f8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate1" id="8573457f-2cb2-46b5-81f3-82bceee62e4c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="ffe5f573-6f4e-4c94-a39c-5299da5d5b0b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdLLASP"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy GET_RET1" id="e5ce49cc-3cce-4df6-acdd-9bb58f678dfd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("policyID_RET1",tC.getPropertyValue("PolicyID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy GET_LLASP1" id="a511a92e-655b-4e31-ad6d-0a8ca5b02b8e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdLLASP"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("policyID_LLASP1",tC.getPropertyValue("PolicyID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy GET_DLASP" id="287b8f84-1243-4ae4-8910-a2e144edb4b6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdDLASP"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("policyID_DLASP",tC.getPropertyValue("PolicyID"));</script></con:config></con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>ACCOUNT_OID</con:name><con:value>09C775E1039E5B79E05305991F0AE582</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value>urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_73d1111b-83fd-40a4-be81-86ed1ea8bc49</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09C775E1039D5B79E05305991F0AE582</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09C775E1039D5B79E05305991F0AE582</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09C775D13E955B5DE05305991F0A6E15</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09C775D13E955B5DE05305991F0A6E15</con:value></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418124115486@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=pVZbc+o4DP4rTM5jJ8QJBEKmMAOEnjKFlgK9bF92jCPAbXCo7XDprz92gBQo7bK7vDBWZOnTxZ90KfAscvy6EMAljVluNYuY8FNp1Ug482MsqPAZnoHwJfEH9W7Hd/LIx7srRq4dVI2/y4XQVr+R6RXGoVlEuGiOwLNNrwShDdgbkWJFqQqRQJsJiZmsGg6yi6btmKgytG3fsf2im/c898XIPQIXyrZSySNjC2olqsZUyrlvWcvlMr8s5GM+sRyEbOu52xmQKcywUbvcRJQ64rWtPsmHQCCKSJ7EM+vSOtC5DIU/oBOGZcJh6yv8zheyUMVSOqGgk19GdhfCNhvH6bGJWcwowRH9wDo/XZDTOMzVo0nMqZzOvg3CRtqwCStiErvIfhnWIbQzDR0g5AKbYortra0+jIEDI5B76Lerxq/zqpZeHXLMxDjmM3F4/Hd4gC0giucQmmIX1hba+QZPZKp2CcRvMxIlgi7gVjfrHBMQ22oCOd9UrsdhTFcdKlSDroRGZ+3DOzpushHQCQj5Xwq0V5yNkUccJVDrX5D6x/Vt80a43YfH5WsHJd1xQJ/aw2U1BbCvnAqy0m6OR02ZNdHmxvrhg4ml7DeD0Xty8eKhkmzIi/YL2K5z9+qu1x/DD69Rch+sgtsLVuv+xT2qCGswtIth/82+m7jhZMGTl9un16vrCy/pChIKF+whd8Yjp3uF+rMJ/2vYrIi38Pn+5pb1fveeburz8Wgqr3jci98YFMvXJV66i++96TOad+/tbml5jx6iTuE3EY9o2lg/3kB7Us3C2cN/KNu9+UEyegUid0fdBu0gd6WqhOXPZKYlNDTHqao/1+QjJDBp1PQtzR1+ouiOhr6q4eaMKs1y2Q3sQqviug03aCG3gNxKxb5C9VLLdncks0FxBLEZszHVvjTlbtrmZ4Bk5gtgIXBzESeK6YTxg8UAS5xrs756BDETMIyrxsgtlUPXLZu4QArqnYdgjjzHMwmEhZJjl2xwXCN3G8s7dsfrYwn8kJ2LB+zcB0LnFDSF6w4XqsWFVFl5x4tERnZ+gfMMEkXyXPOt7xQ91xJ0No9AY7ZmcZhEkJ9P52mOLLH5d0xMRCptombrymshr9mym+Wg1EJFpPOa5tdBjfRRfhv+8bddppROSLWC0IE2QFUbTsygwi7KL9lwT86qnfl6ElL9/lTaJadkg+Tw02c36TbKWino1Ae9HehM97y7nf9xt98afr1p/RCNdZzIzFG4oHtud6uBGjKKlmq7HnnH+fd8slgkaVeUNf1yZd7SqbWQYw2AJIo418P4DZiVWbHOmlIZ8CPnmfwQYiKnbCCxhJlq41x6PGMtGYDQa0lbvcTVuTvPgUuVOgkreUrWjNRKpRH/uHURn2g9Je6pv2XMw8+KnbC150fFqbYSSdlEn/SEWn/TFyRWZqni1pjvGz9l4JTzQ2GW5AyLVA01SiR8/yWnSbNqYELihMl2YKSCfSJPccr1HPxPpS9m0lmRLY/0n7dHk6YtQECtnIKm9vUO4OsnwCZ7w2Dr9Os8aNmoUAncRrmyPw9arudkSTlAV/si/irZy9Nxj9f+AA==</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418124117062</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value>09C775D13E965B5DE05305991F0A6E15</con:value></con:property><con:property><con:name>audienceIgnoreAll</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:09C775D9F4CF5B87E05305991F0A9A45</con:value></con:property><con:property><con:name>policyID_RET1</con:name><con:value>urn:dece:policyid:org:dece:09C775D9F4CF5B87E05305991F0A9A45</con:value></con:property><con:property><con:name>policyID_LLASP1</con:name><con:value>urn:dece:policyid:org:dece:09C775D9F4CF5B87E05305991F0A9A45</con:value></con:property><con:property><con:name>policyID_DLASP</con:name><con:value>urn:dece:policyid:org:dece:09C775D9F4CF5B87E05305991F0A9A45</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fd52c9d3-8b99-4e90-9f6d-19ff5efc5448</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>573a939d-9280-452f-a9aa-d7f9e0039d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5333a278-be73-4359-bedb-c61a53c2ddc2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_010_DTCreate_with_affiliated_nodes_without_ULC_for_all_the_nodes" searchProperties="true" id="1d786c3d-ca41-4ea9-8f92-c85d215f2844">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="a6aa87b6-9ab9-4e92-9ceb-c23d019814eb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
tC.setPropertyValue("audienceIgnoreAll", null);</script></con:config></con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="46897a13-f912-4a51-a615-dbcfe8e7039b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="f34ce650-bc9a-45b1-a1cf-f06c600d0269"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="2463e040-9edf-4dff-af3c-600ef71ad01e"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="78acaa67-5c3b-4568-a2bf-3275df5c83f6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="6ac83334-87a0-4fd0-adc2-ba4cdaa77b43">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="8f5ad0e2-7568-4299-8407-1adb3c007b51">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Establish Entity and Affiliate Node Settings" id="f1123e47-d122-4701-a109-f354e869d877"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = 0;
def urnNode = context.expand( '${#Project#urnNode}' )
String nodes = tP.getPropertyValue("nodeAffiliationRTL");
String audienceList = "";
String affiliationList = "";
List nodeList = nodes.tokenize(",");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It [$i]: $it";
	
	if (i == 0) {
		tC.setPropertyValue("NODE_ID", it);
		affiliationList = it;
		if (nodeList.size != i + 1) {
			affiliationList =urnNode+ affiliationList + ";";
		}
		
	} else {
		
		audienceList = audienceList +urnNode+ it;
		affiliationList = affiliationList +urnNode+ it;
		if (nodeList.size != i + 1) {
			audienceList = audienceList + ";";
			affiliationList = affiliationList + ";";
		}
	}

	i++;
}
log.info "audienceList [$audienceList]";
log.info "affiliationList [$affiliationList]";
assert audienceList.length() > 0;

tC.setPropertyValue("audienceList",audienceList);
tC.setPropertyValue("affiliationList",affiliationList);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="d5ac6e66-480b-46b8-ba13-6aaa68cd2d34">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="48f40ed4-eac5-4ac7-8649-b84ba1fd9633">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdLLASP"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09C775E0DB965B7DE05305991F0A3880</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value>urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_bc5b183a-9907-43d5-9851-3ed99486bb8c</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09C775E0DB955B7DE05305991F0A3880</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09C775E0DB955B7DE05305991F0A3880</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09C775D9F5DD5B87E05305991F0A9A45</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09C775D9F5DD5B87E05305991F0A9A45</con:value></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418124260713@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=pVZtc+I2EP4rjO9jxljGdrA9gRmDzZUULilw4ZIvHSEvRlcjE0sGkl9fyYAPyEtp+8mj9Wr32dWjR3vD8TJt+AHnkAuasdp2mTLul9aWVuTMzzCn3Gd4CdwXxB8Hw4HfqCMfH7ZotX7Y0v6cEWdmuhbWPQ81dduKHd1zHVO3IPY8272ezVwiXTkvoM+4wEy0tAYybd1s6MibmKbfsHzk1pFnPWm1B8i5jC1d6kjbg9rylrYQYuUbxmazqW+sepYnRgMh0/gxHIzJApZYa9/sKioT5e29P6nHQCBNSZ1kS+PGOPG5ibk/pgnDoshhnyv+KBcykGdIn5jT5ItW7YW4z+ZZuexiljFKcEpfserPEMQii2tBmmQ5FYvlh0WYSAXWYUt0Ytrsi2acQrsw0AnCnGOdL7C5jzWCOeTACNS+j/ot7ctlp1ZuneSY8XmWL/np8t/hAbaGNFtBrPNDWXtolwd8p1PtGyB+n5G04HQN3xRZV5gA358mkMtD1e5zmNPtgHJJ0C1X6IxjeGfLXTdCmgAX/+WAjg5nF+QBpwW0I+drFjmN21d7YD6SF/HceEJXg8X1Jhi2SgDHzqWhOtrd8oyUFYl2O363h83babTNaN/srZ/s79HkZWo706f7sej13U4cjmbsLn76LRp1uyk8siSZ0dvgarh+BuhNefSANkZGUY+HFpCr2PhG0uBn5zl6GDVIMLDxH0lng0NqJsXV68Pj8uvjdNSZzG+7nvVajL4O72Y0iorFz9vEGATh5HEQX02Su8CaGj9ep8Hqas5nxX038cYWaVXlHOE/tR3u/LiY/QQiDktFg35Y68lTwuJzMVMWGuvz0tVfKfHhApjQ2mqX0g6/kHJHY1+e4W6NvG6z6YRezwlDp+M2I+RYyPE8s4cCL7Cdg8jsUJxB7GZsTlUuJbk72nwOkCx9DiyGXF9nhVQ6rn0SMcQC1/psJC9BxjhMspY2s8Cx5x7RXRLPdLvZtPQZdh3dal6bNqCm5wJotW+ZuGN3eTAXkJ+qs32iziMgdEVBSbhiOJcU50J25RmvC5Ga9TWuMyikyOdKb/2G7ToGp8tVCgqzscziIoX6arEqe2Tw3behY8JLaxd1o54bIbcbmd1meB0hG6m+lv1toE55KT8s//zfoVPSJ6bKgatCOyBPG968QQ3fOVT5cTeax904hA+KmKr7J9suckp2SE5//WKTolFFpXAQjO8PoCvfy/YO/sfeUTR5u9P4pBrjvJFVonhNj9IeRgP5yEhZah848ozrz/VivS5KVjSV/OYyvNRE0zFQwxgDKaRwvkyyv4AZVRTjoleqAn6WvLKfQizEgo0FFrCUNK6VywvGkjFwNZb05U3cXjrznKSUrROwFe/ZuqkcqRTiT6cu4hPlJ8338rPJ8vjXib0T6yiPrFNOJYKyRK3UC/XyAS9IJsNSqa1Zfhz8vQDvJT81Vk2usAhJqFkh4OM/NSWaLQ0TkhVM9EOtNBwLeYlTvKzA/+X0Jkz5VlTDI/3n6VGnJQWIlELpX8ZXM4CvrgBLjh6DfdK370GEwo7nOJ1mePweWK6LqqacoGu/Mb+1HPXpnOPtvwE=</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418124262242</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09C775D9F5DE5B87E05305991F0A9A45</con:value></con:property><con:property><con:name>audienceIgnoreAll</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fd52c9d3-8b99-4e90-9f6d-19ff5efc5448</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>573a939d-9280-452f-a9aa-d7f9e0039d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5333a278-be73-4359-bedb-c61a53c2ddc2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_011_DTCreate_with_affiliated_nodes_–_with_ULC_for_main_node_without_ULC_for_affiliated_nodes" searchProperties="true" id="0b1c470c-55ef-4268-9501-93c5ace1099b">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="4ea5c278-e7df-4cb3-9fa4-c766dab51552"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
tC.setPropertyValue("audienceIgnoreAll", null);</script></con:config></con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="d76f6752-cc2a-4b2d-8c50-ac7198bd575f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="0bb808c0-ab0a-4338-a0c1-f84f4e209ec5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="a1e18284-660b-4d99-a417-3ca13e6bef29"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="6d471050-4569-4912-aaea-2ab75e5a4ee0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="467644d6-455a-4a4e-ab37-ff8e38ca0032">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="1530a8f5-ea9b-4fbd-9ad3-d9082e07cf05">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy Create" id="bd25acbd-9c65-4451-b94d-9ab4c4cf123d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy GET" id="0efa8efd-6738-4fff-9054-d8447278fc7b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("policyID_before_DTC",tC.getPropertyValue("PolicyID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity and Affiliate Node Settings" id="c22c8a83-2ac6-4860-a34d-eb35fc35b824"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = 0;
def urnNode = context.expand( '${#Project#urnNode}' )
String nodes = tP.getPropertyValue("nodeAffiliationRTL");
String audienceList = "";
String affiliationList = "";
List nodeList = nodes.tokenize(",");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It [$i]: $it";
	
	if (i == 0) {
		tC.setPropertyValue("NODE_ID", it);
		affiliationList = it;
		if (nodeList.size != i + 1) {
			affiliationList = urnNode+affiliationList + ";";
		}
		
	} else {
		
		audienceList = audienceList +urnNode+ it;
		affiliationList = affiliationList +urnNode+ it;
		if (nodeList.size != i + 1) {
			audienceList = audienceList + ";";
			affiliationList = affiliationList + ";";
		}
	}

	i++;
}
log.info "audienceList [$audienceList]";
log.info "affiliationList [$affiliationList]";
assert audienceList.length() > 0;

tC.setPropertyValue("audienceList",audienceList);
tC.setPropertyValue("affiliationList",affiliationList);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="615976cf-4a5f-466a-b333-d0ebc002c3ad">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="8fd9cf76-ad29-4bbb-96fc-053da0ebe239">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>ACCOUNT_OID</con:name><con:value>0AA1DA1679AC1932E05305991F0AC2B2</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_a899a58a-d237-4e16-a190-a133e1dab8c5</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0AA1DA1679AB1932E05305991F0AC2B2</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0AA1DA1679AB1932E05305991F0AC2B2</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0AA1DA3A35243EDFE05307991F0ABE7A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0AA1DA3A35243EDFE05307991F0ABE7A</con:value></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1419060917329@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=pVbZcuo4EP0VynlMGcs2xtgVqDJbhhQkXCDry5SQBSjXyI4ks+Trr2TAYUuGmXmBUrvVfXrR6b7hcB5ZfsA5ZoLEtLCaR5T7mbSqpYz6MeSE+xTOMfcF8odBr+tbReDD3RWt0GlWtb9hxfOgU4F6aNmuXsJmWYemB+SPbWMzhOMKcqQq5ynuUC4gFVXNAmZJNy3dAiPg+rbjm07Rs0tvWuEJMy5tS5Ui0LagVryqzYRIfMNYLpfFpV2M2dSwADCNl153iGZ4DrXazSaizBGrbfVRMcQIRxEqonhu3BgHOjch94dkSqFIGd76Cr/zBQzgGVIn5GR6peV3cdihkzg7NiCNKUEwIp9Q5aeHxSwOC0E0jRkRs/m3QZhAGdbxCunILNErzTiEdqGhA4SMQ53PoLm1NcATzDBFuPA46FS1q8uqll0dMUj5JGZzfnj8d3gwXeAoTnCo811YW2iXGzyTqdoNRn6HoijlZIHvVbMmEGG+rSZGl5sq9BmekFWXcNmgK67QGfvwjo6bbDTJFHPxXwq0V5yNkScYpbh2PzW7DSv81Qo6zrj83nsrlVZhfXbL02k1A7CvnAny0m6OR02ZN9Hmxl+M9H9NFt3rbn9u0PYtcT6jtWAWGqPl5PfqmT826nXkTp86H68Pwhs16dudPWqNGBp8LsrXq7UxRdFsCFAUM+e1PWqjyvNn1Gua5U734zoKBuFzV7CEkOGrubao15gG0BpHC+M2EU8v4q2cDPhLfRU2+7SdeO935eFj+27yeg/f1iM3hT2KBr1BgjlvbcM9wn8o2735YTp+x0jsjqoNOs1CW1YJip/JTElIqE8yVT9R5MMFpkKrqVuKO/xU0h0JfVnDzRkEgdkM7MB2rJLdarZbwLGB63lmGwT1lhvsSGaD4ghiI6YTonwpyt20zc8A0dznmIaY6Ys4lUzHtR8sNqGAhQ4dyEcQU45HcVWDcOJ6boh015JvrxQ6JR26rqUDzyqVQ2cMK6arFe5j8UAfWDARmB2wswkO2HmAEUkIVhSuOpzLFudCZuUDLlIRmcUFLFKcSpJnim99q1RxDE7mSYQVZmMeh2mEi8ksyXJk8M2/pUPEM2kDNFrtSgtUGi2z4TbLLVACKq/Akfm1QD17lN+Gf/xtlympExKlwFWgdSyrjc/MILCL8iQbztlZtTMfpCFR70+mXTCCNkgOP311k2qjvJWa3WDY34HOdS+72/0fdwet0elN44dojONE5o7CBdlzu1sN5JCRtFTb9UhS/Cimi0WaNYWr2JdJ64bKrAEsY4hRKnlzPYp/Y2rkRoyLhlSO+8h3Lj9EmIoZHQoo8Fx2cSE7XrCVDCUjSdMd+RBXl648By5l5gReiXOyRiQ3KoX4x6UL+UjpSXFf/i1jFn4V7IytPT8yTrmUCEKn6qQG1PqbtkCxNEsktcZs3/g5A+ecHwrzJOdYhOyncSrw918KijMlZyEUp1R0mlom2OfxDKdYJ9j/Ujoxk42KfHck/7w86iRrAYTlxslJZl+tAL56AXS6Nwu2Tk/HgVl2vaBueraVjQNnMw4aVt3Kk3KArnYiPpXs5em4x2t/AA==</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1419060919726</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value>0AA1DA3A35253EDFE05307991F0ABE7A</con:value></con:property><con:property><con:name>audienceIgnoreAll</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:0AA1DA19045B1946E05305991F0A4F03</con:value></con:property><con:property><con:name>policyID_before_DTC</con:name><con:value>urn:dece:policyid:org:dece:0AA1DA19045B1946E05305991F0A4F03</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fd52c9d3-8b99-4e90-9f6d-19ff5efc5448</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>573a939d-9280-452f-a9aa-d7f9e0039d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5333a278-be73-4359-bedb-c61a53c2ddc2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd25acbd-9c65-4451-b94d-9ab4c4cf123d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0efa8efd-6738-4fff-9054-d8447278fc7b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_012_DTCreate_with_affiliated_nodes_–_with_ULC_for_main_node_ULC_only_for_one_affiliated_node" searchProperties="true" id="bd90c764-2c22-4555-b1ae-1a97a8c98a1e">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="15769606-8827-41ee-ba6f-c97056728e4b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
tC.setPropertyValue("audienceIgnoreAll", null);
tC.setPropertyValue("audienceList", null);
</script></con:config></con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="ef3da5e3-d3a2-439c-aad6-d9ddd6665588"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="7a57a524-cd81-4411-8f7a-c26451ca9cda"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="49d455de-3d9f-4e89-99f5-d3434c26af73"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="d2f4fbd2-cece-4fe6-96e5-1630a4d1d8df">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("audienceList", "urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="302456b7-e62d-474c-80e8-93478368f5b2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="4d685d8a-c684-43c7-9ff3-01a0d4dcc49f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy Create" id="272c3007-2242-48d3-9a31-746f3d79f083"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC_Single_Node")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy GET" id="6586e9ab-56c4-43f6-8eed-78e1e0307091"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("policyID_before_DTC",tC.getPropertyValue("PolicyID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy Create for one of the audience node" id="0a622995-fef9-4acc-8033-57cc0a0d350b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdLLASP"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC_Single_Node")


myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy GET 1" id="5cc06329-e1c4-4b5a-99f9-4517460d0342"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("policyID_before_DTC",tC.getPropertyValue("PolicyID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity and Affiliate Node Settings" id="330024f2-f3a0-4a97-8f78-15f13080cf0a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = 0;
def urnNode = context.expand( '${#Project#urnNode}' )
String nodes = tP.getPropertyValue("nodeAffiliationRTL");
String audienceList = "";
String affiliationList = "";
List nodeList = nodes.tokenize(",");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It [$i]: $it";
	
	if (i == 0) {
		tC.setPropertyValue("NODE_ID", it);
		affiliationList = it;
		if (nodeList.size != i + 1) {
			affiliationList = urnNode + affiliationList + ";";
		}
		
	} else {
		
		audienceList = audienceList +urnNode+ it;
		affiliationList = affiliationList +urnNode+ it;
		if (nodeList.size != i + 1) {
			audienceList = audienceList + ";";
			affiliationList = affiliationList + ";";
		}
	}

	i++;
}
log.info "audienceList [$audienceList]";
log.info "affiliationList [$affiliationList]";
assert audienceList.length() > 0;

tC.setPropertyValue("audienceList",audienceList);
tC.setPropertyValue("affiliationList",affiliationList);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="12a124d9-4775-411b-b629-77595f2a6b5b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="52dbb5fd-5bfe-4342-a591-5717c1fb2a70">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>ACCOUNT_OID</con:name><con:value>09C775DAD3025B69E05305991F0AFF1D</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_442b9d5c-901f-4291-83d4-2a3786c5a231</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09C775DAD3015B69E05305991F0AFF1D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09C775DAD3015B69E05305991F0AFF1D</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09C775E106115B79E05305991F0AE582</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09C775E106115B79E05305991F0AE582</con:value></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418124355208@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=pVbbcuI4EP0VyvM4ZSwb22BXoIpgSEiY3IDMZF+2FLkNmhjZsWRi8vUjGXCAXJbdfXKp3eo+3To66hOOF7HldzmHTNCE1YpFzLhfWttanjE/wZxyn+EFcF8Qf9z9MfKtOvLxdotWGwZt7W/bth690CG6h8xIty3P1FuN0NYt3Gi2XOJgq2FKV85zGDIuMBNtzUKmrZuWjryJafqW7dte3XXdv7TaPWRcxpYudaRtQBW8rc2FSH3DeHl5qb806kk2MyyETOPXj9GYzGGBtc7JuqIyUdbZ+JN6CATimNRJsjBOjD2fk5D7YzpjWOQZbHKFn+VCBvIM6RNyOvumVXshHLIoKZc9zBJGCY7pK1b9+QFinoS1bjxLMirmi0+LMJEKrENBdGLa7Jtm7EM7MtAewoxjnc+xuYl1BxFkwAjUpnfDtvbtuFMrt04yzHiUZAu+v/x3eIAtIU5SCHW+LWsD7fiAH3SqcwLEHzIS55wu4UqRNcUE+OY0gRwfqnaTQUSLEeWSoAVX6IxdeAfLdTcCOgMu/ssB7RzOOsg9jnPoRM+3SDw0FoMcXRTLVxzk0/geeoOZeGqXAHadS0N1tOvlASkrEq13sPOLpyvPXF64K5sUc3weNHCxEnQSQOBOnr97NHi8PTtHU+LeDn4/5KN+kaDujXvfH9l2eEayy6cZrKbRefI4O8MNUlzf9i7Y6wzbTrw695jz05ye9mYPl5euN3R/d/Ht6OHKtXBLUFzYWTS5eGqlS0ruvOL6fJr20tepEVHeP4Ofragbj37azV/fU3rWTF/aVTk7+Pdt2zs/zh9/AxHbpaLBMKgN5Clh8bWYKQsN9ah09VMlPlwAE1pH7VLa4edS7mjoyzNcr5HXazadvolc03ROm14fOQ3keJ45QN2+07K2IrNGcQCxl7CIqlxKcte0+RogWfgcWAiZvkxyqXRc+yJigAWuDdmdvAQJ4zBJ2lrTxM3IajR01wNTt1HT0Vte6OlW08HIJSE4tqPVrhJxza6zbiQg21dne0+d74DQlIKScMVwLinOhezKM17mIjbrS1xnkEuRz5Teyq0tx+B0kcagMBuLJMxjqKfztOyRwddfS8eEl9Ye6vUHrT5q9fpmrxm4fWQj1deyvxY6LS/lp+Uf/tt2SvqEVDlwVegpyNOGD96gxrbKz7vR3O3GNnw3D6m6f7LtIqNkjWT/1xubFI0qKgWj7vhmC7ryPW7v6H/svetP3u80vqjGOGxklSiUl/kt7XY0kI+MlKXOliPPuP5cz5fLvGRFU8lvJsNLTTQdA1nGGEguhXM1SZ6AGVUU46hXqgJ+kLyy70PMxZyNBRawkDSulcsjxpIxcDWWDOVNLI6defZSytYJKMRHtl4sRyqF+Mupi/hE+Unzjfy8JFn4dmIfxNrJI+uUU4mgbKZW6oVafcILksiwVGprku0G/yjAR8n3jVWTKyxCEuoxF/D5n5oSzbaGCUlyJoaBVhp2hbzEKVYp+G9O78KUb0U1PNJ/nh51WlKAgBw5OS3jqxnAV1eAzXYeg03S9+9B0A0aks2n7t57MBiYQdWUPXSdd+b3lp0+HXK88wc=</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418124356711</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value>09C775E106125B79E05305991F0AE582</con:value></con:property><con:property><con:name>audienceIgnoreAll</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:09C775D0436D5B67E05305991F0A66B6</con:value></con:property><con:property><con:name>policyID_before_DTC</con:name><con:value>urn:dece:policyid:org:dece:09C775D0436D5B67E05305991F0A66B6</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fd52c9d3-8b99-4e90-9f6d-19ff5efc5448</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>573a939d-9280-452f-a9aa-d7f9e0039d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5333a278-be73-4359-bedb-c61a53c2ddc2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd25acbd-9c65-4451-b94d-9ab4c4cf123d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0efa8efd-6738-4fff-9054-d8447278fc7b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0a622995-fef9-4acc-8033-57cc0a0d350b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5cc06329-e1c4-4b5a-99f9-4517460d0342</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_013_DTCreate_with_affiliated_nodes_without_ULC_for_main_node_with_ULC_for_all_affiliated_nodes" searchProperties="true" id="2ecec26f-60ea-42e5-98fb-edb8a20b660f">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="e3f43ee0-5fb6-4645-862c-2d3dd590ae03"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
tC.setPropertyValue("audienceIgnoreAll", null);
tC.setPropertyValue("audienceList", null);</script></con:config></con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="a4e54eb3-453e-43cb-923e-f2d21fbb4922"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="167a18c5-4cab-4cab-8608-5f92dfa0e45a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="387e90d1-c913-4149-9b09-376c16356ff6"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="8dec1e9a-cf30-4d97-a813-7b5083913bd5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("audienceList", "urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="516b3aa9-4d48-42cf-bdda-a18f7c55a92d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="7d3d3677-0ae8-48c5-8e88-bcf089ff3462">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy Create for first audience node" id="2fb157d3-6a3d-4365-93d6-bec72f54b194"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdLLASP"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC_Single_Node")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy GET" id="16240b01-b512-4f4d-8efc-daada23f898b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("policyID_before_DTC",tC.getPropertyValue("PolicyID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy Create for second of the audience node" id="c7bfb23d-ee56-4029-96cb-11939f9f572a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdDLASP"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC_Single_Node")


myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy GET 1" id="769a8850-7169-43b4-9b0a-65af3cae8112"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("policyID_before_DTC",tC.getPropertyValue("PolicyID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set the node to requesting node" id="9ab5b066-05dc-495a-89ff-1c1e07d0765b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity and Affiliate Node Settings" id="1e302a72-2205-40c2-a5e7-7293892ea852"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = 0;
def urnNode = context.expand( '${#Project#urnNode}' )
String nodes = tP.getPropertyValue("nodeAffiliationRTL");
String audienceList = "";
String affiliationList = "";
List nodeList = nodes.tokenize(",");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It [$i]: $it";
	
	if (i == 0) {
		tC.setPropertyValue("NODE_ID", it);
		affiliationList = it;
		if (nodeList.size != i + 1) {
			affiliationList = urnNode + affiliationList + ";";
		}
		
	} else {
		
		audienceList = audienceList +urnNode+ it;
		affiliationList = affiliationList +urnNode+ it;
		if (nodeList.size != i + 1) {
			audienceList = audienceList + ";";
			affiliationList = affiliationList + ";";
		}
	}

	i++;
}
log.info "audienceList [$audienceList]";
log.info "affiliationList [$affiliationList]";
assert audienceList.length() > 0;

tC.setPropertyValue("audienceList",audienceList);
tC.setPropertyValue("affiliationList",affiliationList);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="40ee0029-7a4d-4c76-9b7d-9f2abe16d99e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="811a060d-95b0-4ce3-98ab-4c73c8100fa8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>ACCOUNT_OID</con:name><con:value>09C775CFF64E5B61E05305991F0A96CE</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_5da6e2de-13fc-491d-bf45-87c30739341b</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09C775CFF64D5B61E05305991F0A96CE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09C775CFF64D5B61E05305991F0A96CE</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09C775E0DD9B5B7DE05305991F0A3880</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09C775E0DD9B5B7DE05305991F0A3880</con:value></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418124439651@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=pVbbcuI4EP0VyvOYMpaNwdgVqOJaIUMmTGBzmZctIbeNMrZsLJnLfP1IBjxALsvuPoHare7TraOjvuY4jiyvwzlkgiassokjxr3C2tLyjHkJ5pR7DMfAPUG8aedu7FlV5OHDFq0y6re0v+s+boDlg27WAqLbrunr88Cu602H1JBTc2u2OZeunOcwYlxgJlqahUxbNy0duTPT9KyGZ6Gq2TR/aJVHyLiMLV2qSNuD2vCWthAi9QxjvV5X17VqkoWGhZBpPN+Np2QBMdba17uKikRZe+9Pqj4QiCJSJUlsXBsnPtc+96Y0ZFjkGexz+R/lQgZyDenjcxp+0cq94I9YkBTLHmYJowRH9BdW/bkDsUj8SicKk4yKRfxhESZSgXXYEJ2YNvuiGafQLgx0gjDjWOcLbO5jPUAAGTAClb8eRi3ty2WnVmydZZjxIMlifrr8d3iArSBKUvB1fihrD+3ygO90qn0NxBsxEuWcruCbImuKCfD9aQK5PFRlkkFAN2PKJUE3XKEzjuGdLXfd6NMQuPgvB3R0OLsgjzjKod3o366M58ZXc9PDLzYaR3S6nU6W+XTRaRUAjp0LQ3m0u+UZKUsS7Xb05l9DM8y/B7OwexOm93N34+PkNbsCFIlgs9wutq8AQ6v+NF9foVvSmISP7s0kXbmxvbza0kX809kGV3XHfNw8Bc7jfTdy4qUdvmw68z7CK5y+Dp9fF1fhZBQ/P00a+HvyK95esZnxbL3ehYNRwmcvNahZo8fpbTrtjNNxd7z6FWaCPGW1xs06YPj2h+tvB0mrLOcI/6ntcOen+fwViDgsFQ1G/cpQnhIWn4uZslBfDwpXL1XiwwUwobXVLqUdXi7ljvqePMPdGrk9x6kPUL/vdutdpz9A9Rqqu645RJ1as4kOIrNDcQaxl7CAqlxKcne0+RwgiT0OzIdMXyW5VDqufRKxjwWujNiDvAQJ4zBLWlowd01Sw029Zs8buu3If65lmboJTp0gaPiAmlrlWyLu2X3WCQRkp+psn6jzAxCaUlASrhjOJcW5kF1Z4lUuIrO6wlUGuRT5TOmtZ9nNusFpnEagMBtx4ucRVNNFWvTI4LtfS8eEF9Ye6g2GzQFq9gZmz+k3BshGqq9Ffy3ULS7lh+Wffzt0Svr4VDlwVWgX5GnDO2+Qeajy4244x904hO/kPlX3T7ZdZJTskJx++sMmRaOSSv1xZzo5gC59L9s7/h97HwaztzuNT6oxzhtZJvJX9CjtYTSQj4yUpfaBI0tcXVbz1SovWOEo+c1keKmJZt1AljEFkkvh3M6Sn8CMMopx0StVAj9LXtpPIeZiwaYCC4gljSvF8oKxZApcjSUjeRM3l848Jyll6wRsxHu2XiRHKoX406mLeET5SfNE/qyTzP9zYu/EOsoj65RTiaAsVCv1Qm0/4AVJZFgqtTXJjoO/F+C95KfGssklFiEJNc8FfPylokSzpWFCkpyJUV8rDMdCXuAU2xS8P05vwhRvRTk80n+eHnVaUICAHDk5LeKrGcBTV4CFR4/BPunb96A3HDbsfr3bMI/fA7fRG5RNOUHXfmN+aznq0znH278B</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418124441301</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value>09C775E0DD9C5B7DE05305991F0A3880</con:value></con:property><con:property><con:name>audienceIgnoreAll</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:09C775CF2AD75B59E05305991F0A48D8</con:value></con:property><con:property><con:name>policyID_before_DTC</con:name><con:value>urn:dece:policyid:org:dece:09C775CF2AD75B59E05305991F0A48D8</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fd52c9d3-8b99-4e90-9f6d-19ff5efc5448</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>573a939d-9280-452f-a9aa-d7f9e0039d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5333a278-be73-4359-bedb-c61a53c2ddc2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd25acbd-9c65-4451-b94d-9ab4c4cf123d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0efa8efd-6738-4fff-9054-d8447278fc7b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0a622995-fef9-4acc-8033-57cc0a0d350b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5cc06329-e1c4-4b5a-99f9-4517460d0342</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ab5b066-05dc-495a-89ff-1c1e07d0765b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_014_DTCreate_with_affiliated_nodes_with_ULC_for_all_the_nodes" searchProperties="true" id="be9a7888-7e65-4517-a6e6-4f617515cfb2">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="8931a184-0b54-468f-b411-ab31800b32b5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
tC.setPropertyValue("audienceIgnoreAll", null);</script></con:config></con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="852f249a-94c5-4dba-8715-0f8e2e93bc63"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="4f6983c2-1a7d-4c6b-ad7a-471eb4c2dbb8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="f0ceded0-74ba-4bd1-b56c-52fb6e80a24c"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="f236d705-e7ee-47c9-98b7-403a399b6418">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="10e5718b-4e08-41c9-b8ec-e5ca14862cf5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="f93c30a8-403e-45af-88a4-2e0e73903cdf">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Establish Entity and Affiliate Node Settings" id="b218948f-f56e-4aaa-87dc-313f61089d13"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = 0;
def urnNode = context.expand( '${#Project#urnNode}' )
String nodes = tP.getPropertyValue("nodeAffiliationRTL");
String audienceList = "";
String affiliationList = "";
List nodeList = nodes.tokenize(",");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It [$i]: $it";
	
	if (i == 0) {
		tC.setPropertyValue("NODE_ID", it);
		affiliationList = it;
		if (nodeList.size != i + 1) {
			affiliationList = urnNode+affiliationList + ";";
		}
		
	} else {
		
		audienceList = audienceList +urnNode+ it;
		affiliationList = affiliationList +urnNode+ it;
		if (nodeList.size != i + 1) {
			audienceList = audienceList + ";";
			affiliationList = affiliationList + ";";
		}
	}

	i++;
}
log.info "audienceList [$audienceList]";
log.info "affiliationList [$affiliationList]";
assert audienceList.length() > 0;

tC.setPropertyValue("audienceList",audienceList);
tC.setPropertyValue("affiliationList",affiliationList);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="327fdacb-2882-4a7b-8c50-fde8eb5336e5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set loopuntil &amp; counter values" id="7044db3b-c21a-4b41-98ce-220408a40a3b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodes = tP.getPropertyValue("nodeAffiliationRTL").toString();

List nodeList = nodes.tokenize(";");

log.info ""+nodeList.size();
def loopuntil=nodeList.size();

tC.setPropertyValue("loopuntil","$loopuntil");
tC.setPropertyValue("counter","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Get" id="a9efa32c-f7a6-4e3f-a2c7-0f7c8b57a2ae">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="6a6e982b-40b6-4a74-981f-5947bd16df02">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set affiliated nodeId value &amp; loop again if necessary" id="42ef86a2-4aab-4c91-b420-f326dc7a98bd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodes = tP.getPropertyValue("nodeAffiliationRTL").toString();
List nodeList = nodes.tokenize(";");
def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;
	
if (counter &lt; loopuntil) {
	log.info "counter "+counter;
	def nodeId = nodeList.get(counter);
	tC.setPropertyValue("NODE_ID","$nodeId");
	tC.setPropertyValue("counter","$counter");
	log.info "ULC Policy Creating for the node $nodeId";
	testRunner.gotoStepByName("Call STS Get");
}</script></con:config></con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>ACCOUNT_OID</con:name><con:value>09C775D1B9E65B6DE05305991F0ADAF3</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value>urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_7565d0e3-1197-46fb-a52f-96362157f232</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09C775D1B9E55B6DE05305991F0ADAF3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09C775D1B9E55B6DE05305991F0ADAF3</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09C775D1B9F25B6DE05305991F0ADAF3</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09C775D1B9F25B6DE05305991F0ADAF3</con:value></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418124530637@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=pVbbcuI4EP0VyvOYMpZtjIMrUEWAZBgIyQC5TF62hNwGJUYilmzIfP1KBjxASJbdfXKp3eo+fdHpvhB4HjtBUwhIJOWstJrHTAS5tG6kCQs4FlQEDM9BBJIEo+ZNP3DKKMDbK0ap264bf/le1QsRuKZt13yzUo0mJvacyKxV3apje37kuI5SFSKFLhMSM1k3HGRXTNsxUW1s24HjBxVURi56NkoPkAhlW6mUkbEBtRJ1YyblIrCs5XJZXrplnkwtByHberrpj8gM5thoXKwjyh0ljY0+KYdAII5JmfC5dWHt6VyEIhjRKcMyTWDjK/zMF7JQzVI6oaDTb0ZxF8Iui3h+bGHGGSU4pr+xzs8NyBkPS814yhMqZ/NPg7CRNmzCipjErrBvhrUP7URDewgTgU0xw/bG1hAiSIARKN0Pu3Xj22lVy6+OE8xExJO52D/+OzzAMoj5AkJTbMPaQDvd4JFMNS6ABF1G4lTQDAa6WReYgNhUE8jppkp3CUR01adCNehKaHTWLryD4zobbToFIf9LgXaKszbygOMUGtngsd+LJvc/r+G7vJ15PUIoq+GeRbv1HMCuci4oSrs+HjRl0UTrG08xll48fH6cOa/D4Vn354jzM0yHz69nNp+usPfdR2cu9ZzxXbPzMmu+k8vLrOMOwid7fP7LC8PmG/fTh9Eye3p5s/u969ngEa3A8ifjyn2nc7ci8ZC8dO9ffrxlz+fTm8XPX7Ufv7JeO751rm6uW/7gedC7/uGS6Hwa9R+m3wfDl+ZkPu7FT61BVE2z1/bjBMYtt7KsF+Hs4N+Xbd/8KJ28AJHbo26Dbrt0paqE5ddkpiU0NKNcNVho8hESmDQa+pbmjiBVdEfDQNVwfUa1lu97bfuyduV4l9V2B3ku8mo1+wo1280rd0syaxQHEFucRVT70pS7bpuvAZJ5IICFkJgZTxXTCeMLi20scanLhuoRcCZgzOtG5IAD/iQybVKZmJWoBmYNEWK6BFdJNFGv3PGM0oDLW3abNCMJyT47V/bYeQiELihoCtcdLlSLC6my8oazVMZ2OcNlBqki+UTzbeBUzj1L0PkiBo3ZmvMwjaG8mC3yHFli/XVMTEQubaFW5+q8g85bHbvlt6sdVEE6r3l+HXSZP8pPwz/8t82U0gmpVhA60EtQ1YYjM8jdRvkhG97RWbU130xDqt+fSrtMKFkj2f/1p5t0GxWt1O43R3db0IXuaXf7/+PusDP+eNP6IhrrMJGFozCjO263q4EaMoqWGtseecPlt3KaZWneFb6m30SZt3RqLeRYIyCpIs73MX8FZhVWrJOmVAH8wHkh34eYyhkbSSxhrtq4lB9PWEtGIPRa0lUvcXXqzrPnUqVOwkoek7VitVJpxF9uXSQgWk+J79RnyZPwT8WO2Nrxo+JUW4mkbKpPekK9f9IXhCuzVHErT3aNHzNwzPm+sEhygUWqhpqkEj7/U9KkWTcwITxlsts2csEukec45fsCgj9KH8zks6JYHuk/b48mzVuAgFo5Bc3t6x0g0E+ATXeGwcbp8XnQ8b6aB/voGh/EHyU7eTrs8cbf</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418124532227</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value>09C775D1B9F35B6DE05305991F0ADAF3</con:value></con:property><con:property><con:name>audienceIgnoreAll</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>counter</con:name><con:value>0</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fd52c9d3-8b99-4e90-9f6d-19ff5efc5448</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>573a939d-9280-452f-a9aa-d7f9e0039d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5333a278-be73-4359-bedb-c61a53c2ddc2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd25acbd-9c65-4451-b94d-9ab4c4cf123d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0efa8efd-6738-4fff-9054-d8447278fc7b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0a622995-fef9-4acc-8033-57cc0a0d350b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5cc06329-e1c4-4b5a-99f9-4517460d0342</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ab5b066-05dc-495a-89ff-1c1e07d0765b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7044db3b-c21a-4b41-98ce-220408a40a3b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_019_DTCreate_with_affiliated_node_'Content_Provider'filiated_node_'Content_Provider'_COORD-132" searchProperties="true" id="c71b05ad-c0ad-4ca1-8e2f-34b09541b010">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="cb05ba53-54e6-4519-81c8-73495b41dd2e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
tC.setPropertyValue("audienceIgnoreAll", null);</script></con:config></con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="48f74912-7276-41f0-8776-7683139beae8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="e02f786a-1265-416c-a6a4-d0b7752bedc7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="d5a316af-fd74-4df6-b153-e890769be549"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="fa1cd30b-e971-4e75-8247-5b0cb15ed139">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="fabb8aa7-41fe-4712-a276-a62ee20ae200">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="fad16c95-c0cf-49be-a8f3-0705c771d994">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Establish Entity and Affiliate Node Settings" id="472f8ee7-1d73-44b6-98b2-98926365002e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeAffiliationRTL_CON",tP.getPropertyValue("nodeIdRTL")+","+tP.getPropertyValue("nodeIdCON"))
log.info tP.getPropertyValue("nodeAffiliationRTL_CON");
int i = 0;
def urnNode = context.expand( '${#Project#urnNode}' )
String nodes = tP.getPropertyValue("nodeAffiliationRTL_CON");
String audienceList = "";
String affiliationList = "";
List nodeList = nodes.tokenize(",");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It [$i]: $it";
	
	if (i == 0) {
		tC.setPropertyValue("NODE_ID", it);
		affiliationList = it;
		if (nodeList.size != i + 1) {
			affiliationList = urnNode + affiliationList + ";";
		}
		
	} else {
		
		audienceList = audienceList +urnNode+ it;
		affiliationList = affiliationList +urnNode+ it;
		if (nodeList.size != i + 1) {
			audienceList = audienceList + ";";
			affiliationList = affiliationList + ";";
		}
	}

	i++;
}
log.info "audienceList [$audienceList]";
log.info "affiliationList [$affiliationList]";
assert audienceList.length() > 0;

tC.setPropertyValue("audienceList",audienceList);
tC.setPropertyValue("affiliationList",affiliationList);

tC.setPropertyValue("audienceIgnoreNodes","urn:dece:org:org:dece:CON");
tC.setPropertyValue("audienceIgnoreAll","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="5b0ae342-77e6-40c4-a3a0-6d055d0542e2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="8184f0e3-acbb-4d51-877a-e631058a3ea2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>ACCOUNT_OID</con:name><con:value>16E79A13B81A3722E05305991F0AEC63</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value>urn:dece:org:org:dece:RET;urn:dece:org:org:dece:CON</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_6b6e623f-f10a-4c52-a886-ac1e7b009b37</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:CON</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>16E79A13B8193722E05305991F0AEC63</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:16E79A13B8193722E05305991F0AEC63</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>16E79A13B8253722E05305991F0AEC63</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:16E79A13B8253722E05305991F0AEC63</con:value></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1432555925107@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc9o6EP0rjPvYMbYMNtgTmCFAUtp8FWjT5uWOkBesYsvGkg3k11cy4GJKcrn3yaP1avfs7tGRrjiOQsvrcQ6poDGrbaKQca+wdrQsZV6MOeUewxFwTxBv0ru/86y66eHDFq02GnS0f6wGAQfhmT7zWy296dhIx67v69h25jBrz7ELjnTlPIMR4wIz0dEsE9m6aeuWPUWWZ7qeZdddB71ote+QchlbutRNbQ9qwztaIETiGcZ6va6vG/U4XRiWaSLjx/3dhAQQYa17tauoSJR29/6k7gOBMCR1EkfGlVHxufK5N6ELhkWWwj6X/1Yu0zBdQ/r4nC4+aOVe8EdsHhfLPmYxowSH9BWr/tyDCGK/1gsXcUpFEL1ZBDJVYB02RCeoyT5oRhXahYEqCFOOdR5gtI81hjmkwAjUvo1HHe3DZVMrtk5TzPg8TiNeXf43PMByCOMEfJ0fytpDuzzgmU51r4B4I0bCjNMcHhRZE0yA76cJ5PJQtacU5nRzR7kk6IYrdMYxvJPlrhsDugAu/s+AjoazC/Idhxl0fz6gyL0xn+gruqY/UeDMVsDQ8HkYk04B4Ni5MJSj3S1PSFmSaLdj+Qsv0f3L1vjSyg1/MJk8R+Pb5ec88DlZ3QaPz6JnTJOohYc5b5Mvd+797HPw8nl6/3WYW6uEW73GPAqDUW/WX/+IDStD+e3ql5F8ep3dfLqz3fVi8bJ9aoLgfWv5lfCJM9w4pn2b2aaRTQdto/0sHn7csMXS/rj91ks/CuQErQa+7jtJDpuwb+DX1s9t0x0vO2U5R/irtsOZn2SzX0DEYaloMBrUbuSUsHhfzJSF+vq8cPUSJT5cABNaV+1S2uFlUu6o78kZ7tbIGbbcHmpcty270bKsoWk3TNt10Y3ZG/adxkFkdihOIPZjNqcql5LcHW3eB0gijwPzIdXzOJNKx7V3Ig6wwLURG8tDEDMO01jKM2o6IlvPNlke8QxFwTwncSAWKGxqtYdYPLLHtDcXkFZF2a6I8hgITSgo5VbE5pLZXMhmrHCeiRDVc1xnkEltT5XMelazbRucRkkICqoRxX4WQj0JkqI1Bt99LR0TXljHw2lx3N4s7PTfoQfSx6fKgatarkHOEc7cLuhQyNsFt48LPoTvZT5VJ0s2VKSU7JBUf/3hiSJISRJZ0QFy6XlqqEQ1TgsqE/k5JSXTy/tayrg8+N3DOFYY1Vf1LM+z4qJLZWhDahwyJkAyqUnbabwEZpTbjYsugBLxSdbSXsWWiYBNBBYQSarUiuUFN/4EuLrxR5Lkm0ufE5WUsmcCNuKcrR/K14pC/O6DhnhE+Unzk/ys49T/M6ozsY7yyDrlhS8oW6iVEv/tG4QgsQxLpWzF6XHwcwHOJa8ayyaXWIRk0iwT8PafmtKjjoYJiTMmRgOtMBxrZIFTbBPw/jj9FaaQ4fJdRv/9YabTggIE5GuO0yK+ul49xX22ONLZfdLzUovc96S2iq77l/lvy1GfTjne/Q0=</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1432555928343</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value>16E79A13B8263722E05305991F0AEC63</con:value></con:property><con:property><con:name>audienceIgnoreAll</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>audienceIgnoreNodes</con:name><con:value>urn:dece:org:org:dece:CON</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fd52c9d3-8b99-4e90-9f6d-19ff5efc5448</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>573a939d-9280-452f-a9aa-d7f9e0039d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5333a278-be73-4359-bedb-c61a53c2ddc2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_020_DTCreate_with_affiliated_node_'Content_Provider:Customer_Support'filiated_node_'Content_Provider'_COORD-132" searchProperties="true" id="6fc57d10-9413-454c-bfa7-dc7c652f9db6">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="ce846c23-5627-4015-856b-64107c01b513"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
tC.setPropertyValue("audienceIgnoreAll", null);</script></con:config></con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="ae376f23-fc9d-4727-aaed-97a5215a49fa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="b391e825-2b95-4e9d-8f0c-321830a3e857"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="c98e09b0-b631-4d8d-95e7-2537727ce247"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="5e549f10-a735-428c-ae41-58c49b52ce28">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="4551e488-9f5f-48ad-9c70-094610411ac2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="3fbbd958-059c-421c-a7ca-2afb4cb18961">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Establish Entity and Affiliate Node Settings" id="a9e736c4-d062-430f-ad52-5b8da7358efa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeAffiliationRTL_CON:CS",tP.getPropertyValue("nodeIdRTL")+","+tP.getPropertyValue("nodeIdCONCS"));
log.info tP.getPropertyValue("nodeAffiliationRTL_CON:CS");
int i = 0;
def urnNode = context.expand( '${#Project#urnNode}' )
String nodes = tP.getPropertyValue("nodeAffiliationRTL_CON:CS");
String audienceList = "";
String affiliationList = "";
List nodeList = nodes.tokenize(",");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It [$i]: $it";
	
	if (i == 0) {
		tC.setPropertyValue("NODE_ID", it);
		affiliationList = it;
		if (nodeList.size != i + 1) {
			affiliationList = urnNode+affiliationList + ";";
		}
		
	} else {
		
		audienceList = audienceList + urnNode+it;
		affiliationList = affiliationList +urnNode+ it;
		if (nodeList.size != i + 1) {
			audienceList = audienceList + ";";
			affiliationList = affiliationList + ";";
		}
	}

	i++;
}
log.info "audienceList [$audienceList]";
log.info "affiliationList [$affiliationList]";
assert audienceList.length() > 0;

tC.setPropertyValue("audienceList",audienceList);
tC.setPropertyValue("affiliationList",affiliationList);

tC.setPropertyValue("audienceIgnoreNodes","urn:dece:org:org:dece:CON_CS_1");
tC.setPropertyValue("audienceIgnoreAll","false");
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="c865ce09-5671-47cd-a3d4-af3d53152a89">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="51d08f0f-0fa9-4a1b-8b46-49487c7c6f90">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>ACCOUNT_OID</con:name><con:value>16F7F08BD09979DBE05305991F0A1C78</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value>urn:dece:org:org:dece:RET;urn:dece:org:org:dece:CON_CS_1</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_2c986ac8-6b8b-463d-999e-edf56f126938</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:CON_CS_1</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>16F7F08BD09879DBE05305991F0A1C78</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:16F7F08BD09879DBE05305991F0A1C78</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>16F7EBB2347A564BE05305991F0AC89C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:16F7EBB2347A564BE05305991F0AC89C</con:value></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1432626067266@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynlMGd+42RWo4pJkzCSTDBDC5GVLkWUQsSUjyRj261cy4GByWXafXGq3uk93Hx3pioM4sr0u54gJTEllE0eEe7m1raWMeBRwzD0CYsQ9Ab1x9/7Os6umBw5btIo/aGt/tWqtELquqTfBK9JrTiPQgelaOmjZtuMCy6w3gXTlPEU+4QIQ0dZs06rrZl23GxOz6Tktz7Gr9YbzolWmiHEZW7pUTW0PasPb2kKIxDOMLMuqmVOlbG7YpmkZs/u7MVygGGidq11FeSLW2fvDaoAgiiJYhTQ2roySz1XAvTGeEyBShva5gq9ymYbpGtIn4Hh+oRV7UeCTkObLPiCUYAgi/DdQ/blHYkGDSjeaU4bFIv6yCMtUgXW0gTq0auRCM8rQzgxUQsg40PkCWPtYIxQihghElaeR39YuzptavnXCAOEhZTEvL/8bHkTWKKIJCnR+KGsP7fyAn3Sqc4Wg5xMYpRyv0S9F1gRAxPfTRPD8UJVHhkK8ucNcEnTDFTrjGN7JcteNAZ4jLv7PgI6GswsyBVGKOnfZLHyaNIZLkfHunD11X5/qP2aMrt5oOwdw7JwbitHuliekLEi020Fnj7cv9u1wE6x+uKZ5GSbjsZ/YsLWxe78Gj9R93iaz55dsvB5kKKqxQTr6EzB/+PzkxiuHDR+Gv9/Ymi37rUljuvz5U4AoQ7H/e/bnyU+GyY/Z0vRHo/7052NmuSvqcrHx6730HizwbT94WcCb4ezZurmcdrdLA4e+/Saag2Vkh7d8fDnNpv4zcWYLvrWe9+We4C/bDmd+nL4uERSHpaKBP6jcyCkB8b2YKQsO9DB39RIlPlwgIrSO2qW0w0ul3OHAkzPcra3GTfO617OdWrNbb9R612bdMeuua92Y3X7L7R9EZofiBGKfkhCrXEpyd7T5HiCMPY5IgJi+pqlUOq59E3EABKj4ZCQPASUcTaiUZ0ue5m1KM8d2RLOGgyV4XaxhCJhW+UXFA3lg3VAgVtJkyyxp8ghBnGCkhFvxmkticyF7sQLrVERWdQ2qBKVS2plSWc+uteoGx3ESIYXUiGmQRqiaLJK8MwbffW0dQJ5bR9eT/LR9Wdfpv0MLpE+AlQNXtfSQHCP65HKxD4V8XbBzXPAhfDcNsDpYsp+CYbhDUv71ThPFj4IjsqID5MLz1FCKapwWVCQK1hgWRC+ua6ni8tx3DuNYAau6qqbrdZrfc0yGNqTEWcYYwVRK0nZC3xAxiu3GWfpfID7JWtjL2FKxIGMBBIolVSr58owLf4y4uvB9yfHNua+JUkrZM4E24jNbP5KPFYX42/cM9KDyk+ZH+ckoC95H9UmsozyyTnnfC0zmaqW0f/sFISCVYbFULcqOg38W4LPkZWPR5AKLkEx6TQX6+k9FyVFbAxDSlAh/oOWGY4nMcYptgrx3pw9hchUunmX4399lOs4pAJF8zHGcx1e3q6e4T+ZHMrtPeqq0N2arNzDdVtMdlJTW6jdbRVNK6DofzB8tR3065XjnHw==</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1432626071026</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value>16F7EBB2347B564BE05305991F0AC89C</con:value></con:property><con:property><con:name>audienceIgnoreAll</con:name><con:value>false</con:value></con:property><con:property><con:name>audienceIgnoreNodes</con:name><con:value>urn:dece:org:org:dece:CON_CS_1</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fd52c9d3-8b99-4e90-9f6d-19ff5efc5448</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>573a939d-9280-452f-a9aa-d7f9e0039d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5333a278-be73-4359-bedb-c61a53c2ddc2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_022_DTCreate_with_affiliated_node_'DSP'filiated_node_'Content_Provider'_COORD-132" searchProperties="true" id="d1bb38bb-ee57-4b55-ba21-ef924397c4c5">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="8d79037d-e5b8-442a-9009-f2793d4f712c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
tC.setPropertyValue("audienceIgnoreAll", null);</script></con:config></con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="856e399c-5293-4fae-84dc-a79805f901c6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="77b2c1f3-bb1b-43da-827e-704ac955efe7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="089e3aa9-d45f-4841-8d58-8510079c188a"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="6b97b106-20b7-4d5f-bc0c-58aaf0cbf782">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="2f3c518f-02ea-4b49-81c4-2aa550a6ebcf">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="3a5fedd0-07ed-4035-bf62-ccdc3d1143fb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Establish Entity and Affiliate Node Settings" id="0f362731-b7f3-4aa6-bd0e-e74749fd365d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeAffiliationRTL_DSP",tP.getPropertyValue("nodeIdRTL")+","+tP.getPropertyValue("nodeIdDSP"))
log.info tP.getPropertyValue("nodeAffiliationRTL_DSP");
int i = 0;
def urnNode = context.expand( '${#Project#urnNode}' )
String nodes = tP.getPropertyValue("nodeAffiliationRTL_DSP");
String audienceList = "";
String affiliationList = "";
List nodeList = nodes.tokenize(",");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It [$i]: $it";
	
	if (i == 0) {
		tC.setPropertyValue("NODE_ID", it);
		affiliationList = it;
		if (nodeList.size != i + 1) {
			affiliationList = urnNode+affiliationList + ";";
		}
		
	} else {
		
		audienceList = audienceList +urnNode+ it;
		affiliationList = affiliationList +urnNode+ it;
		if (nodeList.size != i + 1) {
			audienceList = audienceList + ";";
			affiliationList = affiliationList + ";";
		}
	}

	i++;
}
log.info "audienceList [$audienceList]";
log.info "affiliationList [$affiliationList]";
assert audienceList.length() > 0;

tC.setPropertyValue("audienceList",audienceList);
tC.setPropertyValue("affiliationList",affiliationList);

tC.setPropertyValue("audienceIgnoreNodes","urn:dece:org:org:dece:DSP");
tC.setPropertyValue("audienceIgnoreAll","false");
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="f6e09c71-8304-4417-8491-209cfa8b1ece">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="a52d0461-c25e-4a80-bd4e-a47c4013dd48">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>ACCOUNT_OID</con:name><con:value>0AA1FFCDA1EC1CBAE05305991F0A719B</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value>urn:dece:org:org:dece:RET;urn:dece:org:org:dece:DSP</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_39f2370c-a158-4caf-8efd-00486ed75ebc</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:DSP</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0AA1FFCDA1EB1CBAE05305991F0A719B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0AA1FFCDA1EB1CBAE05305991F0A719B</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0AA1FFF02088396EE05307991F0A5876</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0AA1FFF02088396EE05307991F0A5876</con:value></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1419061550282@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbd6o4FP4rLs7jWUhAbJVVXQsvnXqO9qJtp+PLrBg2kBYCJUFtf/0kqFRs7TjzpNnsfPvbl3zJBcdxZDku55AJmrDaOo4YdwprR8sz5iSYU+4wHAN3BHFm7mTsWHXk4N0WrTYadLS/2xYiCLeauoW8lm5bLaRj1AbdXtgNYlrtNjrzpSvnOYwYF5iJjmYh09ZNS265R+eO3XQQqts2mmu1R8i4xJYudaRtSa15RwuFSB3DWK1W9VWjnmSBYSFkGk+T8YyEEGOte7HJqAiUdbf+pO4BgSgidZLExoVR8bnwuDOjAcMiz2AbyzsWCxmobUgfj9Pgh1buBW/E/KRY9jFLGCU4ou9Y1WcCIky8mhsFSUZFGB9NwkQKWIc10Ylpsx+aUaV2IlCFYcaxzkNsbrGm4EMGjEDtYTrqaD9O61qx9T7DjPtJFvPq8r/xAbaEKEnB0/kurS210wG/qFT3AogzYiTKOV3CtRrWFBPg224COR2qdpuBT9djyuWArrliZ+zTO1huqjGgAXDxfxq015wNyCOOcujKfyF1f92J9XyyplH47qV3UTZ18equUxDYdy4MZWs3y4OhLIdoCz+buOLqfmaEv8fUR6so/BMFZyKY9MU4bD6y+Sjr5W9D8vOl+fK+ym2rF7ju+jpBi8vx6zBaeWZsBk+LAfz1axry5OaqGS59K33vT95m8xV+jMQ8CB5+epMFWj4njcEZ8RdDaZ6Jh2vsPfHbXq+/aCI8Wvi2i/ncDuzHh8UZXPXCm8Uf7hS3n+WfK2/w9NAp09njX7XtzvwsXzwDEbulGoPRoHYpu4TF92KmLNTT/cLVSZX4cAFMaF21S2mHk0u5o54je7hZI9c1Ly8vkYVarUb7bDhEzQY6b7fNS+Q2W+dnO5HZsDig2E+YT1UsJbmbsfmeIIkdDsyDTF8muVQ6rn2DOMAC10ZsKg9BwjjcJ1KezTB/DoigfoZi+60RrUSKrVYeSXW9TsQNu8lcX0BW0WQTVTR5CoSmFJRwq7nmcrC5kLV4xctcRGZ9iesMcintmVJZx7JbTYPTOI1AMTXixMsjqKdhWlTG4JtfS8eEF9bp8L44bUfzOvy2K4H08ahy4CqXHsg2wqfLxXaau0SOJ9zYT3gH7+YeVQdL1lNklGyYVD99jImaj3JGZEY7yqXnoaGCahwmVAbylpSUg15e11LF5bnv7tqR1l/r+XKZF/U/V/KWSXSpOWbTQJYxA5JLYXq7T16AGSWIcdItUPI+iF3aqwxzEbKZwAJiOTC1YnnCtT8Drq79kZz09alvikpIWTkBa/GVrR/JJ4ti/O2rhjhE+UnzrfxZJZn30bAvsPbiyDzlrS8oC9RK3QBvR8aCJBKWSu1Ksn3wrwC+Cl41lkUuuQg5T4tcwPEvNSVKHQ0TkuRMjAZaYdgXyoKneEvB+XD6BFNocfk4o//+OtNpMQIE5JOO0wJf3bGOOgEs2BPbbdDPetsfuOawZ/Z7bqG3zY3enpvtXlmUCrvuJ/Nny16dDme8+w8=</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1419061552481</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value>0AA1FFF02089396EE05307991F0A5876</con:value></con:property><con:property><con:name>audienceIgnoreAll</con:name><con:value>false</con:value></con:property><con:property><con:name>audienceIgnoreNodes</con:name><con:value>urn:dece:org:org:dece:DSP</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fd52c9d3-8b99-4e90-9f6d-19ff5efc5448</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>573a939d-9280-452f-a9aa-d7f9e0039d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5333a278-be73-4359-bedb-c61a53c2ddc2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_023_DTCreate_with_affiliated_node_'DSP:CS'filiated_node_'Content_Provider'_COORD-132" searchProperties="true" id="15f8a9fd-b1b5-4161-a32b-8eb7a3b1d1d3">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="d518094f-2de6-4df3-b436-26d42de75b16"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
tC.setPropertyValue("audienceIgnoreAll", null);</script></con:config></con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="1741259f-1cb3-47bf-8fd3-5e41c017f972"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="33cc4b45-5a53-4c61-bb99-d35894ceedf3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="ee3caa5c-0c82-482e-aec1-9e6e42cc8a9b"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="aa8016e2-2450-45ab-a63d-c6b6048f9e0d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="ae2f22ff-0e84-470c-ae57-2deb669a8a1b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="d8e5461a-b28f-4385-a434-bbe3d6c477a2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Establish Entity and Affiliate Node Settings" id="6a61e066-76f7-4ca3-a1e0-ee2b898b6b01"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeAffiliationRTL_DSP:CS",tP.getPropertyValue("nodeIdRTL")+","+tP.getPropertyValue("nodeIdDSPCS"))
log.info tP.getPropertyValue("nodeAffiliationRTL_DSP:CS");

int i = 0;
def urnNode = context.expand( '${#Project#urnNode}' )
String nodes = tP.getPropertyValue("nodeAffiliationRTL_DSP:CS");
String audienceList = "";
String affiliationList = "";
List nodeList = nodes.tokenize(",");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It [$i]: $it";
	
	if (i == 0) {
		tC.setPropertyValue("NODE_ID", it);
		affiliationList = it;
		if (nodeList.size != i + 1) {
			affiliationList =urnNode+ affiliationList + ";";
		}
		
	} else {
		
		audienceList = audienceList +urnNode+ it;
		affiliationList = affiliationList +urnNode+ it;
		if (nodeList.size != i + 1) {
			audienceList = audienceList + ";";
			affiliationList = affiliationList + ";";
		}
	}

	i++;
}
log.info "audienceList [$audienceList]";
log.info "affiliationList [$affiliationList]";
assert audienceList.length() > 0;

tC.setPropertyValue("audienceList",audienceList);
tC.setPropertyValue("affiliationList",affiliationList);

tC.setPropertyValue("audienceIgnoreNodes","urn:dece:org:org:dece:DSP_CS_1");
tC.setPropertyValue("audienceIgnoreAll","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="4d6af814-4ba9-46b8-8bbb-46f8ede3c5ab">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="9e3565a5-14f1-48cf-ba1b-22a949265e58">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>ACCOUNT_OID</con:name><con:value>09C775D1BB1E5B6DE05305991F0ADAF3</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value>urn:dece:org:org:dece:RET;urn:dece:org:org:dece:DSP_CS_1</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_de183777-eb14-457a-80a1-ea7b6baa4990</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:DSP_CS_1</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09C775D1BB1D5B6DE05305991F0ADAF3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09C775D1BB1D5B6DE05305991F0ADAF3</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09C775CF2C5D5B59E05305991F0A48D8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09C775CF2C5D5B59E05305991F0A48D8</con:value></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418124709299@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZZk6o4FP4rFvfRQhZBlGqtcusZppfbo/b6MhVDkMyFBEmCdv/6SVBpsZdx5onK4eQ731nyJRcMpIntDxlDOceUNLZpQphfWvuayIlPAcPMJyBFzOfQnw9vrn27ZfrgsEVrBJO+9len247ana6tWzZ0dMdxOnrPtT3dg7C97CzdpbWE0pUxgQLCOCC8r9mm5Uh/3ewtLMtvm77ttjzXe9EaDyhnElu6tExtT2rL+lrMeeYbxmazaW3aLZqvDNs0LePp5noOY5QCbXCxy6gMlA/2/rAVIoiSBLYgTY0Lo+ZzETJ/jlcEcJGjfazwq1imYfYM6RMyvPqhVXtRGJCIlssxIJRgCBL8BlR9bhCPadgYJiuaYx6nXyZhmQpYR1uoQ8shPzSjTu1MoBrDnAGdxcDaY81QhHJEIGrcz4K+9uO8rpVbFzkgLKJ5yurL/8YHkQIlNEOhzg5p7amdD/hJpQYXCPoBgYlguEC3algzABHbdxPB86EadzmK8PYaMzmgW6bYGcf0Tpa7akzwCjH+fxp01JwdyANIBBoYd7dR9/H5+U9vNo2b3jMcXW0f4uZ1Opv2SwLHzqWhau1ueTKU1RDtdmTJkL+N7h3x+LwY2/fBtlh2E3vcjm4Kp6C/c/eFRs0teVubD8xdxpGYCeE6wV23gM1m8VJcicx9FKCZdjz7SrgYPby92t3hU1tM7202/iM3nta/csrM+xvsra8CdzwuRs6meR2t4s30ZX1/M6XbJwvePiwuvcTNRtcuXI1Ho1sjHbFtum5nj+YaxGH8W9Cv0jniX7cdzvxcLP9GkB+WagyCSeNSdgnw78VMWXCoR6WrnynxYRwRrg3ULqUdvpByh0Nf9nC3Nntjz3PHl/bYnbgjtzc13bbp9nrWpTl0upPuQWR2LE4ojimJsIqlJHc3Nt8ThKnPEAlRrhdUSKVj2jeIE8BBIyAzeQgoYWhBpTxDkoQbRPK0284dGzlxDtze62tHa9xS/pP8zIcRR3ldkp2aJM8QxBlGSrfVWDM514zLUqxBIXhitQrQIkhIZc+VyPq203UNhtMsQYqokdJQJKiVxVlZGIPtvrYOICuts+miPGxfpnX671AB6RNi5cBULiMku4g+uVusQyJfJ+wdJ3yAH4oQq3Mly8lzDHdM6r/ep0SNRzUiMqMD5crz1FBDNU4TqgKFBYbVnFe3tRRxeewHh3asQWvdEkUhygZ4St5yCS81x3IN0zbmCAopTK8L+gsRo0IxzroFKuInwSt7naLgMZlzwFEqJ6ZRLs+49ueIqWs/kJO+PfdNUQspS8fRln9mGyfyyaIYf/uqgT5UftJ8Jz8bmofvHfsE6yiOzFPe+hyTlVqpG+D1i7mAVMJiqV00Pwb/DOCz4HVjVeSKC5cDtRQcff2noUSprwEIqSA8mGil4VgoS578NUP+u9MHmFKLq8cZ/vfXmY7LEYBIPukYLvHVHeurI0BWR2K7D/pRbyfWaGRJve1MjvV2MrxsV0WpsRt8MH+0HNXpdMYH/wA=</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418124710832</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value>09C775CF2C5E5B59E05305991F0A48D8</con:value></con:property><con:property><con:name>audienceIgnoreAll</con:name><con:value>false</con:value></con:property><con:property><con:name>audienceIgnoreNodes</con:name><con:value>urn:dece:org:org:dece:DSP_CS_1</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fd52c9d3-8b99-4e90-9f6d-19ff5efc5448</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>573a939d-9280-452f-a9aa-d7f9e0039d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5333a278-be73-4359-bedb-c61a53c2ddc2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_016_DTCreate_with_ULC_for_main_node_Requesting_token_again_with_affiliated_node_for_LVAC,_EMUC,_EDUC" searchProperties="true" id="8a2e40c2-13c0-44b6-9ca9-a8f5a0ba695c">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="a6a16325-f08e-4565-8d6b-3bb0fe0af347"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
tC.setPropertyValue("audienceIgnoreAll", null);</script></con:config></con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="be9de903-d38b-4b1f-aaa7-3318b1d59c30"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="3e32c4a4-f68f-4997-9ebb-f51d910286c9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="232361d7-57c4-4ad4-bf1d-9617374fe6bd"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="99e793f1-1abd-4cb0-a3cc-acced19823fd">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="58370e8a-a3a6-48f8-ae31-524e4b0114a6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="a1a0a48c-afe8-4343-951f-0c10d2688a2d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy Create" id="f50461ff-8d02-4e47-8f34-94f00a0b121c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy GET" id="0854ccdd-19dd-42c1-9ded-67543b76d372"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("policyID_before_DTC",tC.getPropertyValue("PolicyID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="cb44770c-be9b-4906-a0cd-0a06f4e0d950">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="dea64615-450a-4ccd-bcae-8817f443f077">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Establish Entity and Affiliate Node Settings" id="9f681130-2291-40bf-8373-7eeac34866f0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = 0;
def urnNode = context.expand( '${#Project#urnNode}' )
String nodes = tP.getPropertyValue("nodeAffiliationRTL");
String audienceList = "";
String affiliationList = "";
List nodeList = nodes.tokenize(",");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It [$i]: $it";
	
	if (i == 0) {
		tC.setPropertyValue("NODE_ID", it);
		affiliationList = it;
		if (nodeList.size != i + 1) {
			affiliationList = urnNode+affiliationList + ";";
		}
		
	} else {
		
		audienceList = audienceList +urnNode+ it;
		affiliationList = affiliationList +urnNode+ it;
		if (nodeList.size != i + 1) {
			audienceList = audienceList + ";";
			affiliationList = affiliationList + ";";
		}
	}

	i++;
}
log.info "audienceList [$audienceList]";
log.info "affiliationList [$affiliationList]";
assert audienceList.length() > 0;

tC.setPropertyValue("audienceList",audienceList);
tC.setPropertyValue("affiliationList",affiliationList);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate 1" id="cb795c1b-6e17-4241-8b6e-5bb7a09fd9df">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 1" id="f02be448-416b-4214-ac79-55ddd18048d6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy GET_RET" id="83782e4e-7d1d-495e-9bed-fb603b15bc4f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("policyID_RET1",tC.getPropertyValue("PolicyID"));</script></con:config></con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>ACCOUNT_OID</con:name><con:value>0AA22B232E1346D4E05307991F0A5592</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_93a376f0-75e7-4cfa-bd68-8fee50b082f1</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0AA22B232E1246D4E05307991F0A5592</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0AA22B232E1246D4E05307991F0A5592</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0AA22B57441F2C1EE05305991F0A8ABD</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0AA22B57441F2C1EE05305991F0A8ABD</con:value></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1419062276846@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=pVZhc7I4EP4rDv2MBARBpjpj1Xa82mrV9r3rl5sYgqZCgiSg7a9/E1Sq1va8u09Mls3uk82TZ/eawziy/DbnOBWE0comjij3C2tTy1LqM8gJ9ymMMfcF8ifth4FvVYEP91u0Sr/b1P5u1GDNrYdAdx3s6jYKoT4L6p7uhRg7YAY8KzSlK+cZ7lMuIBVNzQKmrZuWboEpcH3H8y2nCjzzVau84JTL2NKlCrQdqA1vagshEt8w1ut1dV2rsnRuWACYxp8Pgwla4BhqrevtiYpEaWvnj6oBRjiKUBWx2Lg2jnyuA+5PyJxCkaV4lyv4LhcwQMOQPgEn8yut3IuDPg1ZsexAyihBMCIfUNXnAYsFCyrtaM5SIhbxt4cwgQqs4w3SkWnTK804hnZhoCOEKYc6X0BzF2uMQ5xiinDledxvaleX3VqxdZpCykOWxvx4+e/wYJrjiCU40Pn+WDtolwc8U6nWNUZ+n6Io4yTHj4qsCUSY724To8tDVUYpDslmQLgk6IYrdMYhvJPlthpdMsdc/JcLOricbZAXGGW49QQHK+NjFXUa7K43oeOPZePj15DGFl02CwCHzoWhvNrt8oSUJYm2O5a0Z65vVmFwn7wPzefpKgyzGmfsKX1g4zcYO+niY7HqdSevy3bEYB6/Gnc5zezIeBs8DTeNjbv8de9ZG/RojScRSqYYvD/37/M6yMajHCwf78a3uJagGs5G/dXdqrtaOM4IvOWz9Xo2H9XZs+n+lTWG4xsyHtDG0KXJ65uk2jz6o/cWkxcjf30SwuqZr/NmeZwD/Me2/ZufZLM3jMR+qWjQ71Zu5S1B8bOYKQsJ9LBw9RMlPlxgKrSW2qW0w8+k3JHAl3e4XYN227JuHNe2zVurY/Z6wKkBp9Ewb0Hba9909yKzRXECscNoSFQuJblb2vwMEMU+xzTAqZ6zTCod136I2IUCVvp0LB8BoxxPmZRRF9oNz0O67Um9tetSdz04A3rddBzHhcB0nbpWeWRiSIdpOxQ4PVJnExyp8xgjkhCsJFwxnEuKcyGrsoJ5JiKzmsMqxZkU+VTprW/ZnmNwEicRVpiNmAVZhKvJIilqZPDt19Ih4oW1Azq9W68HvE7P7Ljdeg/YQNW1qK8FbopH+e3xT//tKyV9AqIcuDroDZa3jc/0IHN/yi/VcM72qn34dhYQ9f5k2UVK0BbJ8a9PNikalVTqDtqT0R506XvZ3sH/2DvuTb/uNH44jXFayDJRkJODtPvRQDYZKUutPUeS6qqa5XlWkMJV6pvK6IaqrAEsY4JRJnXzfcqWmBplEOOiJlXiPsld2o8RZmJBJwIKHEsWV4rlBVPJBHM1lfTlQ9xcOvIcpZSVE3gjztk6kZyoFOIfhy7kI+UnzSP5WbM0+LywM7EO8shzyqFEEDpXK9Wg3r+hBWIyLJHSytLD4OcCnEt+bCyLXGIRkk+zTODv/1SUZjY1iBDLqOh3tcJwqOMFTvGeYP/T6UuYolWUsyP55+FRJwUFEJYTJydFfDUC+OoF0PlBL9gl/doOrJrsWZZd79pFO3C37cBxGlZZlCN0rS/mr5aDOp1yvPUb</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1419062279534</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value>0AA22B5744202C1EE05305991F0A8ABD</con:value></con:property><con:property><con:name>audienceIgnoreAll</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:0AA22CA0338134D7E05305991F0A503D</con:value></con:property><con:property><con:name>policyID_before_DTC</con:name><con:value>urn:dece:policyid:org:dece:0AA22CA0338134D7E05305991F0A503D</con:value></con:property><con:property><con:name>policyID_RET1</con:name><con:value>urn:dece:policyid:org:dece:0AA22CA0338134D7E05305991F0A503D</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fd52c9d3-8b99-4e90-9f6d-19ff5efc5448</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>573a939d-9280-452f-a9aa-d7f9e0039d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5333a278-be73-4359-bedb-c61a53c2ddc2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd25acbd-9c65-4451-b94d-9ab4c4cf123d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0efa8efd-6738-4fff-9054-d8447278fc7b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f681130-2291-40bf-8373-7eeac34866f0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_017_DTCreate_without_ULC_for_main_node_Requesting_token_again_with_affiliated_node_for_LVAC,_EMUC,_EDUC" searchProperties="true" id="6c436b81-d8e1-417c-aac5-2caaaa2b2f28">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="70176df3-5cfb-4c0c-8ddb-cfeda481a78a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
tC.setPropertyValue("audienceIgnoreAll", null);</script></con:config></con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="56badc9f-cf4e-4ade-aa4f-667b04a6910c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="9be2985b-98cc-494c-bb88-13e849b47a2b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="537ecc43-a27b-4548-bd96-62ab3fe4aee4"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="f900f4e0-704d-4ca7-9e3b-b65db86e5e21">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="cc8805af-f038-4393-b374-cda9e40b27fa">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="75b006b6-fa91-42e5-9f66-e6576f76cd59">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="256801ba-2146-4460-b751-b6115f64d714">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="f96bcfc7-fca9-4e37-8b71-74b47aadf058">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Establish Entity and Affiliate Node Settings" id="5bf498dc-4fe9-4248-a72b-d7d57f2eb82a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = 0;
def urnNode = context.expand( '${#Project#urnNode}' )
String nodes = tP.getPropertyValue("nodeAffiliationRTL");
String audienceList = "";
String affiliationList = "";
List nodeList = nodes.tokenize(",");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It [$i]: $it";
	
	if (i == 0) {
		tC.setPropertyValue("NODE_ID", it);
		affiliationList = it;
		if (nodeList.size != i + 1) {
			affiliationList = urnNode+ affiliationList + ";";
		}
		
	} else {
		
		audienceList = audienceList +urnNode+ it;
		affiliationList = affiliationList +urnNode+ it;
		if (nodeList.size != i + 1) {
			audienceList = audienceList + ";";
			affiliationList = affiliationList + ";";
		}
	}

	i++;
}
log.info "audienceList [$audienceList]";
log.info "affiliationList [$affiliationList]";
assert audienceList.length() > 0;

tC.setPropertyValue("audienceList",audienceList);
tC.setPropertyValue("affiliationList",affiliationList);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate 1" id="056b3a6a-235f-446d-9df5-014ee51ed1a7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 1" id="77da1b01-187b-4f68-b091-3ec71e7a5586">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy GET_RET" id="4cc66cee-cbad-400c-8468-de8d7464651c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("policyID_RET1",tC.getPropertyValue("PolicyID"));</script></con:config></con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>ACCOUNT_OID</con:name><con:value>09C775E108CF5B79E05305991F0AE582</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value>urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_3f6b06d7-81da-4f01-a412-e2ddd20ce1a6</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09C775E108CE5B79E05305991F0AE582</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09C775E108CE5B79E05305991F0AE582</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09C775D087E15B63E05305991F0A2EAA</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09C775D087E15B63E05305991F0A2EAA</con:value></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418124756047@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=pVbbkuI2EP0VyvuYMpYNxsY1UMUYmLDhsgPsbnZeUhqpDZo1sseSuczXRzLgBeYSkjy51G51n24dHfWNwKvYCTpCQCZZwivbVcxFUFhbRp7xIMGCiYDjFYhAkmDWGQ0Dp4oCfNxiVAbdlvFXLWo8ogb1TN+m2KxHyDZx3XZMcCilDiJg44ZyFSKHARcSc9kyHGTXTeWDmnPbDmpOgPyqjWoPRuUbZELFVi5VZBxAbUXLWEqZBpa12Wyqm1o1yRaWg5Bt/TkazsgSVtho3+wrKhJl7YM/qVIgEMekSpKVdWOd+dxQEczYgmOZZ3DIRd/LhSzUtJQPFWzxySj3Ah3wKCmWIeYJZwTH7AXr/oxALhNa6cSLJGNyuXq3CBvpwCZsiUnsOv9kWOfQrgx0hjAT2BRLbB9iTSGCDDiBytfpoGV8uu7Uiq3zDHMRJdlKnC//HR7ga4iTFKgpjmUdoF0f8I1OtW+ABANO4lywNYw1WVNMQBxOE8j1oSpfMojYdsiEIuhWaHTWKbyL5b4bXbYAIf/LAZ0czj7INxzn0Pbp4G7WbzTns5HcfKeju8UWnlC42D2hVgHg1LkwlEe7X16QsiTRfsf3aT5+QCj+wSbb+1X4NaV0bEXT4Y5+njRHc/9HkidrStP7UWeTTrMe59vf3ZDdzeuRePr5Ejr1znrWp/357mWUTP+4Q5PnxxcYLCeP49HC5589/m2B3e/pZLAOb3eb6SMeh+Hvyv4wQ/f9l1g23I10H37rR+lnr2GR8K5Wv/dINLyNJdtYuUtHT6kQPTq+b5XlnOA/tx3v/Cx/fAIij0tNg0G30lenhOXHYqYtjJpR4RqkWnyEBC6Ntt6ltSPIldwxGqgz3K9RM/Q8t4t8r2e7t41aD7k15Dabdh91nF6ncxSZPYoLiGHCI6Zzacnd0+ZjgGQVCOAUMnOd5ErphPFBxC6WuDLgU3UJEi5gnrSMGqJOhJue6WFqm3WMwMRgq2tPaj7yieM52Dcq40RO+CTrRBKyc3Wun6nzFAhLGWgJ1wwXiuJCqq4843UuY7u6xlUOuRL5TOtt4NR91xJslcagMVurhOYxVNNlWvTIEvuvY2IiCmuIwl7f7yE/7Nmh1230UB3pvhb9ddBtcSnfLf/y37FTyocy7SB0obegThtevUF24B6rfL8b3mk3juE7OWX6/qm2y4yRPZLzX7/YpGlUUqk77My+HEGXvtftHf6PvdPe/PVO64NqrMtGlonomp2kPY4G6pFRstQ+cuQZV5+r+XqdF6zwtPxmKrzSRNu1kGPNgORKOHfz5Cdwq4xiXfVKlcAvkpf2c4i5XPKZxBJWisaVYnnFWDIDoceSgbqJ22tnnrOUqnUStvItWxirkUoj/nDqIgHRfsr8RX02SUZ/ndgbsU7yqDrVVCIZX+iVfqF27/CCJCosU9qaZKfB3wrwVvJzY9nkEotUhHrMJbz/p6JFs2VgQpKcy0HXKAynQl7glLsUgl9Or8IUb0U5PLJ/nh5NVlCAgBo5BSvi6xkg0FeAL04eg0PS1+9Bz9ai5d56zdP3oOf6TtmUM3TtV+bXlpM+XXK8/Tc=</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418124757527</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value>09C775D087E25B63E05305991F0A2EAA</con:value></con:property><con:property><con:name>audienceIgnoreAll</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:09C775CF2AD75B59E05305991F0A48D8</con:value></con:property><con:property><con:name>policyID_before_DTC</con:name><con:value>urn:dece:policyid:org:dece:EBB079620E49F793E0401F0A05997864</con:value></con:property><con:property><con:name>policyID_RET1</con:name><con:value>urn:dece:policyid:org:dece:09C775CF2AD75B59E05305991F0A48D8</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fd52c9d3-8b99-4e90-9f6d-19ff5efc5448</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>573a939d-9280-452f-a9aa-d7f9e0039d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5333a278-be73-4359-bedb-c61a53c2ddc2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd25acbd-9c65-4451-b94d-9ab4c4cf123d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0efa8efd-6738-4fff-9054-d8447278fc7b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f681130-2291-40bf-8373-7eeac34866f0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_018_DTCreate_with_ULC_for_all_the_nodes_Requesting_token_again_with_one_more_affiliated_node_for_LVAC,_EMUC,_EDUC" searchProperties="true" id="ea0a9ace-a475-4537-ae9b-02fb1b48dfbd">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="54c40f77-a898-4eb6-8768-b9a03c5febef"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
tC.setPropertyValue("audienceIgnoreAll", null);</script></con:config></con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="c2d55e1c-b0ec-460d-9bfc-38df8a16432e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="df8a717f-2713-4f82-a693-643e9ef955a1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="56926ee6-9eed-4830-93da-77554d72bee3"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="86a3e738-a555-4afb-9453-8fd005de7cb9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="ac46baf9-fcea-4d26-8c2c-242705fa2ae2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="ebefc310-f54a-4160-82b1-2d6842076d03">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Establish Entity and Affiliate Node Settings" id="50400dd5-dd6f-4c1c-a42f-13f0ba09a6c8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeAffiliationRTL1",tP.getPropertyValue("nodeIdRTL")+","+tP.getPropertyValue("nodeIdLLASP"))
log.info tP.getPropertyValue("nodeAffiliationRTL1");

int i = 0;
def urnNode = context.expand( '${#Project#urnNode}' )
String nodes = tP.getPropertyValue("nodeAffiliationRTL1");
String audienceList = "";
String affiliationList = "";
List nodeList = nodes.tokenize(",");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It [$i]: $it";
	
	if (i == 0) {
		tC.setPropertyValue("NODE_ID", it);
		affiliationList = it;
		if (nodeList.size != i + 1) {
			affiliationList = urnNode + affiliationList + ";";
		}
		
	} else {
		
		audienceList = audienceList +urnNode+ it;
		affiliationList = affiliationList +urnNode+ it;
		if (nodeList.size != i + 1) {
			audienceList = audienceList + ";";
			affiliationList = affiliationList + ";";
		}
	}

	i++;
}
log.info "audienceList [$audienceList]";
log.info "affiliationList [$affiliationList]";
assert audienceList.length() > 0;

tC.setPropertyValue("audienceList",audienceList);
tC.setPropertyValue("affiliationList",affiliationList);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="7c8aaa3e-27ac-4447-afad-2cfc226b15f4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="2b0cdfca-bf25-4c6c-87b0-b88e3da82d72">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Establish Entity and Affiliate Node Settings 1" id="ae400eca-2ed0-498f-b094-08a2e54c8ec0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int i = 0;
def urnNode = context.expand( '${#Project#urnNode}' )
String nodes = tP.getPropertyValue("nodeAffiliationRTL");
String audienceList = "";
String affiliationList = "";
List nodeList = nodes.tokenize(",");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It [$i]: $it";
	
	if (i == 0) {
		tC.setPropertyValue("NODE_ID", it);
		affiliationList = it;
		if (nodeList.size != i + 1) {
			affiliationList = urnNode+affiliationList + ";";
		}
		
	} else {
		
		audienceList = audienceList +urnNode +it;
		affiliationList = affiliationList +urnNode+ it;
		if (nodeList.size != i + 1) {
			audienceList = audienceList + ";";
			affiliationList = affiliationList + ";";
		}
	}

	i++;
}
log.info "audienceList [$audienceList]";
log.info "affiliationList [$affiliationList]";
assert audienceList.length() > 0;

tC.setPropertyValue("audienceList",audienceList);
tC.setPropertyValue("affiliationList",affiliationList);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate 1" id="aa7cae0b-224d-49bf-afa2-a7aea8f7a0cb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get 1" id="f9c74076-b93b-4445-ba9c-68571ce27412">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy GET_RET1" id="c608d435-a8e3-429f-84d2-8be61a741596"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("policyID_RET1",tC.getPropertyValue("PolicyID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy GET_LLASP1" id="a66448b8-e335-4edb-bf45-6edb1c3dc002"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdLLASP"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("policyID_LLASP1",tC.getPropertyValue("PolicyID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy GET_DLASP" id="94e9ed98-dcb1-4afb-b313-9f9ae61cbe8c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdDLASP"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("policyID_DLASP",tC.getPropertyValue("PolicyID"));</script></con:config></con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="e0000669-5777-4c10-a8d8-bbca267b7125" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09C7E14013221127E05307991F0AB83E</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_acb97053-7060-4db3-83f9-52d3705f356b</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>09C7E14013211127E05307991F0AB83E</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:09C7E14013211127E05307991F0AB83E</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>09C7E144A8EA1129E05307991F0A0B69</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:09C7E144A8EA1129E05307991F0A0B69</con:value></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1418124880061@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=pVZbc+o4DP4rTPrYCXEuXJIpzFBIu2mh9JRezvZlxzgOmCY2xA4N/fVrB0iB0i67+5SxIkufpM+SLjhMYsvrcI5TQRit5ElMuVdIW1qWUo9BTrhHYYK5J5A36gz6nlUFHtxe0SpBr6X9BdHYbYCarTdAHehOOLb1ph25es0KbSmP7Fp9LFU5z3BAuYBUtDQLmI5uWjpwH03Tsx3PdKv1GnjVKs845dK2VKkCbQMq5y1tKsTcM4z39/fqu11l6cSwADCN34P+CE1xArX2xTqiwlHa3uijaogRjmNURSwxLow9nYuQeyMyoVBkKd74Cr/zBQzgGlIn5GRyppV3cRjQiBXHLqSMEgRj8gFVfgZYTFlY6cQTlhIxTb4NwgTKsI5zpCPToWeasQ/tREN7CFMOdT6F5sbWA45wiinClaeHoKWdnVa14upjCimPWJrw/eO/w4PpEsdsjkOdb8PaQDvd4JFMtS8w8gKK4oyTJb5TZJ1DhPmmmhidbqpyn+KI5H3CJUFzrtAZu/AOjuts9MgEc/FfCrRTnLWRZxhnuP2KrgcwMM7fPtjErk1vaHM06c9McPfGWwWAXeVCUJZ2fTwgZUmi9Q2MyDmbPy9eo4cBt56Hfb+e+/3p2+PgHPP4Y8Zn/XzJnq4XN9PbWm9xTeaN4RV4jem4SWa90cKOgyz7o+Y26oiKJP+V59azBc0p4ve1werlJgxWw/tFWION+q1L+i85Wrzc+mYTXsNzZ7bInu6GHx9s8Ku+iq+S0Z8dsKB1ENCMiee75cK/6i9X1vL193g6c1plODv492XbNz/KxjOMxPaoaBD0KleySlD83MyUhIR6VKh6c9V8uMBUaG11S/UOL5PtjoSerOH6DNxuwzcdp9P0O6Zpub58RaDhuuYV6IDLurttMmsUBxC7jEZE+VItd02bnwGixOOYhjjVlyyTnY5rP1jsQQErAX2Qj4BRjh9ZSwNNgJtOA+qhHVq645qmPoZRU8euY1sRAhGEjla5Y2JIh2knEjjd787OXnd+kPyZE6xauGI4lxTnQmZlAZeZiM3qElYpzmSTT1W/9SynWTM4SeYxVpiNhIVZjKvz6bzIkcHXX0uHiBfSLuj6V00fNLu+2W306j5wQJHXmsyvBS6LR/lt+If/tpmSOiFRClwFeolltfGRGQS2UX7JRu3orNqa72QhUe9Ppl2kBK2R7P/6ZJOiUUmlXr8zut+CLnVPu9v/H3cf/MevN40fojEOE1k6Cpdkx+12NZBDRral9pYjC1hdVLPlMitY0VDtN5XmDZVaA1jGCKNMNs7VI3vD1CitGCdNqRL4gfNSvg8xE1M6ElDgRNK4UhxPWEtGmKu1JJAvMT9159lzKVMncC6OybqxXKkU4h+3LuQhpSfF9/LzztLws2JHbO34kXHKrUQQOlEnNaFW3/ACMWmWyN7K0l3jxwwcc74vLJNcYhGSUONM4O//VFTTbGkQIZZREfS0QrDbyAucYjXH3qfSFzPFrCiXR/LP26NOCgogLFdOTgr7agfw1BOgk51hsHF6ZB4A07ZMOQ8au/Pgsmn7ZVL20LW/iL9KdvJ0yPH23w==</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1418124881641</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">09C7E144A8EB1129E05307991F0A0B69</con:value></con:property><con:property><con:name>audienceIgnoreAll</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>loopuntil</con:name><con:value>3</con:value></con:property><con:property><con:name>counter</con:name><con:value>2</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:09C7E137A803111BE05307991F0A4BE4</con:value></con:property><con:property><con:name>policyID_RET</con:name><con:value>urn:dece:policyid:org:dece:EBC4FCFA27F7DA85E0401F0A07997FFC</con:value></con:property><con:property><con:name>policyID_LLASP</con:name><con:value>urn:dece:policyid:org:dece:EBC4FCFA27FBDA85E0401F0A07997FFC</con:value></con:property><con:property><con:name>policyID_RET1</con:name><con:value>urn:dece:policyid:org:dece:09C7E1301796111FE05307991F0AFECA</con:value></con:property><con:property><con:name>policyID_LLASP1</con:name><con:value>urn:dece:policyid:org:dece:09C7E1301796111FE05307991F0AFECA</con:value></con:property><con:property><con:name>policyID_DLASP</con:name><con:value>urn:dece:policyid:org:dece:09C7E137A803111BE05307991F0A4BE4</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fd52c9d3-8b99-4e90-9f6d-19ff5efc5448</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>573a939d-9280-452f-a9aa-d7f9e0039d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5333a278-be73-4359-bedb-c61a53c2ddc2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd25acbd-9c65-4451-b94d-9ab4c4cf123d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0efa8efd-6738-4fff-9054-d8447278fc7b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0a622995-fef9-4acc-8033-57cc0a0d350b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5cc06329-e1c4-4b5a-99f9-4517460d0342</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ab5b066-05dc-495a-89ff-1c1e07d0765b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7044db3b-c21a-4b41-98ce-220408a40a3b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e0000669-5777-4c10-a8d8-bbca267b7125</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c608d435-a8e3-429f-84d2-8be61a741596</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a66448b8-e335-4edb-bf45-6edb1c3dc002</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>94e9ed98-dcb1-4afb-b313-9f9ae61cbe8c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_025_DTCreate_active_user_with_ULC_in_R5_DTC_in_R6" searchProperties="true" id="af3550df-5e6c-49a5-b533-8bee55417a12"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="af8cc3f0-668b-4592-b00d-097784cb295e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));</script></con:config></con:testStep><con:testStep type="groovy" name="Change version to 11" id="8f4d6d68-047e-4d16-849d-e55c5ae669cb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tP.setPropertyValue("versionMajor","1");
tP.setPropertyValue("versionMinor","11");</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="dffd78f9-a60d-4564-9406-d94f275a66e2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="9786047a-e6b4-41b0-a505-bc1d4237e8bd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="1082154f-2e8c-41f4-8748-5319076719db"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="536f83a2-559e-410e-8a5f-024ef33c3377">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="a435952e-9d6a-424b-9233-24511a725dce">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="e2e35f76-acd3-4b8d-9d82-7af037df0ae4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy Create" id="2de45173-b322-4302-98a6-0fbdd977a598"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy GET" id="fdf48bd1-ff27-403f-b15a-39a68c3b2d61"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("policyID_before_DTC",tC.getPropertyValue("PolicyID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Change version to 21" id="54c1d347-ebfd-4c63-a89e-743181b0b160"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMajor","2015");
tP.setPropertyValue("versionMinor","02");</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="0bc844bf-6060-4c50-8cf3-0a8787ba6a88">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="2fb3280f-d3c3-44d2-b72f-31dc1b4e6c4d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Change version again to 21" id="52dd7182-efad-4ea2-b265-dcc1ee950e97"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor","21");</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>0AA249C159222776E05307991F0A9B89</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>0AA2499E071B2778E05307991F0A5620</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1419062788463@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0AA2499E071A2778E05307991F0A5620</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0AA2499E071A2778E05307991F0A5620</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0AA249C159212776E05307991F0A9B89</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0AA249C159212776E05307991F0A9B89</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1419062791088</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_1b0dd614-ebff-4ede-a7ad-d0183a67903b</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZSw7OGBXoIoAmTgDM+GSqdm8bAmpDUps2bFkh8zXr2TAweSy7D651G6dPn3RkS4EjiPH7wsBmWQJb2ziiAu/tHaNPON+ggUTPscxCF8Sf96fjH2niXy832I0gmHX+NteIkrP7ZYJyzA0W0DBxG1MTYrszhk+b3vobKlchcgh4EJiLruGg5S/7ZgOWqCOj859ZDdtz7k3Gr8gEwpbuTSRsSO1EV1jLWXqW9bz83Pz+ayZZCvLQci2fk/Gc7KGGBu9i21GZaCst/MnTQoEoog0SRJbF1bN54IKf85WHMs8g10s+lEsZCHPUj5UsNUXo9oLNOBhUi4HmCecERyxP1jXZwJyndBGP1olGZPr+MMkbKSBTdgQk9gt/sWw6tROBKoxzAQ2xRrbO6wZhJABJ9C4mwVd48tpXSu3LjLMRZhksagv/xsf4AVESQrUFPu0dtROB3ynUr0LIH7ASZQLVsAPPawpJiB23QRyOlTjNoOQbcZMqAHdCM3OOqR3tNxWY8hWIOT/adBBc7Ygv3CUQ2/4ez75Po6ilrNuPfDVyr6OL+XyF8Ji2i0JHDqXhqq12+XRUFZDtN2xvs82G4dl3+464q9sti7wnZdehzfTH5DcQECLBE9dtrIfeRBObx7oksa3U56xWWvYKR4mizC8JmHnpW056TO+H39dFEvqTJPx7M818LvpdPZUvBSra2Q7949XFnoMinXqtcMxDm/SUf+G45u+m31vLyfTIL0fdzC3RvE3i7+csa/eNX94nKQ/h+HUurxs7dI94l+37c/8PF8+AJH7pR6DYNi4Ul3C8nMx0xZGzbB09VMtPkICl0ZP79La4edK7hj1VQ+3a9TvOy1vYLueYzvt9vkIuWeo7Xn2Fep7lx1vLzJbFkcUBwkPmY6lJXc7Np8TJLEvgFPIzCLJldIJ4xPEIZa4EfCZOgQJF7BIugY+o+fIbRPTBtoxW6FDzCU4rumeO7hNQsBL6hqNH4n8yX9m/VBCVlNn266p8wwISxloCdcTLtSIC6mq8oSLXEZ2s8BNDrkS+Uzrre+0Oq4lWJxGoDlbcULzCJrpOi1rZInt1zExEaV1gAajq84IdQYje9Aeqtq2kK4rclV9HXRZHsoP0z/+t6+U8qFMOwid6CWobsObO8j13X2Wb6rhvntX7eH7OWX6/Kmyy4yRLZP6r9dp0mNUjdJstNhTrjyPDTVU6zihKhAtGKnOQ3WrK7FX8tDb9yptPjXzosjL5rS1CmYK3dIZWsix5kBypV8vi+QRuFWBWCddFhXvo9iVvc4wl2s+l1hCrKapUS5PeB3MQejXQaAOxObUp0ctpKqchI18zzaI1MtGM/708UN8ov2U+VZ9npOMvjbsHayDOCpP9TiQjK/0Sl8ULx+MBUkULFMSl2SH4O8BvBe8bqyKXHGRap6WuYSP/zS0dintICTJuQyGRmk41NOSp3xJwX91egNTSnb1hmP//ogzWTkCBNTLT7ASX1/Fvj4BfHWgybugb2XZG6G23Vey3DmUZSV2qCpKjV3vjfmt5aBOxzPe+wc=</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:0AA24B06D74917E8E05305991F0ADDFD</con:value></con:property><con:property><con:name>policyID_before_DTC</con:name><con:value>urn:dece:policyid:org:dece:0AA24B06D74917E8E05305991F0ADDFD</con:value></con:property><con:property><con:name>policyID_after_DTC</con:name><con:value>urn:dece:policyid:org:dece:EB888AD8C3070BC0E0401F0A07997135</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2cb97bb8-9258-4d3c-bc7e-4b245c252409</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a73382f4-afed-40d7-ba47-9ee9ab775337</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>54c1d347-ebfd-4c63-a89e-743181b0b160</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8f4d6d68-047e-4d16-849d-e55c5ae669cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_026_DTCreate_active_user_with_ULC_in_R6_DTC_in_R5" searchProperties="true" id="5decfa17-7f8d-4f73-9a7c-1834c4e7f0f4"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4bc880b5-17f6-40e6-9c6d-b74c2792f238"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Change version to 21" id="51efc0a9-7fa6-405d-be49-1523933d42c8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tP.setPropertyValue("versionMajor","2015");
tP.setPropertyValue("versionMinor","02");</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="4b7fa34f-d4b4-4141-b9d3-fbe3ff751e7d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="168e38f4-4cd7-4928-8cd0-f1337dd6e018"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="8211f224-3d56-4081-8a87-19a1ac766097"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="ad79059a-0a7a-45e0-ba05-f7cc3ed5944e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="b22dd62d-b7da-4ad1-bf3c-e61fc175a5da">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="923760a3-2a22-4979-a515-434934d87173">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy Create" id="c887e356-f851-4b4f-a66e-f3359ba1736d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy GET" id="77363fb5-049b-46e1-ad54-5ba5deeab42f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("policyID_before_DTC",tC.getPropertyValue("PolicyID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Change version to 11" id="8387d6c4-2d08-423e-a5e4-ce9a8b9bba59"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tP.setPropertyValue("versionMajor","1");
tP.setPropertyValue("versionMinor","11");</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="966a40af-deb1-4757-b084-d1f82e4b30be">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="64eac2d4-7287-4e83-98ba-c8220041bcce">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Change version again to 21" id="7425a6ce-bc8f-40fd-beef-931a47a8fd66"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tP.setPropertyValue("versionMajor","2015");
tP.setPropertyValue("versionMinor","02");</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value>0AA25011B7472B43E05305991F0A8790</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>0AA24FF161092B11E05305991F0AB1EE</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1419062894891@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0AA24FF161082B11E05305991F0AB1EE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0AA24FF161082B11E05305991F0AB1EE</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0AA25011B7462B43E05305991F0A8790</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0AA25011B7462B43E05305991F0A8790</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1419062897124</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_954ea133-4426-4734-945b-7a5babea801f</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc9o4FP0rjPtsLBkbjCcwA5g0dJO0iYE2fdkRsgCltuRasiH59SsZcDEhWXafPLq+OvfcDx3pSqAktv2BECSTlLPGNomZ8Etrz8gz5nMkqPAZSojwJfbDwd2tbzeBjw5bjMYk6Bl/d12HINhqmY5jt02n03LMruMuzA5yF2hBkAfgUrkKkZMJExIx2TNsAB0T2qYNpsDzQcd3QdMGrZ9GY04yobCVSxMYe1Jb0TPWUqa+ZW02m+am1eTZyrIBgNaPu9sQr0mCjP7VLqMyUNbf++NmRDCJY9zEPLGurJrPVST8kK4YknlG9rGi92IBC3Qt5RMJuvpkVHtJNGFLXi5HiHFGMYrpK9L1uSNyzaPGIF7xjMp18m4SEGhgk2yxiaHDPhlWndqFQDWGmUCmWCO4x3okS5IRhklj9jjpGZ8u61q5dZohJpY8S0R9+d/4EFaQmKckMsUhrT21ywHPVKp/RbA/YTjOBS3IvR7WFGEi9t0k+HKoxreMLOn2lgo1oFuh2VnH9E6Wu2oEdEWE/D8NOmrODmSO4pz0w18Pk3t7FXbT+c9h6+F59hrYCzpzxcOqVxI4di4NVWt3y5OhrIZotwM/xZE7jUQw/zrE9z/dhb2J3KJItpyN1pvncCqekuCmCIC79eaFy4Q7kne3cPq0fnlmBZsF0ZfZZ/d1TScPoh1O88i5nn5fPDgPCN/fWDfyptNOU4fYX5JVd7a8C3lXzuBf0788L0k23wPymH/O2fb751ZwX/xiN9vY/p2HPzzb5kH61JrfQvA6HzI0EDnvVekc8a/bDmc+zBfPBMvDUo/BJGhcqy4h+bGYaQuNzGXp6qdafIQkTBp9vUtrh58ruaORr3q4W4PBwHYBhMOO07aHTmsM3BZwu114DQZepwsOIrNjcUJxxNmS6lhacndj8zFBnPiCsIhkZsFzpXTC+AAxQBI1JuxRHQLOBJnyngG6zsL2orYJlgiaDllG5gLbwGzB7qLrYQg9mxiNey6/sq/ZYClJVlNnCGvq/EgwTSnREq4nXKgRF1JV5TcqchnDZoGajORK5DOtt77teK4laJLGRHO2Eh7lMWmm67SskSV2X9tEWJTWERiNr70x8EZjOOoE7TFwgK5rWV8bDMtD+W76p/8OlVI+EdUOQic6JKrb5Mwd5ByyfFMN9+xddYAf5BHV50+VXWYU75jUf/2ZJj1G1Sg9jqcHypXnqaGGap0mVAWKCoqr81Dd6krslTz0D71Km7+beVHkZXM6WgUzhW4pMYRWSHCuxOtlyn8RZlUI1kU3RUX6JHBlr9PL5ZqFEkmSqFFqlMsLngYhEfppMFGnYXvpu6MWUpVNkq08ZxvF6lmjGX/48sE+1n7K/E19NjyL/nTrDNZRHJWnehlIylZ6pW+Jl3dmAnMFS5W+8ewY/BzAueB1Y1XkiotUw7TIJXn/T0MLV89AGPOcyUlglIZjMS15ypeU+H+c3sCUel094Oi/v+BMWo4AVnKk/Et8fQ/7evzZ6kiQ90FPNdm5voZtCDx7COGxJg/heFwVpcau/8b81nJUp9MZ7/8D</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:0AA251734A4B2B53E05305991F0A62AD</con:value></con:property><con:property><con:name>policyID_before_DTC</con:name><con:value>urn:dece:policyid:org:dece:0AA251734A4B2B53E05305991F0A62AD</con:value></con:property><con:property><con:name>policyID_after_DTC</con:name><con:value>urn:dece:policyid:org:dece:EB888AD8C3070BC0E0401F0A07997135</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2cb97bb8-9258-4d3c-bc7e-4b245c252409</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a73382f4-afed-40d7-ba47-9ee9ab775337</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>54c1d347-ebfd-4c63-a89e-743181b0b160</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4493c60f-0a9a-446f-80c3-c09597661af6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:tearDownScript>if(context.expand( '${#Project#runTeardown}' )=='true')
	{
	log.info("Executing TearDown for Suite '" + testSuite.getName() + "'");
	
	for ( testCaseResult in runner.results )
	{
	   currentTestCaseName = testCaseResult.getTestCase().name;  
	   currentTestCase = testCaseResult.getTestCase(); 
	   log.info("Current TestCase : '"+ currentTestCaseName + "'");
	   log.info("Current TestCase Status : '" + testCaseResult.getStatus().toString() + "'");
	   
	   if ( testCaseResult.getStatus().toString() == 'FAILED' )
	   {
	      log.info("Re-executing failed TC");
	      def currentRunnerTC = currentTestCase.run(null, false);
	      log.info("Status on re-execution : '" + currentRunnerTC.status + "'");
	   }
	}
	log.info("Execution of TearDown for Suite '" + testSuite.getName() + "' Completed" );
}</con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="COORD-155" id="0601f9f5-f510-4e96-b016-9a9a191c8c67"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Scenario1-DTCreate_with_ULC_for_RTL_User_created_by_node_PORTAL_ULC_Deleted_for_RTL" searchProperties="true" id="ac953602-7d72-48ec-9060-74f0424ef98b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="98bda343-c2e8-41f2-aef3-a49a11ead691"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdPortal"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create by Portal" id="a1197c38-76c5-4585-8e5a-6ab5136fa074"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="539cb295-2b5f-4e94-b11b-45ee818b7e2a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="97513c81-deca-4252-85d8-7bf1eab69668"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="d1030bb5-806d-4855-984e-90d613f48b90">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate for Portal")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("assertionUUID1",tC.getPropertyValue("assertionUUID"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="bbd57537-2f6f-427a-97a6-927fe4adc457">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#TestCase#SAML}');

tC.setPropertyValue("SAML1",tC.getPropertyValue("SAML"));

tC.setPropertyValue("NODE_ACCOUNT_ID_FULL_Portal", tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL_Portal",tC.getPropertyValue("NODE_USER_ID_FULL"));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="25d336c7-ad64-4257-a191-7777bcaabb50">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate for Retailer" id="da8b0609-4a65-46f1-9ebf-0855b0c18dd5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("assertionUUID2",tC.getPropertyValue("assertionUUID"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="81216cb7-10ab-43dd-9a9a-9e07001f995e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#TestCase#SAML}');

tC.setPropertyValue("SAML2",tC.getPropertyValue("SAML"));

tC.setPropertyValue("NODE_ACCOUNT_ID_FULL_Retailer", tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL_Retailer",tC.getPropertyValue("NODE_USER_ID_FULL"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy GET  by Retailer" id="9a791e2c-3f57-4b4a-a21e-f4a67ecbc30d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC PolicyDelete by Retailer" id="6dd03c35-5c8d-4b54-a217-9da1e831a12b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy GET by Retailer" id="3b9cacb5-b8ef-4568-be75-42e38a83205e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("SAML",tC.getPropertyValue("SAML2"));

tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", tC.getPropertyValue("NODE_ACCOUNT_ID_FULL_Retailer"));
tC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL_Retailer"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy GET by Portal" id="d8c19a81-50cb-4412-b6d8-d68cba18421f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdPortal"));
tC.setPropertyValue("SAML",tC.getPropertyValue("SAML1"));

tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", tC.getPropertyValue("NODE_ACCOUNT_ID_FULL_Portal"));
tC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL_Portal"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ID</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1424877534971@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0FD5C9AD20242FF4E05307991F0A2525</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0FD5C9AD20242FF4E05307991F0A2525</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0FD5C9AE5FB22FF6E05307991F0A6751</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0FD5C9AE5FB22FF6E05307991F0A6751</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1424781607868</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_80e3b63a-6ead-4959-a2bf-2c4d5ed86159</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynlMGd8wGFegCgJsyH1CrrxsCbkBMbbkWDKYfP1IBhwgJMvsk0vt1unTFx3pjKMotP0W55AIwmgpi0LK/dza0NKE+gxxwn2KIuC+wP6gdXPt22XTR5stWqnfaWj/Ou44QJZj6aaHK3qlWjP1UcWt644dIOy6VlCr1qUr5yn0KReIioZmm5arm7ZuVx4t23c83/TKjlMZaqVnSLjEli5lU1uTynhDmwoR+4axWCzKC6fMkolhm6ZlvN5cD/AUIqQ1z1YZ5YGS5toflwPAEIa4jFlknBk7PmcB9wdkQpFIE1jHCr6LZRpm3ZA+ASeTE63YC0Gfjlm+PEeUUYJRSD6Qqs8NiCkLSq1wwhIiptG3SVimAtYhwzq2KvREM3apHQm0wzDhSOdTZK2xHmAMCVAMpaeHfkM7Oa5r+dbHBFE+ZknEd5d/xwfoHEIWQ6DzTVprascDHqhU8wyw36c4TDmZw60a1hhh4OtuAj4eqnSfwJhk14TLAc24Ymds09tbrqrRIRPg4v80aKs5K5BnFKbQvLy7yi5NZ3iZTSFrx8HilRmi/uJ0+KKRE9h2zg1Fa1fLvaEshmi14wI9jXmnGnWygVn1LpY9D1kf0TBpzd7uR5cffWZMnavTe/7WHl/dzd67v2LG3PaCPYZd8k+0PDWjam82sEe18XTYGlI2G8LpqxWY3scoSZ8Xj5yh5ax3ZYVPF9ZFbHSxPX0hye/h6P5leVe13VvHm81n9HJ2MatZ/RSNePfB+/W6CNux8XY5uQ7m9dPKqTk/v8WNIp0t/ru2zZkfpKMZYLFZqjHod0o92SUkfhYzZSGBPs5d/ViJDxdAhdZUu5R2+KmUOxL4soertdnruOf1VtfttW2716t2Tdcxa/W61TNb1ZprbURmxWKP4jmjY6JiKcldjc3PBHHkc6ABJPqcpVLpuPYDYgcJVOrTB3kIGOXwyKQ8x3boUE8sHQQTi0eZ583rLLPqnla6ZeKO3iWtsYBkV5PdHU1+AExiAkq41VxzOdhcyFq8o3kqQqs8R2UKqZT2RKmsb1c81+AkikNQTI2IBWkI5Xga55Ux+Opr6wjz3Eo4jlkiUJifuW+z2/+3KYT0CYhy4CqjNshmwpcrpua7m3S+T9vbTnsD30oDoo6XrKpICF4x2f31OSxqSopJKfLCvJiKYstfQhwAMH7gZ+yXpogXzMlW9M1dLm8FqSPNTXvfUfm9nM7nad7QmmnaRiLhDSmbljEAnEqZWz6y30CNAsI46k4pWO9FLuy7/FIxpQOBBERy/Er58ohHxAC4ekT05bnJjn2h7ISUdROQiUO281A+gBTjH99I2MfKT5rv5WfBkuCzXQewtuLIPOUbQhA6USt1nyy/mQ3MJCyRSsiSbfBDAIeC7xqLIhdchJymUSrg+z8lJXENDWHMUir6HS03bMtuzlMsY/A/nb7A5MpePPXIf7/1dJKPAAb5QOQkx1c3tq/mn062pHsd9IB6d2zTrkj1rmyrt+3ablGUHXbNL+avlq067c948w8=</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:0FD5C9AE5FC02FF6E05307991F0A6751</con:value></con:property><con:property><con:name>SAML1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynlMGd8wGFegCgJsyH1CrrxsCbkBMbbkWDKYfP1IBhwgJMvsk0vt1unTFx3pjKMotP0W55AIwmgpi0LK/dza0NKE+gxxwn2KIuC+wP6gdXPt22XTR5stWqnfaWj/Ou44QJZj6aaHK3qlWjP1UcWt644dIOy6VlCr1qUr5yn0KReIioZmm5arm7ZuVx4t23c83/TKjlMZaqVnSLjEli5lU1uTynhDmwoR+4axWCzKC6fMkolhm6ZlvN5cD/AUIqQ1z1YZ5YGS5toflwPAEIa4jFlknBk7PmcB9wdkQpFIE1jHCr6LZRpm3ZA+ASeTE63YC0Gfjlm+PEeUUYJRSD6Qqs8NiCkLSq1wwhIiptG3SVimAtYhwzq2KvREM3apHQm0wzDhSOdTZK2xHmAMCVAMpaeHfkM7Oa5r+dbHBFE+ZknEd5d/xwfoHEIWQ6DzTVprascDHqhU8wyw36c4TDmZw60a1hhh4OtuAj4eqnSfwJhk14TLAc24Ymds09tbrqrRIRPg4v80aKs5K5BnFKbQvLy7yi5NZ3iZTSFrx8HilRmi/uJ0+KKRE9h2zg1Fa1fLvaEshmi14wI9jXmnGnWygVn1LpY9D1kf0TBpzd7uR5cffWZMnavTe/7WHl/dzd67v2LG3PaCPYZd8k+0PDWjam82sEe18XTYGlI2G8LpqxWY3scoSZ8Xj5yh5ax3ZYVPF9ZFbHSxPX0hye/h6P5leVe13VvHm81n9HJ2MatZ/RSNePfB+/W6CNux8XY5uQ7m9dPKqTk/v8WNIp0t/ru2zZkfpKMZYLFZqjHod0o92SUkfhYzZSGBPs5d/ViJDxdAhdZUu5R2+KmUOxL4soertdnruOf1VtfttW2716t2Tdcxa/W61TNb1ZprbURmxWKP4jmjY6JiKcldjc3PBHHkc6ABJPqcpVLpuPYDYgcJVOrTB3kIGOXwyKQ8x3boUE8sHQQTi0eZ583rLLPqnla6ZeKO3iWtsYBkV5PdHU1+AExiAkq41VxzOdhcyFq8o3kqQqs8R2UKqZT2RKmsb1c81+AkikNQTI2IBWkI5Xga55Ux+Opr6wjz3Eo4jlkiUJifuW+z2/+3KYT0CYhy4CqjNshmwpcrpua7m3S+T9vbTnsD30oDoo6XrKpICF4x2f31OSxqSopJKfLCvJiKYstfQhwAMH7gZ+yXpogXzMlW9M1dLm8FqSPNTXvfUfm9nM7nad7QmmnaRiLhDSmbljEAnEqZWz6y30CNAsI46k4pWO9FLuy7/FIxpQOBBERy/Er58ohHxAC4ekT05bnJjn2h7ISUdROQiUO281A+gBTjH99I2MfKT5rv5WfBkuCzXQewtuLIPOUbQhA6USt1nyy/mQ3MJCyRSsiSbfBDAIeC7xqLIhdchJymUSrg+z8lJXENDWHMUir6HS03bMtuzlMsY/A/nb7A5MpePPXIf7/1dJKPAAb5QOQkx1c3tq/mn062pHsd9IB6d2zTrkj1rmyrt+3ablGUHXbNL+avlq067c948w8=</con:value></con:property><con:property><con:name>SAML2</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvO4ZSzfALsCVYRLwoRcyaSyedmS5TYoY8uOJQPZr1/JgIMJybL75FK7dfqou3XUZxwnseX3OYdc0JQ11knMuF9au1qRMz/FnHKf4QS4L4g/619PfauJfLzbojUmw672VweBHbRsrLcAh7rjuZ6OrSDSLeKELoSdlul60pXzAiaMC8xEV7OQ6erI0i3n0bR8u+NbbtNuoxet8QQ5l9jSpYm0Lak172oLITLfMFarVXNlN9N8blgImcbz9XRGFpBgrXe2OVEZKO9t/UkzBAJxTJokTYwzo+ZzFnJ/RucMiyKHbazwq1jIQJ4hfUJO5z+0ai+EExal5XKAWcoowTH9G6v8XINYpGGjH8/TnIpF8uUhTKSAdVgTnZgO+6EZdWonAtUY5hzrfIHNLdYDRJADI9D49TDpaj9Oq1q59THHjEdpnvD68r/xAbaEOM0g1PnuWFtqpwMeyVTvDIg/YSQuOF3CjWrWDBPg22oCOR2qcZdDRNdTymWDrrliZ+zTO1husjGkc+Di/xRorzgbkCccF9C7vIBzjq4nrrde/oydez4bYrQWz0940i0J7DuXhqq0m+VBU1ZNtNkxZU8jL7zNfg7+XKV/LHK7bY87iQx4c/E2im1kOC60zsPkchX9unduWad9E71gxxFLqzPJ+cszHbPoPrI9iK/zyEjxTWvstvurK2S8j35f0fUqm67un9ClKdBTcJe/FCyCl1FkvlKw37kI6HXmPK/bs8tiEaDMDaLby6uCCG5c3Paz16soavXb7hTR+1G3Os4e/7ptd+dnRfAKROyWqg0mw8ZYVgmL78VMWWioR6Wrnynx4QKY0Hpql9IOv5ByR0Nf1nCzRuOhO/D6o45teq3hsDNCro1czzPHqD9wOu5OZDYsDigOUhZRFUtJ7qZtvidIEp8DCyHXl2khlY5r3yAOscCNCXuQlyBlHB7TrtY25d0OPKm2HmrrThgEetCyWrodECuwwrBlWlJnb1Jxy27zfiQgr6uzW1PnByA0o6AkXHU4ly3OhczKG14WIjabS9xkUEiRz5Xe+pZMh8FpksWgOBtJGhYxNLNFVubI4JuvpWPCS+sADUZjmdHOYGQO2sPWCDlI5bXMr4XOy0v55fEP/+0yJX1Cqhy4Oug5yGrDkTfI3J3yUzZaR9+qHXy/CKm6fzLtIqdkw6T+66ObVBtVrfQwetxRrjwPDTVU4/BAVaBwSUl1H6pXXYq9lIferlZvuPnWLJbLoqxOGyHLyCW8IdXQNGZACqle74/pb2BGBWGc9FRUrA8iV/Y6v0Is2ExgAYnspUa5PGE2mAFXs8FEXof1qYNHLaTMm4C1OGYbxHKuUYy/HX2IT5SfNN/JzyrNw49yHcHaiyPPKUcDQdlcrdQz8f5FU5BUwlIpcGm+D34M4FjwurFKcsVFyG4KCgFf/2ko5epqmJC0YGIy1ErDvpqWPMV7Bv6H0yeYUrCrCY7++win07IFCMi5j9MSXz3Evup/Nt9T5G3QI6I8tJA1ssZjpxTl9kaULdeqRLnOrvfJ/Nmyl6fDHu/9Aw==</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_35fda131-08c4-4670-b459-32dac551d769</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_80e3b63a-6ead-4959-a2bf-2c4d5ed86159</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_Portal</con:name><con:value>urn:dece:accountid:org:dece:0FD5C9AD20242FF4E05307991F0A2525</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL_Portal</con:name><con:value>urn:dece:userid:org:dece:0FD5C9AE5FB22FF6E05307991F0A6751</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_Retailer</con:name><con:value>urn:dece:accountid:org:dece:0FD5C9AD202E2FF4E05307991F0A2525</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL_Retailer</con:name><con:value>urn:dece:userid:org:dece:0FD5C9AE83196DD8E05305991F0AC485</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>25d336c7-ad64-4257-a191-7777bcaabb50</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3b9cacb5-b8ef-4568-be75-42e38a83205e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Scenario2-DTCreate_with_ULC_for_DLASP_User_created_by_node_PORTAL_and_ULC_Deleted_for_DLASP" searchProperties="true" id="9649c938-2e20-4d69-a755-a794ed8ce10a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="17c5c68b-5412-49dd-b7bd-c084c191caf9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdPortal"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="d3066fe3-d45b-45cf-8db9-3020232e6f99"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="938197b6-6e8a-401a-8e74-73fe2fa809be"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="603887fb-dde8-4f5f-8894-7bb3978a8c06"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="cf24f84b-0fd5-4651-8581-1fbbcc5c7025">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("assertionUUID1",tC.getPropertyValue("assertionUUID"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="b51e2e62-72d2-49ec-8876-1c73495b11f9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#TestCase#SAML}');

tC.setPropertyValue("SAML1",tC.getPropertyValue("SAML"));

tC.setPropertyValue("NODE_ACCOUNT_ID_FULL_Portal", tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL_Portal",tC.getPropertyValue("NODE_USER_ID_FULL"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="b5c81f8c-6fc0-4e04-bf90-113532e5f153">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="bc1e594f-aa08-40ca-afee-f443ef40d044">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdDLASP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("assertionUUID2",tC.getPropertyValue("assertionUUID"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="4422d324-751a-46e7-aa59-fda94b7b8953">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


def sAML = context.expand( '${#TestCase#SAML}');

tC.setPropertyValue("SAML2",tC.getPropertyValue("SAML"));

tC.setPropertyValue("NODE_ACCOUNT_ID_FULL_Dlasp", tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL_Dlasp",tC.getPropertyValue("NODE_USER_ID_FULL"));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy GET by DLASP" id="6ef0ed2b-9a1a-4850-a388-80cc17648525"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdDlasp"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC PolicyDelete" id="f8abad0c-8ad3-4b28-815a-6aa9058a0823"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify DLASP Node User Assertion UUID status to deleted" id="23de4903-6453-4d7b-b666-d17df54392cc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def assertId = tC.getPropertyValue("assertionUUID2");

a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
assert a.samlGetUUIDNodeAssertionStatus(assertId) == "deleted";
	



</script></con:config></con:testStep><con:testStep type="groovy" name="Verify RTL Node User Assertion UUID status as Active" id="e59402ba-924c-495b-9b49-83449a67757a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def assertId = tC.getPropertyValue("assertionUUID1");

a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
assert a.samlGetUUIDNodeAssertionStatus(assertId) == "active";
	



</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy GET by Portal" id="900780da-10aa-4fa1-b0ca-197b5de6a51d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdPortal"));

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML1"));

tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", tC.getPropertyValue("NODE_ACCOUNT_ID_FULL_Portal"));
tC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL_Portal"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FE60D9E373C3B3DE05307991F0A7B47</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FE60E51FB153B47E05307991F0AC0D5</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1424851579102@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0FE60E51FB143B47E05307991F0AC0D5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0FE60E51FB143B47E05307991F0AC0D5</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0FE60D9E373B3B3DE05307991F0A7B47</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0FE60D9E373B3B3DE05307991F0A7B47</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1424851581662</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_4f23ed73-30e0-490e-8404-2c52d46d488b</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMpYvxMEVqOISdh1yG0hIMi9bQm5AGSMbSQaSrx/JgIPJZdktHii1W92nu4+OdC7wPHaClhDAJU1YZT2PmQhya8PIOAsSLKgIGJ6DCCQJhq3rq8CpogDvthiVsNsw/vHHHgCMIzPyPGR67iky665jm/64bk9qzmktiohyFSKDkAmJmWwYDrJrJnJMp3aPzgLkBrVaFdVPfxmVEXChYiuXKjK2oNaiYcykTAPLWq1W1ZVbTfjUchCyrafrqyGZwRwbzfNNRXki3tz6k2oEBOKYVEkyt86tks95JIIhnTIsMw7bXNFXuZCF6pbyiQSd/jCKvRCFbJLkyw5mCaMEx/QN6/5cg5wlUaUVTxNO5Wz+ZRE20oFNWBOT2B77YVhlaEcGKiHkAptihu1trAFMgAMjUHkYhA3jx3FTy7fec8zEJOFzUV7+NzzAlhAnKUSm2JW1hXZ8wE861TwHEoSMxJmgS7jRZE0xAbGdJpDjQ1XuOEzo+ooKRdC10OisfXgHy003unQKQv6fAe0NZxNkhOMMmq12dHIzu3Px9LLzEv+Gp9nFqtcnF1PsNXIA+865oRjtZnlAyoJEmx0dyw3vF8wf2eve2fDOWf58eljdOg9nq/TKcgGlXg/fPs9OZugERygLk37bqo9Gz53Hxev6kj3cdC4n1pMf90eL/iBeuz0yXgwvX5aDxS/M+rPpC1/VF/dp7S3LuOs9p44rRkQMh+mNFf49FoQ5UQany9B/tfo36CXqn8Igxevk8XE9dh4y7p+1f/71kLRWfFvuAf6ybXfmh9n4BYjcLTUNwm6lp6aE5fdipi00Mie5a5Bq8RESmDSaepfWjiBTckejQM1ws0a9i1PUrV+4vttWv+4FqrnIr9ftHmr5bc/ficwGxQHETsImVOfSkruhzfcAyTwQwCLg5jLJlNIJ45uIXSxxJWQDdQgSJuA+UfI8fVvF6jDPWerErrdw6p6fTWzbNyo3ibxlt7w1kcBLkmzbJUkeAKEpBa3bmtZC8VpI1YoFXmYytqtLXGWQKWXnWmQDxzurWYLO0xg0UGueRFkM1XSW5o2xxObfMTERuZUKkiZc4jg/cl8Wd/ht1wflE1HtIHRFbVCzhE9uGG9Xztdle/tl78K3sojq06WaKjklGyTlT+9c0SQpiFLUZe+QFxsODaXg1mFdRb5oSUlB+uLqVoquNKC5m80CVxfVbLnM8mn4CDkWV+EtJXm2NQSSKYl6vU9+A7OKENZR90GB+iBzYS/jy+SMDSWWMFfcqeTLIx4AQxD6ARAqzq+PfV2UUqq+SVjLz2ydWD1eNOJv3zckINpPme/U3yrh0fu4Pom1l0fVqe5/SdlUr/Rd8PoFN0iiwlKlYgnfD/5ZgM+Sl41FkwssUrFpnEn4+ktFy1PDwIQkGZNh18gN+5KZ45SvKQTvTh/C5KpcPNPov7/TTJpTgIB63Amax9e3baD5z6Z7srtN+kF5L2p2r217rlLafeXtoG6taEoJXfOD+aNlr0+HHG/+AQ==</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:0FE60E5BCFC13B54E05307991F0A3C32</con:value></con:property><con:property><con:name>SAML1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMpYvxMEVqOISdh1yG0hIMi9bQm5AGSMbSQaSrx/JgIPJZdktHii1W92nu4+OdC7wPHaClhDAJU1YZT2PmQhya8PIOAsSLKgIGJ6DCCQJhq3rq8CpogDvthiVsNsw/vHHHgCMIzPyPGR67iky665jm/64bk9qzmktiohyFSKDkAmJmWwYDrJrJnJMp3aPzgLkBrVaFdVPfxmVEXChYiuXKjK2oNaiYcykTAPLWq1W1ZVbTfjUchCyrafrqyGZwRwbzfNNRXki3tz6k2oEBOKYVEkyt86tks95JIIhnTIsMw7bXNFXuZCF6pbyiQSd/jCKvRCFbJLkyw5mCaMEx/QN6/5cg5wlUaUVTxNO5Wz+ZRE20oFNWBOT2B77YVhlaEcGKiHkAptihu1trAFMgAMjUHkYhA3jx3FTy7fec8zEJOFzUV7+NzzAlhAnKUSm2JW1hXZ8wE861TwHEoSMxJmgS7jRZE0xAbGdJpDjQ1XuOEzo+ooKRdC10OisfXgHy003unQKQv6fAe0NZxNkhOMMmq12dHIzu3Px9LLzEv+Gp9nFqtcnF1PsNXIA+865oRjtZnlAyoJEmx0dyw3vF8wf2eve2fDOWf58eljdOg9nq/TKcgGlXg/fPs9OZugERygLk37bqo9Gz53Hxev6kj3cdC4n1pMf90eL/iBeuz0yXgwvX5aDxS/M+rPpC1/VF/dp7S3LuOs9p44rRkQMh+mNFf49FoQ5UQany9B/tfo36CXqn8Igxevk8XE9dh4y7p+1f/71kLRWfFvuAf6ybXfmh9n4BYjcLTUNwm6lp6aE5fdipi00Mie5a5Bq8RESmDSaepfWjiBTckejQM1ws0a9i1PUrV+4vttWv+4FqrnIr9ftHmr5bc/ficwGxQHETsImVOfSkruhzfcAyTwQwCLg5jLJlNIJ45uIXSxxJWQDdQgSJuA+UfI8fVvF6jDPWerErrdw6p6fTWzbNyo3ibxlt7w1kcBLkmzbJUkeAKEpBa3bmtZC8VpI1YoFXmYytqtLXGWQKWXnWmQDxzurWYLO0xg0UGueRFkM1XSW5o2xxObfMTERuZUKkiZc4jg/cl8Wd/ht1wflE1HtIHRFbVCzhE9uGG9Xztdle/tl78K3sojq06WaKjklGyTlT+9c0SQpiFLUZe+QFxsODaXg1mFdRb5oSUlB+uLqVoquNKC5m80CVxfVbLnM8mn4CDkWV+EtJXm2NQSSKYl6vU9+A7OKENZR90GB+iBzYS/jy+SMDSWWMFfcqeTLIx4AQxD6ARAqzq+PfV2UUqq+SVjLz2ydWD1eNOJv3zckINpPme/U3yrh0fu4Pom1l0fVqe5/SdlUr/Rd8PoFN0iiwlKlYgnfD/5ZgM+Sl41FkwssUrFpnEn4+ktFy1PDwIQkGZNh18gN+5KZ45SvKQTvTh/C5KpcPNPov7/TTJpTgIB63Amax9e3baD5z6Z7srtN+kF5L2p2r217rlLafeXtoG6taEoJXfOD+aNlr0+HHG/+AQ==</con:value></con:property><con:property><con:name>SAML2</con:name><con:value>SAML2 Assertion=nVZbk6o4EP4rFudxC4ncFGq0SkF33ONcnet52Yqh1cyBwJCgjr9+E1RGncu6+0Sl6Xz9pbvzpc84TmLT73IOuaApq62SmHG/tLa1Imd+ijnlPsMJcF8Qf9y9GPlmHfl4t0WrDcO29rc9NS2ImpZuIUC67SHQWzaydZM4ZmS7kd1qTaQr5wUMGReYibZmooajI1M3nTvU8pHtI6/uuuiXVnuAnEts6VJH2pbUire1uRCZbxjL5bK+tOppPjNMhBrG08VoTOaQYK1ztjlRGSjvbP1JPQICcUzqJE2MM+PA5yzi/pjOGBZFDttY0VexkIE8Q/pEnM5+aNVeiIZsmpbLALOUUYJjusYqPxcg5mlU68azNKdinnx5iAZSwDqsiE4aNvuhGYfUTgQ6YJhzrPM5bmyxbmEKOTACtfvbYVv7cVrVyq13OWZ8muYJP1z+Nz7AFhCnGUQ63x1rS+10wE8y1TkD4g8ZiQtOF3CpmjXDBPi2mkBOh6pd5zClqxHlskFXXLEz9ukdLTfZCOkMuPg/BdorzgbkAccFdFgzv4wnFy/JjTvywmBgRtlbkJ8nwU/ULgnsO5eGqrSb5VFTVk202XGPnvLk+dHIWrMrMwqRZz8OrfDOvA1eu+dzb2bkvecrKFrk4ldmuX/kPHbPR+ub+/UlDhcvL0BmzUVRuH+Zy4jYv9ny2V40n/j6yvwzubMYmT6mD9ZN37xdeyN6j50XFyB48V7tBxI+Tx/DeHDpNtHEXdnZA1qaN8+e2+w9inV34Watx/FVYT2v4frhKbzOWu3qOHv8D227Oz8uJpKa2C1VGwzD2kBWCYvvxUxZaKRPS1c/U+LDBTChddQupR1+IeWORr6s4WaNBn2nH4Zdp99zmsgO+sixUNPzGgPUNa3+YCcyGxZHFIOUTamKpSR30zbfEySJz4FFkOuLtJBKx7VvEEMscG3IbuUlSBmHu7StWS2LOO4k0h3Hs3U7Mpu6RyaObmHTRuA5mHhEq12m4opd5d2pgPxAnRuNA3W+BUIzCkrCVYdz2eJcyKy84kUh4kZ9gesMCinyudJb37RbjsFpksWgOBtJGhUx1LN5VubI4JuvqWPCS2uAgv6g1UetIAyCZuj2kY1UXpEj82uiXnkpvzz+8b9dpqRPRJUDVwftgaw2fHiDLN/ZnfJDNtxP36odfLeIqLp/Mu0ip2TD5PDXezepNqpaKRx1x9c70pXvseEA1zg+UhUqWlBS3YjqXZdyLwWis6vWK66/1ovFoijr00TINHIJb0g9bBhjIIXUr7e79Dcwo4IwTnosKtZHkSv7Ib9CzNlYYAGJ7KZauTxhOhgDV9PBUF6I1amjx0FImTcBK/GZLYjlZKMYfzv8EJ8oP2m+lp9lmkfv5foEay+OPKccDgRlM7VSD8XbF21BUglLpcSl+T74ZwCfBT80VkmuuAjZTZNCwNd/akq72homJC2YGIZaadjX05KneMvAf3f6AFNKdjXD0X8f4nRatgABOflxWuKrp9hX/c9me5q8DXokyy4Kvb7XdT2rZ3n7stzwvF6VlAN2nQ/mj5a9PB33eOcf</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_7b4eeebd-d440-4360-9321-7b91f5265ddc</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_4f23ed73-30e0-490e-8404-2c52d46d488b</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_Portal</con:name><con:value>urn:dece:accountid:org:dece:0FE60E51FB143B47E05307991F0AC0D5</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL_Portal</con:name><con:value>urn:dece:userid:org:dece:0FE60D9E373B3B3DE05307991F0A7B47</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_Dlasp</con:name><con:value>urn:dece:accountid:org:dece:0FE60D9E9A693B39E05307991F0A199B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL_Dlasp</con:name><con:value>urn:dece:userid:org:dece:0FE5EDDA5EB5704CE05307991F0A23EF</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Scenario3-DTCreate_with_ULC_for_LLASP_User_created_by_node_PORTAL_and_ULC_Deleted_for_LLASP" searchProperties="true" id="2e3e6e9b-3153-4881-9971-88ec080a9380"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b5f57657-fba5-4810-8dab-7baa9e6e6d8c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdPortal"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="3cde568a-7130-482a-a3cb-1f15f254c43e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="b542b3c3-c97b-4db3-8fcf-377cc03c8557"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="76bcad93-9c8d-4ef9-add7-fd3d3bc56060"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="9bac69af-ff49-453a-8e10-2d51ded956b7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate for Portal")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("assertionUUID1",tC.getPropertyValue("assertionUUID"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="b137eeb9-9dbc-4786-8c3f-5569c722ddee">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="75d79c80-838d-4a8b-94c9-9ed3fc40a713">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="a9a5e10c-8d5e-46cc-b428-9cf9d0b24d2f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdLLASP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("assertionUUID2",tC.getPropertyValue("assertionUUID"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="5955ddf3-af28-4494-85da-a200fae83fde">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy GET" id="12c93ebf-fea6-44c6-a0cd-a72c859e4e8b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC PolicyDelete" id="30b99676-c6db-4e19-a484-b7e41012ba15"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify DLASP Node User Assertion UUID status to deleted" id="68e15846-ba1f-4ab6-ad4a-4c4f2b5314ad"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def assertId = tC.getPropertyValue("assertionUUID2");

a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
assert a.samlGetUUIDNodeAssertionStatus(assertId) == "deleted";
	



</script></con:config></con:testStep><con:testStep type="groovy" name="Verify RTL Node User Assertion UUID status to Active" id="af0cd788-9cd0-4f80-901e-c6885bb36c48"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def assertId = tC.getPropertyValue("assertionUUID1");

a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
assert a.samlGetUUIDNodeAssertionStatus(assertId) == "active";
	



</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FE9466B5FA02D1EE05307991F0A53B4</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FE946C0F5922D22E05307991F0A5940</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1424866399050@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0FE946C0F5912D22E05307991F0A5940</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0FE946C2B1382D24E05307991F0A9186</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0FE9466B5F9F2D1EE05307991F0A53B4</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0FE946C41BC07393E05305991F0A39C0</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1424866401238</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_5d59a933-c59d-4388-9ae2-5ce46cfded69</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMpbv2BWoIphkPYGEAJPJ5GVLkWUQY2THkh2Yr1/JgAOEZNl9cqndOn3U3TrqSwaXieF3GcM5JyltrJYJZX5lbStFTv0UMsJ8CpeY+Rz5k+5w4BtN4MPdFqURBm3lbzuyPeiZpopsL1Its9VSPYgN1UbYclAc4cjxhCtjBQ4p45DytmIA3VaBoRr2VDd8XfeB3bQc51lpPOKcCWzh0gTKltSKtZU555mvaW9vb803s5nmM80AQNeehoMJmuMlVDqXmxNVgfLO1h81I4xwkqAmSpfapXbgcxkxf0JmFPIix9tY0WexgAY8TfhEjMy+KfVeHIU0TqtlD9KUEgQT8gfK/Awxn6dRo5vM0pzw+fLTQ+hAAqt4hVSkW/Sboh1SOxPogGHOoMrmUN9ijXGMc0wRbvwYh23l23lVq7ZOc0hZnOZLdrj8b3wwLXGSZjhS2e5YW2rnA57IVOcSIz+kKCkYKfGdbNYMIsy21cTofKjGKMcxWQ0IEw26YpKdtk/vaLnJRkBmmPH/U6C94mxAHmFS4E53ZrjPiyl5uM0eF2UPrO8sq/swuL2Z/2pXBPadK0Nd2s3yqCnrJtrsyBxUTqfP7no9/Cu4dn513fTJC0Y34cX3hVMMR9Gr3ddGy+X0xXGDp+hHGYCfzmL4O3ybucY608p7+uOx5f1+YHbWTa+SkN5Y95kWXYxv/1hx+Jyt+tNy3P9lJ4P5yr1I6cX3kvUe76yXeBw8jW/6rjvNgcUekskiHptgUQzxzS30RmHX8vBPc5T1MgQGCxDM2vVx9vgf2nZ3flK8LDDiu6VsgzBoXIsqQf61mEkLidS4cvUzKT6MY8qVjtwltcMvhNyRyBc13KzBdd+znJ6lX/WAa3pmH9gmsD1PvwZd0+uBnchsWBxR7KU0JjKWlNxN23xNEC19hmmEc7VMC6F0TPkCMYAcNkI6FpcgpQxP07bS0qG43C9QSK2FVcuGjtpq2bEam64FWy5+cXRTadyl/J7e592Y4/xQne0DdR5jRDKCpYTLDmeixRkXWXmFZcETvVnCJsWFEPlc6q1vWC1bY2SZJVhy1pZpVCS4mc2zKkca23wNFSJWWXug179u9UGrF7g9N3D6wAIyr1V+DXBVXcpPj3/8b5cp4RMR6cDkQa+wqDb+8AYB396d8jgbxum3agffLSIi759IO88J2jA5/PXeTbKN6lYaDLqT0Y507XtsOMDVjo9Uh4pKguobUb/rQu6FQHR21XqFzddmUZZFVR8XAEPLBbwm9FDXJhgVQr/W0/Q3ploNoZ31WNSsjyLX9kN+BZ/TCYccL0U3NarlGdPBBDM5HYTiQqzOHT0OQoq8cbzip2y9REw2kvGXww/ykfQT5pH4vKV59F6uE1h7ccQ5xXDACZ3JlXwo1p+0BUoFLBESl+b74KcATgU/NNZJrrlw0U0vBcef/2lI7WorEKG0oDwMlMqwr6cVT77OsP/u9AGmkux6hiP/PsSppGoBhMXkx0iFL59iX/Y/ne1p8jboCVk2rnSzZQSGVcmyu5FlT285dVIO2HU+mD9a9vJ03OOdfwA=</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:0FE946C3F7827391E05305991F0A04C3</con:value></con:property><con:property><con:name>SAML1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4BZbN3RWo4pJkqYWQAQbYvGwZuW2U2DJIsrl8/UoGHEwgy27xQKndOn36oiM9cDvwTavFOTBBQprbBj7lVmJtaBGjVmhzwi1qB8Atga1xa9C3zAKy7NMWLdfrNrS/iwauGiaq5ZFpQr7kLMy87bpOHkqLiuMi+Vs40pXzCHqUC5uKhmYioyz982ZxYiDLLFoGKpjF0puWmwLjElu6FJB2JLXlDW0pxMrS9c1mU9gUCyHzdBMhQ58P+mO8hMDWmg+HjJJArHn0xwUHMPg+LuAw0B/0jM+Dw60x8agtIgbHWM6tWEhHdV36OJx4P7R0Lzg96obJsmPTkBJs+2Rvq/oMQCxDJ9fyvZARsQxuJmEgBZyHLc5jo0R/aHqW2p1AGYaM23m+tI0j1ghcYEAx5H6Peg3tx31dS7ZOmE25G7KAZ5f/jQ/QGPxwBU6en9I6Ursf8Eqlmg+ArR7FfsRJDC9qWFc2Bn7sJuD7oXKvDFyy7RMuB3TLFTv9nN7F8lCNLvGAi//ToLPmHECmth9Bc8vYgpOK98KWAzYZey3fNSu73iae8EZC4Nw5MaStPSwvhjIdosMO0in7lLDpr+Xij+kgGA7Lb51dJ4rJnMszgUZOxxhW1ub4MSqZ7kcwn3vDrttHrWl16P4yty/79/7P/YA/t1/f3bH712xPJ63pXmelzt6ceU/GzGnP91H8Z9WbPdfGcySKs0608t77/qg1G76FP1mlGw9besz7m/bza1+ng1a7Jvbu0mxDdwDuUF+/1mu7yu+PRprOGf+s7XTmx9HiHbA4LdUY9Lq5J9klW3wvZspCnLybuForJT5cABVaU+1S2mFFUu6IY8keHtboqf3ULnVrNdStoGq1/IjKRVSt140n1CqXi48nkTmwuKDYCalLVCwluYex+Z4gDiwO1AGWj8NIKh3XvkHs2sLO9ehIHoKQcpiEUp5X9eV6/7E14rURGU7d9Nb+ckHea1jLvYRiSIes5QpgWU0uZjR5BJisCCjhVnPN5WBzIWuxtuNI+EYhtgsUIintTKmsZZZqZZ2TYOWDYqoHoRP5UFgtV0lldH74l4KDeWIdPU6S03Yzr8tvpxJIH4coB65yaYNsI1y5XNApkdsJV84TPsG3IoeogyXrKRjBBybZT59jouYjnRGZ0Yly6nlpyKDqlwmlgZyY4HTQ0+taqrg8981TO9Z2YV2I4jhKGlBV+sYkvK5S1JGpjwFHUpl2k/ADqJ6i6HddAynxi+CpPUsxEks6FraAQE5MLlnece+Pgat7vydHfXvvoyITUpZOwFZcs3V8+WZRjL991mALKz9pfpV/m5B9Jn4N6yyOzFNe+4JQT63UFbC7MRc4lLBEilfIzsGvAVwLnjWmRU65CDlQi0jA7S85pUoNzcY4jKjodbXEcK6UCU+xW4H16fQFJhHj9HVG/v15lifJCGCQbzpOEnx1yVrqCFDvTG2PQS8Ft2bUO/Vq8RHVOrVEcMsHwX3qFGtpUTLsml/MXy1ndbqc8eY/</con:value></con:property><con:property><con:name>SAML2</con:name><con:value>SAML2 Assertion=nVZtU+o6EP4rTM9HpzQtlNKOMMOr9orKCHrRL3diuoVom2KTIp5ff5IClSJ6ufdTJ9vNs092N0/2nOM4srwO55AKmrDKOo4Y93JrS8tS5iWYU+4xHAP3BPEmneuRZ1WRh3dbtIrfb2n/gGMHNg5C3Xadhl5363XdtZ6RDgRblmmSZ6dBpCvnGfiMC8xES7OQaevI0q3a1ESeVfMsp2pb5pNWeYCUS2zpUkXaltSat7SFEEvPMN7f36vvtWqSzg0LIdOYXY8mZAEx1trnmxPlgdL21p9UAyAQRaRKktg4N0o+5wH3JnTOsMhS2MYKvouFDOQa0ifgdP5LK/ZC4LMwyZc9zBJGCY7ob6zycw1ikQSVTjRPUioW8beHMJEC1mFNdGLW2S/NKFM7EajEMOVY5wtsbrHuIIQUGIHK/Z3f0n6dVrV86zTFjIdJGvPy8r/xAbaCKFlCoPPdsbbUTgc8kqn2ORDPZyTKOF3BjWrWJSbAt9UEcjpUZZxCSNcjymWDrrliZ+zTO1hustGnc+Di/xRorzgbkAccZdB+uA5Hj/MAd7q9xSRAw0XHH18OHf668ls5gX3n3FCUdrM8aMqiiTY7LrpPi/VL3B1fZBd/r7tjZ0KRSLr9GA0sq14fiJtpGl3RBX69vTbSzrzzcrEOzq4sPKN/ja2aG8TL5P55PntMwR6EEe90Lh4FmKP+zCTRuPk2GJ4tz+5Xo5mY+r9fHm/8CzPrn509pu/m5WoWGcPRk+36l9kzW8fdEfuAMB47Mm1Ld5LdvoU3T69u/wq/ThbxY6s4zh7/sm135yfZ8wsQsVuqNvD7laGsEhY/i5my0EAPc1dvqcSHC2BCa6tdSju8TModDTxZw80aDbvDbr3fbKJ+AzmOPUB2DTmuaw5Rx7Zrg53IbFgcUOwlLKQqlpLcTdv8TJDEHgcWQKqvkkwqHdd+QOxjgSs+u5OXIGEcpklLCyzcxA3i6LZlWXo9REjHJsF6zQ5dYjdMUndrWuUmEbfsNu2EAtKyOtdK6nwHhC4pKAlXHc5li3Mhs/KGV5mIzOoKVxlkUuRTpbeeVW/aBqfxMgLF2YiTIIugulws8xwZfPO1dEx4bu2h3mDYHKBmb2D2nH5jgOpI5RXZMr8W6uaX8tvjH/7bZUr6BFQ5cHXQLshqw5E3yNyd8ks2Gkffqh18Jwuoun8y7SKlZMOk/Ouzm1QbFa10N5juKBeeh4YSqnF4oCJQsKKkuA/Fqy7FXspDe1erN1x9q2arVZZXx1EymEp4Q6XCQJYxAZJJAfuYJq/AjALFOOm1KIgfBC/sZYqZWLCJwAJi2U6VfHnCeDABrsYDX96I9amzRymkTJ2AtThm60VytFGMf5x+iEeUnzSP5ec9SYPPih3B2osjzymnA0HZXK3US/HxTV+QRMJSqXFJug9+DOBY8LKxSHLBRciGes4EfP+nosSrpWFCkowJv6/lhn1BzXmKjyV4n05fYHLNLoY4+u9TnE7zFiAgRz9Oc3z1FnvqCrD5nihvgx7qctN0e65TUwLSzHXZ3ujysFdrFkkpsWt/MX+17OXpsMfbfwA=</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_0b3a98e9-468b-43c9-8cf3-935d0108fdee</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_5d59a933-c59d-4388-9ae2-5ce46cfded69</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>25d336c7-ad64-4257-a191-7777bcaabb50</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Scenario4-DTCreate_with_ULC_for_DLASP_User_created_by_node_PORTAL_with_ULC_and_ULC_Deleted_for_DLASP" searchProperties="true" id="3272039d-3447-481f-8ef1-8e483fe4943d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="8a454696-7703-4c0c-9ad1-3e0160d9471f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdPortal"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "urn:dece:type:policy:UserLinkConsent");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveOthers"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="39d3dc20-74c9-46e9-941b-11ea3b07d99e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="9d42fff1-7414-4e7c-a3f1-4e157d451c82"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="e7875812-d2f0-4f8e-8307-8dc74849e2c8"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="a296b599-b5e1-4a53-bd00-4e29b5785dc9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("assertionUUID1",tC.getPropertyValue("assertionUUID"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="aeb4d01f-fd25-4193-8c2c-e26a822f8cb3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#TestCase#SAML}');

tC.setPropertyValue("SAML1",tC.getPropertyValue("SAML"));

tC.setPropertyValue("NODE_ACCOUNT_ID_FULL_Portal", tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL_Portal",tC.getPropertyValue("NODE_USER_ID_FULL"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="5b4d3a04-9fa0-42e7-8701-cf51dfe00a96">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy Create for Portal" id="a1d9f7ce-2f28-4bae-bc7a-0aa0f98ceb47"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC_Single_Node")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="253bc1df-d4fb-440d-af8b-68f6008ed31a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdDLASP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("assertionUUID2",tC.getPropertyValue("assertionUUID"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="7ef2d1f6-9a4d-46df-a131-02c33330d015">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


def sAML = context.expand( '${#TestCase#SAML}');

tC.setPropertyValue("SAML2",tC.getPropertyValue("SAML"));

tC.setPropertyValue("NODE_ACCOUNT_ID_FULL_Dlasp", tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL_Dlasp",tC.getPropertyValue("NODE_USER_ID_FULL"));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy GET by DLASP" id="9f2d7675-11c1-4719-8779-7fb0454d6f90"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdDlasp"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy GET by Portal before ULC delete" id="c53b7087-1f81-4603-a2b3-557b93643309"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdPortal"));
tC.setPropertyValue("SAML",tC.getPropertyValue("SAML1"));

tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", tC.getPropertyValue("NODE_ACCOUNT_ID_FULL_Portal"));
tC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL_Portal"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy GET by DLASP for Policy Delete" id="dcebc8af-61c3-4241-acd9-08be64acc773"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdDlasp"));
tC.setPropertyValue("SAML",tC.getPropertyValue("SAML2"));

tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", tC.getPropertyValue("NODE_ACCOUNT_ID_FULL_Dlasp"));
tC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL_Dlasp"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC PolicyDelete for DLASP" id="e073849c-6d29-4794-ac4d-6bc3b0e8b70e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdDlasp"));
tC.setPropertyValue("SAML",tC.getPropertyValue("SAML2"));

tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", tC.getPropertyValue("NODE_ACCOUNT_ID_FULL_Dlasp"));
tC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL_Dlasp"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy GET by Portal after ULC delete fro DLASP" id="5622ee10-c129-457e-aa70-acff63327605"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdPortal"));
tC.setPropertyValue("SAML",tC.getPropertyValue("SAML1"));

tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", tC.getPropertyValue("NODE_ACCOUNT_ID_FULL_Portal"));
tC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL_Portal"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify DLASP Node User Assertion UUID status to deleted" id="0aa474e3-4fa1-44a8-98b8-2307ccd21f1e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def assertId = tC.getPropertyValue("assertionUUID2");

a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
assert a.samlGetUUIDNodeAssertionStatus(assertId) == "deleted";
	



</script></con:config></con:testStep><con:testStep type="groovy" name="Verify RTL Node User Assertion UUID status to Active" id="dbccab6f-44bd-4b3f-8194-6983d4e194d9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def assertId = tC.getPropertyValue("assertionUUID1");

a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
assert a.samlGetUUIDNodeAssertionStatus(assertId) == "active";
	



</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy GET by Portal" id="a7936717-582f-43d7-a656-2eb988bd2e6a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdPortal"));
tC.setPropertyValue("SAML",tC.getPropertyValue("SAML1"));

tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", tC.getPropertyValue("NODE_ACCOUNT_ID_FULL_Portal"));
tC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL_Portal"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>USER_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FE946C3F2A17391E05305991F0A04C3</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FE946C3F2937391E05305991F0A04C3</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1424866143075@uvvutesting.biz</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affiliationList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyList</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>8760</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0FE946C3F2927391E05305991F0A04C3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0FE946C3F2927391E05305991F0A04C3</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0FE946C3F2A07391E05305991F0A04C3</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0FE946C3F2A07391E05305991F0A04C3</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1424866144963</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_148b772d-16fb-4d55-bb2c-01ad02eaa5a7</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMr4AAVyBKi7DrBNCLrDs7rxsKXLbCIxELPkCX7+SAQczJMvuk0vtVvfp7qMj3XG0Dm2nxzlEgjBaydYh5U5u7WhxRB2GOOEORWvgjsDOtPc4duyq6aDjFq3iDjva3y0boGG2fL3ZtN70er2F9datb+qW79caFsbtNx9JV85jcCkXiIqOZptWQzdt3W7MLNsxb53abdW+bf3UKnOIuIwtXaqmdgCV8Y62EGLjGEaaptW0VmVRYNimaRl/Po6neAFrpHXv9hXliaLuwR9XPcAQhriK2dq4M0o+dx53piSgSMQRHHJ5n+UyDbNtSB+Pk+CbVuwFz6U+y5cDRBklGIVkh1R/HkEsmFfphQGLiFisPy3CMlVgHTKsY6tOv2lGGdqVgUoII450vkDWIdYr+BABxVD5/dXtaN+um1q+dRYhyn0WrXl5+d/wAE0gZBvwdH4s6wDt+oAXOtW9A+y4FIcxJwlMFFk3CAM/TBPw9aEqzxH4JBsTLgmacYXOOIV3ttx3Y0gC4OL/DOhkOPsgcxTG0DXSG7ZNnmOxFK3lm73LepPA/X67yozHTg7g1Dk3FKPdL89IWZBov+NpPmvfDCfBbtU3tkk0NPxNf/XYzHaZfz/ecrh5eVjs+q9NI3j1sfmjuUV9hgcY2FvCh9PRchns6s3GZPqQNVuzedpPm0k6v+cPLw+jl+Vq9LOJam6dLibzR2v19PPJ3KXRH8/vi1G67S9v2tjMWnZ2n+B3vvLjdiv1ssFz4C53s15sNqKJ+PHXAv8Yz+9/q4/dTlHOCf6y7Xjmp/HbErA4LhUN3GFlJKeExNdipizE0/3c1dko8eECqNC6apfSDieWckc8R85wvzZH39v120FtZPfMZq1tfTcbNbPRblsjs2fWB7WjyOxRnEEcMOoTlUtJ7p42XwPEa4cD9SDSExZLpePaFxGHSKCKS1/lIWCUw4xJebaABTzZpd7W30KwqJkrEkZEMl2rTJh4ok9RzxcQlTW5UdLkV8BkQ0AJt+I1l8TmQvbiHSWxCK1qgqoUYintkVJZx663GgYn600ICqmxZl4cQnWz2OSdMfj+a+sI89xKON6wSKAwP3OfVnf+79gI6eMR5cBVRX2Qw4QLV4x9LOfzslunZR/D92KPqOMluyoigvdIyr8+yKJYUjClqMs6Ii82nBtKwY3zuop8XkJwwfri7paSLkWge5zNO6q+V+MkifNpNE3TNiIZ3pCaZxlTwLHUqO2MrYAaRQjjqguhQH2WubCX8cViQacCCVhL7lTy5RUvgClw9QJwJemza58XpZSybwIycck2COXrRSH+8oGDHaz8pPlZflIWeR/juhDrJI+sUz4ABKGBWqnLYPsJNzCTYYmUMRadBr8U4FLysrFocoFFSDa9xQI+/1NR+tTREMYspsIdarnhVDNznGK7AefD6ZcwuSwX7zTy7w81neQUwCBfd5zk8dV16yj+0+BEdw9JL0tv2/5Kesvour+Yf7Wc9Omc491/AA==</con:value></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:0FE946C0F1982D22E05307991F0A5940</con:value></con:property><con:property><con:name>SAML1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMr4AAVyBKi7DrBNCLrDs7rxsKXLbCIxELPkCX7+SAQczJMvuk0vtVvfp7qMj3XG0Dm2nxzlEgjBaydYh5U5u7WhxRB2GOOEORWvgjsDOtPc4duyq6aDjFq3iDjva3y0boGG2fL3ZtN70er2F9datb+qW79caFsbtNx9JV85jcCkXiIqOZptWQzdt3W7MLNsxb53abdW+bf3UKnOIuIwtXaqmdgCV8Y62EGLjGEaaptW0VmVRYNimaRl/Po6neAFrpHXv9hXliaLuwR9XPcAQhriK2dq4M0o+dx53piSgSMQRHHJ5n+UyDbNtSB+Pk+CbVuwFz6U+y5cDRBklGIVkh1R/HkEsmFfphQGLiFisPy3CMlVgHTKsY6tOv2lGGdqVgUoII450vkDWIdYr+BABxVD5/dXtaN+um1q+dRYhyn0WrXl5+d/wAE0gZBvwdH4s6wDt+oAXOtW9A+y4FIcxJwlMFFk3CAM/TBPw9aEqzxH4JBsTLgmacYXOOIV3ttx3Y0gC4OL/DOhkOPsgcxTG0DXSG7ZNnmOxFK3lm73LepPA/X67yozHTg7g1Dk3FKPdL89IWZBov+NpPmvfDCfBbtU3tkk0NPxNf/XYzHaZfz/ecrh5eVjs+q9NI3j1sfmjuUV9hgcY2FvCh9PRchns6s3GZPqQNVuzedpPm0k6v+cPLw+jl+Vq9LOJam6dLibzR2v19PPJ3KXRH8/vi1G67S9v2tjMWnZ2n+B3vvLjdiv1ssFz4C53s15sNqKJ+PHXAv8Yz+9/q4/dTlHOCf6y7Xjmp/HbErA4LhUN3GFlJKeExNdipizE0/3c1dko8eECqNC6apfSDieWckc8R85wvzZH39v120FtZPfMZq1tfTcbNbPRblsjs2fWB7WjyOxRnEEcMOoTlUtJ7p42XwPEa4cD9SDSExZLpePaFxGHSKCKS1/lIWCUw4xJebaABTzZpd7W30KwqJkrEkZEMl2rTJh4ok9RzxcQlTW5UdLkV8BkQ0AJt+I1l8TmQvbiHSWxCK1qgqoUYintkVJZx663GgYn600ICqmxZl4cQnWz2OSdMfj+a+sI89xKON6wSKAwP3OfVnf+79gI6eMR5cBVRX2Qw4QLV4x9LOfzslunZR/D92KPqOMluyoigvdIyr8+yKJYUjClqMs6Ii82nBtKwY3zuop8XkJwwfri7paSLkWge5zNO6q+V+MkifNpNE3TNiIZ3pCaZxlTwLHUqO2MrYAaRQjjqguhQH2WubCX8cViQacCCVhL7lTy5RUvgClw9QJwJemza58XpZSybwIycck2COXrRSH+8oGDHaz8pPlZflIWeR/juhDrJI+sUz4ABKGBWqnLYPsJNzCTYYmUMRadBr8U4FLysrFocoFFSDa9xQI+/1NR+tTREMYspsIdarnhVDNznGK7AefD6ZcwuSwX7zTy7w81neQUwCBfd5zk8dV16yj+0+BEdw9JL0tv2/5Kesvour+Yf7Wc9Omc491/AA==</con:value></con:property><con:property><con:name>SAML2</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynmcMpYd33AFqhwbZkhCwm2S7LxsCVmAMrbsWDKQ+fqVDDiYkCy7Ty61W6ePultHfcVgEhuezxjOOUlpY5PElHmlta0UOfVSyAjzKEww8zjyJv7gzjOawIP7LUqjH7aVv3XTnTmOEam6PZ+pZmRZ6mxmIBXoMAIGhtCCjnBlrMB9yjikvK0YQLdUYKiGNdUND9iepTedFvilNB5xzgS2cGkCZUdqw9rKkvPM07T1et1cXzbTfKEZAOja8+BugpY4gUrnanuiMlDe2fmjZoQRjmPURGmiXWk1n6uIeROyoJAXOd7Fij6LBTTQ0oRPxMjiQqn24qhP52m5DCBNKUEwJn+gzM8A82UaNfx4keaEL5NPD6EDCaziDVKRbtILRatTOxOoxjBnUGVLqO+wxniOc0wRbvwc99vKxXlVK7dOc0jZPM0TVl/+Nz6YrnCcZjhS2f5YO2rnA57IVOcKI69PUVwwssL3slkziDDbVROj86EawxzPyeaOMNGgGybZaYf0jpbbbIRkgRn/PwU6KM4W5BHGBe4Uy9Hbdzh1Bze3N0+zh8Ums2epm9ANHLVLAofOpaEq7XZ51JRVE213zMPsO45v576tBb9jOyha3SQM7B/2MBgEd/5m+q1wB+GwNU2Rmd87EA7C3ktvMOo+jGYamT6HP+I0DK+NWwhvA+Jq66fpEGb3Y+KmTz+L2bf8KemjF38Srl9sfLPIwsfnRW+cY/Bq3bUsE/4eFX+s0dvafQAvP1avdvxwOR6Nlwm1nl/wNQzXi1/9m3s2dB7/alfHOeBft+3v/KSYvWDE90vZBv2w0RNVgvxrMZMWEqnz0tXLpPgwjilXOnKX1A6vEHJHIk/UcLsGvW7LtAPDD1zfCA2zC6xL4LRaeg/4Ld219yKzZXFEMUjpnMhYUnK3bfM1QZR4DNMI5+oqLYTSMeULxBBy2OjTsbgEKWV4mrYVx7YtU7/EqrjXhmrqpqO2TAuoRqQDODNM89LRlcZ9yh/oQ+7POc7r6mzV1HmMEckIlhIuO5yJFmdcZOUVrgoe680VbFJcCJHPpd56hulaGiNJFmPJWUvSqIhxM1tmZY40tv0aKkSstAYg6PbcLnCDMAic0O4CE8i8Akvk1wDX5aX89PjH//aZEj4RkQ5MHvQai2rjE2+QuT/lh2zYJ9+qPbxfRETeP5F2nhO0ZVL/9d5Nso2qVgrv/MlwT7ryPTbUcLXjI1WhohVB1Y2o3nUh90IgOvtqvcLma7NYrYqyPg4AhpYLeE3ooa5NMCqEfr1N09+YahWEdtZjUbE+ilzZ6/wKvqQTDjlORDc1yuUZ08EEMzkd9MWF2Jw7etRCirxxvOGnbEEsJhvJ+MvhB3lI+gnzUHzWaR69l+sE1kEccU4xHHBCF3IlH4q3T9oCpQKWCIlL80PwUwCngteNVZIrLlx006zg+PM/DaldbQUilBaU90OlNBzqacmTv2XYe3f6AFNKdjXDkX8f4lRStgDCYvJjpMSXT7En+58uDjR5F/SELJtC70LnsmWVsmxtZdm99vUqKTV2nQ/mj5aDPB33eOcf</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_82ee508f-771b-448c-86f0-1ff351cc9bfa</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_148b772d-16fb-4d55-bb2c-01ad02eaa5a7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_Portal</con:name><con:value>urn:dece:accountid:org:dece:0FE946C3F2927391E05305991F0A04C3</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL_Portal</con:name><con:value>urn:dece:userid:org:dece:0FE946C3F2A07391E05305991F0A04C3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_Dlasp</con:name><con:value>urn:dece:accountid:org:dece:0FE946C4665D7395E05305991F0A8BA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL_Dlasp</con:name><con:value>urn:dece:userid:org:dece:0FE946C2AC8A2D24E05307991F0A9186</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f46e607c-fa25-4c26-99a4-674ef222dfbc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c53b7087-1f81-4603-a2b3-557b93643309</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e073849c-6d29-4794-ac4d-6bc3b0e8b70e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dcebc8af-61c3-4241-acd9-08be64acc773</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5622ee10-c129-457e-aa70-acff63327605</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Scenario5-DTCreate_with_affiliated_nodes-with_ULC_for_main_node_and_Request_ULC_only_for_one_affiliated_node" searchProperties="true" id="0cbc439f-3e8c-4282-b232-6439ac7a1bff">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="06b9f3c2-b819-4e46-bde1-681f94879dcc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("USER_OID",null);
tC.setPropertyValue("ACCOUNT_OID",null);

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("PrimaryEmail","test_"+System.currentTimeMillis()+"@uvvutesting.biz");
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("responseType",tP.getPropertyValue("responseType_DTC"));
tC.setPropertyValue("tokenType",tP.getPropertyValue("tokenType_DTC"));
tC.setPropertyValue("audienceList",null);
tC.setPropertyValue("affiliationList",null);
tC.setPropertyValue("policyList", "");
tC.setPropertyValue("expectErrType", "SUCCESS");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));
tC.setPropertyValue("audienceIgnoreAll", null);
tC.setPropertyValue("audienceList", null);
</script></con:config></con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="ce792103-375c-4448-9053-d81fc48d6e2e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="33bf89cd-d4af-461a-b9be-a72411dee46a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="02b62996-b29b-4a01-9d7d-4628c965ce12"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver");
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("USER_OID", u);
		tC.setPropertyValue("ACCOUNT_OID", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Invocation to Coordinator" id="19133556-8c38-4773-b326-3f008ab5ea35">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("audiencelist","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("assertionUUID1",tC.getPropertyValue("assertionUUID"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get Invocation to Coordinator" id="c003cf37-c369-4153-935a-115f7b34f996">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def sAML = context.expand( '${#TestCase#SAML}');

tC.setPropertyValue("SAML1",tC.getPropertyValue("SAML"));

tC.setPropertyValue("NODE_ACCOUNT_ID_FULL_RTL", tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL_RTL",tC.getPropertyValue("NODE_USER_ID_FULL"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call TOU Policy Create" id="b783d13f-eeee-4102-be29-5a0f77bda528">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy Create" id="0a45f6b7-98c1-4a8f-82fd-22b665154c80"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC_Single_Node")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy Create for one of the audience node - DLASP" id="4e324ffd-7b7f-488b-85eb-ee1570c40bae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdDLASP"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC_Single_Node")


myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy GET for DLASP" id="16381ed4-c4d5-4c2d-8ae4-d25dfd5747a9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("policyID_before_DTC",tC.getPropertyValue("PolicyID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy GET for Retailer" id="55c15daf-f4dc-4e92-9d23-04aac28dbf5b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));
//tC.setPropertyValue("SAML",tC.getPropertyValue("SAML1"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("policyID_before_DTC",tC.getPropertyValue("PolicyID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Entity and Affiliate Node Settings" id="dc0e5898-2fb0-4ea9-b7ef-9877d924ba99"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("audienceList","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidDLASP"));
tC.setPropertyValue("affiliationList","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DelegationTokenCreate" id="0092ded5-e0db-40ea-9cc0-478cf745b007">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DelegationTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("assertionUUID2",tC.getPropertyValue("assertionUUID"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="d3478b64-7ceb-4c62-a1b1-4f3ab8ffb45a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STSGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML2",tC.getPropertyValue("SAML"));

tC.setPropertyValue("NODE_ACCOUNT_ID_FULL_Dlasp", tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL_Dlasp",tC.getPropertyValue("NODE_USER_ID_FULL"));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call ULC Policy GET by DLASP" id="2bbc7969-194a-4fec-8744-de682c4c3558"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("SAML",tC.getPropertyValue("SAML2"));
tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdDLASP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call ULC Policy GET by RTL" id="dadc1f48-55c7-4cc5-8b0d-376c69789127"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML1"));
tC.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeIdRTL"));

tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", tC.getPropertyValue("NODE_ACCOUNT_ID_FULL_RTL"));
tC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL_RTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyGet")
tC.setPropertyValue("POLICY_CLASS","UserLinkConsent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )
assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>ACCOUNT_OID</con:name><con:value>0FE946F1DF517387E05305991F0A33F8</con:value></con:property><con:property><con:name>affiliationList</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:RET;urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_2f1360c0-4ea4-4c37-a9c0-b51dd853bcbd</con:value></con:property><con:property><con:name>audienceList</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0FE946F1DF507387E05305991F0A33F8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0FE946F1DF507387E05305991F0A33F8</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0FE946C2A7092D24E05307991F0A9186</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0FE946C2A7092D24E05307991F0A9186</con:value></con:property><con:property><con:name>policyList</con:name><con:value/></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_1424865891101@uvvutesting.biz</con:value></con:property><con:property><con:name>responseType</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb/I4EP0rKH2sQi4QQqKCRAuoWVGogI+2vKyMM4BpcILtcOmvXztACvSy7D5FMxnPnLn4eO44Wka23+AcmCAxLWyXEeV+pq1pKaN+jDjhPkVL4L7A/qDx1PHtoumj4xGtEDRr2t+Vqe1NbKekV61qRS87HuhV257oJXdaCT3klEvgSFPOUwgoF4iKmmablqObtm47Q8v2Tdu33aJdcsdaYQSMS9/SpGhqB1BbXtPmQiS+YWw2m+KmVIzZzLBN0zJenzoDPIcl0up3+4yyQKx+sMfFEDBEES7ieGncGWc2dyH3B2RGkUgZHGKFP8UyDdMzpE3IyexGy89CGNBpnIkPiMaUYBSRD6Tq8wRiHoeFRjSLGRHz5Y9JWKZyrMMW69gq0xvNOId2paMzhIwjnc+RdfDVhykwoBgKf/pBTbu5rmvZ0SFDlE9jtuTn4n/DA3QNUZxAqPNjWgdo1zv8plL1O8B+QHGUcrKGrhrWBGHgh24Cvt5V4ZnBlGw7hMsB3XKFzjiFdyHuq9EkM+Di/zTopDl7JyMUpVAfdy3jLbldxbfB/ToatjedSflj8RGM34NaBuDUOFPkrd2LF0OZD9H+xBMS2LvvJOPd22v88QETY3Hbas3nL38l8Xa+6dHHVsTfIvYWvT56qLX7WLV7/U5v5j6MmGB8iWcT0y09LeC23R1t30f98p9Sq/tSab5BpRemL167NSl3gnQ4XrgW621uWXe4okmn6jbJy9zcrEabcNS3cHXktNxBOXla9HilPEinfTRsjZ/Tx97rc3vwOu7uqrU8nRP857rjnR+kkwVgcRTVGATNQlt2CYnfyUxpSKhPM1M/UeTDBVCh1dUpxR1+KumOhL7s4V422y2vXHmwG67p2U273DKdkul6ntU2G568TEeS2aO4gPgQ0ylRsRTl7sfmd4B46XOgITB9HaeS6bj2i8cmEqgQ0L68BDHlMIwlPVvI2y1WbrKYlkPHQvFsuwXkuNaaa4VuLHq0xxpTAeyclJ0zUu4DJgkBxdxqsLmcbC5kMVZonYrIKq5RkUIquZ0pmvXtctUxOFkmESioxjIO0wiKyTzJSmPw/dfWEeaZtt8aZtftx8Qu/x1rIG1Cogy4yuUeZB/hm9fFOibyc8LV04SP7htpSNTNkgUVjOA9kvNfn3OiBiQfkmanMXg+gs5trzsrq/H1pPELIuOyGHmgcE1Owh4fbvkESNKoH1u5QsVVMV2v06x5rmnaBpPuDcmRljEAnEpO2w3jd6BG7sK46gHJUV9EzvXn+FIxpwOBBCzlqBUy8YqNYQBcbQyBvCTba9eRs5CybgK24jvdQyS3HYX414UI+1jZSfWz/GxiFn626xtfJ3FknnJhEITOlKQej90PQ4Fj6ZZI2ovZqfPvHHwX/FyZFznHIuQ0TVIBP/8pKD6raQjjOKUiaGqZ4pRjM5xil4D/afTFTUbj+V5H/n2x00k2AhjkNshJ5l89z76afzo74elD0K9U3baabUe+WlU3o2pnT9WlUruaF+UMXf2L+qvmpE6XM17/Bw==</con:value></con:property><con:property><con:name>tokenType</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>Username</con:name><con:value>dtcapi_107_1424865893269</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>USER_OID</con:name><con:value>0FE946C2A70A2D24E05307991F0A9186</con:value></con:property><con:property><con:name>audienceIgnoreAll</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>POLICY_CLASS</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:0FE946C0ED972D22E05307991F0A5940</con:value></con:property><con:property><con:name>policyID_before_DTC</con:name><con:value>urn:dece:policyid:org:dece:0FE9466B56332D1EE05307991F0A53B4</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_6f29b253-8186-459e-822b-37f6d9a543e5</con:value></con:property><con:property><con:name>SAML1</con:name><con:value>SAML2 Assertion=nVZbb/I4EP0rKH2sQi4QQqKCRAuoWVGogI+2vKyMM4BpcILtcOmvXztACvSy7D5FMxnPnLn4eO44Wka23+AcmCAxLWyXEeV+pq1pKaN+jDjhPkVL4L7A/qDx1PHtoumj4xGtEDRr2t+Vqe1NbKekV61qRS87HuhV257oJXdaCT3klEvgSFPOUwgoF4iKmmablqObtm47Q8v2Tdu33aJdcsdaYQSMS9/SpGhqB1BbXtPmQiS+YWw2m+KmVIzZzLBN0zJenzoDPIcl0up3+4yyQKx+sMfFEDBEES7ieGncGWc2dyH3B2RGkUgZHGKFP8UyDdMzpE3IyexGy89CGNBpnIkPiMaUYBSRD6Tq8wRiHoeFRjSLGRHz5Y9JWKZyrMMW69gq0xvNOId2paMzhIwjnc+RdfDVhykwoBgKf/pBTbu5rmvZ0SFDlE9jtuTn4n/DA3QNUZxAqPNjWgdo1zv8plL1O8B+QHGUcrKGrhrWBGHgh24Cvt5V4ZnBlGw7hMsB3XKFzjiFdyHuq9EkM+Di/zTopDl7JyMUpVAfdy3jLbldxbfB/ToatjedSflj8RGM34NaBuDUOFPkrd2LF0OZD9H+xBMS2LvvJOPd22v88QETY3Hbas3nL38l8Xa+6dHHVsTfIvYWvT56qLX7WLV7/U5v5j6MmGB8iWcT0y09LeC23R1t30f98p9Sq/tSab5BpRemL167NSl3gnQ4XrgW621uWXe4okmn6jbJy9zcrEabcNS3cHXktNxBOXla9HilPEinfTRsjZ/Tx97rc3vwOu7uqrU8nRP857rjnR+kkwVgcRTVGATNQlt2CYnfyUxpSKhPM1M/UeTDBVCh1dUpxR1+KumOhL7s4V422y2vXHmwG67p2U273DKdkul6ntU2G568TEeS2aO4gPgQ0ylRsRTl7sfmd4B46XOgITB9HaeS6bj2i8cmEqgQ0L68BDHlMIwlPVvI2y1WbrKYlkPHQvFsuwXkuNaaa4VuLHq0xxpTAeyclJ0zUu4DJgkBxdxqsLmcbC5kMVZonYrIKq5RkUIquZ0pmvXtctUxOFkmESioxjIO0wiKyTzJSmPw/dfWEeaZtt8aZtftx8Qu/x1rIG1Cogy4yuUeZB/hm9fFOibyc8LV04SP7htpSNTNkgUVjOA9kvNfn3OiBiQfkmanMXg+gs5trzsrq/H1pPELIuOyGHmgcE1Owh4fbvkESNKoH1u5QsVVMV2v06x5rmnaBpPuDcmRljEAnEpO2w3jd6BG7sK46gHJUV9EzvXn+FIxpwOBBCzlqBUy8YqNYQBcbQyBvCTba9eRs5CybgK24jvdQyS3HYX414UI+1jZSfWz/GxiFn626xtfJ3FknnJhEITOlKQej90PQ4Fj6ZZI2ovZqfPvHHwX/FyZFznHIuQ0TVIBP/8pKD6raQjjOKUiaGqZ4pRjM5xil4D/afTFTUbj+V5H/n2x00k2AhjkNshJ5l89z76afzo74elD0K9U3baabUe+WlU3o2pnT9WlUruaF+UMXf2L+qvmpE6XM17/Bw==</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_2f1360c0-4ea4-4c37-a9c0-b51dd853bcbd</con:value></con:property><con:property><con:name>SAML2</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvO4ZSzLNr5UoIpwSTkhmQQYkszLlpAFaGIksGQg8/UrGfAAIVl2n1zdbnWfvuiorwSapzBqCkEySTmrbOYpE1GhrRt5xiKOBBURQ3MiIomjQfO+F8EqiND+iFGJ23XjbzixnRrAwHQJck0XO76JQiWOPTtJAs8Z43GiTIXIScyEREzWDQhszwTQhN7QhhGAkRtUwyD8aVRGJBPKtzKpAmMHaiPqxkzKRWRZ6/W6unaqPJtaEADbernvDfCMzJHRuNpmVATKGjt7XE0IJmmKq5jPrSvryOYqEdGAThmSeUZ2sZLPYgELhJaySQSdfjPKsySJ2YQXYgsxzihGKf2NdH3uiZzxpNJMpzyjcjb/NAkbaMcm2WAT2y77ZljH0C50dIQwE8gUM2TvfPXJhGSEYVL50Y/rxrfLulYcHWaIiQnP5uJY/G94CFuRlC9IYop9Wjtolzs8U6nGFcFRzHCaC7oiD3pYFwgTsesmwZe7qjxmZEI3PSrUgG6ERmcdwjsRt9Vo0ykR8v806KA5WycjlOakYfW9m9ZjJ7sdOPe1Wn/A7+VDN6Q3T/dxvQBwaFwoytZuxZOhLIdoe2L4HL9ePwybN82W691Mm9e/6M92sGrBMXla3Ny93Cwx/HHbC4UT//BkfI3DYU8my2duP1n2CKbiZfoum3ed9+kzXy7h69uDT4aw/6u7Djr+Ox4Ft/3xuDnlk9fe6KGVDqTly9Vf5GUZzm3+dnfXa8Om78ejLuqga3fVC/IX9jZc4za3b5evz6O1nUA6+PliPT3Vy3QO8B/r9nd+kI9/ESz3oh6DuF3pqi4h+TWZaQ1NzElhGi00+QhJmDQa+pTmjihXdEeTSPVwK4NuJ3RrLZUHCGEbuh3gOcAPQ7sLmqEd1PYks0VxArHF2YTqWJpyt2PzNUA8jwRhCcnMFc8V0wnjC49tJFElZn11CTgTZMjrxtiBvj/GnunYMDDdBEEzcFzHnHjQT2r+xHPs0Kg8cPmdfc+aE0myY3b2jti5TzBdUKIpXE+4UCMupKrKEq1ymdrVFaoykiuSzzTfRtANPEvQ+SIlGrM150mekupitihqZIntF5oIi0LbAq1ON+iAoNWxW3671gEu0HUFnqovBNfFpfw0/dN/+0opm4RqA6ETvSaq2+TMG+Tss/xQjdrZt2rvvpknVN8/VXaZUbxFcvzrzzTpMSpHqd1rDh73oEvby872O8OPJ60vEFmnxSgDJSt6EHb/vKuHQlFLY9/nJaouq/lqlRed9QGAVqbcW4pJbWtAcK6Y733I3wizShfWRc9Mifokcqk/xpfLGRtIJMlczWGlEC/YKwZE6L0iVldpc+nSchRS1U2SjTyna6VqJ9KIv1ybcIS1nVI/qs+aZ38SP+frII7KU60VkrKplvQT8/7JUGCu3FJFjjw7dH7Owbngx8qyyCUWqaZpnEvy+Z+KZr26gTDmOZNx2ygUh0xc4JTvCxL9MfrgpiD7cvuj/77+mbQYAUzUziho4V8/4pGefzY9YPNd0I+E3rXbXQ/4TuAXhO5tCd1xukFZlCN0jQ/qj5qDOp3OeOMf</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_Dlasp</con:name><con:value>urn:dece:accountid:org:dece:0FE946F1DF507387E05305991F0A33F8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL_Dlasp</con:name><con:value>urn:dece:userid:org:dece:0FE946C2A7092D24E05307991F0A9186</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:0FE946F1DF507387E05305991F0A33F8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL_RTL</con:name><con:value>urn:dece:userid:org:dece:0FE946C2A7092D24E05307991F0A9186</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fd52c9d3-8b99-4e90-9f6d-19ff5efc5448</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>573a939d-9280-452f-a9aa-d7f9e0039d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5333a278-be73-4359-bedb-c61a53c2ddc2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd25acbd-9c65-4451-b94d-9ab4c4cf123d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0efa8efd-6738-4fff-9054-d8447278fc7b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0a622995-fef9-4acc-8033-57cc0a0d350b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5cc06329-e1c4-4b5a-99f9-4517460d0342</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4e324ffd-7b7f-488b-85eb-ee1570c40bae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:endpointStrategy xsi:type="con:DefaultEndpointStrategy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:endpoint mode="OVERRIDE">https://qa.p.uvvu.com:7001/${#TestCase#endPoint}</con:endpoint></con:endpointStrategy><con:requirements/><con:properties><con:property><con:name>AccountCountry</con:name><con:value>US</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_237864210.txt</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>APID</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt%3A878916240</con:value></con:property><con:property><con:name>audienceIgnoreNodes</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>Batch_HostName</con:name><con:value>https://qa1.b.uvvu.com</con:value></con:property><con:property><con:name>cacheDuration</con:name><con:value>86400</con:value></con:property><con:property><con:name>CertMatchesNodeID</con:name><con:value>YES</con:value></con:property><con:property><con:name>CertMatchesNodeName</con:name><con:value>YES</con:value></con:property><con:property><con:name>certsPath_Linux</con:name><con:value>../../Certs/QALP1/</con:value></con:property><con:property><con:name>certsPath_Windows</con:name><con:value>../../Certs/QALP1/</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_740255950.txt</con:value></con:property><con:property><con:name>clusterNumber</con:name><con:value>1</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_02</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_06</con:name><con:value>http://www.decellc.org/schema/2012/12/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_07</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_11</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_21</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coords</con:name><con:value>FALKY,COORD-10000,COORD-3034,COORD-2999,COORD-2509,COORD-627,UV-135,UV-340,Coord-2180</con:value></con:property><con:property><con:name>DBIdentifier</con:name><con:value>LP1</con:value></con:property><con:property><con:name>DBPassword</con:name><con:value>lp1db_23</con:value></con:property><con:property><con:name>DBUsername</con:name><con:value>DEQA1_APP</con:value></con:property><con:property><con:name>Device_HostName</con:name><con:value>https://qa.d.uvvu.com</con:value></con:property><con:property><con:name>disablePriority</con:name><con:value>P3,CHILD,CLG</con:value></con:property><con:property><con:name>DMR_ALID</con:name><con:value>urn:dece:alid:org:200002</con:value></con:property><con:property><con:name>DMR_APID</con:name><con:value>urn:dece:apid:org:200002</con:value></con:property><con:property><con:name>DMR_BID</con:name><con:value>urn:dece:bid:org:200002</con:value></con:property><con:property><con:name>DMR_CID</con:name><con:value>urn:dece:cid:org:200002</con:value></con:property><con:property><con:name>enableFlakyScript</con:name><con:value>false</con:value></con:property><con:property><con:name>enablePriority</con:name><con:value>true</con:value></con:property><con:property><con:name>enablePriorityScript</con:name><con:value>false</con:value></con:property><con:property><con:name>ENV</con:name><con:value>QALP1</con:value></con:property><con:property><con:name>envIdentifier</con:name><con:value>LP1</con:value></con:property><con:property><con:name>ExecutionPriority</con:name><con:value>P3,CHILD,CLG</con:value></con:property><con:property><con:name>expectHoursDiffActiveDECE:CS</con:name><con:value>24</con:value></con:property><con:property><con:name>expectHoursDiffActiveLLASP</con:name><con:value>87648</con:value></con:property><con:property><con:name>expectHoursDiffActiveNoUserLinkConsent</con:name><con:value>6</con:value></con:property><con:property><con:name>expectHoursDiffActiveOthers</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectHoursDiffBlockedTou</con:name><con:value>6</con:value></con:property><con:property><con:name>expectHoursDiffDeviceActive</con:name><con:value>87648</con:value></con:property><con:property><con:name>expectHoursDiffPending</con:name><con:value>6</con:value></con:property><con:property><con:name>JDBCConnStr</con:name><con:value>jdbc:oracle:thin:@stdeqp-clu2-scan.va.neustar.com:2115/stdecqa.neustar.com</con:value></con:property><con:property><con:name>JKSAliasName</con:name><con:value>qalp1</con:value></con:property><con:property><con:name>JKSPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>LBS_Provision_HostName</con:name><con:value>https://UvCoordActiveActiveQALP3-1060918058.us-west-2.elb.amazonaws.com:7003</con:value></con:property><con:property><con:name>linkLASPNodeAffiliationLLASP</con:name><con:value/></con:property><con:property><con:name>maxUserName</con:name><con:value>64</con:value></con:property><con:property><con:name>minUserName</con:name><con:value>6</con:value></con:property><con:property><con:name>nodeAffiliationACSPTL</con:name><con:value>ACCESS,RET,DLASP</con:value></con:property><con:property><con:name>nodeAffiliationDECECS</con:name><con:value/></con:property><con:property><con:name>nodeAffiliationDLASP</con:name><con:value>DLASP,RET,LLASP</con:value></con:property><con:property><con:name>nodeAffiliationIgnoreAllNode</con:name><con:value>RET;RET_2</con:value></con:property><con:property><con:name>nodeAffiliationIgnoreNode</con:name><con:value>RET;LLASP;RET_2</con:value></con:property><con:property><con:name>nodeAffiliationLLASP</con:name><con:value>LLASP,RET,DLASP</con:value></con:property><con:property><con:name>nodeAffiliationRTL</con:name><con:value>RET,LLASP,DLASP</con:value></con:property><con:property><con:name>nodeAffiliationRTL1</con:name><con:value>RET,LLASP</con:value></con:property><con:property><con:name>nodeAffiliationRTL_CON</con:name><con:value>RET,CON</con:value></con:property><con:property><con:name>nodeAffiliationRTL_CON:CS</con:name><con:value>RET,CON_CS_1</con:value></con:property><con:property><con:name>nodeAffiliationRTL_DSP</con:name><con:value>RET,DSP</con:value></con:property><con:property><con:name>nodeAffiliationRTL_DSP:CS</con:name><con:value>RET,DSP_CS_1</con:value></con:property><con:property><con:name>nodeAffiliationRTL_llasp</con:name><con:value>RET;DLASP;LLASP</con:value></con:property><con:property><con:name>nodeDeviceDefault</con:name><con:value>0200</con:value></con:property><con:property><con:name>nodeEntityAffilatedNodes</con:name><con:value/></con:property><con:property><con:name>nodeIdAccportal</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>nodeIdAccportal2</con:name><con:value>ACCESS_2</con:value></con:property><con:property><con:name>nodeIdAccportalCS</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>nodeIdAccportalCS2</con:name><con:value>ACCESSCS_2</con:value></con:property><con:property><con:name>nodeIdCON</con:name><con:value>CON</con:value></con:property><con:property><con:name>nodeIdCON2</con:name><con:value>CON_2</con:value></con:property><con:property><con:name>nodeIdCONCS</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>nodeIdCONCS2</con:name><con:value>CON_CS_2</con:value></con:property><con:property><con:name>nodeIdCoo</con:name><con:value>COO</con:value></con:property><con:property><con:name>nodeIdCoo2</con:name><con:value>COO_2</con:value></con:property><con:property><con:name>nodeIdCoordCS</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>nodeIdCoordCS2</con:name><con:value>COO_CS_1</con:value></con:property><con:property><con:name>nodeIdDECE</con:name><con:value>DECE</con:value></con:property><con:property><con:name>nodeIdDECECS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>nodeIdDECEDomainManager</con:name><con:value/></con:property><con:property><con:name>nodeIdDEV</con:name><con:value>DEV</con:value></con:property><con:property><con:name>nodeIdDEV2</con:name><con:value>DEV_2</con:value></con:property><con:property><con:name>nodeIdDEVCS2</con:name><con:value>DEV_CS_2</con:value></con:property><con:property><con:name>nodeIdDLASP</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeIdDLASP2</con:name><con:value>DLASP_2</con:value></con:property><con:property><con:name>nodeIdDLASPCS</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdDLASPCS2</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdDSP</con:name><con:value>DSP</con:value></con:property><con:property><con:name>nodeIdDSP2</con:name><con:value>DSP_2</con:value></con:property><con:property><con:name>nodeIdDSPCS</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>nodeIdDSPCS2</con:name><con:value>DSP_CS_2</con:value></con:property><con:property><con:name>nodeIdLLASP</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeIdLLASP2</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>nodeIdLLASPCS</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdLLASPCS2</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdNotProvisioned</con:name><con:value>notprovisioned</con:value></con:property><con:property><con:name>nodeIdportal</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdportal2</con:name><con:value/></con:property><con:property><con:name>nodeIdportalCS</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdportalCS2</con:name><con:value/></con:property><con:property><con:name>nodeIdRTL</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdRTL2</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>nodeIdRTLCS</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdRTLCS2</con:name><con:value>RET_CS_2</con:value></con:property><con:property><con:name>nodeIdTest</con:name><con:value>0799</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>OrgID</con:name><con:value>ISC_R1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:13BC58846BFA5DE7E05305991F0A40A4</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>Provision_HostName</con:name><con:value>https://qa1.p.uvvu.com</con:value></con:property><con:property><con:name>P_Provision_HostName</con:name><con:value>https://qa.p.uvvu.com:7003</con:value></con:property><con:property><con:name>Query_HostName</con:name><con:value>https://qa1.q.uvvu.com</con:value></con:property><con:property><con:name>Query_HostNameForProxy</con:name><con:value>https://uvqa-proxycache-elb-2009492071.us-west-2.elb.amazonaws.com:8001</con:value></con:property><con:property><con:name>responseType_DTC</con:name><con:value>urn:dece:type:tokenprofile:saml2</con:value></con:property><con:property><con:name>Rights_ALID</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_233695895.txt</con:value></con:property><con:property><con:name>Rights_APID</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt%3A828402846</con:value></con:property><con:property><con:name>Rights_CID</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_196237681.txt</con:value></con:property><con:property><con:name>runTeardown</con:name><con:value>false</con:value></con:property><con:property><con:name>samlAuthenticatingAuthority</con:name><con:value>urn:dece:org:org:dece:coordinator</con:value></con:property><con:property><con:name>samlIssuer</con:name><con:value>http://c.decellc.com/</con:value></con:property><con:property><con:name>scriptsPath_Linux</con:name><con:value>../../GlobalScripts</con:value></con:property><con:property><con:name>scriptsPath_Windows</con:name><con:value>../../GlobalScripts</con:value></con:property><con:property><con:name>StreamHandleID</con:name><con:value>urn:dece:streamhandleid:org:dece:D3CD9D93C110059998E0401F0A07992FB8</con:value></con:property><con:property><con:name>Streams_ALID</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_368915851.txt</con:value></con:property><con:property><con:name>Streams_APID</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt%3A487811501</con:value></con:property><con:property><con:name>Streams_CID</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_596034053.txt</con:value></con:property><con:property><con:name>targerHostd</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targetDeviceDomain</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targetHost</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostB</con:name><con:value>qa1.b.uvvu.com</con:value></con:property><con:property><con:name>targetHostC</con:name><con:value>qa1.c.uvvu.com</con:value></con:property><con:property><con:name>targetHostd</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targetHostP</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostq</con:name><con:value>qa1.q.uvvu.com</con:value></con:property><con:property><con:name>targetHostS</con:name><con:value>qa1.s.uvvu.com</con:value></con:property><con:property><con:name>targetPort</con:name><con:value>443</con:value></con:property><con:property><con:name>targetPortd</con:name><con:value>7001</con:value></con:property><con:property><con:name>targetPortq</con:name><con:value>443</con:value></con:property><con:property><con:name>targetSystem</con:name><con:value>LP1</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa1.p.uvvu.com:443</con:value></con:property><con:property><con:name>targetUrlSHost</con:name><con:value>qa1.s.uvvu.com</con:value></con:property><con:property><con:name>tokenType_DTC</con:name><con:value>urn:dece:type:token:DelegationTokenRequest:VerifiedEmail</con:value></con:property><con:property><con:name>tokenType_DTC1</con:name><con:value>urn:dece:type:token:DelegationTokenRequest</con:value></con:property><con:property><con:name>TOUPolicyResource</con:name><con:value>https://qa1.c.uvvu.com/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20140811/html</con:value></con:property><con:property><con:name>TOUUrl</con:name><con:value>qa1.c.uvvu.com</con:value></con:property><con:property><con:name>TOUUrl_06</con:name><con:value>lp2.dev.uvvu.com</con:value></con:property><con:property><con:name>URLEncode</con:name><con:value>NO</con:value></con:property><con:property><con:name>TOUUrl_07</con:name><con:value>lp2.dev.c.uvvu.com</con:value></con:property><con:property><con:name>urnNode</con:name><con:value>urn:dece:org:org:dece:</con:value></con:property><con:property><con:name>nodeIdDEVCS</con:name><con:value>DEV_CS_1</con:value></con:property><con:property><con:name>nodeIdDEVCS</con:name><con:value>DEV_CS_1</con:value></con:property><con:property><con:name>urnaccount</con:name><con:value>urn:dece:accountid:org:dece:</con:value></con:property><con:property><con:name>urnError</con:name><con:value>urn:dece:errorid:org:dece:</con:value></con:property><con:property><con:name>urnRightsToken</con:name><con:value>urn:dece:rightstokenid:org:dece:</con:value></con:property><con:property><con:name>urnstream</con:name><con:value>urn:dece:streamhandleid:org:dece:</con:value></con:property><con:property><con:name>urntokenType_deviceauthtoken</con:name><con:value>urn:dece:type:tokentype:DeviceAuthToken</con:value></con:property><con:property><con:name>urntokenType_saml</con:name><con:value>urn:dece:type:tokentype:saml2</con:value></con:property><con:property><con:name>urntokenType_userpassword</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>userStatus</con:name><con:value>urn:dece:type:status:suspended</con:value></con:property><con:property><con:name>versionMajor</con:name><con:value>1</con:value></con:property><con:property><con:name>versionMinor</con:name><con:value>11</con:value></con:property><con:property><con:name>versionURLEncode</con:name><con:value>06</con:value></con:property><con:property><con:name>ï»¿CID</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_729880294.txt</con:value></con:property><con:property><con:name>expectHTTPcontenttype</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>FLAKYSELECTOR</con:name><con:value>without_flaky</con:value></con:property></con:properties><con:wssContainer><con:crypto><con:source>C:/certs/truststore-qauvconnect.jks</con:source><con:password>testing</con:password><con:type>KEYSTORE</con:type></con:crypto></con:wssContainer><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:parameters/></con:reporting><con:eventHandlers type="TestRunListener.afterStep" name="TestRunListener.afterStep"><con:script>if(testStepResult.getTestStep().config.type.toString() == "restrequest")
{
	byte [] tempByteArrRequest = testStepResult.getRawRequestData();
	String tempRequest = new String(tempByteArrRequest);

	log.info("-----------------------------&lt;" + testStepResult.getTestStep().getName() + " Request>--------------------------------");
	log.info(tempRequest);
	log.info("-----------------------------&lt;/" + testStepResult.getTestStep().getName() + " Request>--------------------------------");

	byte [] tempByteArrResponse = testStepResult.getRawResponseData();
	String tempResponse = new String(tempByteArrResponse);


	log.info("-----------------------------&lt;" + testStepResult.getTestStep().getName() + " Response>--------------------------------");
	log.info(tempResponse);
	log.info("-----------------------------&lt;/" + testStepResult.getTestStep().getName() + " Response>--------------------------------");
}</con:script></con:eventHandlers><con:eventHandlers type="TestSuiteRunListener.beforeTestCase" name="TestSuiteRunListener.beforeTestCase"><con:script>log.info("################################################################################");</con:script></con:eventHandlers><con:sensitiveInformation/></con:soapui-project>