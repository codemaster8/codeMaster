<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="STSAPI_Device_TCs_R6_LP1" resourceRoot="${projectDir}" soapui-version="4.6.1" abortOnError="true" defaultScriptLanguage="Groovy" activeEnvironment="Default" id="0a9a427e-d727-4430-a514-b81630722cd2" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value="/opt/dece/applications/soapui-pro-4.5.1/bin"/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="true"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="/opt/dece/Reports/4.0/107/STSAPI_Device_TCs_R4"/>
  <con:entry key="Save After" value="true"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">/opt/dece/Reports/3.4.1/R3/STSAPI_Device_TCs_R3</con:setting></con:settings><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Account" type="rest" id="8252ba06-b20f-4a82-a0b6-fd7f3523ede0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Device_HostName}</con:endpoint></con:endpoints><con:resource name="AccountCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" id="ed70a636-717d-4786-b6de-deabd446719b"><con:settings/><con:parameters/><con:method name="AccountCreate" method="POST" id="09857898-3271-43d8-a451-d5bf44ce4858"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400 500</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 500 405 403 503</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#coordinatorSchema}">proj:Account</con:element></con:representation><con:request name="AccountCreate" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" sslKeystore="80080010.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="AccountGET" method="GET" id="09857898-3271-43d8-a451-d5bf44ce4858"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201 303 200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400 500 401</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 500 405 403</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AccountGET_BasicAuth" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" sslKeystore="500500.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:username>${#Project#UserName}</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="AccountGET_SAML" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" sslKeystore="500500.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:username/><con:password/><con:domain/></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Account" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" id="bda852c0-5ccd-41d2-911c-bdec0459e462"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="AccountGet" method="GET" id="5cccdc43-2b89-4e8c-88a3-390b7ef3f239"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 401 400</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AccountGet" mediaType="application/xml;charset=UTF-8" sslKeystore="500500.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request><con:request name="AccountGet_BasicAuth" mediaType="application/xml;charset=UTF-8" sslKeystore="500580.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:username>${#Project#UserName}</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="AB1E09D1A009474DE0401F0A07995BBC" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountDelete" method="DELETE" id="3dd5e135-f342-47db-9631-1bec111dba45"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" sslKeystore="80080010.pem" id="7e19750b-606f-4d7d-bda7-cfa0c9074a64"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountUpdate" method="PUT" id="5cccdc43-2b89-4e8c-88a3-390b7ef3f239"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AccountUpdate" mediaType="application/xml;charset=UTF-8" sslKeystore="80080010.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="FirstUserCreate" type="rest" id="63e68881-a234-4670-82d0-16b5421c30a4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="FirstUserCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" id="9ed9c404-b207-4c25-a786-7bd711105b44"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="UserAPI" path="/{UserID}" id="8c72fe92-42e8-4bcc-bfc3-29cb8a3ca9cb"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value>UserID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>UserID</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:resource name="User_StatusUpdate" path="/ResourceStatus/Current/Update" id="b0f04600-c6bc-42f8-b382-bdb9ef258eee"><con:settings/><con:parameters/><con:method name="UserStatusUpdate" method="PUT" id="5e4818b9-48a0-429e-aa1a-3379298d12be"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ResourceStatus</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>303</con:status><con:params/></con:representation><con:request name="UserStatusUpdate" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="ae263fb2-2f71-4002-b6e4-7831863b5d6f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#NODEACCID}"/>
  <con:entry key="UserID" value="${#Project#NODEUSERID}"/>
</con:parameters></con:request></con:method></con:resource><con:method name="UserGet" method="GET" id="55de7616-71c0-4cac-bade-e9aa4166e711"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:User</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserGet" mediaType="application/xml;charset=UTF-8" id="86860311-fe06-418d-9e53-0c4d81aa0896" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserList" path="/List" id="16a08242-2ac7-42a8-b9c6-ca954b9794d4"><con:settings/><con:parameters/><con:method name="UserList" method="GET" id="e58e8f42-4a16-498a-86e7-a405a0125794"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:UserList</con:element></con:representation><con:request name="UserList" mediaType="application/xml;charset=UTF-8" id="869ab87f-d5fa-4e59-8a29-1bca986023a1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:method name="FirstUserCreate" method="POST" id="557bc5f3-c2ce-4146-81fc-71cdc6358536"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>404 403 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503 502</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 405 400 500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#coordinatorSchema}">proj:User</con:element></con:representation><con:request name="FirstUserCreate" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="54c781b4-bf2d-4e55-ab6c-fc7337e96457" sslKeystore="80080010.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>shikha.gupta@neustar.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>test_+sts123@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
       <Credentials> 
		<Username>NewnameShikha</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn%3Adece%3Aaccountid%3Aorg%%3A${#TestCase#NODE_ACCOUNT_ID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="UserDelete" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" id="b4da2587-c2fe-45c4-aa0b-7bfdda8db2c0"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value>${#TestCase#NODE_ACCOUNT_ID}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#NODE_ACCOUNT_ID}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value>${#TestCase#NODE_USER_ID}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#NODE_USER_ID}</con:default></con:parameter></con:parameters><con:method name="DeleteUser" method="DELETE" id="02c9752d-c22c-4713-874a-3f6c2b982142"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" id="0f18fdda-5e02-4f21-8def-a3f312f61ac8"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AddNewUser" type="rest" id="785934cf-6e29-492d-9dd8-504d1aeb0b28" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#HostName}</con:endpoint></con:endpoints><con:resource name="AddUser" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" id="a8f8ca6d-db1b-4090-9ffc-68be2d519618"><con:settings/><con:parameters/><con:resource name="UserAPI" path="/{UserID}" id="20cfed44-6bef-4e69-8937-8a0ed4466e50"><con:settings/><con:parameters><con:parameter><con:name>UserID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserDelete" method="DELETE" id="ec0bb443-5d9b-4e69-b1d5-c6cf6535c7e4"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:style>TEMPLATE</con:style></con:parameter><con:parameter><con:name>UserID</con:name><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserDelete" mediaType="application/xml;charset=UTF-8" sslKeystore="80080010.pem" id="d0bc938e-dbab-4193-8cc9-85cb4f10c8bf"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:${#Project#NODEUSERID1}"/>
</con:parameters></con:request></con:method><con:method name="UserGet" method="GET" id="b4c52e6c-50f0-4ebf-b8e3-ab596e55b443"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 404 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 400 405</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserGet" mediaType="application/xml;charset=UTF-8" sslKeystore="80080010.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="UserUpdate" method="PUT" id="b4c52e6c-50f0-4ebf-b8e3-ab596e55b443"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:${#Project#NODEACCID}</con:value><con:style>TEMPLATE</con:style><con:default>urn:dece:accountid:org:dece:${#Project#NODEACCID}</con:default></con:parameter><con:parameter><con:name>UserID</con:name><con:value>urn:dece:userid:org:dece:${#Project#NODEUSERID}</con:value><con:style>TEMPLATE</con:style><con:default>urn:dece:userid:org:dece:${#Project#NODEUSERID}</con:default></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400 500 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 503</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserUpdate" mediaType="application/xml;charset=UTF-8" sslKeystore="500500.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>shikha.gupta@neustar.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>test_+sts123@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
       <Credentials> 
		<Username>${#Project#UserName}</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="AddUser" method="POST" id="c8e33bf9-7e9a-4fc7-a85d-b9258d44e3b4"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AddUser" mediaType="application/xml;charset=UTF-8" postQueryString="false" sslKeystore="80080010.pem" id="8f456815-cfce-46c5-9b39-907b23b9d134"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>shikha.gupta@neustar.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>test_+sts123@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
       <Credentials> 
		<Username>${#Project#UserName}</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>
]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="PolicyCreate" type="rest" basePath="" definitionUrl="" id="6c3d536c-c34c-4909-b68e-c56202e901a4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="PolicyCreate_UserPolicy" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="8ea94816-f6ab-4fdb-a7cf-e216079a2d87"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>NodeAccountId</con:name><con:value>${#TestProject#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestProject#NodeAccountId}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>NodeUserId</con:name><con:value>${#TestProject#NodeUserId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestProject#NodeUserId}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>PolicyClass</con:name><con:value>${#TestCase#PolicyClass}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#PolicyClass}</con:default></con:parameter></con:parameters><con:method name="PolicyCreateSinglePolicyPost" method="POST" id="1852f785-6b55-4441-927b-2090f020122a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="PolicyCreateSinglePolicyPost" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="999901_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:EndUserLicenseAgreement "/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:request></con:method><con:method name="UserPolicyGET" method="GET" id="1852f785-6b55-4441-927b-2090f020122a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="PolicyGET" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="999901_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:EndUserLicenseAgreement "/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:request></con:method><con:method name="UserPolicy_DELETE" method="DELETE" id="1852f785-6b55-4441-927b-2090f020122a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="PolicyDELETE" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="999901_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:EndUserLicenseAgreement "/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="PolicyCreate_AccountPolicy" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="8ea94816-f6ab-4fdb-a7cf-e216079a2d87"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>${#TestProject#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestProject#NodeAccountId}</con:default></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value>${#TestCase#PolicyClass}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#PolicyClass}</con:default></con:parameter></con:parameters><con:method name="PolicyCreateSinglePolicyPost" method="POST" id="1852f785-6b55-4441-927b-2090f020122a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="PolicyCreateSinglePolicyPost" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="999901_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:EndUserLicenseAgreement "/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:request></con:method><con:method name="AccountPolicyGET" method="GET" id="c23d9652-8201-4a6d-a343-8eaeb0193004"><con:settings/><con:parameters/><con:request name="AccountPolicyGET" mediaType="application/xml;charset=UTF-8" id="846a1ca0-681d-46b1-a5d8-0a63053da965"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="PolicyClass" value="List" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountPolicyDELETE" method="DELETE" id="33e2e7d9-2b5b-406b-ba40-cad2d4922d0a"><con:settings/><con:parameters/><con:request name="AccountPolicyDELETE" mediaType="application/xml;charset=UTF-8" id="7926fdfc-6744-494b-ad3f-86dbd869e045"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="PolicyClass" value="List" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="STSCreate" type="rest" basePath="" definitionUrl="" id="e5418ea8-6874-4d4e-91e7-051607f11c76" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="STS" path="${#TestCase#endPoint}" id="9191b851-a5b4-482a-824b-a06ee52cad12"><con:settings/><con:parameters/><con:method name="STS - POST" method="POST" id="0da399dd-eaf2-45aa-894f-20e541033508"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="7b5b5183-165c-4a92-b0fd-a7a2d2cf9c40"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="STS - HEAD" method="HEAD" id="41b2e67c-3212-494a-b14e-944399284c92"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" id="743d352a-728f-42be-8346-9fde9b0e68f0"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="STS - DELETE" method="DELETE" id="d1fafa85-5591-4072-8f3c-1bcc67981d1e"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" id="23757926-e998-45a2-8c94-3d7da3fd4338"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="STS - GET" method="GET" id="adba3015-58aa-4b96-a3a4-e45bf8e3e632"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" id="29e1385b-cfad-4b7a-9ecd-3dab8d6536a2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="STS - PUT" method="PUT" id="2219d2cc-e9f0-4f03-9a78-53f7d4d62010"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="3733f148-bc7d-4c6e-b378-919e2d73239b"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="STS - PATCH" method="PATCH" id="a764abc9-8e30-4dae-acd1-56947c63f773"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="c0265dff-6c5f-4164-8351-8ecb9948c50b"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="STS - TRACE" method="TRACE" id="cc54684b-163b-4d05-bf1a-e650c99e8c0c"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="31fc14e9-3b2f-4554-a7a3-c04984590dab"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="STS - OPTIONS" method="OPTIONS" id="b0982bbc-750e-44cd-8c6f-480d2056c5c5"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="9b77356d-2fea-464f-8779-ab91029657fa"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="STSGet" type="rest" basePath="" definitionUrl="" id="0d466ce1-3de8-42e3-961c-b6b7455ababe" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="STSGET" path="" id="99df4a85-065b-4c55-9ed4-1c36a09ff13a"><con:settings/><con:parameters/><con:method name="STS GET" method="GET" id="45528b05-353f-48ae-9d78-8e25ff114049"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:assertion">urn:Assertion</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="2b213a05-ac30-47a9-ac13-39f2e3c51051"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="STS PUT" method="PUT" id="fd7de7df-c945-4473-8217-81a54ba483ea"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="728a70a4-f861-4b3f-8754-ba4f2bfd1018"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="STS POST" method="POST" id="9d7cec1a-a937-4992-a7ac-9364f31beea4"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="095fa567-7940-4c43-9f64-5e78b15b079d"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="STS DELETE" method="DELETE" id="39dbec8d-b76c-40f1-a75f-1bd1ddbd57da"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" id="42645f07-513f-4fe9-8054-412ee6ce74d1"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="STS HEAD" method="HEAD" id="66316bdf-76ca-4bb3-8760-1998c7d348b6"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" id="a80cb9fb-e2fc-4a4a-8b6a-4c407c3badd9"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="STS TRACE" method="TRACE" id="fafdb64a-91e1-4ee5-a19d-7feabd02cf65"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="05d8d1f1-ed64-4621-913e-6a5ca9afa44d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="STS OPTIONS" method="OPTIONS" id="bd81df4e-4b8d-4766-9e7e-f6a0ac2ed830"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="8040d20f-b587-4b9b-91ff-abc06ef70e8b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="STS PATCH" method="PATCH" id="e7b8a4b3-a85b-4db1-90c7-9ec7d3e77324"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="55fa8493-0185-4029-91a1-5f717ea32008"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountStatusUpdate" type="rest" basePath="${#Project#Provision_HostName}" definitionUrl="" id="ef3df03c-364e-4634-8d44-c4f876c1dda0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountStatusUpdate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/ResourceStatus/Current/Update" id="22209bd2-fa00-4d86-81b2-9ecd6016abc0"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="AccountStatusUpdate - AccountStatusUpdate" method="PUT" id="f702eff3-f742-4f87-bb66-84d3d9621937"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 404 405 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>303</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/html</con:mediaType><con:status>303</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>400 404 413 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="3807313e-557d-4607-a7ea-f6bff82751b4"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="UserStatusUpdate" type="rest" basePath="${#Project#Provision_HostName}" definitionUrl="" id="86f9c09b-48e1-4290-9630-c1524e9ef55a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="UserStatusUpdate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update" id="e68fc385-8020-4968-bd7d-076e92053164"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default></con:parameter><con:parameter><con:name>UserID</con:name><con:value>UserID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>UserID</con:default></con:parameter></con:parameters><con:method name="UserStatusUpdate - UserStatusUpdate" method="PUT" id="f45d4ca2-6a72-4eb6-9e8f-a5f2b00406de"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status/><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>303</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="6d60a729-fa7c-48f3-b662-1cb4bcf63cdf" mediaType="application/xml;charset=UTF-8"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Rights Token" type="rest" id="2cc5edf0-44c3-45c0-af0b-d6e19735bdd5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="Rights Token Get_List" path="${#TestCase#endPoint}" id="80183adb-1c5a-4de7-9d84-191f16c47def"><con:settings/><con:parameters/><con:method name="Rights Token Get" method="GET" id="8b4cec3d-fe23-4572-9b38-8f6059da115f"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 404 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:RightsTokenList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:RightsToken</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" id="dc5964a7-d54c-453b-85c8-f1cc8f5c4976"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Rights Token Create" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{RIGHTSTOKEN}/RightsToken" id="483f410c-4aec-4f56-bdb8-b53566c9bb97"><con:settings/><con:parameters><con:parameter><con:name>RIGHTSTOKEN</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Rights Token Create" method="POST" id="1c20f275-4760-4c4b-994f-d981d038615c"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="0565a9cc-8569-46e9-a479-f8aacc70fa3f"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Stream" type="rest" basePath="" definitionUrl="" id="233e54e8-cd77-4d4d-8f1e-6d240a4b070f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="StreamView" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Stream/{STREAM}" id="0931ace2-e7f3-4c79-968d-a04d73600c30"><con:settings/><con:parameters><con:parameter><con:name>STREAM</con:name><con:value>${#Project#urnstream}1234</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#urnstream}1234</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:value>${#Project#urnaccount}${#TestCase#assertionAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#urnaccount}${#TestCase#assertionAccountId}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="9683ed0f-6cc9-4f65-847b-0f131541e354"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>0 200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Stream</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="bcfd0ffb-67ca-4ab7-94f1-27b7e0a4af61" mediaType="application/json"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Stream" id="cf353486-e4bd-4e29-9fa0-16678ce3ed16"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="8e9894cd-2bd1-4e02-ab04-37036dd75fc6"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status/><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>0 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="f8992888-776a-4588-8ff0-130c8c626196"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DeviceAuthTokenCreate - DeviceString" type="rest" basePath="" definitionUrl="" id="890e42ef-6efe-4e91-9cb4-fa744271ccec" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="DeviceAuthTokenCreate - DeviceString" path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/DeviceAuthToken/DeviceString" id="53a391a0-23c2-428d-92a3-eccc9c99bc76"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#versionMajor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#versionMinor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMinor}</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="57a25293-67c7-4aa6-8149-57d647475829"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>0 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="f558a5aa-9fcc-4257-874b-f75591c75953" mediaType="application/xml;charset=UTF-8"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DeviceAuthTokenCreate - JoinCode" type="rest" basePath="" definitionUrl="" id="eb22de80-fc92-4400-b569-1c9075bfaad6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://${#Project#targetURL}</con:endpoint></con:endpoints><con:resource name="DeviceAuthTokenCreate - JoinCode" path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/DeviceAuthToken/JoinCode" id="26fb08d7-ab96-48ae-b4b5-293747247a46"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#versionMajor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#versionMinor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMinor}</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="1e47d24f-e6c1-493b-adef-a28c3c20559a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>0 201</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="ca63061e-e9ce-4a30-a57c-7aa02e8f4c97" mediaType="application/xml;charset=UTF-8"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMergeTest" type="rest" id="6ba05ee5-e87a-41e2-93b7-5fac7723d364" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountMergeTest" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/Test/{RetiredAccountID}" id="d3ab43df-328b-4e09-8562-58a80596481d"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:style>TEMPLATE</con:style></con:parameter><con:parameter><con:name>RetiredAccountID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="449e438d-5c8b-4814-8ea3-5b23b2d9c7fc"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="cfd0be42-a0ab-4e51-972d-c4a67c9d1208"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMerge" type="rest" id="38577162-173b-4e3b-b7a4-7084681116dd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountMerge" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/{RetiredAccountID}" id="6ecab418-a971-4402-baea-c83b2ded7efc"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:value>SurvivingAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>SurvivingAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>RetiredAccountID</con:name><con:value>RetiredAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>RetiredAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="4659148b-17e0-4ad5-a68e-924d516aa757"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="acbfb94a-f132-4a9c-8d15-8b85ecc78c8c" sslKeystore="7600.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 Assertion=nVdbc6pKE333V1juR8twUVSsnVQNFwlGNCBeX77CYQSUizIg6K8/A26NZif77PM9pMw00z2ruxfNmp/YCny2BzBGceJFYVWVnmv/23Sam9a6YzWasAUbLR7BRpffWOS/Lt1imSYNrU2tqmKcIjXEiRUmzzWWZpoNutlgeJNu91psj2s9sXR3VavOUIxJaLLlia5V88APca889rmWxmEvsrCHe6EVINxLYG8CtGGP7OxZV0y1l58XlOWB8YubJPseRcEnG0Hk+/AJRgH1k3rY89PGvYnnhFaSxujXmTZ+rv3yzbLsKWs+RbFDsTRNUzRPkT029pwftZfK1RnZariJLmvRCqPQg5bvna0ClIYSN7KrwHei2Evc4JvQDMXQRegGymEDMq3wR436OKBE95eRHkDG2Gpg12KuwQy0QTEKIapODfW59uPvOnjxNWMrxJsoDvCn9X+DhMIj8qM9shv4mtkV3d9H/KJcLz8R7Kkh9FPsHdGooMnegghX32O08fKhhwn5bFwt21/N8ZVhCP6Xlvyk7nES2NQXlZE8B+Hk/+nXfa8uUWaWn6KXXI2d8M2SxtrQmeTjlQnoLZx0ZnLmPJcQ7jdfQN1a/Wv9mag3Xv1y0jZd+lCfxpvhCEFXOq60bmBxC44fs4o/PATjZTte8trIkUzROvLteYtdjsRkNqGwzw0RPzeNFd1nopVOwQpKjrtOyAz4oLudniXVW2AtXEfZajaM11x/O2VSHDj1MUoWM+s4YrtuwmC3Xp/X1abHRqyhHzkNrKEB17OKQYtma7v1vZYKzJXbByl4/sjpPocirzd0KpMs/l9wNC9ZiXVbiMWk2JDXM0EvmqpK6VkUwWnigEwVgEP+tmAkOLuDu/MUPqMFoOt9IImCv5WHGtgpgJnKgquJs5mWi2cwEJzRjDiaFeCvBM2QMylbSjNdf5Uz17SV2Wmt+OnqLI80gEtn0dVkQ55JhilrGogutlyT1kq+1SZapupLqUICSHK+P9sKnyAl9yCrctqEY5cTLl0tZsTePw2D0XFtyr4maoo4OSgTdd2UdHkAjOUcsv2U+J6HwT6qLKfCndNgj7YA9TOanAnOmrnLNHPKjiTDKm3mo01TlYGm40zUy6yUipwNZtPzRy1EQRPtQM5lE7xfagFNsT+iV4sBtuZcqBkgk5zS+U3O7PEViKbTWUW81GooZ4ZsTEd9zVAzGZQ2Sc58vGZH7lpxj7Cp5wMTbO8bI+ryvB+S56FxhCfuULGUPlgHMwY2DRd6nGctosxZdTNJXw7eopVKwoyALguCDgggGhSpkfoLYCjMuPHe41kPDTf9KEBuXNGY6G13POd012uOnffRnJM2u8674r03LdulVB+y2+YOqCqy3xhXt2xjSRlS6J3b47fpAnnx8pyMOJ1pe12uYszT6UKK/I79ulhO3+r5Eurm+H0ynb+f83x02HbPfvI6Fl7jyUCTnPEIoXcM6xRt9QWzK3Hi8nVL+LQxaMRVgKMJAChbx5E9QmDhdXsh4auhyYS8QBMzRZyLygQoSl1WBUnXN32XeYfKLJ0yI02VbZ+U6bRcGH5lJQoS6RRtzVf7JdunyVixy2B6S+47+pSrDxZopY98c5aAbD/bhAxDK3v9daNlDtQKBthqNhHIWyRUUhVMrfF+QOdvszbNHHTbH0x4MG3mE3aXj11nddo5qx1pyvLu1VmawJ+ZdxxTCcXmFd2UDQ10L+9brqnTpuHDIN+vA5hLJulZ6RyZgmz0dXqaSxJ4u9iwCdgcL8/yVhPl0r8Ccs0itDiuFy5ehiNvbMopIW16R5ftmqX/lWMFxSqPHDuIQAefOSZfOCaDzaGudiUGc21xj+eZIyjyQe/MhgN+T+uL4a4i1PuUk3h+axx2M/OtPmdOWcfd6vM5r0quWA83S7e5TgTaOkMdDXYdxTN2Uthu+SdtqOnc1KP8E71FhwwPKyOVCeVmcu5TfJzWhWDlBedzs8VOg/dJelSn1htmTu76MOez7ftrm6Ji5cSdO6uj3l9EcHn5jnwekjfjZYxS9wP2YQJftdckXW8RTK7L4jusStU++ThayZ91XGHx7Mam3NrbF2IQJyhMai+FV6HheilRep7dI1/Oy1rqttg2x8gCw3dlwLZkukUzfRrQHZ5vcm3uKvYuKD5BFKNw4xVnFXL28rH+M0AY9DAKbRQ3jlEKXYRrf4hY1KuqhgZRIVGIkRkRudzuCu12h5VZmZY7Qr9NS0QLyy0R8C2O4UW+Vh1FyTgcx2CToPhRKvMPUtlA0Nt7qNDThajARFXghJTkYB3TxGeejtZTiFKiuONC9PbYVpejsBfsfVQApoLITn30tHf3ZYEofPllGxbEpbXTpulS7Xyb3+dn11KQPbZXbMBFMgIi7URfiP7WNZNvM2bY+4yv4UFqe4WoIXVNYg9ekDw++qBLwZMbV4qUrphvWz8bHsJSnzO6nWQfPXhj/O1ORCQ1EV0v14YcrKfDU3o8pmULOoWgjEl4iqHoNjVBMCWq8GRGOxRStxDUXwnyG+pPJ9/sj/jSxA0nCXmbA0KYarn8i9vYBOHiNqYSwud/e9V7OJLULUF58pVN9MmlrUD8x3sd7MFiHzG/k58siu2Pdn0R6+4ckmcxvrzQKVaF/D59wwoYkbAeGWFRfB/8qwBfHf5ovBX5hiUhbFqnCfr+SbWYTc81C8IoDRNVqpWG+3lZ4kxOe9T72PRbmFIA/7rR5PjbG81CG07I5Aqs2m2v9++bG15JF4iIF/ZKLM+1nFzOyeGhczeffwH8ekR3/ziiHzN5+c38u+Wupp/fh5d/AA=="/>
  &lt;con:entry key="Authorization" value="SAML2 Assertion=nVdbc6pKE333V1juR8twUbxVkqrhKioqiNeXrxBGQBGQAUF//RkwGs1O9tnne0iZaaZ7VncvmjWvyDh4dBcgBKPYDfyyzL9V/mcxDNmuG62a0aq3aw0S1msdkyFrcEM2yLphkpZBVcoyQgmUfRQbfvxWoUmqXiPrNaqjk81uo9UlqZdOg1lXynMYIRwab3khK+Xs4PmoWxz7VkkivxsYyEVd3zhA1I3N7hQowy7e2TVumCrvr1eUxYHRuxPHYZcgzBcLmtDzzBczOBCvxNOeVwt1p67tG3ESwY8zLfRW+fBN0/Qlrb8EkU3QJEkSZIfAeyzk2r8q76WbM7Rkfxtc15zhB75rGp57MXJQCoydwCoDzw4iN3YOP4SmCIrMQ9dgZtZMquH/qhCfBxTo/jLSE8gIGTXk4CZ8BNPgFkbQN2F5pslvlV9/18Grrx4ZPtoG0QF9Wf83SNA/QS8IoVVDt8xu6P4+4jflen+FZlf2TS9B7gmOcpqEhglReRLBrZsNXYTJZ6Fy0f5yhm4Mg+Z/ackr8YgTwya+qQzv2hDF/0+/Hnt1jTI3vAS+E+LO8wZue+P0U6XPu5zTm874yXaBuVpAeNx8BXVv9cf6K1HvvPpw0mxHlY2YllqTem9z1vn2xmukVRZcQMsm6bS9jjsWN5A3l3GgR0q23ynygW5yQ1hN5mGk9IdNi/ZW8upgqSXTQWF/GEI/JAVlOgonhNpL25BYDw9xXal6kqbOm5Pjxc/801gC88H5aFFeqrfQuLpTdmF6Jlc7bxbF9Hxbaqh9jWH98dbaj+utrXsh0NtnTo855HkN4LlIMv9/yZAd3oiN+4LLJ8UWv54xfFdkmU8uHAfOUxukMgts/LcDI9beH529K3VSkgWqKgKeY72dMFTAXgLUTGAdhZvPlYy7gD5rj+bYUS8Bb80qmpDy6Yqfq2pPSB3dkubnjeQl64swUgAqnDlHETRhzmu6oCgguNoyhd9I2U6ZKqmsrvgSDsALWXixpE4Mpcw1aZlRpgy9mjLJejnHdvE8PIxOG13wFE6RuOlRmsqbOq8KfaCtFiYtJtj3MjyEQWk1Yx+c+iHcASimJD4TXBR9nyr6jB7xmlHY9GebIkt9RUUppxZZSSUh7c9nl89acKzCWQchE3QwudbC1DlxRK6XfWQsGF/RQMrbhfNASK3xDYiikmmJu9ZqKKSaoM1GoqLJqQAKGy+kHtrQI2cjOSezrmZ9HeweG8OpwkL08XNfO5ln5lgyJBFsDnPKrGuO6TKusQxSe91OeXXVHwRrGYcZAVVgWRVgQCTIU8P1Z8GQnTPj0O3QLhxuxeAAnaikUMFgf7pkZNutj+3JaMHw231rIrmTumE5hOyZ9K6+B7IMrQHlqIalrQiN991LczyYLaEbrS7xiFGppttmStoimS35wGtZveVqNqhmK1PVx5PpbDG5ZNnouGtfvLg3ZnvRtK/w9ngE4QSZVYI0RFZv8wy36u0wn7YaCZkSsBUWAGln24KLCcz2dlcS9jRFwOQFCpdK3IKTpkCSqoLM8qq6FR1qYkrzZEaNFFmwPFym82qpeaU1x/K4U6SxWIcrWiTXOrCKYGpDEG11xlT7S7hWR54+j0Eazrc+RZFSqPa2SmqbSs4AS06nLH6L2FIig5kxDvtkNpg3SeqoWl5/2gGzejal99nYsdfnvb3e46asHl6dlQ68uf7AMRlTbFFSdUFTQPv6vmWKPKtrnnnIws3BzHgd96xwDnRW0ESVnGU8DwZXG9IBnaHVRdgpnFD4l0CmGJgWp83SQSt/5I51IcGkTR7ostvQ5L9yLKdY6ZljRw6o4CvHhCvHBLA9VuU2TyGmyYVokdqsJBzV1nzY74SkuhzuS2xVJOzY9Rpjv53qg+qCOqctZ6cuFh2Zd7iqv1059U3MksbFVGF/35Jcbc/7zYZ3VoaKysxcwjuTO3hM0bA0kilfqMcXkehESZU9rN3D5VJv0LPDZJqc5JkxQNTZ2RwXnXQ36TUJIpLOzKW1PqniMjBX1+/I1yF5N17HKPE4YJ8m8E17TZPNDprxbZl/h2W+LOKPoxH/WcflFteqbYut3TAXgyiGflx5z71yDddNsNJzrS7+cl7XfLtBt9oUAKABKKEpCli0UCIJyFanwzQ74Cb2rii+QOQCf+vmZ+Vy9vqx/jNA89BF0LdgVDsFielAVPlDxLxeZdnXsAoJfAT1AMtljmRYQHIt/E43WiLbFltNsQMYkRE4ssPUhUp5FMRjfxyBbQyjZ6nceZLKGjTd0IW5ns5FBcKqAsW4JEfjlMQe9XIyXnyYYMUd5aK3SzfaDIHcQ+jBHDBxCKzEgy+hExYFItD1l64ZJiqsrSZJFmrnx/y+PruVAu+x3HwDypNhIW4n/E30N7vMLZMfM6box4xv4UFiubmowXWNI9e8Inl+9EmXnCd3ruQp3TDft341PIUlvmZ0P8k6uead8fc7EZbUWHS93xpyNF6OL8nplBQtaOWCMsLhCYogm8QUmglWhWc92EOfuIcg/kqQ31F/Ofluf8aXxI4/jfHbfMCEKRfLv7iNTSHKb2MyJnz2t1e9pyNx3WKYxd/ZOA9f2nLEf7zXmV0z34fNE/yTBpH12a5vYj2cg/PMx5fr2/kql9/nH1hhBjisi0dYED0G/y7Ad4c/G+9FvmOJMZs2SQx/flLOZ9NbxTDNIPFjma8Uhsd5WeCMzyHsfm76LUwhgD9uNBn68UazVIZTPLkORuW+1/33zTW3oIsJsRdyCyxvlQxfzvHhvv0wnz8Afj+i6+yfRvRzJu+/mX+3PNT06/vw/g8="/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:AccountMerge xmlns:dece="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/schema/md/v1.2/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.decellc.org/schema/2012/12/coordinator dece.xsd ">
<dece:UserReference ResourceDisposition="urn:dece:type:status:active">urn:dece:userid:org:dece:D842651EB198EA24E0401F0A07993565</dece:UserReference>                
<dece:UserReference ResourceDisposition="urn:dece:type:status:active">urn:dece:userid:org:dece:D842781AAA4A1E6FE0401F0A0799569A</dece:UserReference>                
</dece:AccountMerge>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="SurvivingAccountID" value="urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD842651EB188EA24E0401F0A07993565"/>
  <con:entry key="RetiredAccountID" value="urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD842781AAA3B1E6FE0401F0A0799569A"/>
</con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMergeUndo" type="rest" id="216cdb32-edc4-42ff-940d-0a24ddc5b6ef" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountMergeUndo" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/Undo" id="a3a07d2e-db6c-4d70-a443-af62d5a50a00"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:value>SurvivingAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>SurvivingAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="4995638c-d575-4d0f-a861-2a267308a8d9"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="9f81ce2b-c5b6-493d-9b1f-7c101faacf30"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite name="1_SetUpProperties" id="1543d321-88eb-4b0d-899c-491059b50dee"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ReadProperties" searchProperties="true" id="446810e5-1791-4ad4-bc54-0ed60622e636"><con:settings/><con:testStep type="groovy" name="ReadProperties" id="ff30cc8f-dade-422c-aa09-7d2a3ac042ec"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info("Set Environment properties!!!");
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath
log.info("Project Path : '" + projectPath + "'");

def eNV = context.expand( '${#Project#ENV}' )
log.info("Environment: '" + eNV+ "'");

def propertiesPath = null;

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows OS!!";
    		File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
    		propertiesPath = temp.getCanonicalPath();
	} 
else 
	{
    		log.info "it's Linux OS!!";
    		File temp = new File(projectPath + "/../../../Properties/");
    		propertiesPath = temp.getCanonicalPath();
	}
	
log.info("Properties File Location : '" + propertiesPath+ "'");


def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));
log.info("Load property file : '" + propertiesPath + "/" + eNV +"project.properties"+ "'");
String line;
while ((line = reader.readLine()) != null)
	{
		if (line.trim().length()==0) continue;
		if (line.charAt(0)=='#') continue;

		int delimPosition = line.indexOf("=");
		String key = line.substring(0, delimPosition-0).trim();
		String value = line.substring(delimPosition+1).trim();
		propMap.put(key, value);
	}

propMap.each{ k, v -> tP.setPropertyValue(k,v)}


if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows OS!!";
    		File temp = new File( projectPath + "\\..\\..\\..\\GlobalScripts\\STS\\");
    		scriptLibrary = temp.getCanonicalPath();
	} 
else 
	{
    		log.info "it's Linux OS!!";
    		File temp = new File(projectPath + "/../../../GlobalScripts/STS/");
    		scriptLibrary = temp.getCanonicalPath();
	}

log.info  " ScriptLibrary     ... " + scriptLibrary;

com.eviware.soapui.SoapUI.settings.setString( "Script Library", scriptLibrary);

log.info "updated_project_properties from properties file";
</script></con:config></con:testStep><con:testStep type="groovy" name="SetRemainingProperties" id="9cb8fe64-e703-411c-8590-122370cdce44"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ENV = context.expand( '${#Project#targetSystem}' )

log.info "Environment "+ENV;


tP.setPropertyValue("AlternateEmail","test_sts123@uvvutesting.biz");
tP.setPropertyValue("PrimaryEmail","testing@uvvutesting.biz");
tP.setPropertyValue("samlAuthenticatingAuthority", "urn:dece:org:org:dece:coordinator");
tP.setPropertyValue("samlIssuer", "http://c.decellc.com/");
tP.setPropertyValue("linkLASPNodeAffiliationLLASP", "");
tP.setPropertyValue("nodeAffiliationACSPTL", tP.getPropertyValue("nodeIdAccportal")+","+tP.getPropertyValue("nodeIdRTL")+","+tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeAffiliationDECECS", "");
tP.setPropertyValue("nodeAffiliationDLASP",  tP.getPropertyValue("nodeIdDLASP")+","+tP.getPropertyValue("nodeIdRTL")+","+tP.getPropertyValue("nodeIdLLASP"));
tP.setPropertyValue("nodeAffiliationLLASP", tP.getPropertyValue("nodeIdLLASP")+","+tP.getPropertyValue("nodeIdRTL")+","+tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeAffiliationRTL",tP.getPropertyValue("nodeIdRTL")+","+tP.getPropertyValue("nodeIdLLASP")+","+tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeEntityAffilatedNodes", "");

log.info "sada"+tP.getPropertyValue("nodeAffiliationACSPTL");
log.info "sada"+tP.getPropertyValue("nodeAffiliationDLASP");
log.info "sada"+tP.getPropertyValue("nodeAffiliationRTL");
log.info "sada"+tP.getPropertyValue("nodeAffiliationLLASP");
if(ENV=="LP1")
{
tP.setPropertyValue("alid", "urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt");
tP.setPropertyValue("cid", "urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt");
tP.setPropertyValue("StreamHandleID", "urn:dece:streamhandleid:org:dece:D3CD9D93C110059998E0401F0A07992FB8");
}

else if(ENV=="LP2")
{
tP.setPropertyValue("alid", "urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt");
tP.setPropertyValue("cid", "urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt");
tP.setPropertyValue("StreamHandleID", "urn:dece:streamhandleid:org:dece:D3CD9D93C110059998E0401F0A07992FB8");
}

else if(ENV=="LP3")
{
tP.setPropertyValue("alid", "urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt");
tP.setPropertyValue("cid", "urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt");
tP.setPropertyValue("StreamHandleID", "urn:dece:streamhandleid:org:dece:D3CD9D93C110059998E0401F0A07992FB8");
}

else if(ENV=="DEV")
{
tP.setPropertyValue("alid", "urn:dece:alid:test:Thu_Nov_21_14_36_04_IST_2013");
tP.setPropertyValue("cid", "urn:dece:cid:test:Fri_Oct_11_18_54_51_GMT_05_30_2013");
tP.setPropertyValue("StreamHandleID", "urn:dece:streamhandleid:org:dece:EC3B6FFFD3665563E0401F0A0F9911CD");
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set Coordinator Schema" id="70a52050-e14c-4fb0-bec9-a6b406b4e32b"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "versionMinor: "+tP.getPropertyValue("versionMinor");

def v2 = context.expand( '${#Project#versionMinor}' )
def schema = tP.getPropertyValue("coordinatorSchema_"+v2);

//tP.setPropertyValue("coordinator_Schema",schema);
tP.setPropertyValue("coordinatorSchema",schema);

log.info "Setting the coordinatorSchema value ---- "+schema;
</script></con:config></con:testStep><con:testStep type="groovy" name="SetTOUPolicyResource" id="33c0a884-99b4-4f45-976a-74ada35505b6"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def tOUUrl;
def dBHost = context.expand( '${#Project#targetSystem}' )
def versionMinor = context.expand( '${#Project#versionMinor}' )

String country = context.expand( '${#Project#AccountCountry}' );

def a = new dbUtils.dbUtils(log,dBHost);
String sql = """select consent_version from (select
            consent_version            
            from
            CONSENT
            where
            CONSENT_URN = 'urn:dece:type:policy:TermsOfUse'
            and
            COUNTRY = '""" + country + """'
            order by
            consent_version desc)
            where rownum &lt; 2""";             


log.info sql;

results = a.SelectFromDB(sql,dBHost);

assert results.length() > 0;
log.info "results" + results;

def myXML = new XmlSlurper().parseText(results);   

log.info "consent_Version==="+myXML.ResultSet.Row.CONSENT_VERSION.text();
                
def consent_Version = myXML.ResultSet.Row.CONSENT_VERSION.text();

tOUUrl = context.expand( '${#Project#TOUUrl}')    

testProject.setPropertyValue("TOUPolicyResource",'https://'+ tOUUrl + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');
log.info "TOU_Resource==="+testProject.getPropertyValue("TOUPolicyResource");
</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>414cb910-4af7-4257-bd98-c9991807b4ea</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="49e47c44-5688-4a02-9412-f33cb601fb2a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Device Node_Oid from DB" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Get Device Node_Oid from database" id="5c705ef4-54ac-48aa-b5c4-42094428d42d"><con:settings/><con:config><script>import dbUtils.dbUtils;

def currentTestCase = testRunner.getTestCase();
def currentTestSuite = currentTestCase.getTestSuite();
def currentTestProject = currentTestSuite.getProject();


String envIdentifier = currentTestProject.getPropertyValue("envIdentifier");
log.info("Get Device Node_Oid value from DB environment : '" + envIdentifier + "'");

String sqlToGetDeviceNodeOidFromDB = "select to_char(rawtohex(a.node_oid)) Node_Oid from node a, node_role b where a.node_oid = b.node_oid and a.node_id like '%:device'";
def dbUtilObject = new dbUtils(this.log ,envIdentifier);

log.info("Execute sql on DB : '" + sqlToGetDeviceNodeOidFromDB + "'");
String nodeOidXml = dbUtilObject.SelectFromDB(sqlToGetDeviceNodeOidFromDB);
log.info("Xml Output returned from DB : '" + nodeOidXml + "'");

/*
* selectFromDB returns the value in Xml Format.
* Parse the output of method selectFromDB and extract the required value
*/

//Extract Device Node_Oid
def nodeOidXmlSlurperObj = new XmlSlurper().parseText(nodeOidXml)
String nodeOid = nodeOidXmlSlurperObj.ResultSet.Row.NODE_OID.text();

log.info("Device Node_Oid extracted from DB : '" + nodeOid + "'");


//Set Device Node_Oid Value at project  level
currentTestProject.setPropertyValue("nodeDeviceDefault" , nodeOid);
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase id="15ee33b9-5b72-4ebf-acc8-4d021ea2a73d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Disable KnownBugs TestCases" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DisableKnownBugTestCases" id="a4505552-c463-4a99-b413-a642cfbd6529"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.*;
import com.eviware.soapui.impl.wsdl.teststeps.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def knownBugCommaSeparatedList = context.expand( '${#Project#coords}' )

def knownBugsList = knownBugCommaSeparatedList.split(",");

log.info("Get TestSuite List in project '" + tP.getName() + "'");
def suiteList = tP.getTestSuiteList();

log.info("Loop over Suite List!!! Start");

for (int i = 0; i &lt; suiteList.size(); i++) {
	def currentTestSuite = suiteList.get(i);
	log.info("Current Test Suite Name : '" + currentTestSuite.getName() + "'");
	log.info("currentTestSuite.isDisabled() : '" + currentTestSuite.isDisabled()  + "'");

	if( !currentTestSuite.isDisabled() ){
		def testCaseList = currentTestSuite.getTestCaseList();

		for (int j = 0; j &lt; testCaseList.size(); j++) {

			def  currentTestCase = testCaseList.get(j);
			log.info("Current Test Case Name : '" + currentTestCase.getName());

			for(int k=0; k &lt; knownBugsList.size() ; k++){
				if(currentTestCase.getName().toLowerCase().startsWith(knownBugsList[k].toLowerCase())){
					log.info("Disable testcase");
					currentTestCase.setDisabled(true);
					log.info("TestCase disabled successfully");
					break;
				}
				
			}
		}                      
	}   
}</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase id="f44a82d8-b899-4625-9cac-ba6b9dbca2d5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetXDeceAppAuthHeaderValuesFromDB" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getXDeceHeaderValue" id="ceea9c20-bc59-46e4-814d-5a95cca1d4db"><con:settings/><con:config><script>import dbUtils.dbUtils;

def currentTestCase = testRunner.getTestCase();
def currentTestSuite = currentTestCase.getTestSuite();
def currentTestProject = currentTestSuite.getProject();


String DClientValue = "dclient-basic"
String sqlTOGetAppAuthTokenId = "select APP_AUTH_TOKEN_ID from ORG_APP_AUTH_TOKEN where rownum &lt;= 1 order by org_oid";
String sqlTOGetAppAuthTokenData = "select APP_AUTH_TOKEN_DATA from ORG_APP_AUTH_TOKEN where rownum &lt;= 1 order by org_oid";

String envIdentifier = currentTestProject.getPropertyValue("envIdentifier");
log.info("Get Dclient App authorization value from DB environment : '" + envIdentifier + "'");

def dbUtilObject = new dbUtils(this.log ,envIdentifier);

String appAuthTokenIdXml = dbUtilObject.SelectFromDB(sqlTOGetAppAuthTokenId);
String appAuthTokenDataXml = dbUtilObject.SelectFromDB(sqlTOGetAppAuthTokenData);

/*
* selectFromDB returns the value in Xml Format.
* Parse the output of method selectFromDB and extract the required value
*/

//Extract APP_AUTH_TOKEN_ID
def appAuthTokenIdXmlSlurpObj = new XmlSlurper().parseText(appAuthTokenIdXml)
String appAuthTokenId = appAuthTokenIdXmlSlurpObj.ResultSet.Row.APP_AUTH_TOKEN_ID.text();


//Extract APP_AUTH_TOKEN_DATA
def appAuthTokenDataXmlSlurpObj = new XmlSlurper().parseText(appAuthTokenDataXml)
String appAuthTokenData = appAuthTokenDataXmlSlurpObj.ResultSet.Row.APP_AUTH_TOKEN_DATA.text();


log.info("DClientValue : '" + DClientValue + "'");
log.info("appAuthTokenId : '" + appAuthTokenId + "'");
log.info("appAuthTokenData : '" + appAuthTokenData + "'");

def dclientAppAuthorizationValue = DClientValue + " " + appAuthTokenId + ":" + appAuthTokenData;
log.info("Dclient Application Authorization Value : '" + dclientAppAuthorizationValue + "'");

//Set Dclient Application Authorization Value at project  level
currentTestProject.setPropertyValue("XDeceApplicationAuthorization" , dclientAppAuthorizationValue);
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="2_P0 Test Cases" id="571884d8-a423-41f7-8f02-0650ffbc84b3"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop/Reports New</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03101 - STS - DeviceAuthToken JoinCode - Full user created DeviceAuthToken consumable - P0" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="925f6dc6-b426-4017-93ff-de1f915a0b0a">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="719e1fb3-eef4-4b50-94ea-f22dd5b6d069">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));


tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="901af0df-714a-40a1-9d81-db024b4152c0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call First User Create" id="40dc1908-e025-4fbb-adef-bc0137b83b55"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      
      <con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="416c365e-161f-4321-979a-81cf9cb69e3b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep>
      <con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="bf6a0dec-244f-474e-9603-f4c22e1cdb8f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="97b38584-5375-43b1-85e3-ddd82c26f2e5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="c99ab97c-79f9-40c3-8d98-0b44b87b9f2e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="e7623b3f-288d-4e9a-a4c9-b0c05ddab098"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="4a43208b-f142-4735-ae37-15fee2478d3d">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="72cd98c6-fe63-4f60-9549-405296db9c04">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="7ce3f59b-9395-4cdc-bb58-4e5a5e4b5fb1">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="aca663b9-4d03-4b3d-b484-36e5e6fbabe6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="8e08a3dd-37fb-44b0-b4e1-a84f66282e7e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

/*
*  Auth context for device
*/


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="112aedb2-3bf0-4e7d-bfc7-80879e9f956f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>deviceAuthTokenRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>expiresMinutesDiff</con:name><con:value>120</con:value></con:property><con:property><con:name>deviceAuthToken</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1577845980823E95E05307991F0ABF67</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">157784973C2A72CCE05305991F0A0266</con:value></con:property><con:property><con:name>stsSkipLastLoginCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1577845980813E95E05307991F0ABF67</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>157784973C2972CCE05305991F0A0266</con:value></con:property><con:property><con:name>Username</con:name><con:value>stsapi_107_1430973819090</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>authTokenStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>authTokenStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rauthToken</con:name><con:value>07A962C92A960ABBE05305991F0A4CB9</con:value></con:property><con:property><con:name>rauthToken_1</con:name><con:value>07A962C92A960ABBE05305991F0A4CB9</con:value></con:property><con:property><con:name>authTokenCreatedBy</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedBy_1</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedUser</con:name><con:value>07A95ECB84A801AAE05305991F0AF8F5</con:value></con:property><con:property><con:name>authTokenCreatedUser_1</con:name><con:value>07A95ECB84A801AAE05305991F0AF8F5</con:value></con:property><con:property><con:name>authTokenCreatedAccount</con:name><con:value>07A95EA0C55B7E79E05305991F0AC2A1</con:value></con:property><con:property><con:name>authTokenCreatedAccount_1</con:name><con:value>07A95EA0C55B7E79E05305991F0AC2A1</con:value></con:property><con:property><con:name>authTokenisGen</con:name><con:value>Y</con:value></con:property><con:property><con:name>authTokenisGen_1</con:name><con:value>Y</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1577845980813E95E05307991F0ABF67</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:157784973C2972CCE05305991F0A0266</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>bfb3a8c0-b9ae-46c5-a24c-102ff5f5d354</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4ed6cf1f-b471-4fb6-a1c6-bfa8b600ea30</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8afdd552-9c80-468c-8b21-2b7eac51c492</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2c38eaae-32ff-41e1-87c4-e5507798bbd5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6cee2dd0-4510-4bdd-8e29-f356fe1ccd4a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>449d84b3-e495-490d-b909-4b91aebc1c37</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ea3ebc34-86fe-4773-ab92-7d848178dd54</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>20a58493-d1e0-46c7-8661-7a3fd1b38bc1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b1b6a775-1c13-4076-926a-a110860f65c8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03107 - STS GET - DeviceAuthToken DeviceString - Basic user created DeviceAuthToken consumable - P0" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="803ade9c-e2b8-4757-bcb9-01d0dffa3f5a">
      <con:settings/>
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="d6148001-9d4f-4947-a86d-15ba50283d08"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));

tC.setPropertyValue("stsduration",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("Username",null);
tC.setPropertyValue("UserPassword",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="47df5b2b-c5c3-4408-ba13-dda9fa510831"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="04af70d6-d6d7-4897-9a07-444876b6a3a7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="c338d34c-5dc9-4abc-b429-e1ddb8ecde79"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="a86285cc-3d4f-47d7-bffe-d0b08049dff3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="a3373971-7bb2-4129-aff9-8e5e990285b8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="17d63c57-775d-4122-96ea-867937995875"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="46644ca5-c689-4309-81c5-1cc65a0b0cdb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="18a4a057-b0d3-442b-a87a-6d5f25e3f887"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="a43556cb-179d-44ce-8f3c-1fae4932c4aa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Basic UserCreate" id="77c7ade0-49ff-4574-afa0-32a471dc4d1a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("BasicUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="d246d64b-cc46-4b5d-b5c5-f13ef4e7d1ab"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator for blocked:tou basic user" id="7488273a-6aca-4a7c-a99c-e52f955953d1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator for basic user" id="80db194e-6368-468e-a790-790f400d74f4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU for Second User" id="587f38f8-f067-4d98-bd65-62da4e2eef3d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="e79a7be2-ec41-4f54-a395-6d286d2c624a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="7a95da33-df70-4965-b665-05a288b4968b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="1407f20f-b213-4420-8609-19da169a809e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="81d327f5-98be-4180-9302-4e87b684e6fe">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="35e81218-121c-4005-bd22-6fb0f7a4667c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="49564304-aa7a-4c86-9065-7bdf0f91b326">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

/*
*  Auth context for device
*/


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="24364d93-34a5-4b0d-b653-591efec4da56">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0C0D63A291341918E05305991F0AC78A</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZdU+pIEP0rVHy0QiaBgEkJVbl83BsFdeXDqy9b46QJo8mEm5kQ9NfvTIAIiC67T1Q3PafPTHefziXHcWS5HueQCpqwyiqOGHcLb0vLUuYmmFPuMhwDdwVxR95w4FpV5OLtEa3id1va381GYNchsPQZRoFeb9aQ/hw4WHdMmJkXxLaxGchQzjPwGReYiZZmIdPWkamj5hg5bt10UaOKmrUnrTKFlEtsGVJF2obUire0uRAL1zDyPK/mtWqShoaFkGn8Hg5GZA4x1tqX6xsVidL2Jp5UAyAQRaRKkti4NPZiLgPujmjIsMhS2OQKvsqFDOQYMibgNDzTyrMQ+GyWFGYHs4RRgiP6jtX7DEHMk6DiRWGSUjGPv7yEiRSwDiuiE7POzjRjn9qJQHsMU451PsfmBuseZpACI1CZ3Pst7ey0qhVHxylmfJakMd83/xsfYEuIkgUEOt9ea0PtdMAjL9W+BOL6jEQZp0u4Uc26wAT4pppAToeq3KUwo6sB5bJBV1yxM3bpHZjr1+jSELj4PwXaKc4aZIqjDNp/fjdM7OR5aMW+9TR7in9Nc8EtchHXWwWB3eDCUZZ2bR40ZdlE6xNXbFJ/Wf3FbxPUgwGD10bw4L+dPyyFN6j1RM6i53HTqw9M+/rn9Z/zfty8vxMvUyR6VwNz2Kk/sLFHorl8hZdkPrl5BKdzPkjvDGN8Pw0f3odPvckv7/Fq+uhk18BX8S282/378bJ/Pug3fgajfIJz+9XLL64acY8ScYPDJbkO8/6Ezcd0mQ38/tOoGa+MlLfK6+zw3/dtZ36UPb8AEVtTtYHfrfRllbD4XsyUhwb6rAh1F0p8uAAmtLY6pbTDzaTc0cCVNVzbqIO6Tq/ZafzoeKbtmD1k11DTccw+8uq1nrMVmTWLA4qdhM2oyqUkd9023xMksfsMOIVU+wapiwWu3CTilt2m3kxAuqewprWrsKqtvwQ6/G+bU8YEVAVwleYHyPeCTyqOXHur4odcrONqb2zxvWBJSVnOcilJrZLdXWg5l9O0qAbVbLnMlJa7TTXEqRwFQ9EwkGWMgGRy/N7GySswowQxTtK67cUPc5f+fYaZmLORwAJi2SyVwjxhuY2Aq+XmswBWp27OvZSyDgJW4pivE8nFrBh/u7uJS1ScdN/JnzxJPy5+DGsnj7yn3G2CslBZSufePmZEDUc5ICSRsFROaJLugh8DOJZ831k+cslFiJQ+ZwK+/qeiRq+lYUKSjAm/qxWOXTkoeIq3BbgfQZ9gCsUpP0Hov3+D6LRoAQLyw4XTAl9tEpdLQBbuSMom6aGqNGqe1a13u6YUlUJV7LWqoKZZqso+u/Yn92fPzjsd9nj7Hw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>0C0D63A2D4DD191EE05305991F0A0719</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0C0D63A2D4DD191EE05305991F0A0719</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>0C0D9E7C6BCA1591E05307991F0A43E9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0C0D9E7C6BCA1591E05307991F0A43E9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_76d54ed2-fa0d-4730-bd9a-91ef18c55a1d</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="john"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>0C0D63A291341918E05305991F0AC78A</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>0C0D63A291341918E05305991F0AC78A</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>0C0D9E7872381585E05307991F0A43FF</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>0C0D9E7872381585E05307991F0A43FF</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthString</con:name>
          <con:value>841321476135740</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>nodeSavedRole</con:name>
          <con:value>urn:dece:role:device</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>0C0D6EAD42F43E70E05305991F0ACE9E</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>0C0D6EAD42F43E70E05305991F0ACE9E</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:DeviceAuthToken</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stsapi_107_1420623662652</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0C0D9E7872381585E05307991F0A43FF</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">john</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">87648</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value>john</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_1</con:name>
          <con:value>john</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87404</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_7fc46cbc-61fd-4d2e-a0c1-c5158e4413bc</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsduration</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserPassword</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0C0D63A2D4DD191EE05305991F0A0719</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0C0D9E7C6BCA1591E05307991F0A43E9</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0C0D63A2D4DD191EE05305991F0A0719</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0C0D9E7C6BCA1591E05307991F0A43E9</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>5e25b1d4-860c-4c65-b39a-9686a193bf42</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>844a08e0-1a45-4c23-91f6-6838e27c7241</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03128 - STS - DeviceAuthToken DeviceString - Standard user created DeviceAuthToken consumable - P0" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="5a2e8c0d-72a9-488a-9a2d-25053f7e7e4f">
      <con:settings/>
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="5895845a-c8fd-447e-9931-963f8de81b6c">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));


tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="3ee56bb3-8014-4247-8a6b-29c5b29b57a9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="8c41b7af-aac4-4da4-9f07-95b98833a467"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="38e508c0-7719-4763-9932-9002aebc8700"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="ac78eaae-93e1-4a1e-85aa-3c4908ddab6e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="0e1e20e7-467b-49d0-a59d-3a2190f732f7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="028e2c45-064f-4749-8b39-c06eaf952111"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="4ee8f24d-fcb0-490a-abe9-76f47947a427"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="9a45834e-e27b-44d8-b68b-ac7229ac4acc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="5192e91e-8ebf-43ea-9852-b80587cfb177"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="StandardUserCreate" id="c3c30061-f722-4771-ae3b-3112245f296b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="cc7f883d-233d-4ef9-bede-6d72db731a5a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator for blocked:tou standard user" id="05b8fd7a-9b05-4da5-b176-d3ad8ad49655">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator for blocked:tou standard user" id="29cddd50-6f2d-4b00-abc4-babab291aa30">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU for Second User" id="add5c444-a76a-4d13-a5a9-c23d6cf4b6a3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="ca16e623-51ff-47ce-bda1-aa6e9680fcb0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="a3b2e478-425a-49ec-8fa2-25af34be911d">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="28be9d66-1e8a-4b6c-af1c-bbcfdfaaabc3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="e72b48b6-4c57-4fe1-a257-587cf7174f06">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="037ba513-7a4d-4596-bec6-1877c4db5830">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="f796d9ca-d46e-477d-827d-52b7576a7008">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

/*
*  Auth context for device
*/


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="7429dace-0054-42ed-8849-a1eae0b5dd86">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0794ACA12FEE25CCE05305991F0A7E4C</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZdb+o4EP0rKH2sIB8kECJAolDa9EJpoWXbvqyMMxDT4FDbIfT++rUD5AKlXXYlpDCT8Zljz8xx6hwtIstrcQ5MkJgW1ouIci/zNrSEUS9GnHCPogVwT2Bv1Or3PKtkeGi3RCv4nYb2d61Wdgwwp8XAMJ2i7VTc4qQ6cYqTcoCqVbdilW1DhnKegE+5QFQ0NMsw7aJpyt+TaXpl17NrJcdy37TCGBiX2DKkJFdtSK15QwuFWHq6nqZpKS2XYjbTLcMw9Zd+b4RDWCCtWd/sKEvEmtt4XAoAQxThEo4Xel0/iKkH3BuRGUUiYbDNFXyXy9CNmi5jAk5mF1q+FgKfTuPMbCMaU4JRRH4jdT59EGEcFFrRLGZEhItvN2EaCrgIa1zEpk0vNP2Q2plABwwZR0UeInOLNYQpMKAYCs9Dv6FdnFe1bOkTQ5RPY7bgh+Z/4wN0BVG8hKDId9vaUjsf8MRJNeuAPZ/iKOFkBfeqWZcIA99WE/D5UIUHBlOy7hEuG3TNFTt9n96RuTmNDpkBF/+nQHvF2YCMUZRA86bS6afh/eoWubUrIca20+PpDbkd2HYjI7AfnDny0m7Mo6bMm2iz4q+bNLq6rsTL8DIYOM8fIcwf2+/+cCnYs313M6i8psv+/GNsknE/dOORyXDsT5x5atlsqRvzRdwr90Tf5G7c9ycMbvnb5XwQdMovr93f93Q4iIadym23W03d90H7cXRj2kPovM5fH7omtKO7y8E1IW/hXTT1X2eXuqDtgai8jf3xAvfdadg2/V+UXpX7L0+PjXw7e/wPfbuZHyWTOWCxM1Ub+J1CV1YJiZ/FTHlIUJxmod5SiQ8XQIXWVKuUdniJlDsSeLKGG9uo1uyrmmEZTq1rV43yteGU5f+a2TVa5rXV3onMhsURxXZMp0TlUpK7aZufCeKFNwHEgGk/IHWQQIX7WAzogLWmAtihwtr7Cqva+lug43e7nDImICqAqzRXIM8LTqh4eafix1ys02qv7/BbwYrgvJz5pSS1SnZ3puVcTtMHKgWlZLVKlJh7VTXFTM6CHC3T0Q1LHwFO5Px9PsXvQPUcRT9L7HY7P06e+w8pJiKkI4EELGS3FDLzjNttBFzdbj4NYH3u1XmQUhZCwFqc8rUjeTMrxj9e3tjDKk66H+QjjVmQb/AU1l4euU95uQlCZ8pSQvf5Z0jUdOQTgmMJS+SIxmwf/BTAqeSHzvyQcy5CMDJJBHz/pqBmr6EhjOOECr+jZY59Pch4is8leH+CvsBkkpN/g5B//wgpkqwFMMgvF04yfHWVeFwC0tmepmyTnpAVs1ZxOnbVMvZlxXVdMz+UA3bNL+6vnr1zOu7x5j8=</con:value>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0794B901965D4720E05305991F0A8881</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0794B901965D4720E05305991F0A8881</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0794B902059F4703E05305991F0A1E2C</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0794B902059F4703E05305991F0A1E2C</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_99350e1f-d015-4568-b7b5-b3da77862340</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="john"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>0794ACA12FEE25CCE05305991F0A7E4C</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>0794ACA12FEE25CCE05305991F0A7E4C</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>0794AA54424A25D4E05305991F0A9488</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>0794AA54424A25D4E05305991F0A9488</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthString</con:name>
          <con:value>841321476135740</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>nodeSavedRole</con:name>
          <con:value>urn:dece:role:device</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>0794B77C154514A4E05307991F0A034F</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>0794B77C154514A4E05307991F0A034F</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:DeviceAuthToken</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1415705878281</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0794AA54424A25D4E05305991F0A9488</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">george</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">87648</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value>george</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_1</con:name>
          <con:value>george</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87255</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_32630898-01b9-4eeb-9ed5-88b6b2e8cf3d</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0794B901965D4720E05305991F0A8881</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0794B902059F4703E05305991F0A1E2C</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0794B901965D4720E05305991F0A8881</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0794B902059F4703E05305991F0A1E2C</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>39e8496c-281f-4a84-be8e-9b2e63fa112e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ac8f5df6-aba3-4adb-a9e5-62ddfc624255</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06011 - STS - Device - Assertion grant standard user with expired assertion status active - P0" searchProperties="true" id="abd241fa-1f8e-46f6-b217-154753642ddc">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="90058506-f300-4802-923e-95ac50958456"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="15b0db8b-f562-4bdc-8df1-c75bc24e23ac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call First User Create" id="e3369390-30a8-4dd3-a693-7cf37220fdb9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="1ba3c2d5-89e8-43a9-aae9-ab9dd53d3414"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep>
      <con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="fb9bdcdd-43f9-4dd8-b1b3-5882011d864d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="0357ffcf-3649-46ab-96ab-cc40e63c86ef">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="65e41c06-1ecf-4599-8cd8-ad1bbfbcc154"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="99d3c86b-22c9-4771-9860-efcea78daba1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="cd7b668d-0bcc-4ac0-9ed0-4535ce3a09fd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="ad129ae7-8d98-4091-9390-0845d7a3740b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate" id="49eb5293-34a5-441f-b194-13ba87097b4c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="5dbc7bc9-c4e2-4135-89ea-e11ba984fc81"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator for blocked:tou standard user" id="b33ec931-f03a-4935-91ba-4d1ea4d40621">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator for blocked:tou standard user" id="e5ee91c3-8276-4e6a-9b11-2997f89b0d67">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU for Second User" id="48dc1c1b-3e25-438e-9f58-4dc6f1b173cb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set tokentype deviceauthtoken" id="9c796937-bfcb-4b25-b482-3a58e84bd26b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="72bf9fc7-9898-46cf-a43c-1874203a4505">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Copy of -- DeviceAuthTokenCreate - DeviceString" id="e3e8a2d9-2c68-46c5-b131-f91c27e3c357">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Copy of Get the DEVICE_AUTH_TOKEN" id="491b5f80-5029-4233-a2bc-a60d6804fccd">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="fdf536c7-5e5f-4cee-8e65-f8e068fb2f4f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="5ae4e3bb-2f79-44dc-98c1-43e81e3f856e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="47dfe611-69cc-47e1-af0d-22bed08dad41">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Expire the existing assertion" id="96275c99-9e71-49b0-ba39-55990812da82" disabled="true">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def nodeid = tP.getPropertyValue("nodeDeviceDefault");
def assertId = tC.getPropertyValue("assertionUUID");
def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();



if (counter == 1) {
	log.info("Expire existing assertion")
	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	log.info "nodeid[$nodeid]";
	assert a.samlExpireAssertion(assertId, nodeid) == 1;
	log.info("Assertion : '" + assertId + "', expired successfully");
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Execute another STS API call if necessary" id="a546022d-7e02-472b-81ae-6ab71de757e0" disabled="true">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS Get");
} else {
	if (counter == loopuntil) {
		tC.setPropertyValue("counter",counter.toString());
		testRunner.gotoStepByName("Call STS Get");
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="5d85c77e-36e8-494b-970e-4039891f740a" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">07A82A87CF7E2BC9E05307991F0A29FB</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZRU+o6EP4rTH10Spu0FegIMxXQwzmCCOh1fLkT0hSCbQpJCuivv0mBHkD0cO4Ts8vm2y/Z3W97LVASQz8QgnBJU1ZaJzETfu6tGxlnfooEFT5DCRG+xP4w6N77sGz7aHfEKHVadeNfpwq9mlvzTNdGxHTHqGoij1RNWEFuLapVMXQ9FSpERjpMSMRk3YA2cE0ATABHwPY9x3dgGXrg1Sg9Ey4Utgop28aW1FrUjamUc9+yVqtVeeWUUz6xoG0D66V7P8RTkiCjcb25UZ6IN7bxuBwSTOIYl3GaWNfWQcx1KPwhnTAkM062ucKvctmWXbNUTCjo5MIozpKww6I0N5uIpYxiFNMPpN+nS+Q0DUtBPEk5ldPky0sAWwObZI1NDFx2YViH1M4EOmDIBTLFFIEt1oBEhBOGSelp0KkbF+dVLT864oiJKOWJODT/jg9hSxKncxKaYnetLbXzAU+8VOOaYL/DcJwJuiQ93axzhInYVpPg86FKfU4iur6nQjXoWmh21j69I3PzGi06IUL+nwLtFWcD8ozijDSyVvA4YXx29U/LvY+bd/B9BvrV5gRH7XpOYD84dxSl3ZhHTVk00ebEcnT7827WX1Wf45d4wMfu5ccYrJozsASRB/FzP4oGvcvgrTcL7BexXOPHhLYWl3KOnmO3LXu97ss0o7+eFrXRKxzevIag0wVP83knevPA24/pz2ZsPTlWr7oCTj++9djd5aD30BtPZj+WyUt0s+5P6bL6CywuQ5LOb9JFshovHz2lDOnVfDYYLbqCZ6O7j+nN9rpH/A99u5kfZuMZwXJn6jbotEq3qkpIfi9m2kNDM8pD/bkWHyEJk0ZDn9La4WdK7mjoqxpubLsSVB237cDbdtuF8Kpte45dqdXArR1A6Lg7kdmwOKLYTFlEdS4tuZu2+Z4gTvwxQZxw4xukFpKo1EvlA3vgQSQJP1RYZ19hdVt/CXT83y6nigmpDhA6zQ1R70VOqDjcqfgxF3ha7a0dfhAuKS7KWSwlpVWqu3MtF2qaFqgclrPlMtNi7lf0FHM1C5YaZmANCc7U8L2P0jfCrALCOkvpdtc+zlz4D/llcsqGEkmSqFYp5eYZq21IhF5tHRaS9bl78yClqoIka3nK14zVWtaMv93c2Mc6Trn76meV8rC44CmsvTzqnmqzScom2tIq9/57QvRoFOOBUwVL1XymfB/8FMCp5IfO4pELLlJyOs4k+fqfkh68uoEwTjMmOy0jd+yLQc5Tvs+J/zvoE0yuN8UHCP3zF4hJ8xbARH22CJrj6z3iCwXIJnuCsk16QlNgsxJcuRA09zWlFlSqxaMcsGt8cn/27L3TcY83/gM=</con:value>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_38259495-40ae-4ba8-a5e8-27a49f98c245</con:value>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:DeviceAuthToken</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1415789565292</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">07A82E3F8E3146F0E05305991F0A1A0A</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>87648</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">07A834E2C7A6421CE05307991F0A9A78</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">07A834E32FEE4226E05307991F0A2234</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:07A834E2C7A6421CE05307991F0A9A78</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:07A834E32FEE4226E05307991F0A2234</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86814</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/_0879f17f-4af4-478e-983a-88e0104bfa6b</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>07A834E2C7A6421CE05307991F0A9A78</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>07A834E32FEE4226E05307991F0A2234</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:07A834E2C7A6421CE05307991F0A9A78</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:07A834E32FEE4226E05307991F0A2234</con:value></con:property><con:property><con:name>authTokenStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>authTokenStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rauthToken</con:name><con:value>07A8336DEAFF5775E05305991F0A2469</con:value></con:property><con:property><con:name>rauthToken_1</con:name><con:value>07A8336DEAFF5775E05305991F0A2469</con:value></con:property><con:property><con:name>authTokenCreatedBy</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedBy_1</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedUser</con:name><con:value>07A82E3F8E3146F0E05305991F0A1A0A</con:value></con:property><con:property><con:name>authTokenCreatedUser_1</con:name><con:value>07A82E3F8E3146F0E05305991F0A1A0A</con:value></con:property><con:property><con:name>authTokenCreatedAccount</con:name><con:value>07A82A87CF7E2BC9E05307991F0A29FB</con:value></con:property><con:property><con:name>authTokenCreatedAccount_1</con:name><con:value>07A82A87CF7E2BC9E05307991F0A29FB</con:value></con:property><con:property><con:name>authTokenisGen</con:name><con:value>Y</con:value></con:property><con:property><con:name>authTokenisGen_1</con:name><con:value>Y</con:value></con:property><con:property><con:name>deviceDeviceString</con:name><con:value>rjkfIi32IkdrBwhKfqSLcY0vNNQ</con:value></con:property><con:property><con:name>deviceDeviceString_1</con:name><con:value>rjkfIi32IkdrBwhKfqSLcY0vNNQ</con:value></con:property><con:property><con:name>deviceAuthToken</con:name><con:value>rjkfIi32IkdrBwhKfqSLcY0vNNQ</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>ebca66cc-aa96-4d28-ac7e-e6852d016656</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>353ea21d-d208-425e-8d6b-92998dd74e21</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb7a6dda-6239-4615-b427-9e16cc0c1729</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d15ff55d-c013-48f7-a013-4ece611f2b42</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>30435143-ac15-48a5-be2d-780630f193d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c796937-bfcb-4b25-b482-3a58e84bd26b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>72bf9fc7-9898-46cf-a43c-1874203a4505</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e3e8a2d9-2c68-46c5-b131-f91c27e3c357</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>491b5f80-5029-4233-a2bc-a60d6804fccd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fdf536c7-5e5f-4cee-8e65-f8e068fb2f4f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06021 - STS - Device - Assertion grant basic user with deleted assertion status blocked:tou - P0" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="db199adf-62fb-41dd-ac95-a0debb33f489">
      <con:settings/>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="de6d5e08-8564-4aa3-81b3-14c0d53b8e86"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrTypeRightsTokenCreate","UserNotActive");
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("stsduration",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("Username",null);
tC.setPropertyValue("UserPassword",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="ad9c06c8-8f28-48fa-b510-2c6547d04470"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call First User Create" id="ead30755-db43-41f3-985b-92fe44520535"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="ba2b3a33-6e07-4ad7-8538-4896a55a14ba"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="7262a13c-ae53-40e5-90b3-55c9ba43a9e4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="35002fd2-e59a-4641-981a-3a313e768fba">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="89e804ce-3fe0-4d86-af1d-9d8ed28af0f5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="e83bf886-fe55-4d3c-8861-ec0311955c8e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="9560ddd7-d3ec-49f1-8b9b-e882cdc0b6a3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="996d692f-6d4d-4b92-bc27-362069ef5082"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Basic UserCreate" id="6ab70b2f-b9a1-467d-b85f-655e2c8efc8b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("BasicUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="65613488-a04d-43bc-b9a4-3252e3b470bf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="78f48cdc-0d2a-4e2a-ab36-7bcfe2b79dd7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == blocked:tou" id="bb853915-d6f9-4483-8ebd-cf45e2a433ed">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );
assert a.userSetStatus(useroid,"blocked:tou") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="fe7c0476-a840-4de8-a903-cc439a049d26">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="89daa2f7-105d-4bb5-b3ba-284a64750c94">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set NODE_USER_SAML_ASSERTION.STATUS to deleted" id="c799fc7b-660d-4612-be5d-a287c557b36b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def nodeid = tP.getPropertyValue("nodeDeviceDefault");
def assertId = tC.getPropertyValue("assertionUUID");
def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();



if (counter == 1) {
	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	log.info "nodeid[$nodeid]";

	assert a.samlSetStatusDeleted(assertId, nodeid) == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Execute another STS API call if necessary" id="5b6f364a-21f0-4452-a71f-2d29509b185c">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS");
} else {
	if (counter == loopuntil) {
		tC.setPropertyValue("counter",counter.toString());
		testRunner.gotoStepByName("Call STS");
	}
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="264487e3-6601-4964-85d1-59137d7eb396">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0BA9006510985A32E05307991F0A8A57</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZtU+o6EP4rTM9HpzRtgb6MMMObWhVEUa6HL3dCmkKQppCkgPz6mxToAUQv937R2WXz7JPs7rO95jCeWX6dc8wESWhhHc8o9zNvVUsZ9RPICfcpjDH3BfL79c6jbxWBD/dHtELQqmp/OyMLVjzT0cORW9FLuOzoLowcHTgorCDPhqBiylDOUxxQLiAVVc0CZlkHpg6sV+D5tuNbXtEFpaFWGGDGJbYMKQJtR2rNq9pEiLlvGKvVqriyiwkbGxYApvHeeeyjCY6hVrve3ihLxGq7eFQMMcKzGSqiJDaujaOY65D7fTKmUKQM73KF3+UCBvAMGRNyMv6l5WdxGNAoycwmpAklCM7IBqr36WAxScJCfTZOGBGT+NtLmEAB63iNdGSW6C/NOKZ2IdARQ8ahzifQ3GG94AgzTBEuvL0EVe3XZVXLjr4ySHmUsJgfm/+ND6ZLPEvmONT5/lo7apcDnnmp2jVGfkDRLOVkibuqWecQYb6rJkaXQxV6DEdk/Ui4bNA1V+yMQ3on5vY1WmSMufg/BToozhZkAGcprvUt7+bZ7NrOIg7u3fEgHfJpc8MHdq9ezQgcBmeOvLRb86Qp8ybankiixbh9734y1u22S/fidbpx3z4Xi+nNw9P07bkHpiYTdzeGMR39FrdiGpGrq+ELJOhtE1iNh+er/tOoMZkbHxto3y2Wwzf8QGPrFaWd+95iVXEf35OKvSg9tr3JrHL314fzkvxmTZq84MBeJlcdBsRHvIzuBuvbWz68eo9vHwabBS4FbsnqdbpLZ9TomlE8HY521z3hf+zbz3w/HU0xEntTtUHQKtzIKkHxs5gpDwn1KAv150p8uMBUaDV1SmmHn0q5I6Eva7i1QaPutksl+dezrXIJtEHZBmXPM29A3WlY7l5ktixOKDYTGhGVS0nutm1+Johif4Qhw0z7AakFBSx0E/FEn1g9EpgdKaxpHSqsautvgU5/2+eUMSFRAVylaWD5XviMipt7FT/lYp1Xe2OPXw+XBOXlzJeS1CrZ3ZmWczlNC1gMi+lymSox9x01xUzOgqF4GMAy+hilcv4+X5MPTI0cxbhI7PY3P02e+48ppmJC+wIKHMtuKWTmBdutj7nabgEN8frS1XmUUhZC4LU452vO5GZWjH9c3shHKk66e/LfKmFhfsFzWAd55D3lchOEjpWlhO7zz5Co6cgnBCUSlsgRTdgh+DmAc8mPnfkj51yEYGSUCvz9LwU1e1UNIpSkVAQtLXMc6kHGU3zOsf8n6AtMJjn5Nwj5948QnWQtgLD8cuEkw1erxOcSkI4PNGWX9Iys2C3Hq1tl4B7KSrtZzmXlmF3ti/ur5+CdTnu89g8=</con:value>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_7b2a6917-db86-4e57-8af7-07cd6c93a061</con:value>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>USER_NOT_ACTIVE</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stsapi_107_1420191500054</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0BA912A861005D1BE05305991F0A6C09</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>87648</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>0BA8E443D79A2508E05305991F0AEC58</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>0BA8E44BA8932540E05305991F0A7B28</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0BA8E443D79A2508E05305991F0AEC58</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0BA8E44BA8932540E05305991F0A7B28</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86824</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value>UserNotActive</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.q.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/_b1d1dbe4-4296-4f22-889a-6b5ed9701554</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsduration</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserPassword</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0BA8E443D79A2508E05305991F0AEC58</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0BA8E44BA8932540E05305991F0A7B28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0BA8E443D79A2508E05305991F0AEC58</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0BA8E44BA8932540E05305991F0A7B28</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>80e82a8d-b53e-4862-906f-2998cd26196d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SeeDiscription_TC_DECE_06022 - STS - Device - Assertion grant for full user login in blocked:tou status - P0" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="411850cc-b1ac-4427-a5cf-1319fa18a7ac" disabled="true">
      <con:description>Sent mail for clarification (Subject - STS-Post throwing Forbidden: on DHost for user in blocked:tou status but on replay throws 201 Created)
To : Kalyan,Utkarsh</con:description><con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="eb0eb0b4-7765-4986-bfb0-f6ce3a214769">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeRightsTokenCreate","UserNotActive");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="d72dd964-ac5b-4e3a-9fed-2800fe681cc8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="ba464363-5019-44b0-b092-02aefcfecc93"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="c85ad2d1-d28e-40b3-b44d-7589adfc15db"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="916f00e0-60e0-47db-bf10-df50454a656c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="b18fbe08-1f49-4b18-8e7b-4b61c5e695ab">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="4bf6fb3f-84b2-4438-afab-14fee686e8fb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="738e9188-fce8-4628-83d3-8ccc4a2b4267">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Generic API Test Cases").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0BAC1452C10865A7E05305991F0A0EAA</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN:1119</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1420204411856</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0BAC147E96BD65A3E05305991F0A7827</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>87648</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value>UserNotActive</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86825</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_4d25e176-0a70-4639-9b6e-105fa02ced85</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0BAC1452C10765A7E05305991F0A0EAA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0BAC147E96BC65A3E05305991F0A7827</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0BAC1452C10765A7E05305991F0A0EAA</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0BAC147E96BC65A3E05305991F0A7827</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>ad705bb9-89b7-45c5-b1f5-6b6cc87cf07c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06068 - STS - Device - FORBIDDEN - Device Basic auth header not supplied - P0" searchProperties="true" id="e165595b-fbdf-4579-ae71-8dcf081cf4b6">
      <con:settings/>
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="a48c1ea9-df7d-4bd0-a978-44ba3a497dbf">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("actionDeviceAuthHeader",null);
tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="0f98d1d9-2585-48e5-af50-61b05acead75"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="d0687ace-8748-4c6d-a7c7-7f4dbd00ec44"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="ac505066-9e91-409e-80bb-9a39589f814e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="b7799623-87c7-4eea-8738-6d2330033644">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="bc5cf448-8b05-40e2-9eec-cf2684e8a166">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="22cf2560-afc5-4645-bd1b-9915cc24900d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="0430755e-2b61-4d1b-82a7-c60524bbb646"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="198da91e-6a14-48be-bcde-cb842c3af0e7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("expectErrType","FORBIDDEN");
tC.setPropertyValue("actionDeviceAuthHeader","EXCLUDE");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify no Node/User Level Assertion Data Exists" id="ef2a98c3-2055-4e6b-b054-55c9fb561b82">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Verify no Node/User Assertion Data Exists")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0BAC4993A3877A3EE05307991F0AE956</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZZb/I4FP0rKH2sQjbWqCCxfqItXYAumpeRcW4S08RJYwdCf/3YAVJCl2HmKfLN9bnnLj72FUNhYNo9xiDhJKKVLAwos3NrR0kTakeIEWZTFAKzObbnvemtbVZ1Gx22KJXJsKP83YD2sm0altqqQ12tmS1HbS1xSzUNt4b0OmDHbQtXxlKYUMYR5R3F1I26qhuqbi4MyzYbdk2vNi3rL6XyDAkT2MKlqit7UhnrKD7nsa1pm82murGqUeJppq4b2uv0do59CJHSvdpllAdKunt/XHUAQxDgKo5C7Uor+Vw5zJ4TjyKeJrCP5fwUS9f0tiZ8HEa8C6XYC86EulG+HCAaUYJRQD6QrM8UuB85lV7gRQnhfvhjEoYugVXIsIqNGr1QtDK1M4FKDBOGVOYjY481AxcSoBgqT7NJR7k4r2v51kWCKHOjJGTl5X/jA3QNQRSDo7JDWntq5wN+U6nuFWB7QnGQMrKGOzmsMcLA9t0EfD5U5SEBl2S3hIkBzZhkpx3TO1nuqjEkHjD+fxp01JwdyDMKUuhmj4+P6Ll37caLGA1qjdrIi+lw5fg3j52cwLFzbihau1ueDGUxRLsdb/FHfB3X/LnvuetXtmHb2YvZ8Ez04fpj0xtdP43nf578u0vDeG+YL/Hd7Dnu48tZOsHLsDGdvY39KZs+3L+0iJNZrZaJtuv3aX9jvq5HJFwPUM+YX8/qsz/TVXuzerl5H2TBaMNH1nCLn+77rneHny/vZ9qimcU3gsLlNXw0LGOcZXhsfKxC/DAV3WzWxs5Tp0jniH/Zdjjz83S5AswPSzkGk2FlLLqE+O9iJi3EUd3c1Y6l+DAOlCtduUtqh50KuSOOLXq4W+v93qDW7g9aZr/Z7FmtkV639Ga7bYz1ntXsDQ8is2NxQnEQUZfIWFJyd2PzO0Ec2gyoA4m6jlKhdEz5BXGIOKpM6EwcgogyWERCnl3vvRbpZstrIw+SdNla1f2kZglJvov4Pb1Pei6HpCzJjZIkzwCTmIDUbTnWTMw146IU72id8sCorlGVQiqUPZEia5u1Vl1jJIwDkES1MHLSAKqxH+eF0djua6oIs9w6Gy3yw/ZjWqf/DhUQPg6RDkzm0gfRRfjmbrEOifyccPs44QN8L3WIPFeinDwheMek/OtzSuR4FCMiMjpQLjxPDSVU7TShIpCzJriY8+K2FiIujn330I64+l5N1+s0r39Tqlsi0DWZoaab2hxwKnRpu4jegGoFiHbWJVDwPold2MsMU+7TOUccQjEwlXx5xq0/ByZv/YkY9OzcJ0UppKgch4x/ZxsE4sUiGf/6qME2ln7C/CA+myhxPhv2DdZRHJGnuPQ5oZ5cyQtg+8NY4EjAEiFdUXIM/h3Ad8HLxqLIBRcu5mmZcvj5T0VqUkdBGEcp5ZOhkhuOdTLnybcx2J9OX2ByKS7eZuTfH2cqyUcAg3jRMZLjyyvWlieAekdauw/6VW7bllDahpDb0bHcjtr1RlGUErvuF/NXy1GdTme8+w8=</con:value>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_6e9b9213-85e5-428d-8bc8-21f4a05ecdf9</con:value>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1420205305185</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0BAC49BC82B87A38E05307991F0A37AD</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>87648</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0BAC4993A3867A3EE05307991F0AE956</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0BAC4993A3867A3EE05307991F0AE956</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0BAC49BC82B77A38E05307991F0A37AD</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0BAC49BC82B77A38E05307991F0A37AD</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0BAC4993A3867A3EE05307991F0AE956</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0BAC49BC82B77A38E05307991F0A37AD</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>actionDeviceAuthHeader</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">EXCLUDE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0BAC4993A3867A3EE05307991F0AE956</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0BAC49BC82B77A38E05307991F0A37AD</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>7489a458-a126-4dd5-a8ac-50f182261478</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SeeDescription_TC_DECE_32028 - STS GET BasicAuth - Device - Assertion retrieval for full user login account in pending status, user blocked:tou status - P0" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="0f208ab0-0022-4d85-bc55-fe3053f2b643" disabled="true">
      <con:description>Sent mail for clarification (Subject - STS-Post throwing Forbidden: on DHost for user in blocked:tou status but on replay throws 201 Created)
To : Kalyan,Utkarsh</con:description><con:settings/>
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="9ef6adc1-d32d-4ff1-9a9f-4ea315e9a18b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeRightsTokenCreate","AccountNotActive");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="4f5dcc6b-031d-4d74-a1a2-f4c9a4d6ddde"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      
      
      
      <con:testStep type="groovy" name="Call First User Create" id="82878846-b0e0-4470-947e-b0729b9f44fe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="ef8a264d-ae51-4a21-9aa0-15df1119d65c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="2582bfb5-384b-4572-96db-b56344cd2722"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="21f4ae01-1b10-415c-a915-819da5af0575">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="0843eff4-53cd-4016-9b68-dc00d710a4b7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="705930d2-ef8f-40ef-a673-9b57d7aa5466">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0BAC671FD8C65C1CE05307991F0A9258</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVbbcuI4EP0VyvM4ZXzBBuwKVIEhGc+SKySTycuWkBtQsGVHkoHM169kwMHksuw+udRudZ/uPjrSGUdJbPs9zoEJktLaJokp9wtrR8sZ9VPECfcpSoD7Avvj3uXIt+umj/ZbtFo46Gh/27bjNRBCujuDpu60TFv3Gs2p3p4ijMwm2LhlSVfOcwgpF4iKjmablqublm7aE6vhNxzfbdQtx37Sag/AuIwtXeqmtgO14R1tIUTmG8Z6va6vG/WUzQ3bNC3j8XI0xgtIkNY921ZUJGLdnT+uR4AhjnEdp4lxZlR8ziLuj8mcIpEz2OWKPstlGqZnSJ+Ik/k3rdwLUUhnabEMEE0pwSgmf5DqzyWIRRrVevE8ZUQskk+LsEwVWIcN1rHl0G+aUYV2YqAKQsaRzhfI2sW6gxkwoBhq93dhR/t22tSKrROGKJ+lLOHV5X/DA3QFcZpBpPN9WTtopwf8oFPdM8B+SHGcc7KCK0XWDGHgu2kCPj1U7YbBjGxGhEuCbrhCZxzCO1puuzEgc+Di/wzoYDjbIA8ozqE7jGfTVosl3u18E/61iAXY94/2r/Ft83enAHDoXBjK0W6XR6QsSbTdgeZPzo/BTdBvz91sOWyy62VAg9ublbeBH0sjHDUmf0b8cdNGfNEPno1p8wIP8tYFbV5kL+x3Oppd/7zqw6VxPgxSp3X1JwzdLH8NIV43Jrft+4fEfc6+O9CbJD+zH8Evdv9z8rRCwbrtTXlqzcP+FVu3vrcb874zWl40Xl48MnnAzujmAa6X+ZPbCrxsAqPvYHbKcg7wV237Mz/Op8+AxX6paBAOaudySkh8LWbKQiJ9Vrj6mRIfLoAKrat2Ke3wcyl3JPLlDLdrs98Lmi3bHVpDzw3s5tB0G2bL86xzs9fr9ft7kdmiOIIYpHRGVC4luVvafA0QJz4HGgHTV2kulY5rX0QcIIFqIb2ThyClHCaplOdpmkl2JKyJo2ePIps4U7JsLplWu0rFNb1mvZkAVpXkZkWS7wCTjIDSbUVrLnnNhWzFC1rlIrbqK1SnkEtlZ0pkfdtpuwYnSRaDAmokaZTHUM8WWdEYg2+/to4wL6x3w0lx2D4t6/jfvgPSJyLKgata+iCnCB/cLc6+kM8L9g4L3ofv5RFR50q2UzCCt0iqv95YouhRUkRWtIdceh4bKlGN44LKRNGK4JLn5W0tRVwe++5+HC+o/lLPV6u8GEBLyRuT4Q1VomHaxhhwLoXpdZIugRplFOOkW6AEfpS8tFch5mJBxwIJSCRjasXyhGt/DFxd+6Fk+ubUN0UlpWydgI34yBbE8smiEH/5qsE+Vn7SfCM/65RFbxP7INZBHlmnvPUFoXO1UjfA6ye8wKkMS6R2peww+EcBPkpeNZZNLrEISahpLuDzPzUlSh0NYZzmVIQDrTAcCmWBU7xm4L85vQtTaHH5OCP//jrTSUEBDPJJx0kRX92xvjoCdH4gtruk7/XWOh+0A9cNrOBQbz3bbZdNqaDrvjO/txz06Zjj3X8A</con:value>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_22493aaa-5fe6-4702-936b-8baca06e2c71</con:value>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>ACCOUNT_NOT_ACTIVE</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1420205801061</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0BAC6725E1EA5C26E05307991F0AAABB</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>87648</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0BAC671FD8C55C1CE05307991F0A9258</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0BAC6725E1E95C26E05307991F0AAABB</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0BAC671FD8C55C1CE05307991F0A9258</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0BAC6725E1E95C26E05307991F0AAABB</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value>AccountNotActive</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87383</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_08f85930-0f92-4424-8662-2be51d5f0e34</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0BAC671FD8C55C1CE05307991F0A9258</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0BAC6725E1E95C26E05307991F0AAABB</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0BAC671FD8C55C1CE05307991F0A9258</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0BAC6725E1E95C26E05307991F0AAABB</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>ad9eebe8-9f27-4f9f-b875-b619a65b23a6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>997fd375-2c03-47bd-bc26-3ea32892eb20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="3_P1 Test Cases" id="d054bfe0-511f-4098-93f5-18b59ba9bc7c">
    <con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop/Reports New</con:setting></con:settings>
    <con:runType>SEQUENTIAL</con:runType>
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03102 - STS - DeviceAuthToken JoinCode - Standard user created DeviceAuthToken consumable - P1" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b4666155-76d5-46ee-9a1a-1b3a4ae2c1f1">
      <con:settings/>
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="0bf36fcb-20d3-4134-9a85-c73842512285">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));


tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="75e2cbd6-ab7e-47b6-a13c-0e1536232c78"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="77c915c0-79f7-4da8-98e8-72b95d40b5cc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="8e38f7d1-98c8-4de7-8da9-fefb53bf71c2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="de60935f-545b-49d5-b78f-a9e49a7b1725">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="50485d28-380d-42bf-a299-e9b6772cc7ba">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="1e5d9de5-07b8-43cf-869f-74f6987a9130"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="8bf9fe1a-a227-4dfa-9498-5ad2aa98e455"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="0b7c5349-6a33-44cb-b290-3aac6baf1a61"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="ef7af7a4-be29-4da4-9e51-6e0fe4f564e2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="StandardUserCreate" id="ac995289-fbf1-4ac2-9629-7384b9eea2da"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="5f6104b4-eeab-4067-ba9d-df9f28a3f939"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator for blocked:tou standard user" id="d1cfe308-145b-491d-bef9-7c4016a03f5b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator for blocked:tou standard user" id="175123b8-aa24-410d-bed3-14292563b5f7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU for Second User" id="f550b896-f6a4-4261-904a-cfa278ee230f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="0955141e-69cc-4385-961a-d25909f06e3f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="07c3f293-ca9e-47af-b892-3d3eebc66c70">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="c31f879f-ab13-49f8-8c9e-960387eabc48">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="3ca722e6-c040-47cf-bbbb-b823905d0151">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="eb7dc302-5014-40e7-8f9c-6dc900a90ea6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="65982ddf-6242-41ca-9d7f-10b95e5f1460">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

/*
*  Auth context for device
*/


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="aaed337b-a6c8-430e-8573-721436f421df">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C418554E3483DE05305991E0A013E</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="769378358734160"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F8F12CE3EF499252E0401F0A07991D28</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F8F12CE3EF499252E0401F0A07991D28</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F923A024EE1B2BBCE0401F0A05994207</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F923A024EE1B2BBCE0401F0A05994207</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthString</con:name>
          <con:value>841321476135740</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeSavedRole</con:name>
          <con:value>urn:dece:role:device</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F8F12CE078CB20F8E0401F0A07991D39</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F8F12CE078CB20F8E0401F0A07991D39</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968544862</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C44FB91BC486BE05305991E0AD7F6</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">6</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87252</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_7a128585-5c09-4bc2-8bf9-d464368fcf42</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C418554E2483DE05305991E0A013E</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C44FB91BB486BE05305991E0AD7F6</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C418554E2483DE05305991E0A013E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C44FB91BB486BE05305991E0AD7F6</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>b1420b8d-4104-4a73-b6a1-6065583c0877</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>79ff3196-0be7-48c2-b9b7-2202523e1cf1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dffcdaf0-c948-4afb-bf12-19803bc7ad1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>27ce0955-39ba-475c-bc35-0722d891e361</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>471a1bea-be7c-46fc-beec-fb01ce0141d8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>09e8f10d-811f-4b41-8e25-0136336f4fe5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2b987982-a71c-420c-ad40-a42605a580f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1dcf26cf-1c68-4b42-bf9f-7ed91f26bf3e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>84e5474e-92cf-465b-bcc5-9de67b007aa0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bbef3319-a8c3-4b23-a71f-f00bdab7ebb1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03103 - STS - DeviceAuthToken JoinCode - Basic user created DeviceAuthToken consumable - P1" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="dc99fade-539c-4937-8333-2a3aea5c87de">
      <con:settings/>
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="4ca474fb-0273-4741-86eb-233242ed5e2b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));

tC.setPropertyValue("stsduration",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("Username",null);
tC.setPropertyValue("UserPassword",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="14cbf08f-bc64-4d55-a9e3-51accc33c607"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="4b6ed4e6-c148-4676-9ccd-4c1cbfc0a229"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="91a2159a-0b55-4d77-a504-498471eefbeb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="3868ce4e-e94e-4660-92a7-de3b0bc68494">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="795bc36d-687c-4632-ac3e-908d2404152a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="2d9ca9fb-f902-412d-ae4d-06e081dbcdf3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="f5318c17-3299-442e-9aca-1576587e0bc3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="5d8c387f-d0dd-4a02-b54c-a2b61cbfed1e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="ce0cbcad-6de6-47c3-8c19-e86e18de63b3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Basic UserCreate" id="987a3147-8409-4c26-bafe-8ac330879fa6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("BasicUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="a1620228-a74b-40ca-8e0f-9532cedec314"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator for blocked:tou basic user" id="cf1f1a55-047d-498a-a80c-555c9f129b8f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator for basic user" id="7367b889-cb4d-416f-8593-af9e0c885015">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU for Second User" id="e36ace85-6b21-42e4-aec3-03ece8596863"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="ca12f993-438e-41af-aebb-4f5546b24835"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="5d0ace00-0e77-43ca-b5df-d827c6ed9410">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="948e5616-7590-4495-a77f-c8b45943b642">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="6e9321f1-bd52-4699-9fa2-c7284b689e48">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="55213b81-467f-47b3-b039-be35a7c27ba5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="bc4b2def-482a-4723-80ec-1d73174878db">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

/*
*  Auth context for device
*/


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="5e7f15ea-f5a4-41a2-8c5d-2da93fd20306">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C516BA390157AE05307991E0AEC9E</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>F9239F3562A741A6E0401F0A05994201</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>F923A071C6A2B56EE0401F0A059941FD</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="919882819561762"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F9239F75415F6E7FE0401F0A05993BDA</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F9239F75415F6E7FE0401F0A05993BDA</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F8F4D466D586F2E1E0401F0A05991C52</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F8F4D466D586F2E1E0401F0A05991C52</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthString</con:name>
          <con:value>841321476135740</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeSavedRole</con:name>
          <con:value>urn:dece:role:device</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F9239F7541686E7FE0401F0A05993BDA</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F9239F7541686E7FE0401F0A05993BDA</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stsapi_107_1409968548787</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA694898001AEE05305991E0AC5D5</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">66130443</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">6</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87253</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_089ab572-b5e3-4d6c-9d79-6b50f8f49336</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsduration</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserPassword</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C516BA38F157AE05307991E0AEC9E</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA694897F01AEE05305991E0AC5D5</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C516BA38F157AE05307991E0AEC9E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025CA694897F01AEE05305991E0AC5D5</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>65f81196-f031-4776-be82-d93d68b4b84e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>18a670cf-7c38-4313-b121-cb347e72efc3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eb7b0fcb-4ca1-493a-86ce-54e5989bfc40</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eb6bf8ee-4fb4-4e99-b2e6-575d9dd5d157</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03104 - STS - DeviceAuthToken DeviceString - Full user created DeviceAuthToken consumable - P1" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c4fb62c2-e347-4b2d-b9c7-948a3a9caa1b">
      <con:settings/>
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="94132e62-7994-4e95-9074-ae52d0bce745">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));


tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="83fa2fc7-fbd1-49f2-a120-56d9264e20d3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="dded190c-f1e6-4e96-ac3c-3077d398faf8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="f3925c6b-02ca-483c-89bc-eb7d95b44a1f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="4ec2d682-4a9d-4b18-b181-6181a544f991">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="2a51a317-7937-4024-832e-44a2aa88a297">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="eeac64e5-f505-4ffb-94f2-a3e7790bedb8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="d068ea54-1170-43de-b12d-d6337b6bcd5f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="f245cde0-c93f-4713-80e5-d6b399848eb1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="e29f712f-6c8f-4589-8785-af93eda188eb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="80b343cf-b87f-43e7-9772-996e4c0bdadb">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="47a7245b-f306-49ae-abd8-072bc6d144d5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="bc0154f2-6823-40ce-9096-8fcf076c2520">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

/*
*  Auth context for device
*/


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="11eeb9fc-b002-4986-8125-20ee5611f400">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C40657ADD483FE05305991E0A32A4</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="george"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F9239EBFE9D8A148E0401F0A05993BD6</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F9239EBFE9D8A148E0401F0A05993BD6</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F8F12D3257C8D98EE0401F0A07991D37</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F8F12D3257C8D98EE0401F0A07991D37</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthString</con:name>
          <con:value>841321476135740</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeSavedRole</con:name>
          <con:value>urn:dece:role:device</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F923A2E97A8D20E9E0401F0A05992FF9</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F923A2E97A8D20E9E0401F0A05992FF9</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968552921</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4196DB034855E05305991E0AC577</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">6</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value>george</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_1</con:name>
          <con:value>george</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87254</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_f3b03711-2e41-41c8-aadb-35a2bae11a34</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C40657ADC483FE05305991E0A32A4</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C4196DB024855E05305991E0AC577</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C40657ADC483FE05305991E0A32A4</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C4196DB024855E05305991E0AC577</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>7387c943-b174-4b2f-8855-a3521ab7c461</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40f9c1b2-2c3c-4cca-8b6e-c6aea97c450a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7968126c-e3ba-498d-9254-3e1985ea9bad</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03105 - STS GET - DeviceAuthToken DeviceString - Full user created DeviceAuthToken consumable - P1" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="694be9ea-433a-4791-93f0-688fa0c4ba7c">
      <con:settings/>
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="beaffc69-dd65-4b33-b61d-6717cc71e053">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));

tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="594726de-70cb-4ead-8528-e1238549663c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="e8ce9dc1-d625-4a9a-85df-8d5f38262c23"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="dba2ef41-d36e-4093-ad11-0d0e22e1d12e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="e7d03801-2f8b-4ab7-98f4-d84806f5687d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="fba636c5-584e-4a5c-8c77-4776774ae0a2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="74cab180-0c52-4ca8-becf-2a0192029658"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="f353b69a-6c55-4df5-b7e1-837eb0875c89"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="73e45b7a-a5bc-4940-b159-45d9a1155e3d">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="64a17291-0d41-480d-910b-7505f7f3f0f8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="722056e0-4b10-4a18-b846-92c9db58880c">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="c13795b6-f240-4a38-ad20-5d9332693a91">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="894e193b-244e-4909-8ed4-dfbf4f91497d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

/*
*  Auth context for device
*/


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="a4be33cd-13e7-4ae1-86eb-0c50597dbf6c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C406264844865E05305991E0A0CE1</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F9239F7E17995429E0401F0A05993BDC</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F9239F7E17995429E0401F0A05993BDC</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F9239F3562B141A6E0401F0A05994201</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F9239F3562B141A6E0401F0A05994201</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87402</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F8F12CE3EF609252E0401F0A07991D28</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F8F12CE3EF609252E0401F0A07991D28</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968556563</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C404443450A0DE05307991E0AA0D0</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nLHbC0BfEcBXpOqjfgHKMzfISiJ</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_1</con:name>
          <con:value>nLHbC0BfEcBXpOqjfgHKMzfISiJ</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_6c21fc38-571a-4930-bfcc-f34daa39c56d</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C406264834865E05305991E0A0CE1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C404443440A0DE05307991E0AA0D0</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C406264834865E05305991E0A0CE1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C404443440A0DE05307991E0AA0D0</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>e90e890a-f60c-4688-ab9e-42a9335c4542</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>29ea0c58-5196-4cd8-b4b1-0b0d5e965464</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03106 - STS GET - DeviceAuthToken DeviceString - Standard user created DeviceAuthToken consumable - P1" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c1650874-80fb-4122-af2a-9f9e57b2f769">
      <con:settings/>
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="c63ef649-c3c6-4ccb-8ebf-a1b8c34640c0">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));


tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="f4105b45-b148-4f19-abef-9ff062d42050"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="e8b0b703-d38e-4578-ab7d-211f954f9fbf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="6e832c5d-9f73-4e8e-8e16-4309ba183f48"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="64e55c42-6846-40db-8b45-b99cbac7253e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="8256d558-c443-49ac-bc46-f9e9cce64c5b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="e629998e-580f-464f-bb96-0d08d076afe8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="9f49fd0d-82bf-4c9c-9249-b44ec7df65fc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="745be514-ef42-4fd2-89c1-7bc004e7f05e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="ea7f1d74-0ce1-44ab-b360-2604fad1f989"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="StandardUserCreate" id="011efa6b-0395-4e0a-ac76-298f5c961635"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="b8dba3ee-a5b7-4ee9-8963-3c3fa214282a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator for blocked:tou standard user" id="79a40076-0d16-40c3-bbd5-0642045e79ce">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator for blocked:tou standard user" id="db55f535-9b94-4405-94ec-065ce1dd3835">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU for Second User" id="08996ec5-4264-4f7f-94ad-f4b9b9268676"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="1d77582f-ac68-446a-835b-21630bc910fa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="2eafaa79-094f-4fce-8d0e-324096aa6e23">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="906ecd1a-c72c-4a22-83ef-edc13c6f186e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="f70e5530-41ed-4a13-b1b0-9f74441c2707">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="1bac3bc6-2f85-4b34-8f3c-e75db8da6d3f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="7ce8dab2-cc3c-4e8d-8e2a-c0968b96011a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

/*
*  Auth context for device
*/


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="36fc938b-bfa1-4d01-a1a0-325378cd5221">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E19292745A31128E05305991F0A2545</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+I6EP0rKP24CnEIr0QFifJo09KFLZR2+XJlnAFcghNiJ9D++rUDZIHSXu6VKlUzjM8ce2bO5JrjpV9wGpxDJGjAcpulz7iTemtaHDEnwJxyh+ElcEcQZ9B47DqFPHLw/oiWc1s17Z8JeLhcwVMdedZELyKvpNvTEtatKbItC1nVElRkKOcxuIwLzERNKyCzpKOC/BuayDEtx7Ly1TIaa7kRRFxiy5A80nakNrymzYUIHcNYr9f5tZUPoplRQMg0Xh+7AzKHJdbq19sbpYmi+i6e5D0g4PskT4KlcW0cxVx73BnQGcMijmCXy/sqFzKQbcgYj9PZlZadBc9l0yA1m5gFjBLs0w+s3ucRxDzwcg1/FkRUzJdfXsJECliHDdGJWWRXmnFM7UKgI4YRxzqfY3OH9QRTiIARyD0/uTXt6rKqpUeHEWZ8GkRLfmz+Nz7AEvCDEDyd76+1o3Y54JmXql8DcVxG/JjTBH6qZg0xAb6rJpDLoXL9CKZ006VcNuiGK3bGIb0Tc/saLToDLv5PgQ6KswUZYT+Geq/90pt1wuKEGdZw9pBUh6NENG170ua1lMBhcOrISrs1T5oya6LtidDuxZVVtf88htX9TRguSq1p4vbduxn/7SLzLjFWqHXPe2NYjN7GH/3V673/uP6F7yzbpPMXv12hPyq/AnuR/A7niD4vbbf7gEZubKOgtXkU77zzgUeW9Xo/LtoPbR8WP9D61Y4Wt+tVo/LGhk+jeFjtuLdPwXMSknKV9l/ujVCUR/R9M7596nZtu9jpJt3Kcy27zgH/Y99+5gfx5A2I2JuqDdxWriOrhMX3YqY81NOnaagTKvHhApjQ6uqU0g4nlnJHPUfWcGujtmkXqo1WyzKLpmmV26hkoZJtmx3UqJZLhb3IbFmcUGwGbEpVLiW527b5niBZOhPAEUTaN0gtLHDuZyB6rBc1pgKiY4W1DhVWtfWXQKe/7XPKGI+qAK7S3IB8Lzij4oW9ip9yKZxXe2OP3/ASSrJyZktJapXs7lTLuZymFc57+ThJYiXmTkVNcSRnwVA8DFQwBkBiOX/vw2ABzMhQjIvEbn/z0+SZ/5hiLOZsILCApeyWXGpesN0GwNV2c5kHm0tX51FKWQgBG3HO1/TlZlaMv13exCEqTrr78t86iLzsguewDvLIe8rlJiibKUsJ3fvfIVHTkU0ICSQslSMaRIfg5wDOJT92Zo+ccREiopNYwNe/5NTs1TRMSBAz4ba01HGoBylP8R6C8zfoE0wqOdk3CP33jxCdpi1AQH65cJriq1XicAnIZgeaskv6SVYqjWbVtFqmWWgfysrNTbOTPcoRu/on92fPwTud9nj9Dw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E1927AC813D112EE05305991F0ABBCF</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0E1927AC813D112EE05305991F0ABBCF</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E1928ADD3141136E05305991F0A8652</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0E1928ADD3141136E05305991F0A8652</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_beda67af-0d3b-40d5-9f5a-3f09330385e7</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="john"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>0E19292745A31128E05305991F0A2545</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>0E19292745A31128E05305991F0A2545</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>0E1925F896E51120E05305991F0A2CE8</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>0E1925F896E51120E05305991F0A2CE8</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthString</con:name>
          <con:value>841321476135740</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>nodeSavedRole</con:name>
          <con:value>urn:dece:role:device</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>0E192609155D113CE05305991F0A6802</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>0E192609155D113CE05305991F0A6802</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:DeviceAuthToken</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1422872032843</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E1925F896E51120E05305991F0A2CE8</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">john</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">87648</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value>john</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_1</con:name>
          <con:value>john</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87403</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_70904ffd-0c40-4bd7-83f0-c695ad2eb829</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E1927AC813D112EE05305991F0ABBCF</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E1928ADD3141136E05305991F0A8652</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E1927AC813D112EE05305991F0ABBCF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E1928ADD3141136E05305991F0A8652</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>9e3a16ed-bd6a-4ac0-a8b9-7fff6f808cc3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>278e3fc4-be04-4e77-8341-f3c20d3eb234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03129 - STS - DeviceAuthToken DeviceString - Basic user created DeviceAuthToken consumable - P1" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="49a3ed9c-bdbc-492e-9a58-896d95f1dfa0">
      <con:settings/>
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="8c3835ca-3f76-47b5-a399-c22e43940c6b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));

tC.setPropertyValue("stsduration",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("Username",null);
tC.setPropertyValue("UserPassword",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="9c4c3e02-ff31-4397-b823-46b85a0fba95"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="094bca50-9ac4-4e0c-b28a-1e95a38c8d7b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="e18c3ae3-1547-4f0f-93de-078bd0f34893"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="9f79e18e-251d-43eb-a0b3-13603b075d9c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="4c4a747e-95ce-466d-9080-3d1d182755f8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="6aa8bf4d-402f-4d91-8847-7caa726eafd5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="4d049794-4b01-4a94-b690-406fbfdbc624"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="2ae9eeb2-84e7-4cf4-ac98-5654312360e0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="21439eac-7ef9-46e2-a125-2c29d220c11f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Basic UserCreate" id="8c4a175d-72ae-47f0-898b-081af2fe82c0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("BasicUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="1ff3a2ae-ab7d-4b33-a8f7-4b485bf59c42"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator for blocked:tou basic user" id="b7387aab-61ac-49ac-99f9-e3375539f489">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator for basic user" id="1df30d45-46fd-4e3a-ab99-85ea4a698781">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU for Second User" id="06510c94-e665-46ab-b082-9e50aef747ae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="4d0727b4-1cb1-41c1-8bbf-4df6adc6fa75"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="bee360cb-c72f-4428-99f8-8d01f7e296e7">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="057db4e7-5d67-446e-a458-322a19febd2d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="385ab70e-d5f9-4aaf-b627-6140f9b1ee52">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="f2548efc-e8d2-4ae4-ae05-e0b1cf6570dd">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="1d1e4b4b-1873-480c-b929-9554fdc34967">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

/*
*  Auth context for device
*/


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="3dddbb90-1d95-4a94-ac72-0d2fc4a2b50e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C516C253E1580E05307991E0A6E5B</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>0174615447637CAEE05305991E0A0FBE</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>017435BB03941F22E05305991E0A3FC4</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="john"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F923A15C6BC839ABE0401F0A05994209</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F923A15C6BC839ABE0401F0A05994209</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F8F4D466D600F2E1E0401F0A05991C52</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F8F4D466D600F2E1E0401F0A05991C52</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthString</con:name>
          <con:value>841321476135740</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeSavedRole</con:name>
          <con:value>urn:dece:role:device</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F923A071C6F9B56EE0401F0A059941FD</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F923A071C6F9B56EE0401F0A059941FD</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stsapi_107_1409968647102</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C41252BC04857E05305991E0A584D</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">george</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">6</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value>george</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_1</con:name>
          <con:value>george</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87256</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_dfe7754e-304d-466e-9c3f-34f8921236f6</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsduration</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserPassword</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C516C253D1580E05307991E0A6E5B</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C41252BBF4857E05305991E0A584D</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C516C253D1580E05307991E0A6E5B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C41252BBF4857E05305991E0A584D</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>21b7c2a2-af66-4dd9-8b64-efbd62acbcd2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b0e95158-756d-4e0f-a65f-d0b55a710a94</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06001 - STS - Device - FORBIDDEN - NULL Request Body Supplied - P1" searchProperties="true" id="13326483-e44b-421b-b592-a4f30cfbb2f1">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="1a3603e2-717a-487c-a897-fb61ca6ce84a">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");

tC.setPropertyValue("stsRequestBodyNULL","true");
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assertId",null);</script></con:config>
      </con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="19868062-f6e4-4ef2-b97c-44f728ab3e29"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="39498566-9492-4a76-a250-d7f281db5b8d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="ec9522ec-6cd3-400f-8618-e5167ea86670"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="1c271833-f116-428c-a966-45a8164a2947"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="92c8776a-817f-4b60-9753-ae61f779a96e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify no Node/User Level Assertion Data Exists" id="789e4616-1537-449b-9092-128fd5b392f6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Verify no Node/User Assertion Data Exists")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>025C44F25C124849E05305991E0AC7AF</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN:1119</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968651343</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>025C465381620A05E05307991E0AD523</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>8760</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>stsRequestBodyNULL</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86781</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C44F25C114849E05305991E0AC7AF</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C465381610A05E05307991E0AD523</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C44F25C114849E05305991E0AC7AF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C465381610A05E05307991E0AD523</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>37eee52b-f48c-4479-8f23-10d2147782eb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aab469e8-7e97-4994-9f31-669ea6868612</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06002 - STS - Device - Username in 'active' status - P1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="56699163-2a4c-41c3-8333-675a65eb395a">
      <con:settings/>
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="4f157f3a-884e-42e5-b6e4-75295fdb8ea3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="f6cbb422-b11d-4535-9c7d-f8c28a5697fb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="d4dafbe1-44ea-414a-aa05-dec4938bcde0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="1b144df6-2ffe-46bc-b5c0-f7e93dffb651"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="436ace30-7c85-4f8a-98c7-8994972eee17">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="6812e8d8-71d8-4c6b-8d7e-604c9dfb8749">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="98b52753-7ed6-4816-899e-f6233ef3f65e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="a4fea90d-1ee0-4923-abae-87ba92dd45d3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="0a8060f3-1d71-449e-9504-829672512e02">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="bee5c353-9222-4abe-b884-a82e4d9a102c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="06a5d418-9f5e-452f-b5f8-040e8cfba05c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C405EFBF0484BE05305991E0A7160</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968655739</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4137798C0A6AE05307991E0A119A</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_6e01dd76-d514-4ded-9183-8e88e4f28934</con:value>
        </con:property>
      <con:property><con:name>assertionUUIDprevious</con:name><con:value>_f1a9471e-754e-4c06-a2fb-e887bfc73bab</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C405EFBEF484BE05305991E0A7160</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C4137798B0A6AE05307991E0A119A</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C405EFBEF484BE05305991E0A7160</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C4137798B0A6AE05307991E0A119A</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>1d064a63-11d8-4121-a7fc-026310b12660</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06003 - STS - Device - FORBIDDEN - Username in 'deleted' status - P1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="193bc10a-fa1f-43dd-b29d-ff8e2f28dcb4">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="f4893d93-e016-4372-92d4-59db25fd28cf">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="d67275d7-5c56-41c1-8e29-4acaf77ef315"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="5247a3b5-6237-46d1-b082-b4722ae6c7b6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="ad78a56f-81c4-4bad-b137-92b0d778f876"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="79e249f7-8f91-4ae0-a7ba-7dc3125432ba">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="f97c45a1-0c6e-45ae-a063-fcc361560557">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="933fef6e-9a84-448d-abd2-a2065c030011"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="502bca19-9793-420b-a35b-431924ca6b7b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == deleted" id="5e605805-2394-4888-ab68-ba7f653db4f3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );
assert a.userSetStatus(useroid,"deleted") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="96cef8fc-552b-4871-9eaf-a3abfd63f2bd">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C520B7AE41588E05307991E0AE8A9</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968660043</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C40657B40483FE05305991E0A32A4</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C520B7AE31588E05307991E0AE8A9</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C40657B3F483FE05305991E0A32A4</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C520B7AE31588E05307991E0AE8A9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C40657B3F483FE05305991E0A32A4</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>5db8cd59-c355-4799-ac45-7ada5fd736d5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06006 - STS - Device - FORBIDDEN - Username in 'merge deleted' status - P1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b9994b77-c63b-4dde-b909-d9ed9b33d20b">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="d5684599-d3a3-452f-95a7-77d843f92ba9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="cf9fb215-e77f-4661-b1dc-85389ad0570c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="db098cc1-d8d6-4caa-bfa9-0a534f104d44"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="efebf1f0-d1c9-4a94-a81d-0d66e3492191"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="cdb191ad-da53-4ecc-8aa1-32eb1a878c17">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="5a0a3109-394f-47e5-bfd6-9584a73e619c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="87afed84-a753-414d-9e58-207d77dcf6a5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="7ac75610-23de-4bb9-bd6f-b261ffe0a456"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == mergedeleted" id="e602b33b-9b2b-45fb-b283-d3809eb16395">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );
assert a.userSetStatus(useroid,"mergedeleted") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="cc9ea10f-3957-4170-a5b6-8db7479446de">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4185550C483DE05305991E0A013E</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>API_NOT_AUTHORIZED</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968674473</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C412001A90A2DE05307991E0ACC6F</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C4185550B483DE05305991E0A013E</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C412001A80A2DE05307991E0ACC6F</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C4185550B483DE05305991E0A013E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C412001A80A2DE05307991E0ACC6F</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>0a1db622-7246-4056-b75e-71660e2fa8f1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06007 - STS - Device - Assertion grant for full user login in active status - P1" searchProperties="true" id="2b413e75-3129-402a-9331-6616fdea1cbc">
      <con:settings/>
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="04c96cec-a562-4fad-b835-2df549a890f5">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="c71bc9d1-2a3b-4864-9f71-dd1102268670"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="20dda5fc-1845-4646-93e9-58222dd337a1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="f0a3ff58-cc4c-4ee7-8b2b-fcf4122e8dc3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="34d05c6d-6967-4629-98d6-1a92c223bdcc">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="398ab11c-0a88-4b58-a77b-9fae73bcaebb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="46f769e3-4a4e-44e6-8f11-74a44e598072"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="678a215e-1f16-40f1-bea9-a353d874b9d0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="d3b17562-3114-4a00-8b78-5ed3a951c955">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="543a9739-1874-44ee-a0f4-68dfc238bcf7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="ba94a920-8524-4e51-a057-44adaa23d851">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        
        <con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C44FAB0D3485BE05305991E0AE88C</con:value></con:property><con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        
        <con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        <con:property><con:name>assertIdL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        <con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        <con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        <con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_21e09f98-c49e-42d8-9e34-fb7dd5d6f043</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property>
        
        <con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property>
        
        <con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeacctoutrowid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property>
        
        
        
        <con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserrowid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property>
        
        
        <con:property><con:name>QC_Id</con:name><con:value>86810</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property>
        
      <con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>stsapi_107_1409968679000</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C423070AD483BE05305991E0AC02F</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C44FAB0D2485BE05305991E0AE88C</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C423070AC483BE05305991E0AC02F</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C44FAB0D2485BE05305991E0AE88C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C423070AC483BE05305991E0AC02F</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06008 - STS - Device - Assertion grant for standard user login in active status - P1" searchProperties="true" id="22af0b03-25a7-40da-8f46-2713bf245d31">
      <con:settings/>
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="2ad7ef69-5904-4c7e-8d26-46c36a2e1e41"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="008f6861-245d-45c8-bbd3-0d746af65939"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="f96a00f7-e25d-4a88-bc96-cf0fb6f4a3c9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="cd8556bf-afaf-4b61-98f4-7e0cbcbb42c4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="7794fe0b-1c49-458f-9bf4-b0d3b9cc7b81">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="0eba3fde-7dad-4c2e-9540-216174d772b3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="af236959-8f45-4af2-9a68-da6a2e0e83e7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="bd158d2d-21b4-4aa7-b1eb-110150123418"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="8a39e7dc-505e-4ecd-91db-146a2354bbb2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="ecd2c3b3-94b2-49c4-957d-6dd3c6faa57f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate" id="603d1fe6-9e11-4a99-8706-1bd2080fd916"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="9b56eccf-5a38-4224-a559-92fd10dff2a0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator for blocked:tou standard user" id="c13fc9a6-b9bc-4aa7-8ec0-1622ba479811">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator for blocked:tou standard user" id="9e957d1b-f39d-48b5-a240-52595db658e3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU for Second User" id="39d15c48-f804-47b5-bfc2-1e68122b579e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="018afa04-795f-43c6-9408-7c912a9a6246"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="69500607-76c8-4b43-bdba-5722982d4c84">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="8dd67b47-5c80-444f-8c7f-4cf64101ae90">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="d9f7d890-c9cf-48dd-8a5c-2f655182bda5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C41252BD34857E05305991E0A584D</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968683504</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA3418E9E01A0E05305991E0A5B70</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86811</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_3d4623ba-92c8-4b72-8741-07f5adc4c19f</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>2</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C41252BD24857E05305991E0A584D</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025CA3418E9D01A0E05305991E0A5B70</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C41252BD24857E05305991E0A584D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025CA3418E9D01A0E05305991E0A5B70</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06009 - STS - Device - Assertion grant for basic user login in active status - P1" searchProperties="true" id="2e412981-3c7a-430d-a6d1-8b17f96d667d">
      <con:settings/>
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="82094851-7e43-470c-9131-0240932eb916"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));

tC.setPropertyValue("stsduration",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("Username",null);
tC.setPropertyValue("UserPassword",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="f9f4d234-65c2-4a67-aeff-b2724386dad8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="467766c8-2c9d-41d5-b79e-5324de2819e2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="9ee446af-180a-435f-b75a-fd6c3098855e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="44aa621d-642c-4527-b264-a248ce34ad7c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="ecded06b-d94c-4725-889d-df8ef91cda2b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="afb79277-87e8-41f8-94e9-89f63e8cad0a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="62ca5326-94b3-4f94-8a78-b70a0648ce19"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="19e4eac6-1fab-4668-abf4-20a2e1e815ac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="eca93f2b-b0f2-43ce-ae49-8293aa99d9b7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Basic UserCreate" id="5feb8e1a-325c-45cd-84ed-02ed22b02403"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("BasicUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="49245e2e-5bce-4f8d-bd88-0ae33ac7386d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator for blocked:tou basic user" id="68491ec5-0de9-4178-a62c-9bf8d1e46e8d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator for basic user" id="f60776a5-5e28-4823-9eb8-4c1e4d64f3bd">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU for Second User" id="6a222c9c-3480-4462-b0db-2b4ce92d7e38"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="0523f614-2557-4d09-8eaf-d9eed2a20083"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="66458a20-70b3-4179-b62a-45058be9ad1b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="89b9bd7a-b810-449e-8107-2735cbade0e1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="52eeed32-f8fc-4848-96b4-c7a418b39bc8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C405EFC42484BE05305991E0A7160</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stsapi_107_1409968687779</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4030D0A74837E05305991E0A9E1A</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>F9239F7542006E7FE0401F0A05993BDA</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>F923A2E627FB5520E0401F0A05992FF1</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86812</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_6c8d46d0-c455-49ed-827b-1f7415ad723b</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsduration</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserPassword</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C405EFC41484BE05305991E0A7160</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4030D0A64837E05305991E0A9E1A</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C405EFC41484BE05305991E0A7160</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C4030D0A64837E05305991E0A9E1A</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>801a5315-6e01-4b39-a6af-30705a1f5f75</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06010 - STS - Device - Assertion grant full user with expired assertion status active - P1" searchProperties="true" id="47726179-e929-47e3-abaa-3e3475410245">
      <con:settings/>
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="d3c46b81-580b-469b-941e-6db21aac589d">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="446fd941-cf34-436e-9bf2-bdc092a3ece8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      
      <con:testStep type="groovy" name="Call First User Create" id="d90e6b0c-8ab8-4507-8278-7084dbaf33cb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="8e6e7007-589f-4249-94e4-13fed85c5751"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="507c0a1f-9a41-4fc5-b65a-bc929083cad2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="2bca0eab-6897-4392-936f-424a4379ae11">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="177f14d1-5edf-41de-8202-99a2ad7eff6a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="f1a01d38-fd63-411c-8bef-57fc0d4c85c1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="c52dab33-52e6-4cb3-8d99-fb96acc540b5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="0b799412-a1b9-4aeb-b5c0-23e1294e5bc8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Expire the existing assertion" id="6db4f1c6-9d6b-4184-9dc2-5de4a5303e66">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def nodeid = tP.getPropertyValue("nodeDeviceDefault");
def assertId = tC.getPropertyValue("assertionUUID");
def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();



if (counter == 1) {
	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	log.info "nodeid[$nodeid]";

	assert a.samlExpireAssertion(assertId, nodeid) == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Execute another STS API call if necessary" id="ea8086a1-4606-42f2-8490-951c23be2d55">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS");
} else {
	if (counter == loopuntil) {
		tC.setPropertyValue("counter",counter.toString());
		testRunner.gotoStepByName("Call STS");
	}
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="23b96bce-4ff3-4881-911d-f57d4af79624">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C405EFC4E484BE05305991E0A7160</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968692963</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C436AEEF50A33E05307991E0AF56C</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86813</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_6e13fd39-a948-4230-83a2-14f8ad622378</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C405EFC4D484BE05305991E0A7160</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C436AEEF40A33E05307991E0AF56C</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C405EFC4D484BE05305991E0A7160</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C436AEEF40A33E05307991E0AF56C</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>c7db49a3-0739-4a82-bc0d-c3618976284c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5e64a9bb-826e-4f5f-8492-0386574d9c51</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06012 - STS - Device - Assertion grant basic user with expired assertion status active - P1" searchProperties="true" id="c8387515-3c0a-4b2a-977e-fdd8e1a59146">
      <con:settings/>
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="69722771-bf41-41fb-8203-6ca0631fe31a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("stsduration",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("Username",null);
tC.setPropertyValue("UserPassword",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="5ababe2e-1efb-459b-9e8d-55ffe51d26b4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      
      <con:testStep type="groovy" name="Call First User Create" id="8faaf622-b4dd-40fc-94c2-0e3d57c9c799"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="975941b4-4d34-4dd9-8297-94bc31bbff2b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="51a448ad-251f-46de-82ec-bdaf4c03e666">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="711ba784-9c05-4c47-902b-f4d4bc84368a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="64b9aa1c-5016-4277-8212-5b242f688e52"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="a2f6edb5-7a31-44e1-b00b-26eb0b437f67"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="9ed50ca0-dcfb-4738-9078-11c685d06f27"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="d340f216-8875-47f7-94ac-956ea0686538"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Basic UserCreate" id="722f2b9d-b592-43e1-abe7-41b95927666c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("BasicUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="b2c7ce89-a3e2-4b86-a6e8-d22eb222d18f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator for blocked:tou basic user" id="c9b2ed1e-ec67-4b0f-9362-6bab3b0798c3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator for basic user" id="9f837603-e9e4-42e0-9e1a-154b13fc1ebb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU for Second User" id="7e98147a-a516-4989-998c-b30788bc5db4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="a5d0ba94-bd18-4727-b187-45adbf1c3ff5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="f40a3de7-0d1e-4cbb-b139-50d4bf2764a0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="3d70a45a-111f-4ede-a4aa-229ec9fb5207">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Expire the existing assertion" id="45d94327-4c04-4a22-81b4-83e503ff9ca4">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def nodeid = tP.getPropertyValue("nodeDeviceDefault");
def assertId = tC.getPropertyValue("assertionUUID");
def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();



if (counter == 1) {
	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	log.info "nodeid[$nodeid]";

	assert a.samlExpireAssertion(assertId, nodeid) == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Execute another STS API call if necessary" id="0cdf5886-815e-4783-9abd-eff47afc0b2b">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS");
} else {
	if (counter == loopuntil) {
		tC.setPropertyValue("counter",counter.toString());
		testRunner.gotoStepByName("Call STS");
	}
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="a1feb097-80c5-4259-a3d5-2bd4e2117e82">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C40635229482BE05305991E0A1C0D</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stsapi_107_1409968697092</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C520B939A158AE05307991E0AD35D</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>F9239F7E18235429E0401F0A05993BDC</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>F9239EBFEA7CA148E0401F0A05993BD6</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86815</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/_fa0e872d-321d-4120-a411-6323daaf4e58</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsduration</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserPassword</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C40635228482BE05305991E0A1C0D</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C520B9399158AE05307991E0AD35D</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C40635228482BE05305991E0A1C0D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C520B9399158AE05307991E0AD35D</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>dcd6aa09-ccb9-47cc-bb8c-06dd2bf228f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c9797f2-4b33-4190-966b-17c6256128c2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>166c933c-adea-49ea-8423-c29fb10e207f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06013 - STS - Device - Assertion grant full user with expired assertion status blocked:tou - P1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="fd34e8c4-ddd1-451b-9290-0ec601a73bf6">
      <con:settings/>
      
      
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="83904e03-21ea-47b4-b28f-99042bd365de">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeRightsTokenCreate","UserNotActive");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="c3102420-ac45-4fe9-b3a7-7c083c97a0a4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="bd639d0f-d095-4e6d-927b-58711717e585"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="7bbdda3e-3e6b-431c-9343-1471894ec593"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="a42c9e46-b62b-4326-a6a5-3a438a3d3e56">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="43c570f6-7178-4880-8c89-9e835ca93a31">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="7595aae8-08be-4dd8-b56b-a515457298bd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="145ef20d-4c52-4b0e-90c6-7407b3d7d901"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="8df52fda-c9ab-4fff-bfbe-429c49b56d0d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="70d3b1d4-099b-4c69-a129-99885b8935f4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate" id="e22f99a5-9be4-4bc4-a8fe-3114257784dd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="90e5a504-6770-4166-b18f-8bf4640ad04d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="c6bb0f5f-ab8c-45dc-a92a-d37ae234aa97"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="5267ee8b-efab-49fe-a633-81eac9975ed2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="f64ffc53-764c-4f28-97dc-3c4915088f5d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Expire the existing assertion" id="9afdaa82-d22e-4993-b217-64ace25358d6">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def nodeid = tP.getPropertyValue("nodeDeviceDefault");
def assertId = tC.getPropertyValue("assertionUUID");
def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();



if (counter == 1) {
	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	log.info "nodeid[$nodeid]";

	assert a.samlExpireAssertion(assertId, nodeid) == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Execute another STS API call if necessary" id="85125b42-2484-42ef-aefd-1e4c68bb75b5">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS");
} else {
	if (counter == loopuntil) {
		tC.setPropertyValue("counter",counter.toString());
		testRunner.gotoStepByName("Call STS");
	}
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="fddf82d1-cb40-4af1-96dc-ff34bb7355b8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0BF7F06AAE0A3DDBE05305991F0AA6BE</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVbbcuI4EP0VynmkjGXH3FyBKi65eEJCEidsNi9bQm4bTbBMJJnLfP1IBjxASJbdJ6qb1ukjdfdpXwicTB2vIwRwSVNWWiZTJrzc2zIyzrwUCyo8hhMQniRe0LkbeE4FeXh7xCj5/Zbxj1t3m00Hj03SsInpVuvExDAG0wHbtRHGboiIChUiA58JiZlsGQ6yqyayTVR7Rg0P1bzzeqXWRG9GaQRcKGwVUkHGhtRStIyJlDPPshaLRWVxXkl5bDkI2dbr3SAgE0iw0b5Y3yhPxNubeFIJgcB0SiokTawLay/mIhReQGOGZcZhkyv8KheyUNNSMaGg8ZlRnIXQZ1Gamz3MUkYJntJfWL/PHchJGpY60zjlVE6SLy9hIw1swpKYxHbZmWHtUzsRaI8hF9gUE2xvsJ4gAg6MQOnlyW8ZZ6dVLT/6zDETUcoTsW/+Nz7A5jBNZxCaYnutDbXTAY+8VPsCiOczMs0EncO9btYZJiA21QRyOlTpgUNElwMqVIMuhWZn7dI7MNev0acxCPl/CrRTnDXICE8zaI/JOIh71qjrv/ztD0RD4H5vhl7G1+KxlRPYDc4dRWnX5kFTFk20PjG7Xoxlcj+I3NVNWH746KWLYBYtVs3bSzwKH/nwMfFpnCESAR2OIi6ur1fchsXofTjwX69GZFEuz3403gZs0P+4CW+vVnYsX1+D6eI6KncFj2/fwr8Gc5HWIvfNfrGt+i/8kQZLVv/Zi2uSPL7MxFv16f3GLjt3k8aHcz66X4l5PUjvP370hwFJUtRdPZd7dqdVXGeH/75vO/NBNv4JRG5N3QZ+v3SlqoTl92KmPTQ0ozzUm2nxERKYNNr6lNYOL1NyR0NP1XBto+5Vw62eO0276VRtp3OJqueo3mzaV6hTcy+vtiKzZnFAsZeyiOpcWnLXbfM9QZJ4Y8AcuPENUh9LXLpP5ZANeSeSwPcU1rZ3FVa39ZdAh/9tc6qYkOoAodN0Qb0XHFFxZ6vih1yc42pvbfE74ZySopzFUlJapbo713KhpmlWCSvZfJ5pLffqeoi5GgVL07CQYwVAMjV+q+f0HZhVgFgnad324oe5C/8+w0xOWCCxhEQ1Syk3T1huAQi93HwWwvLUzbmXUtVBwlIe8/WmajFrxt/ubuIRHafcD+pnkfKwuOAxrJ086p5qt0nKYm1pnVv9mRE9HMWAkFTBUjWhKd8FPwZwLPm+s3jkgouUnI4zCV//U9Kj1zIwIWnGpN83cseuHOQ85WoG3p+gTzC54hSfIPTfv0FMmrcAAfXhImiOrzeJJxQgi3ckZZP0UFUc1G+6XcdxXbu5qyr2Za1bPMoeu/Yn92fPzjsd9nj7Nw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_474992ab-c81c-457c-aebe-2e1410aa4d0c</con:value>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1420531640092</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0BF820B5F3304415E05307991F0A3217</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>87648</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0BF820D94B224419E05307991F0A1E6B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0BF845329192512AE05307991F0A64EF</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0BF820D94B224419E05307991F0A1E6B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0BF845329192512AE05307991F0A64EF</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value>UserNotActive</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86816</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_a540a931-e4c2-44c0-8dd6-18458b8b1c4a</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0BF820D94B224419E05307991F0A1E6B</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0BF845329192512AE05307991F0A64EF</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0BF820D94B224419E05307991F0A1E6B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0BF845329192512AE05307991F0A64EF</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>3c8cd7f1-4494-4b5a-9902-19dcecea258b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a42c9e46-b62b-4326-a6a5-3a438a3d3e56</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43c570f6-7178-4880-8c89-9e835ca93a31</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7595aae8-08be-4dd8-b56b-a515457298bd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>145ef20d-4c52-4b0e-90c6-7407b3d7d901</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8df52fda-c9ab-4fff-bfbe-429c49b56d0d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>70d3b1d4-099b-4c69-a129-99885b8935f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e22f99a5-9be4-4bc4-a8fe-3114257784dd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>90e5a504-6770-4166-b18f-8bf4640ad04d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c6bb0f5f-ab8c-45dc-a92a-d37ae234aa97</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06014 - STS - Device - Assertion grant standard user with expired assertion status blocked:tou - P1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="3b5825a1-9076-4350-9a65-bed60d5e2e8d">
      <con:settings/>
      
      
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="06229db5-d857-47e8-adc6-667f31ffe277"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeRightsTokenCreate","UserNotActive");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="ef95c8bf-82ac-4ef4-b21c-ebc09528bd79"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="15bedaa8-43ee-4c15-8f3f-2cfcc481214f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="5d0147af-4bb3-4e74-968a-edc7e58b8aff"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="05b4cd69-2116-49b3-92bf-6b4d64df4e77">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="ff903f19-00d6-407c-912d-8f29187e7b1c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="a3c7f982-f027-4b8d-8389-0cbe48a809dc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="1e47df98-155d-4a60-9fa0-ef65601b34e2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="1a43ac8f-0923-4d46-96af-9fb0a4c258c5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="f86b72ab-8a03-42ff-93f3-e0efca4046be"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate" id="69fc6674-6c44-4a31-a515-876c7b22373e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="4a189d6a-e377-4d46-8bd6-67fd82eb798c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="59fa2d9f-bcbc-4335-8f29-398400570be3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == blocked:tou" id="5acf5b25-21dd-4b5d-801b-54194323d5be">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );
assert a.userSetStatus(useroid,"blocked:tou") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="d611212d-644c-47e0-b5db-2d0d44bfd72a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="874e46c5-4369-4761-9820-3fd5b7b7c79d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Expire the existing assertion" id="772488b0-75f4-48c4-a549-1f9ac2e3a971">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def nodeid = tP.getPropertyValue("nodeDeviceDefault");
def assertId = tC.getPropertyValue("assertionUUID");
def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();



if (counter == 1) {
	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	log.info "nodeid[$nodeid]";

	assert a.samlExpireAssertion(assertId, nodeid) == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Execute another STS API call if necessary" id="40a8243d-227c-4b9e-8fc9-6a1035d05262">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS");
} else {
	if (counter == loopuntil) {
		tC.setPropertyValue("counter",counter.toString());
		testRunner.gotoStepByName("Call STS");
	}
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="6d5759f8-e25d-4814-8383-b8f87ffd7563">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C50F6886D48E6E05305991E0AEE5D</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>USER_NOT_ACTIVE</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968705621</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C41384293486FE05305991E0AC8FC</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86817</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value>UserNotActive</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.q.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/_f2b7df36-1514-4b38-bb50-9fc5545e539f</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C50F6886C48E6E05305991E0AEE5D</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C41384292486FE05305991E0AC8FC</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C50F6886C48E6E05305991E0AEE5D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C41384292486FE05305991E0AC8FC</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>72882040-cbcc-4efd-b510-1f30e4fabadd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06015 - STS - Device - Assertion grant basic user with expired assertion status blocked:tou - P1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a4cfb2bb-e573-4bcc-9a73-64645d3a1bd3">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="9915ff4d-0b8a-4cce-a4a7-ed6a3d9a8935"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrTypeRightsTokenCreate","UserNotActive");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("stsduration",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("Username",null);
tC.setPropertyValue("UserPassword",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
</script></con:config></con:testStep>
      
      
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="842699fa-2b63-4f3f-a5f6-bb63909728f3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="22fe8305-7363-4cda-beec-f83ea48bd72f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="3898d961-619a-4d7c-a4f3-5471da7b7a37"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="cba7206c-aa5b-42c4-997b-db4d9f6e345e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="03914697-a775-4b85-9a57-ccc0d0663a26">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="2a158413-5d43-487c-98d6-6ee9b151ebc5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="84292417-bb1a-4e74-8402-4b099572d975"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="0c194a00-ee14-480a-a9f0-36c1d36c2c27"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="728d72c3-23f8-4604-afe8-e13306610345"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Basic UserCreate" id="a430ddf6-f0f2-4681-ab7c-fa84a5ffe806"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("BasicUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="1e384c09-be39-4ead-852a-2352f43f215d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="3b13edd2-62e1-4682-8b97-ff700a3f8434"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == blocked:tou" id="e2de95f1-5d72-4bd0-b2ab-9d7d9cc8f9a8">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );
assert a.userSetStatus(useroid,"blocked:tou") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="f0769294-ec9c-44f0-b612-6c626f0de972">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="afd76569-5f60-4e12-927a-15fe6dd15695">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Expire the existing assertion" id="5ce3dc58-cc82-4ae3-bd43-0abe3eb14aa0">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def nodeid = tP.getPropertyValue("nodeDeviceDefault");
def assertId = tC.getPropertyValue("assertionUUID");
def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();



if (counter == 1) {
	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	log.info "nodeid[$nodeid]";

	assert a.samlExpireAssertion(assertId, nodeid) == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Execute another STS API call if necessary" id="cc4dc113-90b3-4011-bcb0-a403b6229962">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS");
} else {
	if (counter == loopuntil) {
		tC.setPropertyValue("counter",counter.toString());
		testRunner.gotoStepByName("Call STS");
	}
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="dcbd2c7e-2434-446f-8548-16b9b572cd93">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA6CC79AF01AAE05305991E0AFFA3</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>USER_NOT_ACTIVE</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stsapi_107_1409968709704</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C446392F04869E05305991E0A7372</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>F8F4D466D65FF2E1E0401F0A05991C52</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>F8F12CE21E33AD0BE0401F0A05995492</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86818</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value>UserNotActive</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_cc286765-d7a6-4c54-81ac-7456b365a570</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsduration</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserPassword</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA6CC79AE01AAE05305991E0AFFA3</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C446392EF4869E05305991E0A7372</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025CA6CC79AE01AAE05305991E0AFFA3</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C446392EF4869E05305991E0A7372</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>da1ccf45-e9ad-45ad-a186-e8f08dee13f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3c0fd6c2-d77d-464c-95da-898c6feb3d58</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>608495f9-4947-447b-8f59-33079a053b57</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06016 - STS - Device - Assertion grant full user with deleted assertion status active - P1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6092e51e-a70d-42ac-87ac-5961d57db75f">
      <con:settings/>
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="debcc540-a831-4291-83eb-7287b97e014b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="38b089f7-67b1-4744-a579-63b6030f9fd1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call First User Create" id="998b0d05-5142-4516-8842-350fe7d9f9bd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="ce9aca6c-208a-4414-a923-73fc7030ed58"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="62a6707a-ed2b-46b7-8fba-5d7ea2acb942">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="5a3554c2-fa5e-414c-9d5a-5eb1342d7734">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="2b61416a-8e82-412a-9c50-c23ee150e26b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="3b5fcee9-89ab-409d-a107-afa37042cc7e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="fe775daf-4b6c-4213-a27a-e5c445de6c1d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="509e87d9-ab9c-4e5d-9b4c-f7eb3b1579f4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set NODE_USER_SAML_ASSERTION.STATUS to deleted" id="2d3f3159-c10a-441e-8915-739bc2dcc043">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def nodeid = tP.getPropertyValue("nodeDeviceDefault");
def assertId = tC.getPropertyValue("assertionUUID");
def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();



if (counter == 1) {
	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	log.info "nodeid[$nodeid]";

assert a.samlSetStatusDeleted(assertId, nodeid) == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Execute another STS API call if necessary" id="7153551e-e906-47a6-85d7-dd78c234ff5a">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS");
} else {
	if (counter == loopuntil) {
		tC.setPropertyValue("counter",counter.toString());
		testRunner.gotoStepByName("Call STS");
	}
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="2dc0c16d-3117-4c21-b4db-5213951c7519">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C40AB8683485DE05305991E0A339D</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968713710</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C5169E0BA1576E05307991E0A37E5</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value>RightsTokenNotFound</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86819</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_a68ccd73-56a1-4451-b1fc-2008adbd3051</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C40AB8682485DE05305991E0A339D</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C5169E0B91576E05307991E0A37E5</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C40AB8682485DE05305991E0A339D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C5169E0B91576E05307991E0A37E5</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>93cb0161-a10c-4ead-824f-700f808e0e64</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5c42d67d-288b-42b1-8b0d-95ab4b7f9b69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8020c167-021c-4e3b-bfca-a4426ffe89ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06017 - STS - Device - Assertion grant standard user with deleted assertion status active - P1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="71ba8cb0-54e9-4080-bad9-d7564bef3ef3">
      <con:settings/>
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="279a2909-161d-4210-9450-cf083959750f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("stsduration",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("Username",null);
tC.setPropertyValue("UserPassword",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="92ac1563-d96f-4d54-a616-bd0a6c07b4c2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call First User Create" id="72099eb1-e0ec-4809-9590-1658cf56774e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="44cf9fe7-0365-435b-9c51-735dee31aa4d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="7c5fd2fe-5b83-47a9-8f77-b978e3532109">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="65ee2c84-150c-4c86-83aa-614dd34aea83">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="6b113c8b-547a-4565-bac2-ef1aa32950cb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="bf7d2f92-eeca-4622-b857-3ce75efe859b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="64c279c9-9950-403f-8635-2226a056e21c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="6efbe344-ec2a-4811-9bfc-0c168568d792"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Basic UserCreate" id="2adf8afa-e946-4f31-bf25-cd8e8e3f7416"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("BasicUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="329c0191-c33e-4623-8a08-b1bafdc1562e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator for blocked:tou basic user" id="b673f1f5-82c8-471a-84ac-52bde1745c68">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator for basic user" id="578ff963-f020-4bdc-9910-e386afc03aa5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU for Second User" id="fb3e197e-c931-4b1e-b54c-6384a11e772b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="e4a8015f-5c9d-4415-97cc-a2124df0cb1d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="946b830d-5dec-4faa-bb81-fe1e1728d219">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="0d444a42-06d5-4b97-a38d-dd35a7267485">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set NODE_USER_SAML_ASSERTION.STATUS to deleted" id="151dfe8d-76ad-404d-883c-ec1c916d4593">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def nodeid = tP.getPropertyValue("nodeDeviceDefault");
def assertId = tC.getPropertyValue("assertionUUID");
def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();



if (counter == 1) {
	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	log.info "nodeid[$nodeid]";


	assert a.samlSetStatusDeleted(assertId, nodeid) == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Execute another STS API call if necessary" id="0c67056b-4b6c-41b2-a89b-aa1b1ac2226d">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS");
} else {
	if (counter == loopuntil) {
		tC.setPropertyValue("counter",counter.toString());
		testRunner.gotoStepByName("Call STS");
	}
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="3df9ae72-f780-4961-b98c-1dd54ecd2bd0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C411FE5800A29E05307991E0AAE6D</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stsapi_107_1409968718066</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C467425634845E05305991E0AA9BC</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>F9239EC254233ADAE0401F0A05993BD8</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>F923A2E97B4120E9E0401F0A05992FF9</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value>RightsTokenNotFound</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86820</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/_ebe50a2e-44c5-4d5b-a04a-4aafb02b6b18</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsduration</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserPassword</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C411FE57F0A29E05307991E0AAE6D</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C467425624845E05305991E0AA9BC</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C411FE57F0A29E05307991E0AAE6D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C467425624845E05305991E0AA9BC</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06018 - STS - Device - Assertion grant basic user with deleted assertion status active - P1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="9e8bf6bf-ae4d-44d3-8c23-366b6d1cecd6">
      <con:settings/>
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="0298350d-7f89-4da3-8535-9820740f1f16"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("stsduration",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("Username",null);
tC.setPropertyValue("UserPassword",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="8cd5aa17-a235-4352-883e-1d39631ac7eb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="e8e45329-0fe3-43df-af51-9616451fbcdf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="e11e1db1-acf0-4880-92cd-6e18d9a2649b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="37c070e7-e6d8-4cdc-94bb-c06b0bb524c0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="2d9111d8-8d36-4c7f-8890-1071419c8ba8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="5e18c321-6dc4-4e12-b165-d70138cede51"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="3a4079af-23be-4d29-acbf-a7a25c64db36"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="36151464-a49a-4297-b031-9abb86ccad84"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="694fde79-cd5d-4643-8e6a-fe5d46cd45dc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Basic UserCreate" id="6c66792c-fcd5-4182-a7d1-8a452804bd30"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("BasicUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="7a9fbe32-654e-4a72-935d-250fd14cbb6e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator for basic user" id="cb2c7ebc-bbf7-4080-b421-eb7e93d68c06">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("actionSkipPolicyCheck","true");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator for basic user" id="d59c0287-d257-4064-8a33-022f5c9403fe">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU for basic user" id="30155522-ff38-4144-80d0-46af2c0408c5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="37ade39f-922b-473c-8076-35d23bf4fb60"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="fa632421-7ec1-45e2-b87f-8edde99b315c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="d7efa0f3-153d-4ae7-9772-c252ec02b667">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set NODE_USER_SAML_ASSERTION.STATUS to deleted" id="4a7fbf70-1dd8-4a61-9867-58e06c01a77d">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def nodeid = tP.getPropertyValue("nodeDeviceDefault");
def assertId = tC.getPropertyValue("assertionUUID");
def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();



if (counter == 1) {
	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	log.info "nodeid[$nodeid]";


	assert a.samlSetStatusDeleted(assertId, nodeid) == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Execute another STS API call if necessary" id="4ded9066-ddd3-4450-ba92-9e993e762b84">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS");
} else {
	if (counter == loopuntil) {
		tC.setPropertyValue("counter",counter.toString());
		testRunner.gotoStepByName("Call STS");
	}
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="ed9ce5f2-6384-4793-a881-0a6f3ae22329">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C405EB6474847E05305991E0ABDAA</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stsapi_107_1409968722494</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C47D4A8224863E05305991E0ADB69</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>F8F12CDCE7148AEFE0401F0A05995484</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>F8F4D4C2BD57567EE0401F0A05991C4A</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86821</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/_b5018e13-dade-4ea2-93f7-f1a33a12c1a8</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsduration</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserPassword</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C405EB6464847E05305991E0ABDAA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C47D4A8214863E05305991E0ADB69</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C405EB6464847E05305991E0ABDAA</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C47D4A8214863E05305991E0ADB69</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>aadb3c6b-4464-46d6-a4bb-54046dd4bd61</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>097bba4f-8674-4a79-8bf8-8ea679f700ad</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>41f14811-2cad-4293-aa0e-8b1c7dde8e44</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5c023940-064d-4ade-95e8-0a72cc92aab7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0073d4ce-a3f4-432d-97b2-2e828112618f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f4a3ab97-0b24-463f-8a5e-08ac998259db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>55538574-d629-472e-8088-e35700043861</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bf4074b6-1ccf-42cb-b782-d11cc91650b7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7a03aee0-463c-46e6-8429-3da2f65e26bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06019 - STS - Device - Assertion grant full user with deleted assertion status blocked:tou - P1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="02097726-687c-40c1-9e02-11064d9964b8">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="3f0d56ea-4f9f-4c10-afd0-682536fa59f1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeRightsTokenCreate","UserNotActive");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="41f40971-cf82-49a0-8872-5ab753e437d4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call First User Create" id="cf30d882-cec6-4457-b4cb-887f043fa3c3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      
      <con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="2dcace47-b34e-400d-b3a0-5011194cb3aa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep>
      <con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="afd34c5e-a9d3-489d-8491-3cf25247407c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="c4313ae8-2f1a-4037-b891-7fdc00c856f7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="9e3d9711-67ba-4870-9af8-db156e84a514"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="cfab41b8-6952-44dd-b43e-97df40631ce2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="7f970210-43d0-4b91-8c51-4fe0c9c032b7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="e0e702af-f8a0-4b79-8453-04a85344aced"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate" id="5531b17c-6338-4fe9-80b1-c184c5debc11"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="083e3d30-c84e-4dac-a897-f090aec80a37"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="f0304369-15c0-40f1-9d8f-d3a3a7ea02d2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="3f2a437f-dcd3-426a-b3d1-898c9a0ee3ee">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="d715e5a7-c3c8-4fdb-b4f5-f82d52e44d33">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set NODE_USER_SAML_ASSERTION.STATUS to deleted" id="9d8261a8-572b-410c-ba1b-e1868be5a7d4">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def nodeid = tP.getPropertyValue("nodeDeviceDefault");
def assertId = tC.getPropertyValue("assertionUUID");
def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();



if (counter == 1) {
	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	log.info "nodeid[$nodeid]";


	assert a.samlSetStatusDeleted(assertId, nodeid) == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Execute another STS API call if necessary" id="865345e5-4a43-406b-86c9-317c8cea3612">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS");
} else {
	if (counter == loopuntil) {
		tC.setPropertyValue("counter",counter.toString());
		testRunner.gotoStepByName("Call STS");
	}
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="8d0bd90a-98b6-4bd3-83dc-4fb6e6fcd6b0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0C0D631E85D418F0E05305991F0A6EC9</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZbc+o4DP4rTPrYCbkQbpnCTBqgy5ZLCxRaXnaMo4BbcFjbKbS/fu0AOYHSHs4+MRLyp8+W9Ck3HK2WtutxDkyQiOa2qyXlbuKtaTGjboQ44S5FK+CuwO7Q63ZcO2+66HBEy7UbNe2fiu3YGFmmHkA51J0CRjoKnECvFEuhHVRLsxKqylDOY2hTLhAVNc02raJuWrpZHplV17Zdx85bBXuq5cbAuMSWIXlT25Pa8pq2EGLtGsZms8lvCvmIzQ3bNC3judsZ4gWskFa/2d0oScTq+3icDwDDconzOFoZN8ZRzE3A3SGZUyRiBvtcwXe5TMOsGjIm4GR+paVnIWjTMEpMH9GIEoyW5BOp9+mCWERBzlvOI0bEYvXtJSxTAeuwxTq2HHqlGcfULgQ6Ysg40vkCWXusAYTAgGLIPQ3aNe3qsqolR0cMUR5GbMWPzT/jA/QdltEaAp0frrWndjngmZeq3wB22xQvY07eoaeadY0w8H01AV8OlXtgEJJth3DZoFuu2BlZeifm7jUaZA5c/J8CZYqzAxmjZQz1h+bnaFMOHECVhuga/pQZpRIaVJ7nlVpCIBucONLS7syTpkybaA/f8d+c7cvodTrx+63u+G9CJ4iWr/sP+DaetiZ3nTvoRPHb+LpjR73gdkVaFky74x5ezyoNarVfvFVhOhg/mr3ydbu6vp/H0wUt+rPhM2WtcOaT25dZ/PQ6aY0Gk2a/Uho6Yjvo3o1442ncMyqlu3vn4fHtKXgMX/gt/mTzOAr/mljt5nobvaB/R0+0et/HG2/crKXXyfA/9h1mfhjPXgGLg6naoN3ItWSVkPhZzJSHBHqYhLprJT5cABVaXZ1S2uHGUu5I4Moa7mzTNxulgmf7ju1ZVavZNIsFs1itWi3TM8tW9SAyOxYnFP2IhkTlUpK7a5ufCeKVOwPEgGk/IDWQQLleJPq0z7xQADtSWMvOKqxq62+BTv875JQxAVEBXKW5BflecEbFCwcVP+Vin1d744DvBe8Ep+VMl5LUKtndiZZzOU3rfJCP399jpeVuWQ0xk6NgKBqGaRtDwLEcv49R9AbUSEGMi7TucPHT3Kn/mGEsFnQokICVbJZcYl6w3IbA1XJr0wC2l27Oo5SyDgK24pzPX8rFrBj/uLuxi1WcdD/In03EgvSC57AyeeQ95W4ThM6VpXTu49eMqOFIBwRHEpbICY1YFvwcwLnkx870kVMuQjAyiwV8/09OjV5NQxhHMRXthpY4snKQ8BQfa3B/BX2BSRQn/QQhv/8G0UnSAhjkhwsnCb7aJC6XgHSekZR90nOqUmg6TakqTlZVKl7RTx/liF39i/urJ/NOpz1e/w8=</con:value>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_8242ca10-de7f-43ca-ad4d-856f2d96b6a9</con:value>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>USER_NOT_ACTIVE</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1420622612506</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0C0D631E865318F0E05305991F0A6EC9</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>87648</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0C0D63A23E4E1914E05305991F0A8A5C</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0C0D63A2C42A191EE05305991F0A0719</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0C0D63A23E4E1914E05305991F0A8A5C</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0C0D63A2C42A191EE05305991F0A0719</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value>UserNotActive</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86822</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/_32039bbc-2c10-4e7d-a261-65e3a8ddb98e</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0C0D63A23E4E1914E05305991F0A8A5C</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0C0D63A2C42A191EE05305991F0A0719</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0C0D63A23E4E1914E05305991F0A8A5C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0C0D63A2C42A191EE05305991F0A0719</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>612272c1-f935-4b0a-8bdb-7134441ae239</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1fc5c166-fac6-45aa-a91d-6e5c83a809bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afd34c5e-a9d3-489d-8491-3cf25247407c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c4313ae8-2f1a-4037-b891-7fdc00c856f7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f0304369-15c0-40f1-9d8f-d3a3a7ea02d2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9e3d9711-67ba-4870-9af8-db156e84a514</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cfab41b8-6952-44dd-b43e-97df40631ce2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f970210-43d0-4b91-8c51-4fe0c9c032b7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e0e702af-f8a0-4b79-8453-04a85344aced</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5531b17c-6338-4fe9-80b1-c184c5debc11</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>083e3d30-c84e-4dac-a897-f090aec80a37</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06020 - STS - Device - Assertion grant standard user with deleted assertion status blocked:tou - P1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="8561c175-1123-4a07-bc70-4fee132de5a7">
      <con:settings/>
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="2b60f5d8-9c4c-4b14-962d-75f26307d05f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeRightsTokenCreate","UserNotActive");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="0b24d2c6-9de8-4871-8113-1fe5ea20ff61"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      
      <con:testStep type="groovy" name="Call First User Create" id="183b4c65-8264-42f7-99d8-14339accaae0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="8c46bae4-f800-48b7-ba94-6cba4cd4367f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="71973a48-5981-4fe1-9b43-e6bcca0a4dd5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="943e9c8f-8617-4558-8c51-8697f0647b82">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="1521c8a8-034c-4629-82a9-c6c9d8c01b1f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="fbce46f5-78d6-4447-b65b-f783d8094c3a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="c49ef824-4315-41b2-81f6-b3163b6357b6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="ac01f77d-e38f-4362-872b-2ee24c9cbe2d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate" id="58093f17-da71-444d-8334-2bd55bf701b2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="546e0425-618b-45e1-9103-7d0de68af05a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == blocked:tou" id="2da4133c-1b41-46d2-89b4-d67375b74cc3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );

assert a.userSetStatus(useroid,"blocked:tou") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="260a685a-c409-4844-b811-8401b045e36a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="b013bece-de80-41e6-a2f0-eab6648c22f9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="252dcbdd-f67f-4e68-8909-9c05beed1c0a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set NODE_USER_SAML_ASSERTION.STATUS to deleted" id="0c379582-391a-4c8b-8b64-e6c875c629c8">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def nodeid = tP.getPropertyValue("nodeDeviceDefault");
def assertId = tC.getPropertyValue("assertionUUID");
def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();



if (counter == 1) {
	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	log.info "nodeid[$nodeid]";



	assert a.samlSetStatusDeleted(assertId, nodeid) == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Execute another STS API call if necessary" id="7e927e4c-0ed0-4346-a761-cc807793da64">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS");
} else {
	if (counter == loopuntil) {
		tC.setPropertyValue("counter",counter.toString());
		testRunner.gotoStepByName("Call STS");
	}
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="4fb0d1eb-f57f-4c9f-ad36-d10153aef512">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Generic API Test Cases").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C441D94064839E05305991E0A2CE2</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>USER_NOT_ACTIVE</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968729881</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C405EFC62484BE05305991E0A7160</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86823</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value>UserNotActive</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.q.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/_1d4cf87c-4b50-41c0-bfaa-14caf5c2fe75</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C441D94054839E05305991E0A2CE2</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C405EFC61484BE05305991E0A7160</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C441D94054839E05305991E0A2CE2</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C405EFC61484BE05305991E0A7160</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06023 - STS - Device - Assertion grant for standard user login in blocked:tou status - P1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="691c845d-3200-4588-8a88-c076267fc219">
      <con:settings/>
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="6bbd877e-08c3-4f84-963b-038ff1139090"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeRightsTokenCreate","UserNotActive");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="026435c9-b5ac-476c-b260-ef5670371da2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="c61506ee-8c83-4888-842c-f2fea8433477"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="ee5ef385-4e44-4b2b-9c16-404d3b39ca3a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="0afa94e8-13f0-4432-b81b-3ed11e4309ba">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="ce7dc22d-e6c0-4221-aecb-54f4d7e068ba">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="9ddce33b-f2ca-4013-b7e4-05082157379d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="f64e7b23-c854-4e2b-9af4-fb1f8c237d70"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="1610e93e-f1f1-4c85-a863-d9adc9597d0f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="69851215-5871-485d-a956-84bc2a999545"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate" id="757c1f6c-f77a-4002-9c3f-5a6e327e24ef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="d3658032-bdb5-4064-8122-f8bf37367ec4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="d04e0039-2f85-4e6a-aa14-fbae6acbb793"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == blocked:tou" id="aca0922b-81b3-42ff-9608-0e18a523b884">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );
assert a.userSetStatus(useroid,"blocked:tou") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="26e05cd8-33af-446a-a5e0-b3b23ade86e4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="4ef01abb-e1e0-46b1-8d46-60fb051838cd">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="ad3bd587-8c5f-41a9-894d-7270ca5b75d3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C413484310A68E05307991E0A0B34</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>USER_NOT_ACTIVE</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968733910</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C50F679A248E0E05305991E0A134F</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86826</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value>UserNotActive</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.q.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/_03bb527a-7289-47fd-b65c-8b4e2635e5b8</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>2</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C413484300A68E05307991E0A0B34</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C50F679A148E0E05305991E0A134F</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C413484300A68E05307991E0A0B34</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C50F679A148E0E05305991E0A134F</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06024 - STS - Device - Assertion grant for basic user login in blocked:tou status - P1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2051a89c-644d-43ff-9b7c-895c10c75f60">
      <con:settings/>
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="c878fcf0-b160-454e-a984-952a85ced5c4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECECS"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrTypeRightsTokenCreate","UserNotActive");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("stsduration",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("Username",null);
tC.setPropertyValue("UserPassword",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="1c808776-535a-4ead-8883-8c893a406ac3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="82af7db3-5085-4d69-a55d-58c79e97c84e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="88b54cd0-acd8-4ffc-82af-fec995467281"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="0a6a80e5-d8cc-4245-a04a-e9e300dcafb4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="f692dbc2-bc75-4f99-a5df-89f693fb3891">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="97453f90-fd2e-4364-8dc9-d1414590393d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="a94eab94-42f8-43c3-9d5a-c9bb6f76079f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="c685a32d-c799-46d2-9a31-dd75d00d051d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="79eef800-3d64-466b-80b5-db53c24ea3fd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Basic UserCreate" id="cc3fd942-ff71-422f-8446-827d4c43ff5b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("BasicUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="d8d10f53-d6f6-4685-ac1a-24a884a6e3f1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="75c5b902-a853-4c6a-9ab2-5054e6aefac7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == blocked:tou" id="e5b6bb82-2f09-4205-b278-79b4ebbd2913">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );
assert a.userSetStatus(useroid,"blocked:tou") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="8fa34847-f1b4-4764-9ef3-590e32eb36cb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="df3361f4-839a-40ed-8716-600477b3c85a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="1e9cdeec-c166-4f43-bedd-c549c6751f42">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA2F2E26201BEE05305991E0A240D</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>USER_NOT_ACTIVE</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>dece:cs</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stsapi_107_1409968737517</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4048BA260A19E05307991E0A3419</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>F8F12CE21E5EAD0BE0401F0A05995492</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>F8F12CD6FE3E6A81E0401F0A05995498</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86827</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value>UserNotActive</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.q.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/_8dfe883e-f52c-439d-9395-f5e696555a4d</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>2</con:value></con:property><con:property><con:name>stsduration</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserPassword</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA2F2E25F01BEE05305991E0A240D</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4048BA230A19E05307991E0A3419</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025CA2F2E25F01BEE05305991E0A240D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C4048BA230A19E05307991E0A3419</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06025 - STS - Device - Assertion grant for full user login account in active status, user active status - P1" searchProperties="true" id="9d35ab58-5bea-49f7-9991-19e60ac11067">
      <con:settings/>
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="d113c394-b43d-4ac2-967b-21672b5648df">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="7cb023bc-40c6-48e3-8396-dc34b60d6671"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="26cb5042-d18a-46f4-903d-d3f6133da9dc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="1244cf62-4607-4b7c-9547-783bd4b5d201"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="fa0f4b09-5e83-4ea5-89d1-a5070e60eab2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="e8f3bda8-5dbb-4cc3-8117-250921680031">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="64784fab-7362-4280-bd41-b88570a6f8e4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="0a7050ba-4fb6-49ab-bcc7-c5f58f886c8b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="a97c748b-068a-4275-88b6-693211083bfe">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="1d18f5e1-f42f-4b53-b36d-ae9a3a021bd1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="516b8216-539d-421d-a87e-d3d614115e4a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C50F94AE51567E05307991E0A6AC9</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968741285</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C44425A334851E05305991E0A212B</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value>RightsTokenNotFound</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86828</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/_ce4ee4aa-34cf-40da-bd9a-b8ce59da9ce5</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C50F94AE41567E05307991E0A6AC9</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C44425A324851E05305991E0A212B</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C50F94AE41567E05307991E0A6AC9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C44425A324851E05305991E0A212B</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>78bb80a2-4eb8-4c66-a0b6-baf7d36b796e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06026 - STS - Device - Assertion grant for full user login account in active status, user blocked:tou status - P1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="37d4492b-3d5d-4f5f-abc5-964b2ba0a58b">
      <con:settings/>
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="d4f605c4-7513-4eb0-b27b-2dc2e62df2d1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeRightsTokenCreate","UserNotActive");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties 1" id="4f47bd69-e93b-4dd4-821d-a22e88f321c3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="99b6e4c5-74ef-409b-96a8-9bdf21d61690"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="f8ec7dd4-c707-4cf5-b3a7-d789145bc906"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="415430d5-cc36-44a4-a320-e69755a28eca"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="fd7f4f46-9cac-4c68-8d4a-8416693c2493">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="84484802-3c79-4fdd-a9c3-2c80a96441af">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="4edcacf3-5519-4f97-b828-0e912acac5ab"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == blocked:tou" id="f994686a-ebc5-4c31-a30f-1a7f99a69ad7">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );

assert a.userSetStatus(useroid,"blocked:tou") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="fedd6395-8c22-4ff7-91aa-3b846a8e8829"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="ea79ec6c-cb01-4953-8771-257a67f742c0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="d61af587-ed55-43a1-95cd-d0f69233db48">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="3865f853-fe21-4e4e-a2c6-1f3013512e59">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C405FDA8D4861E05305991E0A5ECC</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>USER_NOT_ACTIVE</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968745126</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C412001BC0A2DE05307991E0ACC6F</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value>UserNotActive</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86829</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_10cbab11-a182-4ba4-bcbd-5f1dfbccf999</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C405FDA8C4861E05305991E0A5ECC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C412001BB0A2DE05307991E0ACC6F</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C405FDA8C4861E05305991E0A5ECC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C412001BB0A2DE05307991E0ACC6F</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>332e65da-8790-4c75-b725-ecab062c13ae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06027 - STS - Device - Assertion grant for full user login account in pending status, user blocked:tou status - P1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="0dbc9bd9-1c2c-42d3-ad6d-c125c8870809">
      <con:settings/>
      
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="ce0c2c6f-28cd-449f-9835-56274f976996">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeRightsTokenCreate","UserNotActive");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="58c79586-67a5-495c-b9a9-51ae727232a7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="ccac3ea8-5d8a-45ad-86ee-64f653cd621f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="4ee728b4-60bf-491d-8557-2499b9628f85"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="ca7737b2-9487-45c3-ace5-d552c176631a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == blocked:tou" id="0e26607f-f85b-4f91-a215-dafcc332b2df">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );
assert a.userSetStatus(useroid,"blocked:tou") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="6dc4e3c1-9adb-45df-84a0-8ca4c44829b3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="66b23971-1f66-4541-8f38-03660f4ea905">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="e95072c7-5a13-42f5-a334-6a9b5a2c30a6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4030D0C64837E05305991E0A9E1A</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>USER_NOT_ACTIVE</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968749029</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA2F28ADF01B4E05305991E0A9C72</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>87648</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value>UserNotActive</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86830</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.q.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/_d679a7e2-ea46-4bb7-b1b0-b24aa1dfb37c</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C4030D0C54837E05305991E0A9E1A</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025CA2F28ADE01B4E05305991E0A9C72</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C4030D0C54837E05305991E0A9E1A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025CA2F28ADE01B4E05305991E0A9C72</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>94fb394f-93f9-43c9-b034-a30b2527e739</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06028 - STS - Device - Assertion grant for full user login account in pending status, user active status - P1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="98687dac-7607-496c-b2e8-fa2e6825f253">
      <con:settings/>
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="d2cef669-ac31-42ae-b2eb-fc66b7ff88bb">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeRightsTokenCreate","UserNotActive");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="5cc0f8a2-4ff0-49ec-a76e-8634ed44047e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="05c69e8e-c323-471d-9f9c-ed14704ac9a6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="24689f9c-9345-419b-9b2b-e63b255989ef"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="4f7ce35e-26fd-4509-a770-c404c0a6bcaf">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="afb511bf-aafc-4cee-bc3b-5c066421a921">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="e30055d4-1062-43b3-a4ed-ffa6379f30d3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="ce3c580c-de2a-4d21-be37-eac99da6c3b3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set ACCOUNT.STATUS == pending" id="be5aeb1a-ae66-4a53-84b5-3352cda79140"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );
assert a.userSetStatus(useroid,"pending") == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="8acb451d-0219-45e6-b03f-35d4e99edae1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="b51e2d82-eddd-4548-b0c0-bd9c5ec48eef">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="64ee6529-2974-44dd-b5c4-df3989e39060">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C44FAB11F485BE05305991E0AE88C</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>USER_NOT_ACTIVE</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968753325</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C51E513121574E05307991E0A178D</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value>UserNotActive</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86829</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_10cbab11-a182-4ba4-bcbd-5f1dfbccf999</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C44FAB11E485BE05305991E0AE88C</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C51E513111574E05307991E0A178D</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C44FAB11E485BE05305991E0AE88C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C51E513111574E05307991E0A178D</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>332e65da-8790-4c75-b725-ecab062c13ae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32001 - STS GET BasicAuth - Device - Username in 'active' status - P1" searchProperties="true" id="fd5c64d4-692f-4db8-bb20-ddb6a22098bd">
      <con:settings/>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="663ddfef-c765-4c64-b81e-dabb6ecec6ae">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="e3ce7070-b914-432c-a6c6-64e8afc9b283"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="7ce2d04a-68e3-45ef-a673-2b9247b9b60e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="d88f5fcb-ccb6-4eae-9829-b7461a9e986a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="eadc5d3d-2e1b-4349-a098-da74453a0db4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="6cd45034-fee5-4ab8-a488-5f156d2155d3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="c5d50536-33b6-4449-a832-fdedd6952653"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="c2a4092b-f4a0-452d-843a-2bc9c1498e0b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="277c67eb-790c-4d87-8bb1-55fa1ee090ae">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="1799d7d5-a557-417d-9e3a-862ad55767b4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="7f89315e-21fb-4c64-a19c-c50c978b9808">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E50900C2777539DE05307991F0AD82B</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZRc6o6EP4rDn28g0SFUpjqDGrtVWvbI/ac1pc7MQRNC8EmQfT8+pOgUrS213ufnF03337J7n7LNYdxVHc9zjETJKGVdRxR7ubeppYy6iaQE+5SGGPuCuT63ujOrVeBC/dHtEq/29T+QTN0ZYYA6DZwGrpp2ki/Mi9rOm7M7MYsQGHQsGUo5ynuUy4gFU2tDmqWDuo6sCbAdM1L15LINphqlZ+YcYktQ6pA25Fa86a2EGLpGkaWZdWsUU3Y3KgDUDOeR3c+WuAYaq3r7Y3yRKy1i0fVACMcRaiKkti4Ng5irgPu+mROoUgZ3uUKvsoFDOAYMibgZH6hFWdx0KdhkpsdSBNKEIzIb6jeZ4TFIgkqXjRPGBGL+MtL1IAC1vEa6ahm0gvNOKR2JtABQ8ahzhewtsMa4xAzTBGuPI37Te3ivKrlRycMUh4mLOaH5n/jg+kKR8kSBzrfX2tH7XzAEy/VusbI7VMUpZys8L1q1iVEmO+qidH5UJVHhkOyviNcNuiaK3ZGmd6RuX2NLpljLv5PgUrF2YL8hFGKW/d48TqbvIjVxiB+Fi575nDs/52hZ/jUzAmUg3NHUdqtedSURRNtT0C7c5tO149PmTm8/3G3nv1waGp6DfH8l/1IX7wwbPuXqMOHt9PBYrl5owPM+7NFshkMnd+1aRRl8XieWv2ogbzXYPI+QWlmv70nL1467FiTaTsDbLWa457xBgN/9cvrWSSrj5Kru4jNBrexI6YbP72h4Sh7v2cNtiLemo1WaArrg3F3MH56CH7Z8abT3vSbxXVK/A99+5n309krRmJvqjbodys9WSUovhcz5SGBHuah7lKJDxeYCq2lTintcFMpdyRwZQ23NrixgOe1O91GvQMcz7sBVgNYjlPrAc9q1xt7kdmyOKLYSWhIVC4ludu2+Z4git0Zhgwz7RukLhSwcp+IB/rAvFBgdqiwdllhVVt/CXT83z6njAmICuAqTRvL98InVNzcq/gxl/pptTf2+F6wIqgoZ7GUpFbJ7s61nMtpeofVoJquVqkSc9dWU8zkLBiKhwHqho9RKudvM0neMDUKFOMssdvf/Dh54T+kmIoF9QUUOJbdUsnNM7abj7nabn0a4PW5q/MgpSyEwGtxyteJ5GZWjL9d3shFKk66H+VPlrCguOAprFIeeU+53AShc2Upodt8DImajmJCUCJhiRzRhJXBTwGcSn7oLB654CIEI7NU4K//qajZa2oQoSSlot/VckdZD3KeYrPE7kfQJ5hccopvEPLvHyE6yVsAYfnlwkmOr1aJyyUgnZc0ZZf0WFZ6badnO45n1bxuWVacK+ujPw/YtT65P3tK73Tc460/</con:value>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E50FB9F799A51ADE05305991F0A9857</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0E50FB9F799A51ADE05305991F0A9857</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E50AABCD32C09AAE05305991F0A5B23</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0E50AABCD32C09AAE05305991F0A5B23</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_cbc84f00-7093-447c-8461-e3b73bdcfd37</con:value>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>87648</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1423111676314</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E5090105CB253ABE05307991F0A93E8</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_7abe21ab-a1f1-45a0-bba5-2de2fd250a37</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E50FB9F799A51ADE05305991F0A9857</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E50AABCD32C09AAE05305991F0A5B23</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E50FB9F799A51ADE05305991F0A9857</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E50AABCD32C09AAE05305991F0A5B23</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>2956a532-eae8-4b96-8001-4b10c166c46a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32019 - STS GET BasicAuth - Device - Account in 'blocked:tou' status - P1" searchProperties="true" id="558264ea-b6a6-4f46-bdd1-f47ef241fd52">
      <con:settings/>
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="c4c9fdf8-ae6a-4f15-b468-824b419f575a">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="7978deec-563c-4745-ba6a-59b5be3fe52f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="f811e0f0-5c5d-4187-b088-0a7c04a3a7e5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="3d8297e2-f171-4e57-a88e-0bb7b393b148"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="56d2c29b-3c37-40a1-8026-d64c8e8166a2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="c044ed3e-2e88-44e2-a0a7-a631bad15e72">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="b7d3103a-1214-463e-a43b-1b88a9d57187"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="1ddcd99d-e227-4ae5-bedb-753aaf656c95"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="18557c8d-0e6c-4901-b125-884ddedf5c03">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="90f85e8c-c471-4b39-9ed9-5253cdbef2d1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="4d182887-e1fb-4f6c-98a0-3dc1ac61d175">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C413484530A68E05307991E0A0B34</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968760775</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C406265184865E05305991E0A0CE1</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87368</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_61799290-d750-43d5-8d4d-c5b994202307</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C413484520A68E05307991E0A0B34</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C406265174865E05305991E0A0CE1</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C413484520A68E05307991E0A0B34</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C406265174865E05305991E0A0CE1</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32020 - STS GET BasicAuth - Device - Assertion retrieval for full user login with ACCOUNT_USER active - P1" searchProperties="true" id="6f6522c4-c1cd-4f86-ac57-c576683a37b7">
      <con:settings/>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="ffc77fd5-01ab-4569-a9c5-43d21cc9a271"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="edbf6296-fed6-4fc6-b0ba-fe5bfa3e4309"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="7429193c-a927-4446-aa9e-055b7c7f994b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="5724a024-383f-4b4c-9aac-bbc6c656c805"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="0935b191-ceb1-48d2-9823-3633b8377ec6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="a5cf8b8e-7003-4742-a865-64d6d921d99a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="e0f1a96a-1005-4bec-aab6-188f0fa384f0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="ea660572-014e-45df-9077-ad310f19f1ac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="70ce0d09-13ad-4c58-8881-17f1586e89fa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="f6507925-f9ca-4ae4-8318-9c607f50a3e7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate" id="079669f3-e19a-4fb8-b0c4-90391d992cdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="c05ef173-394d-4d7e-a56d-7dfd8bbd96dc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator for blocked:tou standard user" id="d9dc6219-79cf-4216-af4c-ba7c192e010a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator for blocked:tou standard user" id="b262b646-a2f1-422a-9d4a-47a9a581cdc1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU for Second User" id="124a50ec-d275-4a09-aeee-00c3dc79229a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="aa706cf0-a77f-4889-9384-f68b5d365545"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="15493dc8-dd74-4c93-9532-38d38272d355">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="b7ee522a-55ed-4439-8385-5f6d42275e45">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="014a833d-be07-4ddc-b06c-84d347f66881">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C446393344869E05305991E0A7372</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968764306</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C413779E10A6AE05307991E0A119A</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87369</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_729387c3-07da-4fae-834e-26d5112fd757</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>2</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C446393334869E05305991E0A7372</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C413779E00A6AE05307991E0A119A</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C446393334869E05305991E0A7372</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C413779E00A6AE05307991E0A119A</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32021 - STS GET BasicAuth - Device - Assertion retrieval for standard user login with ACCOUNT_USER active - P1" searchProperties="true" id="e614e1d2-a18d-474b-ba86-c169ad09da5b">
      <con:settings/>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="dc2ae6a4-c241-4eeb-a388-3f445422029c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));

tC.setPropertyValue("stsduration",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("Username",null);
tC.setPropertyValue("UserPassword",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create" id="3c3072e3-4f6c-4d8c-8b88-893b3eaceb6e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="17a2c5b9-b6bb-4a96-b426-c5506e3b913b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="93a2c434-d7c8-40d4-9894-1ed78bc55e9c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="bea49706-2ffa-41b4-b2ac-fa93ec2cb5ee">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="4ae37f10-9492-491f-80e2-21a9682cbc1b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="ae8f35fb-3a7f-4615-b569-cf781db96e25"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="c75efcb2-52f7-4329-a815-800fdd8bacea"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="aed61b25-79a6-4f1e-80fb-af1dc7a267bd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="58609a03-8824-4dd4-b192-ce45b75d339c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Basic UserCreate" id="6b1fe58c-fe27-4196-8423-d07aaff45d13"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("BasicUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="9438dac9-76af-4dfc-bc5e-255fd74255f4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator for blocked:tou basic user" id="b89b5a23-1284-40ba-b1c7-9fe131e8881c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator for basic user" id="de70374f-83af-4960-acee-fafc4c6fd3f2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU for Second User" id="dde22af8-f2d7-4e64-9c02-26c542e266b1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="b24b43d8-f0b9-4dc2-bbdd-590e26d15d2f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="5288f888-05a4-4d05-ac52-d1bb029925a1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="8a5e0f02-684a-46ed-a1df-7385e1997bca">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="cd195dd2-7ea5-4cea-889f-d037da0644e2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C405F584B4853E05305991E0AD198</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stsapi_107_1409968767955</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C51E31C9B158CE05307991E0A01C0</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>F923A2E882993FC6E0401F0A05992FF5</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>F923A2E6DC228153E0401F0A05992FF3</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87370</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_e3d57190-d124-472f-8848-f6e573db483b</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsduration</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserPassword</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C405F584A4853E05305991E0AD198</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C51E31C9A158CE05307991E0A01C0</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C405F584A4853E05305991E0AD198</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C51E31C9A158CE05307991E0A01C0</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32022 - STS GET BasicAuth - Device - Assertion retrieval for basic user login with ACCOUNT_USER active - P1" searchProperties="true" id="040683b5-baad-428c-8d86-17fb8fe4e802">
      <con:settings/>
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="9552fbeb-bef6-4309-85a4-59316a44dbc5">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeRightsTokenCreate","UserNotActive");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep>
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="5a9a34ab-ed92-4555-807b-f7e1d011bb6a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="b7596a5f-64dc-4381-9d38-26a257fef322"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="ff989b09-25b9-4a81-a87a-0fafd150b3b8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="35238bdb-100f-47da-b9b1-f3088b9010b3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="71f5a4a3-6fb9-4be8-8c06-f033db633d09">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="d2250978-43f6-4fca-bb76-5be7f39a5025"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="a3f39edb-de45-4315-bb7c-b2bbcd9de1d5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="0e665e8d-b04f-4b31-a6c3-98905687cbb6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == blocked:tou" id="d64ae014-d10b-4c80-b906-4a5481dc36f6">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );

assert a.userSetStatus(useroid,"blocked:tou") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="cd9e5d84-cfb9-4ad7-8e5b-e6684ff68d2a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="09d0d3f8-bb4d-43bc-8f35-374b64fb0057">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C446393404869E05305991E0A7372</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968771927</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C5268D785156FE05307991E0A9A32</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87371</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_645a8cf4-849e-4391-a801-c722732bc77e</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRightsTokenCreate</con:name><con:value>UserNotActive</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C4463933F4869E05305991E0A7372</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C5268D784156FE05307991E0A9A32</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C4463933F4869E05305991E0A7372</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C5268D784156FE05307991E0A9A32</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>617538ff-cc98-4ddc-89ed-fde7515096db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32023 - STS GET BasicAuth - Device - Assertion retrieval for full user login with ACCOUNT_USER blocked:tou - P1" searchProperties="true" id="64e512c4-0fed-4fcf-9133-95bb10ff8264">
      <con:settings/>
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="752c5bbe-8bb6-49b8-9026-a9d6a83aa6b0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeRightsTokenCreate","UserNotActive");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config></con:testStep>
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="2adfaf6a-3d42-42dd-92d1-7347e69a3a14"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="dc1b252f-0709-4bab-943f-d8b012882ac7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="326cd023-1b16-474a-9353-7a24e6502640"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="172ad686-9e9f-4a2c-8057-dfc5a579ce70">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="868296f5-57df-454a-9cbf-d8b1ef5b6866">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="20c8276c-66da-42af-b220-c232f6726baf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="d717b775-f4bf-4df0-900a-7b0399444446"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="8a245fb2-a98f-420f-9b62-94d1c033b76d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="3ffb23d9-3526-4920-bd8d-bb4c4ae7118a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate" id="0d9c7e6a-c6c0-4ed1-8509-c84767a44da3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="b27c706f-b7b0-44df-a60a-c00bf05baa42"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator for blocked:tou standard user" id="f643cfe3-a400-45cb-977f-d94e180a3c42">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator for blocked:tou standard user" id="00c2cf74-2607-4864-802f-de809e71da4d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU for Second User" id="28e6b156-8a24-40de-adf6-ef2de1a162ae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="5874731b-4281-4ac5-b525-93f48e0a66db"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="d14b4655-4fdf-4892-bdb2-d1d6fd769c3c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == blocked:tou" id="1a1c902d-a595-48eb-ad85-0b573b713c42">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );
assert a.userSetStatus(useroid,"blocked:tou") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="a8f96b2d-5735-4686-b5c6-b163d08ae1fc">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="b84e81c7-7adc-49e9-91d9-39fb67a5f587">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4653817E0A05E05307991E0AD523</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968775640</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C411FE58E0A29E05307991E0AAE6D</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87372</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_0c2673b7-1915-4fc2-b64e-c361679c41d5</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRightsTokenCreate</con:name><con:value>UserNotActive</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>2</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C4653817D0A05E05307991E0AD523</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C411FE58D0A29E05307991E0AAE6D</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C4653817D0A05E05307991E0AD523</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C411FE58D0A29E05307991E0AAE6D</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>60a19997-5dfb-47f9-b600-892b7821148b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32024 - STS GET BasicAuth - Device - Assertion retrieval for standard user login with ACCOUNT_USER blocked:tou - P1" searchProperties="true" id="dc14b6b6-21ab-4c14-a206-497abae0b900">
      <con:settings/>
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="23791fda-cd8c-477e-8c58-6ee605337eb8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeRightsTokenCreate","UserNotActive");

tC.setPropertyValue("stsduration",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("Username",null);
tC.setPropertyValue("UserPassword",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
</script></con:config></con:testStep>
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="7b9957ec-01d5-4e70-842f-1cc08138c120"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="2f8a79d2-1fa8-4c80-8445-8c7a5c78f235"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="535e12ac-1706-457b-8995-753361163bb0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="2700e658-cd99-4eba-a9d3-6c4626e6333b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="67487efb-7e92-46ed-a751-f9ff180cf1cc">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="aaa8a00c-2e2e-4693-b83b-e25465833f2f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="878c885d-4700-47b5-b7bd-cbfc1347a3b0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="94a94850-cb66-4911-b6fd-6af4d27e4823"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="48e1ebf7-9b24-43a0-9e6e-1b22d6aa047d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Basic UserCreate" id="2d92a423-7d01-48d2-96fe-9a1e1fde8b32"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("BasicUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="67de7367-7a22-41f3-95c6-7f18316e1241"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator for blocked:tou basic user" id="da364691-539b-4b8f-b3d3-dd7a41499afb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator for basic user" id="f783f562-f7ee-4987-88b7-3fa21fc2286d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU for Second User" id="321f5348-c16b-44a0-b277-f78381b402e9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="446b72b8-f009-467d-829a-e0d9fa928b57"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="bceb2602-507b-4cac-8eff-7455316cb4f4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == blocked:tou" id="85f6e973-719e-4629-9044-cf9c27296663">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );

assert a.userSetStatus(useroid,"blocked:tou") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="21f3a6c8-d3dc-41b6-b7de-34b9af754a26">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="82df3aca-dd33-45c3-b52c-bd21df0ebddd">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C520B7B301588E05307991E0AE8A9</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stsapi_107_1409968779753</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C44F5C18F0A6CE05307991E0A1C9E</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>F923A024E4F8DE58E0401F0A05994205</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>F923A0C313EC77FCE0401F0A05994203</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87373</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_83a6f443-fa18-4a34-bd3d-65fd67504270</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRightsTokenCreate</con:name><con:value>UserNotActive</con:value></con:property><con:property><con:name>stsduration</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserPassword</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C520B7B2F1588E05307991E0AE8A9</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C44F5C18E0A6CE05307991E0A1C9E</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C520B7B2F1588E05307991E0AE8A9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C44F5C18E0A6CE05307991E0A1C9E</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>b8940ba4-8b7a-48b2-a411-d25df1915f0c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32025 - STS GET BasicAuth - Device - Assertion retrieval for basic user login with ACCOUNT_USER blocked:tou - P1" searchProperties="true" id="eb9025c2-4a47-4b40-acdd-4dc3088b5dc7">
      <con:settings/>
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="e823c150-6842-40ef-a60c-7df35d917e90">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="f32e6695-6d13-423f-98f8-2f98adf36963"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="3e40ddf5-93f2-4015-8869-b3eb3f97b696"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="b3ac6008-ca1f-418c-98ec-54fe1449cd46"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="6f187675-8347-473a-a847-76ff2c8be0cb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="bd3a78bf-8f2b-42ae-8454-954ec1a78913">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="b684772f-d740-4abb-b26e-f42bd7b07c3e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="44b99172-05a7-46a8-9f02-03fdbda62808"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="674ac3f6-f2a9-4f2b-af1b-14716fd75f40">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="4a744d76-8902-4e41-82f5-dba7bca93895">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="45b07c46-7a51-44fa-bb03-58f369fcce32">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C40305F234833E05305991E0A0CF0</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968783869</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C40472FEB0A11E05307991E0AB964</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value>RightsTokenNotFound</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87380</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_d2b585ac-a1cb-4147-be3b-ab6afd8c4a5e</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C40305F224833E05305991E0A0CF0</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C40472FEA0A11E05307991E0AB964</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C40305F224833E05305991E0A0CF0</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C40472FEA0A11E05307991E0AB964</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32026 - STS GET BasicAuth - Device - Assertion retrieval for full user login account in active status, user active status - P1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a9324aa2-9012-4b9d-9292-ef7dfc4c0023">
      <con:settings/>
      
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="3b2843cb-b7fc-4836-a752-86ec12a30052">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeRightsTokenCreate","UserNotActive");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="a7213546-a28a-4bb3-8831-a0efc63a3830"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="4b135791-da4d-4a9c-bf97-33b09d779947"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="8cdba0aa-f1fe-4eeb-8a3d-0c6c030fe616"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="900ace6b-f4d0-478b-8242-9589b70edccf">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="aa562290-a189-4d35-964a-688b60421634">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="ef180d82-c19b-4cc9-903c-5ef26e409985"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="63f37fa6-d457-4d9c-8e44-3f4a7a24eb8c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="53b4dcf6-b050-47ac-8de2-e564bed940fb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == blocked:tou" id="aa2b9d1d-884d-494d-aa8b-943d3b2ebbcb">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );

assert a.userSetStatus(useroid,"blocked:tou") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="df8fda57-091d-4c4e-9780-2a087a1e1bef">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="d4046937-3739-414b-81a7-7de5f0701fe8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C43E388CD0A1DE05307991E0A6B76</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>USER_NOT_ACTIVE</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968787656</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C403081CE4835E05305991E0A2E11</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value>UserNotActive</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87381</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_c7d569e1-88ad-405c-bcbd-5857bca7648a</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C43E388CC0A1DE05307991E0A6B76</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C403081CD4835E05305991E0A2E11</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C43E388CC0A1DE05307991E0A6B76</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C403081CD4835E05305991E0A2E11</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32027 - STS GET BasicAuth - Device - Assertion retrieval for full user login account in active status, user blocked:tou status - P1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="bc7d9c93-e837-4ee9-b60d-24008b6e5dbc">
      <con:settings/>
      
      
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="568b9c09-6c69-46ca-8230-678fffc82ca4">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeRightsTokenCreate","AccountNotActive");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="fcc552e0-f9e0-4141-8d9e-78a28fa8b4be"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="1529b199-578c-427a-9287-93d4099f3bd5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="cc316093-3a13-4847-af3f-0beed8dc731e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="14f11296-c4d9-481c-8f26-888a449940d6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="69138e3a-5fb8-4121-9c28-1b7dc2c3b641">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="50490973-170f-477e-b260-eca20f3ded7e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="8c775984-c6e0-4f27-a975-812bd8facd06"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="631fcef5-b5bd-4756-8703-813383223360">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT.STATUS == pending" id="cd5c099e-fc15-43c8-851a-d28e92f17fa1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acctoid = tC.getPropertyValue("accountoid");

try {
	a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	assert a.accountSetStatus(acctoid,"pending") == 1;
}
catch(Throwable e) {
	log.info "Error - dbUtils.dbAccount - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == blocked:tou" id="f5ffbec6-07a5-41d4-a90e-f196c4f7e7b1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );

assert a.userSetStatus(useroid,"blocked:tou") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="4742f446-68d9-487c-9504-3b3e778f2d59">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="720d64f0-bd11-4a7c-ae5a-00addec38b7c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C516C0EC3157EE05307991E0A05CC</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>USER_NOT_ACTIVE</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968791867</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C436AEF200A33E05307991E0AF56C</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value>AccountNotActive</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87382</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_f8d63141-27f3-4d6f-942d-ac75d81814ea</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C516C0EC2157EE05307991E0A05CC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C436AEF1F0A33E05307991E0AF56C</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C516C0EC2157EE05307991E0A05CC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C436AEF1F0A33E05307991E0AF56C</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32029 - STS GET BasicAuth - Device - Assertion retrieval for full user login account in pending status, user active status - P1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="bef19675-a1a8-4e8f-a2e1-ae02232dce69">
      <con:settings/>
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="1fc06cd0-e3c9-4590-96f2-09497e3b311f">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeRightsTokenCreate","AccountNotActive");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="f6674c3f-0063-4d31-8302-30c720c57ef7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      
      
      
      <con:testStep type="groovy" name="Call First User Create" id="cbdbd28b-64b9-44a5-afbb-97f174d122db"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="1bbe103d-e34c-419a-8627-f6fbee5d85d5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="6822cf38-4265-4bb4-af5a-81c210128d8e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="8f927fcf-77e8-4981-96a7-f6bd9325259b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="5a86c51c-307c-45aa-be90-24677fa7a690"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="72603fd2-92e8-49ab-bf19-9ffe061cb9ce"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set ACCOUNT.STATUS == pending" id="658eff3f-23bf-496b-a0e6-3e65301b034b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def accountoid = tC.getPropertyValue("accountoid");

a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem") );

assert a.accountSetStatus(accountoid,"pending") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == active" id="4b2430d5-3ed0-469c-bac7-241c1ba577d6">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );

assert a.userSetStatusActive(useroid) == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="e57b5c0f-cdc3-4ed2-a4ed-7524f957df34">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="227121bf-a5e4-43a9-8a37-aa6dcb87dc25">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="69a1072b-ff6a-4e30-acb3-398eef6d89f5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C405FDAD04861E05305991E0A5ECC</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>ACCOUNT_NOT_ACTIVE</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968796103</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C452A31FB0A03E05307991E0A724A</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value>AccountNotActive</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87383</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_08f85930-0f92-4424-8662-2be51d5f0e34</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C405FDACF4861E05305991E0A5ECC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C452A31FA0A03E05307991E0A724A</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C405FDACF4861E05305991E0A5ECC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C452A31FA0A03E05307991E0A724A</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>ad9eebe8-9f27-4f9f-b875-b619a65b23a6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>997fd375-2c03-47bd-bc26-3ea32892eb20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties>
      <con:property>
        <con:name>QC_TestPlanDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestLabDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestSet</con:name>
        <con:value/>
      </con:property>
    </con:properties>
    <con:reportParameters/>
  </con:testSuite><con:testSuite name="4_STS Create Tokentype DeviceAuthToken - Device Role - P2 - Test Cases" id="2ff64c76-a8cd-4f3c-976f-4fa56136e58d">
    <con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop/reports</con:setting></con:settings>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03130 - STS - DeviceAuthToken JoinCode - FORBIDDEN - DeviceAuthCode element NULL" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b88b4126-83be-4962-826d-307e9ad5df96">
      <con:settings/>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="86d20a0d-b454-4c9c-b141-d03b86a245c3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("stsAction","nullDeviceToken");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="7de877f7-ecf5-4b58-872c-b67beb2459bb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="659946ec-7961-4f26-b603-6d2117b90261"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="ba838c56-f8e7-47d3-ab4c-b7fbe74d2909"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="c5d449b5-402e-4b57-bb32-5f4acf5d8849">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="8fabc2c3-3bb1-4f4a-964b-758215be8bdb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="54f33d23-a457-4409-b10d-23ffc2e89473"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="13ac0cc3-e976-4527-bf75-b7602dd90676"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="1cc620b4-adc1-4658-9389-920e45c649a7">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="c5a19585-4abd-4b18-bbe4-43e93614899b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="2dee3cf7-fccc-4846-a7f7-111400697a05">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="337df921-0d7d-4a44-8476-6039f8c5f61b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4196DB854855E05305991E0AC577</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="894426516756139"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F9239EC254A43ADAE0401F0A05993BD8</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F9239EC254A43ADAE0401F0A05993BD8</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F923A024EF232BBCE0401F0A05994207</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F923A024EF232BBCE0401F0A05994207</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenAction</con:name>
          <con:value>nullDeviceToken</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87235</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F8F12CE3EF669252E0401F0A07991D28</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F8F12CE3EF669252E0401F0A07991D28</con:value>
        </con:property>
        <con:property>
          <con:name>stsAction</con:name>
          <con:value>nullDeviceToken</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968800142</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C405F587A4853E05305991E0AD198</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C4196DB844855E05305991E0AC577</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C405F58794853E05305991E0AD198</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C4196DB844855E05305991E0AC577</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C405F58794853E05305991E0AD198</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>32c85dee-33ba-475c-b141-5fe688194607</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1cc620b4-adc1-4658-9389-920e45c649a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03131 - STS - DeviceAuthToken JoinCode - FORBIDDEN - DeviceAuthCode element tag terminated" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="0bb87166-6d7a-4d61-9788-f587191cad6e">
      <con:settings/>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="f9e2bd85-98bc-44a7-8fa8-31d335e2add3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("stsAction","tagTerminatedDeviceAuthCode");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="6b0fbc46-56b8-49d6-8bf4-89f95345f1e8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="d1d03d66-330d-4065-9d2e-da7e5e5d1b97"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="f0878d0a-44f1-4b30-8bb3-31a2e298f9ad"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="b8a6d278-7881-42e4-8e53-d6ea434b23d5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="c10210e5-7457-4fb9-bde0-800c77d0d2f4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="9e0efb1a-7425-4779-b89c-5d0ef8a736d8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="bc94bcf8-624d-4743-b598-e9d7223ed0b0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="0feb9e10-ad36-43fb-b6e5-81976297c69c">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="2397b8b0-03a2-4c48-9aa2-328e942979fd">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="81374b82-c472-42a6-a065-ba2d8c445120">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="56771126-aaa1-44ee-921c-6f3716d413e9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C516B86C21578E05307991E0A8D33</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="533571835866546"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F9239EBE523E50D1E0401F0A079950C7</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F9239EBE523E50D1E0401F0A079950C7</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F8F12CD6FEE76A81E0401F0A05995498</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F8F12CD6FEE76A81E0401F0A05995498</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthString</con:name>
          <con:value>841321476135740</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeSavedRole</con:name>
          <con:value>urn:dece:role:device</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F923A024E50ADE58E0401F0A05994205</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F923A024E50ADE58E0401F0A05994205</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968804013</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C50F97C1A1569E05307991E0A4100</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenAction</con:name>
          <con:value>tagTerminatedDeviceToken</con:value>
        </con:property>
        <con:property>
          <con:name>stsAction</con:name>
          <con:value>tagTerminatedDeviceAuthCode</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87236</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C516B86C11578E05307991E0A8D33</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C50F97C191569E05307991E0A4100</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C516B86C11578E05307991E0A8D33</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C50F97C191569E05307991E0A4100</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>9058c205-80f5-4dbf-bee3-369df0fd9a4f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0feb9e10-ad36-43fb-b6e5-81976297c69c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03132 - STS - DeviceAuthToken JoinCode - FORBIDDEN - DeviceAuthCode element missing" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6a0a30b1-11e9-47ff-9f15-141322cc6226">
      <con:settings/>
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="f17510c6-0f7c-448f-92c4-56a0dc60feb2">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("stsAction","tagMissingDeviceToken");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="ff4ed554-3403-4308-9bda-0f313db07b7f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="77d28540-ea95-40ce-951b-6eae8dc4d517"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="b516054a-7432-4ff6-9a2c-3541190ebb49"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="1163c3c5-fa13-4b1a-80a1-cfd85c84937b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="ad017bd7-955b-4779-bd2b-cb4bb30dd222">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="4af88a89-f43d-422c-829b-021cc4f78073"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="f686dc08-167d-416d-b08d-18895a53bc5b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="9475036a-7f89-4459-8948-7af0d8831cf3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="39e8e111-8834-4223-8cc4-66fd34ebf393">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="d59f8c8a-c61d-4923-b008-db2e1ee1a396">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="51e20cb4-e030-4bce-97c9-deca3235ae9b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C413842CB486FE05305991E0AC8FC</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="738116772600000"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F8F12D180960D52DE0401F0A07991D24</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F8F12D180960D52DE0401F0A07991D24</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F923A024EF392BBCE0401F0A05994207</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F923A024EF392BBCE0401F0A05994207</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthString</con:name>
          <con:value>841321476135740</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeSavedRole</con:name>
          <con:value>urn:dece:role:device</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F8F12D32583AD98EE0401F0A07991D37</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F8F12D32583AD98EE0401F0A07991D37</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968808003</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C413484660A68E05307991E0A0B34</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenAction</con:name>
          <con:value>tagMissingDeviceToken</con:value>
        </con:property>
        <con:property>
          <con:name>stsAction</con:name>
          <con:value>tagMissingDeviceToken</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87237</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C413842CA486FE05305991E0AC8FC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C413484650A68E05307991E0A0B34</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C413842CA486FE05305991E0AC8FC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C413484650A68E05307991E0A0B34</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>81a8ac37-22cd-40ba-b3bd-6019d093f031</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9475036a-7f89-4459-8948-7af0d8831cf3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03133 - STS - DeviceAuthToken JoinCode - FORBIDDEN - DeviceAuthCode value does not exist" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7178752a-4abf-42ed-9205-4f717bf9fc1a">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="bfcd9313-9fbd-4163-a297-9a2db709b1e7">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("stsAction","tagMissingDeviceToken");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Call Account Create" id="a0230ca5-3617-4fad-bea2-1577431b96cf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="a85a38a3-2f61-4de7-bb25-54c8b27969fa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="f238de18-9693-42bc-8580-0800aa159ab3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="9925f47f-a34f-4c64-87da-cfbfbcac4c51">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="a7a2c9bd-82f6-4741-af7f-a1d5cc68a36c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="31ec0c09-6fc8-4fa0-9328-3a77a7b73129"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="b1ef70bd-de5a-4efc-9a4c-323d75cb1e3e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Generate a DEVICE_AUTH_TOKEN value" id="da5a8529-64aa-4797-abdb-ad26655af93c">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def genUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	genUtils = new generalUtils.generalUtils(log);

	dcode = genUtils.randomNumericString(15);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="f57dbaec-f6cd-40b5-9afd-3db0b71cf07d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968812502</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4196DB924855E05305991E0AC577</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4066A889484FE05305991E0ACBAC</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="455121879099822"</con:value>
        </con:property>
        <con:property>
          <con:name>skipAuthTokenStatusCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87238</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value>tagMissingDeviceToken</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C4196DB914855E05305991E0AC577</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C4066A888484FE05305991E0ACBAC</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C4196DB914855E05305991E0AC577</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C4066A888484FE05305991E0ACBAC</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>da31b9db-d2b1-451e-95a0-552ebc25c9a2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>da5a8529-64aa-4797-abdb-ad26655af93c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03134 - STS - DeviceAuthToken JoinCode - FORBIDDEN - DeviceAuthCode has DEVICE_AUTH_TOKEN.STATUS of 'deleted'" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d90be6bf-85aa-4c68-b6b8-d6105fd48a9e">
      <con:settings/>
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="ce3c1562-2ddd-46c5-b094-b683c2317a49">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("stsAction","nullDeviceToken");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="3de3e265-984c-4bbd-b2d2-04c313b13a10"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="b07ffa2b-ad76-4a89-999c-4ff4923a3b0a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="97c3db67-1821-49b9-b474-61b01b2b66e0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="847b888d-d06f-4a6c-8e9c-fa6ab6eff55f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="a7e8a1fa-9a17-45dd-ac81-8551e6b40eed">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="983a1ddb-1718-4224-bbe1-829d660be936"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="b530b24c-fa34-46e4-aa72-fb94ab4304ec"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="b046bc4c-c6a6-4b22-ba61-507476d2cdb8">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="8a02919f-5674-4732-9b6e-6da5d236c722">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="e27422d0-786a-4a71-9d0f-b1b2b67a38e3">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Set DEVICE_AUTH_TOKEN.STATUS to 'deleted'" id="629f7b4a-3eab-4074-ac7c-179cc612430a">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
	assert dbUtils.deviceAuthSetStatus(tC.getPropertyValue("rauthToken"),"deleted") == 1;
}
catch (Throwable e) {
	log.info "Error in dbUtils.deviceAuthSetStatus - $e";
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="b293b419-5ab5-4055-9866-95beed59163d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968817191</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA2F2E26F01BEE05305991E0A240D</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C47D4A8514863E05305991E0ADB69</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>FE5F42A94DFB552AE0401F0A05990A04</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>FE5F42A94DFB552AE0401F0A05990A04</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>FE5F3AF8A4072A51E0401F0A05990A06</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>FE5F3AF8A4072A51E0401F0A05990A06</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>FE5F429365218BCFE0401F0A05990A0C</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>FE5F429365218BCFE0401F0A05990A0C</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="560424074704282"</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value>nullDeviceToken</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025CA2F2E26E01BEE05305991E0A240D</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C47D4A8504863E05305991E0ADB69</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025CA2F2E26E01BEE05305991E0A240D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C47D4A8504863E05305991E0ADB69</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>4595ab68-6fdd-41a6-b54f-f453a395bd75</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>629f7b4a-3eab-4074-ac7c-179cc612430a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b046bc4c-c6a6-4b22-ba61-507476d2cdb8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03135 - STS - DeviceAuthToken JoinCode - FORBIDDEN - DeviceAuthCode has expired by 1 year" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="0981e490-7f67-49e8-844a-8fb41c3b6bb6">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="c7952d81-44d0-4a7f-803b-7971f1c98528">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("stsAction","nullDeviceToken");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="a2540a01-74d2-446d-a1ed-819742de031e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="e37bda87-41dc-4142-85fa-73a856bdc445"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="5a5df34b-db90-4c0b-b7cb-e7e54d6a9702"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="757ac9fc-1135-4452-8e6b-2869a66b5392">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="ad2ceaad-8482-4f83-b0c6-2074061a471e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="1165fd0b-c8d3-41f7-b3b8-8bd6bcaf5a4e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="90d0800c-08f8-40ce-94bb-e99fe0907469"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="66e37419-0b57-4e22-bb04-74ba82e86102">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="e16ac2b3-35ef-49ea-b286-da3650f120f0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="0760aeb2-4a55-4c6b-9442-066e653d232b">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update DeviceCode's DEVICE_AUTH_TOKEN.EXPIRATION_DATE" id="d33594ce-2175-479b-b690-7de741240347">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
	assert dbUtils.deviceAuthSetExpire(tC.getPropertyValue("rauthToken"),-525600) == 1;
}
catch (Throwable e) {
	log.info "Error in dbUtils.deviceAuthSetStatus - $e";
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="9b6df8fd-efeb-4032-9aff-537dace0b1fb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C520BD5731571E05307991E0A1011</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="532539818123735"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F9239F15091AB3D9E0401F0A07995930</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F9239F15091AB3D9E0401F0A07995930</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F9239F77C3298680E0401F0A079950CF</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F9239F77C3298680E0401F0A079950CF</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F8F12CE078DA20F8E0401F0A07991D39</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F8F12CE078DA20F8E0401F0A07991D39</con:value>
        </con:property>
        <con:property>
          <con:name>skipAuthTokenStatusCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968821349</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C441D94214839E05305991E0A2CE2</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87240</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value>nullDeviceToken</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C520BD5721571E05307991E0A1011</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C441D94204839E05305991E0A2CE2</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C520BD5721571E05307991E0A1011</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C441D94204839E05305991E0A2CE2</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>f5e3c8d0-1de2-4313-98cc-6d8cdd2b8c71</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d33594ce-2175-479b-b690-7de741240347</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>66e37419-0b57-4e22-bb04-74ba82e86102</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03136 - STS - DeviceAuthToken JoinCode - FORBIDDEN - DeviceAuthCode has expired by 1 month" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a2f9dca8-3a2a-42e0-b68e-829c394ac18e">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="12fa1e69-7569-4355-b140-5ff4a8ba88ec">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("stsAction","nullDeviceToken");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Call Account Create" id="e0a9e751-bdd3-42b9-aa70-90f716d04e60"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="2f79c17e-9e37-4ff6-8112-150ca517a7d8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="dc490355-bc27-4461-a6fd-d6d54439f973"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="4e4081c5-e5dc-4f39-929a-a1c8f062f56b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="724d3d9b-0bc2-4523-8043-e17a2b528f8a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="e6eb0179-7a27-4c09-9f34-3bbc2b059d95"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="367c9b18-a796-4c87-a59d-d543a6c4b342"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="a9500040-963f-43f0-92eb-e71b9fc0e797">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="70c513c1-cf2a-442d-b38c-2e052fb0dd2c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="7d86aea7-0942-4585-83c1-84584bcb7d1f">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update DeviceCode's DEVICE_AUTH_TOKEN.EXPIRATION_DATE" id="bdcdc9d4-5d16-43ab-ac11-98e796528b57">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
	assert dbUtils.deviceAuthSetExpire(tC.getPropertyValue("rauthToken"),-43200) == 1;
}
catch (Throwable e) {
	log.info "Error in dbUtils.deviceAuthSetStatus - $e";
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="736b2702-3597-41ea-8bba-6b81baa41446">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C441DF0AE4841E05305991E0A88AA</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="532539818123735"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F8F12CD6FF066A81E0401F0A05995498</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F8F12CD6FF066A81E0401F0A05995498</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F9239EC119B81803E0401F0A079950C9</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F9239EC119B81803E0401F0A079950C9</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F9239EC6877BA60FE0401F0A079950CB</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F9239EC6877BA60FE0401F0A079950CB</con:value>
        </con:property>
        <con:property>
          <con:name>skipAuthTokenStatusCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968825581</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA6CC675E01ACE05305991E0AE913</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87241</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value>nullDeviceToken</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C441DF0AD4841E05305991E0A88AA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025CA6CC675D01ACE05305991E0AE913</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C441DF0AD4841E05305991E0A88AA</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025CA6CC675D01ACE05305991E0AE913</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>7da4d5d0-7ce2-48f5-ae08-9c2bca15f0d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bdcdc9d4-5d16-43ab-ac11-98e796528b57</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a9500040-963f-43f0-92eb-e71b9fc0e797</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03137 - STS - DeviceAuthToken JoinCode - FORBIDDEN - DeviceAuthCode has expired by 1 week" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="83a97bda-e5da-4c09-8297-68e5bda8018f">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="625fc5ee-616b-47f3-897d-cee8f6083542">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("stsAction","nullDeviceToken");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Call Account Create" id="5649aacd-5c17-48a2-ac52-20ac17fe09af"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="43fdef81-c6ba-4f29-be30-bf4382dd92a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="f87e4849-fa92-4440-be24-f20eca2b753a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="f322af3f-b565-4b12-95f9-0911263dc926">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="4f0b1084-fe7e-4bb2-8c7e-547b34a9b153">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="20734d50-a183-44a1-874d-1d63646a5020"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="226e0d54-b3ce-4b6c-b10a-ce877f2bed9a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="358ff1d4-95ce-4f7a-b93e-7e1d902b0266">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="aaff96ca-3d2d-45c9-ad53-597ac61018c2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="a8bb3f18-ef0a-4409-8810-56717a0c3091">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update DeviceCode's DEVICE_AUTH_TOKEN.EXPIRATION_DATE" id="fc88f5ad-6a1f-46b3-92b8-dd1261ce7132">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
	assert dbUtils.deviceAuthSetExpire(tC.getPropertyValue("rauthToken"),-10080) == 1;
}
catch (Throwable e) {
	log.info "Error in dbUtils.deviceAuthSetStatus - $e";
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="820c1f7e-54b0-4095-b00d-e21c8bbf4b54">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C436AEF5A0A33E05307991E0AF56C</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="532539818123735"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F9239F178E99261AE0401F0A07995777</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F9239F178E99261AE0401F0A07995777</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F8F12CE3EF729252E0401F0A07991D28</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F8F12CE3EF729252E0401F0A07991D28</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F9239EC119C71803E0401F0A079950C9</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F9239EC119C71803E0401F0A079950C9</con:value>
        </con:property>
        <con:property>
          <con:name>skipAuthTokenStatusCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968829788</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C446393604869E05305991E0A7372</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87242</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value>nullDeviceToken</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C436AEF590A33E05307991E0AF56C</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C4463935F4869E05305991E0A7372</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C436AEF590A33E05307991E0AF56C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C4463935F4869E05305991E0A7372</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>31e3fc8b-e9df-46df-a8c5-979834a46b72</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fc88f5ad-6a1f-46b3-92b8-dd1261ce7132</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>358ff1d4-95ce-4f7a-b93e-7e1d902b0266</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03138 - STS - DeviceAuthToken JoinCode - FORBIDDEN - DeviceAuthCode has expired by 1 day" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d301361e-71d9-48c2-a796-62e5b372c983">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="b583ebd4-8315-4763-a6a7-2be6907b49da">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("stsAction","nullDeviceToken");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="e972b855-e7b7-4695-b2ef-1384e07a9b13"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="6c40ca0d-3e95-4ed4-a567-45b3dd0cdb99"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="f6085f97-d210-4a51-8701-96622079ae63"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="020120f3-dbc0-4cd7-9af6-8a4aeee2de1b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="8a555462-8ae9-4651-8d37-11b7df825cc2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="dad035fa-b1b1-4f18-8d56-00ca299ec2f9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="206a6d0a-7691-42d5-b777-29df50c7645a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="8d8bec59-58f8-422f-9051-c48e8e4422c4">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="30e557d5-080d-4312-906e-089c6c53d342">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="328e2ee8-79dc-4a72-b633-2b0b11a07e3c">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update DeviceCode's DEVICE_AUTH_TOKEN.EXPIRATION_DATE" id="fb91d38d-79c9-4bee-b659-cec20aa7ef49">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
	assert dbUtils.deviceAuthSetExpire(tC.getPropertyValue("rauthToken"),-1440) == 1;
}
catch (Throwable e) {
	log.info "Error in dbUtils.deviceAuthSetStatus - $e";
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="4914238b-2d86-4b1b-bd3e-72896ea3947f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4119C5EF0A21E05307991E0A8F00</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="532539818123735"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F9239EBFEB0AA148E0401F0A05993BD6</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F9239EBFEB0AA148E0401F0A05993BD6</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F9239F3563D941A6E0401F0A05994201</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F9239F3563D941A6E0401F0A05994201</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F8F4D4C2BDED567EE0401F0A05991C4A</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F8F4D4C2BDED567EE0401F0A05991C4A</con:value>
        </con:property>
        <con:property>
          <con:name>skipAuthTokenStatusCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968834157</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C520B4BB71584E05307991E0A9B8E</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87243</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value>nullDeviceToken</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C4119C5EE0A21E05307991E0A8F00</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C520B4BB61584E05307991E0A9B8E</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C4119C5EE0A21E05307991E0A8F00</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C520B4BB61584E05307991E0A9B8E</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>f99a942b-52a2-49c2-85f4-c0aa7b1783a6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fb91d38d-79c9-4bee-b659-cec20aa7ef49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8d8bec59-58f8-422f-9051-c48e8e4422c4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03139 - STS - DeviceAuthToken JoinCode - FORBIDDEN - DeviceAuthCode has expired by 1 hour" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="f78a6829-be97-4502-b622-ac2134f7aeb7">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="c0f0c2c0-8b97-4cee-953c-51fd3b319b3c">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("stsAction","nullDeviceToken");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Call Account Create" id="adbe5c1e-693a-4ea3-a7ad-6b063edbb088"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="cad378c8-c2b0-4443-8e57-5e7fcd836ed3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="b39960d1-30c0-4200-b6c0-b154b0fa26b3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="421d84c0-ba39-4db8-8093-404c63c67696">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="c458f922-de92-455b-94ab-a4d07981e77f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="79118772-49b5-4a85-892c-8bfb01b9b9d8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="2bb23619-afd6-4439-b6ba-ef3117d65150"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="f34c076e-1fd4-4620-bf84-8aecbb6740d0">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="c6ef1395-4d28-4c73-9391-b60d47c140ce">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="6b556a01-3726-47fb-b723-dc19f4c898c6">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update DeviceCode's DEVICE_AUTH_TOKEN.EXPIRATION_DATE" id="eabbddca-d75e-45ca-9481-2ff9bdeaa417">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
	assert dbUtils.deviceAuthSetExpire(tC.getPropertyValue("rauthToken"),-60) == 1;
}
catch (Throwable e) {
	log.info "Error in dbUtils.deviceAuthSetStatus - $e";
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="982de79d-9049-49cb-beb0-4880c321297f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C405F95264859E05305991E0A9CAC</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="532539818123735"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F923A2E6DC5C8153E0401F0A05992FF3</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F923A2E6DC5C8153E0401F0A05992FF3</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F8F12D180987D52DE0401F0A07991D24</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F8F12D180987D52DE0401F0A07991D24</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F923A0C3141377FCE0401F0A05994203</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F923A0C3141377FCE0401F0A05994203</con:value>
        </con:property>
        <con:property>
          <con:name>skipAuthTokenStatusCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968838973</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4030D1154837E05305991E0A9E1A</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87244</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value>nullDeviceToken</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C405F95254859E05305991E0A9CAC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C4030D1144837E05305991E0A9E1A</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C405F95254859E05305991E0A9CAC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C4030D1144837E05305991E0A9E1A</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>5199db81-44dc-4489-bb60-5dcaf86b26f1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eabbddca-d75e-45ca-9481-2ff9bdeaa417</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f34c076e-1fd4-4620-bf84-8aecbb6740d0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03140 - STS - DeviceAuthToken JoinCode - FORBIDDEN - DeviceAuthCode has DEVICE_AUTH_TOKEN.STATUS of deleted" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="798dfc50-00fb-4a61-8749-aa182619d4b6">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="a66fde45-6bcf-413b-87cc-8632cb08f849">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("stsAction","nullDeviceToken");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="c5b1d53a-1653-4308-ad62-11900c7ba38d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="79eed024-9520-481e-9e31-ce916d1cb6a1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="606fd81e-c05f-4d97-9fbb-b78c92b2719b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="c4944cf6-2f38-4a02-9c63-dc29333eae06">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="a87c2965-3d2b-4d26-96ae-2888347ad26e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="0b3130cf-d8e6-4c31-84e4-dc23e42452ff"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="a5855c62-bd58-4ad5-a203-7393dbfd67d6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="d65cbdfd-8744-4dbc-b538-18c160771684">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="7c670919-1e34-4176-ac9a-c7ca445f7a30">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="9979b184-0c01-4523-8d18-fef5eada7920">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update DeviceCode's DEVICE_AUTH_TOKEN.STATUS" id="538a1a11-9ec0-47f7-b739-b553a0dbf24a">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
	assert dbUtils.deviceAuthSetStatus(tC.getPropertyValue("rauthToken"),"deleted") == 1;
}
catch (Throwable e) {
	log.info "Error in dbUtils.deviceAuthSetStatus - $e";
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="3c6925b0-0414-49df-b178-f3dd33fa7f4b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968844152</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA2146E3F01A2E05305991E0A1323</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C50F679CE48E0E05305991E0A134F</con:value>
        </con:property>
        <con:property>
          <con:name>skipAuthTokenStatusCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F8F4D4C2BDF1567EE0401F0A05991C4A</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F8F4D4C2BDF1567EE0401F0A05991C4A</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F9239F15092AB3D9E0401F0A07995930</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F9239F15092AB3D9E0401F0A07995930</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F8F12CE078E420F8E0401F0A07991D39</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F8F12CE078E420F8E0401F0A07991D39</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87246</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value>nullDeviceToken</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025CA2146E3E01A2E05305991E0A1323</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C50F679CD48E0E05305991E0A134F</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025CA2146E3E01A2E05305991E0A1323</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C50F679CD48E0E05305991E0A134F</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>d97bf820-7981-4be5-ab91-c72c1075a64c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>538a1a11-9ec0-47f7-b739-b553a0dbf24a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d65cbdfd-8744-4dbc-b538-18c160771684</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03141 - STS - DeviceAuthToken JoinCode - FORBIDDEN - DeviceAuthCode has expired by 5 minutes" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a226746d-8efe-4271-8eb5-42a387e59b37">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="b507ffe7-446a-46ef-90b4-4a56be4a45b1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("stsAction","nullDeviceToken");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Call Account Create" id="27b7db61-1159-4805-9a8a-3801b7e7a903"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="49340b39-2977-485c-adee-f3f857888181"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="64358159-b095-40db-9d34-16b7790715c0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="57b924aa-0033-4ea7-846e-239eebe12022">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="f1cd9b6a-491a-4aba-90f4-f2cc71889712">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="26d107da-a1f5-47e2-a3e8-6653fdb33620"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="30d7cde7-7b49-4e0b-b552-4bd5a8e69e5b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="7189c988-60bb-4f63-afd1-b9145e344197">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="4d06fe02-36a6-4c92-8813-1c8f2bb0c35e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="f2b0a7df-9244-497f-8d5b-56675268a511">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update DeviceCode's DEVICE_AUTH_TOKEN.EXPIRATION_DATE" id="14162a70-0c32-4330-9427-2ce48ee5636a">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
	assert dbUtils.deviceAuthSetExpire(tC.getPropertyValue("rauthToken"),-5) == 1;
}
catch (Throwable e) {
	log.info "Error in dbUtils.deviceAuthSetStatus - $e";
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="272ab268-7d8e-4587-b91c-68c577ff4d3d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA2F2AA9701B6E05305991E0AFECC</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="532539818123735"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F9239F178EA5261AE0401F0A07995777</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F9239F178EA5261AE0401F0A07995777</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F923A2E628685520E0401F0A05992FF1</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F923A2E628685520E0401F0A05992FF1</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F9239F3563EA41A6E0401F0A05994201</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F9239F3563EA41A6E0401F0A05994201</con:value>
        </con:property>
        <con:property>
          <con:name>skipAuthTokenStatusCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968848390</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4030D1374837E05305991E0A9E1A</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87245</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value>nullDeviceToken</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025CA2F2AA9601B6E05305991E0AFECC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C4030D1364837E05305991E0A9E1A</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025CA2F2AA9601B6E05305991E0AFECC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C4030D1364837E05305991E0A9E1A</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>afeb2e99-a9d0-428a-98a7-a40596e03e47</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14162a70-0c32-4330-9427-2ce48ee5636a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7189c988-60bb-4f63-afd1-b9145e344197</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03142 - STS - DeviceAuthToken JoinCode - Expires element NULL" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="9e0b0aab-a18d-4feb-b6bd-6f02b53f155a">
      <con:settings/>
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="399d2db7-8ed6-4453-a462-add3f2446d46">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("stsAction","nullExpires");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="5aec00b1-f2ab-4d26-a70e-b1570c1c4d84"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="a823b379-e97b-4643-b857-53dfb9487418"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="342d320a-df46-4eb2-8088-8085d885b847"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="a6e3e608-222c-4d2f-a667-0ebbc98279fc">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="fbbd93ec-5b46-4d4a-bd31-a1634c7abcc9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="5ed041b4-c8ee-4b55-9849-3578a012ee4f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="9a7eee42-e599-4978-a6ce-000ee3700c0d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="715ae072-130e-403d-a66b-bcf264202fb6">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="226dd3ec-007b-4510-bcdf-fd2536ad5e88">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="a4d4dabd-85ef-43f0-a032-5ea1f91c6c68">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="738d76a3-1a8a-4295-83fb-b6ac32741814">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="eda2ab1e-fbfa-4f24-95b6-56a65add3194">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="373799c6-2834-4f5d-9500-e5bc8997bdf6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C40657C05483FE05305991E0A32A4</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="675529202472747"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F8F12CD6FF1D6A81E0401F0A05995498</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F8F12CD6FF1D6A81E0401F0A05995498</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F9239EBFEB1BA148E0401F0A05993BD6</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F9239EBFEB1BA148E0401F0A05993BD6</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthString</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeSavedRole</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F9239EA9718C5C21E0401F0A05993BD4</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F9239EA9718C5C21E0401F0A05993BD4</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968852921</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4030D14E4837E05305991E0A9E1A</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>expiresAction</con:name>
          <con:value>nullExpires</con:value>
        </con:property>
        <con:property>
          <con:name>expectTokenLifeTime</con:name>
          <con:value>5260320</con:value>
        </con:property>
        <con:property>
          <con:name>stsAction</con:name>
          <con:value>nullExpires</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87247</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/_7ef82ea3-622c-48aa-b4ea-ca2f63caa139</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C40657C04483FE05305991E0A32A4</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C4030D14D4837E05305991E0A9E1A</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C40657C04483FE05305991E0A32A4</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C4030D14D4837E05305991E0A9E1A</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>31126aea-9c54-466b-8379-9b8e6266bd97</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>75cb7dbd-78ab-4429-a90f-8fd139fbe61d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>715ae072-130e-403d-a66b-bcf264202fb6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03143 - STS - DeviceAuthToken JoinCode - Expires element tag terminated" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="bccd1d88-2cd6-46d0-8871-fe282e2ba435">
      <con:settings/>
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="c9b66bed-eac7-419a-90c7-1234366a6118">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("stsAction","tagTerminatedExpires");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="6b2f6a2c-2928-487b-a53d-e9f011176fab"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="573a179c-8784-4301-8709-4bbeb6b32500"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="1a12725d-58de-4dcc-8b89-8bba6c1f0581"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="f76fe44a-e079-47d4-9af9-c52649386bce">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="7376a43f-f87a-44fa-9e5a-1437b63f5ded">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="18d712ba-fe8a-4e95-b16d-28c659b505e8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="63b04c06-6290-46eb-a497-526d79b663be"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="16a063d2-3b72-4c6c-965a-0b0e8fb11b89">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="2ebbb532-c396-41c9-952b-de1837d2f8a3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="63f824f9-f504-4200-bf53-fa1bef913320">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="341dfa24-bec6-4274-966b-69e6de48bc89">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="b11a5801-1e27-4f7d-9ee4-83f3860298b0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="07f37feb-512e-45a5-8c2f-8f5057c7c8b8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C44FB0F9E485FE05305991E0A4BE1</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="146593136371961"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>FE5F3ADB62E06934E0401F0A05990A08</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>FE5F3ADB62E06934E0401F0A05990A08</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>FE5F3AF191473F3BE0401F0A05990A0E</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>FE5F3AF191473F3BE0401F0A05990A0E</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthString</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeSavedRole</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>FE5F3AF8A4272A51E0401F0A05990A06</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>FE5F3AF8A4272A51E0401F0A05990A06</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968857297</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C446393744869E05305991E0A7372</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>expiresAction</con:name>
          <con:value>tagTerminatedExpires</con:value>
        </con:property>
        <con:property>
          <con:name>expectTokenLifeTime</con:name>
          <con:value>5260320</con:value>
        </con:property>
        <con:property>
          <con:name>stsAction</con:name>
          <con:value>tagTerminatedExpires</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87248</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/_9f5a8c93-1189-44f0-9cd9-34fad0f2630e</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C44FB0F9D485FE05305991E0A4BE1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C446393734869E05305991E0A7372</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C44FB0F9D485FE05305991E0A4BE1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C446393734869E05305991E0A7372</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>880a9b95-8400-4488-8d61-5998c10cbef5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>16a063d2-3b72-4c6c-965a-0b0e8fb11b89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    
    
    
    
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03144 - STS - DeviceAuthToken JoinCode - Expires element missing" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a39548bd-250a-4e60-b995-4e5b0b265867">
      <con:settings/>
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="4257d918-83b0-44b0-8d51-01440a518dd5">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("stsAction","tagMissingExpires");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="443d55b4-baed-4d00-9475-09a2dae0d5e4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="580251fd-0cbf-4aa5-950a-b9681171d201"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="391d73c0-ee81-48d3-aeba-c5907d3369a4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="3db279ea-5f5f-4d5d-b179-8ae547d9bf4b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="baac4f0c-14b5-418f-b11f-2f452fc41011">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="c0dcc7f8-5b4c-4ff8-8130-9625469d46e4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="55df0e9e-e06a-418e-b243-117f89bdc164"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="2953bd91-455d-48a5-82da-6f42e000474a">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="54795f3f-93c6-4f88-8afb-1521eb2278b8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="128751c1-9e62-41c4-a5dd-4d2318973601">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="bed62041-e984-4413-87d0-4a05ff1cacbe">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="56f35703-1212-4f57-a6be-6fb29cb60e40">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="c94a7c59-b475-4ccf-b4fe-cff3865a23b3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>stsAction</con:name>
          <con:value>tagMissingExpires</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968861935</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectTokenLifeTime</con:name>
          <con:value>5260320</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C404443AE0A0DE05307991E0AA0D0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C520B4BCA1584E05307991E0A9B8E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F9239EA9718D5C21E0401F0A05993BD4</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F9239EA9718D5C21E0401F0A05993BD4</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F8F12D1809B2D52DE0401F0A07991D24</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F8F12D1809B2D52DE0401F0A07991D24</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F923A2E6287C5520E0401F0A05992FF1</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F923A2E6287C5520E0401F0A05992FF1</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87249</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/_e58b6d38-f522-4719-8155-9e2e8cd1987b</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C404443AD0A0DE05307991E0AA0D0</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C520B4BC91584E05307991E0A9B8E</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C404443AD0A0DE05307991E0AA0D0</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C520B4BC91584E05307991E0A9B8E</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>332d452c-f2ec-4374-a335-f48989b0eb86</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2953bd91-455d-48a5-82da-6f42e000474a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03145 - STS - DeviceAuthToken JoinCode - Verify Expires element is ignored" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="445a1c1a-4778-4d9a-83a1-9cef91c91603">
      <con:settings/>
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="7b814542-5061-47d0-976c-fe972cd4912c">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("stsAction","tagMissingExpires");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="32733fcc-0896-4dbe-9faa-9c9b94cf41b8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="af98af6b-b59f-4128-b29a-c565a19ea6d5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="4c98224f-0133-4a69-970d-7296f6ddba71"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="ad699ca1-54db-4a0a-8a2b-c7cf3af57e3d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="de0f71af-abb3-4aa9-a9b1-92a189f5de1b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="79d557f7-6f7a-4fe3-befa-aff7d960572b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="5f417786-e742-4533-bf3f-c92a6f1ec212"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="4834925b-0564-4031-9161-28abfca980b7">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="b1201e81-055d-4476-b639-042317a59d8d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="e763545c-0cae-4cb2-ae65-a54eb70258fc">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="1d94305c-4075-4cd8-9bde-28cf56281fa0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="cd6467b4-7c0c-4ee9-8bcb-c4e896bce81e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="6c894496-c141-4b35-abd9-4e038af59388">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968865761</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectTokenLifeTime</con:name>
          <con:value>5260320</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4119C6040A21E05307991E0A8F00</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA2F2E27E01BEE05305991E0A240D</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F8F12CDFB3B752A3E0401F0A07991D20</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F8F12CDFB3B752A3E0401F0A07991D20</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F9239F0C87666819E0401F0A059941FF</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F9239F0C87666819E0401F0A059941FF</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F9239EBFEB2FA148E0401F0A05993BD6</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F9239EBFEB2FA148E0401F0A05993BD6</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="509398336629733"</con:value>
        </con:property>
        <con:property>
          <con:name>stsAction</con:name>
          <con:value>tagMissingExpires</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87250</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/_4b800cb7-f8f0-4038-9511-140b7904a4f4</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C4119C6030A21E05307991E0A8F00</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025CA2F2E27D01BEE05305991E0A240D</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C4119C6030A21E05307991E0A8F00</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025CA2F2E27D01BEE05305991E0A240D</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>850638cb-10fd-4b66-8174-50eee1f0fcfa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4834925b-0564-4031-9161-28abfca980b7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03146 - STS - DeviceAuthToken DeviceString - FORBIDDEN - DeviceAuthCode has expired by 1 year" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="189581cb-db56-4f54-bec8-2db8cf0b826a">
      <con:settings/>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="4b393bde-57c3-454e-b547-eca17a1ae6cb">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("stsAction","nullDeviceToken");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="7c1b9414-faf7-4394-abe0-e3ccbfb0fe9c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="314385e3-6f1c-4e33-b293-fa89932d1656"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="a80f0939-19cf-4433-815c-3cc078b23cfe"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="fdcac6c8-493d-465e-a345-c195696110fd">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="4d012c92-9c40-4a53-803e-5e94043a9147">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="53058d1d-8e36-49f3-8bb3-58fc66ab6d40"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="a952dde8-e467-44b2-a3d5-482ac35dc067"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="6f922b45-2b60-4aa5-ba1b-4057bded2ecd">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="da54bbfa-69d1-49d4-ac37-a14929b6f575">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="b1f07e0d-f7c9-4264-9760-0b1774bbfce5">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update DeviceCode's DEVICE_AUTH_TOKEN.EXPIRATION_DATE" id="3dd30287-d4a6-4171-b048-8497c179599e">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
	assert dbUtils.deviceAuthSetExpire(tC.getPropertyValue("rauthToken"),-525600) == 1;
}
catch (Throwable e) {
	log.info "Error in dbUtils.deviceAuthSetStatus - $e";
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="5690a9e0-d1b3-4981-9897-9506f7411bd2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C446393874869E05305991E0A7372</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="C56A1CDA56344FC"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F923A2E92E295347E0401F0A05992FF7</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F923A2E92E295347E0401F0A05992FF7</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F9239EEAD0682F25E0401F0A079957F1</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F9239EEAD0682F25E0401F0A079957F1</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F8F4D458C8C5A60DE0401F0A07993D02</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F8F4D458C8C5A60DE0401F0A07993D02</con:value>
        </con:property>
        <con:property>
          <con:name>skipAuthTokenStatusCheck</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968869591</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C465381A10A05E05307991E0AD523</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value>C56A1CDA56344FC</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_1</con:name>
          <con:value>C56A1CDA56344FC</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87257</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value>nullDeviceToken</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C446393864869E05305991E0A7372</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C465381A00A05E05307991E0AD523</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C446393864869E05305991E0A7372</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C465381A00A05E05307991E0AD523</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>74e7c7ad-dbee-4140-87b7-2046f3e6164e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6f922b45-2b60-4aa5-ba1b-4057bded2ecd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03147 - STS - DeviceAuthToken DeviceString - FORBIDDEN - DeviceAuthCode has expired by 1 month" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6f6205ae-0070-4e2f-beab-b7b776d788c0">
      <con:settings/>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="75757235-83b1-4c35-8c2b-bdb516250f20">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("stsAction","nullDeviceToken");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="e82ffde4-ad8a-4796-a960-4f960386ce2e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="fc75aa8b-2baa-4eea-a25a-04a9f0f2044f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="c02ff700-fb79-4bb4-871d-71948d87a67a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="d5815d7f-d05b-431e-bf54-8b78a4aed695">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="a80f8675-b874-4caf-b08b-b9d83f7e0906">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="732d0c90-2ae6-4c9e-b3ed-e8297c211b36"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="2250681a-9e1f-41e6-8384-4da975135f2c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="22bf1cdd-4ca9-43d4-8e24-5fb1583a3cd1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="77f3ea8b-fc2e-497a-a30d-c4ad1222dac4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="fd0fb78e-c00a-4f1c-b503-662762f8559e">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update DeviceCode's DEVICE_AUTH_TOKEN.EXPIRATION_DATE" id="a2e37a7c-29bd-4664-9623-e698ac26cecb">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
	assert dbUtils.deviceAuthSetExpire(tC.getPropertyValue("rauthToken"),-43200) == 1;
}
catch (Throwable e) {
	log.info "Error in dbUtils.deviceAuthSetStatus - $e";
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="ea81bed1-132e-4006-be8b-5abf7346d85d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C423299FC0A1FE05307991E0ADD18</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="25A2B43BC68FF6E"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F8F12CE21F28AD0BE0401F0A05995492</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F8F12CE21F28AD0BE0401F0A05995492</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F8F4D458C8CAA60DE0401F0A07993D02</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F8F4D458C8CAA60DE0401F0A07993D02</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F9239F178EBA261AE0401F0A07995777</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F9239F178EBA261AE0401F0A07995777</con:value>
        </con:property>
        <con:property>
          <con:name>skipAuthTokenStatusCheck</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968874131</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C42C58E500A09E05307991E0A3B97</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value>25A2B43BC68FF6E</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_1</con:name>
          <con:value>25A2B43BC68FF6E</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87258</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value>nullDeviceToken</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C423299FB0A1FE05307991E0ADD18</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C42C58E4F0A09E05307991E0A3B97</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C423299FB0A1FE05307991E0ADD18</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C42C58E4F0A09E05307991E0A3B97</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>7eab5816-473b-4545-8559-cc33c681a7a4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>22bf1cdd-4ca9-43d4-8e24-5fb1583a3cd1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03148 - STS - DeviceAuthToken DeviceString - FORBIDDEN - DeviceAuthCode has expired by 1 week" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b28f87d4-0326-4de3-b942-ce6388ca7391">
      <con:settings/>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="e530e919-1e16-498c-b9b6-9992166ab34e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("stsAction","nullDeviceToken");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="202d8ccc-ce54-4f08-b635-b14a67136405"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="eb412532-f1d4-4ed1-8657-de151d204050"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="f21f4556-cce6-4c7c-a9e2-464c61d47cd4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="b57385ff-f1d6-421e-a6eb-f48f67c2c6b8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="a602fbb7-c17b-4f11-b3d7-3edcea9f2490">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="6bf8c641-55ba-4bed-9626-c5366f5047d9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="58e4c273-398b-406c-9ee7-339b0f891c41"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="4d6333f4-c79c-4810-bfa8-25219c100e4d">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="60199c8a-5fff-4c1e-bdbf-03c2eec3c253">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="353f98db-bf3d-4fd2-9d65-defea9b1c033">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update DeviceCode's DEVICE_AUTH_TOKEN.EXPIRATION_DATE" id="c9863340-25f3-41c5-91d4-9e078dadf2ba">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
	assert dbUtils.deviceAuthSetExpire(tC.getPropertyValue("rauthToken"),-10080) == 1;
}
catch (Throwable e) {
	log.info "Error in dbUtils.deviceAuthSetStatus - $e";
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="1e8de19e-00f1-4485-886c-4aed0849790d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA6CC5F8401A8E05305991E0A94D7</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="25A2B43BC68FF6E"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F923A024E526DE58E0401F0A05994205</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F923A024E526DE58E0401F0A05994205</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F9239F755C1B61A1E0401F0A079950CD</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F9239F755C1B61A1E0401F0A079950CD</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F8F4D466D75BF2E1E0401F0A05991C52</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F8F4D466D75BF2E1E0401F0A05991C52</con:value>
        </con:property>
        <con:property>
          <con:name>skipAuthTokenStatusCheck</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968877975</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C40630C564829E05305991E0AA0FF</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value>25A2B43BC68FF6E</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_1</con:name>
          <con:value>25A2B43BC68FF6E</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87259</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value>nullDeviceToken</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025CA6CC5F8301A8E05305991E0A94D7</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C40630C554829E05305991E0AA0FF</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025CA6CC5F8301A8E05305991E0A94D7</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C40630C554829E05305991E0AA0FF</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>43896661-24f0-423d-aec7-01d2d268714e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4d6333f4-c79c-4810-bfa8-25219c100e4d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03149 - STS - DeviceAuthToken DeviceString - FORBIDDEN - DeviceAuthCode has expired by 1 day" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2c4b9765-8f5b-4215-9fee-02135d93efe9">
      <con:settings/>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="e59779f8-89cb-4353-831e-53c864290f37">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("stsAction","nullDeviceToken");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="9d97f3bb-07e1-47c0-aace-9b056716516c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="68d17869-a668-4310-9cd6-a0db9bc04dab"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="05f22429-d3b8-40ea-bdd5-a8a7aad9dd18"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="41bb4b53-fce7-4d1f-ad0d-8b36e8a7168b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="123d5cd5-ecc5-42b9-9315-8b06466d3bd9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="44e0c8aa-b69f-4f57-8ba7-e9027a30acb4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="1bfa5e14-f8e2-48ca-ae03-9146c23944e0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="6e1efc24-3adf-49b6-b85a-6366062cd5e7">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="206c09c8-9b1e-433e-927f-e2c9efaf2687">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="676d619f-da15-46a5-92a9-8839fd871bbc">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update DeviceCode's DEVICE_AUTH_TOKEN.EXPIRATION_DATE" id="ebd4c4d1-31d4-450a-8336-2e8aa5767755">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
	assert dbUtils.deviceAuthSetExpire(tC.getPropertyValue("rauthToken"),-1440) == 1;
}
catch (Throwable e) {
	log.info "Error in dbUtils.deviceAuthSetStatus - $e";
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="35e8ea4b-91fd-40e2-974a-48bc8ad6bb3d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4062D34F4867E05305991E0AE622</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="25A2B43BC68FF6E"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F8F12D1809D1D52DE0401F0A07991D24</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F8F12D1809D1D52DE0401F0A07991D24</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F9239EC6878EA60FE0401F0A079950CB</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F9239EC6878EA60FE0401F0A079950CB</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F9239EA971985C21E0401F0A05993BD4</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F9239EA971985C21E0401F0A05993BD4</con:value>
        </con:property>
        <con:property>
          <con:name>skipAuthTokenStatusCheck</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968881895</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C405F95424859E05305991E0A9CAC</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value>25A2B43BC68FF6E</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_1</con:name>
          <con:value>25A2B43BC68FF6E</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87260</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value>nullDeviceToken</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C4062D34E4867E05305991E0AE622</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C405F95414859E05305991E0A9CAC</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C4062D34E4867E05305991E0AE622</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C405F95414859E05305991E0A9CAC</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>495de285-cbaf-437e-a2a3-5b3d5fee0861</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6e1efc24-3adf-49b6-b85a-6366062cd5e7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03150 - STS - DeviceAuthToken DeviceString - FORBIDDEN - DeviceAuthCode has expired by 1 hour" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="8ce41a47-b729-4498-964b-d24d5f92ce66">
      <con:settings/>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="75fb39db-7fad-4422-bf1d-0e2cec710d24">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("stsAction","nullDeviceToken");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="e17dfe27-35c6-4d31-83ba-461bc0e5d7ee"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="ede8e7ca-655c-4a93-9744-7033becac153"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="963cca7b-1b8f-4842-89f2-c30d649320fa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="43812fa4-fd21-4564-9bb6-741ae89f0461">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="c934ef4d-c53c-4824-892c-b10b719c41c7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="3c7a2393-6902-4fc2-a1cc-a2a3b7b05f93"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="102779d9-92fa-411f-8dce-2ed7fc7c82ca"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="654e5456-0d9c-4e6a-ab93-6cfae6815924">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="6b91bc1b-58af-481b-9b69-0f4e67e43b4b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="7011cfb2-0c8a-4e19-8398-d9acca34a3bd">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update DeviceCode's DEVICE_AUTH_TOKEN.EXPIRATION_DATE" id="94c57ec0-edea-4e22-9faa-5a021aba5c56">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
	assert dbUtils.deviceAuthSetExpire(tC.getPropertyValue("rauthToken"),-60) == 1;
}
catch (Throwable e) {
	log.info "Error in dbUtils.deviceAuthSetStatus - $e";
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="2c46f7bb-f9cc-4b2a-91b3-4fa8bc5b7e22">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C44FAB144485BE05305991E0AE88C</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="25A2B43BC68FF6E"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F9239EEAD07E2F25E0401F0A079957F1</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F9239EEAD07E2F25E0401F0A079957F1</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F8F12CE0790420F8E0401F0A07991D39</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F8F12CE0790420F8E0401F0A07991D39</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F923A2E6DC768153E0401F0A05992FF3</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F923A2E6DC768153E0401F0A05992FF3</con:value>
        </con:property>
        <con:property>
          <con:name>skipAuthTokenStatusCheck</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968885702</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C47BD05BC484DE05305991E0A45D9</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value>25A2B43BC68FF6E</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_1</con:name>
          <con:value>25A2B43BC68FF6E</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87261</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value>nullDeviceToken</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C44FAB143485BE05305991E0AE88C</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C47BD05BB484DE05305991E0A45D9</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C44FAB143485BE05305991E0AE88C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C47BD05BB484DE05305991E0A45D9</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>7866c1b2-e460-4bb2-b006-1ec37618714e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>654e5456-0d9c-4e6a-ab93-6cfae6815924</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03151 - STS - DeviceAuthToken DeviceString - FORBIDDEN - DeviceAuthCode has expired by 5 minutes" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2d93a941-9e10-4444-afce-de59acaf7011">
      <con:settings/>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="3ab84df8-a00f-407b-93d3-ce7773a6ab72">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("stsAction","nullDeviceToken");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="06162fa5-94a4-4a2f-b144-b2eb8e2e7eea"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="27a80919-764e-4ff3-ade4-008244c02406"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="e3f9ca5c-ac4d-4387-8f69-221acdebc19e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="640f6051-a7ac-48d8-b4fe-aafe6c4ccf2b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="7ca7114d-7277-4d28-b4ad-10fca6b13bdf">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="bf6a3da2-3e96-4d6c-8256-9b2fce5a66b4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="84b2df78-e53c-430a-a587-80fdf2791dab"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="61e28192-ffd6-4a04-905e-60f9d03961a3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="e66c8a04-46ab-4f05-abe8-e071b05be60e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="9a6b26cf-6688-40fe-bb00-ab8738d14d56">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update DeviceCode's DEVICE_AUTH_TOKEN.EXPIRATION_DATE" id="7ca0d985-31c4-4350-9caa-554a63ed3855">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
	assert dbUtils.deviceAuthSetExpire(tC.getPropertyValue("rauthToken"),-5) == 1;
}
catch (Throwable e) {
	log.info "Error in dbUtils.deviceAuthSetStatus - $e";
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="f45850e5-55dd-4b38-90bf-2334ead3fe84">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C47D4A8654863E05305991E0ADB69</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="3B1B5ABC27EA5D2"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F9239EC687A1A60FE0401F0A079950CB</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F9239EC687A1A60FE0401F0A079950CB</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F9239F150954B3D9E0401F0A07995930</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F9239F150954B3D9E0401F0A07995930</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F8F12CD6FF346A81E0401F0A05995498</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F8F12CD6FF346A81E0401F0A05995498</con:value>
        </con:property>
        <con:property>
          <con:name>skipAuthTokenStatusCheck</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968889753</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C51E513661574E05307991E0A178D</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value>3B1B5ABC27EA5D2</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_1</con:name>
          <con:value>3B1B5ABC27EA5D2</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87262</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value>nullDeviceToken</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C47D4A8644863E05305991E0ADB69</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C51E513651574E05307991E0A178D</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C47D4A8644863E05305991E0ADB69</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C51E513651574E05307991E0A178D</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>c9b3ba6e-f4e8-4fe5-8272-8ca44c5c4196</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>61e28192-ffd6-4a04-905e-60f9d03961a3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03152 - STS - DeviceAuthToken DeviceString - Verification single alpha character DeviceString is consumable" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="3eca7fc9-e176-4c41-b973-4e08c01d4bb8">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="fd1bb0f4-e176-424d-b0e4-9dc1cc2529d8">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","3");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="86533ad6-2b07-4017-abde-a7838f56860d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="7c18faae-0897-419a-9647-25276d972240"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="28e50cf6-c37c-4e58-bef9-53bed5795111"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="21c82aeb-1f47-4e6d-ab9f-03508b0c272a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="12d93ebc-439f-4b4b-9164-61b9628d3f54">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="14166dfa-4deb-4697-b010-86926190af73"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="7ed98f72-56c5-4fa0-b720-bdb5348fc71d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Generate a DeviceString" id="426b993e-ab77-4d51-97a4-ef62dd427145">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def genUtils;
def ds;

tC.setPropertyValue("deviceDeviceString",null);

try {
	genUtils = new generalUtils.generalUtils(log);
	ds = genUtils.randomAlphaString(1);
}
catch (Throwable e) {
	log.info "Error during genUtils.randomAlphaString - $e";
}
finally {
	tC.setPropertyValue("deviceDeviceString", ds);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="4d81d6e4-5680-41f4-8101-6997ad4c865b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="4636f094-661e-4cca-8278-db36cfc7dcd4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="5c05e349-5ab5-46cf-8993-ce9ffe8bbb2b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
	log.info "dcode: "+dcode;
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() >= 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="712f2b3f-ee12-40e0-a2ef-9f0393f5ae72">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="8037e7e1-492e-4095-bb47-310f23ebfa28">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="3b27ffbc-4848-41ed-829a-139e9954e90d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Loop again if required" id="356d64d6-62d9-4d66-b169-1bc66645ee79" disabled="true">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
def counter = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("Generate a DeviceString");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C44F3B1CB4873E05305991E0AACB0</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="Q"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F923A2E6DC7D8153E0401F0A05992FF3</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F923A2E6DC7D8153E0401F0A05992FF3</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F8F12CE21F3CAD0BE0401F0A05995492</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F8F12CE21F3CAD0BE0401F0A05995492</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthString</con:name>
          <con:value>841321476135740</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeSavedRole</con:name>
          <con:value>urn:dece:role:device</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F9239F0C87796819E0401F0A059941FF</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F9239F0C87796819E0401F0A059941FF</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968893778</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C5268D7DB156FE05307991E0A9A32</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">6</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value>c</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_1</con:name>
          <con:value>c</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_2</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_2</con:name>
          <con:value>D46A9E1B78139627E0401F0A07992D71</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_2</con:name>
          <con:value>90009000</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_2</con:name>
          <con:value>C737856446825AE6E0401F0A079964C8</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_2</con:name>
          <con:value>C7378546D25278EFE0401F0A059912AB</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_2</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_2</con:name>
          <con:value>f</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_3</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_3</con:name>
          <con:value>D46A9B85D9F6AA16E0401F0A07992D73</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_3</con:name>
          <con:value>90009000</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_3</con:name>
          <con:value>C737856446825AE6E0401F0A079964C8</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_3</con:name>
          <con:value>C7378546D25278EFE0401F0A059912AB</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_3</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_3</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_4</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_4</con:name>
          <con:value>A42F291DD988EC0FE0401F0A07992146</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_4</con:name>
          <con:value>50001111</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_4</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_4</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_4</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_4</con:name>
          <con:value>D</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_5</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_5</con:name>
          <con:value>A42F286103836556E0401F0A07992144</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_5</con:name>
          <con:value>50001111</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_5</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_5</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_5</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_5</con:name>
          <con:value>M</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_6</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_6</con:name>
          <con:value>A42F291DD98CEC0FE0401F0A07992146</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_6</con:name>
          <con:value>50001111</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_6</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_6</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_6</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_6</con:name>
          <con:value>t</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_7</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_7</con:name>
          <con:value>A42F286103876556E0401F0A07992144</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_7</con:name>
          <con:value>50001111</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_7</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_7</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_7</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_7</con:name>
          <con:value>M</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_8</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_8</con:name>
          <con:value>A42F291DD990EC0FE0401F0A07992146</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_8</con:name>
          <con:value>50001111</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_8</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_8</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_8</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_8</con:name>
          <con:value>v</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_9</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_9</con:name>
          <con:value>A42F2861038B6556E0401F0A07992144</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_9</con:name>
          <con:value>50001111</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_9</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_9</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_9</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_9</con:name>
          <con:value>G</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_10</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_10</con:name>
          <con:value>A42F291DD994EC0FE0401F0A07992146</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_10</con:name>
          <con:value>50001111</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_10</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_10</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_10</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_10</con:name>
          <con:value>Q</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87263</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_d423a229-71f0-449e-9b78-e1a9c34814c6</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C44F3B1CA4873E05305991E0AACB0</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C5268D7DA156FE05307991E0A9A32</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C44F3B1CA4873E05305991E0AACB0</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C5268D7DA156FE05307991E0A9A32</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>99cae530-2bc3-482b-a37e-7b655f5046c4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>426b993e-ab77-4d51-97a4-ef62dd427145</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>356d64d6-62d9-4d66-b169-1bc66645ee79</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8037e7e1-492e-4095-bb47-310f23ebfa28</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3b27ffbc-4848-41ed-829a-139e9954e90d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4636f094-661e-4cca-8278-db36cfc7dcd4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4d81d6e4-5680-41f4-8101-6997ad4c865b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03153 - STS - DeviceAuthToken DeviceString - Verification single numeric character DeviceString is consumable" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6a4da55c-1cac-4cab-9034-fddd6e09c41a">
      <con:settings/>
      
      
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="58602914-b46a-4bf6-8fa3-68dda5a7fa25">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","3");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="eb57f48a-5b7d-477c-9472-e54867a1218d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="e3b8bd65-3552-4a11-b74f-71669f626b15"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="22b98df8-f2ca-4295-b400-e246f1236d92"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="4586fc71-b103-4b8b-8f17-8c6bae8c8a72">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="8b583bab-e3bb-4bc2-8eab-89d622329820">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="ed945c41-84bd-43fb-9f69-bb79b0eece23"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="6483f7d4-6c85-437f-ad6c-8217aff499b5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Generate a DeviceString" id="8b503856-db04-4753-a307-581e07c1b5bb">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def genUtils;
def ds;

tC.setPropertyValue("deviceDeviceString",tC.getPropertyValue("counter"));</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="4f1c6928-e991-4080-a6ab-167242b64503">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="ac1945fc-7f33-47f4-abd8-37f1e423bfb9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="2b928ea9-5173-4589-9b6a-d800f92a4199">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
	log.info "dcode: "+dcode;
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() >= 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="5c471856-51f9-46de-96b5-602ef3c73a0e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="99755a24-ea10-4003-8e63-5b59db79480b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="77639f5d-e117-4936-a768-dae6be2a371a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Loop again if required" id="7c7d1074-6f31-4fa4-851f-ff0e3dd628ca" disabled="true">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
def counter = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("Generate a DeviceString");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C43E3892F0A1DE05307991E0A6B76</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F8F4D4C2BE08567EE0401F0A05991C4A</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F8F4D4C2BE08567EE0401F0A05991C4A</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_2</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_2</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F8F12CE0792620F8E0401F0A07991D39</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F8F12CE0792620F8E0401F0A07991D39</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_2</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_2</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_2</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/8644ff34-320f-4d38-bd84-7f59b09a7caf</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_2</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F923A024EF662BBCE0401F0A05994207</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F923A024EF662BBCE0401F0A05994207</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_2</con:name>
          <con:value>AEF8AC546748524DE0401F0A07996704</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968897700</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C42C58E6C0A09E05307991E0A3B97</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_3</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_3</con:name>
          <con:value>AEF8AC54674D524DE0401F0A07996704</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_3</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_3</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_3</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_3</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_3</con:name>
          <con:value>3</con:value>
        </con:property>
      <con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C43E3892E0A1DE05307991E0A6B76</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C42C58E6B0A09E05307991E0A3B97</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C43E3892E0A1DE05307991E0A6B76</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C42C58E6B0A09E05307991E0A3B97</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>c8df7ab4-7c99-4ba0-bde0-87c2d046fb79</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b503856-db04-4753-a307-581e07c1b5bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7c7d1074-6f31-4fa4-851f-ff0e3dd628ca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99755a24-ea10-4003-8e63-5b59db79480b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77639f5d-e117-4936-a768-dae6be2a371a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5c471856-51f9-46de-96b5-602ef3c73a0e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ac1945fc-7f33-47f4-abd8-37f1e423bfb9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4f1c6928-e991-4080-a6ab-167242b64503</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03154 - STS - DeviceAuthToken DeviceString - Verification of uuid formatted DeviceString is consumable" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="571e36c0-5506-4c36-a9c9-e5d220575054">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="b95b9353-a0a1-468f-a5d2-0620f9708ca6">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","3");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="a37a0f2a-e8ef-4d12-acf7-282d5b28c0fe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="6db27d67-6f72-49c4-9936-54ebeeffe4e3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="1354b202-5701-4cfd-89e3-b60353b5d2a7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="11a1a035-6980-42e2-b3bd-d0ce67e31a68">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="5a7f13d4-cb98-4462-96bf-cf5c4d954768">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="f581e43a-6869-49d6-9750-24bc2ae34674"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="7fe4f1ce-10dd-4f52-b5ee-1abf848ce397"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Generate a DeviceString" id="8a9ed4d0-cae1-40d7-8b11-5fd6c44f1bbe">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def genUtils;
def ds;

tC.setPropertyValue("deviceDeviceString",null);

try {
	genUtils = new generalUtils.generalUtils(log);
	ds = genUtils.randomUUID();
}
catch (Throwable e) {
	log.info "Error during genUtils.randomUUID - $e";
}
finally {
	tC.setPropertyValue("deviceDeviceString", ds);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="f01032cd-6c62-4050-a3bc-2209f179d621">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="57a822e6-d821-4a5c-b7c7-48275a6dc68f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="a8acfbdd-ec5b-49f9-881d-fc582d8720ed">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="8490fe8f-212b-470b-9dee-e80c0c507620">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="6fda893e-facf-4a1e-b403-cfab1df84e2a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="a0869423-84ee-49fb-a555-ff88213d8207">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Loop again if required" id="7e79731c-1612-4137-925e-95f43efb8a63" disabled="true">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
def counter = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("Generate a DeviceString");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C406352AD482BE05305991E0A1C0D</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="054de8af-bfbf-48d0-9af8-a17601b35374"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F8F12D325887D98EE0401F0A07991D37</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F8F12D325887D98EE0401F0A07991D37</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_10</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_2</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_3</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_4</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_5</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_6</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_7</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_8</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_9</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_10</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_2</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_3</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_4</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_5</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_6</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_7</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_8</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_9</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F9239EEAD08A2F25E0401F0A079957F1</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F9239EEAD08A2F25E0401F0A079957F1</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_10</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_2</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_3</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_4</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_5</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_6</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_7</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_8</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_9</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_10</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_2</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_3</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_4</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_5</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_6</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_7</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_8</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_9</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_10</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_2</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_3</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_4</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_5</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_6</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_7</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_8</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_9</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthString</con:name>
          <con:value>841321476135740</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value>37ee2c36-a5ca-44d3-a50d-587bead8b7cd</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_1</con:name>
          <con:value>37ee2c36-a5ca-44d3-a50d-587bead8b7cd</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_10</con:name>
          <con:value>ac93bb09-44be-4c4b-a6a0-69e1d6faac8a</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_2</con:name>
          <con:value>546a43c2-3fea-4d5c-8b25-73f686f6cf14</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_3</con:name>
          <con:value>d2a2cf5c-0226-48fd-aabf-86e87631251c</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_4</con:name>
          <con:value>5b1b0f3f-70e7-494a-b107-d22e34d75647</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_5</con:name>
          <con:value>ba92c82b-f8ef-4e1f-a7d3-34608e15219d</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_6</con:name>
          <con:value>e26e5086-98f1-4abe-b1a5-6f4636a4be09</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_7</con:name>
          <con:value>847519ab-83fd-4005-8a8a-e89c333d6003</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_8</con:name>
          <con:value>7f96e692-ee4f-4134-93b6-978171e99b03</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_9</con:name>
          <con:value>58939700-3808-4db1-865d-525367bb07e0</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeSavedRole</con:name>
          <con:value>urn:dece:role:device</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F8F12CE3EFA49252E0401F0A07991D28</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F8F12CE3EFA49252E0401F0A07991D28</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_10</con:name>
          <con:value>AEF7DA439846FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_2</con:name>
          <con:value>AEF7DA439813FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_3</con:name>
          <con:value>AEF7DA439818FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_4</con:name>
          <con:value>AEF7DA43981DFF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_5</con:name>
          <con:value>AEF7DA439822FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_6</con:name>
          <con:value>AEF7DA439827FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_7</con:name>
          <con:value>AEF7DA439836FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_8</con:name>
          <con:value>AEF7DA43983CFF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_9</con:name>
          <con:value>AEF7DA439841FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968902127</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA3418EE101A0E05305991E0A5B70</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87265</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/8c7c0246-1565-4feb-ae8d-46a7014f4553</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C406352AC482BE05305991E0A1C0D</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025CA3418EE001A0E05305991E0A5B70</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C406352AC482BE05305991E0A1C0D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025CA3418EE001A0E05305991E0A5B70</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>9ddf788c-3c09-4bc4-a978-1e1a0bb31433</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7e79731c-1612-4137-925e-95f43efb8a63</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8a9ed4d0-cae1-40d7-8b11-5fd6c44f1bbe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57a822e6-d821-4a5c-b7c7-48275a6dc68f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f01032cd-6c62-4050-a3bc-2209f179d621</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03155 - STS - DeviceAuthToken DeviceString - Verification max.string.length alpha character DeviceString is consumable" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="0c8bd78b-e5d9-41cf-88f4-514a10ee80ad">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="db1932fe-79f0-4498-b54c-7f568eeea7cb">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","3");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="255be3f4-2777-4b27-8ea0-50815cb64393"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="92185b49-84c1-4e53-8b24-ef166a6eedba"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="ec0d8b99-6386-49ed-9331-482d1c3d7d7d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="9afacee6-6fc4-42fc-95d0-7570068f2074">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="934d6be1-f4e2-47a4-9459-180b1c1f1c5d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="37e3261c-76aa-4992-8ca1-d5372a6b1085"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="c33ed966-3e03-436b-89b2-f99ea6e15c64"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Generate a DeviceString" id="9f3abdc8-8ff5-4a7e-bed5-489e7386e662">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def genUtils;
def ds;

tC.setPropertyValue("deviceDeviceString",null);

try {
	genUtils = new generalUtils.generalUtils(log);
	ds = genUtils.randomAlphaString(tP.getPropertyValue("max.string.length").toInteger());
}
catch (Throwable e) {
	log.info "Error during genUtils.randomAlphaString - $e";
}
finally {
	tC.setPropertyValue("deviceDeviceString", ds);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="832dade5-3b9a-4d6e-a445-9836c1c718e4">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="6a230ed0-00b5-46f9-8613-861b964ed83b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="7a83a792-0257-44ed-9281-4d4f2e4a0104">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="3eb78ec4-2e48-4fed-9869-a1ef99c69afc">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="8756f747-dd27-4052-94db-8846d5dde0e8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="8c0ead83-d5c8-41fe-b23a-32abab9c7183">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Loop again if required" disabled="true" id="f098cc8c-16ac-4d3f-a10f-aad33eb0119e">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
def counter = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("Generate a DeviceString");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C44FB0FAB485FE05305991E0A4BE1</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="PPWxPkXnoUVtVNauZzeiDOgQaUeYSvUVUJnEraJdJpogKAAnTEHcIwpuHqcEfgdsMNzzwdNpRfLoHDyEwGRRkSXunJZiKuZskECyZFzFfDlLWCGSjlIUtWkklXpFyhCvsTDAGXBqPxWEqOiYTRfQTUSFfQcXIoGixOeBNqpANhSxRmMCZfIYtGdjMeaSVwUBqhdFXGxJfiuoqFvIxSpFjuHgtpRocMeskpFwHsQgIxxOClCioXcDkdaTtCYYVdvl"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F9239F150969B3D9E0401F0A07995930</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F9239F150969B3D9E0401F0A07995930</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F9239EC687B6A60FE0401F0A079950CB</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F9239EC687B6A60FE0401F0A079950CB</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthString</con:name>
          <con:value>841321476135740</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeSavedRole</con:name>
          <con:value>urn:dece:role:device</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F8F12CDCE7DF8AEFE0401F0A05995484</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F8F12CDCE7DF8AEFE0401F0A05995484</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968906277</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C41855545483DE05305991E0A013E</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">6</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">7hoWY1QHLcncZfRuDTzjVBxeciA</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_1</con:name>
          <con:value>7hoWY1QHLcncZfRuDTzjVBxeciA</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_2</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_2</con:name>
          <con:value>AEF7DA439850FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_2</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_2</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_2</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_2</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_2</con:name>
          <con:value>UnucfFTKUvDyEGBNiwliZsIqQVOceoRxDiWSwHkWBUamVxHQigHtgfDrayHHAJsDiBkbkekSBfBUWXfXxQUJqtqnKkmDmvZzlLywGngsCPvILkPqqvbpqKRVWbEMMsoMPwcNNzxthabWYgNtPayKHDthTDwYHKFAhEamBcapqOjDYKEkPRAahRExvNtLjnlIHQRiOhUDEgISjZHrLUCLALPnkPcPrJwtQLfmMwfsKYKEWdMYrbVHcgrXEjYkmblp</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_3</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_3</con:name>
          <con:value>AEF7DA439855FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_3</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_3</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_3</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_3</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_3</con:name>
          <con:value>slgzAKbrMHLrGllqlidoYJthIpgRpFfewPSzDcsSoeDFSOakGBohxdoXnYRPUyMjMkdUFmgnamcQgOuEYGxoOEsJjmLqvOpxtobatsdzRLxOfwRxPhvDIVcUOwoYlfZDFxXtBumRZxvKycSAeilBkaAHudBrEJRSFdjAwYQxazwdJujMoQkBgiZWjXLkSigdmJjjASiVPTjZcOxmjjcImXWGSwhObKovagionNUizpepHoNunQCKQBveRJoPxwlC</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_4</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_4</con:name>
          <con:value>AEF7DA43985AFF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_4</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_4</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_4</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_4</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_4</con:name>
          <con:value>JgsDzStnPTAVWdPKiNCoEmgvwXxGbVJUeYFtPjJaoATjCPBEhUHEHLWIeuUESpJtmdEOlTdvdKlhxHYqSIDfewuDJCrIjmIrGOGHteVIkinXmUomlJxxUfYWwbxDqstydYTlganjsaZiaQEFdNzqyZMCkhMlSbOpUfpZvdluKTjiQAMjqzFBUTXRtdCqPQNrxXmbvMUHkURNIDoLFYtEnrrguurZTSUIETgjLDyMylZSNlIlZgjtSINNofByMCbc</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_5</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_5</con:name>
          <con:value>AEF7DA43985FFF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_5</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_5</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_5</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_5</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_5</con:name>
          <con:value>cbiKWIYzDiDuFhHUjFFfvTdkEkGTVvhoCNvogeAIpGKJGwpdagRyTGkPxwxqFAmrnExepwdJmgjWBeeYyJoCWWakhWOosvVOnmVBQvuALBZsVWKdUVHpPKlKShukoshBaznYYsgrXDfIyechyLhbacEZKrlqHqlocwIhLNCIpkqVAQIBCxHJiqlOCyWrVtiSlffqEKPOpTPZSuccDhpiBLnxILrKaeJAZGXOzNASCIraxKBgLHqDeRcRvazxfHNL</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_6</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_6</con:name>
          <con:value>AEF7DA439864FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_6</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_6</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_6</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_6</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_6</con:name>
          <con:value>PEaLIEhbVSWNVwpckipcRtGaWkoGCLsWAFuxURMViGbeXTlHHDNcIdrTlrSlgbnHLckZAJjTZKksFdlXnyTuVdxVjGYIgBfjeLgmRqlJEaKDCuahKnNzhdrWgrJtrBHipIVaTKMVbjwZeWVoOPJGidunYLxDHWApsQYSCUHwKNSggWzGjOEraoNxRLGHhiHwFDkpOGUnRQNLTdEdrQmlzszcbVRAnPrKWVehROODtONrJCrGooGoROjgmhbulRVw</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_7</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_7</con:name>
          <con:value>AEF7DA439869FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_7</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_7</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_7</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_7</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_7</con:name>
          <con:value>lGeBSdsqjeOLyQsLkkLUtUDrpgxgLGlqmlHNyjyqjISsNpapbRLOePKCjnEiUbWHMpFNGUpnZtqprHFOvznbhgVZAKZNIgNuXChKjkjNEzueKgMflOFqNvZUjtNhVVtsUESjldDIaLDoMukUpGKzOcjtCgrujykLFsnyREODdApaJEfRectOxqmwiDUWSKWoPaOsgzLeJyBLIfOsjrvcDGaBAjVHXunaWpqUUAPNylNUIgkrrBxYSOwJqbZzaskd</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_8</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_8</con:name>
          <con:value>AEF7DA43986EFF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_8</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_8</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_8</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_8</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_8</con:name>
          <con:value>IGRfVcSFtcZoxjLdNKjnOthiZhHRpJyJDDsOvxdepKAMfNTeMWmfDOYNWcOdNCHysjFbGdvcZQmuKwEupdeNlqAHtbuckvWupozcqLGhWOIOOyKwcyIZDsEtHLHAlSHNMWIJJgELQpGpdejGqiBnqfJHpNcStlafISInapWwBVUPAaSxfsvKCErkTwOdgELHuTPMyNnbSsrcVvQDdrAePfVGXDMjZMFNlZcvitTuHLCkKMBlFggOObQBbemiAoef</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_9</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_9</con:name>
          <con:value>AEF7DA439873FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_9</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_9</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_9</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_9</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_9</con:name>
          <con:value>MqwAKfXchooEinGRrjwGskEQsaPzfpvPrgBapRuwMtfhxUtGdgHygDLiMEAgHYPklVsKDjTLXzjFMRkkZhvzmOvxhhkVkBgPJkgTNjQYvIGXysPCcWZCWbAVCUwCvoaedJKWbiTwdCrYAlybJniFYAunUlQoSPUAKWaGYgjxFJZnlXidvsyPXvaWlsQGhXAvrXIoJDeAzRuXdeNFizlQYeqruEzZNuUeWbUNcFiMTOgtIZgpaCLCOLsDKYyEcPPW</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_10</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_10</con:name>
          <con:value>AEF7DA439878FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_10</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_10</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_10</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_10</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_10</con:name>
          <con:value>zFmTBTBHOBlHDLdpbwbexrXReddoDgcKZRLuRVfpYXseXofHeXPLvsKDLnIfRwfjsKEjmVVqtLBMAAyuFeEpeWiwJcJXXCAfiigprycGylvkwxEvMoDObkKtGWTGKJVYnnzwFTEcxRbutcIozCHIKEtTsCOTELmDnYdpWXkfoGgiLdGbOUhlIINzSzJrJqhyaJrGTJJjqjxpiQguTCVJXllLemyCGQWBkGwEOwabGiEmuePkFUAkwVFzDvqdAcQw</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87266</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/b0106692-ac69-4846-8274-c05e8b93f471</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C44FB0FAA485FE05305991E0A4BE1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C41855544483DE05305991E0A013E</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C44FB0FAA485FE05305991E0A4BE1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C41855544483DE05305991E0A013E</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>7a1534a9-42e9-4ef7-96b0-b1ff2dab5d29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f3abdc8-8ff5-4a7e-bed5-489e7386e662</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>832dade5-3b9a-4d6e-a445-9836c1c718e4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03156 - STS - DeviceAuthToken DeviceString - Verification max.string.length numeric character DeviceString is consumable" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7b3e2d5c-179d-4151-9f8a-5f6c12191475">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Generate a DeviceString" id="cc6f2327-bf8c-421d-a04c-a2b40934e8ec">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def genUtils;
def ds;

tC.setPropertyValue("deviceDeviceString",null);

try {
	genUtils = new generalUtils.generalUtils(log);
	ds = genUtils.randomNumericString(tP.getPropertyValue("max.string.length").toInteger());
}
catch (Throwable e) {
	log.info "Error during genUtils.randomAlphaString - $e";
}
finally {
	tC.setPropertyValue("deviceDeviceString", ds);
}</script>
        </con:config>
      </con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="5dbec93e-301f-4aa7-a0d7-b8be0c18b341">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","3");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="108e935b-531a-432c-9420-477aff45ce4b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="af6be4a4-090b-433f-9e02-420407fa7fbe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="7df8ccc6-655e-4d62-a71a-0d7a2b5d64e6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="21031a51-bc94-4b1b-b0af-c6b0a578cec0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="ad8ec410-9694-4ab2-bbdf-12173d8a1f53">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="f8201142-5357-47aa-a504-3fb7f60cfad2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="52f07289-bb9d-46bb-a146-e979846b59e6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="6cfeafb1-9c25-4031-82f9-ead135e0eb55">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="2cc8fb39-ed9e-42bc-a834-a4173eb56f8f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="fa22ed73-325d-42f3-bba0-00bbee981055">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="b0a0afee-cba3-4d87-8e00-76790ba183aa">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="20d2dcca-a721-4011-8e2d-b7eaaa433f0b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="b180c7fc-5f1a-4da2-b89d-fa6735ce0c1d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Loop again if required" disabled="true" id="7f0c9107-5d75-46b0-aa85-c65b8d82c170">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
def counter = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("Generate a DeviceString");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C44425AAD4851E05305991E0A212B</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="8482716181729887538320147191216876424930958086331968801455924036136589882293364186984438339445846433346355844369793844635743951453404585036972484961810716749871051175561104001511219271454903905126405574696016638500214186439378028560995457760009184439118785"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F9239EEAD09E2F25E0401F0A079957F1</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F9239EEAD09E2F25E0401F0A079957F1</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F9239EBE527A50D1E0401F0A079950C7</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F9239EBE527A50D1E0401F0A079950C7</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthString</con:name>
          <con:value>841321476135740</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeSavedRole</con:name>
          <con:value>urn:dece:role:device</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F923A071C797B56EE0401F0A059941FD</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F923A071C797B56EE0401F0A059941FD</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968910901</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C41855558483DE05305991E0A013E</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">6</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_1</con:name>
          <con:value>NWwTtvZ28sNY0IVRbfPH6H8YwKi</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_2</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_2</con:name>
          <con:value>AEF7DA439882FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_2</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_2</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_2</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_2</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_2</con:name>
          <con:value>1142225862384087218611545405663883844778120543446018290920649622034126571997923224637833638581922520704411793620053937728148008016362804916473725563240557801177802622806044897566869744909968501711327950496867925334021690276829056328807868039195428078481668</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_3</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_3</con:name>
          <con:value>AEF7DA439887FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_3</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_3</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_3</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_3</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_3</con:name>
          <con:value>0286697988840395104044928808795770983983625769743944391922496858022791780469669139782231416520559273058562210951798955879744750567070151536526455507483035363439196882523150254595691051154426890252646396392445721838508325558821263775037616684250270002450550</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_4</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_4</con:name>
          <con:value>AEF7DA43988CFF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_4</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_4</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_4</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_4</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_4</con:name>
          <con:value>1011842879624333826950778778720650660257711656362325022419220228899605917341270893171854334688993894733323768456839044213518461609391496518241368943521634137848648550161096725513958425843560904181891300653165034134615649919324264904849783706516483541048709</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_5</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_5</con:name>
          <con:value>AEF7DA439891FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_5</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_5</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_5</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_5</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_5</con:name>
          <con:value>5401826505069205592007502135887214534546000968346166113287996396674546050956246183261318294582818395295328311052785634000291168035198520764620165967930896475143831966604829231513799114817794123451453137563017454500247459509716194373083995086349018245753378</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_6</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_6</con:name>
          <con:value>AEF7DA439896FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_6</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_6</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_6</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_6</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_6</con:name>
          <con:value>3542553091327854600353116245168712433171416654786216144666506202483110607164951670948493498968875881120438347402619799818009385594988790082449816226660554820407704482909278427220945700714396010302996793869268360744597566072668213716846637507964542083563033</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_7</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_7</con:name>
          <con:value>AEF7DA43989BFF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_7</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_7</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_7</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_7</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_7</con:name>
          <con:value>3423824111678152201719414954712020853788291281678157237141378548183652419525903448982048509869544617078825920065200872835140212583154233795605502391878969089248311058100672719061890398021086697401631598093960056233633255831199901501313860535330448543921369</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_8</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_8</con:name>
          <con:value>AEF7DA4398A0FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_8</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_8</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_8</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_8</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_8</con:name>
          <con:value>7104424960982185149377333497479996424173562257956520729236336808601410419115334695162379540526039897553247541132747663344204471444758482561931882017281156860071227784105075212613084190682675931241795475571397791774080402835966205290215761158675621309872037</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_9</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_9</con:name>
          <con:value>AEF7DA4398A5FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_9</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_9</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_9</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_9</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_9</con:name>
          <con:value>9929086274552371221738058905460650715622397223493305486540395087648707788439462952248708540965165197917821542661252980185398520821767481006350479443822721417625319349621427495046143224998681212936102315651389312319247474157697722269755792452892723686036068</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_10</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_10</con:name>
          <con:value>AEF7DA4398AAFF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_10</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_10</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_10</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_10</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_10</con:name>
          <con:value>0618186799125545008758351814953316936494271460495464334132073892401650411884622178537775848486239023302148961583854155253193601819954794057879876864334529057865067792491415003581852309267350926534815992148109224986078477053538184620838280116338582965962234</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87267</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/a515ae5b-eba8-4993-a015-a8c52a447f27</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C44425AAC4851E05305991E0A212B</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C41855557483DE05305991E0A013E</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C44425AAC4851E05305991E0A212B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C41855557483DE05305991E0A013E</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>c81720d7-9b86-45ef-952d-63ff564d774b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6cfeafb1-9c25-4031-82f9-ead135e0eb55</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03157 - STS - DeviceAuthToken DeviceString - Verification max.string.length hex character DeviceString is consumable" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="624b3bfc-6f26-4ad1-b1a9-a5478a74e9e2">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Generate a DeviceString" id="26f23ea8-f67d-4c68-a977-5a8b48ca675e">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def genUtils;
def ds;

tC.setPropertyValue("deviceDeviceString",null);

try {
	genUtils = new generalUtils.generalUtils(log);
	ds = genUtils.randomHexString(tP.getPropertyValue("max.string.length").toInteger());
}
catch (Throwable e) {
	log.info "Error during genUtils.randomAlphaString - $e";
}
finally {
	tC.setPropertyValue("deviceDeviceString", ds);
}</script>
        </con:config>
      </con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="b53f3ab4-d0f0-4540-8151-dd311ea432c8">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","3");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="26473d01-c0b9-43e6-960f-7e695db90537"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="33814b5c-3768-4597-9ed3-20780f031740"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="25db9d13-26fb-4c4f-bd34-36f034e7467b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="74b644f0-0f2c-4145-a870-5212a2925c2e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="c423db1a-1ef5-41ef-bd8f-8dadd38e325c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="a732bedd-d02a-4ba3-a6c5-ebec1576b054"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="717872f4-6392-4f3b-9efb-93ef4e1d8e7d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="253c3e66-20f5-4d39-b90d-738dfe28095b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="246347b2-c3d0-4cdc-ba05-03c31e41adde">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="00ff5e26-79d4-45eb-8276-da5808406f02">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="2a80fff5-3869-4dca-b57a-f854ec1dbc3e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="bd3db264-4c63-4d32-9fef-4940e3b60d0f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="d29e45f1-9217-446a-b1d0-ec06956a756c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Loop again if required" disabled="true" id="3dad629d-9f8c-4858-aa5d-c3f4286a2b94">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
def counter = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("Generate a DeviceString");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C520B93E4158AE05307991E0AD35D</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="CDF267596A6B16FD574B44E7783343251CFEEA99AC7523D27377692424713CF18E24C74CFD4C757BFED1A655D5421A6EDD2A332846EDACEA5D79397E2F19C943BA557FD23E17BF3E96392C96A685558528FFA98897C118E48436847B1A67F22DEBAFAAE326E6CA47B8C6368BC96E77927D84B4C8BFB8FEA6B3167668293BE352"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F8F4D4C2BE1B567EE0401F0A05991C4A</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F8F4D4C2BE1B567EE0401F0A05991C4A</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F9239F77C3738680E0401F0A079950CF</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F9239F77C3738680E0401F0A079950CF</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthString</con:name>
          <con:value>841321476135740</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeSavedRole</con:name>
          <con:value>urn:dece:role:device</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F923A2E6DC8D8153E0401F0A05992FF3</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F923A2E6DC8D8153E0401F0A05992FF3</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968915261</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C516BA430157AE05307991E0AEC9E</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">6</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_1</con:name>
          <con:value>Dg3OTaMhu5pUvSJrOY7ELh0EjB4</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_2</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_2</con:name>
          <con:value>AEF7DA4398B4FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_2</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_2</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_2</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_2</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_2</con:name>
          <con:value>B1E92792DE447BFF65DE3221A24E98FEF6317DEE39F1B53E4CBA368A725824E5F41E39924A94CD9252AD124213BCE8649ACCBC9D917C7F9472925715E93C78B2692C68CFB8A5BC4581F785EEB2859C586AD9656E15522266BFE5D19F492AE383CD352A6CACF5EEC5CABBE284C6C9EFC1FC28C7A74CA9AB15B1A23F38AE867E33</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_3</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_3</con:name>
          <con:value>AEF7DA4398B9FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_3</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_3</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_3</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_3</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_3</con:name>
          <con:value>FE68DEF3A926B8D74688369E9F8DE652979B2436DC547CA6C14C2F9CF36F21AE27DFC446195FBC656D37846363CE9E515ADDF25272F8E21D82AFC3186B9561856DA3B53BC472A7387B73F721B1BA22FBEFB81EFCFE49359F1422F42E3E1D882F471C1527C98DA3353E7E83F49ABEB422949173C2EAB6B384CDF79416FF4C12D5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_4</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_4</con:name>
          <con:value>AEF7DA4398BEFF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_4</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_4</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_4</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_4</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_4</con:name>
          <con:value>2A9ABB989B92FC5EDE482D8A9D86CB223BD3F7C56B45DA985F4AD5C3E9B46EA4F7512395A6D7A7A1AF628C1D5978336544CA8ADD8C74B35153EFFC7BC36D813F25957AB979ED3F7CD649C89CC56FB78D8E49C5DBC69FE15DC443CE68AB1E4225C41E9C5D86BD8A8EB89233811F668379FD36E29A27FF82F7789F7554832CBA55</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_5</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_5</con:name>
          <con:value>AEF7DA4398C3FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_5</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_5</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_5</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_5</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_5</con:name>
          <con:value>269AB1C9796B83B8BB3E66FE4F6DBD1519A923718F46178E87A39488BFF8F79989643EB496967DD9ADAA24FA43D7F9EBE5B1297C58379CF6D49781D89661DC5F295D9B262F6B3AAEC8747BAB5B8985C3B76C338B36921DB7A18EC5E8987BF8D2BE27CEB6FBE4DAF6754A1E6C4AA8C2DD8523DE997739CA31CC2F33A314D5B8E6</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_6</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_6</con:name>
          <con:value>AEF7DA4398C8FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_6</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_6</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_6</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_6</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_6</con:name>
          <con:value>35E319427D9ABE1AB8731F2C35473A77953478F47FD6C9F34B51318C63ADF6AE1EF1A4C9C5E7AEEE8C1DE4A2ABCE6AF989531399CAEB4F48AEFD7F7C96F8C521B7293F38C87462A897ACDC8BD9D759749547C886373BAAD992A7AF3C6C7856AECCD25E2D8C23F439215D83668F4B1196BD4164B7D9792AE2E7776E5D513C47B4</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_7</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_7</con:name>
          <con:value>AEF7DA4398CDFF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_7</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_7</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_7</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_7</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_7</con:name>
          <con:value>D8993DD4F8B7723763B8BCA943E16D429B9E5C1274D1E2752CBE297ECE9CF5361FF39BC1344C9EE34BA96E323D817B4F7DD434B93F781F7B34BFA8D562F64787F784FE9DAC2F194B845E6CBDAC2D3983BE2AEA6848A5BEF6475AD2BEBE2234C52894A3EE5765BB911186B43BAAAA6DB8FC56E84B211D4D385AD8DB87D67CBD87</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_8</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_8</con:name>
          <con:value>AEF7DA4398D2FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_8</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_8</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_8</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_8</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_8</con:name>
          <con:value>5E135922FB22E5B86FE7E7C7CC36548C334ECC265D86BDF5B4BA844FDFDC2EF396267ECFA267493BA9D73E743C3E1B31A8D297A62A728477D19C93EC146D3E862ED6E7A76697BE34C43DEA5F5F52AA72CEBF8F473C7DCFB25AD9389DA3235137197A81BBD18DD514BFBA5EC3E1C53985D3F55F4484CCF8BB98E392341DAFAFE3</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_9</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_9</con:name>
          <con:value>AEF7DA4398D7FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_9</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_9</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_9</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_9</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_9</con:name>
          <con:value>DCF7DBA73BBE51DC16DC7A17B218C8852A19ADEFC8A8F59EFB8C496CBD4C527ABD7D6F84933F688A5A93F8BC33BC8F2EB5AFFF54E683B18C3EFAFCEDC77D1A396188DA778CAF299E8319D3C7FED55C1F2856B64EE8988B7E6621B69AADCF854EAB62E813198381C3B41B83291BDF1A246C3CC61BB7EF375521FB5D169A36B48F</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_10</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_10</con:name>
          <con:value>AEF7DA4398DCFF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_10</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_10</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_10</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_10</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_10</con:name>
          <con:value>4858136AABB64F8A18E7788645E79A952D9EFCDD8A54F438E8CB7CDFB835B457DEFD4A7B233CFC3583AE4B9948E5834A2438D9262EFBE2752A67C9FDE41D18B1292F4814BFD7DF86254461BEDE3F3EE9ECC1B869875FE5BB9F36ED6C271A2CFE3E8EEED3DD37398B978B9F6C23F9256DA8C4158E4CAF125F8F4A4FF9F9C7BB84</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87268</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/3240ced1-27af-454c-bb60-2fdf52e4685e</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C520B93E3158AE05307991E0AD35D</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C516BA42F157AE05307991E0AEC9E</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C520B93E3158AE05307991E0AD35D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C516BA42F157AE05307991E0AEC9E</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>7fbe6486-9f23-4d01-86db-2aa74261a5a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>253c3e66-20f5-4d39-b90d-738dfe28095b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03158 - STS - DeviceAuthToken DeviceString - Duration parameter ignored ten year token granted" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7d985355-f897-48a4-8a82-3819cd909857">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="2533171a-e1fe-4038-a0e9-c8264a53ee65">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("stsduration",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","3");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="ecb4b4d7-27ff-40c1-8f78-a31b4caf56d6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="Call First User Create" id="1e98a446-8291-49a8-8fdf-feceaf213599"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="62fc03c0-aaf5-4bb0-84bb-cea90990bd6b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="6466435d-ffd8-4887-be27-02bd949ecd33">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="28a2e477-8b6c-42ad-ac6a-44299e274e03">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="9ab1ece4-d129-4108-a814-e36ab6ca3765"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="76e620c7-f5a6-413f-90d9-da828422dfc2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Generate a DeviceString" id="14c64131-9db7-4a2a-a88e-217766fa6835">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def genUtils;
def ds;

tC.setPropertyValue("deviceDeviceString",null);

try {
	genUtils = new generalUtils.generalUtils(log);
	ds = genUtils.randomHexString(tP.getPropertyValue("max.string.length").toInteger());
}
catch (Throwable e) {
	log.info "Error during genUtils.randomAlphaString - $e";
}
finally {
	tC.setPropertyValue("deviceDeviceString", ds);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="1117555a-d034-47e4-87f3-e10f23b7183c">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="e00c2b90-f783-4c64-8693-fd111b0ea538">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="bc62f71e-6bb7-4453-9e55-75928370a7b7">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Generate a duration parameter value" id="6d9999b8-f4b3-4e5b-9cee-296f416f2747">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def genUtils;

int duration = 0;

try {
	genUtils = new generalUtils.generalUtils(log);
	duration = genUtils.randomNumber(1, 8755);
}
catch (Throwable e) {
	log.info "ERROR - genUtils.randomNumber - $e";
}
finally {
	log.info "duration[$duration]";
	tC.setPropertyValue("stsduration",duration.toString());
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="bc8d0e65-f229-4992-ad32-02bfc65b34ed">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="4f686421-aaff-4207-82d7-e779d9e85e15">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="494a619c-e5d0-411b-bb77-831f05d5968e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Loop again if required" disabled="true" id="2812dd84-65b9-4b49-80c5-4db7bf28ed2b">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
def counter = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("Generate a DeviceString");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968919188</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>stsduration</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C520BD59A1571E05307991E0A1011</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C405EB6A44847E05305991E0ABDAA</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">gEYYMnCjXjEGxh041jEFsfbFzuT</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F9239EA971AA5C21E0401F0A05993BD4</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F9239EA971AA5C21E0401F0A05993BD4</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F923A2E6289D5520E0401F0A05992FF1</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F923A2E6289D5520E0401F0A05992FF1</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F8F4D4C2BE28567EE0401F0A05991C4A</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F8F4D4C2BE28567EE0401F0A05991C4A</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_1</con:name>
          <con:value>gEYYMnCjXjEGxh041jEFsfbFzuT</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/ebaa9c0b-a02f-45e5-b707-31e3179f148d</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_2</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_2</con:name>
          <con:value>AEF7DA4398E6FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_2</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_2</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_2</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_2</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_2</con:name>
          <con:value>312E4A9CB2CAB1EEF413987281EA165C1DAA76575DB76B359166DCAD4E94BA33D8DA94E1AC424256BA4B914CFA8B174F543B213554F821F3698F975BE2A75DDBF2A3E2181C675C5ADC89F21949DC8E578EB5B8DEFA57B65EA25ECC69589395BE4ABFEDC4E69FA4C191B97E8173481C4918BE29847C3E1C8A746277C3998DDE87</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_3</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_3</con:name>
          <con:value>AEF7DA4398EBFF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_3</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_3</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_3</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_3</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_3</con:name>
          <con:value>B49262356411B8F91A99776435AE2FB6C3E253B39A424722E7D52A4CD8B7494473662D9B3F55EDC3262214D1EA18CE73F7E3D4AB18DC6415184565DDDFFFBF86ACE99F2F284B3A795946D3FED2D54581E23455F295BB75C4453952DD44818AB6829A98747F32C2DB42127DFEF4C6E8E82C56AC1913C95F3125C1FDE12748AEFC</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_4</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_4</con:name>
          <con:value>AEF7DA4398F0FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_4</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_4</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_4</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_4</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_4</con:name>
          <con:value>74D13881C55ED6B2A2D35F6CAFEAD19C92B53F5F71D91B1822484682E1BEFB39E75689927C26A1EF14494253D9F563FC965ADE83FB44F2536DDF26F5432D12A587F8B3363893F249227A7BD7685FC4CFB683FE9E8585482C4D712E5D373FBE4782FE7C8D3811B451A1C87D889743A963F291CD52BA4CDA9348841719F47E7AD3</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_5</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_5</con:name>
          <con:value>AEF7DA4398F5FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_5</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_5</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_5</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_5</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_5</con:name>
          <con:value>8A1357E9C271AA28FB7D7ECBE8B13D6BE89F14FD4979CA3FAC6B13B8AD3836A9EF8B7ECF4DBEA83FD61DCC47C43B22FEC792BBC5F7F736811A1D1248C121959485DAD781B43A7447A4BC53F4FD2C8289A38D1C9D8E6A17BC1E89EDE47EB4C57D39BDF368FADAD49131D1929A3118183C41B684616FC1D66F9BCECE3ABF55A996</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_6</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_6</con:name>
          <con:value>AEF7DA4398FAFF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_6</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_6</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_6</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_6</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_6</con:name>
          <con:value>CF1DAD4681FE6A8231EA2644B4861F64E919AEB422157A6BC5C41F41F563D68BD98FDE7F41D3CE32141ADBB2CA2B46B8F7DA48732E5C8B48E1C997C21EAE6D756123611EC885548F5DAC4CC8D79E6FC66F47F82FE1618157C958A2272696FC814A714CB2AD2F15E9DA1A521A2BAAE3B5E64C7EB23DF26B44EE351548781FB68A</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_7</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_7</con:name>
          <con:value>AEF7DA4398FFFF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_7</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_7</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_7</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_7</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_7</con:name>
          <con:value>DE87C82B24D2BF63F55CDC39F6F88D6ED9A6646B1EAC3DBF8E2F52BCFED552F9CF2465DAF1597A7E5CF1F1754AB888987695B1E57DAC815B4DDD832A3B6EC1B3E18E792299CE13F6E1FAA55DE5C4759D14154F6E351CD557F366C3DB341B999E94EF1A76F2124EBC32121377F5FE1B96E64CC31552D7B76257CFEFD5F9BEBAEA</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_8</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_8</con:name>
          <con:value>AEF7DA439901FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_8</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_8</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_8</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_8</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_8</con:name>
          <con:value>CB3E4C4A6FAE423EA8375E673511114FFAADBFF2E2157F8A1313F4E2CB791FEA5357ECF3C6B6133546D8F86DF263ACDAABC24DB99115B1434CA7E3D36E96C719ECCBD799ED54AF76EA55CDFCD21697ECB41B8D28F5BF41FCFF2AAB32F84DE88EB5777E7395E8ADC86F538BAD3D4CE33FB2C8F77CF8DA4932E2947A1E6B1F7138</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_9</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_9</con:name>
          <con:value>AEF7DA439906FF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_9</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_9</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_9</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_9</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_9</con:name>
          <con:value>5632E3F37CBEC1D4AACB9D9F3C6C3246E94A13CA3EC3B2B1E69CE1F67FA83CEED1A1BBB539234527E5DAD5CC591D94F8B8B181FD15C9596EEAFAC2FB1AB8B491D2A923FC55931EF177FEDFFDED2FC1545E85623E5869E35C8616A9551A61CC2D674DC11DAC1655EB889CDB5DFFA4AA3AAEDAB492F36C15D885A2C59227A7D77D</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_10</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_10</con:name>
          <con:value>AEF7DA43990BFF0EE0401F0A05997DB5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_10</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_10</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_10</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_10</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_10</con:name>
          <con:value>43EDB58FD48AAD46213A24618633D897685EEE8F7CCBD4D48128A7667B858DA3332FD8CFE1BB7A6C463CE6F696817C6DEFC83C47C9764664D9EF89EE7D8B1D2368C3D7B1C5B84E73E4E49D55A6D59BBD2BEB22EC37997EE7F67A37C4E268A6A35FED47F9BE67AD818886A457C281BA457D25E6F32C5CECBF6FB38CF52147B142</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C520BD5991571E05307991E0A1011</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C405EB6A34847E05305991E0ABDAA</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C520BD5991571E05307991E0A1011</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C405EB6A34847E05305991E0ABDAA</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>2a885b56-0497-4c7f-bb98-0f8f29d28979</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14c64131-9db7-4a2a-a88e-217766fa6835</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6d9999b8-f4b3-4e5b-9cee-296f416f2747</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1117555a-d034-47e4-87f3-e10f23b7183c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03159 - STS - DeviceAuthToken DeviceString - Audience parameter ignored" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="8945e6b1-40f0-4ddd-bccf-5d5a3ceb3c76">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="b1ca7f81-cba7-4647-805f-9fea5b5c62e9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("stsaudience",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","3");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="8641c887-1ef5-4aaa-a2f8-96c0bf04eb7e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      
      
      
      <con:testStep type="groovy" name="Call First User Create" id="2d7049eb-b664-43d9-a62c-44fcf121c4ee"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="b6f6aa5a-17dc-4808-8ef0-6225ec21b421"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="5fd72b69-d0d4-4c80-96f9-4fd266b57d1f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="ec0fee1c-b7c3-42a5-8c39-78e00584d2f6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="ded86d9f-6b8d-4dbd-95a0-14acabe86575"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="c09c8859-0fe0-4b0e-b51d-b7c8dda683ad"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Generate a DeviceString" id="7abb3a3c-56d1-4796-8963-f8e52cd2c6c9">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def genUtils;
def ds;

tC.setPropertyValue("deviceDeviceString",null);

try {
	genUtils = new generalUtils.generalUtils(log);
	ds = genUtils.randomHexString(tP.getPropertyValue("max.string.length").toInteger());
}
catch (Throwable e) {
	log.info "Error during genUtils.randomAlphaString - $e";
}
finally {
	tC.setPropertyValue("deviceDeviceString", ds);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="2c2f519a-04e5-49cc-a0d5-5b82bc4d640c">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="7c0de709-983a-48e4-aaa2-e2c84059c6b3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="b15b5f76-eb35-442b-b2fa-436d3722b9f8">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Generate an audience query string" id="f343d0c3-aa4c-4b0c-81bd-f7fd1810f4df">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("stsaudience",null);

int i = 0;
String nodes = tP.getPropertyValue("nodeAffiliationRTL").toString();
String audience = "";
String urnNode = tP.getPropertyValue("urnNode").toString();

List nodeList = nodes.tokenize(",");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It [$i]: $it";
	
	audience = audience + urnNode + it;
		
	if (nodeList.size != i + 1) {
		audience = audience + ",";
	}
	
	i++;
}
log.info "audience [$audience]";

assert audience.length() > 0;

tC.setPropertyValue("stsaudience",audience);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="f624d7fd-5dd7-48e3-8d69-6417604cfe72">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="165a60a8-7fff-446d-9b0a-405299782a60">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="53d3329a-4cd3-4895-96e0-454ffe9679a2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968923480</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>stsduration</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA3289AC501C2E05305991E0A9605</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C452A32690A03E05307991E0A724A</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">yOhVIBO5Q9vlZF6y8pnOAySyCXH</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F9239F77C3848680E0401F0A079950CF</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F9239F77C3848680E0401F0A079950CF</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F8F12CDFB3EC52A3E0401F0A07991D20</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F8F12CDFB3EC52A3E0401F0A07991D20</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F9239F178ECB261AE0401F0A07995777</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F9239F178ECB261AE0401F0A07995777</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_1</con:name>
          <con:value>yOhVIBO5Q9vlZF6y8pnOAySyCXH</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/3a29817e-3348-48c4-85b0-2101261e6585</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_2</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_2</con:name>
          <con:value>ADDACC702CA404F6E0401F0A05992B17</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_2</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_2</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_2</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_2</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_2</con:name>
          <con:value>C3B22F363E2B718E7761456FF7B6FDB7633728C433F7E3BB4A3AAA3C9134A3E1AFB968F99E4F76ED84468AA8DEB7BEF6252B192A187E4F16B2F947F75D79F4B78878E7549F1EA2AD16E3585DB66C71383B45D265794D1AA621E1653684A1C7E3FDBC2811E8A2F5AADF4D673246BDE34D6795CC8332A38FD473392F166B251A36</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_3</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_3</con:name>
          <con:value>ADDACC702CA904F6E0401F0A05992B17</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_3</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_3</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_3</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_3</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_3</con:name>
          <con:value>74B32622CF58D936D5ADDEBFE18F81788AEA81A73692AC28A5C5E6E8ABC2BEBF9CB81837ADA5D199E1FD64F7BC29B8D915BDE5DBC413F37B5A46F9FECEB3A8C434BA5FA13C23B6D8FDAFBE15A79662D238788AE81A7FDE127CB5D39A1BF956E3CDE97EA9D425F5FF7737C2DF9B88EB68D6EF4DA6EC8FDCE229BF3C7949813125</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_4</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_4</con:name>
          <con:value>ADDACC702CAE04F6E0401F0A05992B17</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_4</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_4</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_4</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_4</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_4</con:name>
          <con:value>ABA7C89A8BD2FD5CE6738FE5F9E44EC7F39ADC8A59577D92F175C9CEFFA71F583352E6CC243295A5E944AC522885A932A2CCB39C93DBB456BF87BCBE1DD2172321D573F6432A8FAC849C8931F42B7C72BACA74D7FFCD2622E67BD3561382E5F62DE472CE2ECF4C9C46C8B5E8FC8241E6637D25D99C14DC32F6564A9E4C4B74A8</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_5</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_5</con:name>
          <con:value>ADDACC702CB304F6E0401F0A05992B17</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_5</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_5</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_5</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_5</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_5</con:name>
          <con:value>19BB4C4562438A366FA5D144819483DA313597ED8D3D7646C3DA6F654A417F3DC7583927C35B9DFCBBCC8876BFD2AF46BC1D5446DB7FC6CD11EC55BAEEFD8EEC79D6F291EA5286C921EC196291AE2B287442C26A1DDF3A23AEAF95F3AF4835DF192D72CA788D94EAAABB82D579535FA81BF653FB41593126AD2D82176BED186A</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_6</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_6</con:name>
          <con:value>ADDACC702CB804F6E0401F0A05992B17</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_6</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_6</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_6</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_6</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_6</con:name>
          <con:value>8ECF14B8D78F95ED7FB78D48236BB16397A719BC3142CDF1B29477F1AFADD2D123C7FF42C56C9A7498A5F115B8AD99B12F2241F976D474B8D2A2E6487128EA1532859E276D9FCF5EF2DB29711149C29C348FC98D6AC1D9C464CCE51E4F323CCE3795A352137CE2F8862A23AB483857FEFDEC927D18974CCE781E73842CF5F8A2</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_7</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_7</con:name>
          <con:value>ADDACC702CBD04F6E0401F0A05992B17</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_7</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_7</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_7</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_7</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_7</con:name>
          <con:value>732549F8EAD6AECA1D13F8293EAF69D3DDA2413A7FE9F28767412EA2A1D2B89D4B617F9466E98E858F723A84A779C91F98BBB663A9343F7C18815DA59D2347936E42FBD3D5E45A38F1532FD3E115C62E8E7463C2EDAABF968B92C8652E15D6A28112FC482E44DDC6B5FE874F1B2B3E1F17441634731C5F48435761F121FBCA73</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_8</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_8</con:name>
          <con:value>ADDACC702CC204F6E0401F0A05992B17</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_8</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_8</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_8</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_8</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_8</con:name>
          <con:value>7342BE1F5F22F73614CFBEBA49959BE29DEF2C473BC256FACF7E6B7567BC6149FF6599E3E3EA7F224A455A7A23212CD6AA77659D4BB1A673B289CD73DEE1C8ED6A4AE61CF8137536527C35E315AF21A69691FAAAD368CEBD56838F3996F7331EA8BD732487E373BB6B412E5B2E26855F92922A19881E16EDFA87215C58386AB1</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_9</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_9</con:name>
          <con:value>ADDC48084CB8F107E0401F0A07991F2F</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_9</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_9</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_9</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_9</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_9</con:name>
          <con:value>E2B48EF1C7EB6D9D912D7D3F4C58A35A64F8C9CA2C828D4EDFFC1313FB3F3F4494C6E65A74E77D73EE13AB58469E92CB239C159946122692372B312A51489566BDB9546513DE3BEFF2B1948CFB9DF368D8A16586AD7D711DCB53BE5D4513C5224E53B5832BA2AFC24A29F8E9487C2D2EFF2F4F165DBBE5E66E4D1A7658217158</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_10</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_10</con:name>
          <con:value>ADDACC702CCA04F6E0401F0A05992B17</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_10</con:name>
          <con:value>50006767</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_10</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_10</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_10</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_10</con:name>
          <con:value>3C28384362DAFED84ED7C4C87E184FF41A89B64E4982F9E216971F82F88921B3926757F97A55E4F11A63754F4756879959E246FD5258B5528A8C8932AE572AAF5A2AB3528FDE1D31A4A5DE99D3FAA41AFF5D1CA3411A1A4273A23E9E27A592739E89B482777B5C1BCFA2119EA45BB2C478F925392C473695BD793A82F4315FD8</con:value>
        </con:property>
        <con:property>
          <con:name>stsaudience</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>stsaudienceIgnoreAll</con:name>
          <con:value>true</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025CA3289AC401C2E05305991E0A9605</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C452A32680A03E05307991E0A724A</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025CA3289AC401C2E05305991E0A9605</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C452A32680A03E05307991E0A724A</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>3ddcb4aa-2e51-4efe-8f36-bf8991fcbb1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f343d0c3-aa4c-4b0c-81bd-f7fd1810f4df</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7abb3a3c-56d1-4796-8963-f8e52cd2c6c9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2c2f519a-04e5-49cc-a0d5-5b82bc4d640c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03160 - STS GET - DeviceAuthToken - FORBIDDEN - DeviceAuthCode null" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="3680c6bd-63de-426b-8b9e-34c88f462231">
      <con:settings/>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="bf7e4cb2-b6e6-47ae-9c24-8cceb415405f">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="a4b23c58-f453-4953-9f23-9322c98ce4b0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="ea3ad07f-94fc-4f8f-92fd-168fb011a9ea"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="1c84df02-0712-4464-80b7-5dd681200560"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="13eb55aa-a79c-4b8b-82c8-8ae6a1b26759">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="cb204a2a-6f53-41a3-8610-b7ef80d4b2c0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="0a2da8ce-0b83-461d-a6be-08cc3a1e78af"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="b72975cb-09d4-42b4-aa31-e61f9f34f14c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="d65a3eba-43c9-4188-9096-9d9e8ee37558">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="d5dc26ca-fcc6-4b6f-8e5a-a4ad879f2b8b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="666ef602-e545-4917-80f8-b0941b8a3c94">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="04fcaf12-653e-4462-a741-5ad657afc2a1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set DeviceAuthTokent to null" id="e1a17523-30ab-4d28-b2c2-8879997851ce">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

tC.setPropertyValue("deviceAuthToken","");</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="5eb5b3e6-81a0-4495-b551-9c8e21d37629">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA2F28AFA01B4E05305991E0A9C72</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="532539818123735"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F9239EBFEB4EA148E0401F0A05993BD6</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F9239EBFEB4EA148E0401F0A05993BD6</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F8F12CDCE7EB8AEFE0401F0A05995484</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F8F12CDCE7EB8AEFE0401F0A05995484</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F9239F75428C6E7FE0401F0A05993BDA</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F9239F75428C6E7FE0401F0A05993BDA</con:value>
        </con:property>
        <con:property>
          <con:name>skipAuthTokenStatusCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968927159</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C516BF54F157CE05307991E0A1D33</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87392</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_2e184722-1e75-4a67-a695-bdbb14e3425d</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025CA2F28AF901B4E05305991E0A9C72</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C516BF54E157CE05307991E0A1D33</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025CA2F28AF901B4E05305991E0A9C72</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C516BF54E157CE05307991E0A1D33</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>4b28abe5-9cd8-430b-b5bc-e95d4dc972a8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e1a17523-30ab-4d28-b2c2-8879997851ce</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d65a3eba-43c9-4188-9096-9d9e8ee37558</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03161 - STS GET - DeviceAuthToken - UNAUTHORIZED - Basic authorization header not supplied" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2de2ca73-3b96-4dcf-ba76-4b6c841bf040">
      <con:settings/>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="24517261-a7f2-4f64-bde2-b70b9b6c622a">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("actionAuthHeader","EXCLUDE");
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="b8d8967a-231e-430f-9103-63be3ea8eedc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="abd1f27e-17a5-4b46-8069-127942ed5add"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="4db51105-faf3-4cab-ba5c-e5857dee5553"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="78526d01-31f5-4101-a6d0-358841097a92">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="1c930ee1-544b-44d3-922f-e1a15904d76c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="71936f2b-eb19-4c8d-bf6d-cf4cc8d0d9f0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="a34d9de4-1376-4863-a8d5-f86911f8268f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="86e65a65-6d83-4adb-bae8-4ca8e009a615">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="d81ebabd-193f-41bf-9dcc-48086f0c409c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="2dc0cd13-2b54-48eb-a1b1-2743a0be8e44">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="ddbe7449-783e-4d8a-ad06-91f80cb7120a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="9faa6df1-23fa-4516-847b-112d1103cf2e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeSTSGet","UNAUTHORIZED");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4066A8BB484FE05305991E0ACBAC</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="532539818123735"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F923A024E547DE58E0401F0A05994205</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F923A024E547DE58E0401F0A05994205</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F9239EC254EB3ADAE0401F0A05993BD8</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F9239EC254EB3ADAE0401F0A05993BD8</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F923A0C3144577FCE0401F0A05994203</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F923A0C3144577FCE0401F0A05994203</con:value>
        </con:property>
        <con:property>
          <con:name>skipAuthTokenStatusCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968931809</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C403082274835E05305991E0A2E11</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>actionAuthHeader</con:name>
          <con:value>EXCLUDE</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87393</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_c652c795-254e-4b65-ba4d-98e4ab35b207</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C4066A8BA484FE05305991E0ACBAC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C403082264835E05305991E0A2E11</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C4066A8BA484FE05305991E0ACBAC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C403082264835E05305991E0A2E11</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>b1cc54ff-f677-4bc6-b254-04f31e7b9849</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>86e65a65-6d83-4adb-bae8-4ca8e009a615</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03162 - STS GET - DeviceAuthToken - FORBIDDEN - DeviceAuthToken supplied does not exist" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="41d3d61e-9428-4823-8b07-9575b37794da">
      <con:settings/>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="ef15f7d9-9915-4a59-b98e-ab5bfdf6a2b5">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="20088ea5-18f8-4c29-ab4b-623316c7f67d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="c20e59fe-23dc-4fb0-bcc6-165799a7a1b9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="aa4c0a8c-5554-4b26-b9e5-f1fafb9f0641"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="47c76695-bafb-4b97-9999-d17b43a151fa">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="50343cd2-199b-4cdb-be1c-032746e85655">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="6e3550ed-a454-407c-960c-04e39a4e32bb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="37337992-1105-4b03-a3f8-23e20c18d34c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="5931802b-1b7c-47f8-bc8c-5d047c7e9eaa">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="25c1a698-da69-43fb-9a55-6cd432a75b75">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="83eb0f50-6aff-4fbd-9d5f-c494912fa8be">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="03f31df4-82e5-4838-add0-cc3359f75bfb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set the DEVICE_AUTH_TOKEN" id="7bf4e13e-3ece-4aeb-86ac-048cdcc2120f">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

tC.setPropertyValue("deviceAuthToken","1234567890");</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="5c55beca-1f32-426d-84f1-05fb8d562873">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968935769</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C43E3893D0A1DE05307991E0A6B76</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4030D1684837E05305991E0A9E1A</con:value>
        </con:property>
        <con:property>
          <con:name>skipAuthTokenStatusCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F9239EEAD0CF2F25E0401F0A079957F1</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F9239EEAD0CF2F25E0401F0A079957F1</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F8F4D466D77AF2E1E0401F0A05991C52</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F8F4D466D77AF2E1E0401F0A05991C52</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F923A2E97BFF20E9E0401F0A05992FF9</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F923A2E97BFF20E9E0401F0A05992FF9</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87394</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/b2f5bb9c-5a2c-46b6-a0aa-e4215a5d0646</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C43E3893C0A1DE05307991E0A6B76</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C4030D1674837E05305991E0A9E1A</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C43E3893C0A1DE05307991E0A6B76</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C4030D1674837E05305991E0A9E1A</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>a2446fad-e345-4f7c-acd8-862665760e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7bf4e13e-3ece-4aeb-86ac-048cdcc2120f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5931802b-1b7c-47f8-bc8c-5d047c7e9eaa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03163 - STS GET - DeviceAuthToken JoinCode - FORBIDDEN - DeviceAuthCode has expired by 1 year" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="829df2e8-64de-4145-8a4e-301dec4e5d6d">
      <con:settings/>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="1dfb66e2-9ef0-43c1-8ff2-37d00d82336c">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="1160ac35-a9e1-4bde-958a-573af04cac67"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="23ad006f-4e47-4fb2-ba5c-a5de7fd3f016"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="a2838bdb-a064-4798-8452-adef36e98bef"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="b800796b-7065-4796-af4f-67e7ff04c732">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="0e6f7fa6-45a2-41ec-a488-40da6544f634">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="61facb61-1b5f-4036-92eb-4b1a75dc23c5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="fca6fdd7-47c1-4f6c-9c84-71aba5ce7689"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="5e20a82f-18ba-4f19-aa6b-e43e59dc505e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="2794f0ab-ec4e-4e7e-9e1c-203848573f17">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="75757258-3f08-4330-96fd-1bee5ccd31b5">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="129d5aad-9503-448c-a4f2-57e365b2cbaa">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Update DeviceCode's DEVICE_AUTH_TOKEN.EXPIRATION_DATE" id="35303a6c-ff2d-4fdb-9d7f-e007dc3496a3">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
	assert dbUtils.deviceAuthSetExpire(tC.getPropertyValue("rauthToken"),-525600) == 1;
}
catch (Throwable e) {
	log.info "Error in dbUtils.deviceAuthSetStatus - $e";
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="00bb69f3-4d8c-4cd1-8dff-0b487ffed47b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4047D0760A15E05307991E0A58DB</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="532539818123735"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F923A0C3144A77FCE0401F0A05994203</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F923A0C3144A77FCE0401F0A05994203</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F8F12CDCE8028AEFE0401F0A05995484</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F8F12CDCE8028AEFE0401F0A05995484</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F9239EC687CBA60FE0401F0A079950CB</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F9239EC687CBA60FE0401F0A079950CB</con:value>
        </con:property>
        <con:property>
          <con:name>skipAuthTokenStatusCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968939714</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C44FAB151485BE05305991E0AE88C</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87395</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_1b64ff4d-10e1-4327-8949-89f817423487</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C4047D0750A15E05307991E0A58DB</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C44FAB150485BE05305991E0AE88C</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C4047D0750A15E05307991E0A58DB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C44FAB150485BE05305991E0AE88C</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>1d23f09c-f844-4610-a4ba-087c76c32e93</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35303a6c-ff2d-4fdb-9d7f-e007dc3496a3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5e20a82f-18ba-4f19-aa6b-e43e59dc505e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03164 - STS GET - DeviceAuthToken JoinCode - FORBIDDEN - DeviceAuthCode has expired by 1 month" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="e3f343e2-e521-4482-8371-8aa6ac24c3c6">
      <con:settings/>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="940042b2-401f-4c57-93b3-78ee55155ca1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="3eb544a4-c20c-4d0f-bb2f-d1b0a445f310"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="84f69f4f-85e0-4960-8407-05c74c5d2bf5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="b5b7dc1e-50f2-4b73-8ff8-db2a74647aa0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="349d0f3d-f304-43c2-84b7-efe557d81a38">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="ae9496b2-ce6f-4217-8ee9-9749690a087a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="e0eaf806-27d7-4346-adfe-2f4899f8970d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="941760d9-cce9-478a-bed9-19180f9309f4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="be52bb9b-3cf9-4949-9d94-36e08cbfb62f">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="8437e5f5-16d2-4ffe-a9fa-43d59ab37f4f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="2e787f98-1477-47cf-8164-1cd6dd9fe344">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="bd8e685a-34b8-47c2-828e-bc037d148d6d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Update DeviceCode's DEVICE_AUTH_TOKEN.EXPIRATION_DATE" id="17d5e8f7-bf2e-47a5-abff-bf75df69ecc4">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
	assert dbUtils.deviceAuthSetExpire(tC.getPropertyValue("rauthToken"),-43200) == 1;
}
catch (Throwable e) {
	log.info "Error in dbUtils.deviceAuthSetStatus - $e";
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="8409f463-8f24-47b7-81d3-68048eb4b918">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C44FB924F486BE05305991E0AD7F6</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="532539818123735"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F923A15C6CB639ABE0401F0A05994209</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F923A15C6CB639ABE0401F0A05994209</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F9239EBFEB60A148E0401F0A05993BD6</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F9239EBFEB60A148E0401F0A05993BD6</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F8F4D466D78EF2E1E0401F0A05991C52</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F8F4D466D78EF2E1E0401F0A05991C52</con:value>
        </con:property>
        <con:property>
          <con:name>skipAuthTokenStatusCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968943537</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C516BF562157CE05307991E0A1D33</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87396</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/0b771d0c-8318-4c76-8930-14afa7647dd1</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C44FB924E486BE05305991E0AD7F6</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C516BF561157CE05307991E0A1D33</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C44FB924E486BE05305991E0AD7F6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C516BF561157CE05307991E0A1D33</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>12e666d2-8ccd-4375-879e-3bd09e60bbce</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>17d5e8f7-bf2e-47a5-abff-bf75df69ecc4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>be52bb9b-3cf9-4949-9d94-36e08cbfb62f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03165 - STS GET - DeviceAuthToken JoinCode - FORBIDDEN - DeviceAuthCode has expired by 1 week" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6a4ee5ca-1da2-417c-b589-f1e170e013d3">
      <con:settings/>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="5f901796-5ddc-44a0-a375-ffa85dcacd10">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="6bfeee49-ce6a-4b3d-83c8-aa793a1d1e6a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="a47d0fc6-cafa-4c87-a65c-503ad692f5af"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="f61e3fbd-e14e-4ed8-8a94-82c30f084424"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="3e1d126a-d347-4152-802f-b6ed2a1ff4af">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="efeaaeb2-2ac4-48e8-a7a5-8275fe8705e2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="311bfc4a-02d9-45c4-917a-dc4656a5f2c6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="4e8c0063-017f-49ba-bf90-cbd547d3dcff"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="c6f6ebba-81d5-4784-85da-b9d8ac8ff892">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="8dd8b5c2-5ad5-4524-9d06-5ea3a102b66d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="291144a5-6394-4c0c-a6f4-efefffe06bb0">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="59e3b3e9-4a8a-4365-8589-07ba65251697">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Update DeviceCode's DEVICE_AUTH_TOKEN.EXPIRATION_DATE" id="57518336-e481-4dec-a459-1ea57b918fea">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
	assert dbUtils.deviceAuthSetExpire(tC.getPropertyValue("rauthToken"),-10080) == 1;
}
catch (Throwable e) {
	log.info "Error in dbUtils.deviceAuthSetStatus - $e";
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="47472469-3a5d-4a74-9f9a-3d968266dd94">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C402AACD9482DE05305991E0AF9D9</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="532539818123735"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F923A2E92E4F5347E0401F0A05992FF7</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F923A2E92E4F5347E0401F0A05992FF7</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F923A024E564DE58E0401F0A05994205</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F923A024E564DE58E0401F0A05994205</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F8F12D3258D9D98EE0401F0A07991D37</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F8F12D3258D9D98EE0401F0A07991D37</con:value>
        </con:property>
        <con:property>
          <con:name>skipAuthTokenStatusCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968947401</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C47BD05D2484DE05305991E0A45D9</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87397</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/4e91d6f9-cebc-4e68-a9ea-b5a370358dca</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C402AACD8482DE05305991E0AF9D9</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C47BD05D1484DE05305991E0A45D9</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C402AACD8482DE05305991E0AF9D9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C47BD05D1484DE05305991E0A45D9</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>119ff9b7-3813-408e-9786-02682f5a6634</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57518336-e481-4dec-a459-1ea57b918fea</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c6f6ebba-81d5-4784-85da-b9d8ac8ff892</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03166 - STS GET - DeviceAuthToken JoinCode - FORBIDDEN - DeviceAuthCode has expired by 1 day" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="5a484304-ab23-4ea2-ba45-746a15d7c1e7">
      <con:settings/>
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="1b745dff-e1f4-4bd4-9619-60ee8cf59783">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="6e72a2c4-48e3-4827-b3ca-c77bd3ac85b9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="1086254f-b17f-4901-89ee-e8c750ddfdf7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="fe7b058f-e7aa-4d6e-bbb4-168c07611f0f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="a095a4f3-194c-4d69-a22e-d71eb7d07d85">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="dbd60b25-9caa-470c-9530-f011ccbc7fa8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="4cbff425-3477-4578-9683-dd98d66900ec"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="5823c80b-8080-49a4-b80c-e2ef972417c4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="bcd1ec16-1a53-4412-9c18-d59c377adae6">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="f7402e93-f830-4bcb-9d43-15a38243d95d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="f989d66d-0cf2-4c1d-9647-5d8a298bf8c8">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="ac6fd315-c9f8-4d4c-97d7-86a6680767b8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Update DeviceCode's DEVICE_AUTH_TOKEN.EXPIRATION_DATE" id="f27af903-eacb-48ac-8ac6-d22b390ed510">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
	assert dbUtils.deviceAuthSetExpire(tC.getPropertyValue("rauthToken"),-1440) == 1;
}
catch (Throwable e) {
	log.info "Error in dbUtils.deviceAuthSetStatus - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="6d89045a-8c11-434d-9f0c-e3260a4d44da">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C40305F924833E05305991E0A0CF0</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="532539818123735"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F8F4D458C8FAA60DE0401F0A07993D02</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F8F4D458C8FAA60DE0401F0A07993D02</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F9239F7542976E7FE0401F0A05993BDA</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F9239F7542976E7FE0401F0A05993BDA</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F9239EC254FC3ADAE0401F0A05993BD8</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F9239EC254FC3ADAE0401F0A05993BD8</con:value>
        </con:property>
        <con:property>
          <con:name>skipAuthTokenStatusCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968951211</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C467425934845E05305991E0AA9BC</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87398</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/10af675a-f24b-465c-b4e8-b44bf5dcc0b1</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C40305F914833E05305991E0A0CF0</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C467425924845E05305991E0AA9BC</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C40305F914833E05305991E0A0CF0</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C467425924845E05305991E0AA9BC</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>bbf52c77-4ad8-4a63-acb0-2c87b0d47f51</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f27af903-eacb-48ac-8ac6-d22b390ed510</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bcd1ec16-1a53-4412-9c18-d59c377adae6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03167 - STS GET - DeviceAuthToken JoinCode - FORBIDDEN - DeviceAuthCode has expired by 1 hour" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="49db281c-f0d8-4511-8f42-e5bca063e72b">
      <con:settings/>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="29f1d201-fa1e-42c0-917c-c553de7e47ad">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="571ab974-1be6-429d-81ae-49de6ab00707"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="96006d4e-89dd-42e1-9ca8-090133474d00"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="6c3129d7-6ca6-4c46-a1c0-e1be81781ab2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="efd9c3fc-0c28-4a05-a935-7a416951773f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="9008c968-5522-41db-b55a-571ec03361c3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="87bec3b4-bab9-4e5f-abdc-e7c29b691e09"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="35f96dbe-6eb6-4e5a-8344-72a060e7f529"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="79e012a3-9cc3-45b0-abf8-f55a755edf60">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="58a64a7e-e527-41a9-87e1-40db2f3dcf58">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="8ec2cbc1-37ce-43c8-af17-91603c637ad5">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="698cf041-c20a-4bb2-82c0-d9d2fba40490">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Update DeviceCode's DEVICE_AUTH_TOKEN.EXPIRATION_DATE" id="faca18a5-48ef-4d2b-8862-b3900966d42b">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
	assert dbUtils.deviceAuthSetExpire(tC.getPropertyValue("rauthToken"),-60) == 1;
}
catch (Throwable e) {
	log.info "Error in dbUtils.deviceAuthSetStatus - $e";
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="a0d52915-b314-47c5-bac8-922ff3d3c1cc">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C5268D7EF156FE05307991E0A9A32</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="532539818123735"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F8F12CDCE8318AEFE0401F0A05995484</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F8F12CDCE8318AEFE0401F0A05995484</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F923A024E579DE58E0401F0A05994205</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F923A024E579DE58E0401F0A05994205</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F8F12CDCE8478AEFE0401F0A05995484</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F8F12CDCE8478AEFE0401F0A05995484</con:value>
        </con:property>
        <con:property>
          <con:name>skipAuthTokenStatusCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968955504</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA326C58001A6E05305991E0AC2FF</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87399</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/996680b8-3ed3-4b52-a33d-9b0fad037333</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C5268D7EE156FE05307991E0A9A32</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025CA326C57F01A6E05305991E0AC2FF</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C5268D7EE156FE05307991E0A9A32</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025CA326C57F01A6E05305991E0AC2FF</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>5b175535-dfc9-4086-a8fe-1c0a1b693c54</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>faca18a5-48ef-4d2b-8862-b3900966d42b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>79e012a3-9cc3-45b0-abf8-f55a755edf60</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    
    
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03168 - STS GET - DeviceAuthToken JoinCode - FORBIDDEN - DeviceAuthCode has expired by 5 minutes" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="e6523aae-e12f-412a-a9bf-1be30b8aead3">
      <con:settings/>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="6a3a112f-5b02-4e9c-af2b-f9e5fbd171ac">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="7f5dbbef-1133-4f08-bd61-ae7f43cfff3e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="d4302d10-c91d-44a7-b1b9-98a4828884d7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="4e91dbcc-b023-48dc-8466-ba6c807cdc06"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="e80131a0-0a44-47ec-8c13-df9405163bd4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="901283c2-ef88-4ecd-b73a-712a23da9bd8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="827f3b17-f95f-4b79-b294-671206c35160"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="d6f988b3-f226-4133-b818-1069507bd61e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="0835a40a-526e-466d-ad4d-75e298f30371">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="845d7f42-5674-4f70-a361-dfddc31f6e4b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="3cad833d-605f-463f-ab4f-afe83f71f0eb">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="e66e13b9-2ca5-4818-be2c-9c9ee487dd4c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Update DeviceCode's DEVICE_AUTH_TOKEN.EXPIRATION_DATE" id="a8a46f7c-e649-450b-ac1e-d56df069c44c">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
	assert dbUtils.deviceAuthSetExpire(tC.getPropertyValue("rauthToken"),-5) == 1;
}
catch (Throwable e) {
	log.info "Error in dbUtils.deviceAuthSetStatus - $e";
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="b4694f04-d117-4ab9-b289-b83a53dbc7e9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA6CC679601ACE05305991E0AE913</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="532539818123735"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F9239EC687D3A60FE0401F0A079950CB</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F9239EC687D3A60FE0401F0A079950CB</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F9239F10E22B9ED5E0401F0A07995904</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F9239F10E22B9ED5E0401F0A07995904</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F8F4D4C2BE42567EE0401F0A05991C4A</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F8F4D4C2BE42567EE0401F0A05991C4A</con:value>
        </con:property>
        <con:property>
          <con:name>skipAuthTokenStatusCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968959176</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C467425A64845E05305991E0AA9BC</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87400</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_51729295-b5c6-4708-9a57-6d47479ede6b</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025CA6CC679501ACE05305991E0AE913</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C467425A54845E05305991E0AA9BC</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025CA6CC679501ACE05305991E0AE913</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C467425A54845E05305991E0AA9BC</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>7a3b393b-6fc3-4a70-8670-86525ce4011e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a8a46f7c-e649-450b-ac1e-d56df069c44c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0835a40a-526e-466d-ad4d-75e298f30371</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03169 - STS GET - DeviceAuthToken JoinCode - FORBIDDEN - DeviceAuthCode has DEVICE_AUTH_TOKEN.STATUS of deleted" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="1b215d0f-8ead-49dc-b179-806e48b53a12">
      <con:settings/>
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="8996e32a-484f-45ff-b2ad-a48eeef582cd">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="b6e31f68-6b11-4199-8438-754ab85853b7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="d5b216c3-f505-4d93-8cb5-dd070d07222f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="0ff0e275-68ce-44fa-aac4-acf81abe6b5a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="9988752d-9bc8-4d99-b81b-cb6bdda18732">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="4f5cc057-aae8-4c28-966d-3c6a822e1a47">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="42d906ee-998c-4258-981a-249f493f5615"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="cfc23e28-88c6-47a3-9419-e6bbf7142c2d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="2de77c36-4194-4ddf-89a4-53902db5f1ea">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="7fbe4535-af15-4b06-9c73-c425e068e830">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="46bfd439-ab41-4482-9b33-1defc535ab41">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="e1ff99a7-0fc2-4998-95d0-445396999fb9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Update DeviceCode's DEVICE_AUTH_TOKEN.STATUS" id="1263e479-87a2-440f-8c2d-bdd5c0a4e198">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
	assert dbUtils.deviceAuthSetStatus(tC.getPropertyValue("rauthToken"),"deleted") == 1;
}
catch (Throwable e) {
	log.info "Error in dbUtils.deviceAuthSetStatus - $e";
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="90652ccf-bec1-4f85-8f6b-9892048a9ac1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968963313</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C40657C2F483FE05305991E0A32A4</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C43FB22694871E05305991E0AD1D0</con:value>
        </con:property>
        <con:property>
          <con:name>skipAuthTokenStatusCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F9239EC687DDA60FE0401F0A079950CB</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F9239EC687DDA60FE0401F0A079950CB</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F9239F755C5261A1E0401F0A079950CD</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F9239F755C5261A1E0401F0A079950CD</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F8F12CE21F6EAD0BE0401F0A05995492</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F8F12CE21F6EAD0BE0401F0A05995492</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>stsIgnoreAssertTimesFlag</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87401</con:value>
        </con:property>
        <con:property>
          <con:name>actionIgnoreAuthTokenStatus</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_7800e1fa-dbb5-4afa-8d90-94656319a1c6</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C40657C2E483FE05305991E0A32A4</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C43FB22684871E05305991E0AD1D0</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C40657C2E483FE05305991E0A32A4</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C43FB22684871E05305991E0AD1D0</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>eb1934fc-2a79-4ca8-bf15-b7262ebe5897</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1263e479-87a2-440f-8c2d-bdd5c0a4e198</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2de77c36-4194-4ddf-89a4-53902db5f1ea</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03170 - STS GET - DeviceAuthToken DeviceString - FORBIDDEN - Same Account Full user created token not consumable by Standard user" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="95f056c4-5c5c-41e2-8d15-327c01f8ada0">
      <con:settings/>
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="bfff338a-d25b-4d8f-9ae5-893f2c31422c">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="8c48c29f-2f33-4726-874b-b64d56d410f5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="6f8455aa-46a7-41a4-808a-fffd8b770370"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="50c9c7c8-a18c-402f-9f88-651b72e71a2b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="16e02181-ac65-4b49-801d-90a81813f21f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="4010d6ea-df7c-46f5-9eaf-363532bff988">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="d79bcdc5-0b65-4adc-b934-6e0b7a9b7046"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="aca84477-702b-4948-8a5f-cdff1f86bd91"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="75ac7505-2679-4bce-8804-6220273bbb62"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="960316f0-ce8d-4ee4-93ae-b2be082d987b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Standard UserCreate" id="481ab167-cbc9-4ae5-b954-bed52e152140"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="42090b27-f8f8-4182-9453-0aae0591c512"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="11573361-f4ae-4629-a1fd-b49b32c7acca">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="d122e972-25d2-4144-8b1f-9a921ea58c97">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="64342cef-bb6c-4dd3-b377-5b435436b43b">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login by full user" id="1ccad69e-c385-4209-8fdc-6ce6bc3bec2a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set nodeId as nodeIdRTL" id="f8345cc5-a509-434c-a663-601a255cd89e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="00a1c792-84cf-4688-aa0e-048b4a800a68"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype usernamepassword" id="982de4ad-c2a7-408e-b6a0-d94296e22edf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator for blocked:tou Standard user" id="62b5d041-1e7b-4f23-ba76-c53f19bac15e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator for blocked:tou Standard user" id="b8aa2c47-5947-44fd-a8cd-51875afc0cd6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU for Standard User" id="cea787a0-d4a1-43eb-b970-78020faf7621"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeID as nodeIdDEV" id="655a8542-eb6a-4729-a462-9303e886371f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken for STS Get" id="d9ecc3fa-ef01-4463-8745-383ae3dbc5c3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Get by standard user" id="090d443b-b063-4ee4-a9d1-684a00452048">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968967334</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C44FB925C486BE05305991E0AD7F6</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C5268D7FB156FE05307991E0A9A32</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F923A2E628C75520E0401F0A05992FF1</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F923A2E628C75520E0401F0A05992FF1</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F8F12CDCE84D8AEFE0401F0A05995484</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F8F12CDCE84D8AEFE0401F0A05995484</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F8F4D466D79AF2E1E0401F0A05991C52</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F8F4D466D79AF2E1E0401F0A05991C52</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87406</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_eb02b043-7fc4-410c-b4bd-dad8baec14c1</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C44FB925B486BE05305991E0AD7F6</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C5268D7FA156FE05307991E0A9A32</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>deviceDeviceString</con:name><con:value>Mfx5rZhs1l3xHP0yKwVrHGtCkNb</con:value></con:property><con:property><con:name>deviceDeviceString_1</con:name><con:value>Mfx5rZhs1l3xHP0yKwVrHGtCkNb</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C44FB925B486BE05305991E0AD7F6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C5268D7FA156FE05307991E0A9A32</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>69fd9930-b6e7-43e9-a42b-38ed81916679</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>efeb4815-9bb4-4fe4-8cde-4b7a700120be</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>959e8131-7938-475b-88df-2ed1d5a5ac73</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b83e17f5-fb23-4d87-b6ef-3c2e17fd0f31</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b35a6ba6-c969-4e53-a515-5c5e76c02ff9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>11e7c208-ed77-4c3e-91cb-d700f31801c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2934a685-5b25-43bf-92ff-1dbc4ec7d507</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d912d6a-7f8e-4df6-bd6a-43b6db73d226</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2958417d-69b2-412b-9b12-91294ee3cce8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b2e8a81d-aad8-4a63-bedb-931e2f0fd9aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ec65231a-2cba-49a9-b1b9-a21196c6e685</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e221dc15-1b7e-401d-ab73-1722256ec0ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>11573361-f4ae-4629-a1fd-b49b32c7acca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03171 - STS GET - DeviceAuthToken DeviceString - FORBIDDEN - Same Account Full user created token not consumable by Basic user" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7279fe38-7cb5-4187-ab27-181252ed75c9">
      <con:settings/>
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="c41d2190-3ad2-44b5-b78a-d07d97419f01">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="b29de0e6-4beb-4ee0-91bb-e4c835ed26ba"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="c683b3ef-bb5d-4cea-94d4-09b70c5f1db7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="d904ebe7-dcbd-402a-946c-ed1404c2c1ff"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="844db841-c71d-4708-a0c7-ddaea731983f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="65433d6b-e243-4310-b8a9-4f81e8f37c3c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="57e830a7-27c9-4859-8d0d-097b90478e40"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="efeb4815-9bb4-4fe4-8cde-4b7a700120be"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="959e8131-7938-475b-88df-2ed1d5a5ac73"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="b83e17f5-fb23-4d87-b6ef-3c2e17fd0f31"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Basic UserCreate" id="b35a6ba6-c969-4e53-a515-5c5e76c02ff9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("BasicUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="0ac0ba48-600d-4ec2-b7b7-208e00d1e2bf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="f25cc549-57ef-4aba-9fe2-98b248527df2">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="96057335-9dde-4bcd-9e99-1bc440887a9d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="b3f91ee7-539a-4877-9859-0aab7be11a31">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="83871e4a-235f-4209-a23c-25f21321abe8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set nodeId as nodeIdRTL" id="ec65231a-2cba-49a9-b1b9-a21196c6e685"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype usernamepassword" id="cdb29663-54c1-4ea2-b96a-27cb4d577a56"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="11e7c208-ed77-4c3e-91cb-d700f31801c0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator for blocked:tou basic user" id="2934a685-5b25-43bf-92ff-1dbc4ec7d507">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator for blocked:tou basic user" id="0d912d6a-7f8e-4df6-bd6a-43b6db73d226">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU for Basic User" id="2958417d-69b2-412b-9b12-91294ee3cce8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeID as nodeIdDEV" id="b2e8a81d-aad8-4a63-bedb-931e2f0fd9aa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken for STS Get" id="e221dc15-1b7e-401d-ab73-1722256ec0ec"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Get" id="620f3c27-b425-4f93-a8dd-8d69e926a0ee">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968971577</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4184DE080A6EE05307991E0AF895</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C50F94B231567E05307991E0A6AC9</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F8F4D466D7A7F2E1E0401F0A05991C52</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F8F4D466D7A7F2E1E0401F0A05991C52</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F9239EBE52A750D1E0401F0A079950C7</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F9239EBE52A750D1E0401F0A079950C7</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F8F12CD6FF556A81E0401F0A05995498</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F8F12CD6FF556A81E0401F0A05995498</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87406</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_eb02b043-7fc4-410c-b4bd-dad8baec14c1</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C4184DE070A6EE05307991E0AF895</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C50F94B221567E05307991E0A6AC9</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>deviceDeviceString</con:name><con:value>kgmScUfqlJAZLzJ3UOgl1O7sJMO</con:value></con:property><con:property><con:name>deviceDeviceString_1</con:name><con:value>kgmScUfqlJAZLzJ3UOgl1O7sJMO</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C4184DE070A6EE05307991E0AF895</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C50F94B221567E05307991E0A6AC9</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>69fd9930-b6e7-43e9-a42b-38ed81916679</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>efeb4815-9bb4-4fe4-8cde-4b7a700120be</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>959e8131-7938-475b-88df-2ed1d5a5ac73</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b83e17f5-fb23-4d87-b6ef-3c2e17fd0f31</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b35a6ba6-c969-4e53-a515-5c5e76c02ff9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>11e7c208-ed77-4c3e-91cb-d700f31801c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2934a685-5b25-43bf-92ff-1dbc4ec7d507</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d912d6a-7f8e-4df6-bd6a-43b6db73d226</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2958417d-69b2-412b-9b12-91294ee3cce8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b7a03934-7190-4d8b-8908-159c93cb4a4d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0893722e-b6b1-4237-b7b7-13fe1abc3e4a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b2e8a81d-aad8-4a63-bedb-931e2f0fd9aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ec65231a-2cba-49a9-b1b9-a21196c6e685</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e221dc15-1b7e-401d-ab73-1722256ec0ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d265e877-a5a4-4c52-b3e0-6d331f7baa3b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f25cc549-57ef-4aba-9fe2-98b248527df2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03172 - STS GET - DeviceAuthToken DeviceString - FORBIDDEN - ACCOUNT.USER status of 'deleted' POST DeviceAuthToken create" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="4331cd51-3970-477b-975f-f6316940aa67">
      <con:settings/>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="0f6fddc8-7b18-4e51-be8c-682587de50d5">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Call Account Create" id="f4750f58-d40b-4281-86d2-f1d1dc5af4e7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="91b3f9ca-3812-4f32-8bfb-26b662cfd34e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="c6814e8d-29cc-428c-93d7-517fca337a33"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="b7208456-e50e-4afe-a684-9fd4269a8601">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="ab5fc772-ce69-4ae6-8cca-afb0afcc184d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="cfb6aaa4-c6f2-4830-a109-0b23f484ce4d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="e213e9b8-99aa-4588-b99b-4511ac146fc1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="88c70f17-1e6e-46fa-a6a6-7664a94d1c49">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="c0a6c5a3-9a20-4346-8897-e435a00f58b8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="d5b5dec5-f08b-43e7-9744-b0e11f1250d3">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="0567b871-0cf6-4072-801b-f9a9cd0267bb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == deleted" id="d265e877-a5a4-4c52-b3e0-6d331f7baa3b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );

assert a.userSetStatusDeleted(useroid) == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="87c5cebd-bd25-4720-9a22-8c4db6bb7f2e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4196DBA24855E05305991E0AC577</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="george"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F9239F872A83EDCCE0401F0A079950C5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F9239F872A83EDCCE0401F0A079950C5</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F923A15C6CCB39ABE0401F0A05994209</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F923A15C6CCB39ABE0401F0A05994209</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthString</con:name>
          <con:value>841321476135740</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>nodeSavedRole</con:name>
          <con:value>urn:dece:role:device</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F8F12CDFB41B52A3E0401F0A07991D20</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F8F12CDFB41B52A3E0401F0A07991D20</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:DeviceAuthToken</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409968975703</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C516C25AE1580E05307991E0A6E5B</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">87648</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value>george</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_1</con:name>
          <con:value>george</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>FORBIDDEN:1119</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsSkipLastLoginCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C4196DBA14855E05305991E0AC577</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C516C25AD1580E05307991E0A6E5B</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C4196DBA14855E05305991E0AC577</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C516C25AD1580E05307991E0A6E5B</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>93b83f16-1d2c-4488-9df9-daa1a9413083</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>94db2944-e028-4ccd-b890-9e237831e5ed</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88c70f17-1e6e-46fa-a6a6-7664a94d1c49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    
    
    
    
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03178 - STS GET - DeviceAuthToken DeviceString - ACCOUNT.USER status of 'blocked:tou' POST DeviceAuthToken create" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="58a48bb4-18ef-42e6-8bda-35f60fe6bdaa">
      <con:settings/>
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="ef4d3fbb-df15-45f2-b806-e1b9bcf84b60">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="8a6e4d54-3b1f-4367-94c0-4d12edc1437a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="e09ed121-9ded-4f34-85c7-032ac77b117e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="de81aafe-f4b8-4fb4-bbf7-e9dff0ab0be3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="46d8cec4-1ad6-49c9-b841-ebadea538c6f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="787b3b2c-7281-4986-bc4c-316d9b233502">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="71da1ca4-3d86-4e78-8423-c037d9112c4b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="6b6009d2-1faf-46fd-85fc-ca046bd34878"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="cd8d7773-fa11-4938-a769-9a5e2772c7ee">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="f28a8041-a0e9-461e-b00c-c4f674e67faf">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="afcb489e-2bc8-4ced-bacc-d110f00d63c5">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="89773d14-7369-4f38-8f95-0c204e5d051d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == blocked:tou" id="20dd691e-e85d-4fef-a3c3-45b007af229a">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );
assert a.userSetStatus(useroid,"blocked:tou") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="c87650a6-be69-45b5-afd1-6d5285372385">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C44F3B1DB4873E05305991E0AACB0</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="george"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F9239F10E2629ED5E0401F0A07995904</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F9239F10E2629ED5E0401F0A07995904</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F8F12CDCE8698AEFE0401F0A05995484</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F8F12CDCE8698AEFE0401F0A05995484</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthString</con:name>
          <con:value>841321476135740</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>nodeSavedRole</con:name>
          <con:value>urn:dece:role:device</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F923A2E97C3220E9E0401F0A05992FF9</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F923A2E97C3220E9E0401F0A05992FF9</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:DeviceAuthToken</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969060492</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4066A8CF484FE05305991E0ACBAC</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">87648</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value>george</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_1</con:name>
          <con:value>george</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>stsSkipLastLoginCheck</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_f6b626fc-f403-4d4a-bb8a-30f9435b0c34</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C44F3B1DA4873E05305991E0AACB0</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C4066A8CE484FE05305991E0ACBAC</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C44F3B1DA4873E05305991E0AACB0</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C4066A8CE484FE05305991E0ACBAC</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>01e72614-a9bf-497b-b4da-d30b7077f2cd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cd8d7773-fa11-4938-a769-9a5e2772c7ee</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    
    
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03181 - STS GET - DeviceAuthToken DeviceString - FORBIDDEN - ACCOUNT.USER status of 'merge deleted' POST DeviceAuthToken create" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="be883953-f49a-4eb0-89a7-38ceb2d7f39b">
      <con:settings/>
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="3301e1ba-2e64-4e5c-8272-70b445b09ab9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="c30170e3-4f47-413a-b786-66f17b4d3418"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="23d7f51e-f912-4ce7-8aa5-8da70351592c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="e4794442-e0b5-4f8d-9376-b972fe990704"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="0821437a-d8d0-4ec6-8945-b0202995ce98">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="a8817ca1-1b24-42fc-a1f2-2a361c16c867">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="2fce1eac-7872-4c4b-8813-54ce05430d4f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="b57e5de1-4596-43c7-8d25-590fc59dfccf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="08041758-48de-4470-b07c-f0f065c47120">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="ff97bb0d-4136-4b2e-b3a1-781eb9da1310">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="9b211694-09f8-44d1-bb4e-dbd91de611a0">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="02620ed8-6894-4abd-a017-212c89fd7f07">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == mergedeleted" id="25a99f85-7fea-4375-bf3a-b1c0ecf4a3b4">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );
assert a.userSetStatus(useroid,"mergedeleted") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="34d1bf3f-c6fe-41ed-a1bf-cfe1f25d22e0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C412002200A2DE05307991E0ACC6F</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authHeaderString</con:name>
          <con:value>DeviceCode value="george"</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F8F12CE21F8FAD0BE0401F0A05995492</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F8F12CE21F8FAD0BE0401F0A05995492</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F9239EBFEB97A148E0401F0A05993BD6</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F9239EBFEB97A148E0401F0A05993BD6</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthString</con:name>
          <con:value>841321476135740</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>nodeSavedRole</con:name>
          <con:value>urn:dece:role:device</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F9239EC2551D3ADAE0401F0A05993BD8</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F9239EC2551D3ADAE0401F0A05993BD8</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:DeviceAuthToken</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969097330</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C402EFE83482FE05305991E0AABC7</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">87648</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value>george</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_1</con:name>
          <con:value>george</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>FORBIDDEN:1119</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
      <con:property><con:name>stsSkipLastLoginCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_bb5887f8-b16b-45f9-ac81-6691813d2fbe</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C4120021F0A2DE05307991E0ACC6F</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C402EFE82482FE05305991E0AABC7</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C4120021F0A2DE05307991E0ACC6F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C402EFE82482FE05305991E0AABC7</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>00a1c792-84cf-4688-aa0e-048b4a800a68</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>62b5d041-1e7b-4f23-ba76-c53f19bac15e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>481ab167-cbc9-4ae5-b954-bed52e152140</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b8aa2c47-5947-44fd-a8cd-51875afc0cd6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cea787a0-d4a1-43eb-b970-78020faf7621</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f8345cc5-a509-434c-a663-601a255cd89e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>df9d67c5-9d20-4f72-9f2d-15ed5e7876f0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08041758-48de-4470-b07c-f0f065c47120</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03182 - STS GET - DeviceAuthToken JoinCode - FORBIDDEN - Account in 'deleted' status POST DeviceAuthToken create" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="1df53689-694f-4d33-808c-aef4f4604429">
      <con:settings/>
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="6482122f-a0dc-4eb9-806c-4f1461b98bac">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="b6878e30-51c7-4d2b-8b6e-dcf4e94dcebe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="259d0486-2dfd-44b4-96af-dbf39706073b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="1c8e239e-bfcf-4f96-b31d-ed14eb5a988f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="d08ffe20-8574-4b8d-9d6e-3f14f1731c5e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="f8253bc5-b427-4f2f-9fa4-c7b37c794ef1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="18900e45-65d2-4c23-b3d6-6420fc088f20"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="9b115589-997d-4dbf-9c6d-7dd8eaa0196e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="2535f124-cd8a-499c-abbe-2344ee2ce281">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="cf9529b8-efea-49c2-82b9-417f0828cbef">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="852726fb-6185-4456-88d9-2e9aba6f4e4e">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="b8d54106-4447-41db-a0f2-03921f9304bd">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT.STATUS == deleted" id="c1a2eae2-a468-4dcb-a151-209d55d753b8">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acctoid = tC.getPropertyValue("accountoid");

try {
	a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	assert a.accountSetStatus(acctoid,"deleted") == 1;
}
catch(Throwable e) {
	log.info "Error - dbUtils.dbAccount - $e";
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="35fe8213-a659-46f3-a492-3e5c40cc644b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA14522AF019EE05305991E0AA6E0</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>API_NOT_AUTHORIZED</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:DeviceAuthToken</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969108987</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C411FE6180A29E05307991E0AAE6D</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>87648</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>FORBIDDEN:1119</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F8F12D32592CD98EE0401F0A07991D37</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F8F12D32592CD98EE0401F0A07991D37</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F9239EEAD11C2F25E0401F0A079957F1</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F9239EEAD11C2F25E0401F0A079957F1</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F8F12CDFB43452A3E0401F0A07991D20</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F8F12CDFB43452A3E0401F0A07991D20</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsSkipLastLoginCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025CA14522AE019EE05305991E0AA6E0</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C411FE6170A29E05307991E0AAE6D</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025CA14522AE019EE05305991E0AA6E0</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C411FE6170A29E05307991E0AAE6D</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>d4b03025-0e8f-4127-a9aa-ae27b2af1104</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c1a2eae2-a468-4dcb-a151-209d55d753b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2535f124-cd8a-499c-abbe-2344ee2ce281</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    
    
    
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03189 - STS GET - DeviceAuthToken JoinCode - FORBIDDEN - Account in 'mergedeleted' status POST DeviceAuthToken create" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="af76674f-a002-4f40-90cc-fc4f3586fef1">
      <con:settings/>
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="a9e02430-0265-42a4-866b-12b8d63c87af">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="36020e1e-26c9-4749-8c67-6483a6d376f6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="8ebfd2be-0cf5-4753-8373-99288c6cf78e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="11d75413-6d62-4379-b257-79220a7ad319"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="59324cae-a002-4ece-90aa-7f568b106b5d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="b7731111-795b-4265-a8a1-2aa69ae24b5d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="088bc7e4-7f8a-4018-84b8-bb27a5d34b3f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="f9d48dd4-4177-4d91-8327-e13f2f403447"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="cefec23a-d161-48f3-b3b5-74e980617fb0">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="63b2620e-1b46-4a94-8402-9f6fbffcea87">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="53b80437-af11-4f40-b246-0cdd0c61ece4">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="bc1e0e18-27ae-4ad6-8514-0504eb46ab90">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT.STATUS == mergedeleted" id="c924a034-527a-40a9-ac07-bfee88833029">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acctoid = tC.getPropertyValue("accountoid");

try {
	a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	assert a.accountSetStatus(acctoid,"mergedeleted") == 1;
}
catch(Throwable e) {
	log.info "Error - dbUtils.dbAccount - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="1fbedd5c-613e-4fc2-a0ad-1d7f0b9208f5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C44FB9297486BE05305991E0AD7F6</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>API_NOT_AUTHORIZED</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:DeviceAuthToken</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969196233</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4230718A483BE05305991E0AC02F</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>87648</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthTokenRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>FORBIDDEN:1119</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F9239F7542D16E7FE0401F0A05993BDA</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F9239F7542D16E7FE0401F0A05993BDA</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F8F4D4C2BE74567EE0401F0A05991C4A</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F8F4D4C2BE74567EE0401F0A05991C4A</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F9239F0C87BE6819E0401F0A059941FF</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F9239F0C87BE6819E0401F0A059941FF</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsSkipLastLoginCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C44FB9296486BE05305991E0AD7F6</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C42307189483BE05305991E0AC02F</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C44FB9296486BE05305991E0AD7F6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C42307189483BE05305991E0AC02F</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>cefec23a-d161-48f3-b3b5-74e980617fb0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03190 - STS GET - DeviceAuthToken DeviceString - FORBIDDEN - Cannot fetch same DeviceAuthToken twice" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="90508a62-0383-490c-9714-ce0f1f542316">
      <con:settings/>
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="475e8290-5db2-4bad-bd4d-7c191eae4c33">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="2a6ed377-0c6c-4848-a158-2f888178d36c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call First User Create" id="b6b83546-dc1b-428c-a145-d2fe21341bcf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="f7cdbae0-3736-437e-90dc-66983940e06a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="903a9c8c-00de-4808-a29d-ecaf342a4029">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="637562c3-dbb0-4abd-81fd-72664b15e53c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="6fe4e49d-fd40-487f-97cc-9e9eb6d0f64b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="c56ed650-4f9b-421e-9609-ad6aa2f43e75"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="ff970e4d-edca-4c39-bd03-d68390707976">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="412e4d09-a98c-415c-a715-512395524a24">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="c75a39e1-05d9-4fc1-9e6d-df34e8a68ad8">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="63d86c05-68b6-461e-ac61-4ed413ccda0a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="966890da-7939-4c73-a885-f495493e5f77">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Loop again if necessary" id="f0fd46dc-049d-4c88-85e6-43d5616cf3e8">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");
	tC.setPropertyValue("actionIgnoreAuthTokenStatus","true");
	testRunner.gotoStepByName("-- STS Get");
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969209185</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C405F95724859E05305991E0A9CAC</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C405F58A74853E05305991E0AD198</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value>1A234567890</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F8F12CD6FF7B6A81E0401F0A05995498</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F8F12CD6FF7B6A81E0401F0A05995498</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F923A2E6DCE78153E0401F0A05992FF3</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F923A2E6DCE78153E0401F0A05992FF3</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F923A15C6D0739ABE0401F0A05994209</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F923A15C6D0739ABE0401F0A05994209</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_1</con:name>
          <con:value>1A234567890</con:value>
        </con:property>
        <con:property>
          <con:name>actionIgnoreAuthTokenStatus</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87424</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsSkipLastLoginCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C405F95714859E05305991E0A9CAC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C405F58A64853E05305991E0AD198</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C405F95714859E05305991E0A9CAC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C405F58A64853E05305991E0AD198</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>25a99f85-7fea-4375-bf3a-b1c0ecf4a3b4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ff970e4d-edca-4c39-bd03-d68390707976</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03191 - STS GET - DeviceAuthToken JoinCode - FORBIDDEN - Cannot fetch same DeviceAuthToken twice" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="06809365-36d0-439f-8d6e-35cda3f51634">
      <con:settings/>
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="ae6e83f4-1ff7-405a-992d-e491b5a9a6e1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="20bd2f40-d6cc-4aa6-9e8f-b4a84647a4ce"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="d6a185cd-a318-492c-89b5-ff1dc6b9a8ff"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="92ae4bfa-628e-452c-be13-1a06ed567ab0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="7fb469d5-3fe5-4c07-bb66-beb5125272af">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="16dd46cf-0ffb-475f-a035-b1f00e0b1a5d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="d1ba76d5-eaed-4d3a-bb5a-fb49ffd23808"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="807b7c92-2b52-4bed-b624-7abaa7f32066"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="60e23355-f39a-418c-89a5-60aaf4871b4f">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="9f7d51a2-1273-4ad2-8f5c-37b70f2d97e8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="2629350c-9162-4547-9381-74c8cac23e79">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="fb789fd1-83ff-425e-bdac-7c094faeee42">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="a9311bf3-efa8-4327-afcb-3e18ac2e716e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Loop again if necessary" id="053118d5-1c14-4194-8097-6908b1b021ad">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");
	tC.setPropertyValue("actionIgnoreAuthTokenStatus","true");
	testRunner.gotoStepByName("-- STS Get");
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969213858</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>expiresMinutesDiff</con:name>
          <con:value>120</con:value>
        </con:property>
        <con:property>
          <con:name>deviceAuthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C40630C824829E05305991E0AA0FF</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C402EFE97482FE05305991E0AABC7</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value>1A234567890</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenStatus_1</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value>F923A071C7DEB56EE0401F0A059941FD</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value>F923A071C7DEB56EE0401F0A059941FD</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedBy_1</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser</con:name>
          <con:value>F9239F755CB961A1E0401F0A079950CD</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedUser_1</con:name>
          <con:value>F9239F755CB961A1E0401F0A079950CD</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount</con:name>
          <con:value>F923A024EFB62BBCE0401F0A05994207</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenCreatedAccount_1</con:name>
          <con:value>F923A024EFB62BBCE0401F0A05994207</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>authTokenisGen_1</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString_1</con:name>
          <con:value>1A234567890</con:value>
        </con:property>
        <con:property>
          <con:name>actionIgnoreAuthTokenStatus</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87425</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsSkipLastLoginCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C40630C814829E05305991E0AA0FF</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C402EFE96482FE05305991E0AABC7</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C40630C814829E05305991E0AA0FF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C402EFE96482FE05305991E0AABC7</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>60e23355-f39a-418c-89a5-60aaf4871b4f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties>
      <con:property>
        <con:name>QC_TestPlanDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestLabDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestSet</con:name>
        <con:value/>
      </con:property>
    </con:properties>
    <con:reportParameters/>
  </con:testSuite><con:testSuite name="5_STS Create Tokentype usernamepassword - Device Role - P2 - Test Cases" id="a0893e6e-1685-45b9-9c52-29086503cec0">
    <con:description/>
    <con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop/Reports New</con:setting></con:settings>
    <con:runType>SEQUENTIAL</con:runType>
    
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06029 - STS - Device - NULL supplied - &lt;Username> Empty tag set - P2" searchProperties="true" id="8f177d25-f3ae-4f5a-9292-5b5634c6b88c">
      <con:settings/>
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="26ab6f7d-4c27-4065-a46c-c91d91e993ab">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="865c7cf2-d08c-40c5-9dad-b7de9f8ab635"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="8fc42254-1450-441d-a907-aa60e5a90ffb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="7cd290d5-8a2d-4e5b-9781-0e739afc6157"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="17fbbe86-a592-484a-9984-af1034f13d83">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="2efaaa2f-0f36-4f38-84b8-ffdd735a8ebe">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="a9cf522a-4a41-49ee-94a9-cc62d500ef19"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="dc264e77-37f6-4af2-a24a-497b2bf65ebf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Username as null" id="1361b4d0-8f57-45dc-b6cc-b6d20197cdc2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username","");</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="5e049582-11ab-4099-90d8-c69c472b54db">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify no Node/User Level Assertion Data Exists" id="7489a458-a126-4dd5-a8ac-50f182261478">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Verify no Node/User Assertion Data Exists")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4120022D0A2DE05307991E0ACC6F</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969218181</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C411EF4F30A23E05307991E0AD1F7</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C4120022C0A2DE05307991E0ACC6F</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C411EF4F20A23E05307991E0AD1F7</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C4120022C0A2DE05307991E0ACC6F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C411EF4F20A23E05307991E0AD1F7</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>7489a458-a126-4dd5-a8ac-50f182261478</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06030 - STS - Device - NULL supplied - &lt;Username> Terminated tag - P2" searchProperties="true" id="e6e2360f-975c-4992-9445-684fea2c5935">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="a3366ae1-5944-480b-932b-1b36cf9af67d">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("stsRequestUserNameFlag",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="8479631d-6d5f-4d51-9ce5-20142246bf48"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="ef156eb8-127a-4a5a-9c75-70634c6ddca5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="5c61b1b9-909b-429b-8fcc-73feeda4c2f1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="c73af521-10cb-4752-bf24-148b2da44a68">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="e4d64475-2e29-40e8-bc6a-8e96b404bb42">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="89f4827a-3c19-47e9-bb13-bd9611f3b7e2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="897e0dd6-a5f8-45c7-83ef-457bad929423"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set stsRequestUserNameFlag" id="c88ba923-b095-419c-b471-2cdbdccbf2d6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("stsRequestUserNameFlag","stsRequestUserNameFlag");</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="ea31387d-c1fb-40de-98bf-2f5be2627d70">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify no Node/User Level Assertion Data Exists" id="f8ff87e0-9259-4b3c-b103-22106b94c36e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Verify no Node/User Assertion Data Exists")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C42329A5F0A1FE05307991E0ADD18</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969222684</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C41377A3C0A6AE05307991E0A119A</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>stsRequestUserNameFlag</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C42329A5E0A1FE05307991E0ADD18</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C41377A3B0A6AE05307991E0A119A</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C42329A5E0A1FE05307991E0ADD18</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C41377A3B0A6AE05307991E0A119A</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06031 - STS - Device - NULL supplied - &lt;Username> Tag not supplied - P2" searchProperties="true" id="a1795262-bb90-49b7-b0b5-6cb84cd90a86">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="43ecbc98-2698-4faf-99a3-97b2ff029db9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("stsRequestUserNameFlag",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="563cf0ae-d94a-4db0-a594-48100f9a259d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="7d42edaf-69b6-465e-af04-dcf35191dbf6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="e4904b6c-d33e-4756-b614-244edbfa56a0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="8650ab38-9e86-4337-959a-9487c947c342">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="8d860ca5-d08e-4715-ad7c-7f08f64eb52b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="b4b72047-93f5-4eed-a9a7-82b952d9d47b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="5647e8b5-60ad-4ea6-b9ad-5464bf0203bb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set stsRequestUserNameFlag" id="6e041437-b493-4a6c-a8e0-b6a04640bbce"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("stsRequestUserNameFlag","excluded");</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="f940486a-c20f-4d16-a9b3-4a8bb14cad6c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify no Node/User Level Assertion Data Exists" id="9bfbd039-f90b-4df3-9441-ac7653ac2b12">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Verify no Node/User Assertion Data Exists")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C520BD5C61571E05307991E0A1011</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969227307</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C516C0F19157EE05307991E0A05CC</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>stsRequestUserNameFlag</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C520BD5C51571E05307991E0A1011</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C516C0F18157EE05307991E0A05CC</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C520BD5C51571E05307991E0A1011</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C516C0F18157EE05307991E0A05CC</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06032 - STS - Device - NULL supplied - &lt;Password> Empty tag set - P2" searchProperties="true" id="2a7f8aba-01de-4200-bb29-958fb411f906">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="d8c5a590-0e44-405d-b40f-afad15918fc7">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="903066c2-5706-479c-8613-2c28f9ff8a86"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="16969cb1-5e76-48ce-a4de-06f5d599df15"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="4aa551c4-7057-418d-89ca-1fb6ed37e732"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="8937d797-60f1-4ef3-ba4e-d0d0ee5d7709">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="4e29e26f-2b4d-4d38-81cc-94a87d84c1fe">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="addb34b0-15d2-4903-ae86-c8331256008c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="05d82dd0-0e3b-4b2c-81ef-dbcda94cda33"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set password null" id="f731565c-a54a-4075-a640-12c740b2f766"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("UserPassword","");</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="ad0cd2e5-841f-4ddc-a534-28598a3fdde7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify no Node/User Level Assertion Data Exists" id="c19288d9-1fd7-440c-8f32-f50cf1114452">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Verify no Node/User Assertion Data Exists")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C44FB0FBF485FE05305991E0A4BE1</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        
        
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969231868</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA2F2AB7001B6E05305991E0AFECC</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C44FB0FBE485FE05305991E0A4BE1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025CA2F2AB6F01B6E05305991E0AFECC</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C44FB0FBE485FE05305991E0A4BE1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025CA2F2AB6F01B6E05305991E0AFECC</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06033 - STS - Device - NULL supplied - &lt;Password> Terminated tag - P2" searchProperties="true" id="4a9c3fdf-7b89-4e83-ad0f-98637184dd93">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="97cdf560-0a94-4693-872a-ac91232596da">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="a437e10c-d7b4-44cd-aabf-e68b8246ebd9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="c028e9b3-2e56-4576-87c5-7dc5d1dce350"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="a1b9a81e-dddd-4c43-8427-292fab5ec379"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="bee7fa87-4d93-4aca-bddb-0b5877b0d874">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="ceb34e2b-578e-4b7a-9cf2-029a17040e47">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="3ec1f9dc-3b0b-4f4a-b120-10f4267652a3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="8429848c-a660-40a5-9dd7-b0332362ace7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set stsAction" id="c69fa75b-53d9-4d36-ba88-7f948222c2b3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("stsAction","EMPTY_TAG");</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="2a62082d-2fb2-4c3c-8e1b-e7d9475f4525">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify no Node/User Level Assertion Data Exists" id="4334f335-4793-4171-b099-0943fd047d9e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Verify no Node/User Assertion Data Exists")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C42329A6B0A1FE05307991E0ADD18</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969235646</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C405FDB1B4861E05305991E0A5ECC</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>stsAction</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C42329A6A0A1FE05307991E0ADD18</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C405FDB1A4861E05305991E0A5ECC</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C42329A6A0A1FE05307991E0ADD18</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C405FDB1A4861E05305991E0A5ECC</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06034 - STS - Device - NULL supplied - &lt;Password> Tag not supplied - P2" searchProperties="true" id="5dfe162b-82ee-4b2d-ac7d-ed7d0751a800">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="460899eb-034b-4c4e-b508-5f470165a426">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="3ea8bed8-4263-41be-9468-3ab7200e6787"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="5323cbe7-02c8-47d9-bcaa-52a9521237f3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="a4bdc36c-8696-4ca8-9b51-6653356bdfe2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="e6bb5811-56c4-482d-a526-79cd8689df45">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="c1fdbdeb-8f61-4c80-a7c4-5c1af3195021">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="fa5cad49-aecc-44e0-bb2b-87897d18385d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="94bc7255-4aee-4010-9d8c-977026131b05"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set stsAction" id="e779cba8-9152-4550-ad28-df2f9fceda55"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("stsAction","PASSWD_EXCLUDE");</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="a2d457ed-0012-4b93-8e9b-df6e4f0e44c3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify no Node/User Level Assertion Data Exists" id="38ae7510-619c-4839-ab3a-a2d4f23294d2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Verify no Node/User Assertion Data Exists")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C406265814865E05305991E0A0CE1</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969240137</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C402EFEAA482FE05305991E0AABC7</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>stsAction</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C406265804865E05305991E0A0CE1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C402EFEA9482FE05305991E0AABC7</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C406265804865E05305991E0A0CE1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C402EFEA9482FE05305991E0AABC7</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06068 - STS - Device - FORBIDDEN - Verification of handling repetitive nonexistent values - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="88481f5e-eebc-4496-adac-db2f1f89e8fd">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="bb7ef051-2a21-4686-9508-25611cff927c">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopUntil","35");</script></con:config>
      </con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="01d520c4-e3ca-4023-98f5-a8cef8b7a98e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call First User Create" id="7e12d52d-17a7-4251-a616-5e5e778ea63d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="20c0e3c6-c27a-494d-9bf2-0012cf900521"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="8b9b413f-099c-4f51-8039-d9fb613468fb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="8a6904c2-ad19-4775-8dbb-ec83cce526dc">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="08301ffe-bf1b-4cea-8d30-6c5a61836b21"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="2bd689ef-3607-48a9-b5b7-ad57fc76a521"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Generate Dynamic username string" id="ef8c50c6-4837-462d-8412-c499a07213b1">
        <con:settings/>
        <con:config>
          <script>import java.util.Random;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def useroid = tC.getPropertyValue("useroid");
def usernameStr = tC.getPropertyValue("username");

Random rand = new Random();
a = new generalUtils.generalUtils(log);

int max = rand.nextInt(tP.getPropertyValue("maxUserName").toInteger() +1 );

if (max &lt; tP.getPropertyValue("minUserName")) {
	max = tP.getPropertyValue("minUserName").toInteger();
}

String randStr = a.randomAlphaNumericString(max);

tC.setPropertyValue("username", randStr);</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="d030d36d-c791-4af1-a1e8-b88fc4cfe752">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify no Node/User Level Assertion Data Exists" id="2770859e-8b1b-45fe-aeb4-67192885af13">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Verify no Node/User Assertion Data Exists")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Loop again if necessary" id="29333ef2-f2bc-4e13-9041-4da9872f4b49" disabled="true">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Generate Dynamic username string");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4184DE1A0A6EE05307991E0AF895</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>API_NOT_AUTHORIZED</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969244074</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4653827A0A05E05307991E0AD523</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>savedusername</con:name>
          <con:value>pjgstsFull2</con:value>
        </con:property>
        <con:property>
          <con:name>switchtype</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopUntil</con:name>
          <con:value>35</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C4184DE190A6EE05307991E0AF895</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C465382790A05E05307991E0AD523</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C4184DE190A6EE05307991E0AF895</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C465382790A05E05307991E0AD523</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>ef8c50c6-4837-462d-8412-c499a07213b1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>29333ef2-f2bc-4e13-9041-4da9872f4b49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06035 - STS - Device - FORBIDDEN - Verification of handling repetitive invalid values - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="90a48267-5325-49f8-86e4-b4fa508e0ebe">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="ca00380b-8dc6-4db7-a10e-08996367dee4">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopUntil","35");</script></con:config>
      </con:testStep>
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="fa74690a-f40a-452c-9589-c63fc2b1ec3c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="60827424-6cc7-4536-b68f-a155686b4254"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="9ef09da3-1132-4364-8178-29befdd61fb8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="23067bd0-a4a1-4461-ad8a-17ac60d5558f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="b00927a8-5387-43d7-ae8a-8e78976b76e9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="734640c8-a7f4-4d81-bf49-d519dfef265d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="9af8ea52-3882-4c13-8da1-e3a8154d62e6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Generate Dynamic password string" id="9de36dcc-0bea-41c4-98fb-aaaca2ed185e">
        <con:settings/>
        <con:config><script>import java.util.Random;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def useroid = tC.getPropertyValue("useroid");
def usernameStr = tC.getPropertyValue("username");

Random rand = new Random();
a = new generalUtils.generalUtils(log);

int max = rand.nextInt(tP.getPropertyValue("maxUserName").toInteger() +1 );

if (max &lt; tP.getPropertyValue("minUserName")) {
	max = tP.getPropertyValue("minUserName").toInteger();
}

String randStr = a.randomAlphaNumericString(max);

tC.setPropertyValue("UserPassword", randStr);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="d7ffc0e9-83c7-40e5-93e4-32ca6021522f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify no Node/User Level Assertion Data Exists" id="29e46045-0b83-4459-ba47-4d52b7b1dd95">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Verify no Node/User Assertion Data Exists")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Loop again if necessary" id="0fdeadfa-de88-4b72-9e9b-ca46d15defb6" disabled="true">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Generate Dynamic password string");
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C411F8F2F0A25E05307991E0A786E</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>API_NOT_AUTHORIZED</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>WOxOIS</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969248489</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C44FB92A4486BE05305991E0AD7F6</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>savedusername</con:name>
          <con:value>pjgstsFull2</con:value>
        </con:property>
        <con:property>
          <con:name>switchtype</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopUntil</con:name>
          <con:value>35</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C411F8F2E0A25E05307991E0A786E</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C44FB92A3486BE05305991E0AD7F6</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C411F8F2E0A25E05307991E0A786E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C44FB92A3486BE05305991E0AD7F6</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>9de36dcc-0bea-41c4-98fb-aaaca2ed185e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    
    
    
    <con:testCase failOnError="true" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="TC_DECE_06036 - STS - Device - FORBIDDEN - Invalid login attempt does not resets ACCOUNT_USER.LOGIN_FAILURES - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="8ae85690-f7de-49a7-8829-ab32d11d9b8e">
      <con:settings/>
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="a8a5445d-32a3-4a64-9899-10f56d158174">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopUntil","3");</script></con:config>
      </con:testStep>
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="f7f0d822-f70c-47b5-8c50-8fdba7ec65e2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="d0ff1e54-1acd-4fea-b13a-a253c7fd2521"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="7797f39a-a84f-43c5-8497-00ada698e0f9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="781810d4-1bfb-43e6-a447-2080eda0d661">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="bd7cd0c4-92a9-485e-ac43-f5150938af74">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="1a0ca8c9-59f8-417f-acde-0494b912a3a4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="ace963df-5ea6-46f1-a803-364331541c3c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Generate Dynamic password string" id="91955cc8-b848-48b1-b9dc-ff7f3a51c811">
        <con:settings/>
        <con:config><script>import java.util.Random;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def useroid = tC.getPropertyValue("useroid");
def usernameStr = tC.getPropertyValue("username");

Random rand = new Random();
a = new generalUtils.generalUtils(log);

int max = rand.nextInt(tP.getPropertyValue("maxUserName").toInteger() +1 );

if (max &lt; tP.getPropertyValue("minUserName")) {
	max = tP.getPropertyValue("minUserName").toInteger();
}

String randStr = a.randomAlphaNumericString(max);

tC.setPropertyValue("UserPassword", randStr);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="23afff95-09c9-4052-b994-11b5a9c70978">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify no Node/User Level Assertion Data Exists" id="049669a0-4877-4460-b6df-2a257dac8503">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Verify no Node/User Assertion Data Exists")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Evaluate ACCOUNT_USER.LOGIN_FAILURES value" id="f076c364-9de9-45dd-a4c1-451855110218">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

int cnt = tC.getPropertyValue("counter").toInteger();
int loopUntil = tC.getPropertyValue("loopUntil").toInteger();

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	if (cnt &lt; loopUntil) {
		assert dbUtils.userGetLoginFailures(tC.getPropertyValue("useroid")) ==  0;
	} else {
		assert dbUtils.userGetLoginFailures(tC.getPropertyValue("useroid")) == 0;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Loop again if necessary" id="39d3b9ee-a69f-499f-9678-ca6b9e8f5ad3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Generate Dynamic password string");
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA2F2AB8501B6E05305991E0AFECC</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>API_NOT_AUTHORIZED</con:value>
        </con:property>
        <con:property>
          <con:name>loopUntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Rp451V</con:value>
        </con:property>
        <con:property>
          <con:name>savedusername</con:name>
          <con:value>pjgstsFull2</con:value>
        </con:property>
        <con:property>
          <con:name>switchtype</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969252263</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C520BD5D21571E05307991E0A1011</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBuserstatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>correctpassword</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86792</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025CA2F2AB8401B6E05305991E0AFECC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C520BD5D11571E05307991E0A1011</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025CA2F2AB8401B6E05305991E0AFECC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C520BD5D11571E05307991E0A1011</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>f076c364-9de9-45dd-a4c1-451855110218</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06039 - STS - Device - Username in 'blocked:tou' status - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d955c283-5153-4d3e-9133-6b6746431fb4">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="1f4e4e2e-950c-4868-9ba3-f445de3841a0">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeRightsTokenCreate","UserNotActive");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="493669ba-10ad-4ba2-9d6a-45faf54bac42"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="747b2714-9e32-4622-9b6c-7ce25f3a5a52"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="c8af8095-9ca6-44db-b6c1-d8df3def488b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="97cf8d6e-aaf0-4b57-8efb-063b2efa722e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="0d4d523a-791a-43af-bc06-b45e472b94c5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="c9d52952-cdbb-4978-bbc3-9d528c70b9db"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="0dde9449-acf0-44a6-aadb-3d9633d83f2b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == blocked:tou" id="725da666-6dea-42dc-982f-38b82d2d12a7">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );
assert a.userSetStatus(useroid,"blocked:tou") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="7fb6261e-6b66-4fd3-91e3-a32aa11cb14f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="e188baba-7aa6-47e3-990a-d80c859b224f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="b2d1b233-dad8-416f-b9bd-9070d8285361">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C42C58EA50A09E05307991E0A3B97</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>API_NOT_AUTHORIZED</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969265995</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA3418F6E01A0E05305991E0A5B70</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_0b34e9ca-0230-4085-a2a6-aa9bae185688</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>expectErrTypeRightsTokenCreate</con:name><con:value>UserNotActive</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C42C58EA40A09E05307991E0A3B97</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025CA3418F6D01A0E05305991E0A5B70</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C42C58EA40A09E05307991E0A3B97</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025CA3418F6D01A0E05305991E0A5B70</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>725da666-6dea-42dc-982f-38b82d2d12a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b2d1b233-dad8-416f-b9bd-9070d8285361</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>97cf8d6e-aaf0-4b57-8efb-063b2efa722e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d4d523a-791a-43af-bc06-b45e472b94c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c9d52952-cdbb-4978-bbc3-9d528c70b9db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06042 - STS - Device - FORBIDDEN - Username in 'mergedeleted' status - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c7d3a938-4933-4de7-9a14-327c6a4c9a27">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="9cbb6f30-11ff-4ca5-8deb-c618972d42dc">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="3c910286-ab02-4f8c-8ac1-1fbe62a6865b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="e1ec2141-4551-4998-9eb4-e49264423c86"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="82605386-a421-4665-87a3-9057d2d6971f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="5c791e1e-8961-4898-b7fd-d3aad9ac75a0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="1fc0d39f-b249-49ab-834e-de81669d5dc5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="749681a4-e990-423f-9c37-c4cf5f88c476"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="a6fbc3b7-dba1-48d6-a8f7-18551b6225a0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == pending" id="8db0105f-5390-4ef0-b510-72d2731631f1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );
assert a.userSetStatus(useroid,"mergedeleted") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="20bb8316-a313-4c9a-9ce2-859110768550">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C41377A510A6AE05307991E0A119A</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>API_NOT_AUTHORIZED</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969278775</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C465382910A05E05307991E0AD523</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C41377A500A6AE05307991E0A119A</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C465382900A05E05307991E0AD523</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C41377A500A6AE05307991E0A119A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C465382900A05E05307991E0AD523</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>b46bb246-db3d-48d8-9b37-f3467af39a4b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06043 - STS - Device - FORBIDDEN - Account in 'deleted' status - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="0cfedfe2-a72c-4211-af25-ab4317e4e427">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="17aa832f-fd33-4eb2-82cf-72fe339a5725">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="be0e92c1-e117-40ae-ae74-f9dc4974be9e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="4d3fba8a-83a9-434b-a3d1-37955d34cf63"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="eff1be1f-b81d-44e6-8c5e-85e681fb82ee"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="2679426a-547e-42e0-aaf9-64fd967e5e07">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="0c6a138b-2238-480f-9a26-166c91a8904c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="86e5a196-261f-4382-96e4-d0a3a10a1b80"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="b0d4255c-c8f5-4fee-9dfd-42d02693ebde"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set ACCOUNT.STATUS == deleted" id="1e72223e-e282-4156-b35c-2e5a1dc134b7">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def accountoid = tC.getPropertyValue("accountoid");

a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem") );

assert a.accountSetStatusDeleted(accountoid) == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="bdad46dd-bcd7-4d07-b02e-3048d842590d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA2F2AB9401B6E05305991E0AFECC</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>API_NOT_AUTHORIZED</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969282766</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4062D3824867E05305991E0AE622</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025CA2F2AB9301B6E05305991E0AFECC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C4062D3814867E05305991E0AE622</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025CA2F2AB9301B6E05305991E0AFECC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C4062D3814867E05305991E0AE622</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>1e72223e-e282-4156-b35c-2e5a1dc134b7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06049 - STS - Device - Account in 'pending' status - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b5934560-f374-4dff-92c7-c86e825bee73">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="bbc9cb49-12ae-4d1a-9383-dc5634fb8d7b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeRightsTokenCreate","AccountNotActive");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="05acc2ce-9ee1-4913-a529-b8f03a8b42d7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      
      <con:testStep type="groovy" name="Call First User Create" id="4389c375-e09e-4cfb-9773-e1ff0752a831"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="4cecdeac-affc-41b0-89f7-2abe3e0af657"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="346d974b-98a5-4e32-afe1-0752c23e67e9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set ACCOUNT.STATUS == pending" id="ba3c25bc-fae4-44a6-ad39-91f3f0894a92">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def accountoid = tC.getPropertyValue("accountoid");

a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem") );

assert a.accountSetStatus(accountoid,"pending") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="e376666e-0f3b-4fff-bf0c-0b76d0553c1a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="e003224f-ccd5-44c9-bcf0-872f055d5b79">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="90d5df7a-8110-4fa4-8c6d-c5ff7133c1bc">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C51E5139C1574E05307991E0A178D</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969307349</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C50F5279E48E2E05305991E0A41AE</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>87648</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value>AccountNotActive</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_db726cb2-c45f-4c85-ada2-a82fcaaed3a1</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C51E5139B1574E05307991E0A178D</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C50F5279D48E2E05305991E0A41AE</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C51E5139B1574E05307991E0A178D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C50F5279D48E2E05305991E0A41AE</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>ba3c25bc-fae4-44a6-ad39-91f3f0894a92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06051 - STS - Device - FORBIDDEN - Account in 'mergedeleted' status - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="4b811c43-75c8-47ff-a3fd-f2e8b7bda604">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="2c7d2d80-124f-4b7b-b417-52b352921640">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="114313c0-e7b8-4bda-9144-eb53c3b6f248"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="c398822d-257f-4078-946d-c0b827001fee"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="fb1d041a-6685-4822-8fa6-797aabebca15"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="a32f2c73-5b25-42dd-ba5b-41908f29c77a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="e4125235-04fa-4c75-8218-104e48391c00">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="0da73c5a-2617-4d3b-9e27-ac1ef7a605ca"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="ab40d12b-fb5e-4e71-9c02-a52badd30afc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set ACCOUNT.STATUS == mergedeleted" id="7dfe0ca6-ad12-4965-b087-60a77e82a8a1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def accountoid = tC.getPropertyValue("accountoid");

a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem") );

assert a.accountSetStatus(accountoid,"mergedeleted") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="cb00b557-49c6-4f7d-a7cf-d28e64935056">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C418555B5483DE05305991E0A013E</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>API_NOT_AUTHORIZED</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969315600</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C402FB6B24831E05305991E0AF355</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C418555B4483DE05305991E0A013E</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C402FB6B14831E05305991E0AF355</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C418555B4483DE05305991E0A013E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C402FB6B14831E05305991E0AF355</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>a9f37289-9b64-4e8a-8076-585e606b09c4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="TC_DECE_06052 - STS - Device - Verification of case insensitivity for supplied &lt;Username> - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d3981d59-832a-4f71-9390-c29d9153ae9f">
      <con:settings/>
      
      
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="c650466d-2f60-41ba-b2c2-bfe37ad8c1ed">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="3c2793c2-ac6e-4a8b-9c30-e03b42ba16bb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="cafb5d1a-eda3-4fe1-8a00-e8811c214aa0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Update the username value to savedusername" id="b9d36b1d-29a4-4395-9d13-e5d70c937bc5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("savedusername",tP.getPropertyValue("username"));</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="5f2ade75-dfbf-4f1c-9101-a847a2da236a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="e3573023-5a44-46b0-9bf5-e50a31700e28">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="00fb1c85-9ff0-4566-a7d8-d32635808215">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="6bb03b91-1620-4661-b347-cff8dd638358"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="f73e60b6-2e63-4775-ae82-ad59a3a96f1d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update DB with new username" id="16c0a1a8-c842-40ff-a0fa-10a3f5367236"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def useroid = tC.getPropertyValue("useroid");
def usernameStr = tC.getPropertyValue("username");

a = new dbUtils.dbUser(log);

assert a.userChangeUsername(useroid, usernameStr) == 1;</script></con:config></con:testStep><con:testStep type="datasource" name="Grid of Usernames" id="7379152d-682d-4eb2-8b9e-3036e4cd53fb">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Grid">
            <con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">xyzstsFull1&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">xyzstsfull1&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">XYZSTSFULL1&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">Xyzstsfull1&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">XYZstsfull1&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">xyzstsFULL1&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">XyZsTsFuLl1&lt;/con:entry></row></con:configuration>
          </con:dataSource>
          
          
          <con:property>username</con:property><con:startRow/>
          <con:endRow/>
          <con:trimValues>true</con:trimValues>
          <con:entitizeValues>false</con:entitizeValues>
          <con:restartOnRun>false</con:restartOnRun>
          <con:expandProperties>false</con:expandProperties>
        </con:config>
      </con:testStep><con:testStep type="transfer" name="Property Transfer" id="87d5e18c-64cd-443a-b914-5dbdbf53f584">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          
          
        <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>username</con:name><con:sourceType>username</con:sourceType><con:sourceStep>Grid of Usernames</con:sourceStep><con:targetType>username</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="424e6d0d-6a83-4be9-98dd-bbd33320b3a2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("expectErrType","FORBIDDEN:1119");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="58b15196-1383-4539-b143-02b5b9eadec4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="a1ed7e41-18ab-4121-bc9f-b1f9d3ab8231">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="fc299724-1cce-4c6b-9de4-f4f50832813b" disabled="true">
        <con:settings/>
        <con:config><dataSourceStep>Grid of Usernames</dataSourceStep><targetStep>Property Transfer</targetStep></con:config>
      </con:testStep><con:testStep type="groovy" name="Restore the ACCOUNT_USER to the orginial USERNAME" id="c0ba6cc7-87c7-440e-a613-19fd39c140f2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUser(log);

String useroid = tC.getPropertyValue("useroid");

assert a.userChangeUsername(useroid, tC.getPropertyValue("savedusername").toString()) == 1;</script></con:config></con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>D8BCB44411833EA3E0401F0A079902C1</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVfbkqLKEn33KwznscPmJt5iuiOKi4iKCuL15QQWJaAISoGgX78LHG3t6Z49+zx02JVUZq3MXCSrfmJr77NtgDGKYi8Myqr0VvmfTVtNlm7Wq6yFNtUaXW9V1zXGrrbqkG5wPL2pN2uVsopxgtQAx1YQv1VYmuGqNFdleZNutrlGm+NeWaa2qpRnKMIkNNnySlfK2d4PcLs49q2SREE7tLCH24G1R7gdw/YEaIM22dm2bpgq7z+vKIsDo3c3jg9tioKvNoLI9+ErDPfUT+ppz08btyeeE1hxEqFfZ9r4rfLLN03T15R7DSOHYmmapugWRfbY2HN+VN5LN2dkq8EmvK5FKwgDD1q+d7FyUBqK3dAuA98JIy9299+EZiiGzkNXUQarkKkFPyrUxwEFur+M9AQywlYVuxZzC2agDYpQAFF5aqhvlR9/18GrrxlZAd6E0R5/Wv83SCg4IT88ILuKb5nd0P19xC/K9f4TwbYaQD/B3gkNc5ocLIhweRyhjZcNPEzIZ+Ny0f5yhm8MQ/C/tOQn9YiTwKa+qIzkOQjH/0+/Hnt1jTKz/AS9611zPT51p4ee2FAuPS7265iFA7c+mr4VEB43X0HdW/1r/Zmod179cgKQ1xO6fk7DCU5Sme/AYLCjEQxdGNSSZYsApIbO2Kqt2flBgSrHZ5sTWg4ELXEGmaLVOPQStuBqeWGYUge9bJyXhdDNZn12OTFPE4taD4SGpPWavjjIusdFs3eeMNLq5LXmq7SOV0gPpaYop2N+Fx2YeXPYs2Ucrw/9EuwKE7pWY4UtHZjGZqmf07ePnB5zyPPqo3ORZP7/gqdbkhVb94WYT4oNeT1j9K6pqpRcRBGcJw5IVQE45G8LhoKzO7o7T2mltAB0vQMkUfC38kADOwUwU1lwNXE20zLxAnqCM5wRR7ME/JWgGXIqpUtpputdOXVNW5md14qfrC7yUAO4cBZdTTbkmWSYsqaB8GrLNGmtZFttoqWqvpRKJIAkZ4eLrbRipGQeZFVem/CkkHyyWsyIvXMe7IentSn7mqgp4uSoTNQ1J+lyDxjLOWQ7CfG9DPaHsLScCg9OvQPaAtRJaXImuGjmLtXMKTuUDKuwmc82TVV6mo5TUS+yUkpy2ptNLx+1EAVNtPdyJptgfK0FNMXOkF4tetia84FmgFRyCue+nNqjGxBNp9OSeK3VQE4N2ZgOO5qhpjIobJKc+njNDt214p4gp2c9E2wfGyPq8rwTkOeBcYJn/liylA5Y72cM5AwXerxnLcLUWTVTSV/2+uFKJWGGQJcFQQcEEA3y1Ej9BTAQZvzo4LVYDw02nXCP3KikMWF/d7pkdNPjRs54OOelza4xVrwxZ9kupfqQ3XI7oKrI7jOubtnGkjKkwLvUR/3pAnnR8hIPeZ2pe02+ZMyT6UIK/YbdXSyn/ZdsCXVzNJ5M5+NLlg2P2+bFj7sjoRtNeprkjIYIjTF8oWirI5hNiReX3S3h08agEV8CjiYAoGwdR/YIgYXu9krCrqHJhLxAE1NFnIvKBCjKi6wKkq5vOi4zhsosmTJDTZVtn5TpvFwYfmklChLpFG3NV4cl26FXJrCLYHpN7jj6lH/pLdBKH/rmLAbpYbYJGIZWDnp3o6UO1HIG2Go6EchbJJQSFUyt0aFHZ/1ZnWaOuu33Ji0w5bIJu8tGrrM675zVjjRl+fDqLE3gz8wHjqmEYvOSbsqGBprX9y3T1Cln+HCfHdZ7mEkm6VnhHJqCbHR0eppJEuhfbdgEbIaXF3mriXLhXwKZZhFanNYLFy+DoTcy5YSQNnmgy3bN0v/KsZxipWeOHUWgg88ck68ck8Hm+KI2JQbzdfGA56kjKPJRb8wGvdaB1heDXUl46VBO7Pm1UdBMzf7LnDmnDXerz+ctVXLFl2CzdLl1LNDWBeqot2sonrGTgnrNP2sDTeenHuWf6S06pnhQGqpMIHPxpUO1ouRF2K+8/eXC1djpfjxJTurU6mPm7K6P81a6HXfrFBUpZ/7SWJ30ziKEy+t35POQvBuvY5R6HLBPE/imvSbJeotgfFvm32FVKnfIx9GK/6zjcotnVzfF1vYhF4M4RkFcec+9cg3XTojS8+w2+XJe11JTEIVarcYwTYGTASfTNZrp0IButFo0KzI3sXdF8QmiGAYbLz8rl7PXj/WfAcJ9G6PARlH1FCbQRbjyh4h5vcpqYBAVEgYYmSGRyw1BYCSa5XlOlDuiLIsdrsbVaA4wYqfO10GlPAzjUTCKwCZG0ZNUZpgnqWwg6B08lOvpXFRgoipwTEpytE5J7DOvJ+s1QAlR3FEuettsrclT2NsffJQDpvahnfjo9eAeigJR+PrLVi2IC2ujTtOF2vk2v8/PbqUge2wv34DzZARE2om+EP3sLZPvM649ZnwLDxLby0UNqWscefCK5PnRB11ynty5kqd0w3zf+tnwFJb6nNH9JPvkwTvj73ciIqmJ6Hq/NeRovR5fk9MpKVrQyAVlRMJTDEXXqQmCCVGFZzPcoYC6h6D+SpDfUX86+W5/xpfEbjCJydu8J4QpF8u/uI1NEM5vYyohfPa3V72nI0ndYpTFX9lEn1zacsR/vNfBNsz3EfOY/KRhZH+064tYD+eQPPPx5QVOvsrl9/kbVsCQhPXICAujx+BfBfjq8Gfjvch3LDFh0zqJ0fdPyvlseqtYEIZJEKtSpTA8zssCZ3w+oPbHpt/CFAL4140mw9/eaBbaYEIm196q3Pd6/7656hV0gYh4Ya/A8lbJyOWcHB44D/P5F8CvR3RD/tOIfs7k/Tfz75aHmn5+H97/AQ==</con:value>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0a82086-2aef-4069-b41d-96c07350f684</con:value>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>87648</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN:1119</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222280</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>savedusername</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>switchtype</con:name>
          <con:value>allUpper</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>xyzstsFull1</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>732164F412EAB47E0F18EA0CF6E99CEB</con:value>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:D8BCB444117E3EA3E0401F0A079902C1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:D8BCB444118B3EA3E0401F0A079902C1</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateLASTLOGINDATE</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_47af9c91-a48d-4db6-9b30-bef1aa66c981</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D8BCB444117E3EA3E0401F0A079902C1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D8BCB444118B3EA3E0401F0A079902C1</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06053 - STS - Device - Verification of dece.account.username.length.max for supplied &lt;Username> - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c61351af-929d-479b-b308-1e58d5d3ff3a">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="4d1af73f-8875-45e1-b378-de1e7fe0cac4">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopUntil","3");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="a3b440ec-3a14-4226-8a57-992d63dc8d19"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call First User Create" id="38f6b225-e444-43bd-961a-dd1433b0592c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      
      <con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="078cc2cb-1625-481b-b029-c45e3256bb05"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="77799cc7-67ac-40a1-965e-12ab468406aa">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="37a441da-6b9c-4a58-95fc-a5d2c318d0c5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="7dc24fb2-eb51-4cb4-b396-d467be981151"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="2982ae5b-4b80-4044-8723-d5dd4315e0a0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Generate dynamic maximum username string" id="6175368a-0f92-46a6-a905-3b26887d842c">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def useroid = tC.getPropertyValue("useroid");
def usernameStr = tC.getPropertyValue("username");

a = new generalUtils.generalUtils(log);

log.info "Max username - " + tP.getPropertyValue("maxUserName");

String randStr = a.randomAlphaNumericString(tP.getPropertyValue("maxUserName").toInteger());

tC.setPropertyValue("username", randStr);</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update DB with new username" id="e7614f2b-854c-40cc-b815-753598f35f96">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def useroid = tC.getPropertyValue("useroid");
def usernameStr = tC.getPropertyValue("username");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );

assert a.userChangeUsername(useroid, usernameStr) == 1;







</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="35d4c6b0-511e-4da3-ad88-8bf7bf4c16ed">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="3df970ca-cc67-472d-8068-22b8b9596782">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="f19bcac9-d5a8-415b-94de-d1ae1ff776f9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Loop again if necessary" id="b754e14e-b96c-4973-b1d2-531b855b99af">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Generate dynamic maximum username string");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969319416</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>savedusername</con:name>
          <con:value>pjgstsFull2</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4048BAF10A19E05307991E0A3419</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C50F527B148E2E05305991E0A41AE</con:value>
        </con:property>
        <con:property>
          <con:name>switchtype</con:name>
          <con:value>allUpper</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_7b43dd86-a788-4e75-83dc-9ef0b1277431</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C4048BAF00A19E05307991E0A3419</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C50F527B048E2E05305991E0A41AE</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C4048BAF00A19E05307991E0A3419</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C50F527B048E2E05305991E0A41AE</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>2982ae5b-4b80-4044-8723-d5dd4315e0a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6175368a-0f92-46a6-a905-3b26887d842c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e7614f2b-854c-40cc-b815-753598f35f96</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b754e14e-b96c-4973-b1d2-531b855b99af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>078cc2cb-1625-481b-b029-c45e3256bb05</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77799cc7-67ac-40a1-965e-12ab468406aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>37a441da-6b9c-4a58-95fc-a5d2c318d0c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35d4c6b0-511e-4da3-ad88-8bf7bf4c16ed</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7dc24fb2-eb51-4cb4-b396-d467be981151</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f19bcac9-d5a8-415b-94de-d1ae1ff776f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3df970ca-cc67-472d-8068-22b8b9596782</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06054 - STS - Device - Verification of dece.account.username.length.min for supplied &lt;Username> - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="cce56086-f64d-4161-bcd0-71d026765553">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="68ef92a1-5a79-472e-a8cf-11baf568ef0a">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopUntil","3");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="f6b38b74-4170-402c-a777-b0a6c50a5264"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      
      
      
      
      
      
      <con:testStep type="groovy" name="Call First User Create" id="88329ba5-22e3-4306-bd08-219401621486"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="3b754fea-18e2-433d-9c6a-0266a95b9789"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="c3124b0f-8da6-46ae-99b0-5aadd66e1b2a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="05a60e15-e1e0-4122-a21e-167caf20c994">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="6bae2efc-c0e5-4674-be94-786732d81452"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="2bc8c9dd-5135-4a01-8018-1fd68c890975"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Generate dynamic minimum username string" id="c76c01e1-bc81-40aa-8e39-24604ee247d1">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def useroid = tC.getPropertyValue("useroid");
def usernameStr = tC.getPropertyValue("username");

a = new generalUtils.generalUtils(log);

log.info "Max username - " + tP.getPropertyValue("maxUserName");

String randStr = a.randomAlphaNumericString(tP.getPropertyValue("minUserName").toInteger());

tC.setPropertyValue("username", randStr);</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update DB with new username" id="7a89cbb4-3e5b-4f2e-9eb1-2940363aaea4">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def useroid = tC.getPropertyValue("useroid");
def usernameStr = tC.getPropertyValue("username");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );

assert a.userChangeUsername(useroid, usernameStr) == 1;
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="407229a5-04af-4b38-ad36-0af007e67933">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="2fc4b2d6-fb4b-4449-a33e-f16c27265f68">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="74bb2a5e-2759-4378-80af-ff357caf6ae7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Loop again if necessary" id="7d91c9d6-04f2-4195-a63e-b771daac6a74">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Generate dynamic maximum username string");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA3418F8701A0E05305991E0A5B70</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969324115</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C402EFED1482FE05305991E0AABC7</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>savedusername</con:name>
          <con:value>pjgstsFull2</con:value>
        </con:property>
        <con:property>
          <con:name>switchtype</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">allUpper</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopUntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_0b1972ba-196f-474a-b062-16b250323080</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025CA3418F8601A0E05305991E0A5B70</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C402EFED0482FE05305991E0AABC7</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025CA3418F8601A0E05305991E0A5B70</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C402EFED0482FE05305991E0AABC7</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>c76c01e1-bc81-40aa-8e39-24604ee247d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7a89cbb4-3e5b-4f2e-9eb1-2940363aaea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2fc4b2d6-fb4b-4449-a33e-f16c27265f68</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06055 - STS - Device - Verification of dece.account.password.length.min for supplied &lt;Password> - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c6dddb98-ba91-463f-bfef-d3833466ec1d">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="de0f75f6-5810-4939-8ca4-a9dbd7ad4a60">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopUntil","3");</script></con:config>
      </con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="1993f592-b0e7-46d1-b97a-7987fd86b780"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="646fb6fc-3f8d-4a61-99fd-10257035e67b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="799f99f5-27ba-4f32-a891-f18e3c8f9757"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="3661ea16-fc6d-4539-b57c-bb1ed7b5b49a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="122e27a8-0a30-4e53-9b7f-9a94ba5ad0cd">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="331a6d24-9a7d-4ab7-aeae-56e03291eeb4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="7cab975d-9186-42fd-b64f-c218a214075c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update DB with new password" id="8b5ee1a2-b50c-49eb-ab8c-5ce85510615d">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");
def usernameStr = tC.getPropertyValue("username");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );
tC.setPropertyValue("UserPassword","aAaAaAaA");
//This is aAaAaAaA  
assert a.userChangePassword(useroid, "717mETVc9UU56ENy/hx+BMy2hAyaVHpxdLb68AsXpnE=") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="4745ee5d-7ebe-4dd9-92f7-90050d84f29f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="d6d0d93a-3095-41e4-8772-edb650e954ca">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="ba3f4e59-30a7-4573-b544-3eaa3cf6a055">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA14523A3019EE05305991E0AA6E0</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>aAaAaAaA</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969328169</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA3418F9401A0E05305991E0A5B70</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>savedusername</con:name>
          <con:value>pjgstsFull2</con:value>
        </con:property>
        <con:property>
          <con:name>switchtype</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopUntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_96658ce5-c7f9-4636-9e4c-672db23dfc66</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025CA14523A2019EE05305991E0AA6E0</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025CA3418F9301A0E05305991E0A5B70</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025CA14523A2019EE05305991E0AA6E0</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025CA3418F9301A0E05305991E0A5B70</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>8b5ee1a2-b50c-49eb-ab8c-5ce85510615d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d6d0d93a-3095-41e4-8772-edb650e954ca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06056 - STS - Device - Verification of dece.account.password.length.max for supplied &lt;Password> - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d427ec15-c246-4cc6-8751-9a820fd3af8e">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="731c7912-2a89-4e07-b617-b2896920f440">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopUntil","3");</script></con:config>
      </con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="d45f0348-2bfa-4060-b5cb-af1ab5652c8c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="b6d2feff-cfa8-4443-b2aa-03952ac575c0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="f2f17256-4606-4523-a96e-c56a713f4dd0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="3382d7e3-031d-4943-a131-d6c25c80d28e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="2d5fa2cd-567e-40e7-a928-d734f60c751b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="ebec0c80-2839-43a3-bd44-3568e656b774"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="593e7fe6-2396-4bd2-8b4c-789552484fc8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update DB with new password" id="8ec12f21-3a96-45de-a531-d78e5f1197b9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");
def usernameStr = tC.getPropertyValue("username");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );

tC.setPropertyValue("UserPassword","aAbFrstrdy0Frstrdyug-tiuhskjfdhgiew98r709w797ur98ew7r98ew7yrgdsfdhkhfkjdsfdkjskgf5Tyjgfhyfqwhyeugftiuwehfdkiyfr7r09wqlkhye8u76qwureiywqeiuwqhekjwhqwhekwqkwqhdeiwqhreiwqueiwqueoiwqeuowquewpoqueopwquepowqjdlkwsgfuiqdowqdodwqdoTyjgfhyfqwhyeugftiuwehfdkiyfqdw-");
//This is aAaAaAaA  
assert a.userChangePassword(useroid, "QPtJ1/Me8vwd7hTjzLkzl0qU52VsKG3+BiD2lp6Ndrs=") == 1;









</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="775af81a-3323-489f-898d-ea3cceb397a4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="39f92a7a-a299-4fb7-b9f1-61f1753829b8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="14ff2ec3-a3ae-44e0-b1de-28cb6b2ed96b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C406265BE4865E05305991E0A0CE1</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>aAbFrstrdy0Frstrdyug-tiuhskjfdhgiew98r709w797ur98ew7r98ew7yrgdsfdhkhfkjdsfdkjskgf5Tyjgfhyfqwhyeugftiuwehfdkiyfr7r09wqlkhye8u76qwureiywqeiuwqhekjwhqwhekwqkwqhdeiwqhreiwqueiwqueoiwqeuowquewpoqueopwquepowqjdlkwsgfuiqdowqdodwqdoTyjgfhyfqwhyeugftiuwehfdkiyfqdw-</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969332207</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C465382D40A05E05307991E0AD523</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>savedusername</con:name>
          <con:value>pjgstsFull2</con:value>
        </con:property>
        <con:property>
          <con:name>switchtype</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopUntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_5542576c-0419-4e98-9b38-4b6327a10402</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C406265BD4865E05305991E0A0CE1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C465382D30A05E05307991E0AD523</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C406265BD4865E05305991E0A0CE1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C465382D30A05E05307991E0AD523</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>8ec12f21-3a96-45de-a531-d78e5f1197b9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06057 - STS - Device - Verification of special characters &lt;Password>  - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="57314613-5f2a-43a3-a28e-c570696da9c0">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="03f37ef4-f833-4eec-9bef-d9b161defc01">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopUntil","3");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="936f3b53-e65f-4103-9bdf-e82934be2912"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call First User Create" id="72ea8685-94ee-4015-abd0-0bdc5e54c602"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      
      
      
      <con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="e5496cca-72e3-4cb6-bcf7-0d7630454da0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep>
      
      <con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="4df49073-a54b-4b2e-9eed-17207b90105f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="cbd5ab96-6c46-4fb1-9038-71ea250f7e68">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="0c636c84-b8a6-4a05-9cda-98b364a338d8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="4b323e7b-5b14-48fd-9f0c-bff9a131721e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="datasource" name="Grid of Passwords" id="53f3244d-a8e7-4749-b243-c0f6b1edc5c0">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Grid">
            <con:configuration><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">1~aa$%i!</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">H9l4lCymTLnS3tTSsfUOx2uXmdiK0niZ6KdPSkhoB1A=</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">testing123!</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">3V4uwrZ3GGvKtm9yybj03xkmKfQ35a+W1f43AomAvRg=</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">!@#$%&amp;*+</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">LTZUZ6FybfIGvdJtVkdlgqbUMQHxGy9BdkpDeWqLvC8=</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">1~aa$%i!</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">H9l4lCymTLnS3tTSsfUOx2uXmdiK0niZ6KdPSkhoB1A=</con:entry></xml-fragment>]]></row></con:configuration>
          </con:dataSource>
          <con:property>passwdText</con:property>
          <con:property>passwdCrypt</con:property>
          <con:startRow/>
          <con:endRow/>
          <con:trimValues>true</con:trimValues>
          <con:entitizeValues>false</con:entitizeValues>
          <con:restartOnRun>false</con:restartOnRun>
          <con:expandProperties>false</con:expandProperties>
        </con:config>
      </con:testStep><con:testStep type="transfer" name="Property Transfer" id="2801087d-a2b2-419a-ac3e-59a23a27bd69">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
            <con:name>passwdCrypt</con:name>
            <con:sourceType>passwdCrypt</con:sourceType>
            <con:sourceStep>Grid of Passwords</con:sourceStep>
            <con:targetType>passwdCrypt</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          <con:upgraded>true</con:upgraded></con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
            <con:name>passwdStr</con:name>
            <con:sourceType>passwdText</con:sourceType>
            <con:sourceStep>Grid of Passwords</con:sourceStep>
            <con:targetType>UserPassword</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          <con:upgraded>true</con:upgraded></con:transfers>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update DB with new password" id="e0a0011f-8797-439d-bd61-2c46f594635c">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject(); 
def useroid = tC.getPropertyValue("useroid");
def usernameStr = tC.getPropertyValue("username");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );

assert a.userChangePassword(useroid, tC.getPropertyValue("passwdCrypt")) == 1;

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="89cddc10-f7bb-46ea-9cb3-252d2a418ea5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="bec6d7d7-c4f6-42ab-8826-ebf20e268e15">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="2661db15-1bd6-43a7-82e0-e9db292c1eff">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="8bc4747c-e203-44d0-94dd-3bcbd6c3283c" disabled="true">
        <con:settings/>
        <con:config>
          <dataSourceStep>Grid of Passwords</dataSourceStep>
          <targetStep>Property Transfer</targetStep>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C405F58E54853E05305991E0AD198</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>1~aa$%i!</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969336216</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C42C58EE40A09E05307991E0A3B97</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>savedusername</con:name>
          <con:value>pjgstsFull2</con:value>
        </con:property>
        <con:property>
          <con:name>switchtype</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopUntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>passwdCrypt</con:name>
          <con:value>H9l4lCymTLnS3tTSsfUOx2uXmdiK0niZ6KdPSkhoB1A=</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_ca88564f-5f5f-4ec7-a024-8a41015db6c9</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C405F58E44853E05305991E0AD198</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C42C58EE30A09E05307991E0A3B97</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C405F58E44853E05305991E0AD198</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C42C58EE30A09E05307991E0A3B97</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>53f3244d-a8e7-4749-b243-c0f6b1edc5c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2801087d-a2b2-419a-ac3e-59a23a27bd69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e0a0011f-8797-439d-bd61-2c46f594635c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8bc4747c-e203-44d0-94dd-3bcbd6c3283c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06058 - STS - Device - Verification of token grant prefixed &lt;Username> spaces are supplied - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a632285c-f3d1-411d-8343-a6ee9533a735">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="b65cc99a-9ea0-464d-9b15-597e58a48d8c">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopUntil","3");</script></con:config>
      </con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="02a49d8d-58d8-4909-af08-1496929df399"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="703a47f1-a476-4160-8630-e6e82ffd8b35"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="e12a3e06-18a2-4721-ae77-a131bf45f68b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="c206b002-afbf-443a-a0b2-be4252ed024b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="4a34657e-7d4d-4a61-9647-05ea5e3f8503">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="e60128ff-ed82-497a-aa20-b7bcd02572a1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="20cfef8b-4029-46be-8083-5eabc3b3eb11"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Prefix spaces to &lt;Username>" id="6cd782f9-c663-49c3-abc0-9764945ce203">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String a = "  " + tC.getPropertyValue("username");

tC.setPropertyValue("username",a);</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="370c23e0-cb8f-436b-88f6-e1a39b7902e6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="50d2b18b-7ec2-4b5b-bc45-4555f5d48b7c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="a9012faa-2128-4654-a2f6-1f01f3ef8268">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C44FB0FD2485FE05305991E0A4BE1</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969340293</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA3418FA901A0E05305991E0A5B70</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>savedusername</con:name>
          <con:value>pjgstsFull2</con:value>
        </con:property>
        <con:property>
          <con:name>switchtype</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopUntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>passwdCrypt</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>stsActionValidateLASTLOGINDATE</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_c22fa577-7048-4c7f-868c-94a67d96d116</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C44FB0FD1485FE05305991E0A4BE1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025CA3418FA801A0E05305991E0A5B70</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C44FB0FD1485FE05305991E0A4BE1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025CA3418FA801A0E05305991E0A5B70</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>6cd782f9-c663-49c3-abc0-9764945ce203</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06059 - STS - Device - Verification of token grant suffixed &lt;Username> spaces are supplied - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="9e6d6a87-e049-40ba-9060-82d9f53f56cc">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="9b57cf85-8f6c-48c5-866c-501470576372">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopUntil","3");</script></con:config>
      </con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="ecd915b0-a602-4574-b63f-363795e94803"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="85d15b5c-2a69-4853-ab2d-76c3b6ab06c6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="b178a266-ccba-43a4-af63-7eaaf893206e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="934c7dbb-91da-4672-8108-6034d02f8c2d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="32b252b4-0b96-41d1-8440-9c622f1fa524">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="bbd9d208-b2b5-4c44-98bb-0149e81edaed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="40e4d65e-6cac-42de-a506-60f733b122d8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Suffix spaces to &lt;Username>" id="18dbacd8-a070-4c3c-a25a-15bc063b618a">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String a = tC.getPropertyValue("username") + "  ";

tC.setPropertyValue("username",a);</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="bd15f1db-420a-4014-a9ad-07e85295e373">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="bb2ba147-db87-4bc2-b797-0b1eb18f29b5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="8df5c4e6-5012-417e-b5c8-972c736128ee">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C41377248486DE05305991E0A584E</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969344094</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C516BF5BB157CE05307991E0A1D33</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>savedusername</con:name>
          <con:value>pjgstsFull2</con:value>
        </con:property>
        <con:property>
          <con:name>switchtype</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopUntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>passwdCrypt</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>stsActionValidateLASTLOGINDATE</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_18c705f7-9d7f-4d58-bb0e-4a98fe84447e</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C41377247486DE05305991E0A584E</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C516BF5BA157CE05307991E0A1D33</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C41377247486DE05305991E0A584E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C516BF5BA157CE05307991E0A1D33</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>18dbacd8-a070-4c3c-a25a-15bc063b618a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06060 - STS - Device - Verification of token grant prefixed &amp; suffixed &lt;Username> spaces are supplied - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="eb6478aa-1187-4558-a72e-a6425c3fbf0b">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="4c53495d-6b45-465c-9e3a-e38ffbf44eeb">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopUntil","3");</script></con:config>
      </con:testStep>
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="942f6bf7-8f68-472a-ab83-b48a456e74de"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="04998075-adca-4798-b482-7681981efceb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="1f9e9e99-79da-4d80-bca9-d0e8aff8847c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="dc764e7f-0731-4c62-9b9e-608cc1af1c91">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="c6afe8df-4a71-4c1a-935b-f673519d6e7a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="ed55e369-28a5-43a2-a7d1-5164c9e4fb5b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="03e34f30-814c-4c12-a296-23603e0c631f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Prefix and suffix spaces to &lt;Username>" id="6a6e7369-2398-4387-a44f-e5dd9b2788e7">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String a = "  " + tC.getPropertyValue("username") + "  ";

tC.setPropertyValue("username",a);</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="d3f0d4da-2861-4d8f-acab-46b6d2428271">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="da282234-300c-47b0-a3a3-ed86831f7cc2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="d65716bc-bc1f-4cc6-be28-9b589e48152b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4063530D482BE05305991E0A1C0D</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969348108</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C405EFD4C484BE05305991E0A7160</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>savedusername</con:name>
          <con:value>pjgstsFull2</con:value>
        </con:property>
        <con:property>
          <con:name>switchtype</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopUntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>passwdCrypt</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>stsActionValidateLASTLOGINDATE</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_d2f24013-6a67-42bf-a292-e707203fbeaa</con:value>
        </con:property>
      <con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C4063530C482BE05305991E0A1C0D</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C405EFD4B484BE05305991E0A7160</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C4063530C482BE05305991E0A1C0D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C405EFD4B484BE05305991E0A7160</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>6a6e7369-2398-4387-a44f-e5dd9b2788e7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06061 - STS - Device - Verification of token grant prefixed &lt;Password> spaces are supplied - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="841b14e7-b2f7-4d4e-93f0-cfacb5c42eec">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="08f3f1f7-d6e0-4ab7-9eba-6c524d106fc0">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopUntil","3");</script></con:config>
      </con:testStep>
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="38c93c89-be3c-4e66-87e4-4f0a85d52533"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="2ca2bc02-f945-4c10-a027-0dbcdb2bee05"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="5fd387b8-9fcd-4adf-89dd-f47146e6a600"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="89492205-8f69-4c7c-b210-1b1c28bc5965">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="7c44b312-3d34-4a21-a5b1-ab8a5e530ca9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="2e8f082d-8519-4b2d-aa74-ffa3edbae354"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="b4a7fa19-eabe-49ff-b8b6-dcbdde3b9749"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Prefix spaces to &lt;Password>" id="011b9fab-18b6-4107-84e6-5f64928e2859">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String a = "  " + tC.getPropertyValue("password");

tC.setPropertyValue("UserPassword",a);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="ac8ddb6a-6de6-4971-8716-151f60008c90">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="9cbef4a9-8130-48ca-a491-776590d446b6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="c5e2f2a4-b5aa-4a2b-8297-6ddffe918196">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA2F2ABAE01B6E05305991E0AFECC</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>  testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969352008</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C441D94734839E05305991E0A2CE2</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>savedusername</con:name>
          <con:value>pjgstsFull2</con:value>
        </con:property>
        <con:property>
          <con:name>switchtype</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopUntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>passwdCrypt</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/da7c7bb2-0b7b-4b9f-a92a-f8cad059abda</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025CA2F2ABAD01B6E05305991E0AFECC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C441D94724839E05305991E0A2CE2</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025CA2F2ABAD01B6E05305991E0AFECC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C441D94724839E05305991E0A2CE2</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>011b9fab-18b6-4107-84e6-5f64928e2859</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06062 - STS - Device - Verification of token grant suffixed &lt;Password> spaces are supplied - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="896d94e4-bd89-49fb-aacc-84ed04a47ca5">
      <con:settings/>
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="9a52000b-4c0b-4e79-974f-b0b90dd1833b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopUntil","3");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="3459a271-5a1a-48c4-97d9-b0f8fa7eccba"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="62f1616d-3017-49fe-abf1-035fbce32b08"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="4ed5cc5b-50e1-47a7-9046-0c19127495df"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="8bff80ac-0f2a-4376-b167-3b043c40ba9d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="86f8da8d-a034-40f6-9045-fe02c1ca0900">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="52a4ec48-5594-4ea2-b83d-47bbab07bf81"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="21bba243-adb4-4a61-9b9a-914bce5c8ff7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Suffix spaces to &lt;Password>" id="e0a252f9-ae8a-40ce-b77b-992d7c627b2a">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String a = tC.getPropertyValue("password")+"   ";

tC.setPropertyValue("UserPassword",a);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="9ce51599-7c87-4726-9653-a2d10bfd02fa">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="6edd1de7-969f-48dd-b280-55f55ed676f1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="6e92bb33-1a7e-4083-b28b-fb6b3efa7572">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA2F2ABBA01B6E05305991E0AFECC</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969356051</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C51E513BA1574E05307991E0A178D</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>savedusername</con:name>
          <con:value>pjgstsFull2</con:value>
        </con:property>
        <con:property>
          <con:name>switchtype</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopUntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>passwdCrypt</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_bd0a5996-0349-4c80-9ebd-e7815a9f9897</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025CA2F2ABB901B6E05305991E0AFECC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C51E513B91574E05307991E0A178D</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025CA2F2ABB901B6E05305991E0AFECC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C51E513B91574E05307991E0A178D</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>e0a252f9-ae8a-40ce-b77b-992d7c627b2a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06063 - STS - Device - Verification of token grant prefixed &amp; suffixed &lt;Password> spaces are supplied - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7bf34eb7-779c-4025-b39f-71a736f5642f">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="cb09c350-ddd9-4063-b385-b36186fbb98e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopUntil","3");</script></con:config>
      </con:testStep>
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="b842f48e-eac7-4e00-9142-630b32bfa3fd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="b83ca33d-f111-4875-b6b2-b9c9559becb9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="1fd7ae2a-6fe4-4429-9beb-2dee0df88b00"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="e86ada3e-0435-4539-b261-b62a5e5af641">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="360fa3d4-470b-4cb7-8799-7774dfb831b7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="53c3aca7-5b6a-4975-b51f-f885dbf825c9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="3db50199-0e3b-401e-8dad-251adcf29126"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Prefix &amp; Suffix spaces to &lt;Password>" id="1f3a51d2-467b-4fcd-b478-e03c1560bb03">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String a = "  " + tC.getPropertyValue("password") + "  ";

tC.setPropertyValue("UserPassword",a);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="6c1c2373-5525-4e70-b21c-b32c6ed0803f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="45f04fc6-0b9b-45f7-8d87-2c7767e4dea4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="6aec2672-a333-4700-a41d-4b6fe2ad0210" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4030D1D54837E05305991E0A9E1A</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>        testing        </con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969360372</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C405F95B04859E05305991E0A9CAC</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>savedusername</con:name>
          <con:value>pjgstsFull2</con:value>
        </con:property>
        <con:property>
          <con:name>switchtype</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopUntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>passwdCrypt</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_0d430ddf-c8a4-43df-a9ba-3fed679d5179</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C4030D1D44837E05305991E0A9E1A</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C405F95AF4859E05305991E0A9CAC</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C4030D1D44837E05305991E0A9E1A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C405F95AF4859E05305991E0A9CAC</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>1f3a51d2-467b-4fcd-b478-e03c1560bb03</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06064 - STS - Device - Fifty Repetitive Assertions for full user no existing assertion status active - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="26913a33-0e63-4fd7-a31b-cf732f9f9255">
      <con:settings/>
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="be206829-b0bb-48dc-a027-4fb7e06d056b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopUntil","50");</script></con:config>
      </con:testStep>
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="7234a3cd-72a3-47ba-b8c1-642a373194f4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call First User Create" id="5e6066d7-9387-4765-938a-e08207cdc95d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="f8c3a382-09e1-45f1-9b02-675c095666d1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="594ffa85-1828-49f2-9bf4-3bbe5f7efc06">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="c9851ee8-d387-4182-b6d0-822f73a8fc6a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="ae299608-5c4a-48db-880c-de3ce62534f7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="765c4408-4559-4f26-8271-c06c78aa2cfd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush User Level Assertion Data" id="b1dd2acf-a897-488b-ba4c-5d52e0b64ee2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Flush Node/User Assertion Data")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="2fde2598-3ce1-41f1-a686-f0140194e775">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="96af942c-cc3e-4912-baa1-78ae1731a7ca">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="24680580-aa0e-4e85-b832-aaaa82da9434">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Loop again if necessary" id="083f4280-214c-4c48-b9f6-07ad47553b19" disabled="true">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Flush User Level Assertion Data");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4044444C0A0DE05307991E0AA0D0</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969364423</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C44F5C1FB0A6CE05307991E0A1C9E</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopUntil</con:name>
          <con:value>50</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86844</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_ccaf4f67-8ed6-466c-a4ba-c3b653ff5e37</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C4044444B0A0DE05307991E0AA0D0</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C44F5C1FA0A6CE05307991E0A1C9E</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C4044444B0A0DE05307991E0AA0D0</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C44F5C1FA0A6CE05307991E0A1C9E</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>083f4280-214c-4c48-b9f6-07ad47553b19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>be206829-b0bb-48dc-a027-4fb7e06d056b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b1dd2acf-a897-488b-ba4c-5d52e0b64ee2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06065 - STS - Device - Fifty Repetitive Assertions for full user no existing assertion status pending - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="69e7da85-ab18-4b89-821c-fce9f5c8b3b9">
      <con:settings/>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="d8a66e40-f6db-4015-a1ae-4ffaf54bf403">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopUntil","50");</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Call Account Create" id="6d62e723-a993-431f-bb61-c99cdf6cea2e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="483b537c-aa50-43d1-ac00-68e2f5760a6e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="23523d8b-73d2-4bc2-8eb7-0762e1c81b87"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="e9b7b474-6804-4854-a1e1-70cce47ff634"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush User Level Assertion Data" id="fe80c96f-866b-46fe-bf26-856cda5aba55">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Flush Node/User Assertion Data")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="e6bf9b77-58cd-4485-b0a8-9ec083221fb6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="31135b00-570b-46c7-8bc6-060e2fe7a137">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="bff79ca5-bec2-4e3f-a371-feb38f1af4af">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Loop again if necessary" id="debd9798-090f-4c3f-ab0a-915d2d3c17f9" disabled="true">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Flush User Level Assertion Data");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C40AB8735485DE05305991E0A339D</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969368598</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C467425F04845E05305991E0AA9BC</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>87648</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopUntil</con:name>
          <con:value>50</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86845</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value>UserNotActive</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.q.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/_81077a1e-8b4b-4450-9683-81fef31e77b0</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C40AB8734485DE05305991E0A339D</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C467425EF4845E05305991E0AA9BC</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C40AB8734485DE05305991E0A339D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C467425EF4845E05305991E0AA9BC</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fe80c96f-866b-46fe-bf26-856cda5aba55</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>debd9798-090f-4c3f-ab0a-915d2d3c17f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06066 - STS - Device - Fifty Repetitive Assertions for full user existing assertion status active - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="33a53090-e3ba-4db0-bc3b-da993411300d">
      <con:settings/>
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="1d6ce636-2079-4061-9191-6588f467e693">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopUntil","50");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="92e2c6bc-4a8e-4e45-8530-94ad3708c63f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="deb50b86-3705-40d3-bcd6-4648117e03a5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="20d3883e-033e-4e65-9761-4d95da1ba703"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="7f24c87f-4b63-45ae-9d7f-ef52261e8b04">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="3051d458-4757-4306-9ca9-23f8aae9c9ca">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="da177511-348b-4ebc-8ed7-bc075eee58be"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="4ffae66c-d8ac-4e64-b605-2c206adad1f6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="87f58669-7c1a-493c-ac0a-4c94e7cd2aee">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="bc667a6f-d994-4bee-be8d-0d11bd62758d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="7ca95003-f639-4e67-b0ca-1f5d2759770b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Loop again if necessary" id="fdd178ad-d798-4152-8cb8-6979a40b9c46" disabled="true">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C441D94864839E05305991E0A2CE2</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969374655</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C402AAD4E482DE05305991E0AF9D9</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopUntil</con:name>
          <con:value>50</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86846</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_339bb72f-1838-4561-ba14-be001cc9eab1</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C441D94854839E05305991E0A2CE2</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C402AAD4D482DE05305991E0AF9D9</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C441D94854839E05305991E0A2CE2</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C402AAD4D482DE05305991E0AF9D9</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fdd178ad-d798-4152-8cb8-6979a40b9c46</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06067 - STS - Device - Fifty Repetitive Assertions for full user existing assertion status pending - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="832dc9bf-977e-487d-b570-8580b061448a">
      <con:settings/>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="cf892101-4280-44d4-a7ad-d4f07d188ca7">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopUntil","50");</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Call Account Create" id="a7cee925-2de7-49cf-b767-0f97d6f83c6d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="a0384719-ac0b-422a-b9e4-128b795f3d46"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="77ebdae1-6451-46fc-aa59-9b5dff05072a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="3e6e6286-a6f0-4476-baef-0e08fa573111"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="6bd76d91-58f8-4119-b6a0-13af26767cf7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="52ea0acb-5d66-45e7-ae10-004247b1a070">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsTokenGet" id="5150bd97-420c-4ffd-9c3c-d6847974ca75">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Loop again if necessary" id="59a6c10b-6a06-4105-8209-6483a0f63191" disabled="true">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C50F97C811569E05307991E0A4100</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969378460</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C412002540A2DE05307991E0ACC6F</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>87648</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopUntil</con:name>
          <con:value>50</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86847</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value>UserNotActive</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_b64eff20-88b9-458f-8eb2-df763e137bd7</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C50F97C801569E05307991E0A4100</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C412002530A2DE05307991E0ACC6F</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C50F97C801569E05307991E0A4100</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C412002530A2DE05307991E0ACC6F</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>59a6c10b-6a06-4105-8209-6483a0f63191</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties>
      <con:property>
        <con:name>QC_TestPlanDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestLabDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestSet</con:name>
        <con:value/>
      </con:property>
    </con:properties>
    <con:reportParameters/>
  </con:testSuite><con:testSuite name="6_STS GET Basic Auth - Device Role - P2 - Test Cases" id="dba34373-8fc4-4b46-9e96-8ea494d003b3">
    <con:description/>
    <con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop/Reports New</con:setting></con:settings>
    <con:runType>SEQUENTIAL</con:runType>
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32002 - STS GET BasicAuth - Device - FORBIDDEN - Username in 'deleted' status - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="e5507c42-b14e-4fee-af04-13a2dbb52f50">
      <con:settings/>
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="dc7cc59f-2545-4fca-a37f-791691d35b43">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="5fd7fa07-9245-483d-b7c0-7fb884c3683a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="5a410799-f821-487b-a43b-697fbd054527"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="a05c6047-6c77-4605-85f4-f33b1af63881"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="6fd3a0c0-1d04-4c13-97a0-a893775691d3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="da22d2c8-1bd3-4d56-8bc3-8d28878fefc3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="9e252686-7e34-43fe-bbc2-e394b6df835e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="30528b77-e604-473d-a707-8d8bd095408e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="09199af1-6761-4c73-9ed1-f6611a675af1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == deleted" id="c736b0ae-717b-4704-ae08-f3204bafc409">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );
assert a.userSetStatus(useroid,"deleted") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="c13492e8-733c-4a3e-b7f7-2d922976404d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C403082814835E05305991E0A2E11</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969383472</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA14523B8019EE05305991E0AA6E0</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_7f0cd6b2-9edd-4517-983f-79479b69d51e</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C403082804835E05305991E0A2E11</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025CA14523B7019EE05305991E0AA6E0</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C403082804835E05305991E0A2E11</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025CA14523B7019EE05305991E0AA6E0</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>c736b0ae-717b-4704-ae08-f3204bafc409</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    
    
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32007 - STS GET BasicAuth - Device - Username in 'blocked:tou' status - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="f23ef11d-2f19-4419-b782-cff22318fd22">
      <con:settings/>
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="6ffba97e-4ce2-4453-a8b4-76d637b867c2">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeRightsTokenCreate","UserNotActive");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="a39a3577-ecc8-49dc-a44d-db4a8d667ff7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="67b963ee-9ef2-42c3-89de-eea5b5c2b9d9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="32f8242f-2595-45b7-9014-c805be2de302"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="adf32bc8-2b28-44ce-81df-8d8c20ffcfea">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="7bd0bd1b-138c-4f24-b601-efbbdd43999e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="49d9c381-3136-4b26-9496-d474f564e916"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="e5f4c134-2768-45b4-a7a2-29de6635464d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="461edd9e-ce1e-42d5-af8d-ede6b00c9960">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == blocked:tou" id="784deff6-6799-4e9a-a143-d5b63d6e177d">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );
assert a.userSetStatus(useroid,"blocked:tou") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="1f944e38-819c-4c90-a377-b686f389d908">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="0d55614a-436a-4a35-bc56-5577d2c11421">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E494926D5601B46E05307991F0A3D11</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVbbcuI4EP0VynlMGV+wIbgCVVw3noSBAcLu5GVLyA0o2DJIMhC+fiUDDiaXZbd4oNRunT590ZHuOYpC22twDkyQmBZ2UUi5l1prWsKoFyNOuEdRBNwT2Bs1ek+eXTQ9dNqiFfx2Tfu7jK0KDoKqPoVpRXdK1lRH5tTRnaldNU2oBGU8k66cJ+BTLhAVNc02LVc3bd10xlbVK7meXSpWbPdFK0yAcYktXYqmdiS14zVtIcTKM4ztdlvclooxmxu2aVrGX72nEV5AhLT6/SGjNBCrH/1xMQAMYYiLOI6MeyPncx9wb0TmFImEwTFW8FUs0zCrhvQJOJnfaNleCHw6i9NlC9GYEoxCskeqPj0QizgoNMJ5zIhYRF8mYZkKWIcd1rHl0BvNyFO7EijHkHGk8wWyjlhDmAEDiqHwPPRr2s11XUu3jhmifBaziOeX/40P0A2E8QoCnZ/SOlK7HvCTStXvAXs+xWHCyQZ+qmFdIQz82E3A10MVBgxmZPdEuBzQHVfsjHN6F8tDNdpkDlz8nwadNecAMkFhAvX4YTpYT36VTdTsmM5t8OfLMNz7jX3rcV5LCZw7p4astYflxVBmQ3TYMWkN3rbOchpEI7Rcoru48+O5GU3ws1WeN8uztz8Wy7DK8N0AXie/R4/JqxNF5bunyGgyZg5+lPr+xLXK610EdvWBgUh6yX7Q6aNXGm8G413f2k1e2r9fZpWg9cuF1mOD3Uat0bJlbemdv52ukw1elvaUPtyKfqXX7+9un8LnDev6zfkoHrO1Me1VurQrhg+dWpbOGf+87XTmR8n0FbA4LdUY+O1CV3YJie/FTFlIoM9SV2+lxIcLoEKrq11KO7xEyh0JPNnDw9rsOFX5azRanY7VtUsd0y2ZlWrV6poN1212TiJzYHFBsRXTGVGxlOQexuZ7gjjyONAAmL6JE6l0XPsGsY0EKvh0KA9BTDmMYynPJbRzwsVarOyp8zrbu7DfLrfRPtEKP2PRp33WmAlgOUm27ZwkDwGTFQGl22qsuZxrLmQp1miTiNAqblCRQiKVnSmR9WznzjU4iVYhKKJGFAdJCMXVYpUWxuCHf1tHmKfWYWecHrYv07r8dqqA9AmIcuAqlybILsInd4t1SuSLhN2xaZ0nfIJvJAFR50qWUzCCD0zyn96nRI1HNiIyoxPlzPPSkEM1LhPKAgUbgrM5z25rKeLy2NdP7Vij4rqYbDZJ2oCKkjcm4Q2VomHaxghwIoXpbRwvgRoZinHVLZARvwie2fMUE7GgI4EERHJiCunyimt/BFxd+76c9N21b4pcSFk6ATvxma0VyieLYvztqwZ7WPlJ80D+bWMWvHfsE6yzODJPeesLQudqpW6Aty/mAscSlkjtitk5+GcAnwXPG7MiZ1yEHKhpIuDrLwUlSjUNYRwnVPhtLTWcC2XKU7ytwHt3+gCTanH2OCP//jrTSToCGOSTjpMUX92xnjoCdH4mtsegH/XWLrddt2s1nfK53pbalpUVJceu/sH80XJWp8sZr/8D</con:value>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_6c17cdd9-beb7-431b-a0b4-4b2900e7d6cf</con:value>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>API_NOT_AUTHORIZED</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1423078645539</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E49494AACEF1F23E05307991F0A55BE</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E494926D55F1B46E05307991F0A3D11</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E49494AACEE1F23E05307991F0A55BE</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_c2c3c08d-4314-46c3-9261-6c778dd9f7d6</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0E494926D55F1B46E05307991F0A3D11</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0E49494AACEE1F23E05307991F0A55BE</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>expectErrTypeRightsTokenCreate</con:name><con:value>UserNotActive</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E494926D55F1B46E05307991F0A3D11</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E49494AACEE1F23E05307991F0A55BE</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E494926D55F1B46E05307991F0A3D11</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E49494AACEE1F23E05307991F0A55BE</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>784deff6-6799-4e9a-a143-d5b63d6e177d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>adf32bc8-2b28-44ce-81df-8d8c20ffcfea</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7bd0bd1b-138c-4f24-b601-efbbdd43999e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>49d9c381-3136-4b26-9496-d474f564e916</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32010 - STS GET BasicAuth - Device - FORBIDDEN - Username in 'mergedeleted' status - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="bf98ab29-0e5e-4fbf-a29c-9fbec6e68e8b">
      <con:settings/>
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="cfbdd9d3-0bfb-4595-9984-d235ee959a24">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="329a819e-c0b0-4462-8041-27c4f5fe22b8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="0e32ac34-1376-4b1e-a821-9ef197a44d4d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="007a8f78-46ae-4cbb-a48d-3ef4e070167a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="bc20cbf3-e41a-4202-98c5-0525360ad64a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="83bd330d-0d93-4a8c-94a1-82040d06a3b3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="4de3eedb-df6a-4e84-a1b1-3305244198cf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="ca643316-c640-4e57-9c51-67309afb14d7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="fd92a3e9-b13a-4a17-99c1-3ce5d4f29c4d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == mergedeleted" id="24e7fb7b-4efc-45e0-a19c-567055627e4c">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );
assert a.userSetStatus(useroid,"mergedeleted") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="45e9c1f8-d0f7-4842-9917-2099bf514c7a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C4184DE3D0A6EE05307991E0AF895</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>API_NOT_AUTHORIZED</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969420716</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C44F25C854849E05305991E0AC7AF</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_aa0a7909-f27a-4c0c-b064-8b958c41b88f</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>expectErrTypeRightsTokenCreate</con:name><con:value>UserNotActive</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C4184DE3C0A6EE05307991E0AF895</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C44F25C844849E05305991E0AC7AF</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C4184DE3C0A6EE05307991E0AF895</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C44F25C844849E05305991E0AC7AF</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>48d52be6-a019-4b8a-8c1b-6f97ac4ffcd8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c9fbfa05-5ceb-4b24-b137-7814ba42115a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32011 - STS GET BasicAuth - Device - FORBIDDEN - Account in 'deleted' status - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a81a25ab-52ae-49b3-a553-ab9f4a3cdeca">
      <con:settings/>
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="dc036b64-ac1e-45d6-b9dc-41dff9691b92">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="28e6e5d4-1b85-4519-a6c3-66a5e0234a7f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="ecf331b6-2710-49d2-9f5d-544771a9d7bb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="f5ef4267-a354-4c7d-8c02-a2d926927e84"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="f26557b6-0780-4a03-9dd8-38ccf991ce0f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="b914a18c-5449-47bb-bc71-54b1553a581d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="41ba6bf4-3e29-433a-9e11-7a98299068b0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="686dec7b-bcd7-48d7-9a5d-589bf46c920b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="3f01c8c9-e150-406f-bed5-8a095f93ed59">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT.STATUS == deleted" id="c9fbfa05-5ceb-4b24-b137-7814ba42115a">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def accountoid = tC.getPropertyValue("accountoid");

a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem") );

assert a.accountSetStatusDeleted(accountoid) == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="824b77e4-43d8-42e9-ad5c-f2c3750b47f6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D15091B8D2B1FE05307991E0AFD09</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>API_NOT_AUTHORIZED</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969425246</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C520BD6131571E05307991E0A1011</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_e0a9373d-a604-4e6b-b270-d3e04300a7d8</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025D15091B8C2B1FE05307991E0AFD09</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C520BD6121571E05307991E0A1011</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025D15091B8C2B1FE05307991E0AFD09</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C520BD6121571E05307991E0A1011</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>a7ec2053-97e2-4a1d-a987-cedb6bec12d9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    
    
    
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32017 - STS GET BasicAuth - Device - Account in 'pending' status - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="87e00be3-7b1c-4768-9385-fc286104fcf6">
      <con:settings/>
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="df1aa25b-6b08-41e5-a697-10f29a9fd12f">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeRightsTokenCreate","AccountNotActive");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep>
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="c2cff7aa-228c-41a2-8dad-06b5b3d37a0f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="2ed69247-1793-4318-842e-569fa6a560d9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="4e58312f-1da6-4255-b079-84e0f136cd9b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="8252fbc5-5a5e-4d30-96c6-207018bf271c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="232fa2c1-5e2f-46c3-99c2-c7e23e07be90">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="af1a4cda-35e8-43e9-b318-45dd35c5f240"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="b7cdfaf0-9497-4f75-87e6-dece28a5cee2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="36db4ee1-0cca-45aa-9851-e2858f05138b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT.STATUS == pending" id="b7ccfa2a-93e7-4169-b736-eb8c00bf0e0a">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def accountoid = tC.getPropertyValue("accountoid");

a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem") );

assert a.accountSetStatus(accountoid,"pending") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="722231ee-7eab-4b6e-aab4-115a98e9c370">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="fdfc1fee-82b9-4153-a2fc-41321362fcea">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA14523D4019EE05305991E0AA6E0</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969452345</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D15B0D9FF2B13E05307991E0AD726</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value>AccountNotActive</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_b2844b26-c875-4362-bac2-9bad59ef880c</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025CA14523D3019EE05305991E0AA6E0</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025D15B0D9FE2B13E05307991E0AD726</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025CA14523D3019EE05305991E0AA6E0</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025D15B0D9FE2B13E05307991E0AD726</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>8f5d1d78-642b-434a-bad2-0b8183a468dd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    
    
    
    
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32018 - STS GET BasicAuth - Device - FORBIDDEN - Account in 'mergedeleted' status - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="5643983f-6af0-4d32-84b4-d9c35999f306">
      <con:settings/>
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="cafce27d-5421-4d00-9137-8db130d094b5">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="22ffb026-7633-4a38-a81c-7173d1fe6521"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="4cfa1b5b-fc89-4374-8f83-49c17f842796"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="f6a030b0-db7e-4a74-8772-ec49f92bb47b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="b8223ec9-5937-43da-abb6-905bb7df2328">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="e84b95e8-c887-45a2-9b93-8d1357c8ce25">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="f96b640b-9f70-4e18-ac78-c98eec716dc0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="d1b1be59-f4e4-458e-afb0-c5f7b06c7c7d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="d3373bbf-9957-47d3-b0cb-5a156598ebb2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT.STATUS == mergedeleted" id="717ea812-7e5a-43ca-af44-494e0cdc8649">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def accountoid = tC.getPropertyValue("accountoid");

a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem") );

assert a.accountSetStatus(accountoid,"mergedeleted") == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="45a85705-3b38-40b4-a763-72188b4b6df6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="d1922824-a801-4e3d-8c99-88c46ee8de8f" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C51E513D01574E05307991E0A178D</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>API_NOT_AUTHORIZED</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969456579</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C5268D857156FE05307991E0A9A32</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_2d30befb-2419-4395-8abc-e40ef0eac779</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C51E513CF1574E05307991E0A178D</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C5268D856156FE05307991E0A9A32</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C51E513CF1574E05307991E0A178D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C5268D856156FE05307991E0A9A32</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>701ab9e0-3ec4-4791-9721-0f7ee7f7e42f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>676840ff-17e7-4565-b7fe-e00e1ef0e89c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32030 - STS GET BasicAuth - Device - FORBIDDEN - Full user attempts to retrieve deleted assertion - P2" searchProperties="true" id="390687db-04f0-4592-9ff8-dfd0598b2fc2">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="c16e5a0c-4c56-4331-a8e7-ee9a6a663b8f">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","10");</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Call Account Create" id="f950d5b7-57df-4a80-9c05-fd8c2d5051fd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call First User Create" id="c20e03a8-60a5-4cfc-8a0e-c361b1022437"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="09e391ad-3cbf-4248-a203-87fa8bec08a4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="8af4a845-55b3-42de-b3f9-5ece0d9eeb7c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="e4965ec9-2432-4a2d-ab37-b132926a0678">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="f10088a6-bc0a-4f6e-8f84-8f2a4d8b3b72"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="249274bd-ebd7-4674-8a33-11380b6f076b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="166ff0c3-5386-41ff-8639-3f055211c094">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set NODE_USER_SAML_ASSERTION.STATUS to deleted" id="701ab9e0-3ec4-4791-9721-0f7ee7f7e42f">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def nodeid = tP.getPropertyValue("nodeDeviceDefault");
def assertId = tC.getPropertyValue("assertionUUID");
def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

if (counter == 1) {
	try {
		a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
		assert a.samlSetStatus(assertId,"deleted") == 1;
	}
	catch(Throwable e) {
		log.info "ERROR during dbUtils.dbSAMLAssertion - $e";
	}
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="d0099ad9-d65c-459f-a299-041d0c56d1cd">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Execute another STS GET API call if necessary" id="676840ff-17e7-4565-b7fe-e00e1ef0e89c">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS Get");
} else {
	if (counter == loopuntil) {
		tC.setPropertyValue("counter",counter.toString());
		testRunner.gotoStepByName("Call STS");
	}
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D1508C6D32B1DE05307991E0AA8E2</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>10</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969461027</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D16B81D1B2CF7E05307991E0AB675</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>stsGetAction</con:name>
          <con:value>skiptokenlifespancheck</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87374</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_2c2b3c0e-6b98-4ae8-8a29-8a0e59f98c92</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025D1508C6D22B1DE05307991E0AA8E2</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025D16B81D1A2CF7E05307991E0AB675</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025D1508C6D22B1DE05307991E0AA8E2</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025D16B81D1A2CF7E05307991E0AB675</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>0f8126f0-0723-42e4-8217-755dd17f73b2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>706b02c3-13a4-479d-88be-ee20f863cd32</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32031 - STS GET BasicAuth - Device - FORBIDDEN - Standard user attempts to retrieve deleted assertion - P2" searchProperties="true" id="7b2d411b-1282-4610-94ff-fd8758e3ca30">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="dc306564-3b3b-44a7-b98d-35872afc969b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","10");</script></con:config></con:testStep>
      
      <con:testStep type="groovy" name="Call Account Create" id="0d3042d1-7f82-419b-858f-4d203f0dc7da"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call First User Create" id="ca173fd2-11b4-4777-ae11-17d3aebb33af"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="1c1e606d-f3f2-41e9-9c27-4a747c6b5760"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="791ddc97-1fdf-42fb-b98d-44121e0d8de8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="a0837657-dead-4fde-9c1c-7eb654847d2c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="5e995f35-ca30-4d70-9a0b-3000cb1e8915"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="ccd71618-83a1-4859-a910-720f4dec0ac9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="1b321a02-f848-43f0-bcae-f48045025c28"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="42b33156-c8a0-46b7-8cb4-1b127c7deabb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate" id="9b60f57d-23b2-42a6-ad54-b0cb2b726ce5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="62bdc0ce-5c99-483e-b41a-6ac69857b9cf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator for blocked:tou standard user" id="3df2dab5-d54e-456f-b39a-8fe02436bb53">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator for blocked:tou standard user" id="08f28bd4-c408-43a5-924a-d64c57e68de1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU for Second User" id="30d0b399-a637-4631-87b7-960d1581b09b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="ccc4fa63-9e59-49c2-8079-d8c8d3b9fb13"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="97aac5fd-0426-4354-83a5-17d30cb23d69">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set NODE_USER_SAML_ASSERTION.STATUS to deleted" id="d54fd0af-6202-46e1-b99a-87fc0e03ed60">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def nodeid = tP.getPropertyValue("nodeDeviceDefault");
def assertId = tC.getPropertyValue("assertionUUID");
def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

if (counter == 1) {
	try {
		a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
		assert a.samlSetStatus(assertId,"deleted") == 1;
	}
	catch(Throwable e) {
		log.info "ERROR during dbUtils.dbSAMLAssertion - $e";
	}
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="914c2fbf-be51-4205-807b-c12838d4625f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Execute another STS GET API call if necessary" id="3f5704fe-9c32-4781-8deb-8be58635b657">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS Get");
} else {
	if (counter == loopuntil) {
		tC.setPropertyValue("counter",counter.toString());
		testRunner.gotoStepByName("Call STS");
	}
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C5268D86A156FE05307991E0A9A32</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>10</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969465570</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D14810B352B0BE05307991E0A316E</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>stsGetAction</con:name>
          <con:value>skiptokenlifespancheck</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87375</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/_b5345dbd-ad2b-4593-b6b6-3cc49f828274</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C5268D869156FE05307991E0A9A32</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025D14810B342B0BE05307991E0A316E</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C5268D869156FE05307991E0A9A32</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025D14810B342B0BE05307991E0A316E</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>5774d243-d73b-4941-b9e2-274a38599f9a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>37db7fea-ff2a-4d1d-b9cf-fc6f80e5db77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5b1e8fa2-4899-40b2-8096-cfa2e41692f7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32032 - STS GET BasicAuth - Device - FORBIDDEN - Basic user attempts to retrieve deleted assertion - P2" searchProperties="true" id="51a3c3ef-41f0-4bb5-8ef8-66672b1fe1b3">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="56dabf7a-d700-402e-ba24-5cdf7db497bc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("stsduration",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("Username",null);
tC.setPropertyValue("UserPassword",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","10");</script></con:config></con:testStep>
      
      <con:testStep type="groovy" name="Call Account Create" id="64a0da36-0137-47a2-97ea-13ba423a5f92"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call First User Create" id="73a07978-2012-4d5e-b445-3d8dfb0f6440"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="8e98798d-ec05-4cf3-8c92-170ad613ea41"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="da59690a-f269-4034-894e-3bd82c63e74d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="6bbe6b8f-22fc-4938-939b-4f942787af53">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="3c4ca09e-c129-4370-929d-99c24ff8940d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="ddbeca6b-5d48-4eab-a6b8-ad111b3e2586"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="eba0b6f9-9972-4ba8-b946-cf82b960865b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="60898687-3eff-46c2-b6c8-2293c89f4897"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Basic UserCreate" id="4cdfeb0a-2fcf-411b-a026-b5abfbfc4acc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("BasicUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="71c21ee3-75fd-40fd-b8f8-949708bd34e8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator for blocked:tou basic user" id="6bf3496d-e427-4019-86b1-6ac3aeca0d84">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator for basic user" id="642c0092-3977-4b9f-99ea-830dfecb87d5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU for Second User" id="263fc537-b950-4e36-80a4-fe17d6500efe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="d4689f03-5522-44a1-b3d9-12e310715e95"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="1d458f86-a020-4dc1-b78c-1e72f05683ca">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set NODE_USER_SAML_ASSERTION.STATUS to deleted" id="0f8126f0-0723-42e4-8217-755dd17f73b2">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def nodeid = tP.getPropertyValue("nodeDeviceDefault");
def assertId = tC.getPropertyValue("assertionUUID");
def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

if (counter == 1) {
	try {
		a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
		assert a.samlSetStatus(assertId,"deleted") == 1;
	}
	catch(Throwable e) {
		log.info "ERROR during dbUtils.dbSAMLAssertion - $e";
	}
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="8b61443c-86ed-4a89-9996-48014e26d159">
        <con:settings/>
        <con:config><script>

import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Execute another STS GET API call if necessary" id="706b02c3-13a4-479d-88be-ee20f863cd32">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS Get");
} else {
	if (counter == loopuntil) {
		tC.setPropertyValue("counter",counter.toString());
		testRunner.gotoStepByName("Call STS");
	}
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C520F02181586E05307991E0A6F0D</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>F8F12CDCE9668AEFE0401F0A05995484</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>F9239F0C885E6819E0401F0A059941FF</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>10</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stsapi_107_1409969470464</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C520B4C3E1584E05307991E0A9B8E</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>stsGetAction</con:name>
          <con:value>skiptokenlifespancheck</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87376</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_e4180b25-92b0-433c-ac27-3445eeb35ac7</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsduration</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserPassword</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C520F02171586E05307991E0A6F0D</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C520B4C3D1584E05307991E0A9B8E</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C520F02171586E05307991E0A6F0D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C520B4C3D1584E05307991E0A9B8E</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>c391c1fc-efd6-4fb8-863a-5d791d1a6cbf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32033 - STS GET BasicAuth - Device - FORBIDDEN - Full user attempts to retrieve expired assertion - P2" searchProperties="true" id="47b446e3-8523-42f5-849b-951f7145d675">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="f86a86fa-2f4d-45e7-bc4d-197ae3eedd0b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","10");</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Call Account Create" id="36bfcdec-4db9-4436-bcd3-d04ece06d508"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call First User Create" id="0b7dee20-c742-4e8b-8afb-dd20b7ae4384"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="81ab5ba3-46df-42ae-99ce-1911de930837"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="f6b9bcd8-5871-4414-acbc-7cda5799b978">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="0869b2b1-5360-4599-a6a3-da5e5ab4516c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="4130b33b-1301-4b46-ac60-eab17aa8c0c5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="80b33492-1705-42d8-a3c4-83e6b1b1c9b1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="c5e32caa-6623-49ce-8028-8f7b1ca7150a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Expire the existing assertion" id="37db7fea-ff2a-4d1d-b9cf-fc6f80e5db77">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def nodeid = tP.getPropertyValue("nodeDeviceDefault");
def assertId = tC.getPropertyValue("assertionUUID");
def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();



if (counter == 1) {
	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	log.info "nodeid[$nodeid]";

	assert a.samlExpireAssertion(assertId, nodeid) == 1;

	tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="5b1e8fa2-4899-40b2-8096-cfa2e41692f7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Execute another STS GET API call if necessary" id="5774d243-d73b-4941-b9e2-274a38599f9a">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS Get");
	tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");
} else {
	if (counter == loopuntil) {
		tC.setPropertyValue("counter",counter.toString());
		testRunner.gotoStepByName("Call STS");
		tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
	}
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D14C64EC72B2DE05307991E0A39F4</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>10</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969474459</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D14814C4A2B0DE05307991E0A764E</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>stsGetAction</con:name>
          <con:value>skiptokenlifespancheck</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87377</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_beed6e0a-bbe2-45fe-a709-59f5cb44e81a</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025D14C64EC62B2DE05307991E0A39F4</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025D14814C492B0DE05307991E0A764E</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025D14C64EC62B2DE05307991E0A39F4</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025D14814C492B0DE05307991E0A764E</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>5a9f9387-2f59-4e66-ab9a-8de74ed0ed2e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b38c021b-4b73-4768-85db-e6264ef4d606</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    
    
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32034 - STS GET BasicAuth - Device - FORBIDDEN - Standard user attempts to retrieve expired assertion - P2" searchProperties="true" id="d6add24d-d587-4da2-b10d-d625e638c56b">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="a54d1d60-3fba-4e1e-9b07-879b259daea6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","10");</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="30c70e10-1890-4935-9670-8a47aefd30fc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="fb175ba9-a9dd-465d-b54d-375100a2a095"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="775fbd37-3aaf-4c3b-829d-2cf3e17d43c4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="18c595de-9ea8-440a-948e-230955fb97a6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="33d21230-37bd-4f86-bce4-6ca0d79537c2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="6e31de00-723d-440e-8bb4-65aeaa5f629d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="74a46411-7c4a-48a0-b4e2-7589ab5a1155"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="0cd663e1-31c3-44e7-9f33-3175707940a0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="64d6f7f9-76e5-4b89-91a0-5df0980c6c81"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate" id="b6302ddf-1905-42c1-a649-8489476e74ae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="6139078e-d499-439b-9d07-4f809527c87b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator for blocked:tou standard user" id="b9f2d1f4-6896-4f1a-a02c-dd43a2bfbc3f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator for blocked:tou standard user" id="c73de4dc-ee9d-44e1-b02d-d92d9c5977d1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU for Second User" id="8f1dadcc-7323-42b9-9da8-d74a46841fbc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="3fe60290-4a89-44ed-adaa-623b2b82c53d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="35fe2d12-a879-42fe-9ca8-b8655898679b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Expire the existing assertion" id="c391c1fc-efd6-4fb8-863a-5d791d1a6cbf">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def nodeid = tP.getPropertyValue("nodeDeviceDefault");
def assertId = tC.getPropertyValue("assertionUUID");
def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();



if (counter == 1) {
	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	log.info "nodeid[$nodeid]";

	assert a.samlExpireAssertion(assertId, nodeid) == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="c37fc955-d670-43b3-ad67-053778bc9891">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Execute another STS GET API call if necessary" id="926e464a-eb39-4ff2-aa42-114e0a0ad729">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS Get");
} else {
	if (counter == loopuntil) {
		tC.setPropertyValue("counter",counter.toString());
		testRunner.gotoStepByName("Call STS");
	}
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D16B7B9FA2CE7E05307991E0A5A89</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969478716</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D16B73E4C2CE5E05307991E0AD034</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>10</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>stsGetAction</con:name>
          <con:value>skiptokenlifespancheck</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87378</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_fd5a5e46-e4dd-42d6-9624-cdbe8b993e29</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025D16B7B9F92CE7E05307991E0A5A89</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025D16B73E4B2CE5E05307991E0AD034</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025D16B7B9F92CE7E05307991E0A5A89</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025D16B73E4B2CE5E05307991E0AD034</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>d01b323c-ca12-45a1-b6c4-b5a12be19784</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>48134fb3-4294-40bc-a086-09ff93564ed6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32035 - STS GET BasicAuth - Device - FORBIDDEN - Basic user attempts to retrieve expired assertion - P2" searchProperties="true" id="0a2635b5-cda0-4b15-89a0-0b35be7127ac">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="65f578d5-ed34-4ef6-9ce8-6c688e953cfa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("stsduration",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("Username",null);
tC.setPropertyValue("UserPassword",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","10");
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="Call Account Create" id="b94f0f38-7a04-4d73-80fc-c73ee78d74e7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="b58afde2-921f-499c-9e35-b70919cb0449"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="9d4626dd-044a-4ba8-a2c7-d690ac8c1d44"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="32927a1d-0b6c-45cf-9e22-c77bc96c756f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="a5a0525a-bccc-4aa5-a612-9895617c60f1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="168f64ab-3004-4496-8ae5-1ced94f271c8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="fefb743c-7e46-45bc-b6f6-f2859221267d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="25294839-4d4e-4c50-b9c4-56864373aaa8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="4fd5904c-0273-4a38-86d2-c5607e6cfdcd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Basic UserCreate" id="488a7abc-76f4-4a96-861d-2ae6fb6035f6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("BasicUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="c43887c1-6ef0-4181-bf58-759802e7b2f0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator for blocked:tou basic user" id="07e3417c-05fc-4d0d-a915-ef89b97cbcc5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator for basic user" id="b484650c-9299-4493-9c26-10f52d69845b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU for Second User" id="9228cf96-7a34-473f-a88a-694a7a510def"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="9f3e0d26-0f5b-4e60-8dbc-5127e1a9b689"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="666177ca-2c6a-431a-9938-43b5b30c9ef7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Expire the existing assertion" id="5a9f9387-2f59-4e66-ab9a-8de74ed0ed2e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def nodeid = tP.getPropertyValue("nodeDeviceDefault");
def assertId = tC.getPropertyValue("assertionUUID");
def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();



if (counter == 1) {
	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	log.info "nodeid[$nodeid]";

	assert a.samlExpireAssertion(assertId, nodeid) == 1;
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="f6a21a51-807a-4e44-8ba4-3927857b9e15">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Execute another STS GET API call if necessary" id="b38c021b-4b73-4768-85db-e6264ef4d606">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS Get");
} else {
	if (counter == loopuntil) {
		tC.setPropertyValue("counter",counter.toString());
		testRunner.gotoStepByName("Call STS");
	}
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D16B589D82CF3E05307991E0A2AF8</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stsapi_107_1409969483441</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D1480C06A2B09E05307991E0AFACC</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>10</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>F9239EC255B93ADAE0401F0A05993BD8</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>F923A2E92EF65347E0401F0A05992FF7</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>stsGetAction</con:name>
          <con:value>skiptokenlifespancheck</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87379</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_43349af6-38a5-4b23-b43f-5088bacab53b</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsduration</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserPassword</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D16B589D72CF3E05307991E0A2AF8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D1480C0692B09E05307991E0AFACC</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025D16B589D72CF3E05307991E0A2AF8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025D1480C0692B09E05307991E0AFACC</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>6ab22323-786d-435e-89a0-ad21ee135bb2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32036 - STS GET BasicAuth - Device - Fifty Repetitive Assertions for full user no existing assertion status active - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="895b31e3-87fe-48b3-9e87-2e6bfb93ac78">
      <con:settings/>
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="f7a409dd-7e17-4f4e-b0dd-e59f43c086e1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","5");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="b96e8e14-0c7c-41cb-9915-683699a43171"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="310bc9e6-568d-4c5b-ac11-54cf784ea3e7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="ffc4ebd4-a4e3-4e32-b209-11352ed175a4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="f7ee1c29-8ad9-478b-b2d1-fc874e53201b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="51bccb6f-5374-4395-a1fb-a9a4905db6ed">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="0c305949-9fdc-4623-853e-3648f0e99286"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="ae656e49-45c1-4540-8369-a1c134fcf03d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush User Level Assertion Data" id="48134fb3-4294-40bc-a086-09ff93564ed6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Flush User Assertion data for Device")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="8390b752-9c7c-48c2-b332-079bbe2571c0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="ad7ad68c-6f48-4679-9a2c-05a64495f714">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="e2c0cac6-fc3b-4e71-838c-d246f3d7a2f7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Loop again if necessary" id="d01b323c-ca12-45a1-b6c4-b5a12be19784">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Flush User Level Assertion Data");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D16B589E42CF3E05307991E0A2AF8</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969488182</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D1508A7902B19E05307991E0A893B</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopUntil</con:name>
          <con:value>5</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87384</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_91bd5411-f304-4a78-83cf-35eeca9b3a8a</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025D16B589E32CF3E05307991E0A2AF8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025D1508A78F2B19E05307991E0A893B</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025D16B589E32CF3E05307991E0A2AF8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025D1508A78F2B19E05307991E0A893B</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32037 - STS GET BasicAuth - Device - Fifty Repetitive Assertions for full user no existing assertion status blocked:tou - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="bd630f60-539b-4621-b91b-84d5defaf14f">
      <con:settings/>
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="6c62bf2f-f547-49f3-a110-499b6740b9e9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeRightsTokenCreate","UserNotActive");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");</script></con:config>
      </con:testStep>
      
      
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="efc238b4-c426-486b-99f0-ae15b2749f39"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="5c1751ec-aecb-4da7-a0fd-09f596ffb19a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="e2e8efd4-d251-4be7-9c8a-ba9126be4605"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="2d55f11d-1921-41a6-8626-592f25cfbb45">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="cd4f846a-2a8c-48dc-bad5-c98f8936e0ce">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="17c35b42-b5c1-41c3-8e59-601e95b360fa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="219a8c68-11c5-4266-9b0c-f4391f299885"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush User Level Assertion Data" id="61e78816-623a-4431-b755-25c9d2dcf3d4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Flush User Assertion data for Device")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="b2e15843-6760-4513-bb6b-80a24e3b0ef4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == blocked:tou" id="104f7938-5f6d-4e16-a37f-217c9d4d0902"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );
assert a.userSetStatus(useroid,"blocked:clg") == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Get" id="eda769f7-821c-45cb-80a5-414b75866196">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="18246132-ba52-4c2d-8fbf-b1778650371e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Loop again if necessary" disabled="true" id="1154861a-abf5-4711-ab9c-7130bd632434">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Flush User Level Assertion Data");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D16AE77E42CE3E05307991E0A193B</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969492269</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D15B35ADC2B23E05307991E0A579C</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopUntil</con:name>
          <con:value>50</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87385</con:value>
        </con:property>
        <con:property>
          <con:name>stsActionValidateNodeUserTable</con:name>
          <con:value>false</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>expectErrTypeRightsTokenCreate</con:name><con:value>UserNotActive</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025D16AE77E32CE3E05307991E0A193B</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025D15B35ADB2B23E05307991E0A579C</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025D16AE77E32CE3E05307991E0A193B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025D15B35ADB2B23E05307991E0A579C</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>104f7938-5f6d-4e16-a37f-217c9d4d0902</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32038 - STS GET BasicAuth - Device - Fifty Repetitive Assertions for full user existing assertion status active - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="a64883b4-bb7d-40e5-bb12-ca175d724f1f">
      <con:settings/>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="7fd8cba8-30e7-4fb4-9b39-7d481d94b8e5">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","5");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="f43fe2a5-c7c3-4757-a3e4-d3bf5a02a8ae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="b5470d5a-623e-4ae1-82af-8a7bbfd34de2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="124271ed-98e4-4288-a9b8-3d59df32521f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="3e6187c7-3223-4ebd-abd3-4c592db6ff21">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="fb49bd55-9f92-4f2e-9145-2df437a80260">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="724fab27-e188-437b-859c-b3bc30e8f43a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="ddbd70b3-95c7-4ea0-8798-fe825eed5323"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="bad8ae17-4dac-4dc9-9616-5775b0990249">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="5349930b-7fbe-45a3-ba31-1e2b76dba94a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="18da4b1b-e11d-4399-9b8c-6524726830fb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Loop again if necessary" id="cb7b2a1d-5f56-4874-8645-abf08b83bf2d">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS");
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D1508A7A92B19E05307991E0A893B</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969496344</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D1480C0AC2B09E05307991E0AFACC</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopUntil</con:name>
          <con:value>5</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87386</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025D1508A7A82B19E05307991E0A893B</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025D1480C0AB2B09E05307991E0AFACC</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025D1508A7A82B19E05307991E0A893B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025D1480C0AB2B09E05307991E0AFACC</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32039 - STS GET BasicAuth - Device - Fifty Repetitive Assertions for full user existing assertion status blocked:tou - P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="523e83e0-9a59-4dbf-b7a6-674a11293a25">
      <con:settings/>
      
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="529ddbf8-87c4-4c68-aa61-d58db085e512">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeRightsTokenCreate","UserNotActive");
tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="c647e35e-7799-444e-9d11-f63f73a20424"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="5194d256-113f-45e1-bc65-bc590aef1b4b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="3a02bfaa-a270-4b03-ae93-a7bcdd69b8fe"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="16502bf9-1774-4678-add0-1557c1e9ad78">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="6434ee9e-ac45-4144-9ac4-307aa80c9e9a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="4ae48812-94b5-4886-aafe-772521dbb13e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="a18a669b-79a5-45d4-b3a1-fbc71c0227d5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set ACCOUNT_USER.STATUS == blocked:tou" id="7c457426-24a5-4958-afb0-076f6d4577d9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def useroid = tC.getPropertyValue("useroid");

a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem") );

assert a.userSetStatus(useroid,"blocked:tou") == 1;
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS" id="6dbf3a00-6d3d-4602-ae44-8eb2185f895f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="295c5284-8685-4de6-bdd5-699dddda3194">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="bca1923e-e16e-4e19-98d0-a71c7165c108">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Loop again if necessary" disabled="true" id="ffea19fb-34d2-4084-9e27-c87cf2e6852e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS");
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D15B376282B27E05307991E0A7285</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969500935</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA341901C01A0E05305991E0A5B70</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopUntil</con:name>
          <con:value>50</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87387</con:value>
        </con:property>
      <con:property><con:name>stsActionValidateNodeUserTable</con:name><con:value>false</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/_bc6af8d0-1fe7-4444-9a16-62740ed0969c</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>expectErrTypeRightsTokenCreate</con:name><con:value>UserNotActive</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025D15B376272B27E05307991E0A7285</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025CA341901B01A0E05305991E0A5B70</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025D15B376272B27E05307991E0A7285</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025CA341901B01A0E05305991E0A5B70</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>6dbf3a00-6d3d-4602-ae44-8eb2185f895f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32040 - STS GET BasicAuth - Device - UNAUTHORIZED - Basic auth header not supplied - P0" searchProperties="true" id="a637ecd1-3b81-40b5-8076-c009994c3d19">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="d0704bd9-6ccb-4555-88a1-a0eae74121bd">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("actionAuthHeader","EXCLUDE");
tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="3e7f513f-84ea-4e11-b843-2758dc3469fc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="588c2860-ddce-4cd4-ab63-4c13fa40f6e5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="192c04db-0e93-4f61-98b8-832e62a45cc8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="4897fa78-61b5-46d2-8e68-eaf6e28a34b5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="f49b0d0d-ab48-48c5-b94f-6d76ea2d1f76">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="4896a173-be07-489d-a56a-80a815155b3c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="f5179b5a-dd7a-4ac0-ad9f-1ff737edfc7c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="d99a9723-0928-4004-9814-9e5e8d394d56">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="7e19a92c-ca08-455a-9629-4361fde7e7c8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeSTSGet","UNAUTHORIZED");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D16B8428D2CFBE05307991E0AEDE8</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969506508</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C520F023D1586E05307991E0A6F0D</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>stsGetAction</con:name>
          <con:value>basicauthnulluser</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87388</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/_8f1f3ab3-d5c3-466f-b1cb-d96099485653</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025D16B8428C2CFBE05307991E0AEDE8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C520F023C1586E05307991E0A6F0D</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>actionAuthHeader</con:name><con:value>EXCLUDE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025D16B8428C2CFBE05307991E0AEDE8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C520F023C1586E05307991E0A6F0D</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32041 - STS GET BasicAuth - Device - FORBIDDEN - Basic auth header has different username than granted to assertion - P2" searchProperties="true" id="73aa5e8f-a380-4b4b-a2b7-115d57b5def6">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="1f49a999-d04e-4034-b20f-bad385de9abc">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGET","SUCCESS");

tC.setPropertyValue("stsGetAction","basicauthdifferentuser");
tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="749425f6-81f7-4e4a-bfe0-e7dd74b7fcba"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="9792fc03-b8f8-4dff-b71c-785b5cdc5d5a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="097556cc-24ae-4420-83d9-89ab780eb3bd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="814ad807-89a2-47b0-b6a4-3825bd1eebc4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="b0c8ca1b-c707-4200-98f7-28a14b66e349">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="d39cca6f-76ec-4672-a5c3-2d3b399d737d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="83331925-f205-40f2-818b-0c99bb9ef1f2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="dd6a96df-1c19-4bc5-825a-13172367cd49">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="14703614-ae26-4572-8f01-1ba21e57d71b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username","stsapi_107_1382135888107");
tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D15B426CF2B2BE05307991E0A23D8</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969510432</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D16B0651C2CFFE05307991E0A0E78</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>stsGetAction</con:name>
          <con:value>basicauthdifferentuser</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87389</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/_b4a031e6-dcb3-407b-af27-d6da514bd4a6</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025D15B426CE2B2BE05307991E0A23D8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025D16B0651B2CFFE05307991E0A0E78</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025D15B426CE2B2BE05307991E0A23D8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025D16B0651B2CFFE05307991E0A0E78</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>2d3c9330-e292-407f-91ae-9f2f23d8a434</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32042 - STS GET BasicAuth - Device - FORBIDDEN - Basic auth header has different password than granted to assertion - P2" searchProperties="true" id="7015e2aa-1eaf-4bbc-80a0-54a92f595555">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="9d6deb82-a6e9-4662-b17f-38c0aa1f5e48">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGET","SUCCESS");

tC.setPropertyValue("stsGetAction","basicauthdifferentpassword");
tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="872f1538-43dd-4678-8d23-04c8ae344eed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="1944545d-a58f-4c5c-861f-ae1651a7b95c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="c6d571a6-688a-4ba6-b1f6-1c97d7570218"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="b9a288e9-bd86-443a-8163-2fce19d3c612">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="a276034c-fe6d-4551-a108-c32b7b99a1b4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="e1f966f1-6aed-4fc0-aabf-7a57d774fb34"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="49b53d59-2138-4bbe-acf6-3d23c95b427d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="7a260fea-542d-4e71-8c8c-1b7e71928abf">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="fe18883b-5418-443a-aace-c0ac5b2e6df2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("UserPassword","testing123");
tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D16B28E512CD5E05307991E0A277D</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing123</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969514913</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C5268D89C156FE05307991E0A9A32</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>stsGetAction</con:name>
          <con:value>basicauthdifferentpassword</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87390</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/_0c1ad19e-8ed1-4b77-a249-9138c2749e62</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025D16B28E502CD5E05307991E0A277D</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C5268D89B156FE05307991E0A9A32</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025D16B28E502CD5E05307991E0A277D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C5268D89B156FE05307991E0A9A32</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32043 - STS GET BasicAuth - Device - FORBIDDEN - Basic auth header supplied nonexistent username - P2" searchProperties="true" id="8525d5a3-3ddd-4930-b873-89a2605984bc">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="c8c519f9-72ed-469d-a76a-3ef9955ff991">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGET","SUCCESS");

tC.setPropertyValue("stsGetAction","basicauthusernoexist");
tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call Account Create" id="76cac843-ce90-43ea-bd76-1ffcf4c5c2dc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="b86d6462-95fb-4833-b2f3-3457f3984dce"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="041c627f-3ed5-4ab1-805c-635e025513c7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="4259055c-a6ac-4147-b420-47cb6134cd54">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="443e762d-1aa0-490c-a4da-d4975cfb41ac">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="49e7e2d4-6b5e-4c1b-b73a-a30ded2c3115"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="d5e6cb03-05ff-4a48-ac54-b8fe37e49615"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="4fa512b4-6b80-4fa0-9cc6-1d26050da25a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="960982e5-e5a5-454f-a7d3-4b19636e0ed9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username","stsapi_107_1382135788787878888107");
tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Loop again if necessary" id="2d3c9330-e292-407f-91ae-9f2f23d8a434" disabled="true">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS Get");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C516C0F99157EE05307991E0A05CC</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969518913</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D14C7A54F2B2FE05307991E0A8162</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>stsGetAction</con:name>
          <con:value>basicauthusernoexist</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87391</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/_5f640ef4-6ee0-40d4-8e08-684699266cec</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C516C0F98157EE05307991E0A05CC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025D14C7A54E2B2FE05307991E0A8162</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C516C0F98157EE05307991E0A05CC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025D14C7A54E2B2FE05307991E0A8162</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32044 - STS GET BasicAuth - Device - FORBIDDEN - Device Basic auth header not supplied - P2" searchProperties="true" id="95ecf48d-c97a-4a93-b805-8115fbf810be">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="94d43074-895c-4aa7-8352-38ed9f2868fb">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("actionDeviceAuthHeader",null);
tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="6351a439-9215-4daf-934a-e892112dc5c6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="1c0de67c-118a-4fd9-9e46-54aeb5d2824c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="689b2989-a725-4970-8b3e-0f8c809aa2d5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="6fc1751a-46f5-46a1-8c8f-d30e94a19211">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="9bae97c2-7607-489f-89f4-87f1417c5141">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="60cd4e20-ea41-418d-91a0-f39dfa2372a2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="a6952671-e7ca-41bf-89f2-512ff800c567"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="51a91614-dc0a-4cfb-9dca-5350411ac0cb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="dfe58211-44d7-4fbc-9fab-66be7a00b297">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeSTSGet","Forbidden");
tC.setPropertyValue("actionDeviceAuthHeader","EXCLUDE");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D16B50EED2CEDE05307991E0AA7AE</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969523239</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D16B4487B2CDBE05307991E0AE963</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>stsGetAction</con:name>
          <con:value>basicauthnulluser</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87388</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/_8f1f3ab3-d5c3-466f-b1cb-d96099485653</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025D16B50EEC2CEDE05307991E0AA7AE</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025D16B4487A2CDBE05307991E0AE963</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>actionDeviceAuthHeader</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025D16B50EEC2CEDE05307991E0AA7AE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025D16B4487A2CDBE05307991E0AE963</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32045 - STS GET BasicAuth - Device - FORBIDDEN - Full user attempts to retrieve mergedeleted assertion" searchProperties="true" id="2c2f489c-ba9e-4948-9a75-205da4d0f63e">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="3600e49b-fcca-41aa-9b22-2ed4a0813689">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","10");</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Call Account Create" id="542c084f-500b-4740-ac88-1220b126b13a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call First User Create" id="5da0badd-1c5b-452c-9716-99f4b8da148f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="17bbca1a-c8b0-4ec9-b2ca-e8e432d74f18"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="14e40b05-da65-4fd6-95f4-50ed63a03b34">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="530044d7-abc4-4d31-8b5f-4ac6d6f61d7b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="488ebe96-7185-4bd6-9e6e-eb0c920dec1e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="30d08128-c8ac-464f-b947-72d1979a9786"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="5db61f64-c1f0-4a0f-98bb-096e7944dbf1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set NODE_USER_SAML_ASSERTION.STATUS to mergedeleted" id="baf42a54-83a8-4b38-8973-7415f43c2880">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def nodeid = tP.getPropertyValue("nodeDeviceDefault");
def assertId = tC.getPropertyValue("assertionUUID");
def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

if (counter == 1) {
	try {
		a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
		assert a.samlSetStatus(assertId,"mergedeleted") == 1;
	}
	catch(Throwable e) {
		log.info "ERROR during dbUtils.dbSAMLAssertion - $e";
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="8cb637d2-83b4-4c5e-844e-33acc2d66aa0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Execute another STS GET API call if necessary" id="59810768-fdb2-40d4-8a52-adbaa7413df5">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS Get");
} else {
	if (counter == loopuntil) {
		tC.setPropertyValue("counter",counter.toString());
		testRunner.gotoStepByName("Call STS");
	}
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C51E513F91574E05307991E0A178D</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>10</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969527467</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D14810B782B0BE05307991E0A316E</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>stsGetAction</con:name>
          <con:value>skiptokenlifespancheck</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87374</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_2c2b3c0e-6b98-4ae8-8a29-8a0e59f98c92</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C51E513F81574E05307991E0A178D</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025D14810B772B0BE05307991E0A316E</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C51E513F81574E05307991E0A178D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025D14810B772B0BE05307991E0A316E</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>0f8126f0-0723-42e4-8217-755dd17f73b2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>706b02c3-13a4-479d-88be-ee20f863cd32</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32046 - STS GET BasicAuth - Device - FORBIDDEN - Standard user attempts to retrieve mergedeleted assertion" searchProperties="true" id="37e261b9-48e0-4753-b38f-bda9d3b2b848">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="37683d74-fbf7-4bf3-91f9-e6024da1a4ca"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","10");</script></con:config></con:testStep>
      
      <con:testStep type="groovy" name="Call Account Create" id="00a8bcd8-eebc-4812-a439-50f066deddd0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call First User Create" id="07309023-354e-4eb5-8ea1-d7850d33eadb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="8ef3dd5b-c54e-4676-89d7-6afff8fc67a9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="283ae787-5cd3-427d-a3db-38ca84d504b1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="d8e5e399-361c-49bf-8e0d-bc0ecb081982">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="9543e16f-1171-4483-81a3-1bbad00e9b79"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="117bf4e0-947a-4589-a091-9bd41201db08"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="03678f23-e61c-498b-b17d-6b478e87638e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="94bd16b3-95ff-401d-a985-8f811ee0fe2a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate" id="890b658e-dc8e-4084-9d72-11da3f647bcf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("StandardUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="8517496b-7c45-424e-8d65-e9a288e3b098"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator for blocked:tou standard user" id="a47a4f94-3501-4ddf-acce-95c132751463">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator for blocked:tou standard user" id="fe823f06-1b17-4d5f-af8f-936a93451bdb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU for Second User" id="a565c4f6-f59f-47df-b949-9aae21acb362"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="0aadbd73-18e7-46d1-9db5-ddfad261cec9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="8abfdf8c-17f3-494b-bc32-e017f1efe55d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set NODE_USER_SAML_ASSERTION.STATUS to mergedeleted" id="9090973c-9a83-41be-ba75-feb0c9e54710">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def nodeid = tP.getPropertyValue("nodeDeviceDefault");
def assertId = tC.getPropertyValue("assertionUUID");
def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

if (counter == 1) {
	try {
		a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
		assert a.samlSetStatus(assertId,"mergedeleted") == 1;
	}
	catch(Throwable e) {
		log.info "ERROR during dbUtils.dbSAMLAssertion - $e";
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="3272dfdc-acdf-4369-b02f-2d47ed027b48">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Execute another STS GET API call if necessary" id="ad90cfcf-2b49-459b-b642-673f9a4e7077">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS Get");
} else {
	if (counter == loopuntil) {
		tC.setPropertyValue("counter",counter.toString());
		testRunner.gotoStepByName("Call STS");
	}
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C516BF651157CE05307991E0A1D33</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>10</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1409969532343</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D14C7A56A2B2FE05307991E0A8162</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>stsGetAction</con:name>
          <con:value>skiptokenlifespancheck</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87375</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/02/SecurityToken/Assertion/_b5345dbd-ad2b-4593-b6b6-3cc49f828274</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C516BF650157CE05307991E0A1D33</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025D14C7A5692B2FE05307991E0A8162</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C516BF650157CE05307991E0A1D33</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025D14C7A5692B2FE05307991E0A8162</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>5774d243-d73b-4941-b9e2-274a38599f9a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>37db7fea-ff2a-4d1d-b9cf-fc6f80e5db77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5b1e8fa2-4899-40b2-8096-cfa2e41692f7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32047 - STS GET BasicAuth - Device - FORBIDDEN - Basic user attempts to retrieve mergedeleted assertion" searchProperties="true" id="a67b4d56-bf3d-4bb8-9c71-08d3f8005eb7">
      <con:settings/>
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="d07c0bea-cd8b-4358-9378-bf4996c4b9c7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

tC.setPropertyValue("stsduration",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("Username",null);
tC.setPropertyValue("UserPassword",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","10");</script></con:config></con:testStep>
      
      <con:testStep type="groovy" name="Call Account Create" id="12b156ef-c582-443f-a54c-29b176bcd70b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call First User Create" id="f8f30687-ad69-4bca-9834-6b4f8de5f499"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="fc9631b0-857e-43c3-9c84-56106e329b6c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="e763cc97-ff9c-4dbb-acfe-f353460dcf54">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="2264e693-0e21-45d3-bcdc-44ab76400d16">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="acc5f4f8-b7a2-4a46-a490-91301609b4b3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - ULC" id="40e543b1-e6fc-4b02-9ae6-b18686148a51"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateULC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MAC" id="01c2dfb4-c96b-408c-a733-cfa9f0b89de8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMAC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Policy Create - MUC" id="8bc64e50-8ce7-4d6a-a98f-bcc1e25b1ebc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Basic UserCreate" id="411dd1e2-afae-4e8a-91f7-ee70cd5d9fda"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("BasicUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values for SecondUser" id="016de547-3bcc-4ffd-96bc-8aa34ab92a31"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator for blocked:tou basic user" id="668f2de0-dfc5-4e64-be00-f020934af36b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("actionSkipPolicyCheck","true");
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActiveNoUserLinkConsent"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator for basic user" id="f4d18b1c-db30-4aae-a68b-744c4814f63e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU for Second User" id="e91d20a7-c15e-45d6-aabf-6836a794fd9d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="64ab927f-1b5e-44dd-96b6-6b5b4bc966a8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="c334b5ae-6240-41f5-9fb1-d4c92caddb28">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set NODE_USER_SAML_ASSERTION.STATUS to mergedeleted" id="2a7a4eba-0f8e-4997-9be3-09aadada4bf9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def nodeid = tP.getPropertyValue("nodeDeviceDefault");
def assertId = tC.getPropertyValue("assertionUUID");
def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

if (counter == 1) {
	try {
		a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
		assert a.samlSetStatus(assertId,"mergedeleted") == 1;
	}
	catch(Throwable e) {
		log.info "ERROR during dbUtils.dbSAMLAssertion - $e";
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="1d1d0621-d70c-4df2-b893-ea4f4d7e4ff9">
        <con:settings/>
        <con:config><script>

import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("expectErrTypeSTSGet","FORBIDDEN:1119");
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Execute another STS GET API call if necessary" id="a658c4f8-8eed-4817-af9d-2b6944bf3768">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS Get");
} else {
	if (counter == loopuntil) {
		tC.setPropertyValue("counter",counter.toString());
		testRunner.gotoStepByName("Call STS");
	}
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D16B7BA342CE7E05307991E0A5A89</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>F9239EBFEC40A148E0401F0A05993BD6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>F8F12CD700926A81E0401F0A05995498</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>10</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stsapi_107_1409969536218</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C520F02601586E05307991E0A6F0D</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>stsGetAction</con:name>
          <con:value>skiptokenlifespancheck</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87376</con:value>
        </con:property>
      <con:property><con:name>contentLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_e4180b25-92b0-433c-ac27-3445eeb35ac7</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsduration</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserPassword</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D16B7BA332CE7E05307991E0A5A89</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C520F025F1586E05307991E0A6F0D</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025D16B7BA332CE7E05307991E0A5A89</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C520F025F1586E05307991E0A6F0D</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>c391c1fc-efd6-4fb8-863a-5d791d1a6cbf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties>
      <con:property>
        <con:name>QC_TestPlanDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestLabDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestSet</con:name>
        <con:value/>
      </con:property>
    </con:properties>
    <con:reportParameters/>
  </con:testSuite><con:testSuite name="7_4.0.9_TestCases" id="1d96ef90-0e7f-45d7-b3a6-8871cf93a005"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_40901 - STS - Device - UsernamePassword - Repetitive Assertions for full user - P0" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="24b0a686-e8d5-4092-b7f4-c98bce1d3085">
      <con:settings/>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="8f8f99ef-6c4d-426f-a78d-4127ed9337f2">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("expectErrType","SUCCESS");

tC.setPropertyValue("actionSkipPolicyCheck",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionUUIDPrior",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","5");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="57b84ec5-1355-47c7-8b44-7b5b4e305f9f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="42e40621-5b18-49bf-93ba-a0ca4816b95e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="10cc7469-debb-4bc5-8749-61005bef4066"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="da620d65-8285-4d32-8261-a850f313924a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="150342ba-95bf-4d09-964a-09e93ce81ff5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="886f9702-1d38-4d8e-a4c2-50070bfa8edc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="30eda05e-3ba1-4507-877c-0240e7c1340f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="5d338801-c3ba-4a03-b8fe-b3dffdab76e3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="6dc42a06-a455-4296-93b6-931ba236cfd3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="4b0258eb-3b69-4301-9a4d-531b7d07821f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION row count" id="10aaa3d0-0edc-402f-828d-280c2e9ddfb6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

tC.setPropertyValue("assertionUUIDPrior",tC.getPropertyValue("assertionUUID"));

int uuidcnt = 0;

if (tC.getPropertyValue("assertionUUIDPrior") != null) {
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		
		
		String assertionUUID = tC.getPropertyValue("assertionUUIDPrior");

		log.info "assertionUUID [$assertionUUID]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		assert dbUtils.samlGetUUIDNodeAssertionRowCount(assertionUUID) == 1;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Loop again if necessary" id="9b0a54a1-d99a-450a-944a-b034efbc80fb">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Call STS");
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E1BA9489DA96DCDE05305991F0A4D99</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZhb+I4EP0rKPuxgjiBJCUqSBDolrYUCuxuu19OrjOA28ShtkPgfv3ZAbJAaY87qVI1w/jNs2fmTa4EjiPbbwkBXNKElVZxxISfextGypmfYEGFz3AMwpfEH7f6975dQT7eHTFKvU7D+OvScsIprrtl5NUvyzXAdvly6tXLNgGwMXGQU6urUCFS6DEhMZMNw0aWU0a2+ptYVb9a9dFlpVp1fhuln8CFwlYhFWRsSa1Ew5hLufBNM8uySlatJHxm2ghZ5lP/fkzmEGOjebW5UZ6IN7fxpBICgSgiFZLE5pV5EHMVCn9MZwzLlMM2V/hZLmSiuqliQkFn34ziLIQ9Nk1yM8AsYZTgiP6N9fv0Qc6TsNSKZgmnch5/egkLaeAyrEiZWDX2zTAPqZ0JdMCQC1wWc2xtsUYwBQ6MQOnHqNcwvp1XtfzohGMmpgmPxaH53/gAW0KULCAsi921ttTOBzzxUs0rIH6PkSgVdAkPulkXmIDYVhPI+VClIYcpXd1ToRp0JTQ7c5/ekbl5jQ6dgZD/p0B7xdmA/MRRCs3YmtwPOKaT3mvohrd8nt04mVttBdXLRk5gPzh3FKXdmEdNWTTR5sTzu8uDLksCtI6HvTvRWZBu3H9f1Waz7MY2Hy++s+tZ9/HhAq8tW2RkHjvdweQhTeN28NZ/Xqy7y5tucivN25v0Tqx+WdeD76/RiAgyt7C4e8H9tHvRFch7beHRU8vz0rdsOhmi59+2U7t9QsR9gTV5S95R3GnTx1E0+EW9YbDyfvCWNxw9r4am68WTLEWoUVxnj/+hbzfz4/TlFYjcmboNep3StaoSll+LmfbQsDzNQ/2FFh8hgUmjqU9p7fBTJXc09FUNNzbqWu1WveZZ9Y7ndgKvi5wqcup16xq1Ardt70Rmw+KIYpCwKdW5tORu2uZrgiT2XwBz4MYXSB0scekhkQM24K2pBH6osO6+wuq2/hTo+LddThUTUh0gdJo2qPeCDypu+85OxY+52KfV3tzht8IlJUU5i6WktEp1d67lQk3TO66ElXS5TLWY+56eYq5mwdQ8TGSbYyCpmr/1JHkDZhYo5llit7v5cfLCf0gxlXM2llhCrLqllJtnbLcxCL3deiyE1bmr8yClKoSElTzlCyK1mTXjL5c38YmOU+6h+pclPCwueAprL4+6p1pukrKZtrTQrf8MiZ6OYkJIomCpGtGE74OfAjiV/NBZPHLBRUpOX1IJn/9S0rPXMDAhScpkr2Pkjn09yHnK9QL8P0EfYHLJKb5B6L9/hJRp3gIE1JeLoDm+XiW+UIBstqcp26QnZMXtuKjudtrX+7KCHC8oHuWAXfOD+6Nn752Oe7z5Dw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertIdL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_28f3c17e-72da-4600-a1de-c3d9b035b536</con:value>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamView</con:name>
          <con:value>STREAM_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1422883935492</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E1BA946D5566DBFE05305991F0A057C</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>87648</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>4</con:value>
        </con:property>
        <con:property>
          <con:name>loopUntil</con:name>
          <con:value>5</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E1BA946D6096DBFE05305991F0A057C</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E1BA94719D76DC7E05305991F0AC6B2</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0E1BA946D6096DBFE05305991F0A057C</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0E1BA94719D76DC7E05305991F0AC6B2</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>87386</con:value>
        </con:property>
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E1BA946D6096DBFE05305991F0A057C</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E1BA94719D76DC7E05305991F0AC6B2</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E1BA946D6096DBFE05305991F0A057C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E1BA94719D76DC7E05305991F0AC6B2</con:value></con:property><con:property><con:name>assertionUUIDPrior</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_815dfa96-0798-4ea2-8f79-2cee2ac50549</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_40902 - STS - Device - UsernamePassword - Assertion grant for full user after STSCreate with DeviceAuthToken JoinCode call - P0" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="3cc10e34-2ec6-4ea9-9706-47a6cac5d7fd">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="3ea8bec8-9edf-4b25-b0c8-d77e9d5f848e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));


tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionUUIDPrior",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="93e6e055-4744-4042-be95-73881e988895"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call First User Create" id="fd81ec76-d7b5-4857-be0c-84710357581d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="01aadf1b-a6a1-4a51-83ea-c56318c60167"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep>
      <con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="3040bee3-cb18-4e8b-8e09-5f09d83a5fc0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="f9f6d7e3-60d9-4a34-aa74-3dd5bfe36977">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="ad42a3dd-292b-467b-94b8-d2a6492bb601"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="bbf0f948-28ea-4fba-bb89-da9bd25ad325"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="d5efe82e-fdbd-4fd3-8e7d-84ebfae87fc9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="8ea6c996-e2ad-4648-ad40-225d3f1bcac9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="3c092f1e-b433-49b0-80eb-8c6160c82ba9">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="fc2a74d6-bbb4-4f07-97eb-7da4a4342d4a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="7d793201-3e4c-4d18-86c9-acd9d3b3796a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="d9ed122c-5e15-4b09-9896-c8e8ba4bd719">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="5e8f050d-794e-498d-b013-a29b889b0a9b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION row count" id="6e4bab60-d8b3-4a7c-8633-29a31cb58735"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

tC.setPropertyValue("assertionUUIDPrior",tC.getPropertyValue("assertionUUID"));

int uuidcnt = 0;

if (tC.getPropertyValue("assertionUUIDPrior") != null) {
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		
		
		String assertionUUID = tC.getPropertyValue("assertionUUIDPrior");

		log.info "assertionUUID [$assertionUUID]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		assert dbUtils.samlGetUUIDNodeAssertionRowCount(assertionUUID) == 1;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="8a0a3b56-ad24-41ea-a472-df4bea249e1e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>deviceAuthTokenRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>expiresMinutesDiff</con:name><con:value>120</con:value></con:property><con:property><con:name>deviceAuthToken</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D1481A2442B11E05307991E0ADBB3</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D15082B7D2B15E05307991E0A0D55</con:value></con:property><con:property><con:name>stsSkipLastLoginCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025D1481A2432B11E05307991E0ADBB3</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025D15082B7C2B15E05307991E0A0D55</con:value></con:property><con:property><con:name>Username</con:name><con:value>stsapi_107_1409969545151</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>authTokenStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>authTokenStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rauthToken</con:name><con:value>F9239EC11AE01803E0401F0A079950C9</con:value></con:property><con:property><con:name>rauthToken_1</con:name><con:value>F9239EC11AE01803E0401F0A079950C9</con:value></con:property><con:property><con:name>authTokenCreatedBy</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedBy_1</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedUser</con:name><con:value>F9239F7E19C05429E0401F0A05993BDC</con:value></con:property><con:property><con:name>authTokenCreatedUser_1</con:name><con:value>F9239F7E19C05429E0401F0A05993BDC</con:value></con:property><con:property><con:name>authTokenCreatedAccount</con:name><con:value>F8F4D466D908F2E1E0401F0A05991C52</con:value></con:property><con:property><con:name>authTokenCreatedAccount_1</con:name><con:value>F8F4D466D908F2E1E0401F0A05991C52</con:value></con:property><con:property><con:name>authTokenisGen</con:name><con:value>Y</con:value></con:property><con:property><con:name>authTokenisGen_1</con:name><con:value>Y</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025D1481A2432B11E05307991E0ADBB3</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025D15082B7C2B15E05307991E0A0D55</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>assertionUUIDPrior</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>bfb3a8c0-b9ae-46c5-a24c-102ff5f5d354</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4ed6cf1f-b471-4fb6-a1c6-bfa8b600ea30</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8afdd552-9c80-468c-8b21-2b7eac51c492</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2c38eaae-32ff-41e1-87c4-e5507798bbd5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6cee2dd0-4510-4bdd-8e29-f356fe1ccd4a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>449d84b3-e495-490d-b909-4b91aebc1c37</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ea3ebc34-86fe-4773-ab92-7d848178dd54</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>20a58493-d1e0-46c7-8661-7a3fd1b38bc1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b1b6a775-1c13-4076-926a-a110860f65c8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>053f69f5-26db-4520-9a80-f04ca83e928e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63c447f1-0213-4202-ae6b-ae6808f4c34c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>78ae4b81-009c-48c0-928b-29fab23e9e66</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_40903 - STS - Device - UsernamePassword - Assertion grant for full user after STSCreate with DeviceAuthToken DeviceString call - P0" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="9f586eb5-c8e8-4de6-96b8-6d8e3c371505">
      <con:settings/>
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Establish Test Case Properties" id="b352d587-1ed0-4bff-bec7-8fb80385334e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));


tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Account Create" id="e2511f85-3c41-4664-9bca-22941266fb30"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="22bec4c4-e980-46ec-ae70-42dd2182652e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="2c237a32-dd01-4aec-9219-781cf79a7b45"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="bd8ec425-78f0-4386-b92c-53bc332c7562">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="ff49263b-c554-42e2-8639-5c511788d125">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="35d09f5e-c060-40e5-ab1f-a8f37f323db3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="6ee8b02e-789e-4390-9105-aad6ed9d4561"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="860f1796-43d5-4d1f-8487-8fa9291f0f5c">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="82041477-6a19-4dca-af98-e196eeb43cd9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="d77d2cf7-31e6-410b-bba8-dd4587e97df1">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="827904e9-0050-4526-b13f-7eb5c2e23bd5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="1fd1b441-8142-4796-b2bc-b60bdc6e7d12"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="b83f21a0-00aa-4c22-91c2-588de4ceed42">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="8b97e51e-ccbc-46f1-9cb7-d73c7300569c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION row count" id="a6ebff4f-7049-434b-a368-7beb7b8e1081"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

tC.setPropertyValue("assertionUUIDPrior",tC.getPropertyValue("assertionUUID"));

int uuidcnt = 0;

if (tC.getPropertyValue("assertionUUIDPrior") != null) {
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		
		
		String assertionUUID = tC.getPropertyValue("assertionUUIDPrior");

		log.info "assertionUUID [$assertionUUID]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		assert dbUtils.samlGetUUIDNodeAssertionRowCount(assertionUUID) == 1;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="d3b3ec19-6c66-4ba1-8efb-d206535f6a2e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C51E5146F1574E05307991E0A178D</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUIDPrior</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_2650ff86-8f24-42a7-af3a-e99fdf592ac4</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authTokenCreatedAccount</con:name><con:value>F8F4D466D917F2E1E0401F0A05991C52</con:value></con:property><con:property><con:name>authTokenCreatedAccount_1</con:name><con:value>F8F4D466D917F2E1E0401F0A05991C52</con:value></con:property><con:property><con:name>authTokenCreatedBy</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedBy_1</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedUser</con:name><con:value>F8F12CD700AC6A81E0401F0A05995498</con:value></con:property><con:property><con:name>authTokenCreatedUser_1</con:name><con:value>F8F12CD700AC6A81E0401F0A05995498</con:value></con:property><con:property><con:name>authTokenisGen</con:name><con:value>Y</con:value></con:property><con:property><con:name>authTokenisGen_1</con:name><con:value>Y</con:value></con:property><con:property><con:name>authTokenStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>authTokenStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>deviceAuthToken</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deviceAuthTokenRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>deviceDeviceString</con:name><con:value>george</con:value></con:property><con:property><con:name>deviceDeviceString_1</con:name><con:value>george</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>expiresMinutesDiff</con:name><con:value>120</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025C51E5146E1574E05307991E0A178D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025C51E5146E1574E05307991E0A178D</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025D15082B8F2B15E05307991E0A0D55</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025D15082B8F2B15E05307991E0A0D55</con:value></con:property><con:property><con:name>rauthToken</con:name><con:value>F923A071C899B56EE0401F0A059941FD</con:value></con:property><con:property><con:name>rauthToken_1</con:name><con:value>F923A071C899B56EE0401F0A059941FD</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsSkipLastLoginCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>Username</con:name><con:value>stsapi_107_1409969549222</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D15082B902B15E05307991E0A0D55</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>bfb3a8c0-b9ae-46c5-a24c-102ff5f5d354</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4ed6cf1f-b471-4fb6-a1c6-bfa8b600ea30</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8afdd552-9c80-468c-8b21-2b7eac51c492</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2c38eaae-32ff-41e1-87c4-e5507798bbd5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6cee2dd0-4510-4bdd-8e29-f356fe1ccd4a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>449d84b3-e495-490d-b909-4b91aebc1c37</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ea3ebc34-86fe-4773-ab92-7d848178dd54</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>20a58493-d1e0-46c7-8661-7a3fd1b38bc1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b1b6a775-1c13-4076-926a-a110860f65c8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>053f69f5-26db-4520-9a80-f04ca83e928e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63c447f1-0213-4202-ae6b-ae6808f4c34c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b9826b7-a3a7-462e-9b85-6485ed0f5068</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>485d3184-4308-45b9-a80c-9c892e06450d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a9a1a7d2-4c80-4c8c-9e91-a3e3e02ad14e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b4be7db1-d426-4e6b-95f8-0fab3605de9c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a8e4a113-0992-4138-b4ff-0390ac778e72</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_40904 - STS - DeviceAuthToken JoinCode - Repetitive Assertions for full user - P0" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6ab4cae6-ed00-487f-96c1-5000f155fdfa">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="3c65d278-c3e0-4856-80c5-41f9d6ebdb8e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));


tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionUUIDPrior",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","5");</script></con:config>
      </con:testStep>
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="f6c2dac2-e08f-4778-83a0-4fd31d970d81"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call First User Create" id="c461f70a-71a4-4e8a-aed1-d2d67eab36bc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="bbc1f62c-25f7-492c-8d43-3cbc593e30cb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep>
      <con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="3263028e-87ae-4c89-afde-b48631659539">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="d83ae8cf-c147-499d-b7d3-7a941ebb9577">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("assert_RET",tC.getPropertyValue("assert"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL_RET",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="f40f19ce-8337-41ac-9f40-d29aaafffa62"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="80d1ccca-ee58-4c1d-9b83-393aa0fe7ad2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="bcafb8c9-b271-4f5f-b75c-80904f4f98b0">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="243f1fd7-5cfc-4618-9350-a698c8296941">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("assert",tC.getPropertyValue("assert_RET"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL_RET"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="46654ce2-0128-4ae4-8f0e-0eaa16513b1f">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="db21ca2b-8d68-4d16-a1a9-3f478a3e34a7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="4a15b1b0-c789-4bab-b2ec-be7ca22ec4cb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

/*
*  Auth context for device
*/


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="6c0fb27f-451f-4d7d-9adc-a8da6b101e74">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION row count" id="aff2fa46-a17b-4cc9-81b9-4ffc1a92f20b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

tC.setPropertyValue("assertionUUIDPrior",tC.getPropertyValue("assertionUUID"));

int uuidcnt = 0;

if (tC.getPropertyValue("assertionUUIDPrior") != null) {
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		
		
		String assertionUUID = tC.getPropertyValue("assertionUUIDPrior");

		log.info "assertionUUID [$assertionUUID]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		assert dbUtils.samlGetUUIDNodeAssertionRowCount(assertionUUID) == 1;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Loop again if necessary" id="151ef249-953a-4646-ac24-155fcb77ffcf">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Set tokentype deviceauthtoken");
}</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>deviceAuthTokenRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>expiresMinutesDiff</con:name><con:value>120</con:value></con:property><con:property><con:name>deviceAuthToken</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D1481883B2B0FE05307991E0ABD9B</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D15B3764E2B27E05307991E0A7285</con:value></con:property><con:property><con:name>stsSkipLastLoginCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025D1481883A2B0FE05307991E0ABD9B</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025D15B3764D2B27E05307991E0A7285</con:value></con:property><con:property><con:name>Username</con:name><con:value>stsapi_107_1409969553415</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>authTokenStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>authTokenStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rauthToken</con:name><con:value>F8F12CE3F0A59252E0401F0A07991D28</con:value></con:property><con:property><con:name>rauthToken_1</con:name><con:value>F923A2E97D4320E9E0401F0A05992FF9</con:value></con:property><con:property><con:name>authTokenCreatedBy</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedBy_1</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedUser</con:name><con:value>F8F12CDCE9A28AEFE0401F0A05995484</con:value></con:property><con:property><con:name>authTokenCreatedUser_1</con:name><con:value>F8F12CDCE9A28AEFE0401F0A05995484</con:value></con:property><con:property><con:name>authTokenCreatedAccount</con:name><con:value>F9239F10E3529ED5E0401F0A07995904</con:value></con:property><con:property><con:name>authTokenCreatedAccount_1</con:name><con:value>F9239F10E3529ED5E0401F0A07995904</con:value></con:property><con:property><con:name>authTokenisGen</con:name><con:value>Y</con:value></con:property><con:property><con:name>authTokenisGen_1</con:name><con:value>Y</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025D1481883A2B0FE05307991E0ABD9B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025D15B3764D2B27E05307991E0A7285</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>5</con:value></con:property><con:property><con:name>assertionUUIDPrior</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert_RET</con:name><con:value>nVZbb+I6EH7vr4jSRxSScClNBEgsgTa7pWy5dFtejhzbgNvEobbDpb/+2KFJgUIPeyQk5Ml45puZz59d5yAKS26Lc8wEianmew39H+BUr6xKuWZMK+WqUQmubSNAVtlAAAblILCDIKjpms95gn3KBaCioZcsu2JYVcO2R3bNtWpuqVa8KpcnuvaIGZehpUvR0rV1FFLupmkbesKoGwNOuEtBhLkroDts9e5c6emCDJPerG9RpglZcy7EwjVNWEQY4jCERRhHZt3c86kj7g7JjAKRMPyRE/GG/rF3tVoVV+VizGZmybIs03JM6YM4mV3qzYtsM0Y+ncbbdRvQmBIIQvIOFKgeFvMYaa1wFjMi5tGJ0LZpWyq0gdfQgHaFXurmZ4IU3ZmR9kAyDgw+B3YWbICnmGEKsTYe+A398rwJbveOGKB8GrOIH6z/DhKmSxzGC4wMnlWWoTs/4pF2NesYuj6FYcLJEt8rmiwAxFz7zfCUrO8Il+RDXEvHr625/JGMZRj+zVjq5i5WCd080h2PzDAX/2dmu/PaRnkEYYKbt6T2ZzP6Mb8qgL736IvkadyOhs7g6c5qpBB2nbeg8nF/rA/JmnPrY1MnmsxmD97zbNxrB4Ux4tYvLyFs8uBMOXpYjmu+dRdDr1UbEIfdrH/d3058iwT29cP66sV5HcRj0Sq8scJzrXR/MU5elu3bjfhTrYGW6TvRFfQj09ms0LD/s99bvLaB/fT+MkCD9utzpRdUh4Xh083Ke55MBGB24WFzw8DEq0ZktLqga8rNwhr1R1ejAfMfOpvXxmdNuzXsGzNJGCbBC4YiWyp6+J7WlfMC4nt5URaCjGnq6i6URnGBqdCbapeSFjeRAkSQK4e5XXevu3ap7bU7Tsu+bnW6Hati2V2rZVUdp1q5rmQatEVxALEd0ylRuZTKbvnzPUAYuRxThJmxjBM4x1z/JqIHBNB8OpCHI6Ycj2Kp4qXgBVYRWlEM3t7Kyev70rJK0Vxq8H0s+rTPWlOB2Z5yl6w95R5gSBYEK3lX/OaS4FzIVryBZSJCu7gERYoTeQEwpcFuqXJdNTmJFiFWQM0oRkmIi4v5Im2Mybf/JQNAnloHnVF67k6Wdfgt64D0QUQ5cFXLDyyniI9cQXZWyOmCy7sFZ+FbCSLqeMl2CkbgFsn+p0+WKHrkFJEVZZBzz0PDXlTzsKA8EVoSmPM8v6ClvsvT38zG8QaKb8VkuUzSAdSUsjEZ3pQCZ5tDDBMpT5tR/IqpmYcwz7odctQHmXP7Pr5EzOlQAIEjSRctXZ7xNBhirp4GvqT5+tx3x15K2TeB1+KYrR3KF4RC/O0jA7pQ+Unzb/m3ihn6HNeRWDt5ZJ3yPSAInamVugc2J0gBYxmWSOGK2W7wYwGOJd835k3OsQjJpiAR+PQXTSlSQwcQxgkVvqenhl2VTHGKzQK7n05fwqRK/HG1rvnJq/WpdzeUehUBPfcl/+1skJQuEOvqBk+xNPS1fCnK5HS2o8ofAPeE2SmVna5tdcpV2+l41VyYa1KYHSsX5v1Kml/MXy07PT08D81/AQ==</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RET</con:name><con:value>urn:dece:accountid:org:dece:F9239F10E3519ED5E0401F0A07995904</con:value></con:property><con:property><con:name>authTokenStatus_2</con:name><con:value>active</con:value></con:property><con:property><con:name>rauthToken_2</con:name><con:value>F9239F77C4828680E0401F0A079950CF</con:value></con:property><con:property><con:name>authTokenCreatedBy_2</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedUser_2</con:name><con:value>F8F12CDCE9A28AEFE0401F0A05995484</con:value></con:property><con:property><con:name>authTokenCreatedAccount_2</con:name><con:value>F9239F10E3529ED5E0401F0A07995904</con:value></con:property><con:property><con:name>authTokenisGen_2</con:name><con:value>Y</con:value></con:property><con:property><con:name>authTokenStatus_3</con:name><con:value>active</con:value></con:property><con:property><con:name>rauthToken_3</con:name><con:value>F8F4D466D923F2E1E0401F0A05991C52</con:value></con:property><con:property><con:name>authTokenCreatedBy_3</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedUser_3</con:name><con:value>F8F12CDCE9A28AEFE0401F0A05995484</con:value></con:property><con:property><con:name>authTokenCreatedAccount_3</con:name><con:value>F9239F10E3529ED5E0401F0A07995904</con:value></con:property><con:property><con:name>authTokenisGen_3</con:name><con:value>Y</con:value></con:property><con:property><con:name>authTokenStatus_4</con:name><con:value>active</con:value></con:property><con:property><con:name>rauthToken_4</con:name><con:value>F9239F150A98B3D9E0401F0A07995930</con:value></con:property><con:property><con:name>authTokenCreatedBy_4</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedUser_4</con:name><con:value>F8F12CDCE9A28AEFE0401F0A05995484</con:value></con:property><con:property><con:name>authTokenCreatedAccount_4</con:name><con:value>F9239F10E3529ED5E0401F0A07995904</con:value></con:property><con:property><con:name>authTokenisGen_4</con:name><con:value>Y</con:value></con:property><con:property><con:name>authTokenStatus_5</con:name><con:value>active</con:value></con:property><con:property><con:name>rauthToken_5</con:name><con:value>F8F12CE3F0A59252E0401F0A07991D28</con:value></con:property><con:property><con:name>authTokenCreatedBy_5</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedUser_5</con:name><con:value>F8F12CDCE9A28AEFE0401F0A05995484</con:value></con:property><con:property><con:name>authTokenCreatedAccount_5</con:name><con:value>F9239F10E3529ED5E0401F0A07995904</con:value></con:property><con:property><con:name>authTokenisGen_5</con:name><con:value>Y</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>bfb3a8c0-b9ae-46c5-a24c-102ff5f5d354</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4ed6cf1f-b471-4fb6-a1c6-bfa8b600ea30</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8afdd552-9c80-468c-8b21-2b7eac51c492</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2c38eaae-32ff-41e1-87c4-e5507798bbd5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6cee2dd0-4510-4bdd-8e29-f356fe1ccd4a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>449d84b3-e495-490d-b909-4b91aebc1c37</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ea3ebc34-86fe-4773-ab92-7d848178dd54</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>20a58493-d1e0-46c7-8661-7a3fd1b38bc1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b1b6a775-1c13-4076-926a-a110860f65c8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e9a021a3-485c-4a2b-94f2-3ac1b65f9bc5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_40905 - STS - DeviceAuthToken JoinCode - Assertion grant for full user after STSCreate with UsernamePassword call - P0" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="8327a2fa-7db7-4a08-808c-1aaccea23ba2">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="04911008-ebfd-4143-afbf-8b781ecc72ea">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));


tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionUUIDPrior",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="b9952510-aa22-4c3c-840a-3e321b061ba4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call First User Create" id="dacada6d-694d-4ea8-a815-1d5a6735821e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="3154ddc1-018f-4fb6-bde0-ab21edbb1f2d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep>
      <con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="7cb75852-eafd-435e-bad1-19fee8dad480">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="ad84216d-f9ba-4284-96b8-9abcd727d546">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("assert_RTL",tC.getPropertyValue("assert"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL_RTL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="9d41e352-c55b-413e-98f7-e3cab9cbbb3a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="b4650ee1-49be-41bf-84da-18fb5b147b1a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="6d7a37c1-6e0c-4f31-a320-106fe92c7519">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="a5df683f-a1c0-4d4d-ae58-8fbd104846e2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="10456757-f4d9-4267-b21e-92650aac8c79">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - JoinCode" id="bee0d7ed-8225-4305-a699-5a2e26c601fd">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("assert",tC.getPropertyValue("assert_RTL"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL_RTL"));
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - JoinCode API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="48d46c21-4975-4487-be72-e43e4eb915a2">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="90c1d701-3c3b-4e9d-902e-3577f0e6c511">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="751c8bd2-8df1-4e0a-97c3-81c2fb679b37">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION row count" id="ee6f9c6c-f0ae-4f86-b31b-0e397acd5bd6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

tC.setPropertyValue("assertionUUIDPrior",tC.getPropertyValue("assertionUUID"));

int uuidcnt = 0;

if (tC.getPropertyValue("assertionUUIDPrior") != null) {
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		
		
		String assertionUUID = tC.getPropertyValue("assertionUUIDPrior");

		log.info "assertionUUID [$assertionUUID]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		assert dbUtils.samlGetUUIDNodeAssertionRowCount(assertionUUID) == 1;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="f446560d-a31d-4f76-a190-837ad6d3830f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>deviceAuthTokenRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>expiresMinutesDiff</con:name><con:value>120</con:value></con:property><con:property><con:name>deviceAuthToken</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D14C7EBC22B33E05307991E0ADA49</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C51E5147B1574E05307991E0A178D</con:value></con:property><con:property><con:name>stsSkipLastLoginCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025D14C7EBC12B33E05307991E0ADA49</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C51E5147A1574E05307991E0A178D</con:value></con:property><con:property><con:name>Username</con:name><con:value>stsapi_107_1409969558039</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>authTokenStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>authTokenStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rauthToken</con:name><con:value>F9239F755D6861A1E0401F0A079950CD</con:value></con:property><con:property><con:name>rauthToken_1</con:name><con:value>F9239F755D6861A1E0401F0A079950CD</con:value></con:property><con:property><con:name>authTokenCreatedBy</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedBy_1</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedUser</con:name><con:value>F8F12D325A70D98EE0401F0A07991D37</con:value></con:property><con:property><con:name>authTokenCreatedUser_1</con:name><con:value>F8F12D325A70D98EE0401F0A07991D37</con:value></con:property><con:property><con:name>authTokenCreatedAccount</con:name><con:value>F923A2E97D4820E9E0401F0A05992FF9</con:value></con:property><con:property><con:name>authTokenCreatedAccount_1</con:name><con:value>F923A2E97D4820E9E0401F0A05992FF9</con:value></con:property><con:property><con:name>authTokenisGen</con:name><con:value>Y</con:value></con:property><con:property><con:name>authTokenisGen_1</con:name><con:value>Y</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025D14C7EBC12B33E05307991E0ADA49</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C51E5147A1574E05307991E0A178D</con:value></con:property><con:property><con:name>assert_RTL</con:name><con:value>nVZtU+o6EP7ur+jUj07pC4XSjjCDAtKj+ALoufrlTkgDRNu0NAkUf/1JCq2A6PXcGWaYbDe7z+4+eZJzCqLQ8tqUopThmCh+p6n+2wBmrQqRqU3cRk2zTRBok6lta3bDBtWGM61bdqAqPqUc+YQyQFhTtQzT1oyaZppj0/EMx6u6lXrdeVGVJ5RSEVq4VAxVyaKQUC9P21R5SrwYUEw9AiJEPQa9UXtw4wlPDxSY1Nb5BmWeMG3NGUs8XYeVAEEUhrAC40g/1/d8zgPqjfCMAMZTtM0Z0Ka63btarSqraiVOZ7plGIZuuLrwCSienaqtk2IzCnwyjTfrS0BigiEI8TuQoAaIzeNAaYezOMVsHn0R2tRNQ4bWUAY1aNrkVNU/EuTofhhpD2RKgUbnwCyCDdEUpYhApDwO/aZ6+rMJbvaOU0DoNE4jerD+O0iILFEYJyjQaFFZge7nEY+0q3WOoOcTGHKKl+hW0iQBEFHlPkVTnN1gKsgXUCUfv5JR8cMFyxD8m7Gc67tYBXT9SHc6eIYo+z8z253XJsoTCDlqtR9usxfz6pFdXPcux9So919c9717zfTHZg5h13kDqhz3dn1I1pJb203ZoNtdXz1a/dW6//bQXrwv6/bD5GZhcnNaM53riD9Mn9/8p3bwZvjcug3WnevVL4bHwcLyX2k0SM9urtgtHHf475Pg96+7ersfJaNoYrmZr7+67yFgz/2xzeH1WaQvz3rr3mJGbD2+tzI8WDSYf2n3nbeXl2e8ahiviZvdOQ+OsX48WS/u+6/MuoADP+wPX3ifNpofNe3WsG8sJGHEJ68IsmIp6eF3lJ6YF2Dfy4u04ECb5q5eIjWKMkSY2pK7pLR4XAgQDjwxzM261+iZVqdq1dr1XsdtdLuGbZg9o204rmt2qk6hQRsUBxAvYzLFMpdU2Q1/vgcII48iEqBUW8YczhFVv4nYAQwoPhmKwxETisaxUHG7BqkhBNICBl0uQt54T9zJamWrym3M7shd2p4ylO4pt2XsKfcQQZxgJOVd8psKglMmWrEAS85Cs7IEFYK4uABSqcGeZTdqOsVREiIJVI/igIeoksyTvDE63fxbGoA0tw674/zcfVnW4beiA8InwNKByloukJgiOnIFWUUhXxdc3S24CN/mAZbHS7STpRhukOx/+mCJpEdJEVFRAbn0PDTsRdUPCyoTBUsMS56XF7TQd3H6W8U4FqCyqPDlkucDcKSypSK8LgTO1EcIciFP63H8hohehtB/dDuUqA8yl/Z9fJzNyYgBhiJBFyVf/uBpMEJUPg18QfPsp++OvZSibwxl7JjtMhQvCIn420cG9KD0E+Z78beK04/Cj8XaySPqFO8BhslMruQ9sP6CFDAWYbEQrjjdDX4swLHk+8ayySUWJtg04Qx9/UWRitRUAYQxJ8zvqLlhVyVznGydIO/D6VOYXIm3V2tGv7xa/xncjIReRUAtffF/O2s4pwtEqrzBcyxNNRMvRZGczHZUeQtwT5hdq9q2uq7TsR3L6LqlMNdc1+r13LKBe5W0Ppk/W3Z6engeWn8A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:F923A2E97D4720E9E0401F0A05992FF9</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>assertionUUIDPrior</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>bfb3a8c0-b9ae-46c5-a24c-102ff5f5d354</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4ed6cf1f-b471-4fb6-a1c6-bfa8b600ea30</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8afdd552-9c80-468c-8b21-2b7eac51c492</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2c38eaae-32ff-41e1-87c4-e5507798bbd5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6cee2dd0-4510-4bdd-8e29-f356fe1ccd4a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>449d84b3-e495-490d-b909-4b91aebc1c37</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ea3ebc34-86fe-4773-ab92-7d848178dd54</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>20a58493-d1e0-46c7-8661-7a3fd1b38bc1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b1b6a775-1c13-4076-926a-a110860f65c8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>053f69f5-26db-4520-9a80-f04ca83e928e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63c447f1-0213-4202-ae6b-ae6808f4c34c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5c0e8d65-12da-443c-b7ea-b745607308aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5efcdf84-0568-4688-86aa-0225f73d180a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>108ee1fe-c230-443c-bab9-0b5c8e9901e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98555695-8b9b-46ad-9e82-ecc516028dc4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2119b0aa-bcbc-4842-8568-76f014385ea0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7c8f51f6-b155-4c75-912d-4098b034bc4d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_40906 - STS - DeviceAuthToken DeviceString- Repetitive Assertions for full user - P0" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b0853704-b4c5-4874-8cf5-9329a77b6aa6">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="9f4113af-0310-4c1e-a344-b73bc0597180">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));


tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionUUIDPrior",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","5");</script></con:config>
      </con:testStep>
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="c4679d86-1ee1-4fc0-bafe-9fdce2f859f1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call First User Create" id="a066f86f-3d5f-4483-9c02-e253d67dabe8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="37ad84de-3d18-412e-a4bf-5f17b4d21fa8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep>
      <con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="1be7a66f-9f9c-4630-be1c-ef540e04f448">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="4da534d2-0d19-47ec-8454-e350667e6035">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("assert_RET",tC.getPropertyValue("assert"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL_RET",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="afb40e97-d2c5-496a-b82f-9991a07ee0b6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="9fc452a3-1d8f-4c0e-b303-5faab9431d72"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="5d492666-7c18-4e3a-baf6-bc77d5d5ccc1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="9ba5eaa4-67aa-4f91-9ff2-3b43f6b2dc2f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("assert",tC.getPropertyValue("assert_RET"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL_RET"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="0dbe977e-68c7-4c59-a570-f517338f4836">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="582feca5-9951-44bf-be36-21dc44f15357">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS Get" id="de742ed8-a86a-4d94-a746-9dbf75bfe3f6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

/*
*  Auth context for device
*/


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="f20b68f9-e6f9-424a-b51e-ba402f2b634a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION row count" id="3b092551-0a40-41f5-bc31-16a15c68b4b6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

tC.setPropertyValue("assertionUUIDPrior",tC.getPropertyValue("assertionUUID"));

int uuidcnt = 0;

if (tC.getPropertyValue("assertionUUIDPrior") != null) {
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		
		
		String assertionUUID = tC.getPropertyValue("assertionUUIDPrior");

		log.info "assertionUUID [$assertionUUID]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		assert dbUtils.samlGetUUIDNodeAssertionRowCount(assertionUUID) == 1;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Loop again if necessary" id="57102196-4565-4c49-bc6f-dc79499e5b92">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Set tokentype deviceauthtoken");
}</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D16B7CAE32CE9E05307991E0A6B30</con:value></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authTokenCreatedAccount</con:name><con:value>F8F4D466D92BF2E1E0401F0A05991C52</con:value></con:property><con:property><con:name>authTokenCreatedAccount_1</con:name><con:value>F8F4D466D92BF2E1E0401F0A05991C52</con:value></con:property><con:property><con:name>authTokenCreatedBy</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedBy_1</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedUser</con:name><con:value>F9239F7E19D75429E0401F0A05993BDC</con:value></con:property><con:property><con:name>authTokenCreatedUser_1</con:name><con:value>F9239F7E19D75429E0401F0A05993BDC</con:value></con:property><con:property><con:name>authTokenisGen</con:name><con:value>Y</con:value></con:property><con:property><con:name>authTokenisGen_1</con:name><con:value>Y</con:value></con:property><con:property><con:name>authTokenStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>authTokenStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>deviceAuthToken</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deviceAuthTokenRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>deviceDeviceString</con:name><con:value>george</con:value></con:property><con:property><con:name>deviceDeviceString_1</con:name><con:value>george</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>expiresMinutesDiff</con:name><con:value>120</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>5</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025D16B7CAE22CE9E05307991E0A6B30</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025D16B7CAE22CE9E05307991E0A6B30</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025D16B28E722CD5E05307991E0A277D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025D16B28E722CD5E05307991E0A277D</con:value></con:property><con:property><con:name>rauthToken</con:name><con:value>F8F12CDCE9C48AEFE0401F0A05995484</con:value></con:property><con:property><con:name>rauthToken_1</con:name><con:value>F923A2E6DDC18153E0401F0A05992FF3</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsSkipLastLoginCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>Username</con:name><con:value>stsapi_107_1409969563026</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D16B28E732CD5E05307991E0A277D</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUIDPrior</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert_RET</con:name><con:value>nVZdb+I6EH3fXxFln0M+IECigkQbuGL7eYF2u325Ms4E3CY22A5Qfv21Q5MCS3u7V0JCnoxnzswcH/tMoCz1wp4QwCVh1BhGHfMfgGnDQ4Fn+Y6LrAZGLQu57ZblTps4bk+hBXFsGkMhchhSIRGVHdNz3Ibl+JbrTtxW6LTCRrPmtfwn03gALlRo5VJzTGOTpVSERdqOmXMaMiSICCnKQIQSh+Pe9VWoPENUYjK7ZzuURULenUu5CG0b12LAkKa4hllmn9kHPmexCMdkRpHMObzljEXHfNu7Xq9r63qN8ZntOY5jO4GtfGJBZt/N7rdyM8RDmrDd+gJRRglGKdkiDeoa5JzFRi+dMU7kPPsgtGu7jg5twQZb2G3Q76b9nqBA98VIByC5QJaYI7cMNoIEOFAMxv1o2DG/f22Cu70TjqhIGM/E0frPIAFdQcoWEFuirKxE9/WIJ9rVPQMcDilOc0FWcKNpskAYhHHHISGbKyIU+WJhFOM3NkL9SMkywH8yljN7H6uCbp/oTkRmIOT/mdn+vHZRHlCaQ3fm/LxpkCY4c3R5+cRvaDwkW+9xNfg16xQQ9p13oKpxv62PyVpx620T6flsdR67lK5nr2yDnlFit6ft29aPZuxPZtto+HAf3K1bV036M/NfbyLnnvAZfobMS7a/lv7LywQnjN1tg8vBt8fIu1+NbqNBtrkcvvL1Zp4NXsb9dh1tln7+1L+hT38lS+avuE2X3L5KWpz0foxf6PlFJtDzlrBs8uvnPayfCP02rQcPMfy9Hj0mi379eerNrzvvNe3XcGgsJWGcT58By3Kp6TGMjIGaF5Kfy4u2kNhKCtdwoTVKSKDS7OpdWlrCXAkQiUM1zN16EHj1YNDqu0HU9Bte0Hcajjtweo4fBPXz6KLUoB2KI4gXjCZE59Iqu+PP5wBxFgqgMXBrxXI8B2F+EjFCEhlDOlKHg1EBE6ZUnCaLIFNTCaTAbp2kLYfRLRPLxDRumLylt7yXSOAH0u05B9I9AkwWBLS+a4ILxXAhVS+WaJXL1K2tUI1Crm4ArkU49Bpt3xYkW6SgkdoZi/MUaov5ouiMLXb/noWwKKyj/qQ4eB/WdfytbIHyiYl2ELqWc1BjhBN3UL0s5OOC6/sFl+F7eUz0+VL9lJzgHZLDT+800fyoOKIqKiFXnseGg6j2cUFVonhFcEX06oZWAq+Of7ccxxLVlrV8tcqLAbS0tHEV3lYK59pjwLnSp9cJewFqVyHsL10PFeqjzJX9EF8u53QskYRM0cUoll94G4xB6LfBUPF889WHx0FK1TcJG3nKdpGqJ4RG/OkrA4dY+ynznfpbM/5e+KlYe3lUnepBIAmd6ZW+CF4/IAVmKixRysX4fvBTAU4lPzRWTa6wSMWmaS7h4y+GlqSOiTBmOZXDyCwM+zJZ4JSvCwjfnX4LU0jx2926ER/erY/XV2MlWBkyK1/y384WKeiCwdRXeIGlY27UU1Elp7M9WX4DeKDM7UEjajSbUeD1Bl7f3Vdm98L3qgYeVNL9zfy7Za+nx+eh+y8=</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_RET</con:name><con:value>E93AE554A91F416AE0401F0A0799224B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RET</con:name><con:value>urn:dece:accountid:org:dece:F8F4D466D92AF2E1E0401F0A05991C52</con:value></con:property><con:property><con:name>authTokenStatus_2</con:name><con:value>active</con:value></con:property><con:property><con:name>rauthToken_2</con:name><con:value>F9239F35653541A6E0401F0A05994201</con:value></con:property><con:property><con:name>authTokenCreatedBy_2</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedUser_2</con:name><con:value>F9239F7E19D75429E0401F0A05993BDC</con:value></con:property><con:property><con:name>authTokenCreatedAccount_2</con:name><con:value>F8F4D466D92BF2E1E0401F0A05991C52</con:value></con:property><con:property><con:name>authTokenisGen_2</con:name><con:value>Y</con:value></con:property><con:property><con:name>deviceDeviceString_2</con:name><con:value>george</con:value></con:property><con:property><con:name>authTokenStatus_3</con:name><con:value>active</con:value></con:property><con:property><con:name>rauthToken_3</con:name><con:value>F8F12CE3F0AE9252E0401F0A07991D28</con:value></con:property><con:property><con:name>authTokenCreatedBy_3</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedUser_3</con:name><con:value>F9239F7E19D75429E0401F0A05993BDC</con:value></con:property><con:property><con:name>authTokenCreatedAccount_3</con:name><con:value>F8F4D466D92BF2E1E0401F0A05991C52</con:value></con:property><con:property><con:name>authTokenisGen_3</con:name><con:value>Y</con:value></con:property><con:property><con:name>deviceDeviceString_3</con:name><con:value>george</con:value></con:property><con:property><con:name>authTokenStatus_4</con:name><con:value>active</con:value></con:property><con:property><con:name>rauthToken_4</con:name><con:value>F923A0C3155A77FCE0401F0A05994203</con:value></con:property><con:property><con:name>authTokenCreatedBy_4</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedUser_4</con:name><con:value>F9239F7E19D75429E0401F0A05993BDC</con:value></con:property><con:property><con:name>authTokenCreatedAccount_4</con:name><con:value>F8F4D466D92BF2E1E0401F0A05991C52</con:value></con:property><con:property><con:name>authTokenisGen_4</con:name><con:value>Y</con:value></con:property><con:property><con:name>deviceDeviceString_4</con:name><con:value>george</con:value></con:property><con:property><con:name>authTokenStatus_5</con:name><con:value>active</con:value></con:property><con:property><con:name>rauthToken_5</con:name><con:value>F8F12CDCE9C48AEFE0401F0A05995484</con:value></con:property><con:property><con:name>authTokenCreatedBy_5</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedUser_5</con:name><con:value>F9239F7E19D75429E0401F0A05993BDC</con:value></con:property><con:property><con:name>authTokenCreatedAccount_5</con:name><con:value>F8F4D466D92BF2E1E0401F0A05991C52</con:value></con:property><con:property><con:name>authTokenisGen_5</con:name><con:value>Y</con:value></con:property><con:property><con:name>deviceDeviceString_5</con:name><con:value>george</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>bfb3a8c0-b9ae-46c5-a24c-102ff5f5d354</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4ed6cf1f-b471-4fb6-a1c6-bfa8b600ea30</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8afdd552-9c80-468c-8b21-2b7eac51c492</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2c38eaae-32ff-41e1-87c4-e5507798bbd5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6cee2dd0-4510-4bdd-8e29-f356fe1ccd4a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>449d84b3-e495-490d-b909-4b91aebc1c37</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ea3ebc34-86fe-4773-ab92-7d848178dd54</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>20a58493-d1e0-46c7-8661-7a3fd1b38bc1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b1b6a775-1c13-4076-926a-a110860f65c8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>12e5549c-1bbe-4567-a03b-aac93baba860</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c4c97783-42f8-4b1a-b778-a0d08bcaa2a6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_40907 - STS - DeviceAuthToken DeviceString- Assertion grant for full user after STSCreate with UsernamePassword call - P0" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="16693e0b-38af-4b74-a4b3-7b67cb7cf14b">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="bb897438-a616-48fa-9f0f-459ddf3d5087">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));


tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionUUIDPrior",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="63f0cc35-2b1f-4ab2-841a-7904b926ac77"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call First User Create" id="0276d497-5363-4a59-9332-2592743af453"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="7b791ded-fb71-44a9-b8c9-360aaca025fd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep>
      <con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="ce855985-473e-4cf8-9de3-6a386ebbff61">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="d0d2e49c-2ef4-453e-a846-125269f0aaba">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("assert_RTL",tC.getPropertyValue("assert"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL_RTL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="b3d02d20-0c1f-4674-9d1b-8759e2105065"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set nodeId as NodeIdDevicePrimary" id="f2be3703-8b3d-44a8-acb1-bafc82fdde1b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="fdaddb6f-970b-4524-a61e-48a3d1751dbf">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));
tC.setPropertyValue("actionSkipPolicyCheck","true");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="fec21554-12b1-4bf3-adab-330c703c536c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="2a2ec7b0-a0bc-470c-ad0e-5ac5dbbdc992">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="14b1b882-1242-4108-a239-6ee16420cee0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assert",tC.getPropertyValue("assert_RTL"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL_RTL"));
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="82f56b79-9452-4f4b-8a83-cd0d281734a6">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="d1a46957-595e-4fe5-b77a-70a11bf6c80f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="8a879829-5e89-4a5d-946a-303513da7dc7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION row count" id="ca1077c4-47c8-444c-a8e8-e30922afa7d1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

tC.setPropertyValue("assertionUUIDPrior",tC.getPropertyValue("assertionUUID"));

int uuidcnt = 0;

if (tC.getPropertyValue("assertionUUIDPrior") != null) {
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		
		
		String assertionUUID = tC.getPropertyValue("assertionUUIDPrior");

		log.info "assertionUUID [$assertionUUID]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		assert dbUtils.samlGetUUIDNodeAssertionRowCount(assertionUUID) == 1;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="3772ad14-acad-4cad-bfc4-c5c379e65a2e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025CA145249A019EE05305991E0AA6E0</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUIDPrior</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert_RTL</con:name><con:value>nVbbbuo6EH3vV0TpYxVyATZNBEiUSzdVoS3Q68uRcQbwbuKkthOgX3/sQFKgtKf7SEjIk/HMmpnlZdc5CgPHa3EOTJCIav1OQ/+nNsPTc3vqGFXknhsVcG1jWqmdG647xVZFfrDwVNf6nCfQp1wgKhq6Y9kVw6oatj2xa55V86puya2dv+jaAzAuQ0uXkqVrqzCg3MvSNvSEUS9CnHCPohC4J7A3bg2uPenpoRyT3qxvUGYJWXMhROyZJi75gCEIcAlHoVk393zqPvfGZE6RSBhsc/q8oW/3LpfL0rJcitjcdCzLMi3XlD4+J/NTvXmSbwa/T2fRZt1GNKIEo4C8IwVqAGIR+VormEeMiEX4RWjbtC0V2oAVNrBdoae6+ZEgQ/fDSHsgGUcGXyA7DzaCGTCgGLT7Ub+hn/5sgpu9E4Yon0Us5Afrv4MENIUgisE3eF5Zju7nEY+0q1kH7PUpDhJOUhgqmsQIA9duGczI6ppwST6fa9n4tRWXP5KzDPDfjKVu7mKV0M0j3emQOXDxf2a2O69NlAcUJND0e+3Aeo998th6OOu0r8mzzeJBC0bOoJFB2HXegCrGvV0fkrXg1nbTw2v/9/1gOGJnaUp+RZ1Xy+nQVbvcvh2tKy8xfu69TS/bw+BsNuk9pdN49HgD3d7zeg2/bv33Gr6vLt6n7nx035nEJ6l/b45/vd65NhmFUfnm8Xdwmd6sH9PlDZr8SdtXr/N4jZ8uyWgyvLtftfjL8IKcvUyGi2Ht5TK8XtrMuqtemewMoRP8sOpfOOSq+zq5K1efZuhh0PioabeGfWMuCeNk+gewyJeKHv2O1pPzQuJ7eVEW4huzzNWLlUZxAVToTbVLSYuXSAEivieHuVn3XKfs9myrW6723G6n2rUqlt2zWlbNdauuVck1aIPiAGI7ojOicimV3fDne4A49DhQH5iRRgleANe/idhBAml9OpKHI6IcJpFUcSamFqeLNX0PXDuYxwGDZIrQO+jaMBI39Ia1ZgLYnnQ71p50jwCTmIDSd0VwLhnOhezFG0oTEdilFJUoJPIGYEqEPadyXjU5CeMAFFIzjPwkgFK8iLPOmHzz7xgI88w66k6yg/dlXYff8hZIH58oB65quQA5RjhyB1XyQr4uuLxbcB6+lfhEnS/ZT8EI3iDZ//RBE8WPgiOyohxy4Xlo2ItqHhZUJPJTgguiFze0FHh5/Jv5ON5Q6a2UpGmSDaCmpI3J8KZUONscA06kPq0n0StQswhh/uh6KFAfZC7s+/gSsaBjgQSEki5atvzB22AMXL0N+pLnq58+PPZSyr4JWIljtnYgnxAK8bevDOxh5SfNt/JvGTH/Y1xHYu3kkXXKB4EgdK5W6iJYf0EKHMmwRCpXxHaDHwtwLPm+sWhygUVINk0TAV9/0ZQkNXSEcZRQ0e/omWFXJjOcYh2D9+H0KUwmxdu7dcW/vFufBtdjKVgh0gtf8t/OBsnogqU8Sf8MS0NfyaeiTE7nO7K8BXiozC2n6zq9slstV2qFMlddaevVigbuVdL8ZP5s2enp4Xlo/gs=</con:value></con:property><con:property><con:name>authTokenCreatedAccount</con:name><con:value>F923A2E92F3A5347E0401F0A05992FF7</con:value></con:property><con:property><con:name>authTokenCreatedAccount_1</con:name><con:value>F923A2E92F3A5347E0401F0A05992FF7</con:value></con:property><con:property><con:name>authTokenCreatedBy</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedBy_1</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedUser</con:name><con:value>F9239F10E3609ED5E0401F0A07995904</con:value></con:property><con:property><con:name>authTokenCreatedUser_1</con:name><con:value>F9239F10E3609ED5E0401F0A07995904</con:value></con:property><con:property><con:name>authTokenisGen</con:name><con:value>Y</con:value></con:property><con:property><con:name>authTokenisGen_1</con:name><con:value>Y</con:value></con:property><con:property><con:name>authTokenStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>authTokenStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>deviceAuthToken</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deviceAuthTokenRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>deviceDeviceString</con:name><con:value>george</con:value></con:property><con:property><con:name>deviceDeviceString_1</con:name><con:value>george</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>expiresMinutesDiff</con:name><con:value>120</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025CA1452499019EE05305991E0AA6E0</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025CA1452499019EE05305991E0AA6E0</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL_RTL</con:name><con:value>urn:dece:accountid:org:dece:F923A2E92F395347E0401F0A05992FF7</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025D1508A83C2B19E05307991E0A893B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025D1508A83C2B19E05307991E0A893B</con:value></con:property><con:property><con:name>rauthToken</con:name><con:value>F9239EEAD1E32F25E0401F0A079957F1</con:value></con:property><con:property><con:name>rauthToken_1</con:name><con:value>F9239EEAD1E32F25E0401F0A079957F1</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsSkipLastLoginCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>Username</con:name><con:value>stsapi_107_1409969567479</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D1508A83D2B19E05307991E0A893B</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>bfb3a8c0-b9ae-46c5-a24c-102ff5f5d354</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4ed6cf1f-b471-4fb6-a1c6-bfa8b600ea30</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8afdd552-9c80-468c-8b21-2b7eac51c492</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2c38eaae-32ff-41e1-87c4-e5507798bbd5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6cee2dd0-4510-4bdd-8e29-f356fe1ccd4a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>449d84b3-e495-490d-b909-4b91aebc1c37</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ea3ebc34-86fe-4773-ab92-7d848178dd54</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>20a58493-d1e0-46c7-8661-7a3fd1b38bc1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b1b6a775-1c13-4076-926a-a110860f65c8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>053f69f5-26db-4520-9a80-f04ca83e928e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63c447f1-0213-4202-ae6b-ae6808f4c34c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5c0e8d65-12da-443c-b7ea-b745607308aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5efcdf84-0568-4688-86aa-0225f73d180a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>108ee1fe-c230-443c-bab9-0b5c8e9901e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98555695-8b9b-46ad-9e82-ecc516028dc4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2119b0aa-bcbc-4842-8568-76f014385ea0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d0cccc0a-89b3-4639-aa4f-9c09f83867fa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a4073dfc-86d9-457f-82ae-7888a91fcb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fc7a21c4-332b-40d0-8634-40a3c5e40493</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_40908 - STS - DeviceAuthToken DeviceString - STSCreate with DeviceAuthToken DeviceString Element - P0" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7e381981-1f63-42f1-ae4d-3e03fba86102">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="4f9366f4-b9a9-4112-98b2-0150407194d7">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("scenario","STSCreate");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffBlockedTou"));
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionUUIDPrior",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsSkipLastLoginCheck","true");</script></con:config>
      </con:testStep>
      
      
      
      <con:testStep type="groovy" name="Call Account Create" id="bfffa1bc-5314-451b-94d7-5ce5c7b3e760"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call First User Create" id="dca8a8c7-5432-4bb4-8c6f-d49f753c5146"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="b9cf64b2-1e1e-474d-bff9-9cb811dc8809"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("Username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script></con:config></con:testStep>
      <con:testStep type="groovy" name="-- STS Invocation to Coordinator" id="a5cda553-9f07-4146-8ade-30d5338a3956">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="-- STS Get Invocation to Coordinator" id="04f9c1f4-e6f7-43bc-a79d-fc2e620f16b2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Policy Create - TOU" id="209fb771-9db8-489b-8234-2bc41d8b62aa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set tokentype deviceauthtoken" id="4264a1da-062b-410e-9298-7d0697ef8286"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_deviceauthtoken"));
tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffDeviceActive"));</script></con:config></con:testStep><con:testStep type="groovy" name="Flush Node's DEVICE_AUTH_TOKEN rows for the Retailer" id="8d55eb80-047b-4c85-8bf8-b2c2623cfffd">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tP.getPropertyValue("nodeIdRTL").toString();
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
String node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeid);
/*
*  Remove all authtokens for the retailer node
*/
try {
	def atoken = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	atoken.deviceDeleteTokensByNodeOid(node_oid);
}
catch (Throwable e) {
	this.log.info "Error during dbDeviceAuthToken - $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- DeviceAuthTokenCreate - DeviceString" id="a3e0739a-b683-4cb5-8189-40601e3c423a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("DeviceAuthTokenCreate - DeviceString API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get the DEVICE_AUTH_TOKEN" id="942f81db-eed5-4478-8feb-81fa9ab43b53">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String oid = tC.getPropertyValue("rauthToken").toString();
String dcode = "";

assert oid.length() > 1;

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));

	dcode = dbUtils.deviceGetAuthCode(oid);
}
catch (Throwable e) {
	log.info "Error during dbUtils.dbDeviceAuthToken - $e";
}
finally {
	assert dcode.length() > 1;

	tC.setPropertyValue("deviceAuthToken",dcode);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="-- STS login" id="d9ad9f39-4105-451d-aa20-b81b0f719c35">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  Auth context for device
*/
tC.setPropertyValue("stsAction","DeviceString");

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call STS Get" id="91bb88a0-dcff-4746-9e86-b3d7be342e9b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS GET API - Invoked to the Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="-- RightsTokenGet" id="9028586b-a85c-4e66-9fdd-04acb54faf16">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025D16B065852CFFE05307991E0A0E78</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUIDPrior</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authTokenCreatedAccount</con:name><con:value>F8F12CDFB51152A3E0401F0A07991D20</con:value></con:property><con:property><con:name>authTokenCreatedAccount_1</con:name><con:value>F8F12CDFB51152A3E0401F0A07991D20</con:value></con:property><con:property><con:name>authTokenCreatedBy</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedBy_1</con:name><con:value>RET</con:value></con:property><con:property><con:name>authTokenCreatedUser</con:name><con:value>F9239EC255EE3ADAE0401F0A05993BD8</con:value></con:property><con:property><con:name>authTokenCreatedUser_1</con:name><con:value>F9239EC255EE3ADAE0401F0A05993BD8</con:value></con:property><con:property><con:name>authTokenisGen</con:name><con:value>Y</con:value></con:property><con:property><con:name>authTokenisGen_1</con:name><con:value>Y</con:value></con:property><con:property><con:name>authTokenStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>authTokenStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>deviceAuthToken</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deviceAuthTokenRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>deviceDeviceString</con:name><con:value>george</con:value></con:property><con:property><con:name>deviceDeviceString_1</con:name><con:value>george</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>expiresMinutesDiff</con:name><con:value>120</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>025D16B065842CFFE05307991E0A0E78</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:025D16B065842CFFE05307991E0A0E78</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>025C51E514D61574E05307991E0A178D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:025C51E514D61574E05307991E0A178D</con:value></con:property><con:property><con:name>rauthToken</con:name><con:value>F923A2E629EA5520E0401F0A05992FF1</con:value></con:property><con:property><con:name>rauthToken_1</con:name><con:value>F923A2E629EA5520E0401F0A05992FF1</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsSkipLastLoginCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>Username</con:name><con:value>stsapi_107_1409969572056</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025C51E514D71574E05307991E0A178D</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>bfb3a8c0-b9ae-46c5-a24c-102ff5f5d354</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4ed6cf1f-b471-4fb6-a1c6-bfa8b600ea30</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8afdd552-9c80-468c-8b21-2b7eac51c492</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2c38eaae-32ff-41e1-87c4-e5507798bbd5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6cee2dd0-4510-4bdd-8e29-f356fe1ccd4a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>449d84b3-e495-490d-b909-4b91aebc1c37</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ea3ebc34-86fe-4773-ab92-7d848178dd54</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>20a58493-d1e0-46c7-8661-7a3fd1b38bc1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b1b6a775-1c13-4076-926a-a110860f65c8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>053f69f5-26db-4520-9a80-f04ca83e928e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63c447f1-0213-4202-ae6b-ae6808f4c34c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b9826b7-a3a7-462e-9b85-6485ed0f5068</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="TestSuite Utility Test Cases" disabled="true" id="29e8cdd4-b32f-4148-ae3a-ef0e02b4df6a">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Authentication Contexts" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7e214b93-48a9-46ca-bc6d-ca7d32e14327">
      <con:settings/>
      <con:testStep type="groovy" name="Extract Properties from calling test case" id="627d5a76-b975-4ab8-b28c-0e16f41f20e0">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC;

tC.setPropertyValue("nodeid", null);
tC.setPropertyValue("username", null);

try {
	callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

	tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
	tC.setPropertyValue("username",callTC.getPropertyValue("username"));
}
catch(Throwable e) {
	log.info "ERROR during getTestCaseByName - $e";
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish Authentication Context" id="3c42974f-ae57-49b1-b0f7-05c17b910c19">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

String nodeID = tC.getPropertyValue("nodeid").toString();
String userID = tC.getPropertyValue("username").toString();
String useroid = "";
String acctoid = "";

assert nodeID.length() > 0;
assert userID.length() > 0;

try {
	def a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	useroid = a.userGetUserOID(userID);
	acctoid = a.userGetAccountOIDbyUsername(userID);
} 
catch (Throwable e) {
	log.info "ERROR during dbUtils.dbUser - $e";
}

log.info "nodeID[$nodeID] - userID[$userID}";

switch (nodeID) {
	case "90009000":
		if (userID == "pjgstsFull1") {
			callTC.setPropertyValue("assert","nVdbc6pKE333V1jux5ThJipWkqrhIkFFBcHby1cII6AIyoCgv/4MGI1mZ++T8z2kzDTTPau7F82aF2TtAroDEIJx4kdhVRFfa/9jGw2WbFpMnWtCqt5wHKbebrPteotmnOaKbq5Jh6tVFYRSqIQoscLktUaTFFMn6TrVNiiywzQ7LPtMNprLWnUKY4RD4y3PZK2a74IQdcpjX2tpHHYiC/moE1o7iDqJ3ZkAddDBOzvWFVPt7eWCsjwwfvOSZN8hCPvZgTYMAvvZjnbEC/Gw58VBnYnvhlaSxvDjTAe91j58syx7zpjnKHYJmiRJguQIvMdBvvur9la5OkNHCdfRZS1YYRT6thX4Z6sApcLEi5wqCNwo9hNv94fQFEGRReg6zO26TTXCXzXi84AS3Q8jPYCMkVVHnkVdg+lwDWMY2rBq6spr7dfPOnjxNWIrROso3qEv6/8GCYZHGER76NTRNbMrup9H/KZcby/Q7iihHaTIP8JhQZO9ZUNUHcdw7ecDH2HyOahatr+aoyvDoP1fWvJC3OPEsIlvKiP6LkTJ/9Ov+15dokytIIVv0ngu98exRSbvZ0DbT+fpKJ9ngyXDRq8lhPvNF1C3Vn+svxL1xqsPJ7MFSXAwpITkCcptDhh/qzGnZDFJAJzzC7HRlsC2vyUG7tYk1+Mt6geH7uE8MQzKbK/Axp3Fjd5eCUy151Z2q4a7Xg5RcyyoZkt03rsaWnBqy0LvyzQ4zCWiPaPlHbt1tTZDTs9au5U7k01T9trOvH+Sov1hODk2pfWJ8yoZzW9N9rTZsEB/Og16m7H9+pnTfQ5FXn14KpMs/p+zJCdaiXVbCMWkWOPXM4FvqqKI6VkQwGnigkzhgYv/NmDIu9uDt/VlLiN5oGldIAp8sJEGKtjKgDIl3lOF6VTNhTPo8e5wih2NCgiWvKpLmZgtxKmmvUuZZzjy9LSSg3R5loYqQKWz4KmSLk1F3ZBUFUQXW66KKznfqBM1U7SFWMEBRCnfnx2ZS6Cc+zatsOqEpRcTNl3Op9jePQ12w+PKkAJVUGVhcpAnyooRNakH9MXMprsp9j0PdvuosjD5O6feHm4A7GYkPhOcVWObqYZJD0XdKm3Go01V5J6qoUzQyqzkipT1pub5sxYCrwrOTsolA4wvtbANoTskl/MesmZsqOogE93SuS9lzugKRNXIrCJcajWQMl3SzWFX1ZVMAqVNlLIAreiht5K9o81oec8Am/vGCJo064b4eagf7RN7qFhyF6x2U8pmdM/2Wd+aR5m7bGeituj1o6WCwwyBJvG8BjAgEhSp4frzYMBP2dHe52gfDtbdaAe9uKJSUX97POdk22dG7ng4Y8X1tjWW/TFjOR6hBDa9YbZAUaDTpzzNcvQFoYuhf26O+uYc+vHinAxZjWr6bbaiz1JzLkZBy3mfL8z+U76wNWM0npiz8TnPh4dN+xwk7yP+PZ70VNEdDSEcI/uJIK0ub7RFVli8bzCf1joJ2QpwVR4AeeO6ko8JzL9vLiR811UJkxeoQiYLM0GeAFl+khRe1LR116PGtjxNTWqoKpIT4DKdFnM9qCwFXsSdIq3Zcr+gu+TSAE4ZTGtIXVcz2afeHC61YWBME5Dtp+uQokh5r72v1cy11YIBjpJNePwW8ZVUAaY12vfIvD9tktRBc4LehAMmk0/obT7y3OVp6y63uCmLu1dnYYBgatxxTMEUm1U0Q9JV0L68b7mqmIwe2Lt8v9rZuWjgnpXOkcFLelcjzVwUQf9iQwagc7Q4SxtVkEr/CshVC9PiuJp7aBEO/ZEhpZi06R1dNiua/FeOFRSrPHLsIAANfOWYdOGYBNaHJ6UtUohtCns0y1xelg5aazrocXtSmw+2Ff6pS7iJHzRGYTsz+k8z6pS1vI02m3GK6AlP4XrhMauEJ62zrcHetiX7+lYMm43gpA5UjTV9IjiRG3jI0KAyVKhQYpJzl+Di9InfLf3d+cw0aHM3nqRHxbT6iDp5q8OMyzbj9yZBxPKJPbeWR607j+zF5TvydUjejJcxStwP2IcJfNVek3S1gXZyXRbfYUWsdvHH0Ur+ruMKi+/U1+XWzr4QgyiBYVJ7K7wKDddJsdLznQ7+cl7WAkcyTabNUA2OFGi2LZENkuqSgGxxHMNz7FXsXVB8gShE4dovzirk7OVj/XeA9q6DYOjAuH6MUtuDqPaXiEW9qkqoYxUShQgaEZbLFCV0RZFmgMCwpMhyDabFMEKLpTmh2WjQWCoPo2QUjmKwTmD8KJWZB6msQ9vf+7DQ04WoQFhVoASX5GAd0ySgno/WcwhTrLjjQvR26EabJZC/2wewAEzsIicN4PPe25cFItDll65bNiqtHNYlxV+peP6Y49dn13LgPY5fbEBFQjzELYXfCP/GNZvfsm58e0G4hgep4xfCBtc2iX37guTx0SdlCq7c+HJN64r7tv2r4SE08TWr22nO0bdvzL/djbC0xuLr7dqYg/V8eE6Px7RsRasQljEOT1AESRMTaKdYHZ6MaAtD4haC+JEwv6H+cvLN/ogvTbxwkuC3eoeJUy2XP7iVTSAqbmUKJn7+0yvfw5G4bgnMk+9sQoAvbwXiv97v7I5d7MPmMf7Jotj5bNc3se7OwXkWY8wP3WJVyPDTH5hhRzisj0dZFN8H/y7Ad4c/Gm9FvmFJMJtWaQL//KRazKjXmmXbURomilgrDfdzs8SZnPaw87nptzClEP642eTojzebuTqY4Am2s2q3vf6/b677JV1siL2QX2J5reX4ko4PD927Of0B8H5Uc3RT4DlRakqNZrfR5e5HdaPFCrcCPmTy9pv5d8tdTb++D2//AA==");
               callTC.setPropertyValue("assertId","_544506a3-96e1-4dd3-8858-723d6b26f0d9");
               callTC.setPropertyValue("assertionUUID","_544506a3-96e1-4dd3-8858-723d6b26f0d9");
               callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:926CB9DE6E46F4F9E0401F0A0799475C");
               callTC.setPropertyValue("assertionAccountId","926CB9DE6E46F4F9E0401F0A0799475C");
               callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:C917F5E9787BFDD2E0401F0A05994FF8");
               callTC.setPropertyValue("assertionUserId","C917F5E9787BFDD2E0401F0A05994FF8");
               								 //C422F50332DE808BE0401F0A079919A1
               									
               callTC.setPropertyValue("accountoid",acctoid);
               callTC.setPropertyValue("useroid",useroid);

		} else if (userID == "pjgstsStandard1") {
			callTC.setPropertyValue("assert","nVfbkqLKEn33KwznscPmJipGd0cUV1FRQby+nEAoAUVQCgT9+l1g62hPz+zZ58HQSiuzVmYuklVvyNoHdAcgBOPEj8KqKr7X/kfbzXWLtNi6zTFMvdFqU3WLbW7qNEszDuk4NsO2alUVoRSqIUqsMHmv0STF1Em6TrVNkuuwdIdsvDJkY1WrzmCMcGi85ZWsVfN9EKJOeex7LY3DTmQhH3VCaw9RJ7E7E6ANOnhnx7phqn28XVGWB8YfXpIcOgRhvzrQhkFgv9rRnngjnva8Oagz8d3QStIYfp7poPfap2+WZa8Z8xrFLkGTJEmQHIH3OMh3f9Q+Kjdn6KjhJrquBSuMQt+2Av9iFaA0mHiRUwWBG8V+4u1/E5oiKLIIXYe5XbepRvijRvw8oET3l5GeQMbIqiPPom7BDLiBMQxtWJ0a6nvtx9918OprxlaINlG8R1/W/w0SDE8wiA7QqaNbZjd0fx/xm3J9vEG7o4Z2kCL/BIcFTQ6WDVF1HMONnw98hMnnoGrZ/mqObgyD9n9pyRvxiBPDJr6pjOi7ECX/T78ee3WNMrOCFH40c25tTwLV7p5D1zglRxb6Zq6Og8HyvYTwuPkK6t7qz/VXot559ekE3dncWbszCW7P0mCxbLWOjUPY3vvNwS7MjXHQlycoPWltNCFbrBoI2c7shqHX27/ELFpxypADirVGm6bhV7q0Du2+rCib6BDCi5sw+mBg6t42hmT3JHMOs/f3Ymx1ia6sxvJi1eTjoI0ObcoKZiP5lEU9HU6a3KjVXlfGw/HLaJjQadZfbs8X8sxq7z9zesyhyKsPz2WSxe8FS3KilVj3hVBMig1+PBP4oamqmF4EAZwnLshUHrj4swVD3t0dvZ2vcBnJA12XgSjwwVYaaGCnAGoq8Z4mzGZaLlxAj3eHM+xoVkCw4jVDysRsKc50vStlnukos/NaCdLVRRpqAJXOgqdJhjQTDVPSNBBdbbkmrpV8q020TNWXYgUHEKX8cHEULoFK7tu0ymoTll5O2HS1mGG7fB7sh6e1KQWaoCnC5KhM1DUj6lIPGMu5Tcsp9r0M9oeospzyD069A9wCKGckPhNcNHOXaeaUHoqGVdrMZ5umKj1NR5mgl1kpFSnrzaaXn7UQeE1w9lIumWB8rYVtCvKQXC16yJqzoWaATHRL576UOaMbEE0ns4pwrdVAygzJmA5lzVAzCZQ2UcoCtKaH3lrxTjaj5z0TbB8bI+jSXA7x/6Fxss/ssWIpMljvZ5TNGJ7ts761iDJ31c5EfdnrRysVhxkCXeJ5HWBAJChSw/XnwYCfsaODz9E+HGzkaA+9uKJRUX93uuRk22dG7ng4Z8XNrjVW/DFjOR6hBja9ZXZAVaHTpzzdcowlYYihf2mO+tMF9OPlJRmyOtX022zFmKfThRgFLae7WE77L/nS1s3ReDKdjy95Pjxu25cg6Y74bjzpaaI7GkI4RvYLQVoyb7ZFVlh2t5hPG4OEbAW4Gg+AsnVdyccE5rvbKwm7hiZh8gJNyBRhLigToCgvksqLur6RPWpsK7N0Sg01VXICXKbzcmEElZXAi7hTpDVfHZa0TK5M4JTB9IYku/qUfekt4EofBuYsAdlhtgkpilQOenejZa6tFQxw1GzC46eIr6QqmFqjQ4/M+7MmSR11J+hNODBl8gm9y0eeuzrv3NUON2X58OgsTRDMzAeOqZhi84puSoYG2tfnLdfUKWME9j4/rPd2Lpq4Z6VzZPKSIevkNBdF0L/akAnoHC0v0lYTpNK/AnLNwrQ4rRceWoZDf2RKKSZt+kCX7Zom/5VjBcUqzxw7CkAHXzkmXTkmgc3xRW2LFGKbwgHNM5dXpKPemg163IHUF4NdhX+RCTfxg8YobGdm/2VOnbOWt9Xnc04VPeEl3Cw9Zp3wpHWxddjbtRTf2IlhsxGctYGms1OfCM7kFh4zNKgMVSqUmOQiE1ycvvD7lb+/XJgGPd2PJ+lJnVp9RJ299XHOZdtxt0kQsXJmL63VSZcXkf35Hvk6JO/G6xglHgfs0wS+aa9Jut5CO7kti/ewKlZl/HK0kj/ruMLiO/VNubVzKMQgSmCY1D4Kr0LDdVKs9Hyng9+c17XQYhhRbvN8i2c4riVKZIOkZBKQLY5jpSZ3E3tXFF8gClG48YuzCjl7fVn/GaC97yAYOjCun6LU9iCq/SFiUa+qGhpYhUQhgmaE5TLZpimqITUbpCjIoIF/cozQaPAc3RAAx3C16jBKRuEoBpsExk9SmaKfpLIBbf/gw0JPF6ICYVWBElySo3VKk4B6PVmvIUyx4o4L0duhG22WQP7+EMACMLGPnDSArwfvUBaIQNdvum7ZqLRyWJcUn1Lx/DbHr//dyoH3OH6xARUJ8RC3FP4i/KkOe8vml6wb314QbuFB6viFsMG1TWLfviJ5/usnZQqu3PlyS+uG+779q+EpNPE1q/tpzsm378y/342wtMbi6+PWmKP1enxNT6e0bEWrEJYxDk9QBEkTE2inWB2ezWgHQ+IegvgrYX5H/eXku/0ZX5p44STBT/UeE6daLv/iVjaBqLiVqZj4+d9e+Z6OxHVLYJ58ZxMCfHkrEP/xfmd37GIfNo/xVxbFzs92fRPr4RycZzHG/NAtVoUMP/+GGXaEw/p4lEXxY/DvAnx3+LPxXuQ7lgSzaZ0m8Pf/VIsZ9V6zbDtKw0QVa6XhcW6WOJPzAXZ+bvolTCmEP282OfrtzWahDSZ4gu2t2n2v/++b635JFxtiL+SXWN5rOb6k48ND92FOfwJ8HNUc3RR4TpSaUqMpN2TucVQ3WqxwL+BTJh+/mH+1PNT06/Pw8Q8=");
			callTC.setPropertyValue("assertId","_2c6b70a5-c933-4781-a56f-2523d0ddc357");
			callTC.setPropertyValue("assertionUUID","_2c6b70a5-c933-4781-a56f-2523d0ddc357");
			callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:926CB9DE6E46F4F9E0401F0A0799475C");
			callTC.setPropertyValue("assertionAccountId","926CB9DE6E46F4F9E0401F0A0799475C");
			callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:C733DF8BB7B3997DE0401F0A07995E69");
			callTC.setPropertyValue("assertionUserId","C733DF8BB7B3997DE0401F0A07995E69");
			callTC.setPropertyValue("accountoid",acctoid);
			callTC.setPropertyValue("useroid",useroid);
		} else if (userID == "pjgstsBasic1") {
			callTC.setPropertyValue("assert","nVfbkqLKEn33Kwzn0bC5KCrGdEcU18YWFcTrywksSkARlAJBv34XODra0zN79nnosCvJylqZuUhWfcf2PmB7AGMUJ34UVjXptfY/2Gw7fItnGi1uQzda7eamsV6vmQZ0+DWDoG2316hW1TBOkRbixA6T1xpLM80GzTaYrkXzPa7To9mXTpNd1aozFGMSmri80LVqvg9C3CuPfa2lcdiLbOzjXmjvEe4lsDcB+qBHPHv2DVPt7fsVZXlg/OYlyaFHUfDFQRAFAXyB0Z76Tj35fHdwb+K7oZ2kMfpxpoNfaz/2Zln2kjVfotilWJqmKZqniI+Dffdb7a1y24wcLdxE17Voh1HoQzvwL3YBSkeJFzlVELhR7Cfe/jehGYqhi9ANlMMGZFrhtxr184AS3V9GegIZY7uBPZu5BTPRBsUohKg6NbXX2re/6+B1rxXbId5E8R5/Wv83SCg8oSA6IKeBb5nd0P19xC/K9fYdwZ4WwiDF/gkNC5ocbIhwdRyjjZ8PfEzI5+Bq2f5qjm8MQ/C/tOQ79YiTwKa+qIzkuwgn/0+/Hnt1jTKzgxS94VY9pju8sv7wbHh6j7JWf54pK19xotcSwqPzFdS91T/Wn4l659WPTXMJZZ41W+urEcB2Pe13J6fVcH5hHDl39ovpVhKV3KXZ/Pi+w8Zues63SVsbeUq6nrXxLDlnp4inxEXi8VQlDtEUsmDOCZsL6M9xuBuPoF6njPFa3UAvlNnFtC9sYzavC/2tk62X3LY7aWFfdmlmv0nq2mRxfj+C1o7lK3sD6MuTyDd3qd5dDoLwCF5/5vSYQ5HXBzqXSRb/Lzial+zEvi/EYlJsyOuZoDdd06T0IorgPHFBpgnAJX9bMBTc3dHb+Sqf0QIwDAVIohBs5YEOdipgprLg6eJspuciyUxwhzOy0aqAYCXoppxJ2VKaGca7TGrpqLPzWg3S1UUe6gCXm0VPl015JpmWrOsgutpyXVqr+Vaf6JlmLKUKCSDJ+eHiqHyC1NyHrMbpE45dTrh0tZgRu3Ie7IentSUHuqir4uSoTrR1UzLkPjCXc8gqKdl7GewPUWU5FR429Q9oC5CS0eRMcNGtXaZbU3YomXZps55tuqb2dQNnolFmpVbkrD+bXn7WQhR00dnLuWyB8bUW0BKVIb1a9LE950LdBJnklps/5MwZ3YDoBp1VxGutBnJmyuZ0qOimlsmgtElyFuA1O/TWqneCTSPvW2D72BjRkOdKSJ6H5gmeuWPFVhWw3s8Y2DQ96HO+vYgyd9XNJGPZ/4hWGgkzBIYsCAYggGhQpEbqL4CBMONGB59nfTTYKNEeeXFFZ6KP3emS012/OXLHwzknbXadseqPm7bjUVoA2W1zBzQNOR+MZ9iOuaRMKfQv7dHHdIH8eHlJhpzBtP0uVzHn6XQhRUHHeV8spx/1fAkNazSeTOfjS54Pj9vuJUjeR8J7POnrkjsaIjTGsE7RtiJYXYkTl+9bwqeNSSOuAlxdAEDduq7sEwIL79srCd9NXSbkBbqYqeJcVCdAVeuyJkiGsVE8ZgzVWTplhromOwEp03m5MIPKShQk0inanq8OS1ahVxZwymBGS1ZcY8rV+wu0MoaBNUtAdphtQoah1YPxvtEzF+oFAxwtmwjkLRIqqQam9ujQp/OPWZtmjoYT9Cc8mDbzCbvLR567Ou/c1Y40Zfnw6iwtEMysB45phGLzimHJpg661/ct17Vp0wzgPj+s9zCXLNKzcnNkCbKpGPQ0lyTwcbVhC7A5Xl7krS7K5f4KyHWb0OK0Xnh4GQ79kSWnhLTpA122a5b+V44VFKs8c+woAgN85ph85ZgMNse61pUYzLXFA55nrqDKR6MzG/T5A20sBruKUFcoN/GD1ijsZtZHfc6cs463NeZzXpM8sR5ull5znQi0fYEG6u86qm/upLDdCs76QDe4qU8FZ3qLjhkeVIYaE8rN5KJQfJzWhf3K318uzRY73Y8n6Umb2h+YOXvr45zPtuP3NkXF6pm7dFYnQ1lEcHn9jnweknfjdYxSjwP2aQLftNckXW8RTG7L4jusSVWFfBzt5M86rrD4TmNTuvYOhRjECQqT2luxq9BwvZQoPd/pkS/ndS12mk1J6QpCR+R5viPJdItmFBqQTyXPyW3+JvauKD5BFKNw4xdnFXL2+rH+M0C472EUOihunKIUegjX/hCxqFdVC02iQqIQIysicplvijwANCNKXJMXRbopCC1RkXmBFxSa5phadRglo3AUg02C4iepzLBPUtlE0D/4qNDThajARFXghJTkaJ/SJGBeTvZLiFKiuONC9PbYVpejsL8/BKgATO0jJw3Qy8E7lAWi8PWXbdgQl1ae6JLir1Q8v83x87NbOYiP4xcOuEhIQKSl6Bfh3+5xt2x+ybr15QXhFh6kjl8IG1LbJPbhFcnzo5+UKbhy58strRvuu/tnw1No6nNW99Ockw/vzL/fjYi0JuLr7daYo/1yfElPp7RsRacQljEJTzEUzVITBFOiDs9WtEMhdQ9B/ZUwv6P+dPLd/owvTbxwkpC3ek+IUy2Xf3ErmyBc3Mo0Qvz8b698T0eSuiUoT76yiQG5vBWI/3i/gz1Y+BHzmPxkUez8bNcXsR7OIXkWY8wP3WJVyPDzb5gBIxLWJ6Msih+DfxXgq8Ofjfci37EkhE3rNEG/f1ItZtRrzYYwSsNEk2ql4XFuljiT8wH1fjr9EqYUwj9uNjn+7c1moQ8mZILt7drd1/9354Zf0gWSOz3xL7G81nJySSeHh+7DnP4B8HFU82xbFHhJbsutttJS+MdR3epw4r2AT5m8/WL+1fJQ08/vw9s/");
			callTC.setPropertyValue("assertId","_c36d9491-45f0-463f-bbb1-cd9b1ecaa6be");
			callTC.setPropertyValue("assertionUUID","_c36d9491-45f0-463f-bbb1-cd9b1ecaa6be");
			callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:926CB9DE6E46F4F9E0401F0A0799475C");
			callTC.setPropertyValue("assertionAccountId","926CB9DE6E46F4F9E0401F0A0799475C");
			callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:C733DF8BB7C9997DE0401F0A07995E69");
			callTC.setPropertyValue("assertionUserId","C733DF8BB7C9997DE0401F0A07995E69");
			callTC.setPropertyValue("accountoid",acctoid);
			callTC.setPropertyValue("useroid",useroid);
		} else {
			log.info "ERROR - userID [$userID] supplied is not configured!";
			assert 1 == 2;
		}
		break;
	case "90009000":
		if (userID == "pjgstsFull2") {
			callTC.setPropertyValue("assert","nVdbc6rKEn73V1iuRyvh4t1KUjVcRFRUELy9nMJhuCiCMiDor98DRmOykrXXPilTOk13z9fd3zQ9L9jc+2wXYIyi2AuDsiy8VpqWydRtc/O0YUz7qd6y0JNpWc2nptVClml3GnarWSnLGCdIDnBsBvFrhaUZ5omhyUdnWl2m3q3Xnpvt1rpSnqMIE89E5ZmulLO9H+BusetrJYmCbmhiD3cDc49wN4bdGVBGXaLZNW+QKm8vV5DFhtGbG8eHLkXBZwtB5PvwGYZ76oX6pPNi4e7McwIzTiL0vqeFXyvvtmmaPqe15zByKJamaYruUETHwp7zq/JWuhkjSw7s8LrmzSAMPGj63sXMQSkodkOrDHwnjLzY3f/gmqEYOnf9hDL4BJl68KtCfWxQoPtLT59ARth8wq7J3JxpyEYRCiAqG5r8Wvn1VwW8muqRGWA7jPb4y/q/IULBCfnhAVlP+BbYDdzfe/wmW28vCHblAPoJ9k5onLPkYEKEy9MI2V428jDhnoXLRfXLGb4RDMH/UpEX6hEngU19kxnBcxCO/59yPZbq6mVu+gl6o+ugbq47hlEVB2N76PRhG/s7300y+rWA8Kh8BXWv9Pv6K0/vtHo3mlIbjW+16g0kCOGRjYCBxXkdo/Z01de4qtvWZNoY1Nbxdq+i6XDSqWfWeWlzMMN00EsEpk7RkuVPR7vQKhnjg7uObIU/7+Lx0HaceVLN6KbrJ0bmjepCO5VDGCcqE4YrxXP2Dd6dtzx70AotDlzaM9aOq3Sn3s/GQlTSOgk7QNO430TAsLO+fUxfP2J6jCGPa4jORZD572WD7ghmbN4XfN4obHI6Y/SmyLKQXHgenGcOSGUOOOR/C8acszu6O0/qpDQHVLUHBJ7zt+JIATsJMIbIuQo/nysZfwEDzhnPiaFeAv6aUzQxFdKVMFfVvpi6uiXNzxvJT9YXcawAXBjzriJq4lzQdFFRQHiVZYqwkbKtMlNSWV0JJeJAELPDxZI6MZIyD7JyQ5k12NWskayXcyLvnUf78Wmji77CKxI/O0ozeVMTVHEAtNUCsr2E2F5G+0NYWhncg9HggLYA9VKa7Akuir5LFd1gx4JmFjL9s0yRpYGi4pRXi6ikkpgO5sblIxc8p/DWXsxEHUyvuYA63xvT6+UAm4tGoGggFZzCeCim1uQGRFHptMRfczUSU03UjHFP0eRUBIVMEFMfb9ixu5HcE6yp2UAH28fC8Kq46AXkeaCd4LlxLJlSD2z2cwbWNBd6Dc9chqmzbqeCuhoMw7VM3IyBKnKcCgggGuShkfxzYMTNG5OD12E9NLJ74R65UUlhwuHudMnotlebONPxoiHYu9ZU8qY103Ip2YfstrYDsoysIeOqpqWtKE0IvEtzMjSWyItWl3jcUJmm126UtEViLIXQb1n95coYVrMVVPXJdGYsppcsGx+37Ysf9ydcP5oNFMGZjBGaYlilaLPH6W2hwa/6W8InW6NRowQchQNA2jqO6BECc/3tlYR9TREJeYHCpxK/4KUZkKSqKHOCqto9l5lCaZ4YzFiRRcsnaTqvlppfWvOcQCpFm4v1YcX26LUOrMKZWhd7jmo0qoMlWqtjX5/HID3M7YBhaOmg9m0ldaCSM8CS0xlHThFXSmRgmJPDgM6G8ybNHFXLH8w6wKhlM3aXTVxnfd456x0pyurh6Kx04M/1B47JhGKLkqqLmgLa1/OWKbJR03y4zw6bPcwEndSsMA51TtR6Km1kggCGVxnWAZvh1UXcKrxY2JdAppiEFqfN0sWrYOxNdDEhpE0e6LLdsPS/ciynWOkzx448UMFXjolXjonAPlbltsDgRpM/4EXqcJJ4VFvz0aBzoNXlaFfiqj3KiT2/PgnaqT6sLphz2nK36mLRkQWXrwb2yq1tYo42L1BFg11L8rSdEDTr/lkZKWrD8Cj/TG/RMcWj0lhmArEWX3pUJ0qq3H7t7S+XWp019tNZcpINc4iZs7s5LjrpdtpvUlQknRuX1vqk9pYhXF3fI1+b5F14baPUY4P91IFvo9cs2WwRjG/L/D0sC+UeeTma8Z/HuFziWU92odo95LMgjlEQV95yq3yE6yZk0POsLnlzXtcANNtcB7R4juFZmuVEuk4zPRrQjU6HJJ2/zXpXFF8g8mFge/le+TB7fVn/GSDcdzfIjFBU+YOnPE9lOdDI9BEGGOnha+V/DGQ7LN1mLAbSrA1rNuzU22yt1uywjQ2kW5ZJQ3tj2ZtOpTwO40kwiYAdo+hhVma+zsoagt7BQ/lA/T5W4Jjk5Giekthnn0/mc4ASMnFH+dDbbdE0S2Fvf/BRjpzah1bio+eDeygyROHrN/tkQlxIG2QwYchfMfL8GOzXZ7e8EB3LyxVwHg+HSE3RN4N/7RbMb0Gz314Qbu5BYnn5ZEOSHEcevCL5/OiDMzlZ7oS5hXXDfVf/Kvjkmvoa1X036+TBO/XvVyMyWpPpq7h+YFKYo/l8fE5Op+SjFBFxTzEU+TVDMCHj4VkPdyig7i6ovxnM76C/bHyXf4aXxG4wi8mp3hPalIvlv1/KPlmTDMQoi7+T8T65huWb//GmBrsw1yPiKflKw8j6SPw3vh72IZDzjuQFTr7KJ+rzDzWGIXHrka4URo/Ov3Pw3eafhfd83bHEhBebJEY/Pynn7ea1YkIYJkEsC5VC8NgCC5zx+YC6H0q/uSlm2vdLSvbTjZShlspoBl20Nyt3Xe/flZ+8ovIQESvsFVheKxm5bpPNA+eh5b4D/KHrgj913c+RvP0m/l3ykNOv1H77Bw==");
			callTC.setPropertyValue("assertId","6da14fab-b1af-47de-add6-6d7edaf95f76");
			callTC.setPropertyValue("assertionUUID","6da14fab-b1af-47de-add6-6d7edaf95f76");
			callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:AA68B9A7CB1A202BE0401F0A059956CC");
			callTC.setPropertyValue("assertionAccountId","AA68B9A7CB1A202BE0401F0A059956CC");
			callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:AA68B9A7CB1C202BE0401F0A059956CC");
			callTC.setPropertyValue("assertionUserId","AA68B9A7CB1C202BE0401F0A059956CC");
			callTC.setPropertyValue("accountoid",acctoid);
			callTC.setPropertyValue("useroid",useroid);
		} else if (userID == "pjgstsStandard2") {
			callTC.setPropertyValue("assert","nVdrc6JKE/7ur7Dcj1bCTRStTaqGiwYVFQRvX97CYUAUQRkQ9NefAaMx2eyePW/KlE7T3fN090NPz09s7wO2AzBGceJHYVWVX2oNgedo2+aeONdtPzUErvkkuE3uiWdonmGFNeRaQq2qYpwiNcSJHSYvNZZmmCeGJh+TaXXIh20+81xjVavOUIyJZ6LyTNeq+T4Icafc9aWWxmEnsrGPO6G9R7iTwM4UaMMO0ezYN0i1159XkOWG8esmSQ4dioLPDoIoCOAzjPbUT+qTzk8Hd6a+F9pJGqP3PR38Unu3zbLsOeOeo9ijWJqmKbpNER0H+96P2mvlZowcNXSj61qywyj0oR34F7sApaFkEzlVEHhR7Ceb/W9cMxRDF66fUA6fINMIf9Sojw1KdH/p6RPIGNtPeGMzN2cGclGMQoiqlqG+1H78VQGvpmZsh9iN4j3+sv5viFB4QkF0QM4TvgV2A/f3Hr/J1utPBDtqCIMU+yc0KlhysCHC1UmMXD8f+phwz8HVsvrVHN8IhuB/qchP6hEngU19kxnZ9xBO/p9yPZbq6mVmByl61cJwonEMbl6o7tuiMeaWlqnqMJCs6KWE8Kh8BXWv9Pv6K0/vtHo32mcps7j4nLXH57VLD0ajs6vmbafN2XV1rwwuAhy1dUGOJGHtjJJd3AL9fhrKCy2vL5JJukL1uoMtMVQ0oULnzQY3uYj5m0oLrr3lxe1Fb+UCl9KYxfpS2s6s+DBssAOEvaXiAbMl4bMqLkXhuI5x/USP5To9AcbZiittEfvdbSvBfdfdxNtDX7BePmJ6jKGIa4DOZZDF7wVPt2U7se8LqWgULnk7E5JTVZXTiySB89QDmSoCj/xvwUj0dsfNzu+1M1oEut4FsiQGW2WogV0PMJYibjRpNtNy6QL6ojeaEUOzAoKVqBlKJmdLeabrb0q2MZ3e7LzuBenqoow0gEtjaaMphjKTDVPRNBBdZbkmr3v5Vptqmaov5QpxICv54eL02gnq5T5kVV6b8uxyyqerxYzIu+fhfnRam0qgSVpPmh57U3XNybrSB8ZyDtluSmwvw/0hqiwt8cGof0BbgLoZTfYEF83cZZppsSPZsEuZ+Vmmqb2+puNM0suoehUl68+sy0cuJFGTnL2SKyaYXHMBTak7oleLPrbnfKgZIJO90nigZM74BkTT6awiXXM1VDJDMaxRVzPUTAGlTFayAK/Z0Wbd25wgp+d9E2wfCyPpyrwbkuehcYJn/lixe12w3s8YyBkb6PO+vYgybyVksr7sD6KVStyMgK6Iog4IIBoUoZH8i2AozvjxwW+zPhq63WiPNnFFY6LB7nTJacHnxt5kNOdld9ea9PwJZzsbSg0gu+V2QFWRM2A2uu0YS8qQQ//SHA+sBfLj5SUZ8TrT9AW+YsxTayFHQct5WyytQT1fQt0cT6bWfHLJ89FxK1yC5G0svsXTviZ74xFCEwzrFG13RVOQeWn5tiV8cg0a8RXgaSIAva3nKT4hsPi2vZLwzdAUQl6gSVlPmku9Kej16ooqyrrudjfMBPZmqcWMNFVxApKm83JhBJWVJMqkUrQ9Xx2WbJdemcApnekNpevpFl/vL9BKHwXmLAHZYeaGDEP3Dvqbq2Ue1AoGOGo2FclbJFZSFVj2+NCn88GsSTNH3Qn60zawuHzK7vLxxludd95qR4qyfHh1liYIZuYDx1RCsXlFNxVDA8L1fcs11eKMAO7zw3oPc9kkNSuNI1NUjK5OW7ksg8FVhk3A5nh5UbaapJT2FZBrNqHFab3Y4GU48semkhLSpg902a5Z+l85VlCs8pljRwno4CvHlCvHFOAe66ogM5hvSgc8zzyxpxz11mzYbx9ofTHcVcR6l/ISP2iMQyEzB/U5c85am60+n7dVeSPVQ3e54daJSNsXqKP+rtXzjZ0cNhvBWRtqOm/5VHCmt+iY4WFlpDKhwiWXLtWO07q4X/n7y4VrsNZ+Mk1PqmUPMHPerI/zdradvDUpKu6d+UtrddK7iwgur+fI1yZ5F17bKPXYYD914NvoNU3XWwST27I4h1W52iWHo538eYwrJL7z5JaqnUMxC+IEhUnttbAqRrhOSgY93+mQk/O6Bi260WbkRpfmFbbLA4Vu0EyXBnSr3aYFwN9mvSuKLxClKHT9Yq9imL0e1n8GCPedNbJjFNf+4KnIU1UNDTJ9RCFGZvRS+x8trNdcm242eYdF7QbjIARpwXbdVrsBnQZ0YYtr2hzDrWvVUZSMw3EM3ATFD7My83VWNhD0Dz4qBur3sQInJCdH+5QmAft8sp9DlJKJOy6G3k6LplkK+/tDgArk1D5y0gA9HzaHMkMUvn6zTzbEpZQngwlD/sqR57fBfn12ywvRcfxCARfxiIjUFH0z+DO3YH4Jmv32gnBzD1LHLyYbkuQk9uEVyedHH5wpyHInzC2sG+67+lfBJ9fU16juuzknH96pf78akdGaTF/l9QOTwhzt5+NzejqlH6WIiXuKocivKYIpGQ/PZrRDIXV3Qf3NYH4H/WXju/wzvDTZhNOEvNV7Qptqufz3S9kna5KBBOXJdzIpINewYvM/3tRgBxZ6RDwhX1kUOx+J/8bXwz4EctGR/NArVsVEff5NjWFE3PqkK0Xxo/PvHHy3+WfhPV93LAnhxTpN0O+fVIt281KzIYzSMFHlWil4bIElzuR8QJ0PpV/clDPt+yUl/92NlKEW2nAKN2hv1+66/r8rP/ll5SEiVtgvsbzUcnLdJpuH3kPLfQf4qeuCpiC2QUsSGcDSrHjvuny7TY466Z7AT5G8/iL+VfKQ06/Ufv0H");
			callTC.setPropertyValue("assertId","48530aa3-3ff9-4836-8f63-5105128bc378");
			callTC.setPropertyValue("assertionUUID","48530aa3-3ff9-4836-8f63-5105128bc378");
			callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:AA68B9A7CB1A202BE0401F0A059956CC");
			callTC.setPropertyValue("assertionAccountId","AA68B9A7CB1A202BE0401F0A059956CC");
			callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:A70491D4F05E2F5AE0401F0A079908A5");
			callTC.setPropertyValue("assertionUserId","A70491D4F05E2F5AE0401F0A079908A5");
			callTC.setPropertyValue("accountoid",acctoid);
			callTC.setPropertyValue("useroid",useroid);
		} else if (userID == "pjgstsBasic2") {
			callTC.setPropertyValue("assert","nVdrc6JKE/7ur7Dcj6mEi6JibVI1XERUVBCvX96CYQQUQRkQ9NefAaMx2eyePW/KlE7T3fN090NPz09s7QO2AzBGceJHYVWVXmtWm6ORXWeekUPD50a7AZ+tOtt85lG7bsEm3YKcVauqGKdIDXFihclrjaUZ5pmhycdkWh2G77DtlwbNrGvVOYox8UxUXuhaNd8HIe6Uu77W0jjsRBb2cSe09gh3EtiZAm3YIZod6wap9vbzCrLcMH7zkuTQoSj44iCIggC+wGhP/aQ+6fx0cGfqu6GVpDF639PBr7V32yzLXrL6SxS7FEvTNEXzFNFxsO/+qL1VbsbIUcNNdF2LVhiFPrQC/2IVoDSUeJFTBYEbxX7i7X/jmqEYunD9jHL4DJlG+KNGfWxQovtLT59Axth6xp7F3JwZaINiFEJUnRnqa+3HXxXwamrGVog3UbzHX9b/DREKTyiIDsh5xrfAbuD+3uM32Xr7iWBHDWGQYv+ERgVLDhZEuDqJ0cbPhz4m3HNwtax+Ncc3giH4Xyryk3rESWBT32RG8l2Ek/+nXI+lunqZW0GK3pgI6JfJ2pQaWGn0lsnQexong1NdJlQtITwqX0HdK/2+/srTO63ejVwaH1rNgOdnO1eQIrs+HsxtG8jM8mxOONYE4VM4dM493821xeYUZQvlwp/p+dmR671lk1lHPU8bj8+ryahZMYwTcLGkHFt+3cvrW+OyGnIaO48Gwmn31D730jja1c/xHGz8UVsCe2bVzqB5Hl0UYUzl3HhzWDS1+ciAm0YlMeSdSafsVN9IdVmVZ+bu9SOmxxiKuAboXAZZ/F5yNC9ZiXVfiEWj2JC3M0FvmqpK6UUUwXnqgkwVgEv+t2AkuLujt/MVPqMFoOtdIIlCsJWHGtgpgJnJgqeJ87mWixfQF9zRnBiaFRCsBc2QMylbSXNd78mZZzrK/GwrQbq+yCMN4NJY9DTZkOeSYcqaBqKrLNckW8m32lTLVH0lVYgDSc4PF0fhE6TkPmRVTpty7GrKpevlnMi75+F+dLJNOdBETRGnR2Wq2nVJl/vAWC0g202J7WW4P0SV1Ux4MOof0BagbkaTPcFFM3eZZs7YkWRYpcz8LNNUpa/pOBP1MiqlImf9+ezykQtR0ERnL+eyCSbXXEBT7I7o9bKPrQUXagbIJLc0HsiZM74B0XQ6q4jXXA3lzJCN2airGWomg1ImyVmAbXbk2Yp3gnU975tg+1gYUZcX3ZA8D40TPHPHiqV0gb2fM7BueNDnfGsZZe66nUn6qj+I1ipxMwK6LAg6IIBoUIRG8i+AoTDnxgefZ3003HSjPfLiisZEg93pktNtvz52J6MFJ212rYniT+qW41FqANltfQdUFTkDxtMtx1hRhhT6l+Z4MFsiP15dkhGnM02/zVWMRTpbSlHQcnrL1WzwlK+gbo4n09licsnz0XHbvgRJbyz04mlfk9zxCKEJhk8UbXUFsy1x4qq3JXzaGDTiKsDVBACUrevKPiGw0NteSdgzNJmQF2hipogLUZkCRXmSVUHS9U3XYyZQmaczZqSpshOQNJ1XSyOorEVBIpWircX6sGK79NoETulMb8hdV59xT/0lWuujwJwnIDvMNyHD0MpB7220zIVawQBHzaYCeYuESqqCmTU+9Ol8MG/SzFF3gv6UB7N6PmV3+dhz1+edu96RoqweXp2VCYK5+cAxlVBsUdFN2dBA+/q+5Zo6qxsB3OcHew9zySQ1K40jU5CNrk7PckkCg6sMm4DN8eoibzVRLu0rINcsQouTvfTwKhz5Y1NOCWnTB7psbZb+V44VFKt85thRBDr4yjH5yjEZbI5PaltiMNcUD3iRuYIiH/XWfNjnD7S+HO4qwlOXchM/aIzDdmYOnhbMOWt5W32x4FXJE5/Czcqr24lAWxeoo/6upfjGTgqbjeCsDTWdm/lUcKa36JjhYWWkMqFcTy5dio/TJ2G/9veXS73BzvaTaXpSZ9YAM2fPPi74bDvpNSkqVs7cpbU+6d1lBFfXc+Rrk7wLr22UemywnzrwbfSapvYWweS2LM5hVap2yeFoJX8e4wqJ7zxvStXOoZgFcYLCpPZWWBUjXCclg57vdMjJeV2DFt3geZHnBJZn5TYv02SQ7NKA5niebrfE26x3RfEFohiFG7/Yqxhmr4f1nwHCfcdGVozi2h88FXmqqqFBpo8oxMiMXmv/s+12m4HNjQ0ZCzmczbIWwzZYGvKszdfrbJtmHJq3bWtTq46iZByOY7BJUPwwKzNfZ2UDQf/go2Kgfh8rcEJycrROaRKwLyfrJUQpmbjjYujttGiapbC/PwSoQE7tIycN0MvBO5QZovD1m322IC6lHBlMGPJXjjy/Dfbrs1teiI7jFwq4iEdApKbom8GfuQXzS9DstxeEm3uQOn4x2ZAkJ7EPr0g+P/rgTEGWO2FuYd1w39W/Cj65pr5Gdd/NOfnwTv371YiM1mT6Kq8fmBTmaL0cX9LTKf0oRUzcUwxFfk0RTMl4eDajHQqpuwvqbwbzO+gvG9/ln+GliRdOE/JW7wltquXy3y9ln6xJBhKUJ9/JxIBcw4rN/3hTgx1Y6BHxhHxlUex8JP4bXw/7EMhFR/JDt1gVE/X5NzWGEXHrk64UxY/Ov3Pw3eafhfd83bEkhBd2mqDfP6kW7YbcjSGM0jBRpVopeGyBJc7kfECdD6Vf3JQz7fslJf/djZShltpwCj20t2p3Xf/flZ/9svIQESvsl1heazm5bpPNQ/eh5b4D/NR1QbMt8KAlCgxgaVZ47LrkqLt33c+RvP0i/lXykNOv1H77Bw==");
			callTC.setPropertyValue("assertId","a850eb31-ed0c-484c-a326-9e83ac607c5a");
			callTC.setPropertyValue("assertionUUID","a850eb31-ed0c-484c-a326-9e83ac607c5a");
			callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:AA68B9A7CB1A202BE0401F0A059956CC");
			callTC.setPropertyValue("assertionAccountId","AA68B9A7CB1A202BE0401F0A059956CC");
			callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:A70499C95B292E89E0401F0A0599087C");
			callTC.setPropertyValue("assertionUserId","A70499C95B292E89E0401F0A0599087C");
			callTC.setPropertyValue("accountoid",acctoid);
			callTC.setPropertyValue("useroid",useroid);
		} else {
			log.info "ERROR - userID [$userID] supplied is not configured!";
			assert 1 == 2;
		}
		break;
	case "50004444":
		if (userID == "pjgstsFull2") {
			callTC.setPropertyValue("assert","nVdbc6JME773V1jupWU4ea5NqoZjMIJy8IA3XyGMgCIoA4L++nfAaEw2u+++30XKTNOHp7sfmp6fyN6H9BAgBJM0iKO6zD83/rdh6I1LO3QLrmmy1W63ndaA7totpt93N0yf3vS7TqMuI5RBOUKpHaXPDZqk6BbZa5GMSVHDDjlsd54GzGDVqM9hgrBrrPJENurFPozQsAr73MiSaBjbKEDDyN5DNEydoQGU8RBrDu0bpsbLzyvKKmDy4qfpYUgQzpMLHRiGzpMT74mfxCedny4aGoEX2WmWwPeYLnpuvNvmef6UM09x4hE0SZIEOSCwjosC70fjpXYzhq4cbeLrmbOjOAocOwwudglKgakfu3UQenESpP7+N64pgiJL1y1YOC2Hakc/GsRHgArdX3r6BDJBdgv5NnVzpsMNTGDkwPpMl58bP/6ug1dbM7EjtImTPfpy/m+QYHSCYXyAbgvdMruh+3uP35Tr5Sd0hnLkhBkKTlAtaXKwHYjq0wRugmIcIEw+F9Wr9tcLdGMYdP5LS34SjzgxbOKbyvCBB1H6//TrsVdXL3M7zOCLu1q6xtKYuCfzUFCuzXG5PVbTfmDNnisIj8pXUPdWv5+/EvXOq3cj04kBiFyOTr1gH1iiz3QNkfOPAc3pR5HyvUQUBtxUzhhjEFt9/uCsRCKd2bTP8B65HRPnaKseXHdHKEZNVC0kbueZETdHdrPrvcJ4MwumKTnu6sXUjYJYOHGLIkPjhJTISXhaa69o1iU7l5AdK5MtgElTNk8x3Ju7ms4ve9FmW1ikmueKqu4C6/kjp8ccyrze4LlKsvx/2SEHvJ3a9wNXTooNfj1T+KLIMp9dOA6cDQ/kMgs8/LcFKuvtjv4ukAY5yQJNEwHPseFWGCtgJwFqJrC+ws3nSsFdwIj11Dk2NGsgXLGKLuR8bvFzTXsVct90pfl5LYXZ6iKoCkCVMecrgi7Med0UFAXEV1mh8Gup2CqGksuaxdewA14oDhdXGqRQKgKHljuK0aEto5OtlnMsF8/jvXpam0KocIrEGUfJkNcMrwkjoFsLhxYzbHsZ7w9xzZqxD0ajA8TFFXMSxwQXxdzlijmjVV63K5n5WabI0kjRUM5pVVZSTchH89nloxYcq3DuXigEE0yvtXBMTlTJ1XKE7EUnUnSQ815l/Cbk7uQGRNHIvMZdazUWcl3QZ6qo6HIugErGC3mI1rTqryX/5DBaMTLB9rExnCYsxAg/j/STc+4ca7YkgvV+TjmM7jtBJ7CXce6t+jmvWaO3eCVjNyrQBJbVAAZEgjI1XH8WjNl5Z3IIBnQAxxsx3kM/qSlU/LY7XQqyHzATb6ouOvxm15tKwZSxXZ+QQ4feMjsgy9B9o3zNdnWL0PkouHQnb7MlDBLrkqodjeoG/U5NX2SzJR+HPfd1ac3emoXlaOZkaswW00tRqMdt/xKmrxP2NTFGCu9NVAinyGkSpC2yZp/vcNbrFvNpo5OwUwOewgIgbT1PCDCB2dftlYSvuiJg8gKFyyVuwUkGkKSmILO8pm1En5o60jybUaoiC26Iy3S2lnpYW3EsjztF2ovVwaJFcmUCt3KmtQXR02ad5mgJV5oamvMU5If5JqIoUjporxsl9xylZIAr5waL3yK2lslgZk8OI7J4m3dJ6qi54cgYgBlTGPSumPje6rzzVjvcFOvh1bFMEM7NB47JmGKLmmYKugL61/etUOQZo4fOvjis907Bm7hnlXFssoIuauSs4HnwdpUhE9AFsi7CVuGEyr4GCsXGtDitlz6yIjWYmEKGSZs90GWLv37/yrGSYrXPHDtyQANfOSZcOSaAzbEp93kKdbrcAS1yj5WEo9abj0eDA6ktx7sa2xQJLw3C9iTq5+Zbc0Gd856/1RaLgcz7XDPaWD6zTlnSvjgaHO16UqDv+KjbDs/KWNE6s4AIz+QWHnM0rqkyFQlMehGJQZI12f0q2F8uTJue7adGdpJn9huizv76uBjk2+lrlyAS6dy59FYnTVzGjnX9jnwdknfhdYwSjwP20wS+7V5Gtt5CJ70dy++wzNdF/HG00z/vcaUkcFubSnV4KJdBlMIobbyUVuUON8zwphe4Q/zlvJ45RgA9ETB0hyR7PEULZJukRBKQvcGApPr927J3RfEFIhdHm6CMVa6z14/1nwE6++Ea2glMGn/wVNapLkc63j7iCEEzfm50AQ26JMfRAi+yfVoQBZbh6UFf5MQ2Xrbajboap5NokoBNCpOHDbn9dUPWoRMcAliu0e+7BEpxIY72KUtD+ulkP0Uww3t2Uq66wx5J0gQK9ocQlnCJfexmIXw6+IeqLAS6/tIt20GV1IUbOwvTFjpUm85vc/z67FYOrOMGpQIqM2IhbiX8ZuFnbun8kjbz7cXg5h5kblAuNLi2aRI4VySfH31QpeTInSeYHiTebds33Hf1r4JPromvWd2juafAuTP+fifCKzVeuqprB8KtOdpPx6fsdMo+mpFg9wRF4P8M6GR4Kzyb8Q5GxN0F8VcL+R31l8h3+Wd8WepHRorf5j1mTr06/vtt7JM1LkEKi/Q7GRfi+1cZ/I9XNGfolHpYPMU/eZy4H5X/xtdDHAy5nERB5JWncpM+/6bJTozdBngaxcmj8+8cfBf8s/BerzuWFBNjnaXw90/q5Zh5btiOE2dRKvONSvA4+iqc6fkAhx9Kv7ipdtn3y0mBfns5WSpjw/Hh3m7cdYN/V24FVecdiK1QUGF5bhT4no2DR97DqH0H+DhtAcCDTGR6vQHD8gO6fZ+2ncGgy/K9ewE/ZfLyi/hXyUNNv1L75R8=");
               callTC.setPropertyValue("assertId","_f32fd2c2-eb20-444c-926a-388df382f86c");
               callTC.setPropertyValue("assertionUUID","_f32fd2c2-eb20-444c-926a-388df382f86c");
               callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:AAA2AF37793BD924E0401F0A05996BD7");
               callTC.setPropertyValue("assertionAccountId","AAA2AF37793BD924E0401F0A05996BD7");
			callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:A73E345A1CEAA9B5E0401F0A05994DC4");
			callTC.setPropertyValue("assertionUserId","A73E345A1CEAA9B5E0401F0A05994DC4");
			callTC.setPropertyValue("accountoid",acctoid);
			callTC.setPropertyValue("useroid",useroid);
		}
		break;
	default:
		log.info "ERROR - NodeID supplied is not configured!";
		assert 1 == 2;
		break;
}</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_99018 - STS Create - DeviceAuthToken - HEAD Method</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>STS - MTHD</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>90009000</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>pjgstsFull1</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86727</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS Response Validator" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="13bc385b-0eac-447f-adfa-1e97cd8af437">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case properties" id="befb94e3-0dc2-4f6c-be78-ac1c8bc9cb5f">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrType",null);
tC.setPropertyValue("XMLbody", null);
tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);
tC.setPropertyValue("assertionUUID",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="5a533cb5-8d27-4a6c-8cc9-410acccd890c">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue( "QC_ResultExportLevel", "on" )

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));
tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="b24a4618-9262-4234-9981-eb5960bdc5b1">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def tStep  = callTC.getTestStepByName('POST - STS');


/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
//def contentLocation = tStep.httpRequest.response.responseHeaders["Content-Location"];

def expXML = tStep.httpRequest.response.getResponseContent();

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="8da0368c-a1c1-477a-a0af-3fadc841dd5f">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url           = tP.getPropertyValue("targetURL");
def urnacct       = tP.getPropertyValue("urnaccount");
def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	// assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	

if (doContentTypeHeader) {
	//assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/dece/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="1bb9d4bc-01a5-46b8-90c1-e562530d3397">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dlpnodeid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>llpnodeid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nickname</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>STS GET Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01050 - STS GET - No affilations - GET assertion with NODE_USER_SAML_ASSERTION.STATUS of 'deleted'</con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86728</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS GET Response Validator" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="594b53ea-7954-4f78-b358-6811cfbcab4f">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case properties" id="42868570-0836-4f94-85f5-64845ca8db7b">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeSTSGet",null);
tC.setPropertyValue("XMLbody", null);
tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assertionUUID",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="d2480504-3cf5-4962-9e28-1308486ca84b">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue( "QC_ResultExportLevel", "on" )

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("expectErrTypeSTSGet",callTC.getPropertyValue("expectErrTypeSTSGet"));
tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="7b719168-e965-452e-be76-453801e47135">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def tStep  = callTC.getTestStepByName('GET - STS');


/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
//def contentLocation = tStep.httpRequest.response.responseHeaders["Content-Location"];

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers" id="86e107b4-5ea0-48b3-baee-13821c1317ee">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url           = tP.getPropertyValue("targetURL");
def urnacct       = tP.getPropertyValue("urnaccount");
def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml;charset=UTF-8";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	// assert tC.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	

if (doContentTypeHeader) {
	//assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/dece/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.saml2:Assertion.size() == 1;
		assert myXML.ds:Signature.size()    == 1;
		assert myXML.ds:SignedInfo.size()   == 1;
		assert myXML.ds:DigestValue.size()  == 1;
		assert myXML.ds:SignatureValue.size()  == 1;
		assert myXML.ds:X509Certificate.size() == 1;
		assert myXML.saml2:NameID.size()    == 1;
		assert myXML.saml2:AudienceRestriction.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
/*
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
		*/
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="bhavins code" disabled="true" id="aac96c25-8971-4572-b2d6-a12885e9535b">
        <con:settings/>
        <con:config>
          <script>def XMLbody = tC.getPropertyValue("XMLbody");

List lines = XMLbody.readLines();
List newList;
//String XMLassertion = "";
StringBuffer XMLassertion = new StringBuffer();
Integer startLine;
Integer endLine;

for(i = 0; i &lt;= lines.size; i++)
{              
     line = lines[i];
          try {
                                if(line.trim()[0..16] == "&lt;saml2:Assertion ")
                                {
                                                startLine = i;
                                                //log.info startLine;
                                }
                                else if(line.trim()[0..17] == "&lt;/saml2:Assertion>")
                                {
                                                endLine = i;
                                                //log.info endLine;
                                }              
          }
          catch(Throwable e){
                                //Do Something
          }              
}
for(j = startLine; j &lt;= endLine; j++){
	XMLassertion.append(lines[j]);
}

this.log.info XMLassertion;

tC.setPropertyValue("XMLassertion",XMLassertion.toString());</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract out &lt;Assertion> XML block" disabled="true" id="6113df56-a632-4aa5-b242-f95b0259ffff">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbody.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbody.indexOf("&lt;/saml2:Assertion>");

tC.setPropertyValue("XMLassertion",XMLbody.substring(startAssert, endAssert + 18).toString().trim());


this.log.info tC.getPropertyValue("XMLassertion");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="60abf83b-0e2d-4767-8138-61702e5c106c">
        <con:settings/>
        <con:config>
          <script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
//import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/
byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("assert", base64encodeStr);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="7ccde453-e5d5-40b3-b94e-5246e1b52b0f">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assert",tC.getPropertyValue("assert"));
callTC.setPropertyValue("assertXML",tC.getPropertyValue("assertXML"));
callTC.setPropertyValue("assertId",tC.getPropertyValue("assertId"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value>nVdZc6JMF773V1jOZcrQoLjVJFXNGlRUENc7hBZQBKVBkF//NTg6msks71eVVNKHszxn4fD0d2wefKYHMUZR7IVBVRHearRtApq2rHoHIabebNJsfWNu7LoJmoBm6A5qtbe1qoJxgpQAx2YQv9UYQIM6TdfpjkE3e2y3x7KvNAvWteocRZh4JiqvoFbNDn6Ae2XUt1oSBb3QxB7uBeYB4V5s9aZQHfaIZs+8Qaq9f7+CLANG724cH3sUZb3ayEK+b71a4YH6Tj3pfLdxb+o5gRknEfoR08ZvtR+2aZq+po3XMHIoBgBAgS5FdGzsOd9q75WbMbKVYBtez7wZhIFnmb6XmwUoFcVuaFeh74SRF7uH37imKRoUrusos+oW3Qy+1aifAUp0/+jpCWSEzTp2TfrmTEdbFKHAQtWZrrzVvv1TA6+mRmQGeBtGB/zp/N8QoeCM/PCI7Dq+JXYD9+8ev6jW+3dk9ZTA8hPsndGomJKjaSFcnURo62VDD5PZs3G17H41w7cBQ9Z/6ch36hEngU19URnBcxCO/592Pbbq6mVu+gl6P7+I6Ww7TFbT9dnTxjRwFmuqBTtLR3wrITwqX0HdO/3j/HlO72P1w2g7GF36iwQ3nGiaRwt6ze88qCyncAdjM0vlcddwAM1t96jV2OROk95h+2Iju92at9b7BjPYKx/moBUNG6lYWTMcYNZjGZqWyrH63mhd1nuGUgV9fMApHXSwOLpMdrI9igQ8kGL+sAibrc18IqxSMWeXWq6Mu/JwRs9cseIEY0vbDp2VY7PS6kM90PjtZ06PORR5DdClTLL4f8mCrmDG5v3AF4tiS97OGL2riiIkOc/Dy9SBqcJBh/zu4Ihz9id378ndFHBQ0yQo8Jy/E4cq3MuQnomcq/LzuZrxOexzzmhODI0K9NecqoupkK6EuaZ9iKlr2PL8spH9ZJ2LIxXi0ph3VVEX54JuiKoKw6ssU4WNnO3UqZoq2kqoEAeCmB1zW+7GSM48i1FYdcoyqymbrJdzIpcuw8PovDFEX+VVmZ+e5KmyaQia2If6amExUkJs8+HhGFZWM+7BqH9EO4ikFJCYMFeNfaoaM2Yk6GYpM55lqiL3VQ2nvFZmJVfEtD+f5T9rwXMqbx/ETDTg5FoLy+ClEVgv+9hcsIGqw1RwSuOBmNrjGxBVA2mFv9ZqKKa6qM9GkqorqQhLmSCmPt4wI3cju2eroWV9A+4eG8Nr4kIKyPNAP1sX9lQxZQluDnPaauiu5bGeuQxTZ91JBW3VH4RrhbgZQU3kOA0SQAAWqZH6c3DIzdnx0esyHhpupfCA3Kii0uFgf84z0PEaY2cyWrDCdt+eyN6kYdoupfgWs2vsoaIge0C7mmnrK0oXAi9vjQezJfKiVR6PWI1ueR22oi+S2VII/bb9sVzNBi/ZytKM8WQ6W0zyLBuddp3cjz/G3Ec07auCMx4hNMHWCwVMiTM6AsuvPnZknrY6QGwFOioHobxzHNEjA8x97K5D+KGrIhleqPKpzC94eQpl+UVUOEHTtpJLTyx5nszokaqItk/KdFktdb+y5jmBdAqYi/VxxUhgbUC7dKY1RcnRZuxLf4nW2sg35jFMj/NtQNNAPmofWzV1LLWYAFtJpxx5i7hKosCZOT72QTaYtwB90my/P+3CWSObMvts7Drry95Z70lTVg+vzsqA/tx4mDGFjNiiohmirsLO9X3LVGXW0H3rkB03BysTDNKz0jg0OFGXNDDLBAEOrjJsQCbDq1zcqbxY2ldgpppkLM6bpYtXwcgbG2JChjZ5GJfdhgF/nbFixCrPM3bioQY/z5h4nTERbk8vSkegMdvij3iROpwsnrT2fNjvHoG2HO4r3ItEObHnN8dBJzUGLwv6krbdnbZYdBXB5V+C7cptbGIOmLmlof6+LXv6XghaTf+iDlWNnXmUfwE7dErxsDJS6EBsxLlEdaPkhTusvUOeN5rM7DCZJmdlZg4wfXE3p0U33U0+WhQVyRc2b6/PmrQMrdX1O/J5Sd6F1zVKPS7Ypw18o17TZLNDVnw7Ft9hRahK5ONoxn+mcYXEs+vbUrV3LLggjlEQ1967bBPwoC0xoN0WW422WJATCUDQ7nYB32FvlO4a7BMSPgy2XuGy4KzXb/KfcViH3gaZEYpqf/BUlKOqBDohGWGAkRG+1RpCsys2QUPkmGYL8u02y0lct9HsNESJbYFurToK43EwjuA2RtEDD+5+5sE6sryjhwqyXFAGTDhDAeQVZebh6KOSOfih4wXUZDw1SlbyW6Cfn91yIjq2VyjgAhaHSNnRF9y8ecP0C3b6Sw5/cw8T2yvIBylQHHnWFcnzo/eiCQUz75F8yt/y0AGA/DDghvuu/lnw5Jr6nNU9mn32rPt03m8vhP0SgvR+K+/JfD29JudzUlwRem0SnyrAUFNkJYS8XYxwjwLqbk39C22+4/0U8y5/RpbEbjCNyTt3II2vlse/X5merEnyMcrir2S8Ty5JRfA/3qOsnlXoEfGE/EnDyP5Z8y98PcQhkIt94QVOcSr47uW5vQFKSC5RzwqJV4+sjDB69P2V/Vexn4X3ct2hxGQiNkmMfv+kWiyJt5ppWWESxIpQKwWP+6nEHF+OqPdT6Rc3JeH8cYPI8G9vEEt1OLVcdDBrd13v78p1r2y8hYgV9kosb7WM3IVJ8MAh+7DJtaAIpA5LuCkDhKd92KGle5Ge0L7/Iv5V8lC3z9P7/j8=</con:value>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value>1da011cc-8ee2-4415-babd-a0401218e67f</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value>http://c.decellc.com/Pdb0CZGBUrsvWFkIuYgs3qsXOaI=NILp5IJSyPaupxlJH92/ICZ5XkLovBzBB73wfUAIErYCKQEg5pr69oEAm3JpY5vh6OAzp0c3eEAj
pligdNHt+af7dbgRIKbCXYjZ6g/jnGhmtEMIur9d/kRcSdiJzYxxsLIq4xVdOiQEQcAkD1DQ/ArW
GbulJlyxMr0N9E9UszU=MIIDuzCCAySgAwIBAgIBAjANBgkqhkiG9w0BAQQFADCBljELMAkGA1UEBhMCVVMxCzAJBgNVBAgT
AlZBMREwDwYDVQQHEwhTdGVybGluZzENMAsGA1UEChMEREVDRTEMMAoGA1UECxMDbGxjMSMwIQYD
VQQDExpzdG9teGxic2I5MS52YS5uZXVzdGFyLmNvbTElMCMGCSqGSIb3DQEJARYWc2FudG9zLmpo
YUBuZXVzdGFyLmJpejAeFw0xMDAzMTkwMTU2NDRaFw0xMTAzMTkwMTU2NDRaMIGJMQswCQYDVQQG
EwJVUzELMAkGA1UECBMCdmExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQ0w
CwYDVQQLEwRERUNFMRIwEAYDVQQDEwlsb2NhbGhvc3QxJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5q
aGFAbmV1c3Rhci5iaXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALBV5Opi92ieLfFomehr
M1oKkvzx08i3OgPNW5Dfk7PGiP3adh/Ilc2j3kAIIedK1hQadRY/RDniz6OKUXeirYztN5Q16i85
RWuUXDol7dHXYUK+xYcQTOPSUWPzxxNqj8zltHOBHrSJMDgONeePsc+/0aFBT8D5CYHjHEwfR0e5
AgMBAAGjggEiMIIBHjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl
ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU5+JXeZQNlTVtAwpVfn110GpQHfMwgcMGA1UdIwSBuzCB
uIAUaOpJ0xKV601qQdlJS9AU3xS2kxOhgZykgZkwgZYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJW
QTERMA8GA1UEBxMIU3RlcmxpbmcxDTALBgNVBAoTBERFQ0UxDDAKBgNVBAsTA2xsYzEjMCEGA1UE
AxMac3RvbXhsYnNiOTEudmEubmV1c3Rhci5jb20xJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5qaGFA
bmV1c3Rhci5iaXqCAQAwDQYJKoZIhvcNAQEEBQADgYEAfq+I8D1s56CpsWwgBGEqQ7VLJ9p0QXLk
B+F/gtil4On8wTK+W1yw7hjQWW9IDhC+nfYh3btB0azcQeJk7GiRkDn64lyMLMQ5Ui/ly0jeqwsL
NI1nE3tzF/9ru+BmZimzz342UmPSuvIUaKs1yhbqW9wjPH6//rGy5z7ZvQFXocY=94B6AE0F85AFC20DE0401F0A0799081Furn:dece:org:org:dece:80080010https://qa.q.uvvu.com:7001/dece/SecurityToken/Assertion/eed91199-941b-4565-b26d-e9063f83fd50urn:oasis:names:tc:SAML:2.0:ac:classes:Passwordurn:dece:org:neustar:coordinator94B6AE0F85ADC20DE0401F0A0799081F</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value>4676</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value>text/xml;charset=ISO-8859-1</con:value>
        </con:property>
        <con:property>
          <con:name>dlpnodeid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>llpnodeid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nickname</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Generic API Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value>HTTP/1.1 200 OK</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>SST GET API</con:value>
        </con:property>
        <con:property>
          <con:name>XMLassertion</con:name>
          <con:value><![CDATA[<saml2:Assertion ID="92d22367-197d-4773-9057-74c89ccfda3c" IssueInstant="2010-11-15T19:46:20.197Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">
       <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>
       <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
          <ds:SignedInfo>
             <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
             <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
             <ds:Reference URI="#92d22367-197d-4773-9057-74c89ccfda3c">
                <ds:Transforms>
                   <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
                   <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">
                      <ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/>
                   </ds:Transform>
                </ds:Transforms>
                <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
                <ds:DigestValue>NtffQXv952YAnSnOQOJsjwSVhiQ=</ds:DigestValue>
             </ds:Reference>
          </ds:SignedInfo>
          <ds:SignatureValue>L4l13e+/2KysklswaFIS5jY23RXvukUwbkoRxnf7VV6wThY1WiwZ+D5vEDVwQXXN4dDvYfEKHzfX 7HAq7IzxtAq4MuaWPysx0W7MGQ/uyRnRxb6bRQksqLjOwKsDA9H+cRG3hlgYkIfIz1AsjbZz6rOn Spq5Md0E/NIGNK+N3MI=</ds:SignatureValue>
          <ds:KeyInfo>
             <ds:X509Data>
                <ds:X509Certificate>MIIDuzCCAySgAwIBAgIBAjANBgkqhkiG9w0BAQQFADCBljELMAkGA1UEBhMCVVMxCzAJBgNVBAgT AlZBMREwDwYDVQQHEwhTdGVybGluZzENMAsGA1UEChMEREVDRTEMMAoGA1UECxMDbGxjMSMwIQYD VQQDExpzdG9teGxic2I5MS52YS5uZXVzdGFyLmNvbTElMCMGCSqGSIb3DQEJARYWc2FudG9zLmpo YUBuZXVzdGFyLmJpejAeFw0xMDAzMTkwMTU2NDRaFw0xMTAzMTkwMTU2NDRaMIGJMQswCQYDVQQG EwJVUzELMAkGA1UECBMCdmExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQ0w CwYDVQQLEwRERUNFMRIwEAYDVQQDEwlsb2NhbGhvc3QxJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5q aGFAbmV1c3Rhci5iaXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALBV5Opi92ieLfFomehr M1oKkvzx08i3OgPNW5Dfk7PGiP3adh/Ilc2j3kAIIedK1hQadRY/RDniz6OKUXeirYztN5Q16i85 RWuUXDol7dHXYUK+xYcQTOPSUWPzxxNqj8zltHOBHrSJMDgONeePsc+/0aFBT8D5CYHjHEwfR0e5 AgMBAAGjggEiMIIBHjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU5+JXeZQNlTVtAwpVfn110GpQHfMwgcMGA1UdIwSBuzCB uIAUaOpJ0xKV601qQdlJS9AU3xS2kxOhgZykgZkwgZYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJW QTERMA8GA1UEBxMIU3RlcmxpbmcxDTALBgNVBAoTBERFQ0UxDDAKBgNVBAsTA2xsYzEjMCEGA1UE AxMac3RvbXhsYnNiOTEudmEubmV1c3Rhci5jb20xJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5qaGFA bmV1c3Rhci5iaXqCAQAwDQYJKoZIhvcNAQEEBQADgYEAfq+I8D1s56CpsWwgBGEqQ7VLJ9p0QXLk B+F/gtil4On8wTK+W1yw7hjQWW9IDhC+nfYh3btB0azcQeJk7GiRkDn64lyMLMQ5Ui/ly0jeqwsL NI1nE3tzF/9ru+BmZimzz342UmPSuvIUaKs1yhbqW9wjPH6//rGy5z7ZvQFXocY=</ds:X509Certificate>
             </ds:X509Data>
          </ds:KeyInfo>
       </ds:Signature>
       <saml2:Subject>
          <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">94B6AE0F85AFC20DE0401F0A0799081F</saml2:NameID>
          <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer">
             <saml2:SubjectConfirmationData InResponseTo="C1BC299971F8420086E881CD885E93FF" NotOnOrAfter="2010-11-16T19:46:20.197Z" Recipient="http://stdecqavutl1.va.neustar.com:2485/saml/dumpcustomerpost.php"/>
          </saml2:SubjectConfirmation>
       </saml2:Subject>
       <saml2:Conditions NotBefore="2010-11-15T19:46:10.197Z" NotOnOrAfter="2011-11-15T19:46:20.197Z">
          <saml2:AudienceRestriction>
             <saml2:Audience>urn:dece:org:org:dece:80080010</saml2:Audience>
          </saml2:AudienceRestriction>
       </saml2:Conditions>
       <saml2:Advice>
          <saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/dece/SecurityToken/Assertion/92d22367-197d-4773-9057-74c89ccfda3c</saml2:AssertionURIRef>
       </saml2:Advice>
       <saml2:AuthnStatement AuthnInstant="2010-11-15T19:46:20.197Z">
          <saml2:AuthnContext>
             <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>
             <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>
          </saml2:AuthnContext>
       </saml2:AuthnStatement>
       <saml2:AttributeStatement>
          <saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID">
             <saml2:AttributeValue xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">94B6AE0F85ADC20DE0401F0A0799081F</saml2:AttributeValue>
          </saml2:Attribute>
       </saml2:AttributeStatement>
    </saml2:Assertion>]]></con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2p:Response Consent="urn:oasis:names:tc:SAML:2.0:consent:unspecified" Destination="https://saml.example.org/login/POST" ID="urn:dece:org:org:dece:neustar:idp" InResponseTo="3D49E403EB246AC775BFB93483EF5609" IssueInstant="2010-11-18T14:59:55.150Z" Version="2.0" xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol"><saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">http://c.decellc.com/</saml2:Issuer><saml2p:Status><saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/></saml2p:Status><saml2:Assertion ID="1da011cc-8ee2-4415-babd-a0401218e67f" IssueInstant="2010-11-18T14:59:55.150Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#1da011cc-8ee2-4415-babd-a0401218e67f">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>v+EwUfLuYSZviQO10gWZ/6A8XgE=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
fKNyJWus3grSzrW1ZCjiAIXSAjAtaxwGO9Tg01Bfke63bzg41jsdyded76V6Zk32KkIHaK6rL3wE
Z2B02ZOGAacMB5RkT6yZk2/MDROmsw1n8sENyPjGdNrDsKFtCmWo46bVPDYwEz5XQzIO9GLU1UhE
gnOcQfLgYgd5FYHMm1s=
</ds:SignatureValue>
<ds:KeyInfo><ds:X509Data><ds:X509Certificate>MIIDuzCCAySgAwIBAgIBAjANBgkqhkiG9w0BAQQFADCBljELMAkGA1UEBhMCVVMxCzAJBgNVBAgT
AlZBMREwDwYDVQQHEwhTdGVybGluZzENMAsGA1UEChMEREVDRTEMMAoGA1UECxMDbGxjMSMwIQYD
VQQDExpzdG9teGxic2I5MS52YS5uZXVzdGFyLmNvbTElMCMGCSqGSIb3DQEJARYWc2FudG9zLmpo
YUBuZXVzdGFyLmJpejAeFw0xMDAzMTkwMTU2NDRaFw0xMTAzMTkwMTU2NDRaMIGJMQswCQYDVQQG
EwJVUzELMAkGA1UECBMCdmExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQ0w
CwYDVQQLEwRERUNFMRIwEAYDVQQDEwlsb2NhbGhvc3QxJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5q
aGFAbmV1c3Rhci5iaXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALBV5Opi92ieLfFomehr
M1oKkvzx08i3OgPNW5Dfk7PGiP3adh/Ilc2j3kAIIedK1hQadRY/RDniz6OKUXeirYztN5Q16i85
RWuUXDol7dHXYUK+xYcQTOPSUWPzxxNqj8zltHOBHrSJMDgONeePsc+/0aFBT8D5CYHjHEwfR0e5
AgMBAAGjggEiMIIBHjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl
ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU5+JXeZQNlTVtAwpVfn110GpQHfMwgcMGA1UdIwSBuzCB
uIAUaOpJ0xKV601qQdlJS9AU3xS2kxOhgZykgZkwgZYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJW
QTERMA8GA1UEBxMIU3RlcmxpbmcxDTALBgNVBAoTBERFQ0UxDDAKBgNVBAsTA2xsYzEjMCEGA1UE
AxMac3RvbXhsYnNiOTEudmEubmV1c3Rhci5jb20xJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5qaGFA
bmV1c3Rhci5iaXqCAQAwDQYJKoZIhvcNAQEEBQADgYEAfq+I8D1s56CpsWwgBGEqQ7VLJ9p0QXLk
B+F/gtil4On8wTK+W1yw7hjQWW9IDhC+nfYh3btB0azcQeJk7GiRkDn64lyMLMQ5Ui/ly0jeqwsL
NI1nE3tzF/9ru+BmZimzz342UmPSuvIUaKs1yhbqW9wjPH6//rGy5z7ZvQFXocY=</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">9540C07F2077E637E0401F0A07990C85</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"><saml2:SubjectConfirmationData InResponseTo="3D49E403EB246AC775BFB93483EF5609" NotOnOrAfter="2010-11-19T14:59:55.150Z" Recipient="https://saml.example.org/login/POST"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2010-11-18T14:59:45.150Z" NotOnOrAfter="2011-11-18T14:59:55.150Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:80080020</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/dece/SecurityToken/Assertion/1da011cc-8ee2-4415-babd-a0401218e67f</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2010-11-18T14:59:55.150Z"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">94B6AE0F85ADC20DE0401F0A0799081F</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></saml2p:Response>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86729</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="NODE_USER_SAML_ASSERTION Row Validator" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="1b4a5bec-ada3-4ee0-b85a-2eca55116ac8">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="42eba31f-e675-415b-9cc3-9618aea2d97b">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("affilnodeid",null);
tC.setPropertyValue("affilnodeidProcessed",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("expectNodeUserRowCount",null);
tC.setPropertyValue("expectCreateExpireHoursDiff",null);

tC.setPropertyValue("dbSamlStatus",null);
tC.setPropertyValue("dbSamlUUID",null);
tC.setPropertyValue("dbSamlUserID",null);
tC.setPropertyValue("dbSamlAccountID",null);
tC.setPropertyValue("dbSamlCreateTime",null);
tC.setPropertyValue("dbSamlExpireTime",null);
tC.setPropertyValue("dbSamlNodeOid",null);

tC.setPropertyValue("dbCreateExpireHoursDiff",null);
tC.setPropertyValue("dbCreateTODsecsDiff",null);

tC.setPropertyValue("dbNodeUserID",null);
tC.setPropertyValue("dbNodeUserCreateTime",null);
tC.setPropertyValue("dbNodeUserOid",null);
tC.setPropertyValue("dbNodeUserNodeOid",null);
tC.setPropertyValue("dbNodeUserRowOid",null);
tC.setPropertyValue("dbNodeUserUUID",null);

tC.setPropertyValue("dbNodeAcctID",null);
tC.setPropertyValue("dbNodeAcctCreateTime",null);
tC.setPropertyValue("dbNodeAcctAccountOid",null);
tC.setPropertyValue("dbNodeAcctNodeOid",null);
tC.setPropertyValue("dbNodeAcctRowOid",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properities" id="a78c9f48-07fe-4982-a98a-f05aeae4b332">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("skipSAMLtoNODEUSERCompare","false");
tC.setPropertyValue("skipSAMLtoNODEACCOUNTCompare","false");

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("affilnodeid",callTC.getPropertyValue("affilnodeid"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("expectCreateExpireHoursDiff",callTC.getPropertyValue("expectCreateExpireHoursDiff"));
tC.setPropertyValue("expectNodeUserRowCount",callTC.getPropertyValue("expectNodeUserRowCount"));

String aId = callTC.getPropertyValue("assertionAccountId").toString();
String uId = callTC.getPropertyValue("assertionUserId").toString();
tC.setPropertyValue("assertionAccountId",aId.substring(aId.lastIndexOf(":")+1, aId.length()));
tC.setPropertyValue("assertionUserId",uId.substring(uId.lastIndexOf(":")+1, uId.length()));

if (tC.getPropertyValue("expectNodeUserRowCount") == null || tC.getPropertyValue("expectNodeUserRowCount") == 'null') {
    		tC.setPropertyValue("expectNodeUserRowCount","1");
}
if (tC.getPropertyValue("expectNodeUserRowCount") == "0") {
	tC.setPropertyValue("skipSAMLtoNODEUSERCompare","true");
	tC.setPropertyValue("skipSAMLtoNODEACCOUNTCompare","true");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Assert Expected NODE_USER table row count" id="c656a262-1c59-4e21-8bf2-228890a43227">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

String nodeid = tC.getPropertyValue("nodeid").toString();
String affilnodeid = tC.getPropertyValue("affilnodeid").toString();
String useroid = tC.getPropertyValue("useroid").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String uuid = tC.getPropertyValue("assertionUUID");
String expectNodeUserRowCount = tC.getPropertyValue("expectNodeUserRowCount");
String results = "";
String afil = "";
String cnt = "";

if (affilnodeid != 'null' &amp;&amp; affilnodeid.length() > 0) {
	afil = "or node_oid = '$affilnodeid'";
}

String sql = """select count(*) as CNT from NODE_USER 
where NODE_USER_SAML_UUID = '$uuid'
""";

try {
	results = a.SelectFromDB(sql,sys);
	
	def myXML = new XmlSlurper().parseText(results);

	assert myXML.ResultSet.Row.size() == 1;

	cnt = myXML.ResultSet.Row.CNT.text();
}
catch(Throwable e) {
	log.info e; 
	log.info sql;
	assert 1 == 2;
}
finally {
	log.info sql;
	log.info results;
	log.info "cnt[$cnt] - expectNodeUserRowCount[$expectNodeUserRowCount]";
	assert expectNodeUserRowCount == cnt;
	tC.setPropertyValue("dbxmlresponse", results);

}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Obtain Difference Between CREATED_DATE and TOD in Seconds" id="b2891864-eb7a-4bee-b628-00de766ab5d2">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

String nodeid = tC.getPropertyValue("nodeid").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String uuid = tC.getPropertyValue("assertionUUID");
String results = null;

String sql = """SELECT (extract(DAY FROM sysdate - created_date)*24*60*60)+ 
(extract(HOUR FROM sysdate - created_date)*60*60)+
(extract(MINUTE FROM sysdate - created_date)*60)+
extract(SECOND FROM sysdate - created_date)
as sec FROM NODE_USER_SAML_ASSERTION where NODE_USER_SAML_UUID = '$uuid'
""";

log.info sql;
results = a.SelectFromDB(sql,sys);
log.info "results[$results]";

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;

try {
	def myXML = new XmlSlurper().parseText(results);
	assert myXML.ResultSet.Row.size() == 1;

	tC.setPropertyValue("dbCreateTODsecsDiff",myXML.ResultSet.Row[0].SEC.text());
}
catch(Throwable e) {
	log.info e; 
	runnerTC.status = Status.FINISHED;
}
finally {
	tC.setPropertyValue("dbxmlresponse", results);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Obtain NODE_USER_SAML_ASSERTION row" id="7c351d75-95a2-45a8-8a16-d8faf8e0c499">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

String nodeid = tC.getPropertyValue("nodeid").toString();
String anodeid = tC.getPropertyValue("affilnodeid").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String uuid = tC.getPropertyValue("assertionUUID");
String results = null;
String nodeUser = tC.getPropertyValue("assertionUserId");

String sql = """select 
to_char(rawtohex(a.NODE_USER_SAML_ASSERTION_OID)) NODE_USER_SAML_ASSERTION_OID,
to_char(rawtohex(a.NODE_OID)) NODE_OID,
NODE_USER_SAML_ASSERTION,
NODE_USER_SAML_UUID,
CREATED_DATE,
to_char(rawtohex(a.NODE_USER_ID)) NODE_USER_ID,
to_char(rawtohex(a.NODE_ACCOUNT_ID)) NODE_ACCOUNT_ID,
STATUS,
EXPIRATION_DATE
from NODE_USER_SAML_ASSERTION a where NODE_USER_SAML_UUID = '$uuid' 
and 
NODE_USER_ID = (SELECT ROW_OID from NODE_USER 
where NODE_USER_ID = '$nodeUser' and NODE_OID = '$nodeid')
""";

log.info sql;
results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;

try {
	def myXML = new XmlSlurper().parseText(results);
	assert myXML.ResultSet.Row.size() == 1;

	tC.setPropertyValue("dbSamlUserID",myXML.ResultSet.Row[0].NODE_USER_ID.text());
	tC.setPropertyValue("dbSamlAccountID",myXML.ResultSet.Row[0].NODE_ACCOUNT_ID.text());
	tC.setPropertyValue("dbSamlStatus",myXML.ResultSet.Row[0].STATUS.text());
	tC.setPropertyValue("dbSamlUUID",myXML.ResultSet.Row[0].NODE_USER_SAML_UUID.text());
	tC.setPropertyValue("dbSamlCreateTime",myXML.ResultSet.Row[0].CREATED_DATE.text());
	tC.setPropertyValue("dbSamlExpireTime",myXML.ResultSet.Row[0].EXPIRATION_DATE.text());
	tC.setPropertyValue("dbSamlNodeOid",myXML.ResultSet.Row[0].NODE_OID.text());
}
catch(Throwable e) {
	log.info e; 
	//assert 1 == 2;
	runnerTC.status = Status.FINISHED;
}
finally {
	tC.setPropertyValue("dbxmlresponse", results);
	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Obtain NODE_ACCOUNT row" id="0e9ed643-0692-4ef2-8ca9-3dc972c49c54">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

String nodeid = tC.getPropertyValue("nodeid").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String rowoid = tC.getPropertyValue("dbSamlAccountID");
String results = null;

String sql = """select 
to_char(rawtohex(a.NODE_ACCOUNT_ID)) NODE_ACCOUNT_ID,
to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
to_char(rawtohex(a.NODE_OID)) NODE_OID,
CREATED_DATE,
to_char(rawtohex(a.ROW_OID)) ROW_OID
from NODE_ACCOUNT a where ROW_OID = '$rowoid' 
and 
NODE_OID = '$nodeid'
""";

log.info sql;
results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;

try {
	def myXML = new XmlSlurper().parseText(results);
	assert myXML.ResultSet.Row.size() == 1;

	tC.setPropertyValue("dbNodeAcctID",myXML.ResultSet.Row[0].NODE_ACCOUNT_ID.text());
	tC.setPropertyValue("dbNodeAcctCreateTime",myXML.ResultSet.Row[0].CREATED_DATE.text());
	tC.setPropertyValue("dbNodeAcctAccountOid",myXML.ResultSet.Row[0].ACCOUNT_OID.text());
	tC.setPropertyValue("dbNodeAcctNodeOid",myXML.ResultSet.Row[0].NODE_OID.text());
	tC.setPropertyValue("dbNodeAcctRowOid",myXML.ResultSet.Row[0].ROW_OID.text());
}
catch(Throwable e) {
	log.info e; 
	assert 1 == 2;
}
finally {
	tC.setPropertyValue("dbxmlresponse", results);
	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Obtain NODE_USER row" id="b83ad338-93a6-4758-a47d-e0e63d5baf57">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

tC.setPropertyValue("dbNodeUserID",null);
tC.setPropertyValue("dbNodeUserCreateTime",null);
tC.setPropertyValue("dbNodeUserOid",null);
tC.setPropertyValue("dbNodeUserNodeOid",null);
tC.setPropertyValue("dbNodeUserRowOid",null);
tC.setPropertyValue("dbNodeUserUUID",null);
tC.setPropertyValue("dbNodeUserxmlresponse", null);
tC.setPropertyValue("dbNodeUsersql", null);

String nodeid = tC.getPropertyValue("nodeid").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String uuid = tC.getPropertyValue("assertionUUID");
String uid = tC.getPropertyValue("assertionUserId");
String results = null;

String sql = """select 
to_char(rawtohex(a.NODE_USER_ID)) NODE_USER_ID,
CREATED_DATE,
to_char(rawtohex(a.USER_OID)) USER_OID,
to_char(rawtohex(a.NODE_OID)) NODE_OID,
to_char(rawtohex(a.ROW_OID)) ROW_OID,
NODE_USER_SAML_UUID
from NODE_USER a where NODE_USER_ID = '$uid' 
and NODE_OID = '$nodeid'
""";

tC.setPropertyValue("dbNodeUsersql",sql);
log.info sql;
results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;

try {
	def myXML = new XmlSlurper().parseText(results);
	assert myXML.ResultSet.Row.size() == 1;

	tC.setPropertyValue("dbNodeUserID",myXML.ResultSet.Row.NODE_USER_ID.text());
	tC.setPropertyValue("dbNodeUserCreateTime",myXML.ResultSet.Row.CREATED_DATE.text());
	tC.setPropertyValue("dbNodeUserOid",myXML.ResultSet.Row.USER_OID.text());
	tC.setPropertyValue("dbNodeUserNodeOid",myXML.ResultSet.Row.NODE_OID.text());
	tC.setPropertyValue("dbNodeUserRowOid",myXML.ResultSet.Row.ROW_OID.text());
	tC.setPropertyValue("dbNodeUserUUID",myXML.ResultSet.Row.NODE_USER_SAML_UUID.text());
}
catch(Throwable e) {
	log.info e; 
	assert 1 == 2;
}
finally {
	tC.setPropertyValue("dbNodeUserxmlresponse", results);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Obtain Difference in Hours between CREATED and EXPIRATION columns" id="e1af1c7f-cfff-439d-af33-f3e627271b73">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

String nodeid = tC.getPropertyValue("nodeid").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String uuid = tC.getPropertyValue("assertionUUID");
String results = null;

String sql = """SELECT 
EXTRACT (DAY FROM (expiration_date - created_date)) * 24 +
EXTRACT (HOUR FROM (expiration_date - created_date)) +
EXTRACT (MINUTE FROM (expiration_date - created_date)) / 60 +
EXTRACT (SECOND FROM (expiration_date - created_date)) / 3600 DIFFERENCE_HOURS
FROM NODE_USER_SAML_ASSERTION where NODE_USER_SAML_UUID = '$uuid'""";

log.info sql;
results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;

try {
	def myXML = new XmlSlurper().parseText(results);
	assert myXML.ResultSet.Row.size() == 1;

	tC.setPropertyValue("dbCreateExpireHoursDiff",myXML.ResultSet.Row[0].DIFFERENCE_HOURS.text());
}
catch(Throwable e) {
	log.info e; 
	assert 1 == 2;
}
finally {
	tC.setPropertyValue("dbxmlresponse", results);
	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Assert NODE_USER_SAML_ASSERTION has proper row count for UUID" id="095ee278-687f-4502-bc6a-2059c888385f">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

assert a.samlGetUUIDNodeAssertionRowCount(tC.getPropertyValue("assertionUUID")) == 1;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Assert NODE_USER_SAML_ASSERTION.EXPIRATION_DATE is expected value" id="dca7fb12-e9c1-4ad1-9a35-642f8f60d216">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

float a = (float) tC.getPropertyValue("dbCreateExpireHoursDiff").toFloat().round();
float b = (float) tC.getPropertyValue("expectCreateExpireHoursDiff").toFloat().round();

log.info "Assert Expected[$b] == Received[$a]";

assert a == b;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Assert NODE_USER_SAML_ASSERTION and NODE_USER are in sync" id="2d3b99da-7f52-4bf2-bdac-3e0a107887cd">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("skipSAMLtoNODEUSERCompare") == "false") {
	// Verify UUID is same between the tables.
	log.info "NODE_USER_SAML_UUID - dbNodeUserUUID[" + tC.getPropertyValue("dbNodeUserUUID") + "] - dbSamlUUID[" + tC.getPropertyValue("dbSamlUUID") + "]";
	assert tC.getPropertyValue("dbNodeUserUUID") == tC.getPropertyValue("dbSamlUUID")

	// NODE_USER_ID == NODE_USER.ROW_ID
	if (tC.getPropertyValue("affilnodeidProcessed") != "true") {
		log.info "NODE_SAML_USER_ROWID - dbSamlUserID[" + tC.getPropertyValue("dbSamlUserID") + "] - dbNodeUserRowOid[" + tC.getPropertyValue("dbNodeUserRowOid") + "]";
		assert tC.getPropertyValue("dbSamlUserID") == tC.getPropertyValue("dbNodeUserRowOid")

		//NODE_OID between NODE_USER_SAML_ASSERTION and NODE_USER match
		assert tC.getPropertyValue("dbSamlNodeOid") == tC.getPropertyValue("dbNodeUserNodeOid")
	}

	// NODE_USER.USER_OID must match the username logged in.
	log.info "USER_OID";
	log.info "useroid[" + tC.getPropertyValue("useroid") + "]";
	log.info "dbNodeUserOid[" + tC.getPropertyValue("dbNodeUserOid") + "]";
	assert tC.getPropertyValue("useroid") == tC.getPropertyValue("dbNodeUserOid");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Assert NODE_USER_SAML_ASSERTION and NODE_ACCOUNT are in sync" id="891becc6-01f8-4321-9081-8f6b5847e748">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("skipSAMLtoNODEACCOUNTCompare") == "false") {
	// NODE_USER_ID == NODE_USER.ROW_ID
	assert tC.getPropertyValue("dbNodeAcctRowOid") == tC.getPropertyValue("dbSamlAccountID")

	// NODE_ACCOUNT.ACCOUNT_OID is the same accountId as that of the user.
	assert tC.getPropertyValue("dbNodeAcctAccountOid") == tC.getPropertyValue("accountoid");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Assert NODE_USER.NODE_USER_SAML_UUID is correct" id="11e8d8b6-37a6-4eef-a9bd-80714b1f8d6b">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("skipSAMLtoNODEUSERCompare") == "false") {
	/*
	  NODE_USER_SAML_UUID
	*/
	log.info "NODE_USER_SAML_UUID - Expect[" + tC.getPropertyValue("assertionUUID") + "] Received[" +  tC.getPropertyValue("dbNodeUserUUID") + "]"
	assert tC.getPropertyValue("dbNodeUserUUID") == tC.getPropertyValue("assertionUUID");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Assert NODE_USER.USER_OID is correct" id="3abed17a-b118-4ad2-adb1-a4f61a449927">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("skipSAMLtoNODEUSERCompare") == "false") {
	/*
	*  USER_OID
	*/
	log.info "USER_OID - Expect[" + tC.getPropertyValue("useroid") + "] Received[" +  tC.getPropertyValue("dbNodeUserOid") + "]"
	assert tC.getPropertyValue("dbNodeUserOid") == tC.getPropertyValue("useroid");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Assert NODE_USER.NODE_OID is correct" id="64a28b0c-5a36-49c7-9cf5-7a28db73dcae">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("skipSAMLtoNODEUSERCompare") == "false") {
	/*
	*  NODE_OID
	*/
	log.info "NODE_OID - Expect[" + tC.getPropertyValue("nodeid") + "] Received[" +  tC.getPropertyValue("dbNodeUserNodeOid") + "]"
	assert tC.getPropertyValue("dbNodeUserNodeOid") == tC.getPropertyValue("nodeid");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="If AffiliateMember repeat validation for AffiliateMember Data" id="b10b1e29-c0c6-4812-aa07-5a1f6b5f5b0d">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("affilnodeid") != null &amp;&amp;
    	tC.getPropertyValue("affilnodeidProcessed") != "true") {
	tC.setPropertyValue("nodeid", tC.getPropertyValue("affilnodeid"));
	tC.setPropertyValue("affilnodeidProcessed","true");
	testRunner.gotoStepByName("Obtain NODE_USER row");
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>affilnodeid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A52459A05388DD3EE0401F0A079942BA</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A6CC28535D7B871DE0401F0A05995F16</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>ced8581d-99c5-4d72-ab41-1727d5ff7828</con:value>
        </con:property>
        <con:property>
          <con:name>dbCreateExpireHoursDiff</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbCreateTODsecsDiff</con:name>
          <con:value>5</con:value>
        </con:property>
        <con:property>
          <con:name>dbNodeAcctAccountOid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbNodeAcctCreateTime</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbNodeAcctID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbNodeAcctNodeOid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbNodeAcctRowOid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbNodeCreateTime</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>dbNodeNodeOid</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>dbNodeRowOid</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>dbNodeUserCreateTime</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbNodeUserID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbNodeUserNodeOid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbNodeUserOid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbNodeUserRowOid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbNodeUsersql</con:name>
          <con:value>select 
to_char(rawtohex(a.NODE_USER_ID)) NODE_USER_ID,
CREATED_DATE,
to_char(rawtohex(a.USER_OID)) USER_OID,
to_char(rawtohex(a.NODE_OID)) NODE_OID,
to_char(rawtohex(a.ROW_OID)) ROW_OID,
NODE_USER_SAML_UUID
from NODE_USER a where NODE_USER_ID = 'A434EDE68AA9226EE0401F0A079979FC' 
and NODE_OID = '50001111'</con:value>
        </con:property>
        <con:property>
          <con:name>dbNodeUserUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbNodeUserxmlresponse</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <NODE_USER_ID>A434EDE68AA9226EE0401F0A079979FC</NODE_USER_ID>
      <CREATED_DATE>2011-05-26 21:08:53.0</CREATED_DATE>
      <USER_OID>100299</USER_OID>
      <NODE_OID>50001111</NODE_OID>
      <ROW_OID>A434EDE68AAA226EE0401F0A079979FC</ROW_OID>
      <NODE_USER_SAML_UUID>bc9bd5b3-23d0-49dc-ad65-fb778d8e80a3</NODE_USER_SAML_UUID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>dbNodeUUID</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>dbSamlAccountID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbSamlCreateTime</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbSamlExpireTime</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbSamlNodeOid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbSamlStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbSamlUserID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbSamlUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbxmlresponse</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>87672</con:value>
        </con:property>
        <con:property>
          <con:name>expectNodeUserRowCount</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>400010</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Generic API Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>SST GET API - Basic Auth</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pjgstsFull2</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>affilnodeidProcessed</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>skipSAMLtoNODEUSERCompare</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>skipSAMLtoNODEACCOUNTCompare</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86730</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="NODE_USER Row Validator" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6fb05fa0-0bdb-4608-b067-369bed6af442">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="a028b659-669b-41e4-b09c-026182987bdc">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("nodeaccountid",null);
tC.setPropertyValue("nodeuserid",null);
tC.setPropertyValue("nodeuserrowid",null);
tC.setPropertyValue("nodeacctoutrowid",null);
tC.setPropertyValue("assertionUUID",null);

tC.setPropertyValue("dbStatus",null);
tC.setPropertyValue("dbUUID",null);
tC.setPropertyValue("dbUserID",null);
tC.setPropertyValue("dbAccountID",null);
tC.setPropertyValue("dbCreateTime",null);
tC.setPropertyValue("dbCreateExpireHoursDiff",null);
tC.setPropertyValue("dbCreateTODsecsDiff",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properities" id="e163fa0b-7488-4dc7-8a22-f6c682f10edc">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("nodeaccountid",callTC.getPropertyValue("nodeaccountid"));
tC.setPropertyValue("nodeuserid",callTC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("nodeuserrowid",callTC.getPropertyValue("nodeuserrowid"));
tC.setPropertyValue("nodeacctoutrowid",callTC.getPropertyValue("nodeacctoutrowid"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("expectCreateExpireHoursDiff",callTC.getPropertyValue("expectCreateExpireHoursDiff"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Extract NODE_USER Information" id="8ea52757-63b1-4a81-9d79-991e21063dcf">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName xsi:nil="true"/>
          <con:driver>${#Project#JDBCDriver}</con:driver>
          <con:connectionString>${#Project#JDBCConnStr}</con:connectionString>
          <con:password/>
          <con:query>select * from NODE_USER where NODE_OID = :nodeid and USER_OID = :oid</con:query>
          <con:assertion type="XPath Match" id="56c33f2e-d660-487e-b821-2827433cb1bb">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>oid</con:name>
              <con:value>${#TestCase#useroid}</con:value>
            </con:property>
            <con:property>
              <con:name>nodeid</con:name>
              <con:value>${#TestCase#nodeid}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="531d273d-475d-4326-8a08-ff930332a3f9">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
            <con:name>useruuid</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract NODE_USER Information</con:sourceStep>
            <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/NODE_USER_SAML_UUID[1]</con:sourcePath>
            <con:targetType>dbUUID</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          <con:upgraded>true</con:upgraded></con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Perform Data Validations" id="1a509bb9-e23a-453b-bd67-3613c312100f">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

assert tC.getPropertyValue("assertionUUID") == tC.getPropertyValue("dbUUID");</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>100199</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">bc46daa0-a8da-4743-aead-f1a5fc013712</con:value>
        </con:property>
        <con:property>
          <con:name>dbAccountID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbCreateExpireHoursDiff</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbCreateTime</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbUserID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>dbUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>80080010</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Node Role Type Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01700 - STS - Node role of urn:dece:role:coordinator</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>pjgstsFull2</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>100299</con:value>
        </con:property>
        <con:property>
          <con:name>expectCreateExpireHoursDiff</con:name>
          <con:value>8784</con:value>
        </con:property>
        <con:property>
          <con:name>dbCreateTODsecsDiff</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86731</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Flush Node/User Assertion Data" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="230edeba-4a6f-47b8-8ea0-354018a6840a">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="b2dcc8c4-b271-4190-bb3c-a66f3febb3f8">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodelist = tP.getPropertyValue("nodeAffiliationRetailer").toString() +
	"," +
	tP.getPropertyValue("nodeAccessPortal").toString() +
	"," +
	tP.getPropertyValue("nodedlaspLP1").toString() +
	"," +
	tP.getPropertyValue("noderetailerLP1").toString() +
	"," +
	tP.getPropertyValue("nodeListofLLASPNodes").toString() +
	"," +
	tP.getPropertyValue("nodeForNodeRoleTesting").toString() +
	"," +
	tP.getPropertyValue("nodeAffiliationAccessportal").toString();

log.info "nodelist[$nodelist]";
	
tC.setPropertyValue("username",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("expectNodeUserRowCount",null);
tC.setPropertyValue("nodelist",nodelist);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properities" id="ffe7056b-ed01-4e7f-bbdb-3100544d9460">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Delete account STREAM_DATA rows" id="cf655c33-6b5e-44af-a6f1-62881a54cdec">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid").toString());
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.streamDeleteAccountOid - $e";
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Delete NODE_USER_SAML_ASSERTION rows" id="b85ff4fd-14e9-448b-83ee-aa39019a7e66">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String nodelist = tC.getPropertyValue("nodelist").toString();
String nodeid = tC.getPropertyValue("nodeid");
String useroid = tC.getPropertyValue("useroid");
int results = 0;

assert nodelist.length() > 0;
assert nodelist != 'null';

List nodeList = nodelist.tokenize(",");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It: $it";

	String sql = """DELETE from NODE_USER_SAML_ASSERTION where NODE_OID = '$it'
  		and NODE_USER_ID = (select ROW_OID from NODE_USER where USER_OID = '$useroid' 
  		and NODE_OID = '$it')""";

  	log.info sql;

  	try {
  		dbUtils = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem"));
		results = dbUtils.DeleteFromDB(sql);
	}
	catch(Throwable e) {
		log.error "ERROR! - dbUtils.DeleteFromDB - $e";
	}
	finally {
		//log.info sql;
		log.info "result[$results]";
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Delete NODE_USER rows" disabled="true" id="6541548f-face-459c-a304-2ca1a99f171c">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String nodelist = tC.getPropertyValue("nodelist").toString();
String nodeid = tC.getPropertyValue("nodeid");
String useroid = tC.getPropertyValue("useroid");
int results = 0;

assert nodelist.length() > 0;
assert nodelist != 'null';

List nodeList = nodelist.tokenize(",");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It: $it";

	String sql = """DELETE from NODE_USER where NODE_OID = '$it'
 		 and USER_OID = '$useroid'""";

  	log.info sql;

  	try {
  		dbUtils = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem"));
		results = dbUtils.DeleteFromDB(sql);
	}
	catch(Throwable e) {
		log.error "ERROR! - dbUtils.DeleteFromDB - $e";
	}
	finally {
		//log.info sql;
		log.info "result[$results]";
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Delete NODE_ACCOUNT rows" disabled="true" id="cf7f1c43-3df5-4fe4-9bd5-6fbc3e3ab9cb">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String nodelist = tC.getPropertyValue("nodelist").toString();
String nodeid = tC.getPropertyValue("nodeid");
String useroid = tC.getPropertyValue("useroid");
String accountoid = tC.getPropertyValue("accountoid");
int results = 0;

assert nodelist.length() > 0;
assert nodelist != 'null';

List nodeList = nodelist.tokenize(",");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	log.info "It: $it";

	String sql = """DELETE from NODE_ACCOUNT where NODE_OID = '$nodeid'
 		 and ACCOUNT_OID = '$accountoid'""";

  	log.info sql;

  	try {
  		dbUtils = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem"));
		results = dbUtils.DeleteFromDB(sql);
	}
	catch(Throwable e) {
		log.error "ERROR! - dbUtils.DeleteFromDB - $e";
	}
	finally {
		//log.info sql;
		log.info "result[$results]";
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify no NODE_USER_SAML_ASSERTION rows exist for node/user" disabled="true" id="92fcf0a1-346f-4e10-9d4f-d35999630990">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("Verify no Node/User Assertion Data Exists")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_02000 - STS - Device - Username in 'active' status</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>STS Tokentype usernamepassword - Device Role - P1</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pjgstsFull2</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CB3BFA27831F903DE0401F0A059965CF</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CB3BF9C364EF438FE0401F0A059965CD</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>expectNodeUserRowCount</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodelist</con:name>
          <con:value>70007000,70007001,70007001,90009000,90009000,90009000,80008000,80008001,80008002,90009000,50005000,50005001,50005002</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Flush User Assertion data for Device" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c56c6047-5730-46e7-9bfd-ed8c9efa09cc">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="584e39b4-3842-4a99-ac4b-01b577332ab2">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",null);
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeDeviceDefault"));
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("expectNodeUserRowCount",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properities" id="92e111db-1233-4a02-87b0-2dea8dcf9b51">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("expectNodeUserRowCount",callTC.getPropertyValue("expectNodeUserRowCount"));


if (tC.getPropertyValue("expectNodeUserRowCount") == null || tC.getPropertyValue("expectNodeUserRowCount") == "null") {
	tC.setPropertyValue("expectNodeUserRowCount","1");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Delete NODE_USER_SAML_ASSERTION and NODE_USER rows" id="e5fa0fad-0894-4e65-8cc7-308487473dc6">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

Boolean delSamlNodeRows = true;
String rowoid = null;
String nodeSamlNodeUserId = null;
String nodeid = tC.getPropertyValue("nodeid");
String useroid = tC.getPropertyValue("useroid");
String sql = """select to_char(rawtohex(ROW_OID)) ROW_OID from NODE_USER where USER_OID = '$useroid' and NODE_OID = '$nodeid'""";

log.info sql;

try {
	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR during a.SelectFromDB - $e";
}
finally {
	log.info sql;
	log.info results;
}

if (!results.isEmpty()) {
	try {
		myXML = new XmlSlurper().parseText(results);
	}
	catch (Throwable e) {
		log.info "Error during XmlSlurper - $e";
	}
	finally {
		def rowsReturned = myXML.ResultSet.Row.size();
		def oids = myXML.ResultSet.Row;

		log.info "rowsReturned - $rowsReturned";

		for (oid in oids.ROW_OID) {
			log.info "oid is " + oid;
			sql = "DELETE NODE_USER_SAML_ASSERTION where " +
				"NODE_USER_ID = '" + oid + "'";
			try	{	
				rc = a.dbConnExecuteUpdate(sql);
						
				if(rc != 0) {
					log.info "Error - Could not delete OID: "  + oid;
					log.info "Error - SQL: " + sql;
				} 
			}
			catch(Throwable e) {
				log.info "ERROR during a.dbConnExecuteUpdate - $e";
			}
			
			/*
			*  Now remove the NODE_USER row
			*/
			sql = "DELETE NODE_USER where " +
				"ROW_OID = '" + oid + "'";
			try	{	
				rc = a.dbConnExecuteUpdate(sql);
						
				if(rc != 0) {
					log.info "Error - Could not delete NODE_USER OID: "  + oid;
					log.info "Error - SQL: " + sql;
				} 
			}
			catch(Throwable e) {
				log.info "ERROR during a.dbConnExecuteUpdate - $e";
			}
		}
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Delete NODE_ACCOUNT rows" id="e281db2c-9852-4e4a-b4a2-17599684c0d4">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

Boolean delSamlNodeRows = true;
String rowoid = null;
String nodeSamlNodeUserId = null;
String nodeid = tC.getPropertyValue("nodeid");
String accountoid = tC.getPropertyValue("accountoid");
String sql = """DELETE from NODE_ACCOUNT where NODE_OID = '$nodeid'
  and ACCOUNT_OID = '$accountoid' 
""";

log.info sql;

try {
	results = a.DeleteFromDB(sql,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.error e;
	assert 1 == 2;
}
finally {
	log.info sql;
	log.info results;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify no NODE_USER_SAML_ASSERTION rows exist for node/user" id="69e123ed-edea-4561-a5d4-aabe5cf7b4ba">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("Verify no Node/User Assertion Data Exists")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>username</con:name>
          <con:value>pjgstsBasic2</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0200</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>CB3C002137BFDF68E0401F0A07990598</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>CB3BF9C364EF438FE0401F0A059965CD</con:value>
        </con:property>
        <con:property>
          <con:name>expectNodeUserRowCount</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_36073 - STS GET BasicAuth - Device - Assertion retrieval for full user login account in pending status, user active status</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>STS GET Basic Auth - Device Role - P1</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86733</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Core Identity Information Extraction" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="19dcfcb7-55b7-4ff5-9017-2ef5cce420f8">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="c3be24a3-439b-4ec6-b8af-171631eb3fc1">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("accountoid",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properities" id="95bb84d4-22b1-48c1-8fec-050142dd33c5">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Obtain ACCOUNT_USER.USER_OID &amp; ACCOUNT_OID values" id="0880d2df-c29b-4bfc-a6c6-6bce6d4e8766">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		String u = dbUser.userGetUserOID(tC.getPropertyValue("username"));
		String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("username"))

		assert u.length() > 0;
		assert a.length() > 0;
		
		tC.setPropertyValue("useroid", u);
		tC.setPropertyValue("accountoid", a);
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.userGetUserOID - $e";
		assert 1 == 2;		
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Promote variables to calling TestCase" id="a9301a4f-217b-4d5c-b82d-cb60af51fd66">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def toTCName = tC.getPropertyValue("tName");
def toTSName = tC.getPropertyValue("sName")

//
//  Transfer all the properites created in this test case
//  to the calling testcase.
//
if (toTCName != "" &amp;&amp; toTSName != "") {
	def toTC = testRunner.testCase.testSuite.project.getTestSuiteByName(toTSName).getTestCaseByName(toTCName);

	Map testCasePropertiesMap = tC.getProperties();
	Set testCasePropertiesKeySet = testCasePropertiesMap.keySet();
	Iterator iter = testCasePropertiesKeySet.iterator();
	while(iter.hasNext()){
		String testCasePropertyKey = (String)iter.next();

		switch (testCasePropertyKey) {
			case "accountoid":
			case "useroid":
				toTC.setPropertyValue(testCasePropertyKey,tC.getPropertyValue(testCasePropertyKey));	
			break;
		}
	}
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01000 - STS</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>E2E_TestCases_3_Users_3_AccessLevels</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">firstusername_20130319_10550</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>7600</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">B50131B438EFA3A5D7B29C0365A6E736</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D8414B820315DC7FE0401F0A05991500</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeacctoutrowid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86734</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Validate Signuature" searchProperties="true" id="f3067a65-9434-4201-a951-4bd9a42b4972">
      <con:settings/>
      <con:testStep type="groovy" name="Groovy Script" id="3bd793b1-9740-44cc-9f53-f80c51a1ad52">
        <con:settings/>
        <con:config>
          <script>import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.util.Collections;
import java.lang.Object;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import javax.xml.transform.*;
import java.security.cert.X509Certificate;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;

import javax.xml.crypto.Data;
import javax.xml.crypto.MarshalException;
import javax.xml.crypto.NoSuchMechanismException;
import javax.xml.crypto.URIDereferencer;
import javax.xml.crypto.XMLStructure;
import javax.xml.crypto.dom.DOMStructure;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;
import javax.xml.crypto.dsig.spec.*;
import javax.xml.crypto.dsig.keyinfo.*;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.XMLDSigSecurity;
import javax.xml.crypto.dsig.XMLObject;
import javax.xml.crypto.dsig.XMLSignContext;
import javax.xml.crypto.dsig.XMLSignature;
import javax.xml.crypto.dsig.XMLSignatureException;
import javax.xml.crypto.dsig.XMLSignatureFactory;
import javax.xml.crypto.dsig.XMLValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.dom.DOMValidateContext;

def tC = testRunner.getTestCase();











//import org.apache.xml.security.signature.SignedInfo;
import javax.xml.crypto.dsig.*;



	def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

		myXML.declareNamespace(saml2p: "urn:oasis:names:tc:SAML:2.0:protocol");

		/*
		*  StatusCode
		*/
		String recvStatusCode = myXML."saml2p:Status"."saml2p:StatusCode"."saml2p:StatusCode".@Value;
		this.log.info "StatusCode[$StatusCode] - recvStatusCode[$recvStatusCode]";
		assert StatusCode == recvStatusCode;
		/*
		*  StatusMessage
		*/
		String recvStatusMessage = myXML."saml2p:Status"."saml2p:StatusMessage";
		this.log.info "StatusMessage[$StatusMessage] - recvStatusMessage[$recvStatusMessage]";
		assert StatusMessage == recvStatusMessage;
		/*
		*  StatusDetail
		*/
		String recvStatusDetail = myXML."saml2p:Status"."saml2p:StatusDetail"."saml2:Attribute"."saml2:AttributeValue";
		this.log.info "StatusDetail[$StatusDetail] - recvStatusDetail[$recvStatusDetail]";
		assert StatusDetail == recvStatusDetail;
-----------------------
String myKeyStore  = "C:\\Documents and Settings\\pgentry\\soapui\\keystore\\keystore.jks";
String authNfile   = "C:\\Documents and Settings\\pgentry\\soapui\\keystore\\authn.xml";
String signedAuthN = "C:\\Documents and Settings\\pgentry\\soapui\\keystore\\signedauthn.xml";

// Create a DOM XMLSignatureFactory that will be used to
// generate the enveloped signature.
XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM");

// Create a Reference to the enveloped document (in this case,
// you are signing the whole document, so a URI of "" signifies
// that, and also specify the SHA1 digest algorithm and
// the ENVELOPED Transform.
Reference ref = fac.newReference("", fac.newDigestMethod(DigestMethod.SHA1, null),  Collections.singletonList
   (fac.newTransform (Transform.ENVELOPED, (TransformParameterSpec) null)), null, null);

// Create the SignedInfo.
SignedInfo si = fac.newSignedInfo(fac.newCanonicalizationMethod(CanonicalizationMethod.INCLUSIVE,(C14NMethodParameterSpec) null),
    fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null), Collections.singletonList(ref));

// Load the KeyStore and get the signing key and certificate.
KeyStore ks = KeyStore.getInstance("JKS");
ks.load(new FileInputStream(myKeyStore), "testing".toCharArray());
KeyStore.PrivateKeyEntry keyEntry = (KeyStore.PrivateKeyEntry) ks.getEntry("selfsigned", new KeyStore.PasswordProtection("testing".toCharArray()));
X509Certificate cert = (X509Certificate) keyEntry.getCertificate();

// Create the KeyInfo containing the X509Data.
KeyInfoFactory kif = fac.getKeyInfoFactory();
List x509Content = new ArrayList();
x509Content.add(cert.getSubjectX500Principal().getName());
x509Content.add(cert);
X509Data xd = kif.newX509Data(x509Content);
KeyInfo  ki = kif.newKeyInfo(Collections.singletonList(xd));

// Instantiate the document to be signed.
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setNamespaceAware(true);
//Document doc = dbf.newDocumentBuilder().parse (new FileInputStream(authNfile));
//Document doc = dbf.newDocumentBuilder().parse (new FileInputStream(authNfile));
Document doc = dbf.newDocumentBuilder().parse(authNfile);

// Create a DOMSignContext and specify the RSA PrivateKey and
// location of the resulting XMLSignature's parent element.
DOMSignContext dsc = new DOMSignContext(keyEntry.getPrivateKey(), doc.getDocumentElement());

// Create the XMLSignature, but don't sign it yet.
XMLSignature signature = fac.newXMLSignature(si, ki);

// Marshal, generate, and sign the enveloped signature.
signature.sign(dsc);

// Output the resulting document.
OutputStream os = new FileOutputStream(signedAuthN);
TransformerFactory tf = TransformerFactory.newInstance();
Transformer trans = tf.newTransformer();
trans.transform(new DOMSource(doc), new StreamResult(os));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86735</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verify no Node/User Assertion Data Exists" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="19ec4876-4bad-45f4-a668-7adeaae5bf7c">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="70c8ebf1-74dd-4278-991a-f7612a52103a">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("accountoid",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properities" id="e7f50af3-0a7f-4a6e-9f1c-bb0e8b35d761">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify no NODE_USER_SAML_ASSERTION rows for Node/User" id="29b54c8c-2d79-4514-83f2-a865a92049db">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

int nodeSamlRowCount = 1;
String nodeid = tC.getPropertyValue("nodeid").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String accountoid = tC.getPropertyValue("accountoid");
String useroid = tC.getPropertyValue("useroid");
String results = null;

String sql = """SELECT count(NODE_USER_SAML_ASSERTION_OID) as CNT from NODE_USER_SAML_ASSERTION where
  NODE_OID = '$nodeid' and NODE_USER_ID = (select ROW_OID from NODE_USER where NODE_OID = hextoraw('$nodeid') 
  and USER_OID = hextoraw('$useroid'))
  """;

try {
	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));

	myXML = new XmlSlurper().parseText(results);
	
	if (myXML.ResultSet.Row.size() == 1) {
		nodeSamlRowCount = myXML.ResultSet.Row.CNT.text().toInteger();
	} else {
		nodeSamlRowCount = 1;
	}
}
catch(Throwable e) {
	log.error e;
	assert 1 == 2;
}
finally {
	log.info sql;
	log.info results;
	log.info "nodeSamlRowCount[$nodeSamlRowCount]";

	assert nodeSamlRowCount == 0;
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_00100 - STS - Device - NULL Request Body Supplied</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>STS Tokentype usernamepassword - Device Role - P1</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>pjgstsFull2</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>6612</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CB3BFA27831F903DE0401F0A059965CF</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CB3BF9C364EF438FE0401F0A059965CD</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true" disabled="true" id="3e631592-a3e8-42be-94c5-e4f208a401a8">
      <con:settings/>
      <con:testStep type="groovy" name="Rename Test Cases" id="c49f417a-5c75-482d-99fc-deabcf5c4952">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

import java.io.*;

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "STS Tokentype DeviceAuthToken - Device Role";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def TCNum = 13;

//BufferedWriter bufferedWriter = null;
//bufferedWriter = new BufferedWriter(new FileWriter("c:\\DiscreteMediaLeaseCreateQuestions.txt"));

def oldTestCaseName;
def newTestCaseName;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	//if(targetTestCase.isDisabled() == false)
	//{
		//targetTestCase.setFailOnError(true);
		oldTestCaseName = TCList[i].name;
		newTestCaseName = oldTestCaseName.replace("Copy of ", "");	
		targetTestCase.name = newTestCaseName;	
		TCNum = TCNum + 1;
		log.info "Done renaming Test Case '" + oldTestCaseName + "' to '" + newTestCaseName + "'";
	//}
	//else
	//{
	//	bufferedWriter.write(targetTestCase.name);
	//	bufferedWriter.newLine();
	//}
}

//if (bufferedWriter != null) {
	//bufferedWriter.flush();
     //bufferedWriter.close();
//}

log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>PERM_ACCOUNT_CONSENT_POLICIES</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Change a step's script for all Steps in a Suite" searchProperties="true" disabled="true" id="63df2d8e-8a58-4955-be8e-c4eccb9b3ba4">
      <con:settings/>
      <con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="6d43ab82-0256-41cb-944c-980322b1d977">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "STS Tokentype urn:dece:type:tokentype:saml2 Test Cases"; 

def oldString = """STS API - SecurityTokenExchange Invoked to Coordinator URL""";
def newString = """STS API - Invoked to Coordinator URL""";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				def testStepName = testStepList[j].name;
				
				if (testStepName == "-- Call STS SAML Token Exchange") {
					log.info "Hit!";
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					stepScript = testStepList[j].getScript();
					stepScript = stepScript.replace(oldString, newString);

					/*
					*  Delete a step
					*/
					//targetTestStep.delete();

					/*
					*  Replaces step's script completely
					*/
					//stepScript = """""";
					targetTestStep.setScript(stepScript);		
				}
				
				//targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>RTL_CS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set a Property" searchProperties="true" disabled="true" id="88abec67-0cfd-4158-ab1e-3dcbf6d69df0">
      <con:settings/>
      <con:testStep type="groovy" name="Set a Property" id="4aae0d70-4938-4154-a8b0-c9815b6cbb6e">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "Holder for new sts";
def propertyName;

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);	
	propertyName = testCase.getPropertyValue("PropertyName");	
	propertyValue = testCase.getPropertyValue("PropertyValue");		
	if(targetTestCase.isDisabled() == false)
	{
		try
		{
			//nodeRole = targetTestCase.getPropertyValue("ErrorResponse");
			propertyName = "synced";			
			/*if(nodeRole == 'ForbiddenRightsTokenAccessNotAllowed')
			{
				nodeRole = 'ForbiddenDiscreteMediaRightOwnerMismatch';
			}
			*/
			propertyValue = null
			targetTestCase.setPropertyValue(propertyName, propertyValue);
			log.info "Done with Test Case '" + TCList[i].name + "'";
		}
		catch(Throwable e)
		{
			log.info e.text;
		}		
	}	
}

log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>FUNC_USER_CONSENT_POLICIES</con:value>
        </con:property>
        <con:property>
          <con:name>PropertyName</con:name>
          <con:value>NumberOfPolicyRequestingEntities</con:value>
        </con:property>
        <con:property>
          <con:name>PropertyValue</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove a Step for all Testcases in a Suite" searchProperties="true" disabled="true" id="99c778cf-bd1a-4293-b34d-53339dcae326">
      <con:settings/>
      <con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="6fa579e3-343b-4c71-a90d-3e3530823dbd">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "STS Tokentype urn:dece:type:tokentype:DeviceAuthToken"; 
def stepName  = "Establish Stage for STS invocation as a Device";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList  = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				if (testStepList[j].name == stepName) {
					log.info "Removing Step " + testStepList[j].name;
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					targetTestCase.removeTestStep(targetTestStep);
				}
				
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info "ERROR:" + e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>RTL_CS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename a Step" searchProperties="true" disabled="true" id="0e62a367-0dda-4249-af02-f64c612938a3">
      <con:settings/>
      <con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="fad1a6f8-dba2-4686-8508-367c21c245f7">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "STS GET Node Role Type Test Cases"; 
def stepName  = "Call STS";
def stepNewName  = "Call STS GET - DeviceAuthToken";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList  = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				if (testStepList[j].name == stepName) {
					log.info "Renaming Step " + testStepList[j].name;
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					targetTestStep.name = stepNewName;
				}
				
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info "ERROR:" + e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>RTL_CS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>QC_TestPlanDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestLabDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestSet</con:name>
        <con:value/>
      </con:property>
    </con:properties>
    <con:reportParameters/>
  </con:testSuite><con:testSuite name="CommonTestSteps" disabled="true" id="f6530b1e-eb21-4867-8dcd-5bba6bf7fa33"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountCreate" searchProperties="true" id="4caf5f9d-f138-4a75-aa68-7074a28dcf38"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="f5e5bd1d-8c34-4b80-8db7-ada8b1e057d1" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);

tC.setPropertyValue("AccountName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="0713ba0b-b6d3-4189-8bc7-df3989891697"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Generate AccountName" id="11b27def-f321-4a26-967a-dd54c3cf65e5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def today= System.currentTimeMillis();

tC.setPropertyValue("AccountName","stsapi_107_"+today);</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="c752ec2a-0fdb-4947-ba1a-4350b51921d5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Account_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create" id="75e22897-cdfc-4ccd-9033-4663468a5c46"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" methodName="AccountCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" accept="" sslKeystore="RET_2_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/xml;charset=UTF-8" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#coordinatorSchema}"> 
<DisplayName>${#TestCase#AccountName}</DisplayName>
<Country>${#Project#AccountCountry}</Country>
</Account>]]></con:request><con:originalUri>https://qa.p.uvvutest.biz/rest/1/11/Account</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="947149be-7bb0-4a3f-9591-1927886d48ad"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="bcf58e06-f64f-4738-9a13-4c19f81cfc6c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate Response" id="75746f22-98e0-45b5-8291-777e59139230"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def hostAddress = b.getHost();
     log.info " hostAddress....     " + hostAddress;   
              
                if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
                {
                                tP.setPropertyValue("targetSystem","LP3ST");
                }
                else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
                {
                                tP.setPropertyValue("targetSystem","LP3CH");
                }
	def urlStr = b.getPath();

	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
		
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
		
		int lastColon = urlStr.lastIndexOf(':');
		int lastSlash = urlStr.lastIndexOf('/');
		accountid     = urlStr.substring(lastColon + 1);
		accountidfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
		tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountidfull);
	} else {
		assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*");
		int lastColon = urlStr.lastIndexOf('%3A');
		int lastSlash = urlStr.lastIndexOf('/');
		accountid     = urlStr.substring(lastColon + 3);
		accountidfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
		tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountidfull);
	}
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId to the Calling Test Case" id="5cb8b0a2-c100-4bda-8890-b6fb41c1e8a4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep><con:properties><con:property><con:name>AccountName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stsapi_107_1430973812920</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7002/rest/2015/02/Account/urn:dece:accountid:org:dece:1577845980813E95E05307991F0ABF67</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET_2</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_03101 - STS - DeviceAuthToken JoinCode - Full user created DeviceAuthToken consumable - P0</con:value></con:property><con:property><con:name>sName</con:name><con:value>2_P0 Test Cases</con:value></con:property><con:property><con:name>AccountCountry</con:name><con:value>NZ</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1577845980813E95E05307991F0ABF67</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP2/RET_2_concat.pem</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1577845980813E95E05307991F0ABF67</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b8ba87db-df08-4f36-8c88-c580bb3ec25b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ce61892-9d8a-4055-b161-e19938292410</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c50a4409-da80-4892-a2c3-07a22e674bd0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fd13479c-f25a-495b-8c94-31e5557a93a8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FirstUserCreate" searchProperties="true" id="a7d0b292-702e-40ff-90a4-ef36d931df19"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ffa25736-6083-448c-88f5-4e9436f23533"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("FirstFullUsername",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);

tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("XMLbody",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="aed27cc8-8c79-4d9e-8132-ef587e9d2068"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Generate UserName" id="78d945e9-8220-46fd-b842-7a0a8d2297fc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def today= System.currentTimeMillis();

tC.setPropertyValue("FirstFullUsername","stsapi_107_"+today);</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="2825a0d9-dcb5-41bd-bb1a-b37bbe52f5b7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="450937c2-5e23-410f-a8ba-5161e26540de"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml;charset=UTF-8" postQueryString="false" accept="" sslKeystore="RET_2_concat.pem" id="8bc0db2f-d114-4247-a104-856c66e35993"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/xml;charset=UTF-8" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#FirstFullUsername}</GivenName>
		<SurName>surname</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	 <Value>${#Project#PrimaryEmail}</Value>
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
       <Credentials> 
               <Username>${#TestCase#FirstFullUsername}</Username>	
              <Password>${#Project#UserPassword}</Password>
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:originalUri>https://qa.p.uvvutest.biz/rest/1/11/Account/urn:dece:accountid:org:dece:067A1CA8D78B1D66E0533E991E0AE0C8/User</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="76738226-3fd8-408d-a15f-4012852afee2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="43e98144-7a3d-4c66-a24b-46e423c50273"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRTL}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRTL}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
		
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
		
		int lastColon = urlStr.lastIndexOf(':');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 1);
		useridfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_USER_ID",userid);
		tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);
	} else {
		assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
		int lastColon = urlStr.lastIndexOf('%3A');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 3);
		useridfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_USER_ID",userid);
		tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);
	}
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" id="df7d7a6d-c6ab-41af-b23e-cc93fd2d2445"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("Username",tC.getPropertyValue("FirstFullUsername"));
callTC.setPropertyValue("UserPassword",tP.getPropertyValue("UserPassword"));
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7002/rest/2015/02/Account/urn:dece:accountid:org:dece:1577845980813E95E05307991F0ABF67/User/urn:dece:userid:org:dece:157784973C2972CCE05305991F0A0266</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_03101 - STS - DeviceAuthToken JoinCode - Full user created DeviceAuthToken consumable - P0</con:value></con:property><con:property><con:name>sName</con:name><con:value>2_P0 Test Cases</con:value></con:property><con:property><con:name>UserName</con:name><con:value>username_20130122_051451</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">157784973C2972CCE05305991F0A0266</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E512F62E62104344E0401F0A07994421</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn:dece:accountid:org:dece:E512F62E62104344E0401F0A07994421</con:value></con:property><con:property><con:name>FirstFullUsername</con:name><con:value>stsapi_107_1430973819090</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP2/RET_2_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:157784973C2972CCE05305991F0A0266</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1577845980813E95E05307991F0ABF67</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FirstUserCreatewithoutPassword" searchProperties="true" id="a1d5d91c-4415-4f07-9fd9-cce87a0b0016"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f0d4ccc1-1fc0-4f88-801e-8a65fff55b50"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("FirstFullUsername",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);

tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("XMLbody",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="57599345-6f2c-4476-abea-30176257dc06"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Generate UserName" id="9f397acd-9125-45a1-a54a-ed06dcf81ae3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def today= System.currentTimeMillis();

tC.setPropertyValue("FirstFullUsername","stsapi_107_"+today);</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="92932ac3-65da-47d9-b6fe-853eab34768e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="82c100a7-ff88-4cda-a18e-f363abb027d2"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml;charset=UTF-8" postQueryString="false" accept="" sslKeystore="RET_concat.pem" id="81833928-b150-4f78-8aa9-a6758657bccc"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/xml;charset=UTF-8" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#FirstFullUsername}</GivenName>
		<SurName>surname</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	 <Value>${#Project#PrimaryEmail}</Value>
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
       <Credentials> 
               <Username>${#TestCase#FirstFullUsername}</Username>	
<!--              <Password>${#Project#UserPassword}</Password>-->
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="92c642b2-e684-4920-b044-775cf4b75e46"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="2a46e31f-b90c-4b8b-956a-04296ad91290"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRTL}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRTL}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
		
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
		
		int lastColon = urlStr.lastIndexOf(':');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 1);
		useridfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_USER_ID",userid);
		tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);
	} else {
		assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
		int lastColon = urlStr.lastIndexOf('%3A');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 3);
		useridfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_USER_ID",userid);
		tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);
	}
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" id="3b68b33e-7f80-495c-8160-7e31d21c711f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("Username",tC.getPropertyValue("FirstFullUsername"));
callTC.setPropertyValue("UserPassword",tP.getPropertyValue("UserPassword"));
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E85FCFBB6A12B22CE0401F0A05994F33/User/urn:dece:userid:org:dece:E85FCFBB6A25B22CE0401F0A05994F33</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_16018 - STSCreate - Device:CS - unamepasswd - Requesting without Password - User created by node RTL - P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>6_STS Create - Node Role - RANDOM_PWD set to Y</con:value></con:property><con:property><con:name>UserName</con:name><con:value>username_20130122_051451</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E85FCFBB6A25B22CE0401F0A05994F33</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E45D0EC0720B7C4FE0401F0A05992ED6</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE45D0EC0720B7C4FE0401F0A05992ED6</con:value></con:property><con:property><con:name>FirstFullUsername</con:name><con:value>stsapi_107_1381393853304</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/soapUIProjects/STSAPIProjects_LP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E85FCFBB6A12B22CE0401F0A05994F33</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E85FCFBB6A25B22CE0401F0A05994F33</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserCreate" searchProperties="true" id="2d5bfac7-a0ff-43db-aacf-677ddedcb463"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6bca940d-e659-438a-bade-8ba0d0809a66"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("SecondUserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="1b9e090e-a64a-4959-abaa-4aede535f577"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));

if (tP.getPropertyValue("versionMinor")!="02"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Generate UserName" id="d08d3cb6-0c52-4d9c-ad51-462b6fccf888"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def today= System.currentTimeMillis();

tC.setPropertyValue("SecondUserName","stsapi_107_"+today);</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="5f6a28cc-9888-4f83-8dd2-31b2858cb86b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="1edead58-7389-4db1-bd28-4a120fbce584"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml;charset=UTF-8" postQueryString="false" accept="" sslKeystore="7600.pem" id="6327a4b1-0a51-4593-a198-a230dd7eee55"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml;charset=UTF-8"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#SecondUserName}</GivenName>
		<SurName>Ganji</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#PrimaryEmail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>UK</Country>
	</Address-->
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
      <LegalGuardian>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#SecondUserName}</Username>	
                <Password>${#Project#UserPassword}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="5f24f7ec-76c3-46a5-91ba-6e2417c1f830"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="33b5086b-eb93-4a95-8f7b-2c9293a2aaa6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRTL}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRTL}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
		
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
		
		int lastColon = urlStr.lastIndexOf(':');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 1);
		useridfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_USER_ID",userid);
		tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);
	} else {
		assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
		int lastColon = urlStr.lastIndexOf('%3A');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 3);
		useridfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_USER_ID",userid);
		tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);
	}
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" id="0110b594-9fc0-4e7b-8385-962747ab4d77"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL1",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("SecondUserName",tC.getPropertyValue("SecondUserName"));
callTC.setPropertyValue("UserPassword",tP.getPropertyValue("UserPassword"));
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D3DF73AA839B4C42E0401F0A07996A55/User/urn:dece:userid:org:dece:D3DF7BAE6D161DAEE0401F0A05993EE0</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>SEC054_COO_DelegationAndUserStatus</con:value></con:property><con:property><con:name>sName</con:name><con:value>ISC_TestCases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D3DF73AA839B4C42E0401F0A07996A55</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbZcuI4FH3vr3A5j5SRvMXgClQZSLqdzjYs6aRfphRZgNJGJpLsQL5+JBMTICRD54GidH2XcxedqxOBZqkTRkIQLmnGjLjXMv/1m2gceARa0Euw5bl+w2rabtMaB4nnNhzoPuDENGIhchIzIRGTLdOBtmtB23KcoW2HEIa+XW/4zd+mcUu4UK6VSh2axmKWMhGWYVtmzlmYIUFFyNCMiFDicBBdXoRKM0QVJrN9skJZBuTtqZTzEABcTwgmaYrrOJuBE7Clc5KIcEAnDMmck9eYiWiZr7bPz8/1Z7ee8QlwIIQANoHSSQSdHJntb5UxSWI2zlbnLmIZoxil9AVpUJdETrPEiNJJxqmczj5wbQMbatcWWWAL2x47MsFbgBLdgZ62QHKBLDFFduWsT8aEE4aJMerHLfPosA6ubIccMTHO+EzsnP8OEmEFSbM5SSxRZVahO9zjnnK1TwgOY4bTXNCCXOkxmSNMhHHDyZguLqhQw5cIo2y/sRDVhBH8Ny05AZs4FWywpzI9OiFCfqVfm71aeblFaU7ay+K68PwR7Y5ui+ThInHEUzPrBy8vx8+tEsKm8grUutWv591BXc/Vq9Hw9M51zsWDH0ww/qdZu+83/pz/atr++dly5A+HsON0IEW1u+Jq3K31US3+6WV2Jyq69/BieTkS7Hv3B7DTe/j9/hvp1/rp3Ju/5N3jm0jYSXQVP+a0EdgXBXNrix+/8pH87i98zEbcTqcvvfvlaBo7tcYV988Hp3338Yr/PnsYxNPbbwOwOM14B6Rg5k3zYsjjRustp80ctoUVHQzyh0eCZXXUoxH3jDPVLyQ/pxYtoYk1LlXDueYnIQmTZltbaVoJc0U+NAlVM1fnnts7C9woaqif1/WcU+hB+wxGMGg2jyPfr/hnhWIHYjdjY6pjaYZdzc/nAPEsFIQlhFtFluMpEeYnHntIIiNmfXUxMibIMFMM3uvaju9FXQcGp14Q+G7kNvxGxw/OgsjuHndM4yqT1+yaR2NJ+DZ7e1vs3SeYzinRFK/nXKhBF1KV5AkVuUzteoHqjORqCXDNw6HjNXwg6GyeEg0YzLIkT0l9Pp2XBQJi9e9YCItSGhxDWF7AD/Pb/VaVQukkVCsInUyHqHaSPXvIqzL5OONgM+PKfZQnVN8zVVfJKV4h2f70Ni56TtazolKyK8xr1YNNna+bul839b5uCt+bgk9KCHa7t46UFHQjbrX+1UZTnNeuhu8J1Z/qeVHk5bgFms+5cg9sAI/BgOBckfJymP0hDKxdgIP24Rr1TuS1fBtfLqdsIJEkM3U5jPJ4wGNoQIR+DMXqci8OfWlthVR1k2Qh98m6qXozacSfPqtwiLWeEt+ov+eMvyW+z9dGHJWnegFJyib6pLff8oOpwJlySxVdZ3zT+T4H+4JvC9dFXmORapoeckk+/mJoHm6ZCOMsZzLumaVgczeUOOVyTsI3pXduyv3z+qBYiA8fFHeXFwPF0jNkrnXp/ytbtBwXTJSVoCWWlrlQb2MVnE02dtErwP3rqNn5bB1tZ9J+J34v2ajp7n1o/wc=</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D3DF7BAE6D161DAEE0401F0A05993EE0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3DF73AA839B4C42E0401F0A07996A55</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StandardUserCreate" searchProperties="true" id="7b9b5dd9-a3af-4811-94f6-7df976a8779d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="14711e7e-01a9-422e-a8cf-7d41d6fca41a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("StandardUserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="176b366a-621c-40b9-84c6-dd0e94e42ac7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Generate UserName" id="3ccf4f28-b2a4-40c7-9785-b1ef1372dc71"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def today= System.currentTimeMillis();

tC.setPropertyValue("StandardUserName","stsapi_107_"+today);</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="a70141bd-fbb2-4fd7-9834-4d2d3a42db9c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="d024ddcc-78a1-4787-a658-2416b69415ff"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml;charset=UTF-8" postQueryString="false" accept="" sslKeystore="RET_concat.pem" id="4e6757a2-134d-4355-8a37-95b1c82d7e0b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml;charset=UTF-8"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:standard" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#StandardUserName}</GivenName>
		<SurName>surname</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#PrimaryEmail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
      <LegalGuardian>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#StandardUserName}</Username>	
                <Password>${#Project#UserPassword}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:originalUri>https://qa.p.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:0794ACA12FED25CCE05305991F0A7E4C/User</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="8f050400-7862-4a4d-ba1b-9a0277755c87"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="52908be4-1dec-4249-b9c9-01827b46fd06"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRTL}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRTL}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
		
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
		
		int lastColon = urlStr.lastIndexOf(':');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 1);
		useridfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_USER_ID",userid);
		tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);
	} else {
		assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
		int lastColon = urlStr.lastIndexOf('%3A');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 3);
		useridfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_USER_ID",userid);
		tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);
	}
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" id="0075c47f-9a2b-4722-bc10-c1dbdf91654e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("UserName",tC.getPropertyValue("StandardUserName"));
callTC.setPropertyValue("UserPassword",tP.getPropertyValue("UserPassword"));
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/2015/02/Account/urn:dece:accountid:org:dece:0E19292745A21128E05305991F0A2545/User/urn:dece:userid:org:dece:0E1925F896E41120E05305991F0A2CE8</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_03106 - STS GET - DeviceAuthToken DeviceString - Standard user created DeviceAuthToken consumable - P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>3_P1 Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E4D562F749DAA667E0401F0A059948E2</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZrb+I6EP0rKPuxCnlAgEQFiUe7pe8F2qX75cp1JonbxEljJ9D++rUDpIRCL/dKSMiT8ZkzDx/7lKEoNJ0+Y5ByEtPaMgopcwprV8lS6sSIEeZQFAFzOHam/Ztrx6zrDtpsUWrjUVf5p4EtpOtNrFo2BrVpea5q62ZLbRtuw7OxiTFuCVfGMhhTxhHlXcXUDUvVTfGbGbojfg293mobf5TaI6RMYAuXuq6sSS1ZVwk4TxxNWywW9UWjHqe+Zuq6oc1vrqc4gAgpvdNVRkWgtLf2x3UXMIQhruM40k61is+py5wp8SniWQrrWO6hWLqm25rwcRnxfyjlXnDH1IuL5RDRmBKMQvKBZH1ugAexW+uHfpwSHkQHkzB0CazCEqvYaNIfilaldiRQhWHKkMoCZKyxJuBBChRD7WEy7io/jutasXWWIsq8OI1Ydfnf+ADNIYwTcFW2SWtN7XjAPZXqnQJ2xhSHGSM53MphTRAGtu4m4OOhavcpeGR5TZgY0CWT7LRtejvLVTVGxAfG/0+DtpqzAnlEYQa9Dpt6zciaP3c+2oNLv8PNft7+mRN78totCGw7F4aytavlzlCWQ7TaMW8v5s3x06X3+nEz86cBvIyb2e+BjxLv4fIu6D9n55N5fgFzf3E9+kPuJr8HjfYSd15RRGx2kk5+abcD9tR/+Xi4Qv0AXfP2xR3kgzFCQfrESUov78LpaxicjH7xC3r1/hjez6N252KIfrZOwqvXZOBFcO4+2Cmys6YOLff66a3xoaEEBmed27x1NfRt993DuFums8W/atuc+Wn2/AKYb5ZyDMaj2rnoEuLfi5m0EFf1ClcnkeLDOFCu9OQuqR1OJuSOuI7o4Wqtnxm2aVu2cXZmGUajc6ZbDd2ybeNc7xvWsL0RmRWLHYrDmHpExpKSuxqb7wniyGFAXUjVPM6E0jHlG8QR4qg2phNxCGLKYBYLeTY/Xvz3ZvjieS0riQPb8N4W4OVLpXYb8zt6l/Y9DmlVkhsVSZ4AJgkBqdtyrJmYa8ZFKd5QnvHQqOeoTiETyp5KkXXMZsfSGImSECRRLYrdLIR6EiRFYTS2+jdVhFlhnZzNisN2MK3db5sKCB+XSAcmcxmA6CLsuVvMTSKHE25tJ7yB72cukedKlJOnBK+YVD99Tokcj3JEREYbyqXnrqGCqu0mVAZyc4LLOS9vayHi4tj3Nu14Q/W3epbnWdGAtpS3VMBrMkVNN7Up4EwI0/ssfgWqlSjaUbdASXwneGmvUsx4QKcccYjExNSK5RHX/hSYvPbHYtKXx74pKiFF6Tgs+T7bMBRPFsn421cNdrD0E+Z78beIU/ezY3uwtuKIPMWtzwn15UreAO8H5gLHApYI7YrTbfB9APuCV41lkUsuXAzUc8bh8JeaFKWugjCOM8rHI6UwbAtlwZO/J+B8On2BKbS4fJyRf3+dqaQYAQziScdIgS/vWEceAepvie066Fe9NdtNq28ahlnRW9NqWmVRKux6X8xfLVt12p3x3l8=</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E1925F896E41120E05305991F0A2CE8</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE4D562F749DAA667E0401F0A059948E2</con:value></con:property><con:property><con:name>StandardUserName</con:name><con:value>stsapi_107_1422872032843</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E1925F896E41120E05305991F0A2CE8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E19292745A21128E05305991F0A2545</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="BasicUserCreate" searchProperties="true" id="a5eb863e-6c76-447a-a91b-fb15d32e063e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="deebf1bc-6af7-4d4a-b315-a0f7f532c1cb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("BasicUserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="d36f0459-c356-4004-9f5a-481573272131"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));</script></con:config></con:testStep><con:testStep type="groovy" name="Generate UserName" id="7d10202e-4416-45c3-913f-9c758310e907"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def today= System.currentTimeMillis();

tC.setPropertyValue("BasicUserName","stsapi_107_"+today);</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="68187eec-47be-49ee-b437-86ebe4a3976e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="7d4add3d-d173-4a01-8f11-83dce4b32b5b"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml;charset=UTF-8" postQueryString="false" accept="" sslKeystore="RET_concat.pem" id="fe1e9328-dd1a-4e80-b5be-9ee65eb43f4d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml;charset=UTF-8"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:basic" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#BasicUserName}</GivenName>
		<SurName>Ganji</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#PrimaryEmail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
      <LegalGuardian>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#BasicUserName}</Username>	
                <Password>${#Project#UserPassword}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:originalUri>https://qa.p.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:07943FA348A779AFE05307991F0A97F1/User</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="fb357b43-7c12-46e3-877e-f7b06838c581"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="9355a6d9-b96b-429a-abe4-30314ad4ea21"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRTL}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRTL}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
		
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
		
		int lastColon = urlStr.lastIndexOf(':');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 1);
		useridfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_USER_ID",userid);
		tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);
	} else {
		assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
		int lastColon = urlStr.lastIndexOf('%3A');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 3);
		useridfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_USER_ID",userid);
		tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);
	}
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" id="c89f3562-d200-4175-a2a6-a460c3a183a8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("UserName",tC.getPropertyValue("BasicUserName"));
callTC.setPropertyValue("UserPassword",tP.getPropertyValue("UserPassword"));
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/2015/02/Account/urn:dece:accountid:org:dece:0C0D63A291331918E05305991F0AC78A/User/urn:dece:userid:org:dece:0C0D9E7872371585E05307991F0A43FF</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_03107 - STS GET - DeviceAuthToken DeviceString - Basic user created DeviceAuthToken consumable - P0</con:value></con:property><con:property><con:name>sName</con:name><con:value>2_P0 Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D8D0BEDF02E3C4F5E0401F0A07997056</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynlMGd8gxq5AlYdLwhCSTMhkZ3jZEnIblNiSY8lA+PqVDHgwuSy7Ty61W6dPX3SkS46S2PYDziEThNHaOokp9wtrW8sz6jPECfcpSoD7AvuTYHzj23XTR/stWm3Ya2t/z6AJs7CJ9Mhuunqj4Zn6DLtNPbIaLXAbod1oOdKV8xyGlAtERVuzTaupm5Zuuo+m5zst33TqrQt3qtWeIOMSW7rUTW1Has3b2kKI1DeM1WpVXzl1ls0N2zQt49f4ZoIXkCCtc7nNqAiUdXb+uB4ChjjGdcwS49Ko+FyG3J+QOUUiz2AXK/wslmmYniF9Qk7mZ1q5F8IhjVix7CLKKMEoJhuk6jMGsWBhLYjnLCNikXyahGUqYB3WWMdWg55pRpXaiUAVhhlHOl8ga4f1ABFkQDHUfj4M29rZaV0rtj5miPKIZQmvLv8bH6BLiFkKoc73ae2onQ74QaU6l4D9IcVxzskSbtWwpggD33UT8OlQtfsMIrK+IVwO6JordsYhvaPltho9Mgcu/k+DDpqzBXlCcQ4d1/VY/PvqfPXL63+bRrkYdF+J9WMEz412QeDQuTCUrd0uj4ayHKLtDnF9Tp18sxx5z6Pr8/thP5iY3pUzd703dzDaLF7G+CWat+6eevRH83wKy9k9mQ7cG2vF6MXtFG2C++fvj3E+ju4Wt9c/kzC5vRuna29DL/4KFteT3+NZPGJTZ95w3OssD6dTYoZ48Pw9iJ82P7+P8mw0sZM3m0GMBfPc4A71c/i9fHW6QeJdxUNYWr3Rt9QYmO0ynQP+Vdv+zE/y2TNgsV+qMRj2agPZJSS+FjNlIaEeFa5+qsSHC6BC66hdSjv8XModCX3Zw+3a7Jq9C8fqe43WwGoNzL7ZdMym51kDM7jod729yGxZHFHsMhoRFUtJ7nZsviaIE58DDSHTlyyXSse1LxB7SKDakD7IQ8Aoh0cm5dnC9OWCvLaizeLt1eLzFHM7tWATEq12y8QdvcuCSEBWEWXLrojyA2CSElDKrQaby8nmQhbjFS1zEVv1JapTyKW2Z0pmfakdTYOTJI1BUTUSFuYx1NNFWpTG4NuvrSPMC+tD/7E4bp8mdvxvXwPpExLlwFUu30D2Ed7dLq7f3CfyecLNw4T38EEeEnWyZEFFRvCWSfXXnzlRA1IOicxoT7n0PDZUUI3jhMpA4ZLgctLL+1rKuDz4nX070vprPV8u86L+rtK3TKIbKkPDtI0J4Fwq09sjewFqlCDGSddAyfsodmmvMszFgk4EEpDIgakVyxPu/Qlwde8P5aivT31UVELKyglYi49s3Vi+WRTjL5812MfKT5rv5WfFsvBPwz7AOogj85TXviB0rlbqCnj7ZCwwk7BEihfLDsE/AvgoeNVYFrnkIuQ8zXIBn/+pKVVqawhjllMx7GmF4VApC57iLQX/j9M7mEKMy9cZ+ffnmU6KEcAg33ScFPjqkvXVCaDzA7XdBX0vuIHtWY5jeVbrUHC7bisoi1Jh13lnfm85qNPxjHf+AQ==</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0C0D9E7872371585E05307991F0A43FF</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8D0BEDF02E3C4F5E0401F0A07997056</con:value></con:property><con:property><con:name>BasicUserName</con:name><con:value>stsapi_107_1420623662652</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Sanjeet\GitRegression\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0C0D63A291331918E05305991F0AC78A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0C0D9E7872371585E05307991F0A43FF</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserGet" searchProperties="true" id="2251f4a3-9cc5-4788-af2e-6f201ca61541"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a69ce23a-84f8-4824-858f-69438628009a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="0d40c980-95be-4935-a474-c8fc91493d39"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("UserGetResponseType"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="bd63bbba-0a13-4630-844c-3fa360864b88"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserGET");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserGET" id="87838535-ae3e-40f9-aed8-fe264a3458bc"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserGET" mediaType="application/xml;charset=UTF-8" id="86860311-fe06-418d-9e53-0c4d81aa0896" sslKeystore="iscportalcs1.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="2c99cc43-d25c-4561-8d48-d510737370ef"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserGET');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="dcbad7f3-9b19-46f3-83a5-6d69c50794e6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 

//
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_14015 - STSCreate - Portal:CS - unamepasswd - User created by node RTL - P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>4_STS Create - Node Role - CREATED_BY_NODE_OID</con:value></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DC2F5A7DD002454AE0401F0A0799394E</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DC2F5A7DCFDE454AE0401F0A0799394E</con:value></con:property><con:property><con:name>SAML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADC2F5A7DD002454AE0401F0A0799394E</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADC2F5A7DCFDE454AE0401F0A0799394E</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\STSAPI_Projects\iscportalcs1.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserDelete API" searchProperties="true" id="b47e87c1-c91d-4e2e-91f3-683559884355"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="54ae4451-28fc-4f9a-a450-8987cca7cb9c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="db4290f2-7619-433b-8c54-1a3f69a9a5d9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("UserGetResponseType"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="efb2e4af-410a-4f54-862d-6a91c36620f0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserDelete" id="20f0f6ee-d29b-449d-bf3d-114e2e8f0f6a"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="DeleteUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserDelete" mediaType="application/xml;charset=UTF-8" id="86860311-fe06-418d-9e53-0c4d81aa0896" sslKeystore="7600.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="e223475a-b83c-4ef1-9e35-8d057d69a129"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserDelete');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="ff0fddac-3c42-49ed-89e7-e4cc6a1121f7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 

//
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_ 20060 - STS - Verify UUID status for deletion of user</con:value></con:property><con:property><con:name>sName</con:name><con:value>STS Create and SAML Exchange - FUNC</con:value></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D8410B6358BACFE4E0401F0A079949A2</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D84111534290CF09E0401F0A05993165</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdbc6JME773V1juZcpwUBSsTaqGk8EICuLx5iscRkARlAFBf/07aHQ1m+y773eRMtN09/ThmZ5nfmJnG7IdgDFK0iCOqpr8Uvvfcik4kKGFOuRdrt7kV3ydb8NVHdItttGE7rLN8rWqhnGGtAinTpS+1FiaadTpRp0RbJrrMHSH5p9pprmoVScowcQ1UXmma9ViG0a4c972pZYlUSd2cIA7kbNFuJPCzgjo/Q7R7DjXmGqvPy9RnjdMXv003XUoCj67CKIwhM8w3lI/qQedny7ujAIvctIsQR97uvil9mGb5/lz3niOE49iaZqmaIEiOi4OvB+118rVGLlatIova8mJ4iiAThicnDIoHaV+7FZB6MVJkPrbb1wzFEOXruuogHXINKMfNerXBufo/tLTQ5AJdurYd5irMwutUIIiiKpjS3up/fi7Dl5s7cSJ8CpOtvjT+r+FhKIDCuMdcuv4mtk1ur/3+EW5Xn8i2NEiGGY4OCCjhMnOgQhXhwlaBUU/wAR8Lq6e218t8BVhCP6Xlvyk7uMkYVNfVEYOPITT/6df9726eJk4YYZeJXTaWUUYsrqreys+122DPq4ati7OX84h3Ctfgrq1+mP9Gag3XH0Y2eyhHYUJGI7XkmdjRkG9p3i0VpcRZJTWZjc1EF710CyeNnIF+XNopCOvBVR9zMhyUzOTUW8Om4YTHOZupanvWr54yNuekQscY/TBxlnsVxuGkYXGbLxuoWKPCqln4pBR33mwXPiZSzVGRwOfDhMv3DlPm5YSu7TLwoqaSeO3bcHq81HIbCTMbM2XXznd51Dm9Y6O5yTL/2ccLchO6twWUjkpVuR4puhV1zQ5O0kSOI48kGsi8MjfGhiit9n7m6Ar5LQITFMFsiSGa6Wvg00XMGNF9HVpMtEL6QR6omdMiKFdAeFC1C0ll/O5PDHNNyX3bbc7OS67YbY4KYYO8NlY8nXFUiayZSu6DuKLrNDlZbdY6yM918y5XCEOZKXYndyukKJuEUBW4/QRx85HXLaYTYhcPfa3xmFpK6Eu6V1ptO+OtGVDNpUesOZTyKoZsT31t7u4Mh+Ld0a9HVoDpOY02ROcdHtDoDRmDdlyzjL7UaZr3Z5u4lwyz1l1K0rem4xPv2ohibrkbpVCscHwUgtoS6pBL2Y97Ey5SLdALntn43cldwfXQHSTzivSpVZ9JbcUa2youqXlCjjLZCUP8ZI1/GXXP8CGWfRssL5vjGQqUzUi3yPrAI/cvuJ0VbDcThjYsHwYcIEzi3NvweeyOe+9xwuNuDGAqYiiCUhANChTI/UXQV+ccINdILAB6q/UeIv8pKIz8fvmcCpoPmgMvKEx5eTVpj3sBsOG4/qUFkJ23dgATUPuO+ObjmvNKUuOglNr8D6eoSCZn1KDM5lWwHMVa5qNZ3Ictt232Xz8/lTMoWkPhqPxdHgqCmO/5k9h+jYQ38gJ0mVvYCA0xPCJoh1VtHmZk+Zva4KnlUUjrgI8XQSgu/Y8JSAAFt/WFxC+WbpCwAt0Ke9KU6k7At3uk6KJsmmuVJ8Zwu4kGzOGriluSMp0nM+ssLKQRJl0inami92cVemFDdyzM7OpqJ455p56M7QwjdCepCDfTVYRw9Ddnfm20nMP6iUCXC0fieQUiZVMA2NnsOvRxfukRTN70w17IwGMG8WI3RQD31scN95iQ5oyvzs6cxuEE/sOYxqB2LRi2oqlA/5y3gpdGzesEG6L3XILC9kmPTsbx7aoWKpJjwtZBu8XGbYBW+D5SVnrknK2r4BCdwgsDsuZj+eREQxsJSOgze7gsl6y9L9irIRY5RFjewmY4DPGlAvGFLDaP2m8zGCuJe3wNPfErrI325N+T9jR5qy/qYhPKuWlQdgcRHxuvz9NmWPe9tfmdCposi89Rau531imIu2coIl6m3Y3sDZy1GqGR72vm9w4oMIjvUb7HPcrhsZESiM9qZSQZE/idhFsT6dGkx1vh6PsoI2dd8wc/eV+KuTr4VuLopLukTu1FwdTncXw4x75PCRvwssYpe4H7MMEvnKvUbZcI5hel+U9rMlVlVyOTvpnHldKAre+Oqt2diUZxCmK0tpraVVyuE5GmF7gdsjNeVnLfJOhxVaD40UgqUpToZs0o9KAbgtCUwDslexdovgUohRHq6Dcq6Szl8v6zwHCbQejyEVJ/RBn0Ee49gePZb2qWmQRFhJHGNkxocu8wLRojm+3ZJXmOb4J2BbbkhRebQkcpzSFWtWI00E0SMAqRckjVeYfqLKFYLALUMmnS1KBCavAKSnJ3jlkacg8H5znCGWEcScl6e2wTZ6jcLDdhagMmNrGbhai552/OxeIwpdftu5AfJa2WzR9Zjvf5vf527UURMcNSgVcJiMi0k70mfTTQoe7ZvJtxgxzn/HVPcjcoCQ1pK5pEsBLJI+ffsGlxMkNK2VK15hvqp8FD26pzxnddnIPAbwh/vYmIpSakK7Xa0P2zvP+OTscsnML2iWhTIh7iqHoFjVCMCOs8GjHGxRRNxfUXxHyW9Sfdr7JH+PLUj8apeQ0bwlgquflX7zGRgiXrzGNAL7426few5akbikq0q9kUkgebWXEf3zXwQ4s9Yh4SH7yOHF/tesLX3f7kDzL8RVEXrkq6ffxG1TAmLgNyAiLk3vnXzn4avNH4a3It1hSgqZllqLvv1TL2fRScyCMsyjV5NpZcD8vz3Gmxx3q/FL6zc2ZAH+8aAr87YtmpvdHZHJtndpNN/h35XpwhgtExAoH51heagV5nJPNI+9uPn8E+HlEMwxH7iGBllRauI1oThAaTIu7FfAhk9ffxL9L7mr6+Ty8/gM=</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD8410B6358BACFE4E0401F0A079949A2</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD84111534290CF09E0401F0A05993165</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SecondUserGet" searchProperties="true" id="eb32e352-73c7-4aed-9feb-e21e91f8eeec"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b0e4d753-d19e-4e02-ad29-683de11132ac"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="2ff54989-def9-448f-9c9c-6ce788f58920"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("UserGetResponseType"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="3ec9b839-578c-4f78-b730-75e71e4ca6cc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserGET");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserGET" id="8e8ce0a8-a2d2-4906-9845-1e99f89b43ee"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserGET" mediaType="application/xml;charset=UTF-8" id="86860311-fe06-418d-9e53-0c4d81aa0896" sslKeystore="7600.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="c40154fc-e323-4d9f-bf07-8b136cd79054"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserGET');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="c5ee31ee-72f0-4009-8efd-7f8077e996ef"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 

//
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>SEC054_COO_DelegationAndUserStatus</con:value></con:property><con:property><con:name>sName</con:name><con:value>ISC_TestCases</con:value></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>754</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:securitycontext:unauthorized">
      <Reason Language="en">The request is not authorized.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/06/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD859377B3AB642F1E0401F0A07996476/User/urn%3Adece%3Auserid%3Aorg%3Adece%3AD3DF7BAE6D161DAEE0401F0A05993EE0</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/deceerrors/error/error_response.html</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D3DF7BAE6D161DAEE0401F0A05993EE0</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D859377B3AB642F1E0401F0A07996476</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc6o6FH7vr2DoYwe5KzLVGRQ9m27tDW3teTmThqhpMVgSFPvrd4KFqr0cd8cHJ4t1+dYl38o5BYvYcD1KUcpwQqTAb8n/Wc7UQU7dVBp1W1MsO4IKqFuR4mgmaEATmo4DZCmgNEMBoQwQ1pINTTcVTVcMY6TrrmG4mlbTmua/snSHUspdc5WaJkv5IibULcK25CwlbgIopi4BC0RdBt3QGw5crumCEpPcPt+iLAKm7TljS1dVYS1CEMUxrMFkoZ6rezrnEXVDPCOAZSl6ixnRlvxmu16va2uzlqQz1dA0TdWaKteJKJ6dyu2T0hhFAZkm23MXkIRgCGL8CgSoIWLzJJK8eJakmM0XX7jWVV0TrhWUQwXqFjmV1fcABbojPe2BTClQ6BzopbNbNEUpIhBJ49ugJZ8e18Gt7SgFhE6TdEEPzn8HCZEVipMlihRaZlaiO97jJ+VqnyPoBgTGGcUrdCnGZAkgotJ1iqY4H2DKhy+iUtF+KaflhCH4Ny05V3dxctjqJ5Xx8QxR9pN+7fZq6+UOxBlqP/z6nYXj6zAJ+q+bmZ114coY1J+Cs8G4VUDYVd6Cqlr9dj4c1Gqu3ow6F+a953XDs+xsNB70Lif5Kp+ouhVmz3ik3vduiOM8NUbr6wHpGtaF/rDkH1b3w9fVIKRXdv912lS99aXdX2eTk7v8lulZ3cx7zX8ewrrvP76Or3D/yoPj5195c3MzGF1Not8XsX1pvIy72o1xz2NGg2YyZBf3NJ7Hk8adNSE3r5vGSY7Di7PNNL6Mh3MK9ZclDVrvOe3msC8s6SDMHp8QZOVRjEbgS33eL8C+pxYhwZEyLVTdpeAnyhBhcltYCVpxM04+OHJ5M7dn3/T7jY7Xq/t6Xfe9Xk+zNL2veZrdbJr8VPLPFsUBxG5CpljEEgy7nZ/vAcKFSxGJUKqskgzOEZW/8egDBqSA3PKLkRCKRgln8F5Ha3S6um45dafT03y76zni12/4RtcwbVm6TNgVuUq9KUPpPntbe+x9iyBeYiQoXsw55YNOGS/JC1hlLNZrK1AjKONLIBU87BqWY6sUL5YxEoDVRRJlMaot58uiQCrd/hsKgLSQNuqaVlzAL/M7/FaWgutEWChQkUwH8XaiD3tId+0yk68zbuxmXLr3sgiLe8brylIMt0j2P72Pi5iTalZ4SnqJuVI92tT4uan5c1Pr56baR1P1mxKqh92rIkUrvBO3XP98o3HOa5fD9wJqL7VstcqKcWsIPk+5e1VXtboaIphxUt6MkmdE1MqFetQ+rFAfRK7k+/gyNichAwwt+OWQiuMRj6EQUfEYCvjlzo99ae2F5HVjKGefyboxfzMJxN8+q6ALhR4XX/O/dZJG7+36xNdOHJ4nfwExTGbiJLbf5oupgAl3izldJ+mu888cfBZ8X1gVucLC+DQ9Zgx9/UUSPNySAYRJRljgy4VgdzcUONlmidx3pQ9uiv3z9qDI6ZcPislwEHKWXgC50sX/r6zgYlwg4lYUF1hacs7fxjw4me3sojeAH9aR6XmO2exYXcuo1lGj2ax7tl0VcC+T9gfxR8lOTQ/vQ/sP</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3DF7BAE6D161DAEE0401F0A05993EE0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD859377B3AB642F1E0401F0A07996476</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateTOU" searchProperties="true" id="39961ef0-992c-4063-bee7-6809629c7d6e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="91fd30e0-5a89-467d-a9d9-358caab53951"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="904140bc-b69c-4db9-ae4e-e120766dc30c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));

if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:TermsOfUse");
}else{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:TermsOfUse", "UTF-8"));
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="fd351155-b0d2-43e6-9bec-6eae29b56be4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="3f42b77c-29be-4399-b13e-7c3920a2ef35"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml;charset=UTF-8"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">    <dece:Policy>       <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>       <dece:Resource>${#Project#TOUPolicyResource}</dece:Resource>       <dece:RequestingEntity>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:RequestingEntity>       <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>       <dece:ResourceStatus>          <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">             <dece:Value>urn:dece:type:status:active</dece:Value>          </dece:Current>       </dece:ResourceStatus>    </dece:Policy> </dece:PolicyList>]]></con:request><con:originalUri>https://qa.p.uvvutest.biz/rest/1/11/Account/urn:dece:accountid:org:dece:067ACA3ACB5F24C6E0533D991E0A6B11/User/urn:dece:userid:org:dece:067ACD38C14A1F92E0533D991E0A5A0E/Policy/urn:dece:type:policy:TermsOfUse</con:originalUri><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="4908f367-6ea6-4247-82e0-ea3cb0840b6f">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_TOU');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="acf17b36-bd54-4220-bb50-2b54430c47c0">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYAssGB+wKVJlLZpwilwGSTeZlS5FlELElR5K55OtXMuBgAll2n1xqt7pPdx8d6UrAJLY9XwjMJWG0skpiKrzc2jYyTj0GBREehQkWnkTe2L8denYNeHC3xagE/bbxdxOGoOk27SqAqFFtRJFdhfVXtwoQdOt2E1wqs3IVIsMBFRJS2TZsYDlVoLY4E9DwGo7nNGt2w/5jVJ4wFyq2cqkBYwtqJdrGTMrUM83lcllb1muMT00bAMt8vh2O0Qwn0OhcbSrKE/HO1h/VQoxwHKMaYol5ZZZ8rkLhjcmUQplxvM0VnsoFTOCayicUZPrDKPbiMKARy5c9SBklCMbkA+r+3GI5Y2HFj6eMEzlLThZhAR24ileoiqwG/WGYZWhnBioh5AJWxQxa21gjHGGOKcKVx1HQNn6cN7V864RDKiLGE1Fe/jc8mC5wzFIcVsWurC208wMe6VTnCiMvoCjOBFngO03WFCIsttPE6PxQlQeOI7IaEqEIuhIanbkP72C56UafTLGQ/2dAe8PZBHmCcYY7IzJ4eXnyW4Pl9a+6S6yHWL6xleOH0Us7B7DvnBuK0W6WB6QsSLTZMfDvSfzi390LEiKHrely1K0//ZWGj+lF8B73RkPr5ndy2XNvk9i6Cx/u4PjmtXvh/umLXm9ZjyUaPvA5FTe3wVy+OFkye/bn4fz14/cd7brNC7u1GN60gha3Ug56ph+/TZboeR2NV4+D5Nc0jKz053oeZD3W7bN0OXoeP/3MqJgu79cT3Jw8rpPbyJQfY2Av20U5e/jLtt2ZH2evc4zkbqlpEPQr12pKUH4vZtpCwmqUu3qpFh8hMZVGR+/S2uFlSu5I6KkZbtZg4AAXWMDpdS2n7ncHwKmro+Ra18B364PWTmQ2KA4g9hiNiM6lJXdDm+8BosQTmIaYVxcsU0onjG8i9qGElYCO1CFgVOAJU/IMW68ruyFiKyGuxaPYpfP3NLQvuVG5Y/Ke3nM/kpiXNblZ0uQRRiQlWAu35rVQxBZS9eIdLjIZW7UFrFGcKWnnWmU9u9FyTEGSNMYaqZmwMItxLZ2leWdMsfkqwUEit44Gk/y0nazr8N+uBconJNpB6Fq6WI0RH7lcGrtCThZsgf2Cd+H9LCT6YKl+Sk7QBkn51ydNND8KjqiKdpALz0NDKap5WFCRKFwQVBC9uK6Viqtz39mN4x3W3mvZYpHlA2hqfeMqvKlLNIFtjjHKlDKtJ+wNU7OIYp51DRTAD5IX9jLETM7oWEKJE8WYSr48494fY6Hv/UBRfXXuo6KUUrVO4pU8ZuvF6s2iEX/7rEEe0n7K/KA+S8bDz4kdibWXR9Wprn1J6FSv9BWwPsELxFRYosSL8f3gxwIcS142Fk0usEhFqNdM4tN/KlqV2gZEiGVUBn0jN+wrZY5TrlPsfTp9CZOLcfE6I//+PKuSnAIIqzedIHl8fcl6+gjQ6Z7abpN+FVzQs5vNS6fu9vcFt9+yu0VTSug6X8xfLXt9OuR45x8=</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_32001 - STS GET BasicAuth - Device - Username in 'active' status - P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>3_P1 Test Cases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E5090105CB153ABE05307991F0A93E8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E50900C2776539DE05307991F0AD82B</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/2015/02/Account/urn:dece:accountid:org:dece:0E50900C2776539DE05307991F0AD82B/User/urn:dece:userid:org:dece:0E5090105CB153ABE05307991F0A93E8/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE45D4D6F9265AED6E0401F0A07991A6C</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE45D4D6F9253AED6E0401F0A07991A6C</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E5090105CB153ABE05307991F0A93E8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E50900C2776539DE05307991F0AD82B</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateULC" searchProperties="true" id="26f30e1c-ad6c-41be-9845-9f5285f50f79"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="5de01021-f0f4-4885-89e6-3cd88f0c5311"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="5fd37773-f15d-40ca-a935-8278d49778aa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));

if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:UserLinkConsent");
}else{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:UserLinkConsent", "UTF-8"));
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="6e87aa22-f523-4de4-ac8c-810adc75b0ed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_ULC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ULC" id="0a6bfcbd-1986-44ac-b364-204ce745b9f0"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ULC" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml;charset=UTF-8"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:originalUri>https://qa.p.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:07943FA348A779AFE05307991F0A97F1/User/urn:dece:userid:org:dece:07943EFBB2B675CBE05307991F0A44EE/Policy/urn:dece:type:policy:UserLinkConsent</con:originalUri><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="cba2f821-475f-435d-9ee2-0894ff489edf">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_ULC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                               contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="7e97cc41-a6ab-4745-bc80-33c6c4325718">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZrb+I6EP0rKPuxCnlAgEQFiUe7pe8F2qX75cp1JonbxEljJ9D++rUDpIRCL/dKSMiT8ZkzDx/7lKEoNJ0+Y5ByEtPaMgopcwprV8lS6sSIEeZQFAFzOHam/Ztrx6zrDtpsUWrjUVf5p4EtpOtNrFo2BrVpea5q62ZLbRtuw7OxiTFuCVfGMhhTxhHlXcXUDUvVTfGbGbojfg293mobf5TaI6RMYAuXuq6sSS1ZVwk4TxxNWywW9UWjHqe+Zuq6oc1vrqc4gAgpvdNVRkWgtLf2x3UXMIQhruM40k61is+py5wp8SniWQrrWO6hWLqm25rwcRnxfyjlXnDH1IuL5RDRmBKMQvKBZH1ugAexW+uHfpwSHkQHkzB0CazCEqvYaNIfilaldiRQhWHKkMoCZKyxJuBBChRD7WEy7io/jutasXWWIsq8OI1Ydfnf+ADNIYwTcFW2SWtN7XjAPZXqnQJ2xhSHGSM53MphTRAGtu4m4OOhavcpeGR5TZgY0CWT7LRtejvLVTVGxAfG/0+DtpqzAnlEYQa9Dpt6zciaP3c+2oNLv8PNft7+mRN78totCGw7F4aytavlzlCWQ7TaMW8v5s3x06X3+nEz86cBvIyb2e+BjxLv4fIu6D9n55N5fgFzf3E9+kPuJr8HjfYSd15RRGx2kk5+abcD9tR/+Xi4Qv0AXfP2xR3kgzFCQfrESUov78LpaxicjH7xC3r1/hjez6N252KIfrZOwqvXZOBFcO4+2Cmys6YOLff66a3xoaEEBmed27x1NfRt993DuFums8W/atuc+Wn2/AKYb5ZyDMaj2rnoEuLfi5m0EFf1ClcnkeLDOFCu9OQuqR1OJuSOuI7o4Wqtnxm2aVu2cXZmGUajc6ZbDd2ybeNc7xvWsL0RmRWLHYrDmHpExpKSuxqb7wniyGFAXUjVPM6E0jHlG8QR4qg2phNxCGLKYBYLeTY/Xvz3ZvjieS0riQPb8N4W4OVLpXYb8zt6l/Y9DmlVkhsVSZ4AJgkBqdtyrJmYa8ZFKd5QnvHQqOeoTiETyp5KkXXMZsfSGImSECRRLYrdLIR6EiRFYTS2+jdVhFlhnZzNisN2MK3db5sKCB+XSAcmcxmA6CLsuVvMTSKHE25tJ7yB72cukedKlJOnBK+YVD99Tokcj3JEREYbyqXnrqGCqu0mVAZyc4LLOS9vayHi4tj3Nu14Q/W3epbnWdGAtpS3VMBrMkVNN7Up4EwI0/ssfgWqlSjaUbdASXwneGmvUsx4QKcccYjExNSK5RHX/hSYvPbHYtKXx74pKiFF6Tgs+T7bMBRPFsn421cNdrD0E+Z78beIU/ezY3uwtuKIPMWtzwn15UreAO8H5gLHApYI7YrTbfB9APuCV41lkUsuXAzUc8bh8JeaFKWugjCOM8rHI6UwbAtlwZO/J+B8On2BKbS4fJyRf3+dqaQYAQziScdIgS/vWEceAepvie066Fe9NdtNq28ahlnRW9NqWmVRKux6X8xfLVt12p3x3l8=</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_03106 - STS GET - DeviceAuthToken DeviceString - Standard user created DeviceAuthToken consumable - P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>3_P1 Test Cases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E1929591EE51138E05305991F0A15C7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E19292745A21128E05305991F0A2545</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value>close</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D14403889CD0F3ECE0401F0A07992161/User/urn:dece:userid:org:dece:D14403889CDFF3ECE0401F0A07992161/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>policyId</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/2015/02/Account/urn:dece:accountid:org:dece:0E19292745A21128E05305991F0A2545/User/urn:dece:userid:org:dece:0E1929591EE51138E05305991F0A15C7/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3DD6C150D6CC4DCE0401F0A0799470D</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE45D4D6F9253AED6E0401F0A07991A6C</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE45D4D6F9265AED6E0401F0A07991A6C</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E1929591EE51138E05305991F0A15C7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E19292745A21128E05305991F0A2545</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMAC" searchProperties="true" id="b01a0d95-3923-459e-a6d2-1bb247253397"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" disabled="true" id="f09de1f2-1998-4538-ade3-37d387480b49"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" disabled="true" id="cd312156-908d-4e63-8788-3e93ca2ff380"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));

if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:ManageAccountConsent");
}else{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageAccountConsent", "UTF-8"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" disabled="true" id="65266f70-1ff3-4497-a06e-b4c2cbb876ea"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MAC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_MAC" disabled="true" id="bbde6fce-ca7b-4a7f-9aaf-5ee81303ba4d"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_MAC" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml;charset=UTF-8"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageAccountConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:accountid:org:dece:${#TestCase#NODE_ACCOUNT_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" disabled="true" id="2534f3a0-2894-4bf1-9840-07b4c056c79f">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_MAC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                               contentLocation = value[0];
                                                
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" disabled="true" id="e5abdb13-3b4a-48f7-9590-56417db829e0">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZkqrKEn33KwzPo2EziCBGd0cUAo44gePLDSwKRJmkQNCvv4W2brt397773CetrKzMlQNZq16x6XtsC2CM4sQNg3JPfqv8p8nZTbu+5WtQbIg1TmTF2pbmYc0yBZpDvA23datS7mGcol6AEzNI3ioszdRrdLPG8gYttGi+RbMvPCdsKuUFijExTVRe6Eo5970At65u3yppHLRCE7u4FZg+wq0EtnSgDVtEs2XeMVXeX28orw7j912SRC2Kgi8Wgsjz4AsMfeqV+qTzauGW7jqBmaQx+vBp4bfKx9ksy16y+ksYOxRL0zRFixTRsbDr/FN5L90PI6sX2OFt3TaDMHCh6bkXswCloWQXWmXgOWHsJjv/B9MMxdCF6RrKYQ0yXPBPhfrl4IruLy19Ahljs4Z3JnM3NkM2ilEAUXk+671V/vm7Ct7OGrEZYDuMffxl/e8goeCEvDBCVg3fI7uj+3uL36Tr/RXBVi+AXordExoVbRKZEOHyJEa2mw9dTJrPwuVr+cs5vncYgv+mJK/UM04Cm/omM7LrIJz8P/V6rtXNysL0UvRuzoVjdz4YNaHDeOFWto6x19f8aLLk3q4QnpVvoB6l/lh/bdRHX30cSlfJcNs4bJ1mUzxcjvKMSwwW05t11wtGoeG1bVi/6NPRBdFiO5qoi8XJHML+QdZ4qS9Wh1Vjm62ALvbZfF6qNhf9tCmzkW42zuJFNbP0DMZzoQOc3DvGyiyOqcmaqocACQOL3sOgM+iqSwosubmAFwcqS1iu0z3Qi8GstG7vOca0usdFYNOdzo7dHd5+xfQcQxHXAJ2vQRb/Vw1alM3EfCzaxaSwyeeZoHet12tX5XYboLYDsp4EnJ40vICR5ByOu4PbETNaAtO5CmRw1mYgk521vJhOB0pmLRbeZtFTVUmbcVkXrOUS2ZCVfCFvVn3aXG6iNavSG12SrNUs3Nb7kdU9ZN0dHGmGlo2M3lnbK/nIUOjlVebkZH3R9hozNub10nIvidpMyeTs6lFWst1os5xF67mYwYsy1QDXAcxcae+0ruEvGFif7eBeGWrgcJVLO629WGi5YoBJSXJGCxKb0VY3EfStaOt7uyfjXWLcsDqL87bjpZuLstfaSqetHzt6b1uXp0ofzNbz7XJxMJfqqQS7I7C9e3QbrrkKM2fTzOTpuj8IN73dCY7AVJGkKSDpooHW6/RB2JGAxgE3v7T3Eh+2LTWj+iwuVUWvw6/O7nGFzQ7tmUyzyayHS35y5GUlqG4G6Xa/03YrdVwd6NZpLibiZY1P1RNvugzMI3u6UrrJILe7U720ncj5CnarltOnvIuoxprQB/HlvPM0Z5Ys+TE+b13bXkqrMecJtqfVZ5Ht2dEZV41weohpXkJ1llqfT4OkBBxNAqCzn++lqSY1i6RavWy61iQTqEqSgsueTQbs4tjvnjy4roMwHyzH+8NHYSw5UyQqmyqkrZRSUwZWUYSuPlfUPZhLjhNLjqJKUyiD6bo3yNYkX/MuUf6aR/WaR0eRgFLfAF7slupzWkzGic5x4BxI80AVd9oxX1q8TwtHpAz1UcRlGh7ZwWYZHjTfjedxqs8Hg9Ew3xpp57Ans8qm9cGpvikpp0ME3NHA2B3kUDYn0XqdRNUAxjDpRb7Wyy/jDd433a1P96sNRprQMhTYub/N5h1T2QxiR2cG3VkwqQtiCaf2uetX981sWTV0PhKsdmDL5zO1iRd0CEJVnDWOVs6yh908G/KZ3QeHrcmOck+UzqIy2Bgwm00HS92vNkqN03Do0xeD4kbRONM7GadMp9W6JRldA0exu06bTh6PA4tdmwl/2tAL3o28g8imB4OL6gvHJ8WanKxI0CalKbeCG98RItinZtQJKII97HXO24t5ifwxvA3Qr9PhIbzND+p5snwaPXfSoZNuRTC5L4sLqCeXVXIrmMmfCUwhca2afVVtRQULwgkKksp7caogL62UUBzXapEr47ZWOLnBs6rAiYoCeF5QaI5mVBrQDVHkmgp7Zzk3FF8gtsPAdgtfBY+73VJ/Bgj9FkaBheLaKUzhDuHKHywW+Sr3ghm5fsMAIyMkPLFdByLfENQmx4htuc0IKsOrggJUUWQUoDCV8ihMxsE4BnaC4k8ckaE/ccQZgm7kooJIFrcpJtcpTkhKjuYpTTzm5WS+BCglVDMu2F6L5ZoNCrt+5KECMOWHVuqhl2gXXRNE4dsvWzMhvkoFnqav1/yP8X3du6eC6FhuoYCLYCREyol+Y7uNVuMeyc8R158jvpsHqeUWtznJaxK78Ibk89avdin65NErRUh3zA/Vr4JPZqmvET08WScXPjr+8RggXJKwjfd7QY7my/ElPZ3SawmEgknFxDzFULRA6QimhA6djfCAAuphgvorJvpA/cXzQ/4ZX5rsAj0hX7NPGqZ8Xf7FM0RHuHiG9EjD53/7xvnkkuQtQXnynaztkddKgfiPDxrYgoUeEU/ITxbGvwL/ztaTHxJnMb7cwClWBe88/9AVMCRmXTLCwvjZ+HcGvnP+WfhI8gNLQrppmybo551yMZveKiaEYRokPblyFTzPyyvO5Byh1i+l38xcmd8Hlc/xj1R+pQ11Mrl8s/LQdf+3cs29tgtE5BR2r1jeKjl5lRLngfM0nz8Afj+iZfCnEf05kvffxL9LnnL69Xt4/y8=</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_03106 - STS GET - DeviceAuthToken DeviceString - Standard user created DeviceAuthToken consumable - P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>3_P1 Test Cases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E4D562F749EEA667E0401F0A059948E2</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E4D562F749DAA667E0401F0A059948E2</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>829</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE4D562F749DAA667E0401F0A059948E2/Policy/urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE45C6DE4D4DBC56FE0401F0A05994A49</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\STSAPIProjects/7600_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE4D562F749EEA667E0401F0A059948E2</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE4D562F749DAA667E0401F0A059948E2</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMUC" searchProperties="true" id="93652a5f-9a11-4c7a-85fa-a94bb7c53c00"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="5a147c61-b726-4c18-aa58-beb59a9f767c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="6397e49e-d068-45a6-8257-61c29fff4087"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));

if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:ManageUserConsent");
}else{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageUserConsent", "UTF-8"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="afc4bd2d-89b0-429f-85f7-0c774ebdbe4c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MUC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_MUC" id="584956b7-d860-4bfc-a9b1-c217861c9ac7"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_MUC" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml;charset=UTF-8"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:originalUri>https://qa.p.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:07943FA348A779AFE05307991F0A97F1/User/urn:dece:userid:org:dece:07943EFBB2B675CBE05307991F0A44EE/Policy/urn:dece:type:policy:ManageUserConsent</con:originalUri><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="3a273d6e-efd4-439d-bf28-1fb7427763ef">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_MUC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                              contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="30206805-8269-49d4-9985-20b7ee0b15ff">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZrb+I6EP0rKPuxCnlAgEQFiUe7pe8F2qX75cp1JonbxEljJ9D++rUDpIRCL/dKSMiT8ZkzDx/7lKEoNJ0+Y5ByEtPaMgopcwprV8lS6sSIEeZQFAFzOHam/Ztrx6zrDtpsUWrjUVf5p4EtpOtNrFo2BrVpea5q62ZLbRtuw7OxiTFuCVfGMhhTxhHlXcXUDUvVTfGbGbojfg293mobf5TaI6RMYAuXuq6sSS1ZVwk4TxxNWywW9UWjHqe+Zuq6oc1vrqc4gAgpvdNVRkWgtLf2x3UXMIQhruM40k61is+py5wp8SniWQrrWO6hWLqm25rwcRnxfyjlXnDH1IuL5RDRmBKMQvKBZH1ugAexW+uHfpwSHkQHkzB0CazCEqvYaNIfilaldiRQhWHKkMoCZKyxJuBBChRD7WEy7io/jutasXWWIsq8OI1Ydfnf+ADNIYwTcFW2SWtN7XjAPZXqnQJ2xhSHGSM53MphTRAGtu4m4OOhavcpeGR5TZgY0CWT7LRtejvLVTVGxAfG/0+DtpqzAnlEYQa9Dpt6zciaP3c+2oNLv8PNft7+mRN78totCGw7F4aytavlzlCWQ7TaMW8v5s3x06X3+nEz86cBvIyb2e+BjxLv4fIu6D9n55N5fgFzf3E9+kPuJr8HjfYSd15RRGx2kk5+abcD9tR/+Xi4Qv0AXfP2xR3kgzFCQfrESUov78LpaxicjH7xC3r1/hjez6N252KIfrZOwqvXZOBFcO4+2Cmys6YOLff66a3xoaEEBmed27x1NfRt993DuFums8W/atuc+Wn2/AKYb5ZyDMaj2rnoEuLfi5m0EFf1ClcnkeLDOFCu9OQuqR1OJuSOuI7o4Wqtnxm2aVu2cXZmGUajc6ZbDd2ybeNc7xvWsL0RmRWLHYrDmHpExpKSuxqb7wniyGFAXUjVPM6E0jHlG8QR4qg2phNxCGLKYBYLeTY/Xvz3ZvjieS0riQPb8N4W4OVLpXYb8zt6l/Y9DmlVkhsVSZ4AJgkBqdtyrJmYa8ZFKd5QnvHQqOeoTiETyp5KkXXMZsfSGImSECRRLYrdLIR6EiRFYTS2+jdVhFlhnZzNisN2MK3db5sKCB+XSAcmcxmA6CLsuVvMTSKHE25tJ7yB72cukedKlJOnBK+YVD99Tokcj3JEREYbyqXnrqGCqu0mVAZyc4LLOS9vayHi4tj3Nu14Q/W3epbnWdGAtpS3VMBrMkVNN7Up4EwI0/ssfgWqlSjaUbdASXwneGmvUsx4QKcccYjExNSK5RHX/hSYvPbHYtKXx74pKiFF6Tgs+T7bMBRPFsn421cNdrD0E+Z78beIU/ezY3uwtuKIPMWtzwn15UreAO8H5gLHApYI7YrTbfB9APuCV41lkUsuXAzUc8bh8JeaFKWugjCOM8rHI6UwbAtlwZO/J+B8On2BKbS4fJyRf3+dqaQYAQziScdIgS/vWEceAepvie066Fe9NdtNq28ahlnRW9NqWmVRKux6X8xfLVt12p3x3l8=</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_03106 - STS GET - DeviceAuthToken DeviceString - Standard user created DeviceAuthToken consumable - P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>3_P1 Test Cases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E1929591EE51138E05305991F0A15C7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E19292745A21128E05305991F0A2545</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/2015/02/Account/urn:dece:accountid:org:dece:0E19292745A21128E05305991F0A2545/User/urn:dece:userid:org:dece:0E1929591EE51138E05305991F0A15C7/Policy/urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE45C6DE4D4EFC56FE0401F0A05994A49</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE45C6DE4D4DBC56FE0401F0A05994A49</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E1929591EE51138E05305991F0A15C7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E19292745A21128E05305991F0A2545</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyGet" searchProperties="true" id="ef7e4383-2270-4ae0-948b-1d9a80c31a9a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4585d1b3-4d70-4202-a055-651ec7ee72a3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
tC.setPropertyValue("policyCLASS",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="59f985fc-fc0d-4cad-a744-e8dd0708b37f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyDeleteResponseType"));



if (tP.getPropertyValue("versionMinor") == tP.getPropertyValue("versionURLEncode")){	
	tC.setPropertyValue("policyClass", URLEncoder.encode("urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"), "UTF-8"));
}else{
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"));
}

			
if (tC.getPropertyValue("expectErrType") == null ||
	tC.getPropertyValue("expectErrType") == "") {
		tC.setPropertyValue("expectErrType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="e16ae870-38b5-4075-98d4-b77553b08c28"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Policy Get");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy Get" id="a0497d0e-20bf-4ee2-ba0d-65ac3becc25b"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="UserPolicyGET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy Get" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#policyClass}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="dc514d25-cd4c-438c-a06b-37b2ecf9b1cf">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Policy Get');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);


 </script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="e9b0a35d-871f-4926-a375-4010e809a771">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

/*
*  The body should not be null...something should be
*  there.
*/
assert XMLbody.size() > 0;

if (XMLbody != null) {
                def myXML = new XmlSlurper().parseText(XMLbody);

                xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
}

log.info "xmlPolicyClass [$xmlPolicyClass] - tcPolicyClass[$tcPolicyClass]";
                                
if (httpStatus == "HTTP/1.1 200 OK" || xmlPolicyClass == tcPolicyClass) {
                policyWasFound = "true";
                def PolicyID = context.expand( '${#TestCase#XMLbody#declare namespace ns1=\'http://www.decellc.org/schema/2012/12/coordinator\'; //ns1:PolicyList[1]/ns1:Policy[1]/@PolicyID}' )
                log.info "================="+PolicyID
                

                if (tP.getPropertyValue("versionMinor") == tP.getPropertyValue("versionURLEncode")){	
				tC.setPropertyValue("PolicyID", URLEncoder.encode(PolicyID, "UTF-8"));
			}else{
				 tC.setPropertyValue("PolicyID",PolicyID);
			}
}


tC.setPropertyValue("policyExists", policyWasFound);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return policyId" id="3c3ed23c-308e-4fc2-9a52-348c953cc692"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));

tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_USER_ID</con:name><con:value>D84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZkqrKEn33Kwz3o2EzKYrR3RGFoKLiBE683MCiQJRJCgT9+lto67b7dO+7z32CSrIyVw5krXrFpu+xbYAxihM3DMqK9Fb5D8PR2wbXZGqQtthavU7eWluOvFmmwPMtmmY5u1JWME6REuDEDJK3CkszXI1u1Vhep4U2V28z7IvQYoxKeYliTEwTlRe6Us59L8Dtq9u3ShoH7dDELm4Hpo9wO4FtDaijNtFsm3dMlffXG8qrw/h9lyRRm6Lgi4Ug8jz4AkOfeqU+6bxauK25TmAmaYw+fFr4rfKxN8uyl4x7CWOHYmmapmiBIjoWdp1flffSfTOylMAOb+uOGYSBC03PvZgFKBUlu9AqA88JYzfZ+T+YZiiGLkzXUA5rkKkHvyrUbwdXdH9p6RPIGJs1vDOZu7E5slGMAojKi7nyVvn1dxW87dVjM8B2GPv4y/rfQULBCXlhhKwavkd2R/f3Fr9J1/srgm0lgF6K3RMaF20SmRDh8jRGtpuPXEyaz8Lla/nLOb53GIL/piSv1DNOApv6JjOS6yCc/D/1eq7VzcrS9FL0no9Y5E5E+Yymx9FBwMGsjldiS9sfs7crhGflG6hHqT/WXxv10VcfmxZIQUfm2FO62VaTpFGPOvG0RdFwuV41A78fj9fQPTJg6LMbFoOVvr5AlFXlxm5z8vm5nVNzhmXGzQsfX0rZ0jaOB2PTUEV239PVeb0PRGMCFxG9neRxp+dTs2CwTwFeDCY7pdMYhruLETZ4d6o5VKZjbmEdl4YTnMdmaTXtGS3joJ/nE09N1xcGwrffMT3HUMQ1ROdrkMX7ukELkpmYj0WnmBQ2+T0T9K4qSqcqdToAdRyQKSJwFHF0AWPRORx3B7cnZLQIZosukMBZnYNMcjbScjYbypm1XHrGUul2RRJY1gcbqUQ+SHK+lIz1gDZXRrRhu7ShiaK1nodbbhBZ/UPW38GxqqvZWFfO6l7Ox7pMr64yJyfri7pXmYm+4EqrvSioczmTsqtHSc52Y2M1jzYLIYMXeaaCeg8wC7mzU/u6v2QgN9/BvTxSweEqF3dqZ7lUc1kH05LojJckNr3TNSLoW9HW93ZPxvvEuG71ludtz0uNi7xXO3Kvox17mrLlpJk8APPNYrtaHsxV91SC/THY3j26Dddch5ljtDJpthkMQ0PZneAYzGRRnAGSLhqoSm8Awp4I1Dpw80tnL/Jhx+pm1IDFparg9fj12T2usdmjPZNptZjNaMVPj7wkB1VjmG73O3W37k6qQ806LYREuGzwqXriTZeBeWTP1nI/GeZ2f6aVtlMpX8N+1XIGlHcRurHaHID4ct55qjNPVvwEn7euba/E9aTuNW1P5eaR7dnRGVf1cHaIaV5EHEttzqdhUgKOKgLQ2y/24kwVW0VSLSWbbVTRBF05ScFlzyZDdnkc9E8e3HAgzIeryf7wURhLymSRymYyaSu51JKAVRShry3k7h4sRMeJRUfuijMogdlGGWYbkq9Fnyh/zWP3mkdHFoHMGYAX+iVuQQvJJNHqdXAOxEXQFXbqMV9ZvE83j0geaeOonql4bAfGKjyovhsv4lRbDIfjUb7V095hT2aVTWvDE2eU5NMhAu54qO8OUiiZ02izSaJqAGOYKJGvKvllYuB9y9369KDaYMQpLcEmu/C32aJnysYwdjRm2J8HU64plHBqn/t+dd/KVlVd46Om1Qls6XymjHhJhyDsCvPG0cpZ9rBbZCM+swfgsDXZce4J4lmQh4YOs/lsuNL8aqPUOI1GPn3Rqfo4mmRaL6vLs1mVs0S9r+Modjdpy8njSWCxGzPhTwa95N3IOwhsetDrEbd0fFKs6cmKmuq0NKuvoeE7zQgOqDl1AnLTHim98/ZiXiJ/Am8D9Ot0eAhv84N6niyfRs+ddGikWxFM7sviAFKkcpecCmbyZwJTSFyrZl9V21HBgnCCgqTyXuwqyEs7JRTHtdrkyLit5brU5BstrtOiO4BrdmW6TjNdGtANQeAFqXtnOTcUXyB2wsB2C18Fj7udUn8GCP02RoGF4topTOEO4cofLBb5KivBnBy/YYCRHhKeKNVpiRHlZpcBsizU2RYn8c0uT3Mcx/Ks0KmUx2EyCSYxsBMUf+KIDPuJI84RdCMXFUSyOE0xOU5xQlJyNE9p4jEvJ/MlQCmhmnHB9tpsvdWgsOtHHioAU35opR56iXbRNUEUvj3ZmgnxVdrkafp6zP8Y39dv91QQHcstFHARjIhIOdE3bJe+R/JzxI3niO/mQWq5xWlO8prELrwh+fzpd7sUffLolSKkO+aH6lfBJ7PU14genqyTCx8d/7gMEC5J2Mb7vSBH8+X4kp5O6bUEzYJJxcQ8xVB0k9IQTAkdOuvhAQXUwwT1V0z0gfqL54f8M7402QVaQv5mnzRM+br8i2uIhnBxDVFIw+d/e8f55JLkLUF58p2s45HbSoH4jxca2IaFHhFPySMLY+t3ub6x9eSHxFmMLzdwilXBO88/dAUMiVmXjLAwfjb+nYHvnH8WPpL8wJKQbtqmCfr5S7mYTW8VE8IwDRJFqlwFz/PyijM5R6j9W+kfZq7M74PK5/hHKr9WRxqZXL5Zeei6/1u55l7bBSKyC7tXLG+VnNxKifPAeZrPHwC/HdHNrvCnEf05kvd/iP8pecrp1//h/b8=</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value/></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_ 18001 - STS - Verify UUID status for deletion of ULC - P0</con:value></con:property><con:property><con:name>sName</con:name><con:value>8_STS Create and SAML Exchange - FUNC</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>837</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AUserLinkConsent</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:E4D77922CB83F3F6E0401F0A05990E37">
      <PolicyClass>urn:dece:type:policy:UserLinkConsent</PolicyClass>
      <Resource>urn:dece:userid:org:dece:E4D76583C80CA37FE0401F0A059969DF</Resource>
      <RequestingEntity>urn:dece:org:org:dece:7600</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:userid:org:dece:E4D76583C80CA37FE0401F0A059969DF" CreationDate="2013-08-26T09:36:58.000Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>952</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>true</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\STSAPIProjects/7600_concat.pem</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE4D77922CB83F3F6E0401F0A05990E37</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE4D76583C80CA37FE0401F0A059969DF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE4D76583C7F9A37FE0401F0A059969DF</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5935459c-5982-4cb1-9974-1d4d88038a65</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9bbb88e5-07dd-4d4f-ba3c-1c734ce9be3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete" searchProperties="true" id="3211d305-da0f-41cb-953c-afccf28f3bec"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b13708a8-6480-453d-8855-59e7c91e8aae"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
tC.setPropertyValue("PolicyID",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="4623c54a-72cf-43d7-81ba-8a3c7e3df07c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyDeleteResponseType"));
tC.setPropertyValue("PolicyID", callTC.getPropertyValue("PolicyID"));
			
if (tC.getPropertyValue("expectErrType") == null ||
	tC.getPropertyValue("expectErrType") == "") {
		tC.setPropertyValue("expectErrType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="b258f13f-4803-407e-be4d-76d0f4fe8c39"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Policy Delete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy Delete" id="16bb8dd1-5bc8-4c35-b262-b52553db92a9"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="UserPolicy_DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy Delete" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#PolicyID}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="dbab5de4-748e-410c-ae19-2ab9b964ea03">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def tStep  = tC.getTestStepByName('Policy Delete');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
log.info contentLocation;
log.info connection[0];
log.info contentType[0];
log.info contentLength[0];

tC.setPropertyValue("status",status[0]);
tC.setPropertyValue("contentType", contentType[0]);
tC.setPropertyValue("contentLength", contentLength[0]);
//tC.setPropertyValue("contentLocation", contentLocation[0]);

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

	String XMLbody  = strVal.substring(startAssert, strVal.size());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="ab84bcbf-b816-45a3-866d-05b8b35a5f62">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
def expectErrType = tC.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = tC.getPropertyValue("XMLbody");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml;charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = false;
		dobodyXML = false;
		
	break;
	case "FORBIDDEN":
	default:
		errorReason = "assertion_not_found";
		errorID = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorLink = "https://qa.q.uvvu.com:7001/deceerrors/error/error_response.html";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	// assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
/*if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	

if (doContentTypeHeader) {
	//assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
} */
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep><con:properties><con:property><con:name>NODE_USER_ID</con:name><con:value>D84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">7600</con:value></con:property><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=nVfZkqrKEn33Kwz3o2EzKYrR3RGFoKLiBE683MCiQJRJCgT9+lto67b7dO+7z32CSrIyVw5krXrFpu+xbYAxihM3DMqK9Fb5D8PR2wbXZGqQtthavU7eWluOvFmmwPMtmmY5u1JWME6REuDEDJK3CkszXI1u1Vhep4U2V28z7IvQYoxKeYliTEwTlRe6Us59L8Dtq9u3ShoH7dDELm4Hpo9wO4FtDaijNtFsm3dMlffXG8qrw/h9lyRRm6Lgi4Ug8jz4AkOfeqU+6bxauK25TmAmaYw+fFr4rfKxN8uyl4x7CWOHYmmapmiBIjoWdp1flffSfTOylMAOb+uOGYSBC03PvZgFKBUlu9AqA88JYzfZ+T+YZiiGLkzXUA5rkKkHvyrUbwdXdH9p6RPIGJs1vDOZu7E5slGMAojKi7nyVvn1dxW87dVjM8B2GPv4y/rfQULBCXlhhKwavkd2R/f3Fr9J1/srgm0lgF6K3RMaF20SmRDh8jRGtpuPXEyaz8Lla/nLOb53GIL/piSv1DNOApv6JjOS6yCc/D/1eq7VzcrS9FL0no9Y5E5E+Yymx9FBwMGsjldiS9sfs7crhGflG6hHqT/WXxv10VcfmxZIQUfm2FO62VaTpFGPOvG0RdFwuV41A78fj9fQPTJg6LMbFoOVvr5AlFXlxm5z8vm5nVNzhmXGzQsfX0rZ0jaOB2PTUEV239PVeb0PRGMCFxG9neRxp+dTs2CwTwFeDCY7pdMYhruLETZ4d6o5VKZjbmEdl4YTnMdmaTXtGS3joJ/nE09N1xcGwrffMT3HUMQ1ROdrkMX7ukELkpmYj0WnmBQ2+T0T9K4qSqcqdToAdRyQKSJwFHF0AWPRORx3B7cnZLQIZosukMBZnYNMcjbScjYbypm1XHrGUul2RRJY1gcbqUQ+SHK+lIz1gDZXRrRhu7ShiaK1nodbbhBZ/UPW38GxqqvZWFfO6l7Ox7pMr64yJyfri7pXmYm+4EqrvSioczmTsqtHSc52Y2M1jzYLIYMXeaaCeg8wC7mzU/u6v2QgN9/BvTxSweEqF3dqZ7lUc1kH05LojJckNr3TNSLoW9HW93ZPxvvEuG71ludtz0uNi7xXO3Kvox17mrLlpJk8APPNYrtaHsxV91SC/THY3j26Dddch5ljtDJpthkMQ0PZneAYzGRRnAGSLhqoSm8Awp4I1Dpw80tnL/Jhx+pm1IDFparg9fj12T2usdmjPZNptZjNaMVPj7wkB1VjmG73O3W37k6qQ806LYREuGzwqXriTZeBeWTP1nI/GeZ2f6aVtlMpX8N+1XIGlHcRurHaHID4ct55qjNPVvwEn7euba/E9aTuNW1P5eaR7dnRGVf1cHaIaV5EHEttzqdhUgKOKgLQ2y/24kwVW0VSLSWbbVTRBF05ScFlzyZDdnkc9E8e3HAgzIeryf7wURhLymSRymYyaSu51JKAVRShry3k7h4sRMeJRUfuijMogdlGGWYbkq9Fnyh/zWP3mkdHFoHMGYAX+iVuQQvJJNHqdXAOxEXQFXbqMV9ZvE83j0geaeOonql4bAfGKjyovhsv4lRbDIfjUb7V095hT2aVTWvDE2eU5NMhAu54qO8OUiiZ02izSaJqAGOYKJGvKvllYuB9y9369KDaYMQpLcEmu/C32aJnysYwdjRm2J8HU64plHBqn/t+dd/KVlVd46Om1Qls6XymjHhJhyDsCvPG0cpZ9rBbZCM+swfgsDXZce4J4lmQh4YOs/lsuNL8aqPUOI1GPn3Rqfo4mmRaL6vLs1mVs0S9r+Modjdpy8njSWCxGzPhTwa95N3IOwhsetDrEbd0fFKs6cmKmuq0NKuvoeE7zQgOqDl1AnLTHim98/ZiXiJ/Am8D9Ot0eAhv84N6niyfRs+ddGikWxFM7sviAFKkcpecCmbyZwJTSFyrZl9V21HBgnCCgqTyXuwqyEs7JRTHtdrkyLit5brU5BstrtOiO4BrdmW6TjNdGtANQeAFqXtnOTcUXyB2wsB2C18Fj7udUn8GCP02RoGF4topTOEO4cofLBb5KivBnBy/YYCRHhKeKNVpiRHlZpcBsizU2RYn8c0uT3Mcx/Ks0KmUx2EyCSYxsBMUf+KIDPuJI84RdCMXFUSyOE0xOU5xQlJyNE9p4jEvJ/MlQCmhmnHB9tpsvdWgsOtHHioAU35opR56iXbRNUEUvj3ZmgnxVdrkafp6zP8Y39dv91QQHcstFHARjIhIOdE3bJe+R/JzxI3niO/mQWq5xWlO8prELrwh+fzpd7sUffLolSKkO+aH6lfBJ7PU14genqyTCx8d/7gMEC5J2Mb7vSBH8+X4kp5O6bUEzYJJxcQ8xVB0k9IQTAkdOuvhAQXUwwT1V0z0gfqL54f8M7402QVaQv5mnzRM+br8i2uIhnBxDVFIw+d/e8f55JLkLUF58p2s45HbSoH4jxca2IaFHhFPySMLY+t3ub6x9eSHxFmMLzdwilXBO88/dAUMiVmXjLAwfjb+nYHvnH8WPpL8wJKQbtqmCfr5S7mYTW8VE8IwDRJFqlwFz/PyijM5R6j9W+kfZq7M74PK5/hHKr9WRxqZXL5Zeei6/1u55l7bBSKyC7tXLG+VnNxKifPAeZrPHwC/HdHNrvCnEf05kvd/iP8pecrp1//h/b8=</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>D261A6199541A815E0401F0A07990F36</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_ 18001 - STS - Verify UUID status for deletion of ULC - P0</con:value></con:property><con:property><con:name>sName</con:name><con:value>8_STS Create and SAML Exchange - FUNC</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE4D77922CB83F3F6E0401F0A05990E37</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\STSAPIProjects/7600_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn%3Adece%3Auserid%3Aorg%3Adece%3AE4D76583C80CA37FE0401F0A059969DF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE4D76583C7F9A37FE0401F0A059969DF</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
    <Error ErrorID="urn:dece:errorid:org:dece:InvocationPathHasNonEncodedParameters">
        <Reason Language="en">The parameters in the invocation path must be escape-encoded.</Reason>
        <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/07/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE4D76583C7F9A37FE0401F0A059969DF/User/urn%3Adece%3Auserid%3Aorg%3Adece%3AE4D76583C80CA37FE0401F0A059969DF/Policy/urn:dece:policyid:org:dece:E4D77922CB83F3F6E0401F0A05990E37</OriginalRequest>
        <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/07/error/en/ErrorList.html#InvocationPathHasNonEncodedParameters</ErrorLink>
    </Error>
</ErrorList>
]]></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5935459c-5982-4cb1-9974-1d4d88038a65</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9bbb88e5-07dd-4d4f-ba3c-1c734ce9be3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STSGet - ReplacementTokenUri" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="0a2b1b88-ee0e-4848-8ec1-271e59c2ab4c">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="116ab40a-556a-4fea-8919-ed664e920f44">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("actionAuthHeader",null);
tC.setPropertyValue("actionIgnoreAuthTokenStatus",null);
tC.setPropertyValue("actionSkipNodeUserCheck",null);
tC.setPropertyValue("actionSkipNodeIDCheck",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("isDeviceFlag",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("authHeaderString",null);
tC.setPropertyValue("affilnodeid",null);
tC.setPropertyValue("assertCreatingNodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsIgnoreAssertTimesFlag",null);
tC.setPropertyValue("stsExpectedAffiliationListSize",null);
tC.setPropertyValue("expectErrTypeSTSGet",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("authHeaderValue",null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("rauthToken",null);
tC.setPropertyValue("stsaudienceIgnoreAll",null);
tC.setPropertyValue("stsaudience",null);
tC.setPropertyValue("stsaudienceIgnoreNodes",null);
tC.setPropertyValue("nodeidFULL",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("contentLocation",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="89effead-b8a5-4523-bd00-701b7839cd37">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertCreatingNodeid",callTC.getPropertyValue("assertCreatingNodeid"));
tC.setPropertyValue("affilnodeid",callTC.getPropertyValue("affilnodeid"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("expectNodeUserRowCount",callTC.getPropertyValue("expectNodeUserRowCount"));
tC.setPropertyValue("expectCreateExpireHoursDiff",callTC.getPropertyValue("expectCreateExpireHoursDiff"));
tC.setPropertyValue("expectErrTypeSTSGet",callTC.getPropertyValue("expectErrTypeSTSGet"));
tC.setPropertyValue("stsIgnoreAssertTimesFlag",callTC.getPropertyValue("stsIgnoreAssertTimesFlag"));
tC.setPropertyValue("authHeaderString",callTC.getPropertyValue("authHeaderString"));
tC.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
tC.setPropertyValue("deviceAuthToken",callTC.getPropertyValue("deviceAuthToken"));
tC.setPropertyValue("rauthToken",callTC.getPropertyValue("rauthToken"));
tC.setPropertyValue("actionAuthHeader",callTC.getPropertyValue("actionAuthHeader"));
tC.setPropertyValue("actionIgnoreAuthTokenStatus",callTC.getPropertyValue("actionIgnoreAuthTokenStatus"));
tC.setPropertyValue("actionSkipNodeUserCheck",callTC.getPropertyValue("actionSkipNodeUserCheck"));
tC.setPropertyValue("actionSkipNodeIDCheck",callTC.getPropertyValue("actionSkipNodeIDCheck"));
tC.setPropertyValue("stsaudience",callTC.getPropertyValue("stsaudience"));
tC.setPropertyValue("stsaudienceIgnoreAll",callTC.getPropertyValue("stsaudienceIgnoreAll"));
tC.setPropertyValue("stsaudienceIgnoreNodes",callTC.getPropertyValue("stsaudienceIgnoreNodes"));
tC.setPropertyValue("isDeviceFlag",callTC.getPropertyValue("isDeviceFlag"));
tC.setPropertyValue("username",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("password",callTC.getPropertyValue("Password"));
tC.setPropertyValue("contentLocation",callTC.getPropertyValue("contentLocation"));

if (tC.getPropertyValue("expectErrTypeSTSGet") == null ||
	tC.getPropertyValue("expectErrTypeSTSGet") == "") {
		tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
}
if (tC.getPropertyValue("stsIgnoreAssertTimesFlag") == null ||
	tC.getPropertyValue("stsIgnoreAssertTimesFlag") == "") {
		tC.setPropertyValue("stsIgnoreAssertTimesFlag","false");
}
if (tC.getPropertyValue("tokentype") == null ||
	tC.getPropertyValue("tokentype") == "") {
		tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
}

if (tC.getPropertyValue("isDeviceFlag") == null ||
	tC.getPropertyValue("isDeviceFlag") == 'null') {
		tC.setPropertyValue("isDeviceFlag","false");
}

if (tC.getPropertyValue("actionSkipNodeIDCheck") == null ||
	tC.getPropertyValue("actionSkipNodeIDCheck") == 'null') {
		tC.setPropertyValue("actionSkipNodeIDCheck","false");
}
if (tC.getPropertyValue("nodeid") != 'null' || tC.getPropertyValue("nodeid") != null) {
		tC.setPropertyValue("nodeidFULL", tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
}

/*
*  ONLY pull the current TC assertion of the tokentype is saml2 (needed for the exchange)
*/
if (tC.getPropertyValue("tokentype") == tP.getPropertyValue("urntokenType_saml")) {
	log.info "Extracting assertion";
	tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
}

/*
*  Construct the expected Affiliation list
*/
def affiliationList = [tC.getPropertyValue("nodeidFULL").toString()];
def ignoreNodesList = [];
def stsaudienceList = [];
	
if (tC.getPropertyValue("stsaudienceIgnoreAll").toString() == "false") {
	if (tC.getPropertyValue("stsaudience") != 'null') {
		stsaudienceList = tC.getPropertyValue("stsaudience").toString().tokenize(",");

		/*
		*  Now remove the ingnorenodes 
		*/
		if (tC.getPropertyValue("stsaudienceIgnoreNodes") != 'null') {
			ignoreNodesList = tC.getPropertyValue("stsaudienceIgnoreNodes").toString().tokenize(",");
			ignoreNodesList.each {
				if (stsaudienceList.contains(it)) {
					stsaudienceList = stsaudienceList.minus(it);
				}
			}
		}
	}

	if (stsaudienceList.size() >= 1) {
		log.info "DEBUG: Adding stsaudienceList";
		affiliationList.addAll(stsaudienceList);
	}
} 

tC.setPropertyValue("stsExpectedAffiliationListSize",affiliationList.size().toString());

log.info "DEBUG: affiliationList size is " + affiliationList.size();
affiliationList.each {
	log.info "DEBUG afflicationList Member: " + it;
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish attributes based on NodeID" id="fcb42248-d542-43a3-bc4c-544c22260914">
        <con:settings/>
        <con:config>
          <script>import java.util.StringTokenizer; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tC.getPropertyValue("nodeid").toString();

/*
*  See if we are a device
*/
switch (nodeid) {
	case tP.getPropertyValue("nodeIdDEV").toString():
		urlEndPoint = "device";
		tC.setPropertyValue("isDeviceFlag","true");
		break;
	default:
		urlEndPoint = "coordinator";
		tC.setPropertyValue("isDeviceFlag","false");
		break;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Construct URL" id="8fa0fe8c-a22c-4f7b-acae-7da5a6b6e46b">
        <con:settings/>
        <con:config><script>import java.util.StringTokenizer; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

Boolean appliedFirstNode = false;
String url = "";
String anode = "";
String urlEndPoint = "";
String nodeid = tC.getPropertyValue("nodeid").toString();

log.info "nodeid[$nodeid]";

if (tC.getPropertyValue("isDeviceFlag") == "true") {
	urlEndPoint = "device";
}

log.info "urlEndPoint: " + urlEndPoint;

/*
*  Set the endpoint
*/
switch (urlEndPoint) {
	case "device":
			url = "https://" + tP.getPropertyValue("targetDeviceDomain").toString() + 
			"/rest/" + tP.getPropertyValue("versionMajor").toString() +
			"/" + tP.getPropertyValue("versionMinor").toString() +
			"/SecurityToken/Assertion/" +
			tC.getPropertyValue("assertionUUID").toString();
		break;
	case "coordinator":
	default:
		url = "https://" + tP.getPropertyValue("targetHostq").toString() + 
			":" + tP.getPropertyValue("targetPortq").toString() + 
			"/rest/" + tP.getPropertyValue("versionMajor").toString() +
			"/" + tP.getPropertyValue("versionMinor").toString() +
			"/SecurityToken/Assertion/" +
			tC.getPropertyValue("assertionUUID").toString();
	break;
}

log.info "url[$url]";

testRunner.testCase.getTestStepByName('GET - STS').httpRequest.setEndpoint(url);


</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Construct Authorization Header if necessary" id="b2a0f595-e9ff-488f-a319-adfbf4303a69">
        <con:settings/>
        <con:config><script>import org.apache.commons.codec.binary.Base64;
import com.eviware.soapui.support.types.StringToStringsMap 
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def httpRequestStep = testRunner.testCase.getTestStepByName("GET - STS").getHttpRequest();
def headers = new StringToStringsMap();

/*
*  Device auth token requires the authorization header be
*  included with the device code
*/

log.info("STSGet Tokentype : '" + tC.getPropertyValue("tokentype") + "'");
if (tC.getPropertyValue("tokentype") == tP.getPropertyValue("urntokenType_deviceauthtoken")) {
	String authHeaderValue = "DeviceCode value=\"" + tC.getPropertyValue("deviceAuthToken") + "\"";

	tC.setPropertyValue("authHeaderValue",authHeaderValue);

	log.info "Property authHeaderValue is - " + tC.getPropertyValue("authHeaderValue");
	
	tC.setPropertyValue("deviceAuthHeaderValue","dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6");

	headers.put("Authorization",authHeaderValue); 
 	 /*
	  * Disable below step by Sanjeet
	  * Since added a script in setup suite to get this from DB.So commenting from here.
	  */
 	 //headers.put("x-dece-ApplicationAuthorization","dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6")
 	 headers.put("x-dece-ApplicationAuthorization",tP.getPropertyValue("XDeceApplicationAuthorization"));
 	 httpRequestStep.setRequestHeaders(headers);
 	 
} else if (tC.getPropertyValue("isDeviceFlag").toString() == "true") {
	/*
	*  construct the basic auth header
	*/
	String combo = tC.getPropertyValue("username").toString() + ":" + tC.getPropertyValue("password").toString();
	String authHeaderValue = "Basic " + combo.bytes.encodeBase64().toString()

	log.info "combo[$combo] - authHeaderValue[$authHeaderValue]";

	tC.setPropertyValue("authHeaderValue",authHeaderValue);

	tC.setPropertyValue("deviceAuthHeaderValue","dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6");
 	/*
	  * Disable below step by Sanjeet
	  * Since added a script in setup suite to get this from DB.So commenting from here.
	*/
 	 //headers.put("x-dece-ApplicationAuthorization","dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6")
 	 headers.put("x-dece-ApplicationAuthorization",tP.getPropertyValue("XDeceApplicationAuthorization"));
 	 httpRequestStep.setRequestHeaders(headers);	
}else{
	log.info("Not a request to devicde host, hence removing device headers");
	httpRequestStep.setRequestHeaders(headers);	
}


	if (tC.getPropertyValue("actionAuthHeader") == "EXCLUDE") {
	tC.setPropertyValue("authHeaderValue",null);
}

	if (tC.getPropertyValue("actionDeviceAuthHeader") == "EXCLUDE") {
	tC.setPropertyValue("deviceAuthHeaderValue",null);
}
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish PEM" id="a427f932-0cf7-4f16-848c-1d3ca32ef689">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - STS");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Obtain current sysdate from DB" id="d2befb51-493d-4366-9f52-862d15237978">
        <con:settings/>
        <con:config>
          <script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("currentDBTOD",null);

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
String sqlResultXML = "";
String cDate = "";
String tod = "";

try {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
	sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
	log.info "sqlResultXML[$sqlResultXML]";

	if (sqlResultXML.length() > 0) {
		def myXML = new XmlSlurper().parseText(sqlResultXML);
		tod = myXML.ResultSet.Row.TOD;
		log.info "tod[$tod]";
	}

}
catch (Throwable e) {
	log.info "sql[$sql]";
	log.info "dbUtils request failed! - " + e;
	assert 1 == 2;
}
finally {
	if (tod.length() > 0) {
		tC.setPropertyValue("currentDBTOD", tod);
	}
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="GET - STS" id="a54cfc7c-8edb-4f50-a90a-f77fcad4732f"><con:settings/><con:config service="STSGet" resourcePath="" methodName="STS GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STS" mediaType="application/xml;charset=UTF-8" sslKeystore="7600.pem" accept="" id="5b162941-b69c-4965-9df5-91c9b3661539"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#authHeaderValue}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa.q.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_4dad1071-c3a1-4283-a883-2ea7f9454943</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="assertionUUID" value="${#TestCase#assertionUUID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="df86ee6f-b0b3-431c-a63c-3a2c0c3da38f">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('GET - STS');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");
String XMLbody = "";

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();

rawResp = new ByteArrayOutputStream();

rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;
log.info "PATTY " + strVal.indexOf("&lt;?xml version=\"1.0\" ")

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
if (startAssert > 0) {
	XMLbody  = strVal.substring(startAssert, strVal.length());
}

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Key Elements from &lt;Assertion> Body" id="d7db41b9-0cb1-4dee-8184-d2e28834a491">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");

int lastColon = 0;
int lastSlash = 0;

if (expectErrType == "" || expectErrType == "SUCCESS") {
	tC.setPropertyValue("assertionAccountIdFULL",null);
	tC.setPropertyValue("assertionUserIdFULL",null);
	tC.setPropertyValue("assertionNotBefore",null);
	tC.setPropertyValue("assertionNotOnOrAfter",null);
	tC.setPropertyValue("assertionAudienceRestriction",null);
	tC.setPropertyValue("assertionUserId",null);
	tC.setPropertyValue("assertionAccountId",null);
	
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			def accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			def userId    = myXML."saml2:Subject"."saml2:NameID";
			def NotBefore = myXML."saml2:Conditions".@NotBefore.text();
			def NotOnOrAfter = myXML."saml2:Conditions".@NotOnOrAfter.text();
			def AudienceRestriction = myXML."saml2:Conditions".AudienceRestriction;
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";
			this.log.info "NotBefore [$NotBefore]";
			this.log.info "NotOnOrAfter [$NotOnOrAfter]";
			this.log.info "AudienceRestriction [$AudienceRestriction]";
						
			tC.setPropertyValue("assertionAccountIdFULL",accountId.toString());
			tC.setPropertyValue("assertionUserIdFULL",userId.toString());
			tC.setPropertyValue("assertionNotBefore",NotBefore.toString());
			tC.setPropertyValue("assertionNotOnOrAfter",NotOnOrAfter.toString());
			tC.setPropertyValue("assertionAudienceRestriction",NotBefore.toString());
			tC.setPropertyValue("assertionAccountId",accountId.toString().substring(accountId.toString().lastIndexOf(':') + 1).toString());
			tC.setPropertyValue("assertionUserId",userId.toString().substring(userId.toString().lastIndexOf(':') + 1).toString());
	} else {
		return false;
	}
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Verify Response Body and Headers" id="daa434ec-8607-4f0a-b528-35c19334db75">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def url = tP.getPropertyValue("targetURL");
def assertionUUID = tC.getPropertyValue("assertionUUID");

def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
	tC.setPropertyValue("expectErrTypeSTSGet",expectErrType);
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
		case "FORBIDDEN_INVALID_ROLE":
		errorReason = "forbidden";
		errorID = "urn:dece:errorid:org:dece:securitycontext:Forbidden:1120";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
		break;
	case "FORBIDDEN_INVALID_USER_STATUS":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "application/xml;charset=UTF-8";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:InvalidUserStatus";
		errorReason = "User does not have proper status to build token";
		
		break;
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "application/xml;charset=UTF-8";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1119";
		//errorReason = "Exception Encountered during STS process";
		//errorID = "Forbidden";
		errorReason = "forbidden";
	break;
	case "Unauthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorID = "Forbidden";
			expectHTTPcontenttype = "application/xml;charset=UTF-8";
				errorReason = "Unknown Error";
		
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = false;
		
	break;
	case "INVALID_ASSERTION":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "text/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorReason = "assertion_not_found";
		break;
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml;charset=UTF-8";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	// assert tC.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	

if (doContentTypeHeader) {
	//assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

this.log.info "expectErrType [$expectErrType]";

if (dobodyXML) {
	if (XMLbody.length() > 0) {
			def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", ds: "http://www.w3.org/2000/09/xmldsig#");
		if (expectErrType == "SUCCESS") {
			// Verify response sizes...
			this.log.info "Assertion size: " + myXML.size();
			
			assert myXML.size() == 1;
			assert myXML."ds:Signature".size()    == 1;
			assert myXML."ds:Signature"."ds:SignedInfo".size()   == 1;
			assert myXML."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
			assert myXML."ds:Signature"."ds:SignatureValue".size()  == 1;
			//assert myXML."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
			assert myXML."saml2:Subject"."saml2:NameID".size() == 1;
			assert myXML."saml2:Advice"."saml2:AssertionURIRef".size() == 1;
			
			def samlRespNodeAccount = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
				def ExpeAssertionURIRef = "$url/rest/$major/$minor/SecurityToken/Assertion/$assertionUUID";
				
				this.log.info "AssertionURIRef: Expect[$ExpeAssertionURIRef] Received: " + myXML."saml2:Advice"."saml2:AssertionURIRef".toString();
				assert myXML.Error.Reason.toString() == ExpeAssertionURIRef;
		} else {
			// ErrorCode
			this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
			assert myXML.Error.@ErrorID.toString() == errorID;
	
			// ErrorReason
			
			this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
			assert myXML.Error.Reason.toString() == errorReason;
			
		
			// ErrorLink
			/*
			this.log.info "ErrorLink: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
			assert myXML.Error.ErrorLink.toString() == errorLink;
			*/
		}
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Validate NODE_ACCOUNT row entry" id="b32a520b-0a89-49e5-a2e0-719153b969c0">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));

String acct = tC.getPropertyValue("assertionAccountId").toString();
String nodeUser = tC.getPropertyValue("assertionUserId").toString();
String nodeoid = tC.getPropertyValue("nodeid").toString();
String resultsDB = "";

/*
*  If this is a device, adjust the nodeid
*/
if (tC.getPropertyValue("isDeviceFlag").toString() == "true") {
	nodeoid = tP.getPropertyValue("nodeDeviceDefault").toString();
}


String sql = """SELECT 
to_char(rawtohex(ACCOUNT_OID)) ACCOUNT_OID,
to_char(rawtohex(nodeid)) nodeid 
FROM NODE_ACCOUNT where NODE_ACCOUNT_ID = '$acct' 
and nodeid = '$nodeoid'""";

try {
	log.info "sql is [$sql]";
	resultsDB = dbUtils.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
} catch (Throwable e) {
	log.info "ERROR - SelectFromDB issue! - $e";
} finally {
	log.info "results is [$resultsDB]";
}

try {
	def myXML = new XmlSlurper().parseText(resultsDB);

	String dbAccountOID = myXML.ResultSet.Row[0].ACCOUNT_OID;
	String dbNodeOID = myXML.ResultSet.Row[0].nodeid;
}
catch(Throwable e) {
	log.info "ERROR - XmlSlurper Problem - $e";
}
finally {
	if (tC.getPropertyValue("expectErrTypeSTSGet").toString() == "SUCCESS") {
		log.info "Assert DB ACCOUNT_OID [$dbAccountOID] == [" + tC.getPropertyValue("accountOID") + "]";
		assert dbAccountOID == tC.getPropertyValue("accountOID").toString();

		if (tC.getPropertyValue("actionSkipNodeIDCheck").toString() == "false") {
			log.info "Assert DB nodeid [$dbNodeOID] == [$nodeoid]";
			assert dbNodeOID == nodeoid;
		}
	} 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Validate DEVICE_AUTH_TOKEN.STATUS deleted if tokentype:DeviceAuthToken" id="ac04aac5-e0cc-4da7-b9a3-19671d43cc88">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbutils;

String expectstatus = "deleted";
String dbstatus = "";

if (tC.getPropertyValue("tokentype") == tP.getPropertyValue("urntokenType_deviceauthtoken") &amp;&amp;
	tC.getPropertyValue("actionIgnoreAuthTokenStatus") != "true") {
	if (tC.getPropertyValue("expectErrTypeSTSGet") != "SUCCESS") {
		expectstatus = "active";
	}
	try {
		dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
		dbstatus = dbUtils.deviceAuthTokenGetStatus(tC.getPropertyValue("rauthToken"));	
	}
	catch (Throwable e) {
		log.info "ERROR - dbUtils.deviceAuthTokenGetStatus - $e";
	}
	finally {
		log.info "Asserting dbstatus[$dbstatus] == expectstatus[$expectstatus] - " + 
			tC.getPropertyValue("rauthToken").toString();
		assert dbstatus == expectstatus  ;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Fetch NODE_USER_SAML_ASSERTION Row" id="6e72be31-efe1-4677-85f9-32940e4fda03">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;
def myXML;

tC.setPropertyValue("assertionROW",null);

String arow = "";

if (tC.getPropertyValue("expectErrTypeSTSGet") == "SUCCESS") {
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		String uuid = tC.getPropertyValue("assertionUUID").toString();
		
		/*
		*  Assert we have a location header value..
		*/
		assert uuid.length() > 1;

		log.info "uuid [$uuid]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		arow = dbUtils.samlGetAssertionRow(uuid);

		assert arow.length() > 0;

		log.info "arow is [$arow]";

		tC.setPropertyValue("assertionROW",arow);
	}

	/*
	*  Parse the XML
	*/
	try {
		myXML = new XmlSlurper().parseText(arow);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify only one row was returned..
		*/
		log.info "ASSERT - Row Size is 1";
		assert myXML.ResultSet.Row.size() == 1;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Validate NODE_USER_SAML_ASSERTION.NODE_USER_SAML_ASSERTION matches response body" id="22551d26-5e64-4381-8363-fc88bcbe1118">
        <con:settings/>
        <con:config>
          <script>import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def dbUtils;
def dbUtilsUser;

tC.setPropertyValue("computedAssertionXML",null);
tC.setPropertyValue("dbassertionNodeaccountid",null);
tC.setPropertyValue("dbassertionNodeuserid",null);

String assertionXML = "";
String arow = tC.getPropertyValue("assertionROW");

if (tC.getPropertyValue("expectErrTypeSTSGet") == "SUCCESS") {
	/*
	*  Make sure we have data in arow
	*/
	assert arow.length() > 1;

	/*
	*  Get a handle for the saml class.
	*/
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	/*
	*  Get a handle for the user class.
	*/
	try {
		dbUtilsUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbUser - $e";
		assert 1 == 2;
	}
	
	try {
		myXML = new XmlSlurper().parseText(arow);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify only one row was returned..
		*/
		log.info "ASSERT - Row Size is 1";
		assert myXML.ResultSet.Row.size() == 1;

		String assertRaw = myXML.ResultSet.Row.NODE_USER_SAML_ASSERTION_PART1.text() +
				myXML.ResultSet.Row.NODE_USER_SAML_ASSERTION_PART2.text();

		/*
		*  Base64 decode the assertion clob
		*/
		byte [] xmlBytes = Base64.decode(assertRaw);
		assertionXML = new String(xmlBytes, "UTF8");

		assert assertionXML.length() > 1;

		tC.setPropertyValue("computedAssertionXML", assertionXML);
	}
	/*
	*  Now parse the assertion XML
	*/
	try {
		myXML = new XmlSlurper().parseText(assertionXML).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", saml2p: "urn:oasis:names:tc:SAML:2.0:protocol");
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify the assertion body matches that contained in
		*  NODE_USER_SAML_ASSERTION table
		*/
		log.info "Asserting STSGET Body XML matches NODE_USER_SAML_ASSERTION.NODE_USER_SAML_ASSERTION";
		assert tC.getPropertyValue("computedAssertionXML").toString() == tC.getPropertyValue("computedAssertionXML").toString()
		
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Validate DEVICE_AUTH_TOKEN row" id="735ec34e-e8ae-4041-9832-e691bf5e061b">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbutils;

String expectstatus = "deleted";
String dbstatus = "";

if (tC.getPropertyValue("tokentype") == tP.getPropertyValue("urntokenType_deviceauthtoken") &amp;&amp;
	tC.getPropertyValue("actionIgnoreAuthTokenStatus") != "true") {
	if (tC.getPropertyValue("expectErrTypeSTSGet") != "SUCCESS") {
		expectstatus = "active";
	}
	try {
		dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
		dbstatus = dbUtils.deviceAuthTokenGetStatus(tC.getPropertyValue("rauthToken"));	
	}
	catch (Throwable e) {
		log.info "ERROR - dbUtils.deviceAuthTokenGetStatus - $e";
	}
	finally {
		log.info "Asserting dbstatus[$dbstatus] == expectstatus[$expectstatus] - " + 
			tC.getPropertyValue("rauthToken").toString();
		assert dbstatus == expectstatus  ;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="197e8c68-2dcb-4fdd-bfd0-b5be191c514e">
        <con:settings/>
        <con:config>
          <script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
//import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	
int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/
byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("assert", base64encodeStr);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return extracted Properties back to calling Test Case" id="37b724d4-6de0-4fbc-9887-690ef4af4e3a">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertXML",tC.getPropertyValue("assertXML"));
callTC.setPropertyValue("assert",tC.getPropertyValue("assert"));
callTC.setPropertyValue("assertId",tC.getPropertyValue("assertId"));

String acctID = tC.getPropertyValue("assertionAccountId");
String userID = tC.getPropertyValue("assertionUserId");

if (acctID != null &amp;&amp; acctID.length() > 0) {
	callTC.setPropertyValue("assertionAccountId",acctID.substring(acctID.lastIndexOf(":")+1,acctID.length()));
	callTC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue("assertionAccountIdFULL"));
} else {
	callTC.setPropertyValue("assertionAccountId","ERROR");
}
if (userID != null &amp;&amp; userID.length() > 0) {
	callTC.setPropertyValue("assertionUserId",userID.substring(userID.lastIndexOf(":")+1,userID.length()));
	callTC.setPropertyValue("assertionUserIdFULL",tC.getPropertyValue("assertionUserIdFULL"));
} else {
	callTC.setPropertyValue("assertionUserId","ERROR");
}
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep>
      
      <con:properties>
        
        
        <con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D3DDE07D9379A73FE0401F0A079918A0</con:value></con:property><con:property><con:name>actionAuthHeader</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionIgnoreAuthTokenStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionSkipNodeIDCheck</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>actionSkipNodeUserCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affilnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZbV+o6EH7fv6KrPrpK04IUuoS1QEDr9spNjy9nxXSAaJuWJuXir99JsRUQPe7z1JXpZOabmS9fcspxGNhui3NIBI2Y5nUa+r8WQTWngiyjAk7VqEzqjoFPLMfwLb+KnmvP5UoNdM3jPAWPcYGZaOg2ssqG3GLbQ1R3UdW1yqWKU3/StTEkXIaWLiWka6swYNzN0jb0NGFuhDnlLsMhcFcQd9C6vnKlp4tzTHrzdIMyS5g0Z0LErmmSkg8EgoCUSBSap+aOz6nP3QGdMizSBN5z+ryhv+9dLpelZbkUJVPTRgiZqG5KH5/T6ZHe/JVvBt9jk2izPsMsYpTggL5hBeoaxCzytVYwjRIqZuEXoS3TQiq0AStiEKvCjnTzI0GG7oeRdkAmHBt8hq08WB8mkAAjoI36XkM/+tkEN3uHCWZ8EiUh31v/HSRgCwiiGHyD55Xl6H4e8UC7mqdAXI+RIOV0ATeKJjEmwLW7BCZ0dUW5JJ/PtWz82ornDAPyNyM5NbdxStjmgc506BS4+D/z2p7VJsoYByk0V92Z93xupjaC8Gx8/nTbCwRazG8nj6NGBmHbeQOqGPX7ep+oBa/eN10EtWvf+efikT6EYToQSXs+IpeX5/fTCpu0X6dn0eLYTAmsCaDj9svD2Brdza3jkd2OT9ZnV2/e+u3urnzxcjxdi1+L4H7Jhi9ea/zW7xM6Gt0Tk1w+vVivN+sxrKqvb0+XT8NWkPYq3YE/CoPffcQeeh2zf7N8jY8v8NC+o6OLKojw8lccn6P0fBL8pp3jF68XIF5rfNS0XcOuMZeDQfr8AkTkS0UNr6P15Lyw+F5alIX6xiRzdWOlT1wAE3pT7VKy4qZSfKjvymFu1p1yp9NFTqderlVaTrnXRfJ09VALOfW6VWuhXH82KPYgnkVsQlUupbAb/nwPkIQuB+ZDYiyilMyA699E7GCBNY/15cGIGIdhJBW8a1frJ+VWu1e1UbfsoE6li9p2tVrrdWsnTtvRtZtI3LLbpDURkOyot2XvqHcfCI0pKIlXPOeS6FzIlszxIhWBVVrgEoNUXgKJ0mHXrtROTE7DOAAF2AwjPw2gFM/irEEm33xtAxOeWZ0qQtkB/LK+/X95K6SPT5UDV8W0QY4TDtxDKK/k64pPtivOw7dSn6pzJvsqEko2SHZ/fdBF8aTgiiopx1y47ht2wpr7FRWZ/AUlBeOLa1qqvNSBZj6QOS7NS+likWYjcJTGJTK8aZmoag6ApFKo1sPoFZhZhDB/dEcUqPcyF/ZdfKmYsYHAAkJJGC1b/uCBMACuHgieJPzqp6+PnZSybwJW4pDtLJDvCIX426cGcYnyk+Y7+VlGif8xrgOxtvLIOuWrQFA2VSt1I6y/YAWJZFgqJSxKtoMfCnAo+a6xaHKBRUg2PacCvv6jKW1q6JiQKGXC6+iZYVsvM5xiHYP74fQpTKbJ75fsin95yT5eXw2kcoVYL3zpfzsbNKMLkc9L6Z9haegr+V6Uydl0S5/fAR6WaOdbid6tpPnJ/Nmy1dP989D8Aw==</con:value></con:property>
        
        
        
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>assertCreatingNodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value>_322f5cc3-b2eb-4012-b56f-bf7765fb3c1b</con:value></con:property>
        
        
        
        
        
        
        <con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D3DDE07D9374A73FE0401F0A079918A0</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:D3DDE07D9374A73FE0401F0A079918A0</con:value></con:property><con:property><con:name>assertionAudienceRestriction</con:name><con:value>2013-01-22T09:07:38.605Z</con:value></con:property><con:property><con:name>assertionNotBefore</con:name><con:value>2013-01-22T09:07:38.605Z</con:value></con:property><con:property><con:name>assertionNotOnOrAfter</con:name><con:value>2013-01-22T15:07:48.605Z</con:value></con:property><con:property><con:name>assertionROW</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <NODE_USER_SAML_ASSERTION_OID>D14403889CF4F3ECE0401F0A07992161</NODE_USER_SAML_ASSERTION_OID>
      <nodeid>7600</nodeid>
      <NODE_USER_SAML_ASSERTION_PART1>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHNhbWwycDpSZXNwb25zZSBDb25zZW50PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDp1bnNwZWNpZmllZCIgRGVzdGluYXRpb249Imh0dHBzOi8vc3RkZWNxYXZ1dGwxLnZhLm5ldXN0YXIuY29tOjI0ODUvc2ltcGxlc2FtbC9tb2R1bGUucGhwL3NhbWwvc3Avc2FtbDItYWNzLnBocC83NjAwIiBJRD0iXzdjN2U5YmZlLTE1ZWMtNDM2YS1iNjIyLTk1OTdlOWQxNjc3MCIgSW5SZXNwb25zZVRvPSJfNjI0RDQ5MUMwRjVFMzBBQjEzQ0EzRTk4MjE4RjhBRjUiIElzc3VlSW5zdGFudD0iMjAxMi0xMi0yMFQwNjo0NTo1My45NzNaIiBWZXJzaW9uPSIyLjAiIHhtbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIj48c2FtbDI6SXNzdWVyIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj5odHRwOi8vYy5kZWNlbGxjLmNvbS88L3NhbWwyOklzc3Vlcj48c2FtbDJwOlN0YXR1cz48c2FtbDJwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIvPjwvc2FtbDJwOlN0YXR1cz48c2FtbDI6QXNzZXJ0aW9uIElEPSJfMzIyZjVjYzMtYjJlYi00MDEyLWI1NmYtYmY3NzY1ZmIzYzFiIiBJc3N1ZUluc3RhbnQ9IjIwMTItMTItMjBUMDY6NDU6NTMuOTczWiIgVmVyc2lvbj0iMi4wIiB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+PHNhbWwyOklzc3Vlcj5odHRwOi8vYy5kZWNlbGxjLmNvbS88L3NhbWwyOklzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj4KPGRzOlNpZ25lZEluZm8+CjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+CjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz4KPGRzOlJlZmVyZW5jZSBVUkk9IiNfMzIyZjVjYzMtYjJlYi00MDEyLWI1NmYtYmY3NzY1ZmIzYzFiIj4KPGRzOlRyYW5zZm9ybXM+CjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPgo8ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIj48ZWM6SW5jbHVzaXZlTmFtZXNwYWNlcyBQcmVmaXhMaXN0PSJkcyBzYW1sMiB4cyIgeG1sbnM6ZWM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvZHM6VHJhbnNmb3JtPgo8L2RzOlRyYW5zZm9ybXM+CjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIvPgo8ZHM6RGlnZXN0VmFsdWU+SWdLTEIrK3JMbnhuY1BFckNpc3FNOVBVb3BvPTwvZHM6RGlnZXN0VmFsdWU+CjwvZHM6UmVmZXJlbmNlPgo8L2RzOlNpZ25lZEluZm8+CjxkczpTaWduYXR1cmVWYWx1ZT4KTjJnYTF5cG4xeHpHUTFMZFFLOFVTKys0blpwd1lkSGlYNGpjYndwZ0lqTklQMWw2MlFod0ZRUllqcWhIQVZZUm4zTWtUQWtYRHI3TgpFQno1c2hiSzFIbERLZ0V5MVBVdXVwWFc3Ly9uversionMajorpRS0xWZUR0OVV0a205eEplNXplNERPakYwNjcwZTE5S0FkeWVoR09HTzJFek90CnNjNlRZSWROOUVZRHAzWC9RTzg9CjwvZHM6U2lnbmF0dXJlVmFsdWU+CjwvZHM6U2lnbmF0dXJlPjxzYW1sMjpTdWJqZWN0PjxzYW1sMjpOYW1lSUQgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDpwZXJzaXN0ZW50Ij51cm46ZGVjZTp1c2VyaWQ6b3JnOmRlY2U6RDE0NDAzODg5Q0RGRjNFQ0UwNDAxRjBBMDc5OTIxNjE8L3NhbWwyOk5hbWVJRD48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjbTpzZW5kZXItdm91Y2hlcyI+PHNhbWwyOlN1YmplY3RDb25maXJtYXRpb25EYXRhIEluUmVzcG9uc2VUbz0iXzYyNEQ0OTFDMEY1RTMwQUIxM0NBM0U5ODIxOEY4QUY1IiBOb3RPbk9yQWZ0ZXI9IjIwMTItMTItMjBUMDk6NDU6NTMuOTczWiIgUmVjaXBpZW50PSJodHRwczovL3N0ZGVjcWF2dXRsMS52YS5uZXVzdGFyLmNvbToyNDg1L3NpbXBsZXNhbWwvbW9kdWxlLnBocC9zYW1sL3NwL3NhbWwyLWFjcy5waHAvNzYwMCIvPjwvc2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbj48L3NhbWwyOlN1YmplY3Q+PHNhbWwyOkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDEyLTEyLTIwVDA2OjQ1OjQzLjk3M1oiIE5vdE9uT3JBZnRlcj0iMjAxMi0xMi0yMFQxMjo0NTo1My45NzNaIj48c2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48c2FtbDI6QXVkaWVuY2U+dXJuOmRlY2U6b3JnOm9yZzpkZWNlOjc2MDE8L3NhbWwyOkF1ZGllbmNlPjxzYW1sMjpBdWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6NzYwMjwvc2FtbDI6QXVkaWVuY2U+PHNhbWwyOkF1ZGllbmNlPnVybjpkZWNlOm9yZzpvcmc6ZGVjZTo3NjAzPC9zYW1sMjpBdWRpZW5jZT48c2FtbDI6QXVkaWVuY2U+dXJuOmRlY2U6b3JnOm9yZzpkZWNlOjc2MDQ8L3NhbWwyOkF1ZGllbmNlPjxzYW1sMjpBdWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6NzYwMDwvc2FtbDI6QXVkaWVuY2U+PC9zYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPjwvc2FtbDI6Q29uZGl0aW9ucz48c2FtbDI6QWR2aWNlPjxzYW1sMjpBc3NlcnRpb25VUklSZWY+aHR0cHM6Ly9xYS5xLnversionMinordnUuY29tOjcwMDEvcmVzdC8xLzA2L1NlY3VyaXR5VG9rZW4vQXNzZXJ0aW9uL18zMjJmNWNjMy1iMmViLTQwMTItYjU2Zi1iZjc3NjVmYjNjMWI8L3NhbWwyOkFzc2VydGlvblVSSVJlZj48L3NhbWwyOkFkdmljZT48c2FtbDI6QXV0aG5TdGF0ZW1lbnQgQXV0</NODE_USER_SAML_ASSERTION_PART1>
      <NODE_USER_SAML_ASSERTION_PART2>aG5JbnN0YW50PSIyMDEyLTEyLTIwVDA2OjQ1OjUzLjk3M1oiIFNlc3Npb25JbmRleD0iXzMyMmY1Y2MzLWIyZWItNDAxMi1iNTZmLWJmNzc2NWZiM2MxYiI+PHNhbWwyOkF1dGhuQ29udGV4dD48c2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY+dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6UGFzc3dvcmQ8L3NhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPjxzYW1sMjpBdXRoZW50aWNhdGluZ0F1dGhvcml0eT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6Y29vcmRpbmF0b3I8L3NhbWwyOkF1dGhlbnRpY2F0aW5nQXV0aG9yaXR5Pjwvc2FtbDI6QXV0aG5Db250ZXh0Pjwvc2FtbDI6QXV0aG5TdGF0ZW1lbnQ+PHNhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48c2FtbDI6QXR0cmlidXRlIE5hbWU9ImFjY291bnRJRCIgTmFtZUZvcm1hdD0idXJuOmRlY2U6dHlwZTphY2NvdW50SUQiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJ4czpzdHJpbmciPnVybjpkZWNlOmFjY291bnRpZDpvcmc6ZGVjZTpEMTQ0MDM4ODlDRDBGM0VDRTA0MDFGMEEwNzk5MjE2MTwvc2FtbDI6QXR0cmlidXRlVmFsdWU+PC9zYW1sMjpBdHRyaWJ1dGU+PC9zYW1sMjpBdHRyaWJ1dGVTdGF0ZW1lbnQ+PC9zYW1sMjpBc3NlcnRpb24+PC9zYW1sMnA6UmVzcG9uc2U+</NODE_USER_SAML_ASSERTION_PART2>
      <NODE_USER_SAML_UUID>_322f5cc3-b2eb-4012-b56f-bf7765fb3c1b</NODE_USER_SAML_UUID>
      <CREATED_DATE>2012-12-20 06:45:54.0</CREATED_DATE>
      <NODE_USER_ID>D14403889CE5F3ECE0401F0A07992161</NODE_USER_ID>
      <NODE_ACCOUNT_ID>D14403889CD7F3ECE0401F0A07992161</NODE_ACCOUNT_ID>
      <STATUS>active</STATUS>
      <EXPIRATION_DATE>2012-12-20 12:45:54.0</EXPIRATION_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D3DDE07D9384A73FE0401F0A079918A0</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:D3DDE07D9384A73FE0401F0A079918A0</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_4dad1071-c3a1-4283-a883-2ea7f9454943</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authHeaderString</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authHeaderValue</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>computedAssertionXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2p:Response Consent="urn:oasis:names:tc:SAML:2.0:consent:unspecified" Destination="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/7600" ID="_7c7e9bfe-15ec-436a-b622-9597e9d16770" InResponseTo="_624D491C0F5E30AB13CA3E98218F8AF5" IssueInstant="2012-12-20T06:45:53.973Z" Version="2.0" xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol"><saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">http://c.decellc.com/</saml2:Issuer><saml2p:Status><saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/></saml2p:Status><saml2:Assertion ID="_322f5cc3-b2eb-4012-b56f-bf7765fb3c1b" IssueInstant="2012-12-20T06:45:53.973Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_322f5cc3-b2eb-4012-b56f-bf7765fb3c1b">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>IgKLB++rLnxncPErCisqM9PUopo=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
N2ga1ypn1xzGQ1LdQK8US++4nZpwYdHiX4jcbwpgIjNIP1l62QhwFQRYjqhHAVYRn3MkTAkXDr7N
EBz5shbK1HlDKgEy1PUuupXW7//nWZQKLVeDt9Utkm9xJe5ze4DOjF0670e19KAdyehGOGO2EzOt
sc6TYIdN9EYDp3X/QO8=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:D14403889CDFF3ECE0401F0A07992161</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_624D491C0F5E30AB13CA3E98218F8AF5" NotOnOrAfter="2012-12-20T09:45:53.973Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/7600"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2012-12-20T06:45:43.973Z" NotOnOrAfter="2012-12-20T12:45:53.973Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:7601</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:7602</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:7603</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:7604</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:7600</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_322f5cc3-b2eb-4012-b56f-bf7765fb3c1b</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2012-12-20T06:45:53.973Z" SessionIndex="_322f5cc3-b2eb-4012-b56f-bf7765fb3c1b"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:D14403889CD0F3ECE0401F0A07992161</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></saml2p:Response>]]></con:value></con:property><con:property><con:name>connection</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>3157</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentType</con:name><con:value>text/xml;charset=ISO-8859-1</con:value></con:property><con:property><con:name>currentDBTOD</con:name><con:value>2013/01/22 09:08:52</con:value></con:property><con:property><con:name>dbassertionNodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dbassertionNodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dbCreateExpireHoursDiff</con:name><con:value>723</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <DIFFERENCE_HOURS>720</DIFFERENCE_HOURS>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>deviceAuthToken</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectNodeUserRowCount</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>isDeviceFlag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">7600</con:value></con:property><con:property><con:name>nodeidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:7600</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>QC_Id</con:name><con:value>86717</con:value></con:property><con:property><con:name>rauthToken</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>ISC_TestCases</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property>
        
        
        
        
        
        
        
        
        
      <con:property><con:name>stsaudience</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:7601,urn:dece:org:org:dece:7602,urn:dece:org:org:dece:7603,urn:dece:org:org:dece:7604</con:value></con:property><con:property><con:name>stsaudienceIgnoreAll</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsaudienceIgnoreNodes</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsExpectedAffiliationListSize</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>stsIgnoreAssertTimesFlag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>SEC058_COO_ReplacementTokenUri</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:saml2</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">username_20130122_023616</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C9E2D01D30AFA458DFA4AA553CB451B7</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_4dad1071-c3a1-4283-a883-2ea7f9454943" IssueInstant="2013-01-22T09:07:48.605Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_4dad1071-c3a1-4283-a883-2ea7f9454943">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>W+XqZ8JPxQWlOU7hka5kgjruzFI=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
TF9MuaqRJH03TfTGE3l0t8tVW1G5tFDYhDt4gQo039yrilNj7+UyQmoeCScD3CieFcr63Vm6Xbgh
72PbWYIlBwVL+n8E1s2sXDzhfwETmM/e3L0zuCtEdC41mbbQNMRBxG2cc3YyTHpK8dZZbx8F2TVA
e5zdmkaYTdeaPU9Bnm8=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:D3DDE07D9384A73FE0401F0A079918A0</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_ABBF88162E35742F0906F52D24C71D89" NotOnOrAfter="2013-01-22T12:07:48.605Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/7600"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2013-01-22T09:07:38.605Z" NotOnOrAfter="2013-01-22T15:07:48.605Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:7601</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:7602</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:7603</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:7604</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:7600</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_4dad1071-c3a1-4283-a883-2ea7f9454943</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2013-01-22T09:07:48.605Z" SessionIndex="_4dad1071-c3a1-4283-a883-2ea7f9454943"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:D3DDE07D9374A73FE0401F0A079918A0</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenGet API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="640da553-2527-4e72-90b0-b74bcf35a468">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="f6db540e-2c6b-4ce9-a612-8208dc4ea2b3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("endPoint",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("expectErrTypeRightsTokenCreate",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenFULL",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="0c92eeda-50ab-4fad-adbc-e0c4c8c22c09">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("rightstokenFULL",callTC.getPropertyValue("rightstokenFULL"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("expectErrTypeRightsTokenCreate",callTC.getPropertyValue("expectErrTypeRightsTokenCreate"));

log.info "expectErrTypeRightsTokenCreate: "+tC.getPropertyValue("expectErrTypeRightsTokenCreate");
if (tC.getPropertyValue("expectErrTypeRightsTokenCreate") == null || tC.getPropertyValue("expectErrTypeRightsTokenCreate") == "null"|| tC.getPropertyValue("expectErrTypeRightsTokenCreate") == "") {
		tC.setPropertyValue("expectErrTypeRightsTokenCreate","RightsTokenNotFound");
}
if (tC.getPropertyValue("rightstokenFULL") == null || tC.getPropertyValue("expectErrTypeRightsTokenCreate") == "null" ) {

	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
		tC.setPropertyValue("rightstokenFULL","urn:dece:rightstokenid:org:dece:D3CD9D93C110059998E0401F0A07992FB8");
	}else{
		tC.setPropertyValue("rightstokenFULL", URLEncoder.encode("urn:dece:rightstokenid:org:dece:D3CD9D93C110059998E0401F0A07992FB8", "UTF-8"));
	}
		
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish attributes based on NodeID" id="162da169-01c5-4518-b18c-5e648226b9c2">
        <con:settings/>
        <con:config>
          <script>import java.util.StringTokenizer; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tC.getPropertyValue("nodeid").toString();

/*
*  See if we are a device
*/
switch (nodeid) {
	case tP.getPropertyValue("nodeIdDEV").toString():
		urlEndPoint = "device";
		tC.setPropertyValue("isDeviceFlag","true");
		break;
	default:
		urlEndPoint = "coordinator";
		tC.setPropertyValue("isDeviceFlag","false");
		break;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Construct URL" id="0e54a0a8-75c6-4286-adec-5da7759dec0e">
        <con:settings/>
        <con:config><script>import java.util.StringTokenizer; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

Boolean appliedFirstNode = false;
String url = "";
String anode = "";
String urlEndPoint = "";
String nodeid = tC.getPropertyValue("nodeid").toString();

log.info "nodeid[$nodeid]";

if (tC.getPropertyValue("isDeviceFlag") == "true") {
	urlEndPoint = "device";
}

log.info "urlEndPoint: " + urlEndPoint;

/*
*  Set the endpoint
*/
switch (urlEndPoint) {
	case "device":
	tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHostd")+":"+tP.getPropertyValue("targetPortd"));
			url =  
			"rest/" + tP.getPropertyValue("versionMajor").toString() +
			"/" + tP.getPropertyValue("versionMinor").toString() +
			"/Account/"+tC.getPropertyValue("NODE_ACCOUNT_ID_FULL")+
			"/RightsToken/"+
			tC.getPropertyValue("rightstokenFULL");
		break;
	case "coordinator":
	default:
	tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));
		url =
			"rest/" + tP.getPropertyValue("versionMajor").toString() +
			"/" + tP.getPropertyValue("versionMinor").toString() +
			"/Account/" +
			tC.getPropertyValue("NODE_ACCOUNT_ID_FULL") +
			"/RightsToken/" +
			tC.getPropertyValue("rightstokenFULL");
	break;
}

log.info "url[$url]";
tC.setPropertyValue("endPoint","$url");
//testRunner.testCase.getTestStepByName('GET - RightsTokenGet').httpRequest.setEndpoint(url)</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PEM Set" id="6e7d03e8-c515-43a5-81e4-713c8b1ac6e4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - RightsTokenGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="GET - RightsTokenGet" id="0abd4b97-b7b3-402a-a3fc-bfbb4bf05d55"><con:settings/><con:config service="Rights Token" resourcePath="/${#TestCase#endPoint}" methodName="Rights Token Get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - RightsTokenGet" mediaType="application/xml;charset=UTF-8" sslKeystore="DEV_concat.pem" accept="" id="e488a6bd-ff1d-4e4c-bc1a-ca539f0f1cbb"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 Assertion=${#TestCase#assert}"/>
  &lt;con:entry key="x-dece-ApplicationAuthorization" value="dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>https://${#Project#targetURL}</con:endpoint><con:request/><con:originalUri>https://qa.d.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:0793A4764AA3082FE05307991F0A57A8/RightsToken/urn:dece:rightstokenid:org:dece:D3CD9D93C110059998E0401F0A07992FB8</con:originalUri><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract response Headers and Body" id="00cc19d3-b323-4b64-8f1f-c4074f13006a">
        <con:settings/>
        <con:config><script>import org.xml.sax.SAXException; 
import org.xml.sax.SAXParseException; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep = tC.getTestStepByName('GET - RightsTokenGet');
def myXML;

tC.setPropertyValue("respbody",null);
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));

int errSize = 0;
int i = 0;
boolean expectLocation = null;
String xmlData = "";
String errId = "";
String respstatus = null;
String respconnection = null;
String respcontentType = null;
String respcontentLength = null;
String respLocation = null;
String respbody = null;
String expectstatus = null;
String expectconnection = null;
String expectcontentType = null;
String expectcontentLength = null;
String urnError = tP.getPropertyValue("urnError").toString();
String expectErrorResponse = tC.getPropertyValue("expectErrTypeRightsTokenCreate").toString();
String major = tP.getPropertyValue("versionMajor").toString();
String minor = tP.getPropertyValue("versionMinor").toString();


try {
	respbody = tStep.httpRequest.response.getResponseContent().toString();
} catch (e) {
	log.info "getResponseContent failure! - $e";
} finally {
	tStep.httpRequest.response.responseHeaders.each() { header, value ->
		switch (header) {
			case "Location": 
				respLocation = value[0];
				break;
			case "#status#": 
				respstatus = value[0]; 
				break;
			case "Connection": 
				respconnection = value[0]; 
				break;
			case "Content-Type": 
				respcontentType = value[0]; 
				break;
			case "Content-Length": 
				respcontentLength = value[0]; 
				break;
			case "Transfer-Encoding": 
				resphttpContentEncoding = value[0]; 
				break;
		}
	}
}

log.info "expectErrorResponse -- [$expectErrorResponse]";

switch (expectErrorResponse) {
	case "SUCCESS":
		expectstatus = "HTTP/1.1 200 OK";
		errorID = "";
		break;
	case "AccountNotActive":
		expectstatus = "HTTP/1.1 403 Forbidden";
		errorID     = urnError + expectErrorResponse;
		break;
	case "UserNotActive":
		expectstatus = "HTTP/1.1 403 Forbidden";
		errorID     = urnError + expectErrorResponse;
		break;
	case "RoleInvalid":
		expectstatus = "HTTP/1.1 403 Forbidden";
		errorID     = urnError +"Security:" +expectErrorResponse;
		break;
		case "InvalidAssertion":
		expectstatus = "HTTP/1.1 403 Forbidden";
		errorID     = urnError + "securitycontext:unauthorized";
		break;
		case "unauthorized":
		expectstatus = "HTTP/1.1 403 Forbidden";
		errorID     = urnError + "securitycontext:"+expectErrorResponse;
		break;
	case "RightsTokenNotFound":
	default:
		expectstatus = "HTTP/1.1 404 Not Found";
		errorID     = urnError + expectErrorResponse;
		break;
}

/*
*  HTTP Header Checkes...
*/
log.info "----- HTTP Header Validations ------";

log.info "expectstatus[$expectstatus] - respstatus[$respstatus]";
assert expectstatus == respstatus;

/*
*   -------------------- ERROR --------------------
*/
if (tC.getPropertyValue("expectErrorResponse") != "SUCCESS") {
	tC.setPropertyValue("respbody",respbody);
	try {
		myXML = new XmlSlurper().parseText(respbody);
	} catch (IOException e) {
		log.info "ERROR!  XmlSlurper.parseText IOException error -- $e";
	} catch (SAXException e) {
		log.info "ERROR!  XmlSlurper.parseText SAXException error -- $e";
	}
	finally {
		log.info "-----  HTTP BODY VERFICATION for ERROR -------";

		String respErrorID = myXML.Error[0].@ErrorID.toString();

		// ErrorCode
		this.log.info "Expected errorID [$errorID] - respErrorID[$respErrorID]";
		assert errorID == respErrorID;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify &lt;RightsTokenList> AccountID" id="3ca833f9-4e49-41ef-9efb-5cd5c0a7a772">
        <con:settings/>
        <con:config><script>import org.xml.sax.SAXException; 
import org.xml.sax.SAXParseException; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;

String accountid = tC.getPropertyValue("assertionAccountIdFULL").toString();
String userid = tC.getPropertyValue("assertionUserIdFULL").toString();

if (tC.getPropertyValue("expectErrTypeRightsTokenCreate") == "SUCCESS") {
	String respbody = tC.getPropertyValue("respbody").toString();
	
	assert accountid.length() > 0;
	assert respbody.length() > 0;
	
	try {
		myXML = new XmlSlurper().parseText(respbody);
	} catch (IOException e) {
		log.info "ERROR!  XmlSlurper.parseText IOException error -- $e";
	} catch (SAXException e) {
		log.info "ERROR!  XmlSlurper.parseText SAXException error -- $e";
	}
	finally {
		/*
		*  They remove user and account info from RTGet  :(
		*/
	}
}
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZRc6o6EP4rDn28g0SFUpjqDGrtVWvbI/ac1pc7MQRNC8EmQfT8+pOgUrS213ufnF03337J7n7LNYdxVHc9zjETJKGVdRxR7ubeppYy6iaQE+5SGGPuCuT63ujOrVeBC/dHtEq/29T+QTN0ZYYA6DZwGrpp2ki/Mi9rOm7M7MYsQGHQsGUo5ynuUy4gFU2tDmqWDuo6sCbAdM1L15LINphqlZ+YcYktQ6pA25Fa86a2EGLpGkaWZdWsUU3Y3KgDUDOeR3c+WuAYaq3r7Y3yRKy1i0fVACMcRaiKkti4Ng5irgPu+mROoUgZ3uUKvsoFDOAYMibgZH6hFWdx0KdhkpsdSBNKEIzIb6jeZ4TFIgkqXjRPGBGL+MtL1IAC1vEa6ahm0gvNOKR2JtABQ8ahzhewtsMa4xAzTBGuPI37Te3ivKrlRycMUh4mLOaH5n/jg+kKR8kSBzrfX2tH7XzAEy/VusbI7VMUpZys8L1q1iVEmO+qidH5UJVHhkOyviNcNuiaK3ZGmd6RuX2NLpljLv5PgUrF2YL8hFGKW/d48TqbvIjVxiB+Fi575nDs/52hZ/jUzAmUg3NHUdqtedSURRNtT0C7c5tO149PmTm8/3G3nv1waGp6DfH8l/1IX7wwbPuXqMOHt9PBYrl5owPM+7NFshkMnd+1aRRl8XieWv2ogbzXYPI+QWlmv70nL1467FiTaTsDbLWa457xBgN/9cvrWSSrj5Kru4jNBrexI6YbP72h4Sh7v2cNtiLemo1WaArrg3F3MH56CH7Z8abT3vSbxXVK/A99+5n309krRmJvqjbodys9WSUovhcz5SGBHuah7lKJDxeYCq2lTintcFMpdyRwZQ23NrixgOe1O91GvQMcz7sBVgNYjlPrAc9q1xt7kdmyOKLYSWhIVC4ludu2+Z4git0Zhgwz7RukLhSwcp+IB/rAvFBgdqiwdllhVVt/CXT83z6njAmICuAqTRvL98InVNzcq/gxl/pptTf2+F6wIqgoZ7GUpFbJ7s61nMtpeofVoJquVqkSc9dWU8zkLBiKhwHqho9RKudvM0neMDUKFOMssdvf/Dh54T+kmIoF9QUUOJbdUsnNM7abj7nabn0a4PW5q/MgpSyEwGtxyteJ5GZWjL9d3shFKk66H+VPlrCguOAprFIeeU+53AShc2Upodt8DImajmJCUCJhiRzRhJXBTwGcSn7oLB654CIEI7NU4K//qajZa2oQoSSlot/VckdZD3KeYrPE7kfQJ5hccopvEPLvHyE6yVsAYfnlwkmOr1aJyyUgnZc0ZZf0WFZ6badnO45n1bxuWVacK+ujPw/YtT65P3tK73Tc460/</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE4D562F749DAA667E0401F0A059948E2</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:E4D56C0148D5ED03E0401F0A05995A44</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RightsTokenNotFound</con:value>
        </con:property>
        <con:property>
          <con:name>isDeviceFlag</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86720</con:value>
        </con:property>
        <con:property>
          <con:name>respbody</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:RightsTokenNotFound">
      <Reason Language="en">The rights token was not found.</Reason>
      <OriginalRequest>http://stdecqavap1.va.neustar.com:8009/rest/2015/02/Account/urn:dece:accountid:org:dece:0E50FB9F799A51ADE05305991F0A9857/RightsToken/urn:dece:rightstokenid:org:dece:D3CD9D93C110059998E0401F0A07992FB8</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/2015/02/error/en/ErrorList.html#RightsTokenNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>3_P1 Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_32001 - STS GET BasicAuth - Device - Username in 'active' status - P1</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:D3CD9D93C110059998E0401F0A07992FB8</con:value>
        </con:property>
      <con:property><con:name>endPoint</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">rest/2015/02/Account/urn:dece:accountid:org:dece:0E50FB9F799A51ADE05305991F0A9857/RightsToken/urn:dece:rightstokenid:org:dece:D3CD9D93C110059998E0401F0A07992FB8</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DEV_concat.pem</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E50FB9F799A51ADE05305991F0A9857</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreate API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="cacd8880-ecab-49c9-85d6-733099bbcaf3">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="c8990e40-d86c-4def-bde6-2b462d65020a">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assert",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("expectErrTypeRightsTokenCreate",null);
tC.setPropertyValue("cid",null);
tC.setPropertyValue("alid",null);
tC.setPropertyValue("rightstokenid",null);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="e1c034fa-ab34-49c7-a4d3-ed6404c3217d">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));

tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("expectErrTypeRightsTokenCreate",callTC.getPropertyValue("expectErrTypeRightsTokenCreate"));
tC.setPropertyValue("cid",callTC.getPropertyValue("cid"));
tC.setPropertyValue("alid",callTC.getPropertyValue("alid"));

if (tC.getPropertyValue("cid") == null || tC.getPropertyValue("cid") == "null") {
	tC.setPropertyValue("cid",tP.getPropertyValue("cid"));
}
if (tC.getPropertyValue("alid") == null || tC.getPropertyValue("alid") == "null") {
	tC.setPropertyValue("alid",tP.getPropertyValue("alid"));
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PEM Set" id="32921357-7725-4541-8905-fb5111e3255b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - RightsTokenCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="POST - RightsTokenCreate" id="d57b6712-454c-4e82-8aa2-29a48562b75c"><con:settings/><con:config service="Rights Token" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{RIGHTSTOKEN}/RightsToken" methodName="Rights Token Create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - RightsTokenCreate" mediaType="application/xml;charset=UTF-8" postQueryString="false" accept="" sslKeystore="80008001.pem" id="95692088-f049-407a-82a4-ae0e00a40113"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="${#TestCase#alid}" ContentID="${#TestCase#cid}">
	<ns4:SoldAs>
		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName>
		<ns4:ContentID>${#TestCase#cid}</ns4:ContentID>
	</ns4:SoldAs>
	<ns4:RightsProfiles>
		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
			<ns4:CanDownload>true</ns4:CanDownload>
			<ns4:CanStream>true</ns4:CanStream>
		</ns4:PurchaseProfile>
		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
			<ns4:CanDownload>true</ns4:CanDownload>
			<ns4:CanStream>true</ns4:CanStream>
		</ns4:PurchaseProfile>
		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd">
			<ns4:CanDownload>true</ns4:CanDownload>
			<ns4:CanStream>true</ns4:CanStream>
		</ns4:PurchaseProfile>
	</ns4:RightsProfiles>
	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc>
	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location>
		<ns4:Preference>1</ns4:Preference>
	</ns4:FulfillmentWebLoc>
	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location>
		<ns4:Preference>1</ns4:Preference>
	</ns4:FulfillmentWebLoc>
	<ns4:FulfillmentManifestLoc xsi:type="ns4:ResourceLocation-type">
		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location>
		<ns4:Preference>3</ns4:Preference>
	</ns4:FulfillmentManifestLoc>
	<ns4:FulfillmentManifestLoc  xsi:type="ns4:ResourceLocation-type">
		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location>
		<ns4:Preference>1</ns4:Preference>
	</ns4:FulfillmentManifestLoc>
	<ns4:StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">  
		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location>    
		<ns4:Preference>1</ns4:Preference>  
	</ns4:StreamWebLoc> 
	<ns4:StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">  
		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location>    
		<ns4:Preference>1</ns4:Preference>  
	</ns4:StreamWebLoc>	
	<ns4:PurchaseInfo>
		<ns4:NodeID>urn:dece:org:org:dece:${#TestCase#nodeid}</ns4:NodeID>
		<ns4:RetailerTransaction>RetailerTransaction_1_node0799_RetailerNode</ns4:RetailerTransaction>
		<ns4:PurchaseAccount>${#TestCase#assertionAccountIdFULL}</ns4:PurchaseAccount>
		<ns4:PurchaseUser>${#TestCase#assertionUserIdFULL}</ns4:PurchaseUser>
		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime>
	</ns4:PurchaseInfo>
</ns4:RightsTokenData>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="RIGHTSTOKEN" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="4248d9a5-ff99-4787-bfec-a2ef27e4d660">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep = tC.getTestStepByName("POST - RightsTokenCreate");
def assertionAccountIdFULL  = tC.getPropertyValue("assertionAccountIdFULL");
def urnRightsToken = tP.getPropertyValue("urnRightsToken");

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String XMLbody = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

if (status == "HTTP/1.1 201 Created") {
	String rightsid;
	String rightsidfull;
	
	def b = contentLocation.toURL();
	def urlStr = b.getPath();
	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
		assert URLDecoder.decode(b.getPath(), "UTF-8").matches("/rest/$major/$minor/Account/$assertionAccountIdFULL/RightsToken/$urnRightsToken.*");
		int lastSlash = urlStr.lastIndexOf('/');
		int lastColon = urlStr.lastIndexOf(':');
		rightsidfull = urlStr.substring(lastSlash + 1);
		rightsid = urlStr.substring(lastColon + 1);
	
		tC.setPropertyValue("rightstokenid",rightsid);
		tC.setPropertyValue("rightstokenFULL",rightsidfull);	
	}else{
		assert URLDecoder.decode(b.getPath(), "UTF-8").matches("/rest/$major/$minor/Account/$assertionAccountIdFULL/RightsToken/$urnRightsToken.*");
		int lastSlash = urlStr.lastIndexOf('/');
		int lastColon = urlStr.lastIndexOf('%3A');
		rightsidfull = urlStr.substring(lastSlash + 1);
		rightsid = urlStr.substring(lastColon + 3);
	
		tC.setPropertyValue("rightstokenid",rightsid);
		tC.setPropertyValue("rightstokenFULL",rightsidfull);	
	}
	

	log.info "rightsidfull[$rightsidfull] - rightstokenid[$rightsid]";
}

/*
*  Extract the response body
*/
log.info "contentLength[$contentLength]";

if (contentLength.toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
	rawResp = tStep.httpRequest.response.getRawResponseData();
	strVal  = new String(rawResp);
	
	log.info "strVal[$strVal]";

	int xmlStart = strVal.indexOf("&lt;?xml version=\"1.0\" ");
	
	XMLbody  = strVal.substring(xmlStart, strVal.length());
	log.info "strVal[$strVal]";
	log.info "XMLbody[$XMLbody]";
} else {
	//XMLbody = "";
}

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers" id="85ea017b-f28b-4d43-9c3a-a4ad5ba4693a">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url           = tP.getPropertyValue("targetURL");
def urnacct       = tP.getPropertyValue("urnaccount");
def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrTypeRightsTokenCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expectErrorReason = "";

if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {

	
	case "unauthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectErrorReason = "The request is not authorized.";
		expectHTTPcontenttype = "application/xml;charset=UTF-8";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		doConnectionClose   = true;
		dobodyXML = true;
	break;
	case "SecTokenMergeReplacementRequired:1125":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectErrorReason = "The security token replacement is required.";
		expectHTTPcontenttype = "application/xml;charset=UTF-8";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		doConnectionClose   = true;
		dobodyXML = true;
	break;
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectErrorReason = "I";
		expectHTTPcontenttype = "application/xml;charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		doContentTypeHeader = true;
		doConnectionClose   = true;
		dobodyXML = false;
	break;
	case "ASSERTION_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectErrorReason = "Assertion_Not_Found";
		expectHTTPcontenttype = "application/xml;charset=UTF-8";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		doConnectionClose   = true;
		dobodyXML = true;
		break;
	case "STREAM_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectErrorReason = "Stream handle not found";
		expectHTTPcontenttype = "application/xml;charset=UTF-8";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		doConnectionClose   = true;
		dobodyXML = true;
	break;
	case "USER_NOT_ACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectErrorReason = "User is not active";
		expectHTTPcontenttype = "application/xml;charset=UTF-8";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		doConnectionClose   = true;
		dobodyXML = true;
	break;
	case "INVALID_ACCOUNT_ID":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		expectErrorReason = "Invalid Account ID";
		expectHTTPcontenttype = "application/xml;charset=UTF-8";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		doConnectionClose   = true;
		dobodyXML = true;
	break;
	case "NODE_NOT_ACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectErrorReason = "Node_status_inactive";
		expectHTTPcontenttype = "application/xml;charset=UTF-8";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		doConnectionClose   = true;
		dobodyXML = true;
		break;
	case "API_NOT_AUTHORIZED":
	default:
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectErrorReason = "API call not authorized";
		expectHTTPcontenttype = "application/xml;charset=UTF-8";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		doConnectionClose   = true;
		dobodyXML = true;
	break;
	
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	// assert tC.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	

if (doContentTypeHeader) {
	//assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size()   == 1;
		assert myXML.Error.ErrorLink.size()  == 1;
				
		// ErrorReason
		this.log.info "ErrorReason: Expect[$expectErrorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == expectErrorReason;
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Fetch RIGHTS_TOKEN Row" id="3b874e1f-763a-4e0f-a6ee-dec610048c42">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

tC.setPropertyValue("rightstokenRow",null);

String data = "";
if (tC.getPropertyValue("expectErrTypeRightsTokenCreate") == "SUCCESS"){
try {
	dbUtils = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbRightsToken - $e";
	assert 1 == 2;
}
finally {
	data = dbUtils.rightstokenGetRow(tC.getPropertyValue("rightstokenid").toString());

	assert data.length() > 0;

	tC.setPropertyValue("rightstokenRow",data);
}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RIGHTS_TOKEN.ACCOUNT_OID" id="0c7c7ac2-0810-489a-be71-152443dd5da9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def dbUtils;

String expectAccountId = tC.getPropertyValue("accountoid").toString();
String XMLbody = tC.getPropertyValue("rightstokenRow").toString();
if (tC.getPropertyValue("expectErrTypeRightsTokenCreate") == "SUCCESS"){
try {
	myXML = new XmlSlurper().parseText(XMLbody);
}
catch(Throwable e) {
	log.info "ERROR - XmlSlurper - $e";
	assert 1 == 2;
}
finally {
	String accountoid = myXML.ResultSet.Row[0].ACCOUNT_OID.text();

	log.info "Assert Received [$accountoid] == Expected [$expectAccountId]";

	assert expectAccountId == accountoid;
}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RIGHTS_TOKEN.USER_OID" id="60640eb1-853e-4de7-979b-ccc9e3ece3b5">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def dbUtils;

String expectUserId = tC.getPropertyValue("useroid").toString();
String XMLbody = tC.getPropertyValue("rightstokenRow").toString();
if (tC.getPropertyValue("expectErrTypeRightsTokenCreate") == "SUCCESS"){
try {
	myXML = new XmlSlurper().parseText(XMLbody);
}
catch(Throwable e) {
	log.info "ERROR - XmlSlurper - $e";
	assert 1 == 2;
}
finally {
	String useroid = myXML.ResultSet.Row[0].USER_OID.text();

	log.info "Assert Received [$useroid] == Expected [$expectUserId]";

	assert expectUserId == useroid;
}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RIGHTS_TOKEN.CREATED_BY" id="a86c215a-f352-4172-adab-c9683f69b7d6">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def dbUtils;

String expectNodeId = tC.getPropertyValue("nodeid").toString();
String XMLbody = tC.getPropertyValue("rightstokenRow").toString();
if (tC.getPropertyValue("expectErrTypeRightsTokenCreate") == "SUCCESS"){
try {
	myXML = new XmlSlurper().parseText(XMLbody);
}
catch(Throwable e) {
	log.info "ERROR - XmlSlurper - $e";
	assert 1 == 2;
}
finally {
	String nodeid = myXML.ResultSet.Row[0].CREATED_BY.text();

	log.info "Assert Received [$expectNodeId] == Expected [$nodeid]";

	assert expectNodeId == nodeid;
}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return RightsToken" id="5e35888a-e9c4-4777-90a9-08313fa241f2">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("rightstokenid",tC.getPropertyValue("rightstokenid"));
callTC.setPropertyValue("rightstokenFULL",tC.getPropertyValue("rightstokenFULL"));
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVdbk6q8En33V1juR8vhonirmakKV1FBQby+nEKIgCIoAUF//Qk4Ojp7Zn/7O+dhyknT3VndWUlWXpG59+kuQAhGsRcGZZl/q/wHduz1xoRmrd6E61qjsSZrHZOBNapj1Vt2i1k32malLCOUQDlAsRnEbxWapOo1sl6jWwbZ7jaYbqPz0qSZVaU8gxHCqbHLC1kpZ3s/QN1i2rdKEgXd0EQe6gbmHqJubHUnQBl2sWfXvGGqvL9eURYTRu9uHB+6BGG92NCCvm+9WOGeeCWefF5t1J14TmDGSQQ/5rTRW+UjNk3Tl7T+EkYOQZMkSZAdAvvYyHN+Vd5Lt2Boy8EmvI45MwgDzzJ972LmoBQYu6FdBr4TRl7s7n9ITREUmaeuwcyqWVQj+FUhPico0P1lpieQETJryDWpWzIdbmAEAwuWp7r8Vvn1dyt4jTUiM0CbMNqjL+N/BwkGJ+iHB2jX0K2yG7q/z/hNu95fodWVA8tPkHeCak6Tg2lBVB5HcONlQw9h8tmoXCx/OUM3hkHr3yzJK/GIE8MmvukM7zkQxf/Lej2u1TXLzPQT+F4NnfGw50n0chy2G2PWMEIzgAzrmvJbAeHR+QrqvtQf469EvfPqI2jemcx7R3XaPzAindFooE8zv51KngOWgZciUh1uGXPcHCUq5cRcv7olHUOrbrKz5HhVd03BVrU6Go0NFemlVdgX3DMFGkPOtlKtORG9gzpnmlvRTsDIW1/mylFVV44SGf2xrrDWQIjjXksgG7OgPTS2FO3vVtjDFuislEF1Fk+0yWxu8iKdEnSLfPus6bGGvK4BPBdF5v8vGLLDm7F5H3D5SbHB2zOG74os88mF48B54oBUZoGD/7ZAZZ3d0d15UiclWaBpIuA51t8KQwXsJEBNBdZVuNlMybgL6LOOOsOBRgn4K1bRhZRPl/xM03pC6hq2NDuvJT9ZXQRVAagI5lxF0IUZrxuCooDwassUfi1lW2WipLK25Es4AS9kh4stdWIoZZ5Fy4wyYejlhElWixm2i+fhXj2tDcFXOEXiJkdpIq/rvCb0gb6cW7SY4NjLcH8IS8sp+xDUP8AtgGJK4jnBRTF2qWJMaZXXzcJmPNsUWeorGko5rahKKglpfza9fPaCYxXO3guZYIDxtReWwYkquVr0kTlnAkUHKe8UwQMhtUc3IIpGpiXu2quhkOqCPlVFRZdTARQ2Xkh9tKZVdy25J6uuZX0DbB8XhtOEuRjg74F+ss7MsWRKIljvZ5RV113LYzxzEabOqp3y2rI/CFcyTqMCTWBZDWBAJMhLw/1nwZCdMaOD16E9ONyI4R66UUmhwsHudMnItlcfOWPMXH6za40lb1w3bZeQfYve1ndAlqE9oFzNtPUlofOBd2mOBtMF9KLlJVYZjWp6baakz5Ppgg/9lt1bLKeDara0NGM0nkzn40uWqcdt++LHvRHbiyZ9hXdGKoRjZFUJ0hRZo80z3LK3xXza6CRkSsBRWACkreMIHiYw29teSdjTFQGTFyhcKnFzTpoASaoKMstr2kZ0qbElzZIppSqyYPu4TeflQvdLK47l8UqR5nx1WNIiuTKAXSTTGoLoaFOm2l/Alab6xiwG6WG2CSiKlA5ab6OkjqXkDLDldMLiXcSWEhlMzdGhT2aDWZOkjprt9ycdMK1nE3qXjVxndd45qx1elOXD1lkawJ8ZDxyTMcXmJc0QdAW0r/stU+RpXfetfXZY762MN/CaFcGhwQq6qJHTjOfB4GpDBqAztLwIW4UTivgSyBQT0+K0XrhoGajeyBASTNrkgS7bNU3+I8dyipWeOXbkgAa+cky4ckwAm2NVbvMUYprcAc1Th5WEo9aaDfudA6kthrsSWxUJJ/b8xihop8agOqfOacvdavN5R+Zdrhpslm59HbOkebE02N+1JE/f8UGz4Z+VoaIxU4/wz+QWHlM0LKkyFQj1+CISnSipsvuVt79c6g16uh9PkpM8NQeIOrvr47yTbse9JkFE0pm5tFYnTVyE1vJ6j3w9JO/G6zFKPB6wTyfwTXtNkvUWWvFtmN/DMl8W8eVoxn/WcbnFs2ubwrV7yMUgimEQV97zqFzDdROs9Dy7i2/O65hvCwwp0gxH8wwpdOr4/iApkQQk0+nUWaZ+E3tXFF8gcmGw8fK5cjl7vaz/DNDadxEMbBjVTmFiuRBV/pAx71dZDnSsQsIAQSPEcpmri0AUAcs0myzXagGBpdvNZptkmZbINVhQKathPApGEdjEMHqSyhT1JJV1aHkHD+Z6OhcVCKsKFOOWHM1TEvvUy8l8CWCCFXeUi94u3WgzBPL2Bx/mgIl9aCc+fDm4h6JBBLr+0jXTQoW1jXVJ/lconh9r/Prt1g7sY3u5A8oLYiFeUviN8K/fqvm56sZj1bf0ILG9XNjg3saRZ12RPH/6pEzOlTtfPsqibrjv7v8qnP7/wsnfw4k/FEZ87el9NvvkPcx9ewVhYY+l3/uNFkfz5fiSnE5JQYRWLmsjnJ6gCLJJTKCVYG16NsIdDIh7CuKvngV31F9mvtuf8SWxG0xifKbsMW3LxfAv3oQTiPI3oYy3Xfa3D86nKXHfYpjF39k4Hz8dc8R/fF1aXSv3w+Yx/knDyP5crm9yPcyD68wPUS9w8lH+CDj/wAwrxGk9fJCG0WPy7xJ8N/mz8d7kO5YYs2mdxPDnL+X8hHyrmJYVJkEs85XC8HhqFzjj8wF2P51+S1PI8I93VYZ+fFctlOEEn597s3L39f7ZueYVdLEgjkJegeWtkqFuvlcC5+GW+AD420VBNqkW2QaNBks/XhRUQxTuDXyq5P038++Wh55+3Q/v/wU=</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D8E50061708A44B2E0401F0A059914FE</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:D8E50061708A44B2E0401F0A059914FE</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D8E50F25C2D50E93E0401F0A05993B53</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:D8E50F25C2D50E93E0401F0A05993B53</con:value>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value>close</con:value>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D8E50061708A44B2E0401F0A059914FE/RightsToken/urn:dece:rightstokenid:org:dece:D8E512D0EBB399F8E0401F0A05994C93</con:value>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value>application/xml;charset=UTF-8</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRightsTokenCreate</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>80008001</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D8E512D0EBB399F8E0401F0A05994C93</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>STS Create Tokentype unamepasswd - LLASP</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value>HTTP/1.1 201 Created</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_70078 - STSCreate - llasp - unamepasswd - Standard User - Affiliated node Retailer can perform RightsTokenCreate, DLASP can perform RightsTokenGet and LLASP can perform StreamCreate - P0</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86719</con:value>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenRow</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>FAC200DB599F01610FC1EADCACE3590F</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>D8E50061708F44B2E0401F0A059914FE</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenFULLid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:AAA17EE0BE7CCEC4E0401F0A059902A0</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenFULL</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:D8E512D0EBB399F8E0401F0A05994C93</con:value>
        </con:property>
      <con:property><con:name>enassertionAccountIdFULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8E50061708A44B2E0401F0A059914FE</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\80008001.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamCreate API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="74a4f728-cc08-461a-84b8-603b75453337">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="5562f2a0-b3d3-4253-8790-59e918930547">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assert",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("streamcreateFlagSkipUserTest",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("rightstokenFULL",null);
tC.setPropertyValue("status",null);
tC.setPropertyValue("connection",null);
tC.setPropertyValue("contentType",null);
tC.setPropertyValue("contentLength",null);
tC.setPropertyValue("contentLocation",null);
tC.setPropertyValue("expectErrTypeStreamCreate",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="ce420fea-4870-4d75-8801-a01846a85ca9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("expectErrTypeStreamCreate",callTC.getPropertyValue("expectErrTypeStreamCreate"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("rightstokenFULL",callTC.getPropertyValue("rightstokenFULL"));
tC.setPropertyValue("streamcreateFlagSkipUserTest",callTC.getPropertyValue("streamcreateFlagSkipUserTest"));

			
if (tC.getPropertyValue("expectErrTypeStreamCreate") == null ||
	tC.getPropertyValue("expectErrTypeStreamCreate") == "null") {
	tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");		
}
if (tC.getPropertyValue("streamcreateFlagSkipUserTest") == null ||
	tC.getPropertyValue("streamcreateFlagSkipUserTest") == "null") {
	tC.setPropertyValue("streamcreateFlagSkipUserTest","false");		
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PEM Set" id="457ffd0f-3dd9-4fd9-ad79-0179a4d72fbb">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - StreamCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="POST - StreamCreate" id="d5e6d04e-d3d6-4f98-b106-8fd9a595a0ba"><con:settings/><con:config service="Stream" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Stream" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - StreamCreate" mediaType="application/xml;charset=UTF-8" postQueryString="false" sslKeystore="80008000.pem" id="4e175124-36be-4493-a168-cb5788f1c20b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Stream xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
  <StreamClientNickname/>
 <RequestingUserID>${#TestCase#assertionUserIdFULL}</RequestingUserID>
 <RightsTokenID>${#TestCase#rightstokenFULL}</RightsTokenID>
</Stream>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ACCT" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep>
      <con:testStep type="groovy" name="Extract Response Body/Headers" id="cb574cb5-d1fd-4cbf-b01a-e1df73bd8aa5">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep      = tC.getTestStepByName("POST - StreamCreate");
def expectType = tC.getPropertyValue("expectErrTypeStreamCreate");

tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);

String expectHTTPStatus = "";

if (expectType == null || expectType == "" || expectType == " ") {
	expectType = "SUCCESS";
}

this.log.info "expectType [$expectType]";
switch (expectType) {
	case "SUCCESS":
	default:
		expectHTTPStatus = "HTTP/1.1 201 Created";
	break;
}

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			if (tP.getPropertyValue("versionMinor")!="02"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("contentLocation",contentLocation);

this.log.info "status[$status] expectHTTPStatus [$expectHTTPStatus]";
assert status.toString() == expectHTTPStatus;

/*
*  Get the stream handle
*/
if (status == "HTTP/1.1 201 Created") {
	String sh;
	String shfull;
	
	def b = contentLocation.toURL();
	def urlStr = b.getPath();
	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
		int lastSlash = urlStr.lastIndexOf('/');
		int lastColon = urlStr.lastIndexOf(':');
		shfull = urlStr.substring(lastSlash + 1);
		sh = urlStr.substring(lastColon + 1);
	
		tC.setPropertyValue("streamhandle",sh);
		tC.setPropertyValue("streamhandleFULL",shfull);
	}else{
		int lastSlash = urlStr.lastIndexOf('/');
		int lastColon = urlStr.lastIndexOf('%3A');
		shfull = urlStr.substring(lastSlash + 1);
		sh = urlStr.substring(lastColon + 3);
	
		tC.setPropertyValue("streamhandle",sh);
		tC.setPropertyValue("streamhandleFULL",shfull);
	}
	

	log.info "streamhandleFULL[$shfull] - streamhandle[$sh]";
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Fetch STREAM_DATA Row" id="873b20d9-e88d-4316-b728-2a5fa5a7ef79">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

tC.setPropertyValue("rowSTREAM_DATA",null);

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbStreams - $e";
	assert 1 == 2;
}
finally {
	String row = dbUtils.streamGetRow(tC.getPropertyValue("streamhandle").toString());

	assert row.length() > 0;

	log.info "Row[$row]";

	tC.setPropertyValue("rowSTREAM_DATA",row);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Validate STREAM_DATA.ACCOUNT_OID" id="3040e5c8-7369-49b6-9a29-c55f2623fe35">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def dbUtils;

String expectAccountId = tC.getPropertyValue("accountoid").toString();
String XMLbody = tC.getPropertyValue("rowSTREAM_DATA").toString();

try {
	myXML = new XmlSlurper().parseText(XMLbody);
}
catch(Throwable e) {
	log.info "ERROR - XmlSlurper - $e";
	assert 1 == 2;
}
finally {
	String accountoid = myXML.ResultSet.Row[0].ACCOUNT_OID.text();

	log.info "Assert Received [$accountoid] == Expected [$expectAccountId]";

	assert expectAccountId == accountoid;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Validate STREAM_DATA.USER_OID" id="c41bcec2-7fa0-4f54-b38d-896b75ad44bf">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def dbUtils;

String expectuseroid = tC.getPropertyValue("useroid").toString();
String XMLbody = tC.getPropertyValue("rowSTREAM_DATA").toString();

if (tC.getPropertyValue("streamcreateFlagSkipUserTest") != "true") {
	try {
		myXML = new XmlSlurper().parseText(XMLbody);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		String useroid = myXML.ResultSet.Row[0].USER_OID.text();

		log.info "Assert Received [$useroid] == Expected [$expectuseroid]";

		assert expectuseroid == useroid;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Validate STREAM_DATA.CREATED_BY" id="5828949b-7f0f-4e5d-8929-b5ae1309ccbd">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def dbUtils;

String expectcreatedby = tC.getPropertyValue("nodeid").toString();
String XMLbody = tC.getPropertyValue("rowSTREAM_DATA").toString();

try {
	myXML = new XmlSlurper().parseText(XMLbody);
}
catch(Throwable e) {
	log.info "ERROR - XmlSlurper - $e";
	assert 1 == 2;
}
finally {
	String nodeoid = myXML.ResultSet.Row[0].CREATED_BY.text();

	log.info "Assert Received [$nodeoid] == Expected [$expectcreatedby]";

	assert expectcreatedby == nodeoid;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return the Streamhandle" id="41d93a04-77fd-41d0-962e-40c9f7fe3849">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle"));
callTC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL"));
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_70078 - STSCreate - llasp - unamepasswd - Standard User - Affiliated node Retailer can perform RightsTokenCreate, DLASP can perform RightsTokenGet and LLASP can perform StreamCreate - P0</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>STS Create Tokentype unamepasswd - LLASP</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVdbk6q8En33V1juR8vhonirmakKV1FBQby+nEKIgCIoAUF//Qk4Ojp7Zn/7O+dhyknT3VndWUlWXpG59+kuQAhGsRcGZZl/q/wHduz1xoRmrd6E61qjsSZrHZOBNapj1Vt2i1k32malLCOUQDlAsRnEbxWapOo1sl6jWwbZ7jaYbqPz0qSZVaU8gxHCqbHLC1kpZ3s/QN1i2rdKEgXd0EQe6gbmHqJubHUnQBl2sWfXvGGqvL9eURYTRu9uHB+6BGG92NCCvm+9WOGeeCWefF5t1J14TmDGSQQ/5rTRW+UjNk3Tl7T+EkYOQZMkSZAdAvvYyHN+Vd5Lt2Boy8EmvI45MwgDzzJ972LmoBQYu6FdBr4TRl7s7n9ITREUmaeuwcyqWVQj+FUhPico0P1lpieQETJryDWpWzIdbmAEAwuWp7r8Vvn1dyt4jTUiM0CbMNqjL+N/BwkGJ+iHB2jX0K2yG7q/z/hNu95fodWVA8tPkHeCak6Tg2lBVB5HcONlQw9h8tmoXCx/OUM3hkHr3yzJK/GIE8MmvukM7zkQxf/Lej2u1TXLzPQT+F4NnfGw50n0chy2G2PWMEIzgAzrmvJbAeHR+QrqvtQf469EvfPqI2jemcx7R3XaPzAindFooE8zv51KngOWgZciUh1uGXPcHCUq5cRcv7olHUOrbrKz5HhVd03BVrU6Go0NFemlVdgX3DMFGkPOtlKtORG9gzpnmlvRTsDIW1/mylFVV44SGf2xrrDWQIjjXksgG7OgPTS2FO3vVtjDFuislEF1Fk+0yWxu8iKdEnSLfPus6bGGvK4BPBdF5v8vGLLDm7F5H3D5SbHB2zOG74os88mF48B54oBUZoGD/7ZAZZ3d0d15UiclWaBpIuA51t8KQwXsJEBNBdZVuNlMybgL6LOOOsOBRgn4K1bRhZRPl/xM03pC6hq2NDuvJT9ZXQRVAagI5lxF0IUZrxuCooDwassUfi1lW2WipLK25Es4AS9kh4stdWIoZZ5Fy4wyYejlhElWixm2i+fhXj2tDcFXOEXiJkdpIq/rvCb0gb6cW7SY4NjLcH8IS8sp+xDUP8AtgGJK4jnBRTF2qWJMaZXXzcJmPNsUWeorGko5rahKKglpfza9fPaCYxXO3guZYIDxtReWwYkquVr0kTlnAkUHKe8UwQMhtUc3IIpGpiXu2quhkOqCPlVFRZdTARQ2Xkh9tKZVdy25J6uuZX0DbB8XhtOEuRjg74F+ss7MsWRKIljvZ5RV113LYzxzEabOqp3y2rI/CFcyTqMCTWBZDWBAJMhLw/1nwZCdMaOD16E9ONyI4R66UUmhwsHudMnItlcfOWPMXH6za40lb1w3bZeQfYve1ndAlqE9oFzNtPUlofOBd2mOBtMF9KLlJVYZjWp6baakz5Ppgg/9lt1bLKeDara0NGM0nkzn40uWqcdt++LHvRHbiyZ9hXdGKoRjZFUJ0hRZo80z3LK3xXza6CRkSsBRWACkreMIHiYw29teSdjTFQGTFyhcKnFzTpoASaoKMstr2kZ0qbElzZIppSqyYPu4TeflQvdLK47l8UqR5nx1WNIiuTKAXSTTGoLoaFOm2l/Alab6xiwG6WG2CSiKlA5ab6OkjqXkDLDldMLiXcSWEhlMzdGhT2aDWZOkjprt9ycdMK1nE3qXjVxndd45qx1elOXD1lkawJ8ZDxyTMcXmJc0QdAW0r/stU+RpXfetfXZY762MN/CaFcGhwQq6qJHTjOfB4GpDBqAztLwIW4UTivgSyBQT0+K0XrhoGajeyBASTNrkgS7bNU3+I8dyipWeOXbkgAa+cky4ckwAm2NVbvMUYprcAc1Th5WEo9aaDfudA6kthrsSWxUJJ/b8xihop8agOqfOacvdavN5R+Zdrhpslm59HbOkebE02N+1JE/f8UGz4Z+VoaIxU4/wz+QWHlM0LKkyFQj1+CISnSipsvuVt79c6g16uh9PkpM8NQeIOrvr47yTbse9JkFE0pm5tFYnTVyE1vJ6j3w9JO/G6zFKPB6wTyfwTXtNkvUWWvFtmN/DMl8W8eVoxn/WcbnFs2ubwrV7yMUgimEQV97zqFzDdROs9Dy7i2/O65hvCwwp0gxH8wwpdOr4/iApkQQk0+nUWaZ+E3tXFF8gcmGw8fK5cjl7vaz/DNDadxEMbBjVTmFiuRBV/pAx71dZDnSsQsIAQSPEcpmri0AUAcs0myzXagGBpdvNZptkmZbINVhQKathPApGEdjEMHqSyhT1JJV1aHkHD+Z6OhcVCKsKFOOWHM1TEvvUy8l8CWCCFXeUi94u3WgzBPL2Bx/mgIl9aCc+fDm4h6JBBLr+0jXTQoW1jXVJ/lconh9r/Prt1g7sY3u5A8oLYiFeUviN8K/fqvm56sZj1bf0ILG9XNjg3saRZ12RPH/6pEzOlTtfPsqibrjv7v8qnP7/wsnfw4k/FEZ87el9NvvkPcx9ewVhYY+l3/uNFkfz5fiSnE5JQYRWLmsjnJ6gCLJJTKCVYG16NsIdDIh7CuKvngV31F9mvtuf8SWxG0xifKbsMW3LxfAv3oQTiPI3oYy3Xfa3D86nKXHfYpjF39k4Hz8dc8R/fF1aXSv3w+Yx/knDyP5crm9yPcyD68wPUS9w8lH+CDj/wAwrxGk9fJCG0WPy7xJ8N/mz8d7kO5YYs2mdxPDnL+X8hHyrmJYVJkEs85XC8HhqFzjj8wF2P51+S1PI8I93VYZ+fFctlOEEn597s3L39f7ZueYVdLEgjkJegeWtkqFuvlcC5+GW+AD420VBNqkW2QaNBks/XhRUQxTuDXyq5P038++Wh55+3Q/v/wU=</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>80008000</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:D8E50061708A44B2E0401F0A059914FE</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:D8E50F25C2D50E93E0401F0A05993B53</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:D8E512D0EBB399F8E0401F0A05994C93</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D8E50061708A44B2E0401F0A059914FE/Stream/urn:dece:streamhandleid:org:dece:D8E51CF99AA804C6E0401F0A05996142</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D8E51CF99AA804C6E0401F0A05996142</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:D8E51CF99AA804C6E0401F0A05996142</con:value>
        </con:property>
        <con:property>
          <con:name>rowSTREAM_DATA</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HANDLE_OID>D8E51CF99AA804C6E0401F0A05996142</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>D8E512D0EBB399F8E0401F0A05994C93</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>D8E50061708F44B2E0401F0A059914FE</ACCOUNT_OID>
      <USER_OID>FAC200DB599F01610FC1EADCACE3590F</USER_OID>
      <TRANSACTION_ID>null</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2013-03-27 14:45:49.625</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2013-03-27 08:51:12.757</CREATED_DATE>
      <CREATED_BY>80008000</CREATED_BY>
      <UPDATED_DATE>null</UPDATED_DATE>
      <UPDATED_BY>null</UPDATED_BY>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>D8E50061708F44B2E0401F0A059914FE</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>FAC200DB599F01610FC1EADCACE3590F</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86721</con:value>
        </con:property>
        <con:property>
          <con:name>streamcreateFlagSkipUserTest</con:name>
          <con:value>false</con:value>
        </con:property>
      <con:property><con:name>enassertionAccountIdFULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8E50061708A44B2E0401F0A059914FE</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\80008000.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS API - Invoked to Coordinator URL on sHost" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="614c23e6-3581-4dbf-b4f1-fba1b146986f">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="e63aca4c-ff32-4ddb-968b-e69cfad14d8c">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("actionAuthHeader",null);
tC.setPropertyValue("actionDeviceAuthHeader",null);
tC.setPropertyValue("deviceAuthHeaderValue",null);
tC.setPropertyValue("endPoint",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodeidFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("scenario",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("stsRequestBodyNULL",null);
tC.setPropertyValue("stsRequestUserNameFlag",null);
tC.setPropertyValue("expectErrType",null);
tC.setPropertyValue("expectCreateExpireHoursDiff",null);
tC.setPropertyValue("expectNodeUserRowCount", null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("stsExpire",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsaudience",null);
tC.setPropertyValue("stsduration",null);
tC.setPropertyValue("stsaudienceIgnoreAll",null);
tC.setPropertyValue("stsaudienceIgnoreNodes",null);
tC.setPropertyValue("stsaudiencePrefixDelimiter",null);
tC.setPropertyValue("stsaudienceSuffixedDelimiter",null);
tC.setPropertyValue("stsaudienceEmbeddedDelimiter",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
/*
*  stsaudienceIgnoreAll
*    If this is 'true' then I will ignore the incoming 
*    stsaudience list because it will contain invalid
*	nodes which should not be present in the
*	&lt;saml2:AudienceRestriction> list.
*
*  stsaudiencePrefixDelimiter
*	This is used to start the audience parameter value
*	with a ;
*
*  stsaudienceSuffixedDelimiter
*	This is used to suffix the audience paramter value
*	with a ;
*/</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="98e14fa5-351f-49b2-b816-ccea01708119">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("actionAuthHeader",callTC.getPropertyValue("actionAuthHeader"));
tC.setPropertyValue("actionDeviceAuthHeader",callTC.getPropertyValue("actionDeviceAuthHeader"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("Username"));
tC.setPropertyValue("password",callTC.getPropertyValue("UserPassword"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));

log.info "versionMinor: "+tP.getPropertyValue("versionMinor");
if (tP.getPropertyValue("versionMinor")!="02"){
	
			tC.setPropertyValue("tokentype",URLEncoder.encode(callTC.getPropertyValue("tokentype"), "UTF-8"));
	
	}else{
				tC.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
			}
			

tC.setPropertyValue("scenario",callTC.getPropertyValue("scenario"));
tC.setPropertyValue("deviceAuthToken",callTC.getPropertyValue("deviceAuthToken"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));

if (tC.getPropertyValue("expectErrType") == "" || tC.getPropertyValue("expectErrType") == null) {
	tC.setPropertyValue("expectErrType","SUCCESS");
}
tC.setPropertyValue("stsRequestBodyNULL",callTC.getPropertyValue("stsRequestBodyNULL"));
tC.setPropertyValue("stsRequestUserNameFlag",callTC.getPropertyValue("stsRequestUserNameFlag"));
tC.setPropertyValue("stsAction",callTC.getPropertyValue("stsAction"));
tC.setPropertyValue("stsExpire",callTC.getPropertyValue("stsExpire"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("expectCreateExpireHoursDiff",callTC.getPropertyValue("expectCreateExpireHoursDiff"));


tC.setPropertyValue("stsaudience",callTC.getPropertyValue("stsaudience"));

tC.setPropertyValue("stsduration",callTC.getPropertyValue("stsduration"));
tC.setPropertyValue("stsaudienceIgnoreAll",callTC.getPropertyValue("stsaudienceIgnoreAll"));
tC.setPropertyValue("actionSkipPolicyCheck",callTC.getPropertyValue("actionSkipPolicyCheck"));
tC.setPropertyValue("stsaudiencePrefixDelimiter",callTC.getPropertyValue("stsaudiencePrefixDelimiter"));
tC.setPropertyValue("stsaudienceSuffixedDelimiter",callTC.getPropertyValue("stsaudienceSuffixedDelimiter"));
tC.setPropertyValue("stsaudienceIgnoreNodes",callTC.getPropertyValue("stsaudienceIgnoreNodes"));
tC.setPropertyValue("stsaudienceEmbeddedDelimiter",callTC.getPropertyValue("stsaudienceEmbeddedDelimiter"));
tC.setPropertyValue("stsSkipLastLoginCheck",callTC.getPropertyValue("stsSkipLastLoginCheck"));
tC.setPropertyValue("expectNodeUserRowCount",callTC.getPropertyValue("expectNodeUserRowCount"));

if (tC.getPropertyValue("stsRequestUserNameFlag") == null ||
	tC.getPropertyValue("stsRequestUserNameFlag") == "") {
		tC.setPropertyValue("stsRequestUserNameFlag",null);
}
if (tC.getPropertyValue("expectNodeUserRowCount") == null ||
	tC.getPropertyValue("expectNodeUserRowCount") == "") {
		tC.setPropertyValue("expectNodeUserRowCount","0");
}
if (tC.getPropertyValue("stsAction") == null ||
	tC.getPropertyValue("stsAction") == "") {
		tC.setPropertyValue("stsAction",null);
}
if (tC.getPropertyValue("stsExpire") == 'null' ||
	tC.getPropertyValue("stsExpire") == "") {
		tC.setPropertyValue("stsExpire","2012-06-30T09:40:39.0Z");
}
if (tC.getPropertyValue("stsSkipLastLoginCheck") == null ||
	tC.getPropertyValue("stsSkipLastLoginCheck") == 'null') {
		tC.setPropertyValue("stsSkipLastLoginCheck","false");
}
if (tC.getPropertyValue("actionSkipPolicyCheck") == null ||
	tC.getPropertyValue("actionSkipPolicyCheck") == 'null') {
		tC.setPropertyValue("actionSkipPolicyCheck","false");
}
if (tC.getPropertyValue("expectCreateExpireHoursDiff") == null ||
	tC.getPropertyValue("expectCreateExpireHoursDiff") == "") {
		tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActive"));
}
if (tC.getPropertyValue("nodeid") != 'null' || tC.getPropertyValue("nodeid") != null) {
		tC.setPropertyValue("nodeidFULL", tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
}
if (tC.getPropertyValue("stsaudienceIgnoreAll") == null ||
	tC.getPropertyValue("stsaudienceIgnoreAll") == 'null') {
		tC.setPropertyValue("stsaudienceIgnoreAll","false");
}
if (tC.getPropertyValue("stsaudiencePrefixDelimiter") == null ||
	tC.getPropertyValue("stsaudiencePrefixDelimiter") == 'null') {
		tC.setPropertyValue("stsaudiencePrefixDelimiter","false");
}
if (tC.getPropertyValue("stsaudienceSuffixedDelimiter") == null ||
	tC.getPropertyValue("stsaudienceSuffixedDelimiter") == 'null') {
		tC.setPropertyValue("stsaudienceSuffixedDelimiter","false");
}
if (tC.getPropertyValue("stsaudienceEmbeddedDelimiter") == null ||
	tC.getPropertyValue("stsaudienceEmbeddedDelimiter") == 'null') {
		tC.setPropertyValue("stsaudienceEmbeddedDelimiter","false");
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Construct STS Request Body" id="4c18731f-12af-42af-9757-84f55e224b7e">
        <con:settings/>
        <con:config><script>import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("stsRequestBody", null);

/*
*  XML namespaces
*/
String saml2pNS = "urn:oasis:names:tc:SAML:2.0:protocol";
String saml2NS = "urn:oasis:names:tc:SAML:2.0:assertion";
String mdNS = "urn:oasis:names:tc:SAML:2.0:metadata";
String deceNS = tP.getPropertyValue("coordinatorSchema").toString();
String saml2pPrefix = "saml2p";
String saml2Prefix = "saml2";
String mdPrefix = "md";
String decePrefix = "dece";
String requestBody = "";
String tokentype = tC.getPropertyValue("tokentype").toString();
String scenario = tC.getPropertyValue("scenario").toString();
String deviceAuthToken = tC.getPropertyValue("deviceAuthToken").toString();
String deviceAuthExpires = tC.getPropertyValue("stsExpire").toString();

def username = tC.getPropertyValue("username").toString();
def password = tC.getPropertyValue("password").toString();


/*
*  Elements
*/
Element root;
Element userName;
Element passWord;
Element devicecode;
Element expires;

//if (tokentype != "urn:dece:type:tokentype:saml2") {
if (scenario == "STSCreate") {
	/*
	*  Create an nice clean dom
	*/
	try	{
		//Create instance of DocumentBuilderFactory
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		//Get the DocumentBuilder
		DocumentBuilder parser = factory.newDocumentBuilder();
		//Create blank DOM Document
		doc = parser.newDocument();
	}
	catch(Exception e) {
		log.info "Error during DocumentBuilderFactory create - " + e.getMessage();
	}
	finally {
		log.info "tokentype: "+tokentype;
		if (tokentype == URLEncoder.encode(tP.getPropertyValue("urntokenType_deviceauthtoken"), "UTF-8").toString() || tokentype == tP.getPropertyValue("urntokenType_deviceauthtoken")) {
			root = doc.createElementNS(deceNS, "DeviceAuthToken");

			/*
			*  DeviceAuthCode element
			*/
			switch (tC.getPropertyValue("stsAction").toString()) {
				case "nullDeviceToken":
					devicecode = doc.createElementNS(deceNS,"DeviceAuthCode");
					Text textdcode = doc.createTextNode("");
					devicecode.appendChild(textdcode);			
					break;
				case "tagTerminatedDeviceAuthCode":
					devicecode = doc.createElementNS(deceNS,"DeviceAuthCode");
					Text textdexpire = doc.createTextNode();
					devicecode.appendChild(textdexpire);
					break;
				default:
					devicecode = doc.createElementNS(deceNS,"DeviceAuthCode");
					Text textdcode = doc.createTextNode(deviceAuthToken);
					devicecode.appendChild(textdcode);
					break;
			}

			/*
			*  Expires
			*/
			switch (tC.getPropertyValue("stsAction").toString()) {
				case "nullExpires":
					expires = doc.createElementNS(deceNS,"Expires");
					Text textdexpire = doc.createTextNode("");
					expires.appendChild(textdexpire);
					break;
				case "tagTerminatedExpires":
					expires = doc.createElementNS(deceNS,"Expires");
					Text textdexpire = doc.createTextNode();
					expires.appendChild(textdexpire);
					break;
				default:
					expires = doc.createElementNS(deceNS,"Expires");
					Text textdexpire = doc.createTextNode(deviceAuthExpires);
					expires.appendChild(textdexpire);
					break;
			}

			/*
			* Add DeviceAuthCode element to tree.
			*/
			if (tC.getPropertyValue("stsAction").toString() != "tagMissingDeviceToken") {
				root.appendChild(devicecode);
			}

			/*
			* Add Expires element to tree.
			*/
			if (tC.getPropertyValue("stsAction").toString() != "tagMissingExpires") {
				root.appendChild(expires);
			}
		} else {
			root = doc.createElementNS(deceNS, "Credentials");
		
			/*
			*  Username
			*/
			switch (tC.getPropertyValue("stsRequestUserNameFlag").toString()) {
				case "stsRequestUserNameFlag":
					userName = doc.createElementNS(deceNS,"Username");
					break;
				case "EMPTY_TAG":
					userName = doc.createElementNS(deceNS,"Username");
					break;
				default:
					userName = doc.createElementNS(deceNS,"Username");
					Text textusername = doc.createTextNode(username);
					userName.appendChild(textusername);
					break;
			};

			/*
			*  Password
			*/
			switch (tC.getPropertyValue("stsAction").toString()) {
				case "EMPTY_TAG":
					passWord = doc.createElementNS(deceNS,"Password");
					break;
				default:
					passWord = doc.createElementNS(deceNS,"Password");
					Text textpassword = doc.createTextNode(password);
					passWord.appendChild(textpassword);
					break;
			}

			/*
			* Add Username element to tree.
			*/
			if (tC.getPropertyValue("stsRequestUserNameFlag").toString() != "excluded") {
				root.appendChild(userName);
			}

			/*
			* Add Password element to tree.
			*/
			if (tC.getPropertyValue("stsAction").toString() != "PASSWD_EXCLUDE") {
				root.appendChild(passWord);
			}
		}
	
		/*
		* Add Credentials element to tree.
		*/
		doc.appendChild(root);
	}

	/*
	* Turn the DOM into a String to display here...
	*/
	TransformerFactory factory = TransformerFactory.newInstance();
	Transformer transformer = factory.newTransformer();
	transformer.setOutputProperty(OutputKeys.INDENT, "yes");
	StringWriter writer = new StringWriter();
	Result result = new StreamResult(writer);
	Source source = new DOMSource(doc);
	transformer.transform(source, result);
	writer.close();
	requestBody = writer.toString();
	this.log.info requestBody;

	tC.setPropertyValue("stsRequestBody", requestBody);
}

/*
*  Override the Property if desired
*/
if (tC.getPropertyValue("stsRequestBodyNULL") == "true") {
	tC.setPropertyValue("stsRequestBody", null);
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish attributes based on Node Role" id="675751a3-bf64-4c4f-a8f5-b06152958056">
        <con:settings/>
        <con:config>
          <script>import java.util.StringTokenizer; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tC.getPropertyValue("nodeid").toString();

/*
*  See if we are a device
*/
switch (nodeid) {
	case tP.getPropertyValue("nodeIdDEV").toString():
		urlEndPoint = "device";
		tC.setPropertyValue("isDeviceFlag","true");
		break;
	default:
		urlEndPoint = "coordinator";
		tC.setPropertyValue("isDeviceFlag","false");
		break;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Construct URL" id="daa7f943-715b-4309-a4a9-8eb47bf2c3e1">
        <con:settings/>
        <con:config><script><![CDATA[import java.util.StringTokenizer; 
import java.net.URLDecoder;
import java.net.URLEncoder;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

Boolean appliedFirstNode = false;
String url = "";
String anode = "";
String urlEndPoint = "";

String stsaudience = tC.getPropertyValue("stsaudience").toString();

String stsduration = tC.getPropertyValue("stsduration").toString();

String nodeid = tC.getPropertyValue("nodeid").toString();

log.info "nodeid[$nodeid]";
log.info "stsduration[$stsduration]";
log.info "stsaudience[$stsaudience]";

if (tC.getPropertyValue("isDeviceFlag") == "true") {
	urlEndPoint = "device";
}

log.info "urlEndPoint: " + urlEndPoint;

/*
*  Set the endpoint
*/
switch (urlEndPoint) {
		case "device":
		tP.setPropertyValue("targetURL","qa.d.uvvu.com:7001");
		if (tC.getPropertyValue("scenario").toString() == "STSCreate"){
			url = 
			"rest/" + tP.getPropertyValue("versionMajor").toString() +
			"/" + tP.getPropertyValue("versionMinor").toString() +
			"/SecurityToken/SecurityTokenExchange" +
			"?tokentype=" + tC.getPropertyValue("tokentype").toString();
		}else if (tC.getPropertyValue("scenario").toString() == "SAMLExchange") {
			url = "rest/" + tP.getPropertyValue("versionMajor").toString() +
				"/" + tP.getPropertyValue("versionMinor").toString() +
				"/SecurityToken/Assertion/" +
				tC.getPropertyValue("assertionUUID").toString() + 
				"/SecurityTokenExchange?tokentype="+tC.getPropertyValue("tokentype").toString();
			} 
		
		break;

	case "coordinator":
	default:
	tP.setPropertyValue("targetURL","qa.s.uvvu.com:7001");
	if (tC.getPropertyValue("scenario").toString() == "STSCreate"){
			
			url ="rest/"+ tP.getPropertyValue("versionMajor").toString() +
				"/" + tP.getPropertyValue("versionMinor").toString() +
				"/SecurityToken/SecurityTokenExchange" +
				"?tokentype="+tC.getPropertyValue("tokentype").toString() ;
			
		/*	url = "https://" + tP.getPropertyValue("targetURL").toString() + 
				"/rest/" + tP.getPropertyValue("versionMajor").toString() +
				"/" + tP.getPropertyValue("versionMinor").toString() +
				"/SecurityToken/SecurityTokenExchange" +
				"?tokentype={tokentype}" ;
				//+tC.getPropertyValue("tokentype").toString();*/
		
	}
	else if (tC.getPropertyValue("scenario").toString() == "SAMLExchange") {
		
			
			/*url = "https://" + tP.getPropertyValue("targetURL").toString() + 
				"/rest/" + tP.getPropertyValue("versionMajor").toString() +
				"/" + tP.getPropertyValue("versionMinor").toString() +
				"/SecurityToken/Assertion/" +
				tC.getPropertyValue("assertionUUID").toString() + 
				"/SecurityTokenExchange?tokentype={tokentype}";
				//tC.getPropertyValue("tokentype").toString();*/
				url = "rest/" + tP.getPropertyValue("versionMajor").toString() +
				"/" + tP.getPropertyValue("versionMinor").toString() +
				"/SecurityToken/Assertion/" +
				tC.getPropertyValue("assertionUUID").toString() + 
				"/SecurityTokenExchange?tokentype="+tC.getPropertyValue("tokentype").toString();
			} 
	break;
}

/*
*  Add duration parameters if necessary
*/
if (stsduration.length() > 0 && stsduration != 'null') {
	switch (stsduration.toLowerCase()) {
		case "isnull":
			stsduration = "";
			break;
		case "isalpha":
			stsduration = "Z";
			break;
	}

	url = url + "&duration=$stsduration";
}

/*
*  Add audience parameters if necessary
*/
if (stsaudience.length() > 0 && stsaudience != 'null') {
	switch (stsaudience.toLowerCase()) {
		case "isnull":
			url = url + "&audience=";
			
			break;
		default:
	log.info "stsaudience="+stsaudience;
			StringTokenizer st = new StringTokenizer(stsaudience,",");

			while(st.hasMoreTokens()) { 
				if (!appliedFirstNode) {
					url = url + "&audience=";
					appliedFirstNode = true;

					if (tC.getPropertyValue("stsaudiencePrefixDelimiter") == "true") {

					url = url + ";";

						
					}
				}

				
				anode = st.nextToken();
	if (tP.getPropertyValue("versionMinor")!="02"){
		url = url + URLEncoder.encode(anode, "UTF-8");
	}else{
		url = url + anode;
	}
				
		
				/*
				*  Add the node delimiter if needed
				*/
				if (st.hasMoreTokens()) {
					url = url + ";";
					
					/*
					*  If we wish to embed extra ; we should do that 
					*  now.
					*/
					if (tC.getPropertyValue("stsaudienceEmbeddedDelimiter").toString() == "true") {
						url = url + ";";
					}
				}
				
		
			}

			
			if (tC.getPropertyValue("stsaudienceSuffixedDelimiter") == "true") {
				url = url + ";";
			} 
					
			break;
	}
}	

//log.info "url[$url]";

log.info "endPoint[$url]";
tC.setPropertyValue("endPoint","$url");
//testRunner.testCase.getTestStepByName('POST - STS').httpRequest.setEndpoint(url)]]></script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Construct Authorization Header if necessary" id="fad93651-6e42-4018-b4cd-e5eca2e8a99e"><con:settings/><con:config><script>import org.apache.commons.codec.binary.Base64;
import com.eviware.soapui.support.types.StringToStringsMap 
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def httpRequestStep = testRunner.testCase.getTestStepByName("POST - STS").getHttpRequest();
def headers = new StringToStringsMap();

if (tC.getPropertyValue("isDeviceFlag").toString() == "true" &amp;&amp; tC.getPropertyValue("scenario").toString() == "SAMLExchange") {
	/*
	*  construct the basic auth header
	*/
	String combo = tC.getPropertyValue("username").toString() + ":" + tC.getPropertyValue("password").toString();
	String authHeaderValue = "Basic " + combo.bytes.encodeBase64().toString()

	log.info "combo[$combo] - authHeaderValue[$authHeaderValue]";

	tC.setPropertyValue("authHeaderValue",authHeaderValue);
	tC.setPropertyValue("deviceAuthHeaderValue","dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6");
	
	headers.put("Authorization",authHeaderValue); 
 	 /*
	  * Disable below step by Sanjeet
	  * Since added a script in setup suite to get this from DB.So commenting from here.
	  */
 	 //headers.put("x-dece-ApplicationAuthorization","dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6")
 	 headers.put("x-dece-ApplicationAuthorization",tP.getPropertyValue("XDeceApplicationAuthorization"));
 	 httpRequestStep.setRequestHeaders(headers);
}else if(tC.getPropertyValue("isDeviceFlag").toString() == "true"){
/*
	*  construct the device auth header
	*/

	tC.setPropertyValue("deviceAuthHeaderValue","dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6");
	/*
	  * Disable below step by Sanjeet
	  * Since added a script in setup suite to get this from DB.So commenting from here.
	*/
 	 //headers.put("x-dece-ApplicationAuthorization","dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6")
 	 headers.put("x-dece-ApplicationAuthorization",tP.getPropertyValue("XDeceApplicationAuthorization"));
 	 httpRequestStep.setRequestHeaders(headers);		
}

if (tC.getPropertyValue("actionAuthHeader") == "EXCLUDE") {
	tC.setPropertyValue("authHeaderValue",null);
	}


if (tC.getPropertyValue("actionDeviceAuthHeader") == "EXCLUDE") {
	tC.setPropertyValue("deviceAuthHeaderValue",null);
	}</script></con:config></con:testStep><con:testStep type="groovy" name="Compute expected audience list" id="666ea1b3-2bc9-4572-9a65-18438ce64237">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("stsComputedAudienceList",null);

String affiliates = "";
int i = 0;

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	/*
	*  Construct the expected Affiliation list
	*/
	def affiliationList = [tC.getPropertyValue("nodeidFULL").toString()];
	def ignoreNodesList = [];
	def stsaudienceList = [];
	
	if (tC.getPropertyValue("stsaudienceIgnoreAll").toString() == "false") {
		if (tC.getPropertyValue("stsaudience") != 'null') {
			stsaudienceList = tC.getPropertyValue("stsaudience").toString().tokenize(",");

			/*
			*  Now remove the ingnorenodes 
			*/
			if (tC.getPropertyValue("stsaudienceIgnoreNodes") != 'null') {
				ignoreNodesList = tC.getPropertyValue("stsaudienceIgnoreNodes").toString().tokenize(",");
				ignoreNodesList.each {
					if (stsaudienceList.contains(it)) {
						stsaudienceList = stsaudienceList.minus(it);
					}
				}
			}
		}

		if (stsaudienceList.size() >= 1) {
			log.info "DEBUG: Adding stsaudienceList";
			affiliationList.addAll(stsaudienceList);
		}
	} 
	log.info "DEBUG: affiliationList size is " + affiliationList.size();
	affiliationList.each {
		log.info "DEBUG afflicationList Member: " + it;
		affiliates += it;

		i++;
		
		if (i != affiliationList.size()) {
			affiliates += ",";
		}
	}

	tC.setPropertyValue("stsComputedAudienceList",affiliates);

	log.info "stsComputedAudienceList[" + tC.getPropertyValue("stsComputedAudienceList") + "]";
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish pem" id="086458ca-16fa-4e63-b65e-0999b3313118">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - STS");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="POST - STS" id="d1eff77a-7bdb-4ebc-bfff-0694ea3773da"><con:settings/><con:config service="STSCreate" resourcePath="/${#TestCase#endPoint}" methodName="STS - POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS" mediaType="application/xml;charset=UTF-8" postQueryString="false" accept="" sslKeystore="RET_concat.pem" id="048bf8cb-01ae-487e-976b-ed8377a5beae"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#authHeaderValue}"/>
  &lt;con:entry key="x-dece-ApplicationAuthorization" value="${#TestCase#deviceAuthHeaderValue}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>https://${#Project#targetURL}</con:endpoint><con:request>${#TestCase#stsRequestBody}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Decode tokentype" id="5bcda921-0813-41f7-a7b7-fb191c846ced"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tP.getPropertyValue("versionMinor")!="02")
	{
			tC.setPropertyValue("tokentype",URLDecoder.decode(tC.getPropertyValue("tokentype"), "UTF-8"));
	}</script></con:config></con:testStep><con:testStep type="groovy" name="Reset targetURL value" id="d43e6375-16a8-4bcd-a406-200b3c206adb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("targetURL","qa.p.uvvu.com:7001");</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="65d61163-6941-45bd-ac87-f0e1cc2b44c3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep = tC.getTestStepByName('POST - STS');

tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);


/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tP.setPropertyValue("targetURL","qa.p.uvvu.com:7001");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);

this.log.info "contentLength [$contentLength]";
this.log.info "status [$status]";
this.log.info "contentType [$contentType]";
this.log.info "contentLocation [$contentLocation]";

if (contentLength.toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
     rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);

     int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

	//String XMLbody  = strVal.substring(startAssert, strVal.length());
     
	//tC.setPropertyValue("XMLbody", XMLbody);
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract ERROR table information" id="316c61ee-4c7b-401e-aa9a-7d451cd4e424">
        <con:settings/>
        <con:config>
          <script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrType[" + tC.getPropertyValue("expectErrType") + "]";

switch (tC.getPropertyValue("expectErrType")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="9b3475fa-959d-4939-8bf5-675709733db4">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def url = tP.getPropertyValue("targetURL");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

tC.setPropertyValue("assertionUUIDprior",tC.getPropertyValue("assertionUUID"));

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;
String errorID = null;
String errorReason = null;
String errorLink = null;
String orgRequest = url + "/rest/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {

	case "Not Found":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = false;
		doContentLocaton  = false;
		dobodyXML = false;
		doContentTypeHeader = false;
	break;
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "NODE_STATUS_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "application/xml;charset=UTF-8";
		contentLengthZero = false;
		doContentLocaton  = false;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request"
		errorReason = "The request is not valid.";
		errorLink = "";
	break;
	case "FORBIDDEN_INVALID_ROLE":
		errorReason = "forbidden";
		errorID = "urn:dece:errorid:org:dece:securitycontext:Forbidden:1120";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
	case "FORBIDDEN_INVALID_DURATION":
	errorReason = "The security token's duration is not valid.";
	errorID="urn:dece:errorid:org:dece:invalidDurationvalue";
	errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
	case "FORBIDDEN_INVALID_USER_STATUS":
	errorReason = "The request is not authorized.";
	errorID="urn:dece:errorid:org:dece:securitycontext:InvalidUserStatus";
	errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
	case "FORBIDDEN:1123":
		expectHTTPstatus = 
		errorReason = "The request is not authorized.";
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1123";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
	case "FORBIDDEN:1119":
		errorReason = "The request is not authorized.";
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1119";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
	case "unauthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorReason = "The request is not authorized.";
		break;
	
	case "token_rejected":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "text/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:"+expectErrType;
		errorReason = "The request is not authorized.";
		break;
	case "FORBIDDEN":
	default:
		errorReason="Unknown Error";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	// assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	

if (doContentTypeHeader) {
	//assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		/*
		// ErrorLink
		this.log.info "ErrorLink: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
		*/
	} else {
		return false;
	}
}
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION row count" disabled="true" id="6175d71f-491f-475a-b657-f80bc024f8d4">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

int uuidcnt = 0;

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		String uuid = tC.getPropertyValue("contentLocation").toString();

		/*
		*  Assert we have a location header value..
		*/
		assert uuid.length() > 1;

		/*
		*  Verify the value is a URL
		*/
		def lurl = uuid.toURL();
		def urlStr = lurl.getPath();

		int lastSlash = urlStr.lastIndexOf('/');

		/*
		*  Pull just the assertion UUID from the URL
		*/
		String assertionUUID = urlStr.substring(lastSlash + 1);

		log.info "assertionUUID [$assertionUUID]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		assert dbUtils.samlGetUUIDNodeAssertionRowCount(assertionUUID) == 1;
	}
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION prior assertion removed; tokentype:saml2" disabled="true" id="f3d22e2f-9e86-4c12-952e-07eddf6592ab">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String tokentype = tC.getPropertyValue("tokentype").toString();
String scenario = tC.getPropertyValue("scenario").toString();
String assertionUUIDprior = tC.getPropertyValue("assertionUUIDprior").toString();

int uuidcnt = 0;

if (tC.getPropertyValue("expectErrType") == "SUCCESS" &amp;&amp; tokentype == "urn:dece:type:tokentype:saml2" &amp;&amp; scenario!="STSCreate") {

	assert assertionUUIDprior.length() > 4;
	
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  There should only be on NODE_USER_SAML_ASSERTION row 
		*  with this UUID after API invocation
		*/
		assert dbUtils.samlGetUUIDNodeAssertionRowCount(assertionUUIDprior) == 0;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION STATUS, nodeid" disabled="true" id="7b256a23-b3e1-4317-989a-807d84aa544a">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;
def myXML;

tC.setPropertyValue("assertionROW",null);

String arow = "";
String nodeid = tC.getPropertyValue("nodeid").toString();
String deviceNodeID = tP.getPropertyValue("nodeDeviceDefault").toString();

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	/*
	*  Device Node ID override.  All devices are 0200 in 
	*  QA so if the nodeID received is one of our defined
	*  devices change the setting for validation 
	*  purposes.
	*/
	switch (nodeid) {
		case tP.getPropertyValue("nodeIdDEV").toString():
			nodeid = deviceNodeID;
			break;
	}
	
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		String uuid = tC.getPropertyValue("contentLocation").toString();
		
		/*
		*  Assert we have a location header value..
		*/
		assert uuid.length() > 1;

		/*
		*  Verify the value is a URL
		*/
		def lurl = uuid.toURL();
		def urlStr = lurl.getPath();

		int lastSlash = urlStr.lastIndexOf('/');

		/*
		*  Pull just the assertion UUID from the URL
		*/
		String assertionUUID = urlStr.substring(lastSlash + 1);

		log.info "assertionUUID [$assertionUUID]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		arow = dbUtils.samlGetAssertionRow(assertionUUID);

		assert arow.length() > 0;

		log.info "arow is [$arow]";

		tC.setPropertyValue("assertionROW",arow);
	}

	/*
	*  Parse the XML
	*/
	try {
		myXML = new XmlSlurper().parseText(arow);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify only one row was returned..
		*/
		log.info "ASSERT - Row Size is 1";
		assert myXML.ResultSet.Row.size() == 1;

		/*
		*  Verify NODE_USER_SAML_ASSERTION.STATUS is active
		*/
		log.info "ASSERT - STATUS is active";
		assert myXML.ResultSet.Row.STATUS.text() == "active";

		/*
		*  Verify NODE_USER_SAML_ASSERTION.nodeid
		*/
		log.info "ASSERT - nodeid Expect[$nodeid] Received[" +
			myXML.ResultSet.Row.NODE_OID.text() + "]";
		assert myXML.ResultSet.Row.NODE_OID.text() == nodeid;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION.EXPIRATION" disabled="true" id="5fc57dc6-b4b0-4a73-b526-ec2f089184c3">
        <con:settings/>
        <con:config><script><![CDATA[import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def a;

int expectTime = tC.getPropertyValue("expectCreateExpireHoursDiff").toInteger();

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	String uname = tC.getPropertyValue("assertionUUID").toString().trim();
	String sys = tP.getPropertyValue("targetSystem").toString();
	String results = "";
	String secs = "";

	String sql = """SELECT (extract(DAY FROM EXPIRATION_DATE - CREATED_DATE)*24) 
		as HOURS FROM NODE_USER_SAML_ASSERTION where NODE_USER_SAML_UUID = '$uname'
	""";

	log.info sql;

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		results = a.SelectFromDB(sql,sys);
		log.info results;
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbUtils - $e"; 
		assert 1 == 2;
	}
	finally {
		try {
			def myXML = new XmlSlurper().parseText(results);
			assert myXML.ResultSet.Row.size() == 1;
			results = myXML.ResultSet.Row[0].HOURS
		}
		catch (Throwable e) {
			log.info "ERROR - XmlSlurper - $e";
			assert 1 == 2;
		} 
		finally {
			/*
			*  There is sometype of bug in oracle where it, at times, screws 
			*  update the date diff up to 24 hours.
			*/
						
			log.info "Expect[$expectTime] - Received[" +  results.toInteger() + "]";
			//assert (results.toInteger() == expectTime);
			//assert (results.toInteger() <= expectTime + 06 && results.toInteger() >= expectTime - 06);
			assert (results.toInteger() <= expectTime + 24 && results.toInteger() >= expectTime - 24);
		}
	}
}]]></script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION.NODE_USER_SAML_ASSERTION" disabled="true" id="0e61f3b0-1d7d-4410-8b29-d9fba634f61d">
        <con:settings/>
        <con:config><script><![CDATA[/*
*  VALIDATIONS PERFORMED
*
*  saml2p:StatusCode == urn:oasis:names:tc:SAML:2.0:status:Success
*
*  <saml2:Issuer> == Project.Property("samlIssuer") (http://c.decellc.com/)
*
*  <saml2:AuthenticatingAuthority> == Project.Property("samlAuthenticatingAuthority") 
*	(urn:dece:org:neustar:coordinator)
*
*  <AudienceRestriction>
*	Verifications include insuring the size of the <AudienceRestriction> matches
*	the number of nodes expected.
*
*	For DEVICES this check will verify NO audience members are included.
*
*	Also verification of the nodes used in assertion creation/affiliation via
*	the STS call are contained within the <AudienceRestriction> node
*/
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def dbUtils;
def dbUtilsUser;

tC.setPropertyValue("computedAssertionXML",null);
tC.setPropertyValue("dbassertionNodeaccountid",null);
tC.setPropertyValue("dbassertionNodeuserid",null);

String assertionXML = "";
String arow = tC.getPropertyValue("assertionROW");
String[] affiliates;

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	def affiliationList = tC.getPropertyValue("stsComputedAudienceList").toString().tokenize(",");
	def ignoreNodesList = tC.getPropertyValue("stsaudienceIgnoreNodes").toString().tokenize(",");
	log.info "affiliationList size is " + affiliationList.size();
		
	/*
	*  Make sure we have data in arow
	*/
	assert arow.length() > 1;

	/*
	*  Get a handle for the saml class.
	*/
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	/*
	*  Get a handle for the user class.
	*/
	try {
		dbUtilsUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbUser - $e";
		assert 1 == 2;
	}
	
	try {
		myXML = new XmlSlurper().parseText(arow);
		log.info 'myXML----------->'+myXML
		log.info 'size------->'+myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".size()
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify only one row was returned..
		*/
		log.info "ASSERT - Row Size is 1";
		assert myXML.ResultSet.Row.size() == 1;

		String assertRaw = myXML.ResultSet.Row.NODE_USER_SAML_ASSERTION_PART1.text() +
				myXML.ResultSet.Row.NODE_USER_SAML_ASSERTION_PART2.text();
			log.info 'assertRaw----->'+assertRaw

		/*
		*  Base64 decode the assertion clob
		*/
		byte [] xmlBytes = Base64.decode(assertRaw);
		assertionXML = new String(xmlBytes, "UTF8");

		assert assertionXML.length() > 1;

		tC.setPropertyValue("computedAssertionXML", assertionXML);
	}
	/*
	*  Now parse the assertion XML
	*/
	try {
		myXML = new XmlSlurper().parseText(assertionXML).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", saml2p: "urn:oasis:names:tc:SAML:2.0:protocol");
		log.info 'myXML----------->'+myXML
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Check the status
		*/
		log.info "ASSERT: Status size 1 == " + myXML."saml2p:Status".size();
		assert 1 == myXML."saml2p:Status".size();

		def s = myXML."saml2p:Status"."saml2p:StatusCode".@Value;
		log.info "ASSERT: Status value is urn:oasis:names:tc:SAML:2.0:status:Success == $s";
		assert "urn:oasis:names:tc:SAML:2.0:status:Success" == s.toString();

		/*
		*  Verify the nodeaccountid.
		*/
		String aname = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute".@Name;
		String anameE = "accountID";
		log.info "ASSERT: NodeAccountID - Name Attribute Value - Expect[$anameE] - Received[$aname]";
		assert anameE == aname;

		String avalue = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
		log.info "ASSERT: Returned Account NodeID length > 0 -- [$avalue]";
		assert avalue.length() > 0;
		tC.setPropertyValue("dbassertionNodeaccountid", avalue);

		/*
		*  Verify the nodeuserid
		*/
		String uvalue = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID".text();
		log.info "ASSERT: Returned Account UserID length > 0 -- [$uvalue]";
	
		//  Not zero length
		assert uvalue.length() > 0;

		//  Save for future
		tC.setPropertyValue("dbassertionNodeuserid", uvalue);
		int lastColon = uvalue.lastIndexOf(':');
		def uvalueid = uvalue.substring(lastColon + 1);

		//  Get USER_OID from NODE_USER table.
		def uvaluedb = dbUtils.samlGetNodeUserIDfromNodeUser(uvalueid);
		def unameval = tC.getPropertyValue("useroid").toString();
		log.info "ASSERT: NODE_USER.USER_OID Recv[$uvaluedb] - Expect[$unameval]";
		assert uvaluedb == unameval;

		/*
		* <saml2:Issuer>
		*/
		log.info "ASSERT: <saml2:Issuer> Expect: " +
			tP.getPropertyValue("samlIssuer") +
			" Received:[" + myXML."saml2:Assertion"."saml2:Issuer".text() +
			"]";
		assert tP.getPropertyValue("samlIssuer").toString() == myXML."saml2:Assertion"."saml2:Issuer".text();

		/*
		*  saml2:AuthnStatement
		*/
		log.info "ASSERT: <saml2:AuthenticatingAuthority> Expect [" + 
			tP.getPropertyValue("samlAuthenticatingAuthority") +
			"] Received[" +
			myXML."saml2:Assertion"."saml2:AuthnStatement"."saml2:AuthnContext"."saml2:AuthenticatingAuthority".text() +
			"]";
		assert tP.getPropertyValue("samlAuthenticatingAuthority").toString() ==
			myXML."saml2:Assertion"."saml2:AuthnStatement"."saml2:AuthnContext"."saml2:AuthenticatingAuthority".text()

		/*
		*  AudienceRestriction Processing
		*/
		if (tC.getPropertyValue("isDeviceFlag").toString() == "true") {
			/*
			*  Just empty the list that way we will check
			*  for zero
			*/
			affiliationList = "";
		}
		log.info "ASSERT: AudienceList size Expect[" +
			affiliationList.size() + "] Received[ " +
			myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".size() +
			"]";
	assert affiliationList.size() == myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".size();

		myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".each {
			log.info "ASSERT: <saml2:AudienceRestriction> Contains [" +
				it.text() + "]";
				log.info "affiliationList: "+affiliationList;
			assert affiliationList.contains(it);
		}
		//Make sure none of the ingnoredNodes made it into the affilation list.
		ignoreNodesList.each {
			log.info "ASSERT: <saml2:AudienceRestriction> DOES NOT Contain [" + it + "]";
			assert !affiliationList.contains(it);
		}


		
	}
}]]></script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_ACCOUNT row" disabled="true" id="d3d37603-e426-481c-bf68-95eedce1751e">
        <con:settings/>
        <con:config><script>/*
*  Verifications
*
*	Only one NODE_ACCOUNT row exists for the NODE_ACCOUNT_ID.
*
*	nodeid is the nodeOID for the entity node.
*
*	ACCOUNT_OID is correct.
*
*/
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

def myXML;
def nodeXML;

tC.setPropertyValue("assertionAccountId",null);

String assertionAccountId = "";
String arow = "";
String narow = "";
String nodeid = tC.getPropertyValue("nodeid").toString();

/*
*  if we are a device adjust the 
*  nodeid...
*/
if (tC.getPropertyValue("isDeviceFlag") == "true") {
	nodeid = tP.getPropertyValue("nodeDeviceDefault").toString();
}

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	
	arow = tC.getPropertyValue("assertionROW").toString();

	assert arow.length() > 0;

	/*
	*  Parse the NODE_USER_SAML_ASSERTION row
	*/
	try {
		myXML = new XmlSlurper().parseText(arow);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		assertionAccountId = myXML.ResultSet.Row.NODE_ACCOUNT_ID.text();

		log.info "assertionAccountId[$assertionAccountId]";
	}

	/*
	*  Get and Prase the NODE_ACCOUNT row..
	*/
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
		narow = dbUtils.samlGetNodeAccountRow(assertionAccountId);

		assert narow.length() > 0;
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		assertionAccountId = myXML.ResultSet.Row.NODE_ACCOUNT_ID.text();

		log.info "assertionAccountId[$assertionAccountId]";

		try {
			nodeXML = new XmlSlurper().parseText(arow);
		}
		catch(Throwable e) {
			log.info "ERROR - XmlSlurper - $e";
			assert 1 == 2;
		}
		finally {
			/*
			*  Only one row should be returned.
			*/
			log.info "ASSERT: Row Size is 1";
			assert nodeXML.ResultSet.Row.size() == 1;
			
			/*
			* ACCOUNT_OID - ugh  :(  for some reason slurper cannot find ACCOUNT_OID
			*	I will fix later  
			*/
			log.info "ASSERT: ACCOUNT_OID Expect[" + tC.getPropertyValue("accountoid") +
				"] Received[" + nodeXML.ResultSet.Row.ACCOUNT_OID.text() + "]";
		//	assert tC.getPropertyValue("accountoid").toString() == nodeXML.ResultSet.Row.ACCOUNT_OID.text();

			/*
			*  nodeid is the entity node...
			*/
			
			log.info "ASSERT: nodeid Expect[" + nodeid +
				"] Received[" + nodeXML.ResultSet.Row.NODE_OID.text() + "]";
			assert nodeid == nodeXML.ResultSet.Row.NODE_OID.text();

		}
	}	
}

tC.setPropertyValue("assertionAccountId",assertionAccountId);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER row count" disabled="true" id="5c639ccb-cbd4-4770-b94d-39a8daf8487f">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int expectedSize = 1;
int assertionSize = 0;
int stsaudienceSize = 1;  // Start at one as entity nodes is in audience
int stsaudienceIgnoreSize = 0;
int expectNodeUserRowCount = tC.getPropertyValue("expectNodeUserRowCount").toInteger();

tC.setPropertyValue("z_resultNodeUserRowCount",null);

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	if (tC.getPropertyValue("stsaudienceIgnoreAll").toString() == "false") {
		if ( tC.getPropertyValue("stsaudience") != null) {
			stsaudienceSize += tC.getPropertyValue("stsaudience").toString().tokenize(",").size();
			log.info "stsaudienceSize BEFORE [$stsaudienceSize]";
		}
		if ( tC.getPropertyValue("stsaudienceIgnoreNodes") != null) {
			stsaudienceIgnoreSize = tC.getPropertyValue("stsaudienceIgnoreNodes").toString().tokenize(",").size();
			log.info "stsaudienceIgnoreSize BEFORE [$stsaudienceIgnoreSize]";
		}

		stsaudienceSize -= stsaudienceIgnoreSize;
		log.info "stsaudienceSize FINAL [$stsaudienceSize]";
	} else {
		log.info "No changes to count";
	}
	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	assertionSize = a.samlGetUUIDNodeUserRowCountbyUUID(tC.getPropertyValue("assertionUUID"));

	tC.setPropertyValue("z_resultNodeUserRowCount",assertionSize.toString());

	if (expectNodeUserRowCount == 0) {
		log.info "ASSERT: Audience Size[$stsaudienceSize] - Received[$assertionSize]";
		assert assertionSize == stsaudienceSize;
	} else {
		log.info "ASSERT: Audience Size[$stsaudienceSize] - Received[$expectNodeUserRowCount]";
		assert stsaudienceSize == expectNodeUserRowCount;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER rows" disabled="true" id="1ecaae32-1cd5-4bed-b535-14bb08a8076f">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));

String uuid = tC.getPropertyValue("assertionUUID").toString();
String nodeUser = tC.getPropertyValue("assertionUserId").toString();
String nodeoid = tC.getPropertyValue("nodeid").toString();
String resultsDB = "";
String node = "";
List nodeList;

int indexOfcol = 0;

if (tC.getPropertyValue("actionSkipNodeUserCheck") != "true") {
	if (tC.getPropertyValue("expectErrType").toString() == "SUCCESS") {
		assert tC.getPropertyValue("stsComputedAudienceList").toString() != 'null';

		/*
		*  Devices should not ever be affilated.
		*/
		if (tC.getPropertyValue("isDeviceFlag").toString() != "true") {
			nodeList = tC.getPropertyValue("stsComputedAudienceList").toString().tokenize(",");
		} else {
			nodeList = tP.getPropertyValue("nodeDeviceDefault").toString().tokenize(",");
		}
		
		log.info "nodeList size is " + nodeList.size();

		nodeList.each {
			assert nodeList.isEmpty() == false;
			
			log.info "Processing NODE: $it";
			indexOfcol = it.lastIndexOf(":");
			node = it.substring(indexOfcol + 1);
			log.info "node is $node";

			String sql = """SELECT to_char(rawtohex(USER_OID)) USER_OID,
				to_char(rawtohex(NODE_OID)) NODE_OID, 
				to_char(rawtohex(NODE_USER_ID)) NODE_USER_ID 
				FROM NODE_USER where NODE_USER_SAML_UUID = '$uuid' 
 				and NODE_OID = '$node'""";
			try {
				log.info "sql is [$sql]";
				resultsDB = dbUtils.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
			} catch (Throwable e) {
				log.info "ERROR - SelectFromDB issue! - $e";
			} finally {
				log.info "results is [$resultsDB]";
			}
		
			try {
				def myXML = new XmlSlurper().parseText(resultsDB);
	
				String dbUserOID = myXML.ResultSet.Row[0].USER_OID;
				String dbNodeOID = myXML.ResultSet.Row[0].NODE_OID;
				String dbNodeUserOID = myXML.ResultSet.Row[0].NODE_USER_ID;
			}
			catch(Throwable e) {
				log.info "ERROR - XmlSlurper Problem - $e";
			}
			finally {
				log.info "Assert DB USER_OID [$dbUserOID] == [" + tC.getPropertyValue("userOID") + "]";
				assert dbUserOID == tC.getPropertyValue("userOID").toString();

				log.info "Assert DB NODE_OID [$dbNodeOID] == [$node]";
				assert dbNodeOID == node;

			} 	
		}
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify LVAL EUDU &amp; EMUC row count" disabled="true" id="9ef8c54b-edae-4161-a345-07a67bea77c0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));

String uuid = tC.getPropertyValue("assertionUUID").toString();
String useroid = tC.getPropertyValue("useroid").toString();
String resultsDB = "";
String node = "";
List nodeList;
List policyList = "100,103,104".toString().tokenize(",");

int indexOfcol = 0;

if (tC.getPropertyValue("versionMinor") == "06" &amp;&amp; tC.getPropertyValue("actionSkipPolicyCheck") != "true" &amp;&amp; tC.getPropertyValue("tokentype")!= URLEncoder.encode(tP.getPropertyValue("urntokenType_deviceauthtoken"), "UTF-8")) {
	if (tC.getPropertyValue("expectErrType").toString() == "SUCCESS") {
		assert tC.getPropertyValue("stsComputedAudienceList").toString() != 'null';

		/*
		*  Devices should not ever be affilated.
		*/
		if (tC.getPropertyValue("isDeviceFlag").toString() != "true") {
			nodeList = tC.getPropertyValue("stsComputedAudienceList").toString().tokenize(",");
		} else {
			nodeList = tP.getPropertyValue("nodeDeviceDefault").toString().tokenize(",");
		}
		
		log.info "nodeList size is " + nodeList.size();
policyList.each{
	log.info "Verifiying for $it";
	policyClass =  it;
		nodeList.each {
			assert nodeList.isEmpty() == false;
			
			log.info "Processing NODE: $it";
			indexOfcol = it.lastIndexOf(":");
			node = it.substring(indexOfcol + 1);
			log.info "node is $node";

			String sql = """select POLICY_CLASS,STATUS,to_char(rawtohex(CREATED_BY)) CREATED_BY,ENTITY_ID from POLICY P,POLICY_REQUESTING_ENTITY PRE where P.CREATED_BY = (Select USER_OID from NODE_USER where NODE_USER_SAML_UUID = '$uuid' and NODE_OID = '$node') 
and P.POLICY_CLASS = '$policyClass' and P.STATUS = 'active' and P.POLICY_OID = PRE.POLICY_OID and PRE.ENTITY_TYPE = 'node' and PRE.ENTITY_ID = '$node'""";
			try {
				log.info "sql is [$sql]";
				resultsDB = dbUtils.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
			} catch (Throwable e) {
				log.info "ERROR - SelectFromDB issue! - $e";
			} finally {
				log.info "results is [$resultsDB]";
			}
		
			try {
				def myXML = new XmlSlurper().parseText(resultsDB);
	
				String dbUserOID = myXML.ResultSet.Row[0].CREATED_BY;
				
			}
			catch(Throwable e) {
				log.info "ERROR - XmlSlurper Problem - $e";
			}
			finally {
				log.info "DB row count Receved: "+myXML.ResultSet.size();
				assert myXML.ResultSet.size()==1;
				
				log.info "Assert DB USER_OID [$dbUserOID] == [" + tC.getPropertyValue("userOID") + "]";
				assert dbUserOID == tC.getPropertyValue("userOID").toString();
	

			} 	
		}
	}
	}
}else{
	log.info "Second User Policy Check... or token create using auth token oe version 02";
}
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER prior removed; tokentype:saml2" disabled="true" id="6786f7af-9c2c-4a1c-97af-0a5134a3a79e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def a;

String tokentype = tC.getPropertyValue("tokentype").toString();
String scenario = tC.getPropertyValue("scenario").toString();
String assertionUUIDprior = tC.getPropertyValue("assertionUUIDprior").toString();

tC.setPropertyValue("z_resultNodeUserRowCount",null);

if (tC.getPropertyValue("expectErrType") == "SUCCESS" &amp;&amp; tokentype == "urn:dece:type:tokentype:saml2" &amp;&amp; scenario != "STSCreate") {

	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	assertionSize = a.samlGetUUIDNodeUserRowCountbyUUID(assertionUUIDprior);

	log.info "ASSERT: No Rows for [$assertionUUIDprior]";
	assert assertionSize == 0;
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return the assertion information to the Calling Test Case" disabled="true" id="5393a38f-e379-40f7-b04a-3d3a94440246">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",null);

callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>z_resultNodeUserRowCount</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" >
<Error ErrorID="urn:dece:errorid:org:dece:securitycontext:forbidden:1123">
       <Reason Language="en">The request is not authorized.</Reason>
        <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/06/SecurityToken/SecurityTokenExchange</OriginalRequest>
       <ErrorLink>https://qa.q.uvvu.com:7001/deceerrors/error/error_response.html</ErrorLink>
    </Error>
</ErrorList>
]]></con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E85F5B58B524B83FE0401F0A05992889</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">stsapi_107_1381391915267</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_11026 - STSCreate - retailer - unamepasswd - Not Found - on sHost - P0</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>stsSkipLastLoginCheck</con:name><con:value>false</con:value></con:property><con:property><con:name>stsRequestUserNameFlag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsRequestBodyNULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsRequestBody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<Credentials xmlns="http://www.decellc.org/schema/2013/10/coordinator">
   <Username>stsapi_107_1381391915267</Username>
   <Password>testing</Password>
</Credentials>]]></con:value></con:property><con:property><con:name>stsExpire</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsduration</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsComputedAudienceList</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsaudienceSuffixedDelimiter</con:name><con:value>false</con:value></con:property><con:property><con:name>stsaudiencePrefixDelimiter</con:name><con:value>false</con:value></con:property><con:property><con:name>stsaudienceIgnoreNodes</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsaudienceIgnoreAll</con:name><con:value>false</con:value></con:property><con:property><con:name>stsaudienceEmbeddedDelimiter</con:name><con:value>false</con:value></con:property><con:property><con:name>stsaudience</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>sName</con:name><con:value>1_STS Create Tokentype unamepasswd - Payload</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>86713</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>nodeidFULL</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property>
        
        
        
        
        
        <con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>isDeviceFlag</con:name><con:value>false</con:value></con:property><con:property><con:name>expectNodeUserRowCount</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRightsTokenCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Not Found</con:value></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property>
        
        
        
        
        
      <con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>deviceAuthToken</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deviceAuthString</con:name><con:value>841321476135740</con:value></con:property><con:property><con:name>dbassertionNodeuserid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:D87D2AF189718B27E0401F0A05993EB9</con:value></con:property><con:property><con:name>dbassertionNodeaccountid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:D87D2AF1896F8B27E0401F0A05993EB9</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/html; charset=iso-8859-1</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLength</con:name><con:value>308</con:value></con:property><con:property><con:name>connection</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>computedAssertionXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2p:Response Consent="urn:oasis:names:tc:SAML:2.0:consent:unspecified" ID="_96ad4bc6-22a6-4353-a3bf-19859152a106" IssueInstant="2013-03-22T04:53:01.147Z" Version="2.0" xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol"><saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">http://c.decellc.com/</saml2:Issuer><saml2p:Status><saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/></saml2p:Status><saml2:Assertion ID="_b5caab0c-35e2-4e9d-8236-200985cdfa1a" IssueInstant="2013-03-22T04:53:01.147Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_b5caab0c-35e2-4e9d-8236-200985cdfa1a">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>jB8D1/pLhrVUDWrUF4IjtCzqJcQ=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
SW5yw1R/rBx63YvtAHknTEIrdCKU/7t9GeYzBJJsst0AFal6urrghVo+5xZvIUaZS9oJ6Te9c8Zd
DnAHHIt9WV066sWLHyBx7vZYZ2AbVveiCCCumYqjO4tWVduX/2Y6VaiFp8kRckJ8UlBk5n06PFky
Pn6swMA78s2xB5kjTHg=
</ds:SignatureValue>
<ds:KeyInfo><ds:X509Data><ds:X509Certificate>MIIDuzCCAySgAwIBAgIBAjANBgkqhkiG9w0BAQQFADCBljELMAkGA1UEBhMCVVMxCzAJBgNVBAgT
AlZBMREwDwYDVQQHEwhTdGVybGluZzENMAsGA1UEChMEREVDRTEMMAoGA1UECxMDbGxjMSMwIQYD
VQQDExpzdG9teGxic2I5MS52YS5uZXVzdGFyLmNvbTElMCMGCSqGSIb3DQEJARYWc2FudG9zLmpo
YUBuZXVzdGFyLmJpejAeFw0xMDAzMTkwMTU2NDRaFw0xMTAzMTkwMTU2NDRaMIGJMQswCQYDVQQG
EwJVUzELMAkGA1UECBMCdmExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQ0w
CwYDVQQLEwRERUNFMRIwEAYDVQQDEwlsb2NhbGhvc3QxJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5q
aGFAbmV1c3Rhci5iaXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALBV5Opi92ieLfFomehr
M1oKkvzx08i3OgPNW5Dfk7PGiP3adh/Ilc2j3kAIIedK1hQadRY/RDniz6OKUXeirYztN5Q16i85
RWuUXDol7dHXYUK+xYcQTOPSUWPzxxNqj8zltHOBHrSJMDgONeePsc+/0aFBT8D5CYHjHEwfR0e5
AgMBAAGjggEiMIIBHjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl
ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU5+JXeZQNlTVtAwpVfn110GpQHfMwgcMGA1UdIwSBuzCB
uIAUaOpJ0xKV601qQdlJS9AU3xS2kxOhgZykgZkwgZYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJW
QTERMA8GA1UEBxMIU3RlcmxpbmcxDTALBgNVBAoTBERFQ0UxDDAKBgNVBAsTA2xsYzEjMCEGA1UE
AxMac3RvbXhsYnNiOTEudmEubmV1c3Rhci5jb20xJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5qaGFA
bmV1c3Rhci5iaXqCAQAwDQYJKoZIhvcNAQEEBQADgYEAfq+I8D1s56CpsWwgBGEqQ7VLJ9p0QXLk
B+F/gtil4On8wTK+W1yw7hjQWW9IDhC+nfYh3btB0azcQeJk7GiRkDn64lyMLMQ5Ui/ly0jeqwsL
NI1nE3tzF/9ru+BmZimzz342UmPSuvIUaKs1yhbqW9wjPH6//rGy5z7ZvQFXocY=</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:D87D2AF189718B27E0401F0A05993EB9</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"><saml2:SubjectConfirmationData NotOnOrAfter="2013-03-22T07:53:01.147Z"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2013-03-22T04:52:51.147Z" NotOnOrAfter="2023-03-22T04:53:01.147Z"/><saml2:Advice><saml2:AssertionURIRef>https://qa.d.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_b5caab0c-35e2-4e9d-8236-200985cdfa1a</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2013-03-22T04:53:01.147Z" SessionIndex="_b5caab0c-35e2-4e9d-8236-200985cdfa1a"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:D87D2AF1896F8B27E0401F0A05993EB9</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></saml2p:Response>]]></con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertUserId</con:name><con:value>94B6AE0F85AFC20DE0401F0A0799081F</con:value></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUIDprior</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionROW</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <NODE_USER_SAML_ASSERTION_OID>D87D2AF189738B27E0401F0A05993EB9</NODE_USER_SAML_ASSERTION_OID>
      <NODE_OID>0200</NODE_OID>
      <NODE_USER_SAML_ASSERTION_PART1>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHNhbWwycDpSZXNwb25zZSBDb25zZW50PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDp1bnNwZWNpZmllZCIgSUQ9Il85NmFkNGJjNi0yMmE2LTQzNTMtYTNiZi0xOTg1OTE1MmExMDYiIElzc3VlSW5zdGFudD0iMjAxMy0wMy0yMlQwNDo1MzowMS4xNDdaIiBWZXJzaW9uPSIyLjAiIHhtbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIj48c2FtbDI6SXNzdWVyIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj5odHRwOi8vYy5kZWNlbGxjLmNvbS88L3NhbWwyOklzc3Vlcj48c2FtbDJwOlN0YXR1cz48c2FtbDJwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIvPjwvc2FtbDJwOlN0YXR1cz48c2FtbDI6QXNzZXJ0aW9uIElEPSJfYjVjYWFiMGMtMzVlMi00ZTlkLTgyMzYtMjAwOTg1Y2RmYTFhIiBJc3N1ZUluc3RhbnQ9IjIwMTMtMDMtMjJUMDQ6NTM6MDEuMTQ3WiIgVmVyc2lvbj0iMi4wIiB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+PHNhbWwyOklzc3Vlcj5odHRwOi8vYy5kZWNlbGxjLmNvbS88L3NhbWwyOklzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj4KPGRzOlNpZ25lZEluZm8+CjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+CjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz4KPGRzOlJlZmVyZW5jZSBVUkk9IiNfYjVjYWFiMGMtMzVlMi00ZTlkLTgyMzYtMjAwOTg1Y2RmYTFhIj4KPGRzOlRyYW5zZm9ybXM+CjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPgo8ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIj48ZWM6SW5jbHVzaXZlTmFtZXNwYWNlcyBQcmVmaXhMaXN0PSJkcyBzYW1sMiB4cyIgeG1sbnM6ZWM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvZHM6VHJhbnNmb3JtPgo8L2RzOlRyYW5zZm9ybXM+CjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIvPgo8ZHM6RGlnZXN0VmFsdWU+akI4RDEvcExoclZVRFdyVUY0SWp0Q3pxSmNRPTwvZHM6RGlnZXN0VmFsdWU+CjwvZHM6UmVmZXJlbmNlPgo8L2RzOlNpZ25lZEluZm8+CjxkczpTaWduYXR1cmVWYWx1ZT4KU1c1eXcxUi9yQng2M1l2dEFIa25URUlyZENLVS83dDlHZVl6QkpKc3N0MEFGYWw2dXJyZ2hWbys1eFp2SVVhWlM5b0o2VGU5YzhaZApEbkFISEl0OVdWMDY2c1dMSHlCeDd2WllaMkFiVnZlaUNDQ3VtWXFqTzR0V1ZkdVgvMlk2VmFpRnA4a1Jja0o4VWxCazVuMDZQRmt5ClBuNnN3TUE3OHMyeEI1a2pUSGc9CjwvZHM6U2lnbmF0dXJlVmFsdWU+CjxkczpLZXlJbmZvPjxkczpYNTA5RGF0YT48ZHM6WDUwOUNlcnRpZmljYXRlPk1JSUR1ekNDQXlTZ0F3SUJBZ0lCQWpBTkJna3Foa2lHOXcwQkFRUUZBRENCbGpFTE1Ba0dBMVVFQmhNQ1ZWTXhDekFKQmdOVkJBZ1QKQWxaQk1SRXdEd1lEVlFRSEV3aFRkR1Z5YkdsdVp6RU5NQXNHQTFVRUNoTUVSRVZEUlRFTU1Bb0dBMVVFQ3hNRGJHeGpNU013SVFZRApWUVFERXhwemRHOXRlR3hpYzJJNU1TNTJZUzV1WlhWemRHRnlMbU52YlRFbE1DTUdDU3FHU0liM0RRRUpBUllXYzJGdWRHOXpMbXBvCllVQnVaWFZ6ZEdGeUxtSnBlakFlRncweE1EQXpNVGt3TVRVMk5EUmFGdzB4TVRBek1Ua3dNVFUyTkRSYU1JR0pNUXN3Q1FZRFZRUUcKRXdKVlV6RUxNQWtHQTFVRUNCTUNkbUV4RVRBUEJnTlZCQWNUQ0ZOMFpYSnNhVzVuTVJBd0RnWURWUVFLRXdkT1pYVnpkR0Z5TVEwdwpDd1lEVlFRTEV3UkVSVU5GTVJJd0VBWURWUVFERXdsc2IyTmhiR2h2YzNReEpUQWpCZ2txaGtpRzl3MEJDUUVXRm5OaGJuUnZjeTVxCmFHRkFibVYxYzNSaGNpNWlhWG93Z1o4d0RRWUpLb1pJaHZjTkFRRUJCUUFEZ1kwQU1JR0pBb0dCQUxCVjVPcGk5MmllTGZGb21laHIKTTFvS2t2engwOGkzT2dQTlc1RGZrN1BHaVAzYWRoL0lsYzJqM2tBSUllZEsxaFFhZFJZL1JEbml6Nk9LVVhlaXJZenRONVExNmk4NQpSV3VVWERvbDdkSFhZVUsreFljUVRPUFNVV1B6eHhOcWo4emx0SE9CSHJTSk1EZ09OZWVQc2MrLzBhRkJUOEQ1Q1lIakhFd2ZSMGU1CkFnTUJBQUdqZ2dFaU1JSUJIakFKQmdOVkhSTUVBakFBTUN3R0NXQ0dTQUdHK0VJQkRRUWZGaDFQY0dWdVUxTk1JRWRsYm1WeVlYUmwKWkNCRFpYSjBhV1pwWTJGMFpUQWRCZ05WSFE0RUZnUVU1K0pYZVpRTmxUVnRBd3BWZm4xMTBHcFFIZk13Z2NNR0ExVWRJd1NCdXpDQgp1SUFVYU9wSjB4S1Y2MDFxUWRsSlM5QVUzeFMya3hPaGdaeWtnWmt3Z1pZeEN6QUpCZ05WQkFZVEFsVlRNUXN3Q1FZRFZRUUlFd0pXClFURVJNQThHQTFVRUJ4TUlVM1JsY214cGJtY3hEVEFMQmdOVkJBb1RCRVJGUTBVeEREQUtCZ05WQkFzVEEyeHNZekVqTUNFR0ExVUUKQXhNYWMzUnZiWGhzWW5OaU9URXVkbUV1Ym1WMWMzUmhjaTVqYjIweEpUQWpCZ2txaGtpRzl3MEJDUUVXRm5OaGJuUnZjeTVxYUdGQQpibVYxYzNSaGNpNWlhWHFDQVFBd0RRWUpLb1pJaHZjTkFRRUVCUUFEZ1lFQWZxK0k4RDFzNTZDcHNXd2dCR0VxUTdWTEo5cDBRWExrCkIrRi9ndGlsNE9uOHdUSytXMXl3N2hqUVdXOUlEaEMrbmZZaDNidEIwYXpjUWVKazdHaVJrRG42NGx5TUxNUTVVaS9seTBqZXF3c0wKTkkxbkUzdHpGLzlydStCbVppbXp6MzQyVW1QU3V2SVVhS3MxeWhicVc5d2pQSDYvL3JHeTV6N1p2UUZYb2NZPTwv</NODE_USER_SAML_ASSERTION_PART1>
      <NODE_USER_SAML_ASSERTION_PART2>ZHM6WDUwOUNlcnRpZmljYXRlPjwvZHM6WDUwOURhdGE+PC9kczpLZXlJbmZvPjwvZHM6U2lnbmF0dXJlPjxzYW1sMjpTdWJqZWN0PjxzYW1sMjpOYW1lSUQgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDpwZXJzaXN0ZW50Ij51cm46ZGVjZTp1c2VyaWQ6b3JnOmRlY2U6RDg3RDJBRjE4OTcxOEIyN0UwNDAxRjBBMDU5OTNFQjk8L3NhbWwyOk5hbWVJRD48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjbTpiZWFyZXIiPjxzYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uRGF0YSBOb3RPbk9yQWZ0ZXI9IjIwMTMtMDMtMjJUMDc6NTM6MDEuMTQ3WiIvPjwvc2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbj48L3NhbWwyOlN1YmplY3Q+PHNhbWwyOkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDEzLTAzLTIyVDA0OjUyOjUxLjE0N1oiIE5vdE9uT3JBZnRlcj0iMjAyMy0wMy0yMlQwNDo1MzowMS4xNDdaIi8+PHNhbWwyOkFkdmljZT48c2FtbDI6QXNzZXJ0aW9uVVJJUmVmPmh0dHBzOi8vcWEuZC51dnZ1LmNvbTo3MDAxL3Jlc3QvMS8wNi9TZWN1cml0eVRva2VuL0Fzc2VydGlvbi9fYjVjYWFiMGMtMzVlMi00ZTlkLTgyMzYtMjAwOTg1Y2RmYTFhPC9zYW1sMjpBc3NlcnRpb25VUklSZWY+PC9zYW1sMjpBZHZpY2U+PHNhbWwyOkF1dGhuU3RhdGVtZW50IEF1dGhuSW5zdGFudD0iMjAxMy0wMy0yMlQwNDo1MzowMS4xNDdaIiBTZXNzaW9uSW5kZXg9Il9iNWNhYWIwYy0zNWUyLTRlOWQtODIzNi0yMDA5ODVjZGZhMWEiPjxzYW1sMjpBdXRobkNvbnRleHQ+PHNhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOlBhc3N3b3JkPC9zYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj48c2FtbDI6QXV0aGVudGljYXRpbmdBdXRob3JpdHk+dXJuOmRlY2U6b3JnOm9yZzpkZWNlOmNvb3JkaW5hdG9yPC9zYW1sMjpBdXRoZW50aWNhdGluZ0F1dGhvcml0eT48L3NhbWwyOkF1dGhuQ29udGV4dD48L3NhbWwyOkF1dGhuU3RhdGVtZW50PjxzYW1sMjpBdHRyaWJ1dGVTdGF0ZW1lbnQ+PHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJhY2NvdW50SUQiIE5hbWVGb3JtYXQ9InVybjpkZWNlOnR5cGU6YWNjb3VudElEIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj51cm46ZGVjZTphY2NvdW50aWQ6b3JnOmRlY2U6RDg3RDJBRjE4OTZGOEIyN0UwNDAxRjBBMDU5OTNFQjk8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjwvc2FtbDI6QXR0cmlidXRlU3RhdGVtZW50Pjwvc2FtbDI6QXNzZXJ0aW9uPjwvc2FtbDJwOlJlc3BvbnNlPg==</NODE_USER_SAML_ASSERTION_PART2>
      <NODE_USER_SAML_UUID>_b5caab0c-35e2-4e9d-8236-200985cdfa1a</NODE_USER_SAML_UUID>
      <CREATED_DATE>2013-03-22 04:53:01.0</CREATED_DATE>
      <NODE_USER_ID>D87D2AF189728B27E0401F0A05993EB9</NODE_USER_ID>
      <NODE_ACCOUNT_ID>D87D2AF189708B27E0401F0A05993EB9</NODE_ACCOUNT_ID>
      <STATUS>active</STATUS>
      <EXPIRATION_DATE>2023-03-22 04:53:01.0</EXPIRATION_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>endPoint</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">rest/1/07/SecurityToken/SecurityTokenExchange?tokentype=urn%3Adece%3Atype%3Atokentype%3Ausernamepassword</con:value></con:property><con:property><con:name>actionSkipPolicyCheck</con:name><con:value>false</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/soapUIProjects/STSAPIProjects_LP1/RET_concat.pem</con:value></con:property><con:property><con:name>authHeaderValue</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deviceAuthHeaderValue</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionAuthHeader</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionDeviceAuthHeader</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>555384c9-6fa2-448b-a38e-713264e945f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamView API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="dc3b7ded-5d12-481d-8593-7c4accb72ca3">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="81374b8b-9396-4ec2-9eb4-2bdeee2766a1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assert",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("streamcreateFlagSkipUserTest",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("status",null);
tC.setPropertyValue("connection",null);
tC.setPropertyValue("contentType",null);
tC.setPropertyValue("contentLength",null);
tC.setPropertyValue("contentLocation",null);
tC.setPropertyValue("expectErrTypeStreamView",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="2b7bf975-9ce4-4ee5-b3c3-597a84b2e9f9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("expectErrTypeStreamView",callTC.getPropertyValue("expectErrTypeStreamCreate"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("streamcreateFlagSkipUserTest",callTC.getPropertyValue("streamcreateFlagSkipUserTest"));

if (tP.getPropertyValue("versionMinor")!="02"){
			tC.setPropertyValue("enassertionAccountIdFULL", URLEncoder.encode(callTC.getPropertyValue("assertionAccountIdFULL"), "UTF-8"));
			}else{
			tC.setPropertyValue("enassertionAccountIdFULL", callTC.getPropertyValue("assertionAccountIdFULL"));
			}
			
if (callTC.getPropertyValue("streamhandle")==null ||callTC.getPropertyValue("streamhandle")=="null")	{
	if (tP.getPropertyValue("versionMinor")!="02"){

			tC.setPropertyValue("streamhandleFULL", URLEncoder.encode(tP.getPropertyValue("StreamHandleID"), "UTF-8"));
			}else{
			tC.setPropertyValue("streamhandleFULL", tP.getPropertyValue("StreamHandleID"));
			}
}
if (tC.getPropertyValue("expectErrTypeStreamView") == null ||
	tC.getPropertyValue("expectErrTypeStreamView") == "null") {
	tC.setPropertyValue("expectErrTypeStreamView","STREAM_NOT_FOUND");		
}
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PEM Set" id="c3ce1d91-7d6f-4401-bc98-fac683064216">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("StreamView");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="StreamView" id="8df6227f-33c4-4afa-89c3-9dcf6d272654"><con:settings/><con:config service="Stream" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Stream/{STREAM}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="StreamView" id="bcfd0ffb-67ca-4ab7-94f1-27b7e0a4af61" mediaType="application/xml;charset=UTF-8" sslKeystore="90009002.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ACCT" value="${#TestCase#enassertionAccountIdFULL}"/>
  <con:entry key="STREAM" value="${#TestCase#streamhandleFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body/Headers" id="80f0be0a-5e7e-408a-8704-750f0626f331">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('StreamView');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep>
      
      
      
      
      
      <con:testStep type="groovy" name="Groovy Script" id="78e20848-083c-4f42-9d66-b60d9396c9be"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamView") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamView")) {
                case "ADULT_CONTENT_NOT_ALLOWED":
                                errId = "Policy:AdultContentNotAllowed";
                                break;
                case "ACCOUNT_NOT_ACTIVE":
                                errId = "AccountNotActive";
                                break;
                case "API_NOT_AUTH":
                                errId = "Security:RoleInvalid";
                                break;
                case "BLOCKED_ACCESS_UNRATED":
                                errId = "Policy:UnratedContentBlocked";
                                break;
                case "CID_NOT_ACTIVE":
                                errId = "ContentIDNotActive";
                                break;
                case "CID_NOT_FOUND":
                                errId = "ContentIDNotFound";
                                break;
                case "LOGICAL_ASSET_NOT_ACTIVE":
                                errId = "AssetLogicalIDNotActive";
                                break;
                case "RT_RENT_EXPIRED":
                                errId = "RightsTokenRentalExpired";
                                break;
                case "RT_NOT_FOUND":
                                errId = "RightsTokenNotFound";
                                break;
                case "RT_NOT_ACTIVE":
                                errId = "RightsTokenNotActive";
                                break;
                case "RATING_POLICY":
                                errId = "RatingPolicyExists";
                                break;
                case "CID_NOT_GRANTED":
                case "STREAM_RIGHTS_NOT_GRANTED":
                                errId = "StreamRightsNotGranted";
                                break;
                case "STREAM_COUNT_EXCEEDED":
                                errId = "AccountStreamCountExceedMaxLimit";
                                break;
                case "STREAM_COUNT_EXCEEDED_USER":
                                errId = "UserStreamCountExceedMaxLimit";
                                break;
                case "STREAM_INVALID_TRANS":
                                errId = "StreamTransactionIdInvalid";
                                break;
                case "STREAM_ACCOUNTID_MISMATCH":
                                errId = "AccountIdUnmatched";
                                break;                   
                case "STREAM_NICKNAME_TOO_LONG":
                                errId = "StreamClientNicknameTooLong";
                                break;                   
                case "STREAM_WINDOW_NOT_ALLOWED":
                                errId = "StreamAssetWindowNotAllowed";
                                break;
                case "STREAM_OWNER_MISMATCH":
                                errId = "StreamOwnerMismatch";
                                break;
                case "STREAM_NOT_FOUND":
                                errId = "StreamNotFound";
                                break;
                case "STREAM_NOT_ACTIVE":
                                errId = "StreamNotActive";
                                break;
                case "USER_NOT_MATCH_TOKEN":
                                errId = "UserIdUnmatched";
                                break;
                case "USER_NOT_ACTIVE":
                                errId = "UserNotActive";
                                break;
                case "USER_NOT_SUPPLIED":
                                errId = "UserNotSpecified";
                                break;
                case       "USER_PRIVILEGE_ACCESS_RESTRICTED":
                     errId = "UserPrivilegeAccessRestricted";
                                break;

}

try {
                xmlData = a.errGetIdInfo(errId);
                
                assert xmlData.trim().length() > 1;

                def myXML = new XmlSlurper().parseText(xmlData);

                log.info myXML.ResultSet.Row.size();
                tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
                tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
                tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

                /*
                *  The DB does not contain the complete HTTP status
                *  string, only the code.  Thus, we must adjust.
                */
                switch (tC.getPropertyValue("errorStatusCode")) {
                                case "400":
                                                tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
                                                break;
                                case "403":
                                                tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
                                                break;
                                case "404":
                                                tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
                                                break;
                                case "409":
                                                tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
                                                break;
                }
}
catch (Throwable e) {
                log.info "STEP FAILURE! --- " + e;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify response headers and body" id="7ffb80e8-f796-416b-b768-a75dd7fb9321"><con:settings/><con:config><script><![CDATA[import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
                try {
                                String dateHolder = "";
                                Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
                                Matcher cdateMatcher = datePattern.matcher(recvDate);
                                if (cdateMatcher.find()) {
                                                dateHolder = cdateMatcher.group(1) + "-" + cdateMatcher.group(2) + "-" +
                                                                cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
                                                                cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
                                                log.info "dateHolder[$dateHolder]";       
                                }
                } 
                catch (Throwable e) {
                                log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
                } 
                finally {
                                return dateHolder;          
                }
}


def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def acct = tC.getPropertyValue("nodeaccountid");
def sh = tC.getPropertyValue("streamhandleFULL");
def account         = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType   = tC.getPropertyValue("expectErrTypeStreamView");
def XMLbody         = tC.getPropertyValue("XMLbody");
def expectCreatedBy = urnnode + tC.getPropertyValue("expectDBCreatedBy");
def expectDeletedBy = urnnode + tC.getPropertyValue("expectDBDeletedBy");
def expectStatus    = tC.getPropertyValue("expectDBStatus");
def expectRT        = tC.getPropertyValue("rightstokenidFULL");
def expectSH        = tC.getPropertyValue("streamhandleFULL");
def expectNickname  = tC.getPropertyValue("expectNickname");
def expectGenericRightsToken = tC.getPropertyValue("expectGenericRightsToken");

String expectDescription = "";
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag = true;
boolean processXMLFlag = true;
boolean XMLbodynull = false;


switch (expectStatus) {
                case "active":
                                expectDescription = "active";
                break;
                default:
                                expectDescription = "deleted";
                break;
}

/*
*  Change the expectRH value if policies should result
*  in the generic rightstoken being displayed
*/
if (expectGenericRightsToken == "true") {
                expectRT = tP.getPropertyValue("urnGenericRightsToken");
}

String errorID = "";
String errorReason = "";
String errorLink  = "";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                                XMLbodynull        = false;
                                httpLocationHeader = false;
                break;

                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "Node_status_inactive":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = true;
                                errorID = "Bad_Request";
                                errorReason = "Node_status_inactive";
                                errorLink = "";
                break;

                case "XML_PARSING_ERROR":
                                errorLinkFlag = true;
                                errorReasonFlag = false;
                                expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID = "urn:dece:errorid:org:dece:SaxParserException";
                                errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
                break;
                
                default:
                                errorReasonFlag = true;
                                expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
                                errorID     = urnErr + tC.getPropertyValue("errorID");
                                errorReason = tC.getPropertyValue("errorReason");
                                errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
                break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
assert tC.getPropertyValue("httpContentLength").toInteger() > 0;

//No Content-Location
assert tC.getPropertyValue("httpContentLocation") == null;


assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
                assert XMLbody == null;
}

this.log.info "XMLBody Length [" + XMLbody.length() + "] processXMLFlag[$processXMLFlag]";
if (XMLbody != null && processXMLFlag == true) {
                def myXML = new XmlSlurper().parseText(XMLbody);

                if (errorRespType != "SUCCESS") {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;

                                // ErrorCode
                                this.log.info "Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;

                                // ErrorLink
                                this.log.info "ErrorLink [" + myXML.Error.ErrorLink.toString() + "] errorLink[$errorLink]";
                                assert myXML.Error.ErrorLink.toString() == errorLink;
                } else {
                                /*
                                * Do expected element sizes first.
                                */
                                def ResourceStatusSize = myXML.ResourceStatus.size();
                                def CurrentSize = myXML.ResourceStatus.Current.size();
                                def ValueSize = myXML.ResourceStatus.Current.Value.size();
                                def DescriptionSize = myXML.ResourceStatus.Current.Description.size();
                                def RightsTokenIDSize = myXML.RightsTokenID.size();
                                def ExpirationDateTimeSize = myXML.ExpirationDateTime.size();
                                def recvCreationDate = myXML.ResourceStatus.Current.@CreationDate.text();
                                def recvExpirationDateTime = myXML.ExpirationDateTime.toString();
                                def recvDeletionDateTime = myXML.ResourceStatus.Current.@DeletionDate.text();
                                
                                this.log.info "ResourceStatusSize [$ResourceStatusSize] Expect 1";
                                this.log.info "CurrentSize [$CurrentSize] Expect 1";
                                this.log.info "ValueSize [$ValueSize] Expect 1";
                                this.log.info "DescriptionSize [$DescriptionSize] Expect 1";
                                this.log.info "RightsTokenIDSize [$RightsTokenIDSize] Expect 1";
                                this.log.info "ExpirationDateTimeSize [$ExpirationDateTimeSize] Expect 1";
                                assert ResourceStatusSize == 1;
                                assert CurrentSize == 1;
                                assert ValueSize == 1;
                                assert DescriptionSize == 1;
                                assert RightsTokenIDSize == 1;
                                assert ExpirationDateTimeSize == 1;

                                /*
                                *  Save the returned values as TC properities for validations
                                *  outside this script.
                                */
                                tC.setPropertyValue("recvCreationDate",recvCreationDate);
                                tC.setPropertyValue("recvDeletionDateTime",recvDeletionDateTime);
                                tC.setPropertyValue("recvExpirationDateTime",recvExpirationDateTime);
                                
                                /*
                                *   Lengths
                                */
                                assert myXML.ExpirationDateTime.text().length() > 0;
                                assert myXML.ResourceStatus.Current.@CreationDate.toString().length() > 0;

                                /*  StreamHandle */
                                def StreamHandleID = myXML.@StreamHandleID.toString();
                                this.log.info "StreamHandleID[$StreamHandleID] - expectSH[$expectSH]";
                                assert expectSH == StreamHandleID;

                                /*  DeletedBy  */
                                def DeletedByValue = myXML.ResourceStatus.Current.@DeletedBy.toString();
                                if (expectStatus != "active") {
                                                this.log.info "DeletedByValue[$DeletedByValue] - expectDeletedBy[$expectDeletedBy]";
                                                assert expectDeletedBy == DeletedByValue;
                                } else {
                                                this.log.info "Assert no DeletedBy Exists";
                                                assert DeletedByValue == "";
                                }

                                /*  CreatedBy  */
                                def CreatedByValue = myXML.ResourceStatus.Current.@CreatedBy.toString();
                                this.log.info "CreatedByValue[$CreatedByValue] - expectCreatedBy[$expectCreatedBy]";
                                assert expectCreatedBy == CreatedByValue;

                                /*  status value */
                                def Value = myXML.ResourceStatus.Current.Value.text().toString();
                                this.log.info "Value[$Value] - expectStatus[$expectStatus]";
                                assert expectStatus == Value;

                                /*  Description */
                                def Description = myXML.ResourceStatus.Current.Description.text().toString();
                                this.log.info "Description[$Description] - expectDescription[$expectDescription]";
                                assert Description == expectDescription;

                                /*  RightsToken */
                                def RightsTokenID = myXML.RightsTokenID.text().toString();
                                this.log.info "RightsTokenID[$RightsTokenID] - expectRT[$expectRT]";
                                assert expectRT == RightsTokenID;

                                /*  Stream Nickname  */
                                def StreamClientNicknameSize = myXML.StreamClientNickname.size();
                                def expectNickSize = 0;
                                if (expectNickname != null && expectNickname.length() > 0) {
                                                expectNickSize = 1;
                                                StreamClientNickname = myXML.StreamClientNickname.text();
                                } else {
                                                StreamClientNickname = null;
                                }
                                this.log.info "StreamClientNicknameSize[$StreamClientNicknameSize] - expectNickSize[$expectNickSize]";
                                this.log.info "StreamClientNickname[$StreamClientNickname] - expectNickname[$expectNickname]";
                                assert StreamClientNicknameSize == expectNickSize;
                                assert StreamClientNickname == expectNickname;

                                /*
                                *
                                *  History validation
                                */
                                def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

                                int rCnt = myHistoryXML.ResultSet.Row.size();

                                log.info "-------------HISTORY-----------------";
                                log.info "History Row Count[$rCnt] - <History> Count [" + myXML.ResourceStatus.History.size() + "]";
                                if (tC.getPropertyValue("expectDBDeletedBy") != "1") {
                                                rCnt -= 1;
                                } 
                                assert myXML.ResourceStatus.History.Prior.size() == rCnt;
                                
                                for (int i = 0; i < rCnt; i++) {
                                                String hrecvModifiedBy = myXML.ResourceStatus.History.Prior[i].@ModifiedBy.text();
                                                String hexpectModifiedBy = urnnode + myHistoryXML.ResultSet.Row[i].CREATED_BY_NODE_OID.text();
                                                log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
                                                assert hrecvModifiedBy == hexpectModifiedBy;

                                                String hrecvStatus = myXML.ResourceStatus.History.Prior[i].Value;
                                                String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
                                                log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
                                                assert hrecvStatus == hexpectStatus;

                                                String hrecvDescription = myXML.ResourceStatus.History.Prior[i].Description;
                                                switch (hexpectStatus) {
                                                                case "active": hexpectDescription = "active"; break;
                                                                case "deleted": hexpectDescription = "deleted"; break;
                                                                default: hexpectDescription = "deleted"; break;
                                                }
                                                log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
                                                assert hrecvDescription == hexpectDescription;

                                                String hrecvModificationDate = formatDate(myXML.ResourceStatus.History.Prior[i].@ModificationDate.text());
                                                int subSec = myHistoryXML.ResultSet.Row[i].EXPIRATION_DATE.text().indexOf(".");
                                                String hexpectModificationDate = myHistoryXML.ResultSet.Row[i].CREATED_DATE.text().substring(0, subSec);
                                                log.info "$i --> hrecvModificationDate[$hrecvModificationDate] - hexpectModificationDate[$hexpectModificationDate]";
                                                assert hrecvModificationDate == hexpectModificationDate;
                                }
                }
} 
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));]]></script></con:config></con:testStep><con:properties>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_50077 - STSGET - accessportal:cs - unamepasswd - Full user assertion with StreamView - P2</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>STS Create Tokentype unamepasswd - ACCES:CS</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>nVdZk6JKE333VxjOY4fN4obGdEcUi4iKCuL68gUWJaAsSoGgv/4WONra0z137vfQYVdSmXUy85Cc+olN32M7AGMUxW4YlBXxrfI/uKmzHF2jq43NBlXrmyaqmhuuXm3X2xxk2wzH1VqVsoJxgpQAx2YQv1VYmqlV6VqVbRl0q8PSHab1yrHtdaU8RxEmocmWV7pSznwvwJ3i2LdKEgWd0MQu7gSmj3Anhp0pUIcdsrNj3jBV3n9eURYHRu9OHB86FAVfLQSR58FXGPrUT+ppz08Ld6auHZhxEqFfZ1r4rfLLN03T17T2GkY2xdI0TdFtiuyxsGv/qLyXbs7IUoJteF0LZhAGLjQ992LmoFQUO6FVBp4dRm7s+N+EZiiGzkNXUQarkKkHPyrUxwEFur+M9AQywmYVOyZzC6ajLYpQAFF5pitvlR9/18GrrxGZAd6GkY8/rf8bJBSckBcekFXFt8xu6P4+4hflev+JYEcJoJdg94RGOU0OJkS4PInQ1s2GLibks3C5aH85wzeGIfhfWvKTesRJYFNfVEZ0bYTj/6dfj726RpmbXoLe6fXGGu/02toPZjOvjdXe0exNlezQs98KCI+br6Durf61/kzUO69+OQkaeFmsTwrXnI711k7d6aq8xXwP93vaCcPhVOoqsrM/rdYp4ybLRc/P9kc29idI3bBT1rmY2cuKlzb7vSWV2gM2ybbGiB7L9J5lUn7ph4fwCJMlsxqfYycOz8zwMs+8iO5rljRTmsxMb7S2guTwYpwNWMPy+XSWRj7USsy8vUmWg9MqmtNwE/T5A3j7yOkxhzyvAToXSeb/Lxt0WzRj874Q8kmxJa9njN5VRRGTiyCA89QGqcIDm/ztwIi390dn78rtlOaBpnWBKPDeThqqYC8DZibxjirM52omXECft0dz4miUgLfmVV1KxXQlzjWtJ6WOYcnz80b2kvVFGqkAF86Co0q6NBd1Q1JVEF5tmSpu5GynTtVU0VZiiQQQpexwseR2jOTMhazSUKcNdjVtJOvlnNi756E/Om0MyVMFVRamR3mqbGqiJvWBvlpAtpsQ38vQP4Sl1Yx/cOof0A6gbkqTM8FFNfapaszYkaibhc14tqmK3Fc1nApakZVcktL+fHb5qIXAq4LlS5lkgMm1FtAQuiN6vexjc9EIVB2kol04D6TUGt+AqBqdloRrrYZSqkv6bNRVdSWVQGETpdTDG3bkbGTnBGta1jfA7rExgiYtugF5HugneG4cS6bcBRt/zsCa7kC34ZrLMLXXXCpqq/4gXCskzAhoEs9rgACiQZ4aqT8Phvy8MT64bdZFw2039JETlVQmHOxPl4zm3NrYnowWDXG7b01kd1IzLYdSPMjuanugKMgaMI5mWvqK0sXAvTTHg9kSudHqEo8aGtN0uUZJXySzpRh6Lau3XM0GL9kKasZ4Mp0tJpcsGx133MWLe2O+F037qmiPRwhNMHyhaLPLG5zYEFa9HeHTVqdRowRslQdA3tm25BIC873dlYQ9XZUIeYEqpLKwEOQpkOUXSeFFTdt2HWYC5XkyY0aqIlkeKdN5tdS90lrgRdIp2lysDyu2S68NYBXBtLrUtbVZ46W/RGtt5BnzGKSH+TZgGFo+aL2tmtpQzRlgKemUJ28RX0oUMDPHhz6dDeZNmjlqlteftsGslk3ZfTZ27PV5b6/3pCmrh1dnZQBvbjxwTCEUW5Q0Q9JVwF3ft0xVZjXdg3522PgwEw3Ss8I5NHhJ72r0LBNFMLjasAHYDK8u0k4VpMK/BDLVJLQ4bZYOXgUjd2xICSFt8kCX3Yal/5VjOcVKzxw7CkADnzkmXTkmge3xReFEBjeawgEvUpuXpaPWmg/77QOtLYf7Ev/SpezY9erjgEuNwcuCOactZ6ctFm1FdISXYLtyapuYp80L1FB/35JdfS8Gzbp3Voeq1pi5lHemd+iY4mFppDCBVIsvXaodJS+8v3b9y6VWZ2f+ZJqclJk5wMzZ2RwX7XQ36TUpKpLPjUtrfdK6yxCurt+Rz0PybryOUepxwD5N4Jv2miabHYLxbZl/hxWx3CUfRzP+s47LLa5V3RZbO4dcDOIYBXHlPffKNVwnIUrPtTrky3ldi5xUE5kmwzE0zzFMS6LrNNOlAd1qt2tSs3kTe1cUnyAKYbB187NyOXv9WP8ZIPQ7GAUWiqqnMIEOwpU/RMzrVVYCnaiQMMDICIlcbnNtwAmAowWu1QISBxoiU2twOVKBrde5SnkUxuNgHIFtjKInqczQT1JZR9A9uCjX07mowERV4JiU5GiekthjXk/ma4ASorijXPR22DrXoLDrHzyUA6b80Eo89HpwDkWBKHz9ZasmxIW1TXQJ+WMLxfNtjp+f3cpB9lhuvgHnCfGItBR9IfzpWzbfZM19uiDcwoPEcnNhQ2obRy68Inl+9EGZnCt3vtzSuuG+b/9seApNfc7qfpp1cuGd+fe7EZHWRHy93xpzNF+Pr8nplBStaOXCMiLhKYaim9QUwYSow7MR7lFA3UNQfyXM76g/nXy3P+NLYieYxuSt9glxysXyL25lU4TzW5lCiJ/97ZXv6UhStxhl8Vc2wSOXtxzxH+93sAPzfcQ8IT9pGFkf7foi1sM5JM98jLmBna9yGX7+hhkwJGFdMsrC6DH4VwG+OvzZeC/yHUtM2LRJYvT9k3I+o94qJoRhEsSKWCkMj3OzwBmfD6jzsem3MIUQ/nWzyfC3N5ulOpySCeablfte9983V92CLhARL+wWWN4qGbmkk8MD+2FO/wL426iu8/WawLB1sVX7NKrr9wI+ZfL+m/l3y0NNP78P7/8A</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>90009002</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:D8E3D4B43C124D73E0401F0A07993E64</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:D8E3D161810B8117E0401F0A07993E66</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenFULL</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:D6267D33305EC443E0401F0A0799743C</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3AD3CD9D93C110059998E0401F0A07992FB8</con:value>
        </con:property>
        <con:property>
          <con:name>rowSTREAM_DATA</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HANDLE_OID>D6267D333072C443E0401F0A0799743C</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>D6267D33305EC443E0401F0A0799743C</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>D6267D332FC0C443E0401F0A0799743C</ACCOUNT_OID>
      <USER_OID>2769DE4A8E2FE1DC15596DDDF7A4B6C2</USER_OID>
      <TRANSACTION_ID>null</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2013-02-20 16:35:24.725</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2013-02-20 10:36:52.959</CREATED_DATE>
      <CREATED_BY>80008002</CREATED_BY>
      <UPDATED_DATE>null</UPDATED_DATE>
      <UPDATED_BY>null</UPDATED_BY>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>D8E3D4B43C174D73E0401F0A07993E64</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>3FEC9C3B26CADEF715910F368FFC0087</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86721</con:value>
        </con:property>
        <con:property>
          <con:name>streamcreateFlagSkipUserTest</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>enassertionAccountIdFULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8E3D4B43C124D73E0401F0A07993E64</con:value></con:property><con:property><con:name>streamId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\90009002.pem</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:StreamNotFound">
      <Reason Language="en">The stream was not found.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/06/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8E3D4B43C124D73E0401F0A07993E64/Stream/urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3AD3CD9D93C110059998E0401F0A07992FB8</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/06/error/en/ErrorList.html#StreamNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>779</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>errorReason</con:name><con:value>The stream was not found.</con:value></con:property><con:property><con:name>errorID</con:name><con:value>StreamNotFound</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserStatusUpdate" searchProperties="true" id="2f8af153-cf32-4dbd-b2ac-780c416f8f99"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="fd95295a-6fe1-434a-9933-b14180bc26fa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("userStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="f61886a7-a154-4467-9f41-366e2b580f59"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userStatus",callTC.getPropertyValue("userStatus"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="2f6835f0-8015-43e7-af7b-7b2e0d2c1fe3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Update");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Update" id="5ec991e9-0d36-426a-bdc1-49cb4105f5a8"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Update" mediaType="application/xml;charset=UTF-8" sslKeystore="80008000.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#userStatus}" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>Ganji</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#PrimaryEmail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
      <LegalGuardian>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	
                <Password>${#Project#UserPassword}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNTID_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="c3922e47-4f18-4cfc-84fd-aa40b73d7680"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Update');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="365bbf8e-8fc4-434f-aaae-ef9ef940aa38"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRTL}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRTL}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
		
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
		
		int lastColon = urlStr.lastIndexOf(':');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 1);
		useridfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_USER_ID",userid);
		tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);
	} else {
		assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
		int lastColon = urlStr.lastIndexOf('%3A');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 3);
		useridfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_USER_ID",userid);
		tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);
	}
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" disabled="true" id="9560471a-77a8-438e-8562-72cf6cfd56a5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("SecondUserName",tC.getPropertyValue("SecondUserName"));
callTC.setPropertyValue("UserPassword",tP.getPropertyValue("UserPassword"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2011/08/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired">
      <Reason Language="en">The setting of the ManageUserConsent policy prevents the requested action from being completed.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/02/Account/urn:dece:accountid:org:dece:D82F859216DC97E2E0401F0A05996483/User/urn:dece:userid:org:dece:D82FA44A8ED2F913E0401F0A05991C65</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/02/error/en/ErrorList.html#Policy:ManageUserConsentRequired</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">853</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_70082 - STSCreate - llasp - unamepasswd - for the user who updated to Standard from Basic</con:value></con:property><con:property><con:name>sName</con:name><con:value>STS Create Tokentype usernamepassword - Linked LASP Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>80008000</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D82F859216DC97E2E0401F0A05996483</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdbc6pKE333V1juR8twURK0klQNFxEVlYvXl68QRkARkAFBf/0ZMBrNTvbZ53tImWmme1Z3L5o1r8jc+3QHIATjxAuDqiy81f7HmOb6xWqtG+tWi260mhTbaFsU1SBphmbWFNsmbaZWlRFKoRygxAyStxpNUs0G2WxQrEGyHeqlw7SeSPJ5VavOYIxwaLzliaxV870foE557FstjYNOaCIPdQJzD1EnsTo6UIYdvLNjXjHV3l8vKMsD43c3SaIOQVhPNrSg71tPVrgnXomHPa826uieE5hJGsOPM230VvvwzbLsKWs+hbFD0CRJEmSbwHts5Dm/au+VqzO05WATXta8GYSBZ5m+dzYLUApM3NCuAt8JYy9x9z+EpgiKLEI3YG41LKoV/KoRnweU6P4y0gPIGJkN5JrUNZgGNzCGgQWrU01+q/36uw5efI3YDNAmjPfoy/q/QYLBEfphBO0GumZ2Rff3Eb8p1/srtDpyYPkp8o5wVNAkMi2IqpMYbrx86CFMPhtVy/ZXc3RlGLT+S0teiXucGDbxTWUEz4Eo+X/6dd+rS5SZ6afw/Wxm6cmwxwA2BZCF1sjbnverNZCGrbcSwv3mC6hbqz/WX4l649WH04E/shkvt7dUT+F00wDnvmjx7Ljec5qCA8S0v+WXrak9IbdJbyAJ8DSpHxCSbB91Zwt2nOh0fRWL9VRi/AonECr5HLys3e2BZfaUo4zDSb6uN+cySYA+wUR1uFvtmtMkWfR6ob4Hs9DJgj6yyJNvzpMo1CcrcdOerfNt5ZiuW2mUUe74zLe0QxQenLfPnO5zKPIawFOZZPH/giHbgpmYtwVfTIoNfj0T+K7IspCeeR6cdAdkMgcc/LcFI87ZHdydJ7UzkgOq2gUCz/lbcaiAnQSoqci5Cj+bKTl/Bn3OGc2wo1EB/opTNDETsqUwU9WemLmGLc1Oa8lPV2dxpABUOvOuImriTNAMUVFAeLHlirCW8q2iK5msLoUKDiCIeXS2pXYCpdyzaJlRdIZe6ky6WsywvXsa7kfHtSH6Cq9IvH6QdHndFFSxD7Tl3KK7KfY9D/dRWFlOuTunfgS3AHYzEp8JzoqxyxRjSo8EzSxtxqNNkaW+oqKMV8uspIqY9WfT82cteE7h7b2YiwaYXGphGXx3RK4WfWTOmUDRQCY4pfNAzOzxFYiiklmFv9RqKGaaqE1HXUWTMxGUNkHMfLSmR+5aco9WU837BtjeN4ZXxXk3wM8D7WidmEPFlLpgvZ9RVlNzLY/xzEWYOSs2E9RlfxCuZBxmBFSR41SAAZGgSA3XnwNDbsaMI69Ne3C46YZ76MYVhQoHu+M5J1mvOXYmozkjbHYvE8mbNE3bJWTforfNHZBlaA8oVzVtbUloQuCdn8eD6QJ68fKcjBiVevZYpqLN0+lCCP0Xu7dYTgf1fGmpxniiT+eTc56PDlv27Ce9MdeL9b4iOOMRhBNk1QnS7HIGKzD8srfFfNpoJGQqwFE4AKSt44geJjDX215I2NMUEZMXKHwm8XNe0oEk1UWZE1R103WpiSXN0ik1UmTR9nGZTsuF5ldWPCfgTpHmfBUt6S65MoBdBlNbYtdRp0y9v4ArdeQbswRk0WwTUBQpRWpvo2SOpRQMsOVM5/BbxFVSGUzNcdQn88HsmaQOqu339TaYNnOd3uVj11mdds5qh5uyvHt1lgbwZ8Ydx2RMsXlFNURNAezlfcsVedrUfGufR+u9lQsG7lnpHBqcqHVVcpoLAhhcbMgAdI6WZ3Gr8GLpXwG5YmJaHNcLFy2DkTc2xBSTNr2jy3ZNk//KsYJilUeOHXiggq8cEy8cE8HmUJdZgULMMx+heeZwknhQX2bDfjsi1cVwV+HqXcJJPL81DtjMGNTn1Cl7cbfqfN6WBZevB5ul21wnHGmeLRX2dy+Sp+2E4Lnln5ShojJTj/BP5BYeMjSsjGQqEJvJuUu047TO7Vfe/nxutujpfqKnR3lqDhB1cteHeTvbTnrPBBFLJ+b8sjqq3UVoLS/fka9D8ma8jFHifsA+TOCr9tLT9RZayXVZfIdlodrFH0cz+bOOKyye3diUWztRIQZRAoOk9l54FRquk2Kl59kd/OW8rAWW7rJMm6aexXb7RaRFskVSXRKQTLv93GKbV7F3QfEFIh8GG684q5Czl4/1nwFa+w6CgQ3jxjFMLRei2h8iFvWqyoGGVUgYIGiEhVxuAcAI7HOXBk2aJVtNvOJxaSnAAo7nhVp1FCbjYByDTQLjB6lMUQ9SWYOWF3mw0NOFqEBYVaAEl+RgHtPEp56O5lMAU6y440L0dugWyxDI20c+LAAT+9BOffgUuVFZIAJdfumGaaHSymJdUvyViufHHL8+u5YD77G9YgMqEuIgbin8Rvi3rtn8nHXrPutreJDaXiFscG2T2LMuSB4ffVKm4MqNL9e0rrhv278aHkITX7O6nWYfPevG/NvdCEtrLL7er405mE+Hp/R4TMtWvBTCMsbhCYogaUKHVorV4ckIdzAgbiGIvxLmN9RfTr7ZH/GliRvoCX6r95g41XL5F7cyHaLiViZj4ud/e+V7OBLXLYF58p2N9/HlrUD8x/ud1bGKfdg8wT9ZGNuf7fom1t05OM9ijHmBU6wKGX76gRlWiMN6eJSF8X3w7wJ8d/ij8VbkG5YEs2mdJvDnJ9ViRr3VTMsK0yCRi1mADfdzs8SZnCLY+dz0W5hSCH/cbHL0481moQx1PMH2Zu221/v3zQ2vpIsFsRfySixvtRxf0vHhgXM3pz8Afj+qBf5Po/oxk/ffzL9b7mr69X14/wc=</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D82FA44A8ED2F913E0401F0A05991C65</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn:dece:accountid:org:dece:D82F859216DC97E2E0401F0A05996483</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:D82FA44A8ED2F913E0401F0A05991C65</con:value></con:property><con:property><con:name>UserName</con:name><con:value>basicusername_20130318_01518</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\80008000.pem</con:value></con:property><con:property><con:name>userStatus</con:name><con:value>standard</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SetPem" searchProperties="true" id="a99f9e27-5737-4bb6-a424-e2a7414394e5"><con:settings/><con:testStep type="groovy" name="Set Pem" id="2a91ccc9-609f-4395-8446-18a9e77e6f70"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import org.apache.commons.lang.SystemUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def eNV = context.expand( '${#Project#ENV}' )

def propertiesPath = null;

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows OS!!";
    		File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
    		propertiesPath = temp.getCanonicalPath();
	} 
else 
	{
    		log.info "it's Linux OS!!";
    		File temp = new File(projectPath + "/../../../Properties/");
    		propertiesPath = temp.getCanonicalPath();
	}
	
log.info("Properties File Location : '" + propertiesPath+ "'");




def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));

String line;
while ((line = reader.readLine()) != null)
      {
	       if (line.trim().length()==0) continue;
	       if (line.charAt(0)=='#') continue;
	
	       int delimPosition = line.indexOf("=");
	       String key = line.substring(0, delimPosition-0).trim();
	       String value = line.substring(delimPosition+1).trim();
	       propMap.put(key, value);
      }


if (System.properties['os.name'].toLowerCase().contains('windows')) 
      {
            log.info "it's Windows OS!!!";
            File temp = new File( projectPath + "\\..\\..\\..\\Certs\\" + eNV + "\\");
    		  certPath = temp.getCanonicalPath();      
      } 
else 
      {
            log.info "it's Linux OS!!!";
            File temp = new File(projectPath + "/../../../Certs/" + eNV + "/");
    		  certPath = temp.getCanonicalPath();
      }  
      
 log.info("Cert path: " + certPath );  
                  
def nodeId = context.expand( '${#TestCase#nodeid}' )

log.info "nodeId: "+nodeId;

 if (nodeId == "dece:cs")
       {
             nodeId = "dececs";
       }
 else if (nodeId == "coord:cs")
       {
             nodeId = "coordcs";
       }
 else
       {
             nodeId = nodeId;
       }


//log.info "~~~~~~~~~~~~" +nodeId
boolean imFine = true;
def pwd = null;
def certMatchesNodeID = context.expand( '${#Project#CertMatchesNodeID}' )
log.info("CertMatchesNodeID : '" + certMatchesNodeID + "'");
if (certMatchesNodeID == "YES")
{
		File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
		File f2 = new File(certPath+"/"+nodeId + ".jks");
		File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");
		File f4 = new File(certPath+"/"+nodeId + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");
	
	// sets the certificate from the specific folder when the certname and NodeId are same
	  if(f1.exists()) 
             {
                   keyStorePath = certPath+"/"+nodeId + "_concat.pem";
                   pwd = "123"
                   log.info("F1 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");      
             }
	  else if(f2.exists())
             {
                  	keyStorePath = certPath+"/"+nodeId + ".jks";
                   	pwd = "abcd1234" 
                   	log.info("F2 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");          
             }
	  else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
                   	pwd = "12elma";
				log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
             }
	  else if(f4.exists()) 
             {
                   	keyStorePath = certPath+"/"+nodeId + ".pem";
                   	pwd = "123";
                   	log.info("F4 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");       
             }
	  else
             {
                  	log.info "No cert file is Found!!!";
                  	imFine = false;
             }
}
else
{
	//to get the certificate name from another property based on the nodeid property.
		
	
       def value = propMap.find{ it.value == nodeId }?.key
       def certName = testProject.getPropertyValue(value+"_cert");       
       log.info "cert name .... " + certName;

		File f1 = new File(certPath+"/"+certName + "_concat.pem");
		File f2 = new File(certPath+"/"+certName + ".jks");
		File f3 = new File(certPath+"/truststore-"+certName + ".jks");
		File f4 = new File(certPath+"/"+certName + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");      
		     
       if(f1.exists()) 
             {
             		
				keyStorePath = certPath+"/"+certName + "_concat.pem";
				pwd = "123";
				log.info("F1 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else if(f2.exists())
             {
				keyStorePath = certPath+"/"+certName + ".jks";
				pwd = "abcd1234";
				log.info("F2 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");           
             }
       else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+certName + ".jks";
                   	pwd = "abcd1234";
                   	log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
                   	         
             }
       else if(f4.exists()) 
             {
				keyStorePath = certPath+"/"+certName + ".pem";
				pwd = "123";  
				log.info("F4 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else
			{
			log.info "No cert file is Found!!!";
			imFine = false;
			}                             
}


if(imFine)
{
      def callTSname = testCase.getPropertyValue("sName");
      def callTCname = testCase.getPropertyValue("tName");
      
      def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
      
      callTC.setPropertyValue("keyStorePath","$keyStorePath");
      testCase.setPropertyValue("keyStorePath","$keyStorePath");
      
      SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
      SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
      log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:properties><con:property><con:name>nodeId</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>tName</con:name><con:value>STS API - Invoked to Coordinator URL</con:value></con:property><con:property><con:name>sName</con:name><con:value>CommonTestSteps</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP2/RET_2_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS API - Invoked to Coordinator URL" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="878cc494-eb3a-4879-945e-d78be3a06f59">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="5a85f1c6-7929-4154-b81e-5e03ca0fda1c">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("actionAuthHeader",null);
tC.setPropertyValue("actionDeviceAuthHeader",null);
tC.setPropertyValue("deviceAuthHeaderValue",null);
tC.setPropertyValue("endPoint",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("node_oid",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodeidFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("scenario",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("stsRequestBodyNULL",null);
tC.setPropertyValue("stsRequestUserNameFlag",null);
tC.setPropertyValue("expectErrType",null);
tC.setPropertyValue("expectCreateExpireHoursDiff",null);
tC.setPropertyValue("expectNodeUserRowCount", null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("stsExpire",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsaudience",null);
tC.setPropertyValue("stsduration",null);
tC.setPropertyValue("stsaudienceIgnoreAll",null);
tC.setPropertyValue("stsaudienceIgnoreNodes",null);
tC.setPropertyValue("stsaudiencePrefixDelimiter",null);
tC.setPropertyValue("stsaudienceSuffixedDelimiter",null);
tC.setPropertyValue("stsaudienceEmbeddedDelimiter",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("accountoid",null);
/*
*  stsaudienceIgnoreAll
*    If this is 'true' then I will ignore the incoming 
*    stsaudience list because it will contain invalid
*	nodes which should not be present in the
*	&lt;saml2:AudienceRestriction> list.
*
*  stsaudiencePrefixDelimiter
*	This is used to start the audience parameter value
*	with a ;
*
*  stsaudienceSuffixedDelimiter
*	This is used to suffix the audience paramter value
*	with a ;
*/</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="e30d67bb-8f58-4954-8794-31b5b8ec1e67">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("actionAuthHeader",callTC.getPropertyValue("actionAuthHeader"));
tC.setPropertyValue("actionDeviceAuthHeader",callTC.getPropertyValue("actionDeviceAuthHeader"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("Username"));
tC.setPropertyValue("password",callTC.getPropertyValue("UserPassword"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));

log.info "versionMinor: "+tP.getPropertyValue("versionMinor");
if (tP.getPropertyValue("versionMinor") == tP.getPropertyValue("versionURLEncode")){
	tC.setPropertyValue("tokentype",URLEncoder.encode(callTC.getPropertyValue("tokentype"), "UTF-8"));
}else{
	tC.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
}
			

tC.setPropertyValue("scenario",callTC.getPropertyValue("scenario"));
tC.setPropertyValue("deviceAuthToken",callTC.getPropertyValue("deviceAuthToken"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));

if (tC.getPropertyValue("expectErrType") == "" || tC.getPropertyValue("expectErrType") == null) {
	tC.setPropertyValue("expectErrType","SUCCESS");
}
tC.setPropertyValue("stsRequestBodyNULL",callTC.getPropertyValue("stsRequestBodyNULL"));
tC.setPropertyValue("stsRequestUserNameFlag",callTC.getPropertyValue("stsRequestUserNameFlag"));
tC.setPropertyValue("stsAction",callTC.getPropertyValue("stsAction"));
tC.setPropertyValue("stsExpire",callTC.getPropertyValue("stsExpire"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("expectCreateExpireHoursDiff",callTC.getPropertyValue("expectCreateExpireHoursDiff"));


tC.setPropertyValue("stsaudience",callTC.getPropertyValue("stsaudience"));

tC.setPropertyValue("stsduration",callTC.getPropertyValue("stsduration"));
tC.setPropertyValue("stsaudienceIgnoreAll",callTC.getPropertyValue("stsaudienceIgnoreAll"));
tC.setPropertyValue("actionSkipPolicyCheck",callTC.getPropertyValue("actionSkipPolicyCheck"));
tC.setPropertyValue("stsaudiencePrefixDelimiter",callTC.getPropertyValue("stsaudiencePrefixDelimiter"));
tC.setPropertyValue("stsaudienceSuffixedDelimiter",callTC.getPropertyValue("stsaudienceSuffixedDelimiter"));
tC.setPropertyValue("stsaudienceIgnoreNodes",callTC.getPropertyValue("stsaudienceIgnoreNodes"));
tC.setPropertyValue("stsaudienceEmbeddedDelimiter",callTC.getPropertyValue("stsaudienceEmbeddedDelimiter"));
tC.setPropertyValue("stsSkipLastLoginCheck",callTC.getPropertyValue("stsSkipLastLoginCheck"));
tC.setPropertyValue("expectNodeUserRowCount",callTC.getPropertyValue("expectNodeUserRowCount"));

if (tC.getPropertyValue("stsRequestUserNameFlag") == null ||
	tC.getPropertyValue("stsRequestUserNameFlag") == "") {
		tC.setPropertyValue("stsRequestUserNameFlag",null);
}
if (tC.getPropertyValue("expectNodeUserRowCount") == null ||
	tC.getPropertyValue("expectNodeUserRowCount") == "") {
		tC.setPropertyValue("expectNodeUserRowCount","0");
}
if (tC.getPropertyValue("stsAction") == null ||
	tC.getPropertyValue("stsAction") == "") {
		tC.setPropertyValue("stsAction",null);
}
if (tC.getPropertyValue("stsExpire") == 'null' ||
	tC.getPropertyValue("stsExpire") == "") {
		tC.setPropertyValue("stsExpire","2012-06-30T09:40:39.0Z");
}
if (tC.getPropertyValue("stsSkipLastLoginCheck") == null ||
	tC.getPropertyValue("stsSkipLastLoginCheck") == 'null') {
		tC.setPropertyValue("stsSkipLastLoginCheck","false");
}
if (tC.getPropertyValue("actionSkipPolicyCheck") == null ||
	tC.getPropertyValue("actionSkipPolicyCheck") == 'null') {
		tC.setPropertyValue("actionSkipPolicyCheck","false");
}
if (tC.getPropertyValue("expectCreateExpireHoursDiff") == null ||
	tC.getPropertyValue("expectCreateExpireHoursDiff") == "") {
		tC.setPropertyValue("expectCreateExpireHoursDiff",tP.getPropertyValue("expectHoursDiffActive"));
}
if (tC.getPropertyValue("nodeid") != 'null' || tC.getPropertyValue("nodeid") != null) {
		tC.setPropertyValue("nodeidFULL", tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
}
if (tC.getPropertyValue("stsaudienceIgnoreAll") == null ||
	tC.getPropertyValue("stsaudienceIgnoreAll") == 'null') {
		tC.setPropertyValue("stsaudienceIgnoreAll","false");
}
if (tC.getPropertyValue("stsaudiencePrefixDelimiter") == null ||
	tC.getPropertyValue("stsaudiencePrefixDelimiter") == 'null') {
		tC.setPropertyValue("stsaudiencePrefixDelimiter","false");
}
if (tC.getPropertyValue("stsaudienceSuffixedDelimiter") == null ||
	tC.getPropertyValue("stsaudienceSuffixedDelimiter") == 'null') {
		tC.setPropertyValue("stsaudienceSuffixedDelimiter","false");
}
if (tC.getPropertyValue("stsaudienceEmbeddedDelimiter") == null ||
	tC.getPropertyValue("stsaudienceEmbeddedDelimiter") == 'null') {
		tC.setPropertyValue("stsaudienceEmbeddedDelimiter","false");
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Construct STS Request Body" id="e9e0ec8d-7205-4b62-a186-97960d9383bf">
        <con:settings/>
        <con:config><script>import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("stsRequestBody", null);

/*
*  XML namespaces
*/
String saml2pNS = "urn:oasis:names:tc:SAML:2.0:protocol";
String saml2NS = "urn:oasis:names:tc:SAML:2.0:assertion";
String mdNS = "urn:oasis:names:tc:SAML:2.0:metadata";
String deceNS = tP.getPropertyValue("coordinatorSchema").toString();
String saml2pPrefix = "saml2p";
String saml2Prefix = "saml2";
String mdPrefix = "md";
String decePrefix = "dece";
String requestBody = "";
String tokentype = tC.getPropertyValue("tokentype").toString();
String scenario = tC.getPropertyValue("scenario").toString();
String deviceAuthToken = tC.getPropertyValue("deviceAuthToken").toString();
String deviceAuthExpires = tC.getPropertyValue("stsExpire").toString();

def username = tC.getPropertyValue("username").toString();
def password = tC.getPropertyValue("password").toString();


/*
*  Elements
*/
Element root;
Element userName;
Element passWord;
Element devicecode;
Element expires;

//if (tokentype != "urn:dece:type:tokentype:saml2") {
if (scenario == "STSCreate") {
	/*
	*  Create an nice clean dom
	*/
	try	{
		//Create instance of DocumentBuilderFactory
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		//Get the DocumentBuilder
		DocumentBuilder parser = factory.newDocumentBuilder();
		//Create blank DOM Document
		doc = parser.newDocument();
	}
	catch(Exception e) {
		log.info "Error during DocumentBuilderFactory create - " + e.getMessage();
	}
	finally {
		log.info "tokentype: "+tokentype;
		if (tokentype == URLEncoder.encode(tP.getPropertyValue("urntokenType_deviceauthtoken"), "UTF-8").toString() || tokentype == tP.getPropertyValue("urntokenType_deviceauthtoken")) {
			root = doc.createElementNS(deceNS, "DeviceAuthToken");

			/*
			*  DeviceAuthCode element
			*/
			switch (tC.getPropertyValue("stsAction").toString()) {
				case "nullDeviceToken":
					devicecode = doc.createElementNS(deceNS,"DeviceAuthCode");
					Text textdcode = doc.createTextNode("");
					devicecode.appendChild(textdcode);			
					break;
				case "tagTerminatedDeviceAuthCode":
					devicecode = doc.createElementNS(deceNS,"DeviceAuthCode");
					Text textdexpire = doc.createTextNode();
					devicecode.appendChild(textdexpire);
					break;
				case "DeviceString":
					devicecode = doc.createElementNS(deceNS,"DeviceString");
					Text textdcode = doc.createTextNode(deviceAuthToken);
					devicecode.appendChild(textdcode);
					break;
				default:
					devicecode = doc.createElementNS(deceNS,"DeviceAuthCode");
					Text textdcode = doc.createTextNode(deviceAuthToken);
					devicecode.appendChild(textdcode);
					break;
			}

			/*
			*  Expires
			*/
			switch (tC.getPropertyValue("stsAction").toString()) {
				case "nullExpires":
					expires = doc.createElementNS(deceNS,"Expires");
					Text textdexpire = doc.createTextNode("");
					expires.appendChild(textdexpire);
					break;
				case "tagTerminatedExpires":
					expires = doc.createElementNS(deceNS,"Expires");
					Text textdexpire = doc.createTextNode();
					expires.appendChild(textdexpire);
					break;
				default:
					expires = doc.createElementNS(deceNS,"Expires");
					Text textdexpire = doc.createTextNode(deviceAuthExpires);
					expires.appendChild(textdexpire);
					break;
			}

			/*
			* Add DeviceAuthCode element to tree.
			*/
			if (tC.getPropertyValue("stsAction").toString() != "tagMissingDeviceToken") {
				root.appendChild(devicecode);
			}

			/*
			* Add Expires element to tree.
			*/
			if (tC.getPropertyValue("stsAction").toString() != "tagMissingExpires") {
				root.appendChild(expires);
			}
		} else {
			root = doc.createElementNS(deceNS, "Credentials");
		
			/*
			*  Username
			*/
			switch (tC.getPropertyValue("stsRequestUserNameFlag").toString()) {
				case "stsRequestUserNameFlag":
					userName = doc.createElementNS(deceNS,"Username");
					break;
				case "EMPTY_TAG":
					userName = doc.createElementNS(deceNS,"Username");
					break;
				default:
					userName = doc.createElementNS(deceNS,"Username");
					Text textusername = doc.createTextNode(username);
					userName.appendChild(textusername);
					break;
			};

			/*
			*  Password
			*/
			switch (tC.getPropertyValue("stsAction").toString()) {
				case "EMPTY_TAG":
					passWord = doc.createElementNS(deceNS,"Password");
					break;
				default:
					passWord = doc.createElementNS(deceNS,"Password");
					Text textpassword = doc.createTextNode(password);
					passWord.appendChild(textpassword);
					break;
			}

			/*
			* Add Username element to tree.
			*/
			if (tC.getPropertyValue("stsRequestUserNameFlag").toString() != "excluded") {
				root.appendChild(userName);
			}

			/*
			* Add Password element to tree.
			*/
			if (tC.getPropertyValue("stsAction").toString() != "PASSWD_EXCLUDE") {
				root.appendChild(passWord);
			}
		}
	
		/*
		* Add Credentials element to tree.
		*/
		doc.appendChild(root);
	}

	/*
	* Turn the DOM into a String to display here...
	*/
	TransformerFactory factory = TransformerFactory.newInstance();
	Transformer transformer = factory.newTransformer();
	transformer.setOutputProperty(OutputKeys.INDENT, "yes");
	StringWriter writer = new StringWriter();
	Result result = new StreamResult(writer);
	Source source = new DOMSource(doc);
	transformer.transform(source, result);
	writer.close();
	requestBody = writer.toString();
	this.log.info requestBody;

	tC.setPropertyValue("stsRequestBody", requestBody);
}

/*
*  Override the Property if desired
*/
if (tC.getPropertyValue("stsRequestBodyNULL") == "true") {
	tC.setPropertyValue("stsRequestBody", null);
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish attributes based on Node Role" id="347e5d13-737d-4a15-a691-b192b65b3865">
        <con:settings/>
        <con:config>
          <script>import java.util.StringTokenizer; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tC.getPropertyValue("nodeid").toString();

/*
*  See if we are a device
*/
switch (nodeid) {
	case tP.getPropertyValue("nodeIdDEV").toString():
		urlEndPoint = "device";
		tC.setPropertyValue("isDeviceFlag","true");
		break;
	default:
		urlEndPoint = "coordinator";
		tC.setPropertyValue("isDeviceFlag","false");
		break;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Construct URL" id="5d9a451b-4c2f-4aae-8e68-6176cc7dc0a5">
        <con:settings/>
        <con:config><script><![CDATA[import java.util.StringTokenizer; 
import java.net.URLDecoder;
import java.net.URLEncoder;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

Boolean appliedFirstNode = false;
String url = "";
String anode = "";
String urlEndPoint = "";

String stsaudience = tC.getPropertyValue("stsaudience").toString();

String stsduration = tC.getPropertyValue("stsduration").toString();

String nodeid = tC.getPropertyValue("nodeid").toString();

log.info "nodeid[$nodeid]";
log.info "stsduration[$stsduration]";
log.info "stsaudience[$stsaudience]";

if (tC.getPropertyValue("isDeviceFlag") == "true") {
	urlEndPoint = "device";
}

log.info "urlEndPoint: " + urlEndPoint;

/*
*  Set the endpoint
*/
switch (urlEndPoint) {
		case "device":
		tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHostd")+":"+tP.getPropertyValue("targetPortd"));
		if (tC.getPropertyValue("scenario").toString() == "STSCreate"){
			url = 
			"rest/" + tP.getPropertyValue("versionMajor").toString() +
			"/" + tP.getPropertyValue("versionMinor").toString() +
			"/SecurityToken/SecurityTokenExchange" +
			"?tokentype=" + tC.getPropertyValue("tokentype").toString();
		}else if (tC.getPropertyValue("scenario").toString() == "SAMLExchange") {
			url = "rest/" + tP.getPropertyValue("versionMajor").toString() +
				"/" + tP.getPropertyValue("versionMinor").toString() +
				"/SecurityToken/Assertion/" +
				tC.getPropertyValue("assertionUUID").toString() + 
				"/SecurityTokenExchange?tokentype="+tC.getPropertyValue("tokentype").toString();
			} 
		
		break;

	case "coordinator":
	default:
	tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));
	if (tC.getPropertyValue("scenario").toString() == "STSCreate"){
			
			url ="rest/"+ tP.getPropertyValue("versionMajor").toString() +
				"/" + tP.getPropertyValue("versionMinor").toString() +
				"/SecurityToken/SecurityTokenExchange" +
				"?tokentype="+tC.getPropertyValue("tokentype").toString() ;
		
	}
	else if (tC.getPropertyValue("scenario").toString() == "SAMLExchange") {
		
				url = "rest/" + tP.getPropertyValue("versionMajor").toString() +
				"/" + tP.getPropertyValue("versionMinor").toString() +
				"/SecurityToken/Assertion/" +
				tC.getPropertyValue("assertionUUID").toString() + 
				"/SecurityTokenExchange?tokentype="+tC.getPropertyValue("tokentype").toString();
			} 
	break;
}

/*
*  Add duration parameters if necessary
*/
if (stsduration.length() > 0 && stsduration != 'null') {
	switch (stsduration.toLowerCase()) {
		case "isnull":
			stsduration = "";
			break;
		case "isalpha":
			stsduration = "Z";
			break;
	}

	url = url + "&duration=$stsduration";
}

/*
*  Add audience parameters if necessary
*/
if (stsaudience.length() > 0 && stsaudience != 'null') {
	switch (stsaudience.toLowerCase()) {
		case "isnull":
			url = url + "&audience=";
			
			break;
		default:
	log.info "stsaudience="+stsaudience;
			StringTokenizer st = new StringTokenizer(stsaudience,",");

			while(st.hasMoreTokens()) { 
				if (!appliedFirstNode) {
					url = url + "&audience=";
					appliedFirstNode = true;

					if (tC.getPropertyValue("stsaudiencePrefixDelimiter") == "true") {

					url = url + ";";

						
					}
				}

				
				anode = st.nextToken();
	if (tP.getPropertyValue("versionMinor") == tP.getPropertyValue("versionURLEncode")){
		url = url + URLEncoder.encode(anode, "UTF-8");
	}else{
		url = url + anode;
	}
				
		
				/*
				*  Add the node delimiter if needed
				*/
				if (st.hasMoreTokens()) {
					url = url + ";";
					
					/*
					*  If we wish to embed extra ; we should do that 
					*  now.
					*/
					if (tC.getPropertyValue("stsaudienceEmbeddedDelimiter").toString() == "true") {
						url = url + ";";
					}
				}
				
		
			}

			
			if (tC.getPropertyValue("stsaudienceSuffixedDelimiter") == "true") {
				url = url + ";";
			} 
					
			break;
	}
}	

//log.info "url[$url]";

log.info "endPoint[$url]";
tC.setPropertyValue("endPoint","$url");
//testRunner.testCase.getTestStepByName('POST - STS').httpRequest.setEndpoint(url)]]></script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Construct Authorization Header if necessary" id="82abb50f-3ee6-483c-9b20-98b9e872dc4a"><con:settings/><con:config><script>import org.apache.commons.codec.binary.Base64;
import com.eviware.soapui.support.types.StringToStringMap;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//Initialize header Key-Value type object
def headers = new StringToStringMap() 

//Initialize Rest Request object
def restRequest = testRunner.testCase.getTestStepByName("POST - STS").testRequest;

//Declare variable to store "Authorization" and "x-dece-application-authorization" header values
String authorization = null;
String xDeceApplicationAuthorization = null;


log.info("isDeviceFlag  : '" + tC.getPropertyValue("isDeviceFlag").toString() + "'");
log.info("scenario  : '" + tC.getPropertyValue("scenario").toString() + "'");

if (tC.getPropertyValue("isDeviceFlag").toString() == "true" &amp;&amp; tC.getPropertyValue("scenario").toString() == "SAMLExchange") {
                log.info("Request is on Device host and it is an SAMLExchange call, So both headers 'Authorization' and 'x-dece-application-authorization' will be required.")
                if (tC.getPropertyValue("actionAuthHeader") == "EXCLUDE") {
                                log.info("Exclude 'Authorization' header enabled, so setting the value of authorization to null");
                                authorization = null;
                                log.info("Authorization = '" + authorization + "'");
                }else{
                                log.info("Exclude 'Authorization' header disabled, so setting the value of authorization to BasicAuth");
                                String combo = tC.getPropertyValue("username").toString() + ":" + tC.getPropertyValue("password").toString();
                                authorization = "Basic " + combo.bytes.encodeBase64().toString()
                                log.info("Authorization = '" + authorization + "'");
                                tC.setPropertyValue("authHeaderValue",authorization);             
                }

                if (tC.getPropertyValue("actionDeviceAuthHeader") == "EXCLUDE") {
                                log.info("Exclude 'x-dece-application-authorization' header enabled, so setting the value of xDeceApplicationAuthorization to null");                              
                                xDeceApplicationAuthorization = null;
                                log.info("x-dece-application-authorization = '" + xDeceApplicationAuthorization + "'");
                }else{
                                log.info("Exclude 'x-dece-application-authorization' header disabled, so setting the value of xDeceApplicationAuthorization from project property 'XDeceApplicationAuthorization'");                            
                                tC.setPropertyValue("deviceAuthHeaderValue",tP.getPropertyValue("XDeceApplicationAuthorization"));
                                xDeceApplicationAuthorization = tP.getPropertyValue("XDeceApplicationAuthorization");
                                log.info("x-dece-application-authorization = '" + xDeceApplicationAuthorization + "'");
                }

                //Set the values in HashMap
                headers.put("Authorization",authorization);
                headers.put("x-dece-ApplicationAuthorization",xDeceApplicationAuthorization);


}else if(tC.getPropertyValue("isDeviceFlag").toString() == "true"){
                log.info("Request is on Device host and it is not an SAMLExchange call, So only 1 header 'x-dece-application-authorization' will be required.")
                if (tC.getPropertyValue("actionDeviceAuthHeader") == "EXCLUDE") {
                                log.info("Exclude 'x-dece-application-authorization' header enabled, so setting the value of xDeceApplicationAuthorization to null");                              
                                xDeceApplicationAuthorization = null;
                                log.info("x-dece-application-authorization = '" + xDeceApplicationAuthorization + "'");
                }else{
                                log.info("Exclude 'x-dece-application-authorization' header disabled, so setting the value of xDeceApplicationAuthorization from project property 'XDeceApplicationAuthorization'");                            
                                tC.setPropertyValue("deviceAuthHeaderValue",tP.getPropertyValue("XDeceApplicationAuthorization"));
                                xDeceApplicationAuthorization = tP.getPropertyValue("XDeceApplicationAuthorization");
                                log.info("x-dece-application-authorization = '" + xDeceApplicationAuthorization + "'");
                }
                //Set the values in HashMap
                headers.put("x-dece-ApplicationAuthorization",xDeceApplicationAuthorization);
}else{
                log.info("Request is on phost so no headers required");
}

log.info("Set header - '" + headers.values() + "'");
restRequest.setRequestHeaders(headers);
log.info("Headers set successfully")















/*
 * --------By Sanjeet ---------
 * Below is the old code
 * Once the  above code starts showing all pass results, we can remove below one
 */

//import org.apache.commons.codec.binary.Base64;
//import com.eviware.soapui.support.types.StringToStringsMap 
//def tC = testRunner.getTestCase();
//def tS = tC.getTestSuite();
//def tP = tS.getProject();
//
//
//def httpRequestStep = testRunner.testCase.getTestStepByName("POST - STS").getHttpRequest();
//def headers = new StringToStringsMap();
//
//if (tC.getPropertyValue("isDeviceFlag").toString() == "true" &amp;&amp; tC.getPropertyValue("scenario").toString() == "SAMLExchange") {
//	/*
//	*  construct the basic auth header
//	*/
//	String combo = tC.getPropertyValue("username").toString() + ":" + tC.getPropertyValue("password").toString();
//	String authHeaderValue = "Basic " + combo.bytes.encodeBase64().toString()
//
//	log.info "combo[$combo] - authHeaderValue[$authHeaderValue]";
//
//	tC.setPropertyValue("authHeaderValue",authHeaderValue);
//	tC.setPropertyValue("deviceAuthHeaderValue","dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6");
//	
//	 headers.put("Authorization",authHeaderValue); 
//	 /*
//	  * Disable below step by Sanjeet
//	  * Since added a script in setup suite to get this from DB.So commenting from here.
//	  */
// 	 //headers.put("x-dece-ApplicationAuthorization","dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6")
// 	 headers.put("x-dece-ApplicationAuthorization",tP.getPropertyValue("XDeceApplicationAuthorization"));
// 	 httpRequestStep.setRequestHeaders(headers);
//}else if(tC.getPropertyValue("isDeviceFlag").toString() == "true"){
///*
//	*  construct the device auth header
//	*/
//
//	tC.setPropertyValue("deviceAuthHeaderValue","dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6");
//
// 	 /*
//	  * Disable below step by Sanjeet
//	  * Since added a script in setup suite to get this from DB.So commenting from here.
//	  */
// 	 //headers.put("x-dece-ApplicationAuthorization","dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6")
// 	 headers.put("x-dece-ApplicationAuthorization",tP.getPropertyValue("XDeceApplicationAuthorization"));
// 	 //headers.put("x-dece-ApplicationAuthorization","dclient-basic ya1apnazju8yjayqpzfz:9E87A3B9EE80C388E3ED2984CADE09C4")
// 	 httpRequestStep.setRequestHeaders(headers);	
//}else{
//	log.info("Not a request to devicde host, hence removing device headers");
//	httpRequestStep.setRequestHeaders(headers);	
//}
//
//if (tC.getPropertyValue("actionAuthHeader") == "EXCLUDE") {
//	tC.setPropertyValue("authHeaderValue",null);
//	}
//
//
//if (tC.getPropertyValue("actionDeviceAuthHeader") == "EXCLUDE") {
//	tC.setPropertyValue("deviceAuthHeaderValue",null);
//	}</script></con:config></con:testStep><con:testStep type="groovy" name="Compute expected audience list" id="445c5b7c-1432-43c1-96c6-d80d9d3a1019">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("stsComputedAudienceList",null);

String affiliates = "";
int i = 0;

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	/*
	*  Construct the expected Affiliation list
	*/
	def affiliationList = [tC.getPropertyValue("nodeidFULL").toString()];
	def ignoreNodesList = [];
	def stsaudienceList = [];
	
	if (tC.getPropertyValue("stsaudienceIgnoreAll").toString() == "false") {
		if (tC.getPropertyValue("stsaudience") != 'null') {
			stsaudienceList = tC.getPropertyValue("stsaudience").toString().tokenize(",");

			/*
			*  Now remove the ingnorenodes 
			*/
			if (tC.getPropertyValue("stsaudienceIgnoreNodes") != 'null') {
				ignoreNodesList = tC.getPropertyValue("stsaudienceIgnoreNodes").toString().tokenize(",");
				ignoreNodesList.each {
					if (stsaudienceList.contains(it)) {
						stsaudienceList = stsaudienceList.minus(it);
					}
				}
			}
		}

		if (stsaudienceList.size() >= 1) {
			log.info "DEBUG: Adding stsaudienceList";
			affiliationList.addAll(stsaudienceList);
		}
	} 
	log.info "DEBUG: affiliationList size is " + affiliationList.size();
	affiliationList.each {
		log.info "DEBUG afflicationList Member: " + it;
		affiliates += it;

		i++;
		
		if (i != affiliationList.size()) {
			affiliates += ",";
		}
	}

	tC.setPropertyValue("stsComputedAudienceList",affiliates);

	log.info "stsComputedAudienceList[" + tC.getPropertyValue("stsComputedAudienceList") + "]";
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish pem" id="08225d12-9daa-411e-a827-ae087e69e870">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - STS");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="POST - STS" id="47f8ff61-5074-4b1d-a273-e27efb7f8a6b"><con:settings/><con:config service="STSCreate" resourcePath="/${#TestCase#endPoint}" methodName="STS - POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS" mediaType="application/xml;charset=UTF-8" postQueryString="false" accept="" sslKeystore="RET_2_concat.pem" id="2ac06385-2147-41f6-89c5-4e3843a87dff"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>https://${#Project#targetURL}</con:endpoint><con:request>${#TestCase#stsRequestBody}</con:request><con:originalUri>https://qa.p.uvvutest.biz/rest/1/11/SecurityToken/SecurityTokenExchange</con:originalUri><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Decode tokentype" id="430d7127-2aa9-4f9f-9908-9ec89d645981"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tP.getPropertyValue("versionMinor") == tP.getPropertyValue("versionURLEncode"))
	{
			tC.setPropertyValue("tokentype",URLDecoder.decode(tC.getPropertyValue("tokentype"), "UTF-8"));
	}</script></con:config></con:testStep><con:testStep type="groovy" name="Reset targetURL value" id="72dcc15c-9158-46df-a615-3d2e1fdaae29"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Set node_oid value based on nodeid" id="daf243ff-2da4-4bd3-b6cf-e90d9e409850"><con:settings/><con:config><script>

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def nodeoidGet = new dbUtils.dbNode(log,testProject.getPropertyValue("targetSystem"));

String nodeId = testCase.getPropertyValue("nodeid");
def node_oid = null;

	node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeId);


testCase.setPropertyValue("node_oid",""+node_oid);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="433953ea-b4df-49ae-93e7-6d7a53a1e12e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep = tC.getTestStepByName('POST - STS');

tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);


/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);

this.log.info "contentLength [$contentLength]";
this.log.info "status [$status]";
this.log.info "contentType [$contentType]";
this.log.info "contentLocation [$contentLocation]";


if (contentLength.toInteger() > 0 &amp;&amp; status != "HTTP/1.1 201 Created") {
	rawResp = new ByteArrayOutputStream();
     rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);

     int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

	String XMLbody  = strVal.substring(startAssert, strVal.length());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract ERROR table information" id="6f218ca8-39c8-43f2-9e50-024900b21c9f">
        <con:settings/>
        <con:config>
          <script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrType[" + tC.getPropertyValue("expectErrType") + "]";

switch (tC.getPropertyValue("expectErrType")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="8ff34f34-e07e-4a68-adc6-5070b5a97b16">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def url = tP.getPropertyValue("targetURL");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

tC.setPropertyValue("assertionUUIDprior",tC.getPropertyValue("assertionUUID"));

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;
String errorID = null;
String errorReason = null;
String errorLink = null;
String orgRequest = url + "/rest/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "NODE_STATUS_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "application/xml;charset=UTF-8";
		contentLengthZero = false;
		doContentLocaton  = false;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request"
		errorReason = "The request is not valid.";
		errorLink = "";
	break;
	case "FORBIDDEN_INVALID_ROLE":
		errorReason = "The request is not authorized.";
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1120";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
	case "FORBIDDEN_INVALID_DURATION":
	errorReason = "The security token's duration is not valid.";
	errorID="urn:dece:errorid:org:dece:invalidDurationvalue";
	errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
	case "FORBIDDEN_INVALID_USER_STATUS":
	errorReason = "The request is not authorized.";
	errorID="urn:dece:errorid:org:dece:securitycontext:InvalidUserStatus";
	errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
	case "FORBIDDEN:1123":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The request is not authorized.";
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1123";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
	case "FORBIDDEN:1119":
		errorReason = "The request is not authorized.";
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1119";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
	case "unauthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorReason = "The request is not authorized.";
		break;
	
	case "token_rejected":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "text/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:"+expectErrType;
		errorReason = "The request is not authorized.";
		break;
	case "FORBIDDEN":
	default:
		errorReason="Unknown Error";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	// assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	

if (doContentTypeHeader) {
	//assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		/*
		// ErrorLink
		this.log.info "ErrorLink: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
		*/
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION row count" id="8eb76efc-7697-44ac-9ed8-b155146315b4">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

int uuidcnt = 0;

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		String uuid = tC.getPropertyValue("contentLocation").toString();

		/*
		*  Assert we have a location header value..
		*/
		assert uuid.length() > 1;

		/*
		*  Verify the value is a URL
		*/
		def lurl = uuid.toURL();
		def urlStr = lurl.getPath();

		int lastSlash = urlStr.lastIndexOf('/');

		/*
		*  Pull just the assertion UUID from the URL
		*/
		String assertionUUID = urlStr.substring(lastSlash + 1);

		log.info "assertionUUID [$assertionUUID]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		assert dbUtils.samlGetUUIDNodeAssertionRowCount(assertionUUID) == 1;
	}
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION prior assertion removed; tokentype:saml2" id="1c296d64-894e-4b8e-9a84-6fb70676d1ec">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String tokentype = tC.getPropertyValue("tokentype").toString();
String scenario = tC.getPropertyValue("scenario").toString();
String assertionUUIDprior = tC.getPropertyValue("assertionUUIDprior").toString();

int uuidcnt = 0;

if (tC.getPropertyValue("expectErrType") == "SUCCESS" &amp;&amp; tokentype == "urn:dece:type:tokentype:saml2" &amp;&amp; scenario!="STSCreate") {

	assert assertionUUIDprior.length() > 4;
	
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  There should only be on NODE_USER_SAML_ASSERTION row 
		*  with this UUID after API invocation
		*/
		assert dbUtils.samlGetUUIDNodeAssertionRowCount(assertionUUIDprior) == 0;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION STATUS, node_oid" disabled="true" id="d7da4398-760a-4f25-aa34-bbd2a66fc0ef">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;
def myXML;

tC.setPropertyValue("assertionROW",null);

String arow = "";
String nodeid = tC.getPropertyValue("nodeid").toString();
String node_oid = tC.getPropertyValue("node_oid").toString();
String deviceNodeID = tP.getPropertyValue("nodeDeviceDefault").toString();

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	/*
	*  Device Node ID override.  All devices are 0200 in 
	*  QA so if the nodeID received is one of our defined
	*  devices change the setting for validation 
	*  purposes.
	*/
	log.info "nodeid: "+nodeid;
	switch (nodeid) {
		
		case tP.getPropertyValue("nodeIdDEV").toString():
			node_oid = deviceNodeID;
			log.info "node_oid:"+node_oid;
			break;
	}
	
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		String uuid = tC.getPropertyValue("contentLocation").toString();
		
		/*
		*  Assert we have a location header value..
		*/
		assert uuid.length() > 1;

		/*
		*  Verify the value is a URL
		*/
		def lurl = uuid.toURL();
		def urlStr = lurl.getPath();

		int lastSlash = urlStr.lastIndexOf('/');

		/*
		*  Pull just the assertion UUID from the URL
		*/
		String assertionUUID = urlStr.substring(lastSlash + 1);

		log.info "assertionUUID [$assertionUUID]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		arow = dbUtils.samlGetAssertionRow(assertionUUID);

		assert arow.length() > 0;

		log.info "arow is [$arow]";

		tC.setPropertyValue("assertionROW",arow);
	}

	/*
	*  Parse the XML
	*/
	try {
		myXML = new XmlSlurper().parseText(arow);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify only one row was returned..
		*/
		log.info "ASSERT - Row Size is 1";
		assert myXML.ResultSet.Row.size() == 1;

		/*
		*  Verify NODE_USER_SAML_ASSERTION.STATUS is active
		*/
		log.info "ASSERT - STATUS is active";
		assert myXML.ResultSet.Row.STATUS.text() == "active";

		/*
		*  Verify NODE_USER_SAML_ASSERTION.nodeid
		*/
		log.info "ASSERT - node_oid Expect[$node_oid] Received[" +
			myXML.ResultSet.Row.NODE_OID.text() + "]";
		assert myXML.ResultSet.Row.NODE_OID.text() == node_oid;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION.EXPIRATION" id="f719ded9-76db-4e6e-a5ad-9a912eea5e9a">
        <con:settings/>
        <con:config><script><![CDATA[import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def a;

int expectTime = tC.getPropertyValue("expectCreateExpireHoursDiff").toInteger();

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	String uname = tC.getPropertyValue("assertionUUID").toString().trim();
	String sys = tP.getPropertyValue("targetSystem").toString();
	String results = "";
	String secs = "";

	String sql = """SELECT (extract(DAY FROM EXPIRATION_DATE - CREATED_DATE)*24) 
		as HOURS FROM NODE_USER_SAML_ASSERTION where NODE_USER_SAML_UUID = '$uname'
	""";

	log.info sql;

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		results = a.SelectFromDB(sql,sys);
		log.info results;
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbUtils - $e"; 
		assert 1 == 2;
	}
	finally {
		try {
			def myXML = new XmlSlurper().parseText(results);
			assert myXML.ResultSet.Row.size() == 1;
			results = myXML.ResultSet.Row[0].HOURS
		}
		catch (Throwable e) {
			log.info "ERROR - XmlSlurper - $e";
			assert 1 == 2;
		} 
		finally {
			/*
			*  There is sometype of bug in oracle where it, at times, screws 
			*  update the date diff up to 24 hours.
			*/
						
			log.info "Expect[$expectTime] - Received[" +  results.toInteger() + "]";
			//assert (results.toInteger() == expectTime);
			//assert (results.toInteger() <= expectTime + 06 && results.toInteger() >= expectTime - 06);
			assert (results.toInteger() <= expectTime + 24 && results.toInteger() >= expectTime - 24);
		}
	}
}]]></script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER_SAML_ASSERTION.NODE_USER_SAML_ASSERTION" disabled="true" id="96470187-cde0-4917-a80b-15568658a6ee">
        <con:settings/>
        <con:config><script><![CDATA[/*
*  VALIDATIONS PERFORMED
*
*  saml2p:StatusCode == urn:oasis:names:tc:SAML:2.0:status:Success
*
*  <saml2:Issuer> == Project.Property("samlIssuer") (http://c.decellc.com/)
*
*  <saml2:AuthenticatingAuthority> == Project.Property("samlAuthenticatingAuthority") 
*	(urn:dece:org:neustar:coordinator)
*
*  <AudienceRestriction>
*	Verifications include insuring the size of the <AudienceRestriction> matches
*	the number of nodes expected.
*
*	For DEVICES this check will verify NO audience members are included.
*
*	Also verification of the nodes used in assertion creation/affiliation via
*	the STS call are contained within the <AudienceRestriction> node
*/
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def dbUtils;
def dbUtilsUser;

tC.setPropertyValue("computedAssertionXML",null);
tC.setPropertyValue("dbassertionNodeaccountid",null);
tC.setPropertyValue("dbassertionNodeuserid",null);

String assertionXML = "";
String arow = tC.getPropertyValue("assertionROW");
String[] affiliates;

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	def affiliationList = tC.getPropertyValue("stsComputedAudienceList").toString().tokenize(",");
	def ignoreNodesList = tC.getPropertyValue("stsaudienceIgnoreNodes").toString().tokenize(",");
	log.info "affiliationList size is " + affiliationList.size();
		
	/*
	*  Make sure we have data in arow
	*/
	assert arow.length() > 1;

	/*
	*  Get a handle for the saml class.
	*/
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	
	try {
		myXML = new XmlSlurper().parseText(arow);
		log.info 'myXML----------->'+myXML
		log.info 'size------->'+myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".size()
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify only one row was returned..
		*/
		log.info "ASSERT - Row Size is 1";
		assert myXML.ResultSet.Row.size() == 1;

		String assertRaw = myXML.ResultSet.Row.NODE_USER_SAML_ASSERTION_PART1.text() +
				myXML.ResultSet.Row.NODE_USER_SAML_ASSERTION_PART2.text();
			log.info 'assertRaw----->'+assertRaw

		/*
		*  Base64 decode the assertion clob
		*/
		byte [] xmlBytes = Base64.decode(assertRaw);
		assertionXML = new String(xmlBytes, "UTF8");

		assert assertionXML.length() > 1;

		tC.setPropertyValue("computedAssertionXML", assertionXML);
	}
	/*
	*  Now parse the assertion XML
	*/
	try {
		myXML = new XmlSlurper().parseText(assertionXML).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", saml2p: "urn:oasis:names:tc:SAML:2.0:protocol");
		log.info 'myXML----------->'+myXML
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Check the status
		*/
		log.info "ASSERT: Status size 1 == " + myXML."saml2p:Status".size();
		assert 1 == myXML."saml2p:Status".size();

		def s = myXML."saml2p:Status"."saml2p:StatusCode".@Value;
		log.info "ASSERT: Status value is urn:oasis:names:tc:SAML:2.0:status:Success == $s";
		assert "urn:oasis:names:tc:SAML:2.0:status:Success" == s.toString();

		/*
		*  Verify the nodeaccountid.
		*/
		String aname = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute".@Name;
		String anameE = "accountID";
		log.info "ASSERT: NodeAccountID - Name Attribute Value - Expect[$anameE] - Received[$aname]";
		assert anameE == aname;

		String avalue = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
		log.info "ASSERT: Returned Account NodeID length > 0 -- [$avalue]";
		assert avalue.length() > 0;
		tC.setPropertyValue("dbassertionNodeaccountid", avalue);

		/*
		*  Verify the nodeuserid
		*/
		String uvalue = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID".text();
		log.info "ASSERT: Returned Account UserID length > 0 -- [$uvalue]";
	
		//  Not zero length
		assert uvalue.length() > 0;

		//  Save for future
		tC.setPropertyValue("dbassertionNodeuserid", uvalue);
		int lastColon = uvalue.lastIndexOf(':');
		def uvalueid = uvalue.substring(lastColon + 1);

		//  Get USER_OID from NODE_USER table.
		def uvaluedb = dbUtils.samlGetNodeUserIDfromNodeUser(uvalueid);
		def unameval = tC.getPropertyValue("useroid").toString();
		log.info "ASSERT: NODE_USER.USER_OID Recv[$uvaluedb] - Expect[$unameval]";
		assert uvaluedb == unameval;

		/*
		* <saml2:Issuer>
		*/
		log.info "ASSERT: <saml2:Issuer> Expect: " +
			tP.getPropertyValue("samlIssuer") +
			" Received:[" + myXML."saml2:Assertion"."saml2:Issuer".text() +
			"]";
		assert tP.getPropertyValue("samlIssuer").toString() == myXML."saml2:Assertion"."saml2:Issuer".text();

		/*
		*  saml2:AuthnStatement
		*/
		log.info "ASSERT: <saml2:AuthenticatingAuthority> Expect [" + 
			tP.getPropertyValue("samlAuthenticatingAuthority") +
			"] Received[" +
			myXML."saml2:Assertion"."saml2:AuthnStatement"."saml2:AuthnContext"."saml2:AuthenticatingAuthority".text() +
			"]";
		assert tP.getPropertyValue("samlAuthenticatingAuthority").toString() ==
			myXML."saml2:Assertion"."saml2:AuthnStatement"."saml2:AuthnContext"."saml2:AuthenticatingAuthority".text()

		/*
		*  AudienceRestriction Processing
		*/
		if (tC.getPropertyValue("isDeviceFlag").toString() == "true") {
			/*
			*  Just empty the list that way we will check
			*  for zero
			*/
			affiliationList = "";
		}
		log.info "ASSERT: AudienceList size Expect[" +
			affiliationList.size() + "] Received[ " +
			myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".size() +
			"]";
	assert affiliationList.size() == myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".size();

		myXML."saml2:Assertion"."saml2:Conditions"."saml2:AudienceRestriction"."saml2:Audience".each {
			log.info "ASSERT: <saml2:AudienceRestriction> Contains [" +
				it.text() + "]";
				log.info "affiliationList: "+affiliationList;
			assert affiliationList.contains(it);
		}
		//Make sure none of the ingnoredNodes made it into the affilation list.
		ignoreNodesList.each {
			log.info "ASSERT: <saml2:AudienceRestriction> DOES NOT Contain [" + it + "]";
			assert !affiliationList.contains(it);
		}


		
	}
}]]></script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_ACCOUNT row" disabled="true" id="8576d547-8b2b-4693-ac09-cbcc5f8dc367">
        <con:settings/>
        <con:config><script>/*
*  Verifications
*
*	Only one NODE_ACCOUNT row exists for the NODE_ACCOUNT_ID.
*
*	nodeid is the nodeOID for the entity node.
*
*	ACCOUNT_OID is correct.
*
*/
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

def myXML;
def nodeXML;

tC.setPropertyValue("assertionAccountId",null);

String assertionAccountId = "";
String arow = "";
String narow = "";
String nodeid = tC.getPropertyValue("nodeid").toString();
String node_oid = tC.getPropertyValue("node_oid").toString();
/*
*  if we are a device adjust the 
*  nodeid...
*/
if (tC.getPropertyValue("isDeviceFlag") == "true") {
	log.info "here...";
	node_oid = tP.getPropertyValue("nodeDeviceDefault").toString();
}

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	
	arow = tC.getPropertyValue("assertionROW").toString();

	assert arow.length() > 0;

	/*
	*  Parse the NODE_USER_SAML_ASSERTION row
	*/
	try {
		myXML = new XmlSlurper().parseText(arow);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		assertionAccountId = myXML.ResultSet.Row.NODE_ACCOUNT_ID.text();

		log.info "assertionAccountId[$assertionAccountId]";
	}

	/*
	*  Get and Prase the NODE_ACCOUNT row..
	*/
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
		narow = dbUtils.samlGetNodeAccountRow(assertionAccountId);

		assert narow.length() > 0;
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		assertionAccountId = myXML.ResultSet.Row.NODE_ACCOUNT_ID.text();

		log.info "assertionAccountId[$assertionAccountId]";

		try {
			nodeXML = new XmlSlurper().parseText(arow);
		}
		catch(Throwable e) {
			log.info "ERROR - XmlSlurper - $e";
			assert 1 == 2;
		}
		finally {
			/*
			*  Only one row should be returned.
			*/
			log.info "ASSERT: Row Size is 1";
			assert nodeXML.ResultSet.Row.size() == 1;
			
			/*
			* ACCOUNT_OID - ugh  :(  for some reason slurper cannot find ACCOUNT_OID
			*	I will fix later  
			*/
			log.info "ASSERT: ACCOUNT_OID Expect[" + tC.getPropertyValue("accountoid") +
				"] Received[" + nodeXML.ResultSet.Row.ACCOUNT_OID.text() + "]";
		//assert tC.getPropertyValue("accountoid").toString() == nodeXML.ResultSet.Row.ACCOUNT_OID.text();

			/*
			*  nodeid is the entity node...
			*/
			
			log.info "ASSERT: node_oid Expect[" + node_oid +
				"] Received[" + nodeXML.ResultSet.Row.NODE_OID.text() + "]";
			assert node_oid == nodeXML.ResultSet.Row.NODE_OID.text();

		}
	}	
}

tC.setPropertyValue("assertionAccountId",assertionAccountId);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER row count" id="5d6119ba-2e5f-4773-b8ae-650c83026dd4">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int expectedSize = 1;
int assertionSize = 0;
int stsaudienceSize = 1;  // Start at one as entity nodes is in audience
int stsaudienceIgnoreSize = 0;
int expectNodeUserRowCount = tC.getPropertyValue("expectNodeUserRowCount").toInteger();

tC.setPropertyValue("z_resultNodeUserRowCount",null);

if (tC.getPropertyValue("expectErrType") == "SUCCESS") {
	if (tC.getPropertyValue("stsaudienceIgnoreAll").toString() == "false") {
		if ( tC.getPropertyValue("stsaudience") != null) {
			stsaudienceSize += tC.getPropertyValue("stsaudience").toString().tokenize(",").size();
			log.info "stsaudienceSize BEFORE [$stsaudienceSize]";
		}
		if ( tC.getPropertyValue("stsaudienceIgnoreNodes") != null) {
			stsaudienceIgnoreSize = tC.getPropertyValue("stsaudienceIgnoreNodes").toString().tokenize(",").size();
			log.info "stsaudienceIgnoreSize BEFORE [$stsaudienceIgnoreSize]";
		}

		stsaudienceSize -= stsaudienceIgnoreSize;
		log.info "stsaudienceSize FINAL [$stsaudienceSize]";
	} else {
		log.info "No changes to count";
	}
	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	assertionSize = a.samlGetUUIDNodeUserRowCountbyUUID(tC.getPropertyValue("assertionUUID"));

	tC.setPropertyValue("z_resultNodeUserRowCount",assertionSize.toString());

	if (expectNodeUserRowCount == 0) {
		log.info "ASSERT: Audience Size[$stsaudienceSize] - Received[$assertionSize]";
		assert assertionSize == stsaudienceSize;
	} else {
		log.info "ASSERT: Audience Size[$stsaudienceSize] - Received[$expectNodeUserRowCount]";
		assert stsaudienceSize == expectNodeUserRowCount;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER rows" id="42e1f423-baae-424e-a7f5-10b5b9056136">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));

def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));

String uuid = tC.getPropertyValue("assertionUUID").toString();
String nodeUser = tC.getPropertyValue("assertionUserId").toString();

String resultsDB = "";
String node = "";
List nodeList;

int indexOfcol = 0;
if (tC.getPropertyValue("actionSkipNodeUserCheck") != "true") {
	if (tC.getPropertyValue("expectErrType").toString() == "SUCCESS") {
		assert tC.getPropertyValue("stsComputedAudienceList").toString() != 'null';

		/*
		*  Devices should not ever be affilated.
		*/
		if (tC.getPropertyValue("isDeviceFlag").toString() != "true") {
			nodeList = tC.getPropertyValue("stsComputedAudienceList").toString().tokenize(",");
		} else {
			nodeList = tP.getPropertyValue("nodeDeviceDefault").toString().tokenize(",");
		}
		
		log.info "nodeList size is " + nodeList.size();

		nodeList.each {
			assert nodeList.isEmpty() == false;
			String node_oid = null;
			String nodeoid = tC.getPropertyValue("node_oid").toString();
			log.info "Processing NODE: $it";	
			if(it.toString() == "urn:dece:org:org:dece:dece:cs" || it.toString() == "urn:dece:org:org:dece:coord:cs"){
			log.info "here...";
				node_oid =  nodeoid;
			}else{
				indexOfcol = it.lastIndexOf(":");
			node = it.substring(indexOfcol + 1);
			log.info "node is $node";
			 node_oid = nodeoidGet.nodeoidGetFromNodeId("$node");
			}
			log.info "here...";
				if (tC.getPropertyValue("isDeviceFlag").toString() == "true") {
					node_oid=tP.getPropertyValue("nodeDeviceDefault").toString();
				}
	
			
			String sql = """SELECT to_char(rawtohex(USER_OID)) USER_OID,
				to_char(rawtohex(NODE_OID)) NODE_OID, 
				to_char(rawtohex(NODE_USER_ID)) NODE_USER_ID 
				FROM NODE_USER where NODE_USER_SAML_UUID = '$uuid' 
 				and NODE_OID = hextoraw('$node_oid')""";
			try {
				log.info "sql is [$sql]";
				resultsDB = dbUtils.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
			} catch (Throwable e) {
				log.info "ERROR - SelectFromDB issue! - $e";
			} finally {
				log.info "results is [$resultsDB]";
			}
		
			try {
				def myXML = new XmlSlurper().parseText(resultsDB);
	
				String dbUserOID = myXML.ResultSet.Row[0].USER_OID;
				String dbNodeOID = myXML.ResultSet.Row[0].NODE_OID;
				String dbNodeUserOID = myXML.ResultSet.Row[0].NODE_USER_ID;
			}
			catch(Throwable e) {
				log.info "ERROR - XmlSlurper Problem - $e";
			}
			finally {
				log.info "Assert DB USER_OID [$dbUserOID] == [" + tC.getPropertyValue("userOID") + "]";
				assert dbUserOID == tC.getPropertyValue("userOID").toString();

				log.info "Assert DB NODE_OID [$dbNodeOID] == [$node_oid]";
				assert dbNodeOID == node_oid;

			} 	
		}
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify LVAL EUDU &amp; EMUC row count" disabled="true" id="ca999a4e-aa60-4d27-a651-1431344b167a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
def username = context.expand( '${#TestCase#username}' )
username=username.replace(" ","");
String uuid = tC.getPropertyValue("assertionUUID").toString();
String user_oid = tC.getPropertyValue("useroid").toString();
String resultsDB = "";
String node = "";
List nodeList;
def myXML = "";
int indexOfcol = 0;

if (tP.getPropertyValue("versionMinor") != "02" &amp;&amp; tC.getPropertyValue("actionSkipPolicyCheck") != "true" &amp;&amp; tC.getPropertyValue("tokentype")!= tP.getPropertyValue("urntokenType_deviceauthtoken")) 
{
	if (tC.getPropertyValue("expectErrType").toString() == "SUCCESS") 
	{
		assert tC.getPropertyValue("stsComputedAudienceList").toString() != 'null';

		/*
		*  Devices should not ever be affilated.
		*/
		if (tC.getPropertyValue("isDeviceFlag").toString() != "true") 
		{
			nodeList = tC.getPropertyValue("stsComputedAudienceList").toString().tokenize(",");
		} 
		else 
		{
			nodeList = tP.getPropertyValue("nodeDeviceDefault").toString().tokenize(",");
		}
		
		log.info "nodeList size is " + nodeList.size();

		nodeList.each {

			assert nodeList.isEmpty() == false;
			log.info "Processing NODE: $it";
			indexOfcol = it.lastIndexOf(":");
			node = it.substring(indexOfcol + 1);
			String node_oid = nodeoidGet.nodeoidGetFromNodeId(node);
			
			String sql = """select pre.entity_id, count(p.policy_oid) as count from policy p, policy_requesting_entity pre where 
									p.status = 'active' and p.policy_class in (100,103,104) 
									and p.policy_oid in (select policy_oid from policy_relationship where policy_actor in 
									(select account_oid from account_user where lower(username) = lower('$username')))
									and pre.policy_oid = p.policy_oid and pre.entity_id = hextoraw('$node_oid') group by pre.entity_id""";
			try 
			{
				log.info "sql is [$sql]";
				resultsDB = dbUtils.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
				log.info "resultsDB: "+resultsDB;
			} 
			catch (Throwable e) 
			{
				log.info "ERROR - SelectFromDB issue! - $e";
			} 
			
			myXML = new XmlSlurper().parseText(resultsDB);
			log.info "Node Received: "+myXML.ResultSet.Row[0].ENTITY_ID;
			log.info "Row Count Received: "+myXML.ResultSet.Row[0].COUNT;
			assert myXML.ResultSet.Row[0].ENTITY_ID== node_oid;
			assert myXML.ResultSet.Row[0].COUNT == 3;	
		
		}
	}
	
}
else
{
	log.info "Second User Policy Check... or token create using auth token or version 02";
}</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Verify NODE_USER prior removed; tokentype:saml2" id="b1641576-61ed-4f31-bf3d-0d09f0e6a83f">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def a;

String tokentype = tC.getPropertyValue("tokentype").toString();
String scenario = tC.getPropertyValue("scenario").toString();
String assertionUUIDprior = tC.getPropertyValue("assertionUUIDprior").toString();

tC.setPropertyValue("z_resultNodeUserRowCount",null);

if (tC.getPropertyValue("expectErrType") == "SUCCESS" &amp;&amp; tokentype == "urn:dece:type:tokentype:saml2" &amp;&amp; scenario != "STSCreate") {

	a = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));

	assertionSize = a.samlGetUUIDNodeUserRowCountbyUUID(assertionUUIDprior);

	log.info "ASSERT: No Rows for [$assertionUUIDprior]";
	assert assertionSize == 0;
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return the assertion information to the Calling Test Case" id="d70a0a8c-e267-4d55-a0a7-115c725bab24">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",null);

callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Save the Request &amp; Response with TC Name" disabled="true" id="3762c1b3-9c69-4581-a16c-41b3e0de14b6"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep = tC.getTestStepByName('POST - STS');

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def myP = testRunner.testCase.testSuite.project.name;

def tName = context.expand( '${#TestCase#tName}' );

def logFile = new File(projectPath +"\\"+myP +"\\"+tName+".txt")
logFile.append("Request:\n");
def headers = tStep.httpRequest.getRequestHeaders();
log.info "headers:"+headers;
def req= context.expand('${POST - STS#Request}')
logFile.append(req);
log.info "Request: "+req;

logFile.append("\n\nResponse:\n");
res = new ByteArrayOutputStream();
def res = tStep.httpRequest.response.getRawResponseData();;
 strVal  = new String(res);

logFile.append(strVal);
log.info "Response: "+strVal;</script></con:config></con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1577845980823E95E05307991F0ABF67</con:value></con:property><con:property><con:name>actionAuthHeader</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionDeviceAuthHeader</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>actionSkipPolicyCheck</con:name><con:value>false</con:value></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionROW</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <NODE_USER_SAML_ASSERTION_OID>FE5F879F8CC32C42E0401F0A07992A41</NODE_USER_SAML_ASSERTION_OID>
      <NODE_OID>F2E8BD45339F8CE4E0401F0A05995E63</NODE_OID>
      <NODE_USER_SAML_ASSERTION_PART1>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHNhbWwycDpSZXNwb25zZSBDb25zZW50PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDp1bnNwZWNpZmllZCIgRGVzdGluYXRpb249Imh0dHBzOi8vc3RkZWNxYXZ1dGwxLnZhLm5ldXN0YXIuY29tOjI0ODUvc2ltcGxlc2FtbC9tb2R1bGUucGhwL3NhbWwvc3Avc2FtbDItYWNzLnBocC9SRVQiIElEPSJfOGM0Nzk5YzAtZGRjMy00MDMyLWIxZDItZTg4ZjNlMzg1ZGVhIiBJblJlc3BvbnNlVG89Il8xZmFhejVieWM5dzNiMXZiZTYzcW9jY3VrZyIgSXNzdWVJbnN0YW50PSIyMDE0LTA3LTE3VDA3OjI0OjI3Ljk2MVoiIFZlcnNpb249IjIuMCIgeG1sbnM6c2FtbDJwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiPjxzYW1sMjpJc3N1ZXIgeG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPmh0dHA6Ly9jLmRlY2VsbGMuY29tLzwvc2FtbDI6SXNzdWVyPjxzYW1sMnA6U3RhdHVzPjxzYW1sMnA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8+PC9zYW1sMnA6U3RhdHVzPjxzYW1sMjpBc3NlcnRpb24gSUQ9Il9hMTQxYmMwNS1lNGQ4LTQyYmMtODg4ZS0wNDAyNTlhNDM4M2QiIElzc3VlSW5zdGFudD0iMjAxNC0wNy0xN1QwNzoyNDoyNy45NjFaIiBWZXJzaW9uPSIyLjAiIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj48c2FtbDI6SXNzdWVyPmh0dHA6Ly9jLmRlY2VsbGMuY29tLzwvc2FtbDI6SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPgo8ZHM6U2lnbmVkSW5mbz4KPGRzOkNhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz4KPGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNyc2Etc2hhMSIvPgo8ZHM6UmVmZXJlbmNlIFVSST0iI19hMTQxYmMwNS1lNGQ4LTQyYmMtODg4ZS0wNDAyNTlhNDM4M2QiPgo8ZHM6VHJhbnNmb3Jtcz4KPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+CjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiPjxlYzpJbmNsdXNpdmVOYW1lc3BhY2VzIFByZWZpeExpc3Q9ImRzIHNhbWwyIHhzIHhzaSIgeG1sbnM6ZWM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvZHM6VHJhbnNmb3JtPgo8L2RzOlRyYW5zZm9ybXM+CjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIvPgo8ZHM6RGlnZXN0VmFsdWU+QStsTWpwcm5sejhkMXFreWJVRnhaVEJpYStjPTwvZHM6RGlnZXN0VmFsdWU+CjwvZHM6UmVmZXJlbmNlPgo8L2RzOlNpZ25lZEluZm8+CjxkczpTaWduYXR1cmVWYWx1ZT4KWFRVSlgxZ3g1TXllMU56bWxEOHpZS2ZxcWYxcWxaMHlFTmp5eW9QM2tpdHhQejFyQzlXbXZuL0hLbXFTMlljZElOSVRhSHJzL2l3KwphL0k1MHVnWEdMSElFSHhuMG4vSWt2Njl4aGh4L1pFeVRuUHN2WUVDbWhVZkdEYkhlK2RzRFFzR1dUVSthMFV2RzJzNVBkenJQUzZVCjdaQjFDTnhNb1JQMktuYS95bEk9CjwvZHM6U2lnbmF0dXJlVmFsdWU+CjwvZHM6U2lnbmF0dXJlPjxzYW1sMjpTdWJqZWN0PjxzYW1sMjpOYW1lSUQgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDpwZXJzaXN0ZW50Ij51cm46ZGVjZTp1c2VyaWQ6b3JnOmRlY2U6RkU1Rjg3QkJGMzNEMDJCRUUwNDAxRjBBMDc5OTJBNDk8L3NhbWwyOk5hbWVJRD48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjbTpzZW5kZXItdm91Y2hlcyI+PHNhbWwyOlN1YmplY3RDb25maXJtYXRpb25EYXRhIEluUmVzcG9uc2VUbz0iXzFmYWF6NWJ5Yzl3M2IxdmJlNjNxb2NjdWtnIiBOb3RPbk9yQWZ0ZXI9IjIwMTQtMDctMTdUMTA6MjQ6MjcuOTYxWiIgUmVjaXBpZW50PSJodHRwczovL3N0ZGVjcWF2dXRsMS52YS5uZXVzdGFyLmNvbToyNDg1L3NpbXBsZXNhbWwvbW9kdWxlLnBocC9zYW1sL3NwL3NhbWwyLWFjcy5waHAvUkVUIi8+PC9zYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uPjwvc2FtbDI6U3ViamVjdD48c2FtbDI6Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMTQtMDctMTdUMDc6MjQ6MTcuOTYxWiIgTm90T25PckFmdGVyPSIyMDE0LTA3LTE3VDEzOjI0OjI3Ljk2MVoiPjxzYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPjxzYW1sMjpBdWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6UkVUPC9zYW1sMjpBdWRpZW5jZT48L3NhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24+PC9zYW1sMjpDb25kaXRpb25zPjxzYW1sMjpBZHZpY2U+PHNhbWwyOkFzc2VydGlvblVSSVJlZj5odHRwczovL3FhLnEudXZ2dS5jb206NzAwMy9yZXN0LzEvMTEvU2VjdXJpdHlUb2tlbi9Bc3NlcnRpb24vX2ExNDFiYzA1LWU0ZDgtNDJiYy04ODhlLTA0MDI1OWE0MzgzZDwvc2FtbDI6QXNzZXJ0aW9uVVJJUmVmPjwvc2FtbDI6QWR2aWNlPjxzYW1sMjpBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMTQtMDctMTdUMDc6MjQ6MjcuOTYxWiIgU2Vzc2lvbkluZGV4PSJfYTE0MWJjMDUtZTRkOC00MmJjLTg4OGUtMDQwMjU5YTQzODNkIj48c2FtbDI6QXV0aG5Db250ZXh0PjxzYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YWM6Y2xhc3NlczpQYXNzd29yZDwvc2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY+PHNhbWwyOkF1dGhlbnRpY2F0aW5nQXV0aG9yaXR5PnVy</NODE_USER_SAML_ASSERTION_PART1>
      <NODE_USER_SAML_ASSERTION_PART2>bjpkZWNlOm9yZzpvcmc6ZGVjZTpjb29yZGluYXRvcjwvc2FtbDI6QXV0aGVudGljYXRpbmdBdXRob3JpdHk+PC9zYW1sMjpBdXRobkNvbnRleHQ+PC9zYW1sMjpBdXRoblN0YXRlbWVudD48c2FtbDI6QXR0cmlidXRlU3RhdGVtZW50PjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0iYWNjb3VudElEIiBOYW1lRm9ybWF0PSJ1cm46ZGVjZTp0eXBlOmFjY291bnRJRCI+PHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI+dXJuOmRlY2U6YWNjb3VudGlkOm9yZzpkZWNlOkZFNUVGRDlGMDY3QUQ0QzZFMDQwMUYwQTA1OTkyNUU0PC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48L3NhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWwyOkFzc2VydGlvbj48L3NhbWwycDpSZXNwb25zZT4=</NODE_USER_SAML_ASSERTION_PART2>
      <NODE_USER_SAML_UUID>_a141bc05-e4d8-42bc-888e-040259a4383d</NODE_USER_SAML_UUID>
      <CREATED_DATE>2014-07-17 07:24:28.0</CREATED_DATE>
      <NODE_USER_ID>FE5F87BBF34302BEE0401F0A07992A49</NODE_USER_ID>
      <NODE_ACCOUNT_ID>FE5EFD9F0681D4C6E0401F0A059925E4</NODE_ACCOUNT_ID>
      <STATUS>active</STATUS>
      <EXPIRATION_DATE>2014-07-17 13:24:28.0</EXPIRATION_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        
        
        <con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUIDprior</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_7ad07972-0ac4-4ff2-a3b9-0ca932706ac4</con:value></con:property>
        
        
        
        
        
      <con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertUserId</con:name><con:value>94B6AE0F85AFC20DE0401F0A0799081F</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authHeaderValue</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>computedAssertionXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2p:Response Consent="urn:oasis:names:tc:SAML:2.0:consent:unspecified" ID="_3c5546a8-802d-4fa1-9618-419515c87d4c" IssueInstant="2014-07-17T07:21:59.338Z" Version="2.0" xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol"><saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">http://c.decellc.com/</saml2:Issuer><saml2p:Status><saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/></saml2p:Status><saml2:Assertion ID="_39bddb3c-1ed8-4fac-bb60-e288cad5c2c5" IssueInstant="2014-07-17T07:21:59.338Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_39bddb3c-1ed8-4fac-bb60-e288cad5c2c5">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs xsi" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>/bwbaX7WZ6a3IdzPzNR7ynE9YWA=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
A0jHAC51O0NdcxachWRj9L+ym2OYFNlkUXU0L4H2AhdM3+jpOFZAzv+O9Xj4m4idHyYyFmiwYoaz
96noF/7xUYcEIDx13Cmr27hNHLtf1Dwpw28N2E6uGi/DAyJN9INnH2o74UqptssDjdKxvgPr96FX
Cmud756ijq6Rtl/I8Xw=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:FE5F4A54A6116CE2E0401F0A05990A00</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"><saml2:SubjectConfirmationData NotOnOrAfter="2014-07-17T10:21:59.338Z"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-07-17T07:21:49.338Z" NotOnOrAfter="2024-07-17T07:21:59.338Z"/><saml2:Advice><saml2:AssertionURIRef>https://qa.d.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_39bddb3c-1ed8-4fac-bb60-e288cad5c2c5</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-07-17T07:21:59.338Z" SessionIndex="_39bddb3c-1ed8-4fac-bb60-e288cad5c2c5"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:FE5F429303EF6AE6E0401F0A05990A0A</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></saml2p:Response>]]></con:value></con:property><con:property><con:name>connection</con:name><con:value>close</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.d.uvvu.com:7001/rest/2015/02/SecurityToken/Assertion/_cbc84f00-7093-447c-8461-e3b73bdcfd37</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/plain; charset=UTF-8</con:value></con:property><con:property><con:name>dbassertionNodeaccountid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:FE5F429303EF6AE6E0401F0A05990A0A</con:value></con:property><con:property><con:name>dbassertionNodeuserid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FE5F4A54A6116CE2E0401F0A05990A00</con:value></con:property><con:property><con:name>deviceAuthHeaderValue</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deviceAuthString</con:name><con:value>841321476135740</con:value></con:property><con:property><con:name>deviceAuthToken</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>endPoint</con:name><con:value>rest/2015/02/SecurityToken/SecurityTokenExchange?tokentype=urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>6</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRightsTokenCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectNodeUserRowCount</con:name><con:value>0</con:value></con:property><con:property><con:name>isDeviceFlag</con:name><con:value>false</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP2/RET_2_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>nodeidFULL</con:name><con:value>urn:dece:org:org:dece:RET_2</con:value></con:property><con:property><con:name>node_oid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>86713</con:value></con:property><con:property><con:name>scenario</con:name><con:value>STSCreate</con:value></con:property><con:property><con:name>sName</con:name><con:value>2_P0 Test Cases</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsaudience</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsaudienceEmbeddedDelimiter</con:name><con:value>false</con:value></con:property><con:property><con:name>stsaudienceIgnoreAll</con:name><con:value>false</con:value></con:property><con:property><con:name>stsaudienceIgnoreNodes</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsaudiencePrefixDelimiter</con:name><con:value>false</con:value></con:property><con:property><con:name>stsaudienceSuffixedDelimiter</con:name><con:value>false</con:value></con:property><con:property><con:name>stsComputedAudienceList</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:RET_2</con:value></con:property><con:property><con:name>stsduration</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsExpire</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsRequestBody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<Credentials xmlns="http://www.decellc.org/schema/2015/03/coordinator">
   <Username>stsapi_107_1430973819090</Username>
   <Password>testing</Password>
</Credentials>]]></con:value></con:property><con:property><con:name>stsRequestBodyNULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsRequestUserNameFlag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsSkipLastLoginCheck</con:name><con:value>true</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_03101 - STS - DeviceAuthToken JoinCode - Full user created DeviceAuthToken consumable - P0</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>stsapi_107_1430973819090</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">157784973C2A72CCE05305991F0A0266</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
<Error ErrorID="urn:dece:errorid:org:dece:securitycontext:forbidden:1119">
       <Reason Language="en">The request is not authorized.</Reason>
        <OriginalRequest></OriginalRequest>
       <ErrorLink></ErrorLink>
    </Error>
</ErrorList>
]]></con:value></con:property><con:property><con:name>z_resultNodeUserRowCount</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>555384c9-6fa2-448b-a38e-713264e945f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeviceAuthTokenCreate - JoinCode API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="9d433322-c74b-4d9b-8cc1-bf83135be68c">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Properties" id="b45a495d-22be-4e85-99fc-80df6775e9ff">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("counter",null);
tC.setPropertyValue("nodeSavedRole",null);
tC.setPropertyValue("deviceAuthTokenRole",null);
tC.setPropertyValue("expectDeviceTokenCreateResponse",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("accountAuthTokenRowsBefore",null);
tC.setPropertyValue("accountAuthTokenRowsAfter",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Properties from Calling Test Case" id="30507f54-4763-4ea2-8c3e-7db9d3a600a0">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("expectDeviceTokenCreateResponse",callTC.getPropertyValue("expectDeviceTokenCreateResponse"));
tC.setPropertyValue("deviceAuthTokenRole",callTC.getPropertyValue("deviceAuthTokenRole"));

if (tC.getPropertyValue("expectDeviceTokenCreateResponse") == null ||
	tC.getPropertyValue("expectDeviceTokenCreateResponse") == "null") {
	tC.setPropertyValue("expectDeviceTokenCreateResponse","SUCCESS");
}
if (tC.getPropertyValue("counter") == null ||
	tC.getPropertyValue("counter") == "null") {
	tC.setPropertyValue("counter","1");
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract API Error Information" id="d825a7a1-e5b4-43a4-a62a-47d1474823f1">
        <con:settings/>
        <con:config>
          <script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectDeviceTokenCreateResponse[" + tC.getPropertyValue("expectDeviceTokenCreateResponse") + "]";

switch (tC.getPropertyValue("expectDeviceTokenCreateResponse")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "ACCOUNT_NOT_VALID":
		errId = "AccountIdNotValid";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "DEVICE_EXCEED_MAX":
		errId = "AccountDeviceCountExceedMaxLimit";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "RENEW_EXCEED_MAX_TIME":
		errId = "StreamRenewExceedsMaximumTime";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set PEM file for HTTPS Request" id="0b29faf4-8278-4db5-a824-9aa0e3065935">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DeviceAuthTokenCreate - JoinCode API");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DeviceAuthTokenCreate - JoinCode API" id="2838a687-96c2-44af-a650-e6f6e4164e5c"><con:settings/><con:config service="DeviceAuthTokenCreate - JoinCode" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/DeviceAuthToken/JoinCode" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeviceAuthTokenCreate - JoinCode API" mediaType="application/xml;charset=UTF-8" postQueryString="false" sslKeystore="RET_concat.pem" id="910dd4ca-d866-48c0-8983-58bca80a3e75"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>https://${#Project#targetURL}</con:endpoint><con:request/><con:originalUri>https://qa.p.uvvutest.biz/rest/1/11/Account/urn:dece:accountid:org:dece:067ACA3ACB5F24C6E0533D991E0A6B11/DeviceAuthToken/JoinCode</con:originalUri><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ACCT" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep>
      <con:testStep type="groovy" name="Verify DeviceAuthTokenCreate Response Headers/Body" id="bcb8a355-d49a-423b-b2d2-73df6b011817">
        <con:settings/>
        <con:config><script>import org.xml.sax.SAXException; 
import org.xml.sax.SAXParseException; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep = tC.getTestStepByName('DeviceAuthTokenCreate - JoinCode API');

tC.setPropertyValue("rauthToken", null);
tC.setPropertyValue("rauthToken_" + tC.getPropertyValue("counter"), null);

boolean expectLocation = null;
boolean performBodyValidations = true;
String respstatus = null;
String respconnection = null;
String respcontentType = null;
String respcontentLength = null;
String respLocation = null;
String respbody = null;
String expectstatus = null;
String expectconnection = null;
String expectcontentType = null;
String expectcontentLength = null;
String urnError = tP.getPropertyValue("urnError").toString();
String major = tP.getPropertyValue("versionMajor").toString();
String minor = tP.getPropertyValue("versionMinor").toString();
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";

try {
	respbody = tStep.httpRequest.response.getResponseContent().toString();
} catch (e) {
	log.info "getResponseContent failure! - $e";
} finally {
	tStep.httpRequest.response.responseHeaders.each() { header, value ->
		switch (header) {
			case "Location": 
				respLocation = value[0];
				break;
			case "#status#": 
				respstatus = value[0]; 
				break;
			case "Connection": 
				respconnection = value[0]; 
				break;
			case "Content-Type": 
				respcontentType = value[0]; 
				break;
			case "Content-Length": 
				respcontentLength = value[0]; 
				break;
			case "Transfer-Encoding": 
				resphttpContentEncoding = value[0]; 
				break;
		}
	}
}

log.info "expectDeviceTokenCreateResponse -- [" + tC.getPropertyValue("expectDeviceTokenCreateResponse") + "]";

switch (tC.getPropertyValue("expectDeviceTokenCreateResponse")) {
	case "SUCCESS":
		expectstatus = "HTTP/1.1 201 Created";
		expectconnection = "Keep-Alive";
		expectcontentType = "application/xml;charset=UTF-8";
		//expectcontentType = "text/plain; charset=UTF-8"
		expectcontentLength = "0";
		expectLocation = true;
		break;
	case "Node_status_inactive":
		expectstatus = "HTTP/1.1 403 Forbidden";
		expectconnection = "Keep-Alive";
		expectcontentType = "application/xml;charset=UTF-8";
		expectcontentLength = "1";
		expectLocation = false;
		performBodyValidations = false;
		break;
	default:
		errorReasonFlag = true;
		expectstatus = tC.getPropertyValue("errorStatusCode");
		expectconnection = "Keep-Alive";
		expectLocation = false;
		expectcontentLength = "1";
		expectcontentType = "application/xml;charset=UTF-8";
		errorID     = urnError + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

/*
*  HTTP Header Checkes...
*/
log.info "----- HTTP Header Validations ------";

log.info "expectstatus[$expectstatus] - respstatus[$respstatus]";
assert expectstatus == respstatus;

log.info "expectconnection[$expectconnection] - respconnection[$respconnection]";
//assert expectconnection == respconnection;

if (expectcontentLength == "0") {
	log.info "expectcontentLength[$expectcontentLength] - respcontentLength[$respcontentLength]";
	assert respcontentLength == expectcontentLength;
} else {
	log.info "respcontentLength[$respcontentLength] - Greater than zero";
	assert respcontentLength.toInteger() > 0;
}

if (expectLocation) {
	log.info "respLocation[$respLocation] - Location Header Present in Response";
	assert respLocation.length() > 1;
} else {
	log.info "respLocation[$respLocation] - Location Header NOT Present in Response";
	assert respLocation == null;
}

log.info "expectcontentType[$expectcontentType] - respcontentType[$respcontentType]";
assert expectcontentType == respcontentType;

/*
*  HTTP Body Checkes...
*/
log.info "----- HTTP Body Validations performBodyValidations[$performBodyValidations] ------";

/*
*   -------------------- ERROR --------------------
*/
if (performBodyValidations) {
	if (tC.getPropertyValue("expectDeviceTokenCreateResponse") != "SUCCESS") {
		try {
			def myXML = new XmlSlurper().parseText(respbody);
		} catch (IOException e) {
			log.info "ERROR!  XmlSlurper.parseText IOException error -- $e";
		} catch (SAXException e) {
			log.info "ERROR!  XmlSlurper.parseText SAXException error -- $e";
		}
		finally {
			assert myXML.Error.size() == 1;
			assert myXML.Error.Reason.size() == 1;
			assert myXML.Error.OriginalRequest.size() == 1;
			assert myXML.Error.ErrorLink.size() == 1;

			String respErrorCode = myXML.Error.@ErrorID.toString();
			String respReason = myXML.Error.Reason.toString();
			String respErrorLink = myXML.Error.ErrorLink.toString();
			String expectErrorCode = urnError + tC.getPropertyValue("errorID").toString();
			String expectReason = tC.getPropertyValue("errorReason").toString();
			String expectErrorLink = errorLinkBase + tC.getPropertyValue("errorID").toString();
		
			// ErrorCode
			this.log.info "expectErrorCode [$expectErrorCode] - respErrorCode[$respErrorCode]";
			assert respErrorCode == expectErrorCode;

			// Reason
			this.log.info "expectReason [$expectReason] - respReason[$respReason]";
			assert respReason == expectReason;

			// ErrorLink
			this.log.info "expectErrorLink [$expectErrorLink] - respErrorLink[$respErrorLink]";
			assert respErrorLink == expectErrorLink;
		}
	} else {
		/*
		*   -------------------- SUCCESS --------------------
		*/
		String proto = "";
		String hostie = "";
		String rPort = "";
		String rauthToken = "";
		String rauthTokenFile = "";
		String authTokenFile = "";

		try {
			URL aURL = new URL(respLocation);

			proto = aURL.getProtocol();
			hostie = aURL.getHost();
			rPort = aURL.getPort();
			rauthtokenFile = aURL.getFile();
	
		} catch (MalformedURLException e) {
			log.info "ERROR!  Failed to parse URL - $respLocation - $e";
		} finally {
			log.info "proto[$proto] == https";
			assert proto == "https";

			log.info "hostie[$hostie] == [" + tP.getPropertyValue("targetHostq") + "]";
//			assert hostie == tP.getPropertyValue("targetHostq");

			log.info "rPort[$rPort] == [" + tP.getPropertyValue("targetPort") + "]";
//			assert rPort == tP.getPropertyValue("targetPort");

			log.info "rauthtokenFile[$rauthtokenFile]";
			if (rauthtokenFile.length() > 0) {
				int lastSlash = rauthtokenFile.lastIndexOf('/');
				rauthToken = rauthtokenFile.substring(lastSlash + 1);
			}
			log.info "rauthToken [$rauthToken]";

			tC.setPropertyValue("rauthToken", rauthToken);
			tC.setPropertyValue("rauthToken_" + tC.getPropertyValue("counter"), rauthToken);
		}
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract the DEVICE_AUTH_TOKEN.DEVICE_AUTH_CODE value" id="76b00eaf-ff99-4f15-9a16-a4f8a0e97bb6">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String deviceAuthToken = "";

try {
	dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
	deviceAuthToken = dbUtils.deviceGetAuthCode(tC.getPropertyValue("rauthToken"));
}
catch (Throwable e) {
	log.info "Error in dbUtils.deviceAuthToken - $e";
}
finally {
	log.info "deviceAuthToken [$deviceAuthToken]";

	assert deviceAuthToken.length() > 0;

	tC.setPropertyValue("deviceAuthToken",deviceAuthToken);
}




deviceAuthToken</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return resulting API Attributes" id="370596ef-a967-491d-a874-6c24cfb35fc4">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

if (tC.getPropertyValue("expectDeviceTokenCreateResponse") == "SUCCESS") {
	callTC.setPropertyValue("deviceAuthToken",tC.getPropertyValue("deviceAuthToken"));
	callTC.setPropertyValue("authTokenStatus","active");
	callTC.setPropertyValue("authTokenStatus_" + tC.getPropertyValue("counter"),"active");
	callTC.setPropertyValue("rauthToken",tC.getPropertyValue("rauthToken"));
	callTC.setPropertyValue("rauthToken_" + tC.getPropertyValue("counter"),tC.getPropertyValue("rauthToken"));
	callTC.setPropertyValue("authTokenCreatedBy",tC.getPropertyValue("nodeid"));
	callTC.setPropertyValue("authTokenCreatedBy_" + tC.getPropertyValue("counter"),tC.getPropertyValue("nodeid"));
	callTC.setPropertyValue("authTokenCreatedUser",tC.getPropertyValue("useroid"));
	callTC.setPropertyValue("authTokenCreatedUser_" + tC.getPropertyValue("counter"),tC.getPropertyValue("useroid"));
	callTC.setPropertyValue("authTokenCreatedAccount",tC.getPropertyValue("accountoid"));
	callTC.setPropertyValue("authTokenCreatedAccount_" + tC.getPropertyValue("counter"),tC.getPropertyValue("accountoid"));
	callTC.setPropertyValue("authTokenisGen","Y");
	callTC.setPropertyValue("authTokenisGen_" + tC.getPropertyValue("counter"),"Y");
}
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep>
      <con:properties>
        
        <con:property><con:name>accountAuthTokenRowsAfter</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        <con:property><con:name>accountAuthTokenRowsBefore</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0BF6FAF9C8262F12E05307991F0A2F2B</con:value></con:property>
        
        <con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        
        <con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE45CAD25EE3E6D9BE0401F0A05995033</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>deviceAuthToken</con:name><con:value>60921504</con:value></con:property><con:property><con:name>deviceAuthTokenRole</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer</con:value></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property>
        
        
        <con:property><con:name>errorStatusCode</con:name><con:value/></con:property>
        
        <con:property><con:name>expectDeviceTokenCreateResponse</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Sanjeet\GitRegression\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property>
        <con:property><con:name>nodeSavedRole</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>86722</con:value></con:property><con:property><con:name>rauthToken</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rauthToken_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rauthToken_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        
        <con:property><con:name>rauthToken_2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F9239F77C4828680E0401F0A079950CF</con:value></con:property>
      <con:property><con:name>sName</con:name><con:value>3_P1 Test Cases</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_03108 - STS GET - DeviceAuthToken JoinCode - Account in 'pending' status POST DeviceAuthToken create - P1</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0BF718D4455D62DEE05305991F0A4774</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0BF6FAF9C8252F12E05307991F0A2F2B</con:value></con:property><con:property><con:name>rauthToken_3</con:name><con:value>F8F4D466D923F2E1E0401F0A05991C52</con:value></con:property><con:property><con:name>rauthToken_4</con:name><con:value>F9239F150A98B3D9E0401F0A07995930</con:value></con:property><con:property><con:name>rauthToken_5</con:name><con:value>F8F12CE3F0A59252E0401F0A07991D28</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeviceAuthTokenCreate - DeviceString API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="82b7e6d3-7c41-4fe0-aff9-58758d2addae">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Properties" id="f73a8e59-0942-4f1e-bc6d-c87aabd3c335">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("counter",null);
tC.setPropertyValue("expectDeviceTokenCreateResponse",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("accountAuthTokenRowsBefore",null);
tC.setPropertyValue("accountAuthTokenRowsAfter",null);
tC.setPropertyValue("deviceDeviceString",null);
tC.setPropertyValue("deviceExpirationMinutes",null);
tC.setPropertyValue("deviceExpirationTime",null);
tC.setPropertyValue("deviceIssuedToUser",null);
tC.setPropertyValue("actionExpires",null);
tC.setPropertyValue("actionDeviceString",null);
tC.setPropertyValue("actionIssuedToUser",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Properties from Calling Test Case" id="fc5eaa82-3967-427f-b4ab-c8377e8100f3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("deviceDeviceString",callTC.getPropertyValue("deviceDeviceString"));
tC.setPropertyValue("deviceIssuedToUser",callTC.getPropertyValue("deviceIssuedToUser"));
tC.setPropertyValue("deviceExpirationTime",callTC.getPropertyValue("deviceExpirationTime"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("expectDeviceTokenCreateResponse",callTC.getPropertyValue("expectDeviceTokenCreateResponse"));
tC.setPropertyValue("deviceExpirationMinutes",callTC.getPropertyValue("deviceExpirationMinutes"));
tC.setPropertyValue("actionDeviceString",callTC.getPropertyValue("actionDeviceString"));
tC.setPropertyValue("actionExpires",callTC.getPropertyValue("actionExpires"));
tC.setPropertyValue("actionIssuedToUser",callTC.getPropertyValue("actionIssuedToUser"));

if (tC.getPropertyValue("expectDeviceTokenCreateResponse") == "null" ||
tC.getPropertyValue("expectDeviceTokenCreateResponse") == null) {
	tC.setPropertyValue("expectDeviceTokenCreateResponse","SUCCESS");
}
if (tC.getPropertyValue("counter") == "null" || 
	tC.getPropertyValue("counter") == null) {
	tC.setPropertyValue("counter","1");
}

if (tC.getPropertyValue("deviceDeviceString") == "null" ||
	tC.getPropertyValue("deviceDeviceString") == null) {

	def a = new generalUtils.generalUtils(log);
	def b = a.randomAlphaNumericString(27);
	tC.setPropertyValue("deviceDeviceString",b);
}
if (tC.getPropertyValue("deviceIssuedToUser") == "null" ||
	tC.getPropertyValue("deviceIssuedToUser") == null) {
	tC.setPropertyValue("deviceIssuedToUser",tC.getPropertyValue("assertionUserIdFULL"));
}

if (tC.getPropertyValue("deviceExpirationTime") == "null" ||
	tC.getPropertyValue("deviceExpirationTime") == null) {
	if (tC.getPropertyValue("deviceExpirationMinutes") == "null" ||
		tC.getPropertyValue("deviceExpirationMinutes") == null) {
		tC.setPropertyValue("deviceExpirationMinutes","1440");
		def a = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
		String b = a.deviceGetSysdate(tC.getPropertyValue("deviceExpirationMinutes").toInteger()) + ".0Z";
		b = b.replace(' ','T');
		tC.setPropertyValue("deviceExpirationTime", b);
	} else {
		def a = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
		String b = a.deviceGetSysdate(tC.getPropertyValue("deviceExpirationMinutes").toInteger()) + ".0Z";
		b = b.replace(' ','T');
		tC.setPropertyValue("deviceExpirationTime", b);
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract API Error Information" id="fe403f29-6456-490e-a967-213660ae88a8">
        <con:settings/>
        <con:config>
          <script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectDeviceTokenCreateResponse[" + tC.getPropertyValue("expectDeviceTokenCreateResponse") + "]";

switch (tC.getPropertyValue("expectDeviceTokenCreateResponse")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "ACCOUNT_NOT_VALID":
		errId = "AccountIdNotValid";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "DEVICE_EXCEED_MAX":
		errId = "AccountDeviceCountExceedMaxLimit";
		break;
	case "DEVICE_TOKEN_REQUIRED":
		errId = "DeviceAuthStringRequired";
		break;
	case "DEVICE_TOKEN_DUPLICATE":
		errId = "DeviceAuthCodeAlreadyExists";
		break;
	case "DEVICE_EXPIRE_DATE_MISSING":
		errId = "DeviceAuthCodeExpirationDateNotFound";
		break;
		DeviceAuthCodeInvalid
	case "DEVICE_AUTH_CODE_INVALID":
		errId = "DeviceAuthCodeInvalid";
		break;	
	case "DEVICE_AUTH_DATE_INVALID":
		errId = "DeviceAuthCodeExpirationDateInvalid";
		break;			
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "RENEW_EXCEED_MAX_TIME":
		errId = "StreamRenewExceedsMaximumTime";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Node's DEVICE_AUTH_TOKEN row count before API" id="297471af-1714-48ae-9fd9-55c3a6f56c06">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def x = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
def y = x.deviceAuthTokenCountByNode(tC.getPropertyValue("accountoid"));

log.info "y is $y";
tC.setPropertyValue("accountAuthTokenRowsBefore", y.toString());</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set PEM file for HTTPS Request" id="933eeee7-e530-487b-a709-4e64e1ba1c18">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - DeviceAuthTokenCreate - DeviceString");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish DeviceAuthTokenCreate Request Body" id="ddcf516c-0b83-4673-896b-36c54a3e5deb">
        <con:settings/>
        <con:config>
          <script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String coorxsd = tP.getPropertyValue("coordinatorSchema").toString();
String urnUser = tP.getPropertyValue("urnUser");
String DeviceString = tC.getPropertyValue("deviceDeviceString");
String Expires = tC.getPropertyValue("deviceExpirationTime");
String IssuedToUser = tC.getPropertyValue("deviceIssuedToUser");
String xmlDeviceString = "";
String xmlExpires = "";
String xmlIssuedToUser = "";

log.info "actionDeviceString[actionDeviceString]";

String body = """<?xml version="1.0" encoding="UTF-8"?>
<dece:DeviceAuthToken xmlns:dece="$coorxsd"
	xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md"
	xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.decellc.org/schema/2010/10/dece dece.xsd ">
	%%%DEVICESTRING%%%
	%%%EXPIRES%%%
	%%%USER%%%
</dece:DeviceAuthToken>
""";

/*
*  <dece:DeviceString>
*/
switch (tC.getPropertyValue("actionDeviceString")) {
	case "isMissing":
		xmlDeviceString = "";
	break;
	case "isNullTerminated":
		xmlDeviceString = "<dece:DeviceString/>";
	break;
	case "isNull":
		xmlDeviceString = "<dece:DeviceString></dece:DeviceString>";
	break;
	default:
		xmlDeviceString = "<dece:DeviceString>$DeviceString</dece:DeviceString>";
	break;
}
/*
*  <dece:Expires>
*/
switch (tC.getPropertyValue("actionExpires")) {
	case "isMissing":
		xmlExpires = "";
	break;
	case "isNullTerminated":
		xmlExpires = "<dece:Expires/>";
	break;
	case "isNull":
		xmlExpires = "<dece:Expires></dece:Expires>";
	break;
	case "isMissing":
	default:
		xmlExpires = "<dece:Expires>$Expires</dece:Expires>";
	break;
}
/*
*  <dece:IssuedToUser>
*/
log.info "---actionIssuedToUser[" + tC.getPropertyValue("actionIssuedToUser") + "]";
switch (tC.getPropertyValue("actionIssuedToUser")) {
	case "isMissing":
		xmlIssuedToUser = "";
	break;
	case "isNullTerminated":
		xmlIssuedToUser = "<dece:IssuedToUser/>";
	break;
	case "isNull":
		xmlIssuedToUser = "<dece:IssuedToUser></dece:IssuedToUser>";
	break;
	case "urnOnly":
		xmlIssuedToUser = "<dece:IssuedToUser>$urnUser</dece:IssuedToUser>";
	break;
	case "authtokenuser":
		xmlIssuedToUser = "<dece:IssuedToUser>$urnUser</dece:IssuedToUser>";
	break;
	case "includedeviceIssuedToUser":
		xmlIssuedToUser = "<dece:IssuedToUser>$IssuedToUser</dece:IssuedToUser>";
	break;
	default:
		xmlIssuedToUser = "";
	break;
}

log.info "xmlDeviceString[$xmlDeviceString]";
log.info "xmlExpires[$xmlExpires]";
log.info "xmlIssuedToUser[$xmlIssuedToUser]";

body = body.replaceAll("%%%DEVICESTRING%%%", xmlDeviceString);
body = body.replaceAll("%%%EXPIRES%%%", xmlExpires);
body = body.replaceAll("%%%USER%%%", xmlIssuedToUser);

log.info body;

tC.setPropertyValue("requestBody", body);]]></script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="POST - DeviceAuthTokenCreate - DeviceString" id="ea653555-3e99-4281-9469-d3eea841d011"><con:settings/><con:config service="DeviceAuthTokenCreate - DeviceString" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/DeviceAuthToken/DeviceString" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - DeviceAuthTokenCreate - DeviceString" mediaType="application/xml;charset=UTF-8" postQueryString="false" sslKeystore="RET_concat.pem" id="e7f82f51-1ca3-4bbc-8d64-936d1ede515d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>https://${#Project#targetURL}</con:endpoint><con:request>${#TestCase#requestBody}</con:request><con:originalUri>https://qa.p.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:07943FA348A779AFE05307991F0A97F1/DeviceAuthToken/DeviceString</con:originalUri><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ACCT" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep>
      <con:testStep type="groovy" name="Verify DeviceAuthTokenCreate Response Headers/Body" id="fb15601d-0b97-4807-9632-bfe9e3f34782">
        <con:settings/>
        <con:config><script>import org.xml.sax.SAXException; 
import org.xml.sax.SAXParseException; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep = tC.getTestStepByName('POST - DeviceAuthTokenCreate - DeviceString');

tC.setPropertyValue("rauthToken", null);
tC.setPropertyValue("rauthToken_" + tC.getPropertyValue("counter"), null);

boolean expectLocation = null;
boolean performBodyValidations = true;
String respstatus = null;
String respconnection = null;
String respcontentType = null;
String respcontentLength = null;
String respLocation = null;
String respbody = null;
String expectstatus = null;
String expectconnection = null;
String expectcontentType = null;
String expectcontentLength = null;
String urnError = tP.getPropertyValue("urnError").toString();
String major = tP.getPropertyValue("versionMajor").toString();
String minor = tP.getPropertyValue("versionMinor").toString();
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";

try {
	respbody = tStep.httpRequest.response.getResponseContent().toString();
} catch (e) {
	log.info "getResponseContent failure! - $e";
} finally {
	tStep.httpRequest.response.responseHeaders.each() { header, value ->
		switch (header) {
			case "Location": 
				respLocation = value[0];
				break;
			case "#status#": 
				respstatus = value[0]; 
				break;
			case "Connection": 
				respconnection = value[0]; 
				break;
			case "Content-Type": 
				respcontentType = value[0]; 
				break;
			case "Content-Length": 
				respcontentLength = value[0]; 
				break;
			case "Transfer-Encoding": 
				resphttpContentEncoding = value[0]; 
				break;
		}
	}
}

log.info "expectDeviceTokenCreateResponse -- [" + tC.getPropertyValue("expectDeviceTokenCreateResponse") + "]";

switch (tC.getPropertyValue("expectDeviceTokenCreateResponse")) {
	case "SUCCESS":
		expectstatus = "HTTP/1.1 201 Created";
		expectconnection = "Keep-Alive";
		expectcontentType = "application/xml;charset=UTF-8";
		expectcontentLength = "0";
		expectLocation = true;
		break;
	case "Node_status_inactive":
		expectstatus = "HTTP/1.1 403 Forbidden";
		expectconnection = "Keep-Alive";
		expectcontentType = "application/xml;charset=UTF-8";
		expectcontentLength = "1";
		expectLocation = false;
		performBodyValidations = false;
		break;
	case "SaxParserException":
		expectstatus = "HTTP/1.1 400 Bad Request";
		expectconnection = "Keep-Alive";
		expectcontentType = "application/xml;charset=UTF-8";
		expectcontentLength = "1";
		expectLocation = false;
		performBodyValidations = false;
		break;
	default:
		errorReasonFlag = true;
		expectstatus = tC.getPropertyValue("errorStatusCode");
		expectconnection = "Keep-Alive";
		expectLocation = false;
		expectcontentLength = "1";
		expectcontentType = "application/xml;charset=UTF-8";
		errorID     = urnError + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

/*
*  HTTP Header Checkes...
*/
log.info "----- HTTP Header Validations ------";

log.info "expectstatus[$expectstatus] - respstatus[$respstatus]";
assert expectstatus == respstatus;

log.info "expectconnection[$expectconnection] - respconnection[$respconnection]";
//assert expectconnection == respconnection;

if (expectcontentLength == "0") {
	log.info "expectcontentLength[$expectcontentLength] - respcontentLength[$respcontentLength]";
	assert respcontentLength == expectcontentLength;
} else {
	log.info "respcontentLength[$respcontentLength] - Greater than zero";
	assert respcontentLength.toInteger() > 0;
}

if (expectLocation) {
	log.info "respLocation[$respLocation] - Location Header Present in Response";
	assert respLocation.length() > 1;
} else {
	log.info "respLocation[$respLocation] - Location Header NOT Present in Response";
	assert respLocation == null;
}

log.info "expectcontentType[$expectcontentType] - respcontentType[$respcontentType]";
assert expectcontentType == respcontentType;

/*
*  HTTP Body Checkes...
*/
log.info "----- HTTP Body Validations performBodyValidations[$performBodyValidations] ------";

/*
*   -------------------- ERROR --------------------
*/
if (performBodyValidations) {
	if (tC.getPropertyValue("expectDeviceTokenCreateResponse") != "SUCCESS") {
		try {
			def myXML = new XmlSlurper().parseText(respbody);
		} catch (IOException e) {
			log.info "ERROR!  XmlSlurper.parseText IOException error -- $e";
		} catch (SAXException e) {
			log.info "ERROR!  XmlSlurper.parseText SAXException error -- $e";
		}
		finally {
			assert myXML.Error.size() == 1;
			assert myXML.Error.Reason.size() == 1;
			assert myXML.Error.OriginalRequest.size() == 1;
			assert myXML.Error.ErrorLink.size() == 1;

			String respErrorCode = myXML.Error.@ErrorID.toString();
			String respReason = myXML.Error.Reason.toString();
			String respErrorLink = myXML.Error.ErrorLink.toString();
			String expectErrorCode = urnError + tC.getPropertyValue("errorID").toString();
			String expectReason = tC.getPropertyValue("errorReason").toString();
			String expectErrorLink = errorLinkBase + tC.getPropertyValue("errorID").toString();
		
			// ErrorCode
			this.log.info "expectErrorCode [$expectErrorCode] - respErrorCode[$respErrorCode]";
			assert respErrorCode == expectErrorCode;

			// Reason
			this.log.info "expectReason [$expectReason] - respReason[$respReason]";
			assert respReason == expectReason;

			// ErrorLink
			this.log.info "expectErrorLink [$expectErrorLink] - respErrorLink[$respErrorLink]";
			assert respErrorLink == expectErrorLink;
		}
	} else {
		/*
		*   -------------------- SUCCESS --------------------
		*/
		String proto = "";
		String hostie = "";
		String rPort = "";
		String rauthToken = "";
		String rauthTokenFile = "";
		String authTokenFile = "";

		try {
			URL aURL = new URL(respLocation);

			proto = aURL.getProtocol();
			hostie = aURL.getHost();
			rPort = aURL.getPort();
			rauthtokenFile = aURL.getFile();
	
		} catch (MalformedURLException e) {
			log.info "ERROR!  Failed to parse URL - $respLocation - $e";
		} finally {
			log.info "proto[$proto] == https";
			assert proto == "https";

			log.info "hostie[$hostie] == [" + tP.getPropertyValue("targetHostq") + "]";
//			assert hostie == tP.getPropertyValue("targetHostq");

			log.info "rPort[$rPort] == [" + tP.getPropertyValue("targetPort") + "]";
//			assert rPort == tP.getPropertyValue("targetPort");

			log.info "rauthtokenFile[$rauthtokenFile]";
			if (rauthtokenFile.length() > 0) {
				int lastSlash = rauthtokenFile.lastIndexOf('/');
				rauthToken = rauthtokenFile.substring(lastSlash + 1);
			}
			log.info "rauthToken [$rauthToken]";

			tC.setPropertyValue("rauthToken", rauthToken);
			tC.setPropertyValue("rauthToken_" + tC.getPropertyValue("counter"), rauthToken);
		}
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Node's  DEVICE_AUTH_TOKEN row count after API" id="0f089044-e83e-42a4-ac06-9cdbb14ea56d">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def x = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
def y = x.deviceAuthTokenCountByNode(tC.getPropertyValue("accountoid"));

tC.setPropertyValue("accountAuthTokenRowsAfter", y.toString());</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify DEVICE_AUTH_TOKEN row" id="cc7f6834-5721-4630-88be-73eba68e7ccd">
        <con:settings/>
        <con:config><script><![CDATA[import org.xml.sax.SAXException; 
import org.xml.sax.SAXParseException; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String row = "";

def a;

if (tC.getPropertyValue("expectDeviceTokenCreateResponse") == "SUCCESS") {

	try {
		a = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
	} catch (Throwable e) {
		log.info "ERROR during dbDeviceAuthToken! -- $e";
	} finally {
		row = a.deviceAuthTokenGetRow(tC.getPropertyValue("rauthToken"));
		assert row.length() > 0;
	}

	try {
		def myXML = new XmlSlurper().parseText(row);

		String ruseroid = myXML.ResultSet.Row.USER_OID;
		String raccountoid = myXML.ResultSet.Row.ACCOUNT_OID;
		String rstatus = myXML.ResultSet.Row.STATUS;
		String rcbnode = myXML.ResultSet.Row.CREATED_BY_NODE_OID;
		String rubnode = myXML.ResultSet.Row.UPDATED_BY;
		String risgen = myXML.ResultSet.Row.IS_GENERATED;
		String rauthcode = myXML.ResultSet.Row.DEVICE_AUTH_CODE;
		String rexpiredate = myXML.ResultSet.Row.EXPIRATION_DATE;
			
		String euseroid = tC.getPropertyValue("useroid") 
		String eaccountoid = tC.getPropertyValue("accountoid") 
		String estatus = "active";
		String ecbnode = "C0CEF8E08CE1C7D6E0401F0A0599120B";
		String eubnode = "null";
		String eisgen = "N";
		String eauthcode = tC.getPropertyValue("deviceDeviceString").toString();
		String eexpiredate = tC.getPropertyValue("deviceExpirationTime").toString();

		eauthcode = eauthcode.replaceAll("&amp;","&");
		eauthcode = eauthcode.replaceAll("&lt;","<");
		eauthcode = eauthcode.replaceAll("&gt;",">");
		eauthcode = eauthcode.replaceAll("&quot;","\"");
		eauthcode = eauthcode.replaceAll("&apos;","'");

		log.info "USER_OID: Expect[$euseroid] Received[$ruseroid]";
		assert ruseroid == euseroid;
	
		log.info "ACCOUNT_OID: Expect[$eaccountoid] Received[$raccountoid]";
		assert raccountoid == eaccountoid;

		log.info "STATUS: Expect[$estatus] Received[$rstatus]";
		assert rstatus == estatus;

		log.info "CREATED_BY_NODE_OID: Expect[$ecbnode] Received[$rcbnode]";
//		assert rcbnode == ecbnode;

		log.info "UPDATED_BY: Expect[$eubnode] Received[$rubnode]";
		assert rubnode == eubnode;

		log.info "IS_GENERATED: Expect[$eisgen] Received[$risgen]";
		assert risgen == eisgen;

		float w = a.deviceCreateDateTODdiff(tC.getPropertyValue("rauthToken")).toFloat();
		log.info "CREATED_DATE - Difference between TOD less than 30 seconds - [$w]";
		assert w < 30;

		float x = a.deviceCreateDateExpirediff(tC.getPropertyValue("rauthToken")).toFloat();
		String regx = "[A-Za-z]";
		eexpiredate = eexpiredate.replace("T", " ");
		eexpiredate = eexpiredate.replace("Z", "");
		log.info "EXPIRATION_DATE - Expect[$eexpiredate] Received[$rexpiredate]";
		assert eexpiredate == rexpiredate;

		log.info "DEVICE_AUTH_CODE - Expect[$eauthcode] - Received[$rauthcode]";
		assert eauthcode == rauthcode;
	}
	catch (IOException e) {
		log.info "ERROR!  myXML IOException! -- $e";
	}
	catch (SAXException e) {
		log.info "ERROR!  myXML SAXException! -- $e";
	}
}]]></script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify DEVICE_AUTH_TOKEN row count for Account" id="4259e446-6183-440d-a59c-5bc9191d24ce">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def before = tC.getPropertyValue("accountAuthTokenRowsBefore");
def after = tC.getPropertyValue("accountAuthTokenRowsAfter");

int w = after.toInteger() - before.toInteger();

log.info "expectDeviceTokenCreateResponse[" + tC.getPropertyValue("expectDeviceTokenCreateResponse") + "]";
if (tC.getPropertyValue("expectDeviceTokenCreateResponse") == "SUCCESS") {
	assert w == 1;
} else {
	assert w == 0;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return resulting API Attributes" id="11af976e-aa74-4171-b463-4f09d8563001">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

if (tC.getPropertyValue("expectDeviceTokenCreateResponse") == "SUCCESS") {
	callTC.setPropertyValue("authTokenStatus","active");
	callTC.setPropertyValue("authTokenStatus_" + tC.getPropertyValue("counter"),"active");
	callTC.setPropertyValue("rauthToken",tC.getPropertyValue("rauthToken"));
	callTC.setPropertyValue("rauthToken_" + tC.getPropertyValue("counter"),tC.getPropertyValue("rauthToken"));
	callTC.setPropertyValue("authTokenCreatedBy",tC.getPropertyValue("nodeid"));
	callTC.setPropertyValue("authTokenCreatedBy_" + tC.getPropertyValue("counter"),tC.getPropertyValue("nodeid"));
	callTC.setPropertyValue("authTokenCreatedUser",tC.getPropertyValue("useroid"));
	callTC.setPropertyValue("authTokenCreatedUser_" + tC.getPropertyValue("counter"),tC.getPropertyValue("useroid"));
	callTC.setPropertyValue("authTokenCreatedAccount",tC.getPropertyValue("accountoid"));
	callTC.setPropertyValue("authTokenCreatedAccount_" + tC.getPropertyValue("counter"),tC.getPropertyValue("accountoid"));
	callTC.setPropertyValue("authTokenisGen","Y");
	callTC.setPropertyValue("authTokenisGen_" + tC.getPropertyValue("counter"),"Y");
	callTC.setPropertyValue("deviceDeviceString",tC.getPropertyValue("deviceDeviceString"));
	callTC.setPropertyValue("deviceDeviceString_" + tC.getPropertyValue("counter"),tC.getPropertyValue("deviceDeviceString"));
}
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>accountAuthTokenRowsAfter</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value>
        </con:property>
        <con:property>
          <con:name>accountAuthTokenRowsBefore</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E19292745A31128E05305991F0A2545</con:value>
        </con:property>
        <con:property>
          <con:name>actionDeviceString</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>actionExpires</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>actionIssuedToUser</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+I4FP0rKPM55MEzUUFiCrS0ULpAu22/rIxzQ9xJ7DR2AsyvHztASuhj2ZWQkG+uzz334WNfcBSFttvjHBJBGK1sopByN7d2tDShLkOccJeiCLgrsDvvTcauXTVddNiiVUb9jvbP0rebtm+19WUTfL1eay/1JYalbi1bXr3ZckzTRtKV8xRGlAtERUezTauhm7b8LSzTtSy33qg6rdqLVnmEhEts6VI1tT2pDe9ogRCxaxjr9bq6rlVZsjJs07SMp8l4jgOIkNa92GWUB0q6e39c9QBDGOIqZpFxYZR8LjzuzsmKIpEmsI/lfRXLNEzHkD4eJ6sfWrEXvBH1Wb68RJRRglFIfiNVnwmIgHmVXrhiCRFB9GUSlqmAddhgHVt1+kMzytTOBCoxTDjSeYCsPdYMfEiAYqg8zEYd7cd5Xcu3LhJEuc+SiJeX/40P0AxCFoOn80Nae2rnA35Sqe4FYHdEcZhyksGdGtYYYeD7bgI+H6pyn4BPNmPC5YBuuGJnHNM7We6q0Scr4OL/NOioOTuQRxSm0N3cGDHbml79LnxueS+/ny7FC+pHLw9i0skJHDvnhqK1u+XJUBZDtNuRDbOnVtrz0eP1+l6wcEpbmYGeQhPaV01vvYzubx7YX5tF6zqYtoK3bXOSwcgJfg7Brm9q8TC7HRu3r/b2gSTTRs2e/z27m63XI4zN12ceXPVHTsaFeGz/umcLbq6Rv3xpB3de6DwH5uJmWr9+vO1f9f3s8WrVS9IID3pjMomN24kzfm0b09pVr345vnnFT6TXKdI54l+2Hc78PF2+AhaHpRqDUb8ylF1C4nsxUxbi6X7u6sZKfLgAKrSu2qW0w02l3BHPlT3crc2B5diNYdtpDuqWZZsDs1EzG45jDc2efTloH0Rmx+KE4iWjPlGxlOTuxuZ7gjhyOVAPEj1jqVQ6rn2D2EcCVUZ0Jg8BoxwWTMqzvXqL1wlvmo1WFgiw2shublIsxfWOiSmdJj1fQFKW5FpJkmeASUxA6bYaay7nmgtZijeUpSK0qhmqUkilsidKZF273m4YnERxCIqoETEvDaEaB3FeGIPv/m0dYZ5bZ4NFfti+TOv026EC0scjyoGrXH6C7CJ8crfUDol8nXDzOOEDfC/1iDpXspwiIXjHpPzpfUrUeBQjIjM6UC48Tw0lVOM0oSKQlxFczHlxW0sRl8e+e2jHG6q+VdMsS/MGtJS8JRLeUCkapm3MAadSmLYL9guoUaAYZ90CBfGT4IW9TDEVAZ0LJCCSE1PJl2dc+3Pg6tofyUnfnPumKIWUpROwEZ/ZLkP5ZFGMv33VYBcrP2m+l39rlnjvHfsE6yiOzFPe+oLQlVqpG2D7xVxgJmGJ1C6WHIN/BvBZ8LKxKHLBRciBWqYCvv5SUaLU0RDGLKVi1Ndyw7FQ5jzFNgb33ekDTK7FxeOM/PvrTCf5CGCQTzpOcnx1x7rqCNDVkdjug37QW8du1Rs9W+ptu6S3jXqjKEqJXfeD+aPlqE6nM979Aw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8D091A8BC2BB4BFE0401F0A079920C1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:D8D09221E7BBAD6AE0401F0A079920BD</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>deviceDeviceString</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">john</con:value>
        </con:property>
        <con:property>
          <con:name>deviceExpirationMinutes</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1440</con:value>
        </con:property>
        <con:property>
          <con:name>deviceExpirationTime</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015-02-03T10:12:52.0Z</con:value>
        </con:property>
        <con:property>
          <con:name>deviceIssuedToUser</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:D8D09221E7BBAD6AE0401F0A079920BD</con:value>
        </con:property>
        <con:property>
          <con:name>errorID</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>errorReason</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>errorStatusCode</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectDeviceTokenCreateResponse</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>joinCode</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E192609155D113CE05305991F0A6802</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E192609155D113CE05305991F0A6802</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_10</con:name>
          <con:value>D1E6C2ED62DBA684E0401F0A05991A32</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_11</con:name>
          <con:value>A0462DB6E5A1D131E0401F0A059958C0</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_12</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_13</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_14</con:name>
          <con:value>A044A3651455B20BE0401F0A07997DC9</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_15</con:name>
          <con:value>A044A3651458B20BE0401F0A07997DC9</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_16</con:name>
          <con:value>A044A365145BB20BE0401F0A07997DC9</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_17</con:name>
          <con:value>9FCF3B9FBED31C26E0401F0A05997960</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_18</con:name>
          <con:value>9FCF3B9FBED51C26E0401F0A05997960</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_19</con:name>
          <con:value>9FCF3B9FBED71C26E0401F0A05997960</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_2</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F9239F35653541A6E0401F0A05994201</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_20</con:name>
          <con:value>9FCF328C4DEF553CE0401F0A07991E14</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_21</con:name>
          <con:value>9FCF3B9FBED91C26E0401F0A05997960</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_22</con:name>
          <con:value>9FCF3B9FBEDB1C26E0401F0A05997960</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_23</con:name>
          <con:value>9FCF3B9FBEDD1C26E0401F0A05997960</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_24</con:name>
          <con:value>9FCF3B9FBEDF1C26E0401F0A05997960</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_25</con:name>
          <con:value>9FCF6EF71A80B3F1E0401F0A079951D5</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_26</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_27</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_28</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_29</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_3</con:name>
          <con:value>F8F12CE3F0AE9252E0401F0A07991D28</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_30</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_31</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_32</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_33</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_34</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_35</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_36</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_37</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_38</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_39</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_4</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F923A0C3155A77FCE0401F0A05994203</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_40</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_41</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_42</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_43</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_44</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_45</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_46</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_47</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_48</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_49</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_5</con:name>
          <con:value>F8F12CDCE9C48AEFE0401F0A05995484</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_50</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_51</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_52</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_53</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_54</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_55</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_56</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_57</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_58</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_59</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_6</con:name>
          <con:value>D1E6B0F233980DF8E0401F0A0799786C</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_60</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_61</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_62</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_63</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_64</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_65</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_66</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_67</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_68</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_69</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_7</con:name>
          <con:value>D1E6B5B11C65B427E0401F0A07997868</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_70</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_71</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_72</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_73</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_74</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_75</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_76</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_77</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_78</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_79</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_8</con:name>
          <con:value>D1E6B90AA470BDC8E0401F0A07990972</con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken_80</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_81</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_82</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_83</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_84</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_85</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_86</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_87</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_9</con:name>
          <con:value>D1E6B90AA4A6BDC8E0401F0A07990972</con:value>
        </con:property>
        <con:property>
          <con:name>requestBody</con:name>
          <con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<dece:DeviceAuthToken xmlns:dece="http://www.decellc.org/schema/2015/03/coordinator"
	xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md"
	xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.decellc.org/schema/2010/10/dece dece.xsd ">
	<dece:DeviceString>john</dece:DeviceString>
	<dece:Expires>2015-02-03T10:12:52.0Z</dece:Expires>
	
</dece:DeviceAuthToken>
]]></con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>3_P1 Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_03106 - STS GET - DeviceAuthToken DeviceString - Standard user created DeviceAuthToken consumable - P1</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E1925F896E51120E05305991F0A2CE8</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86723</con:value>
        </con:property>
      <con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E19292745A21128E05305991F0A2545</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true" id="d512392a-5d94-46e0-b094-1dc16158fc6e"><con:settings/><con:testStep type="groovy" name="Rename Test Cases from external" id="f858016b-3fd8-4214-95cf-dd73dd5cd790"><con:settings/><con:config><script>import java.io.*;

def testCase  = testRunner.getTestCase();
def testSuite = "STS Create Tokentype unamepasswd - Portal:CS";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\raju.ganji\\Desktop\\TCs.txt"));

def newTestCaseName;

log.info "TCCount:"+TCCount;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);

	newTestCaseName = br.readLine();
	log.info "Input Test Case Name: "+newTestCaseName;
	
	//if(targetTestCase.isDisabled() == false)
	//{
		targetTestCase.setFailOnError(true);
		targetTestCase.name = newTestCaseName;	
	//}

}</script></con:config></con:testStep><con:testStep type="groovy" name="Rename Test Cases internal" id="6532f441-46ee-4aa2-9412-5e91590515f4"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

import java.io.*;

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "STS Tokentype DeviceAuthToken - Device Role";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def TCNum = 13;

//BufferedWriter bufferedWriter = null;
//bufferedWriter = new BufferedWriter(new FileWriter("c:\\DiscreteMediaLeaseCreateQuestions.txt"));

def oldTestCaseName;
def newTestCaseName;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	//if(targetTestCase.isDisabled() == false)
	//{
		//targetTestCase.setFailOnError(true);
		oldTestCaseName = TCList[i].name;
		newTestCaseName = oldTestCaseName.replace("Copy of ", "");	
		targetTestCase.name = newTestCaseName;	
		TCNum = TCNum + 1;
		log.info "Done renaming Test Case '" + oldTestCaseName + "' to '" + newTestCaseName + "'";
	//}
	//else
	//{
	//	bufferedWriter.write(targetTestCase.name);
	//	bufferedWriter.newLine();
	//}
}

//if (bufferedWriter != null) {
	//bufferedWriter.flush();
     //bufferedWriter.close();
//}

log.info 'Woohoo!'</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountDelete API" searchProperties="true" id="62bb6eb6-51d9-4964-bc78-6a0334b7e114"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9f15f6b5-ef42-4e08-a811-4daffa8e26b5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="3cd44ad3-c612-4551-b3a4-e9eedf208485"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="e060a330-b4a3-496d-8b5a-193497d53822"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountDelete" id="afb1d57d-c580-494a-88a2-97397b0ae472"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountDelete" mediaType="application/xml;charset=UTF-8" sslKeystore="7600.pem" id="7e19750b-606f-4d7d-bda7-cfa0c9074a64" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="c9e7acb2-0f55-43bc-b273-f06a9baeec8f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="2c9a4264-644a-473a-b215-a11d453e7955"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRTL}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRTL}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	userid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("NODE_USER_ID",userid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));
</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_ 18002 - STS - Verify UUID status for deletion of account - P0</con:value></con:property><con:property><con:name>sName</con:name><con:value>8_STS Create and SAML Exchange - FUNC</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D8B9BD7003BBB444E0401F0A079937CC</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130325_103751</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZk6JKE333VxjOY4fNJm4x3RHF2qioIK4vXyCUgLJJgaC//hY4OtrTM3fu99BhV1KZdTLzkJz6jszAp/sAIZikXhTWFeGt8T8bmha57W6bdIvpNVtbFja7rY7V7LR2dJdmd22aMRt1BaEMKiFKzTB9a9AkxTRJpkmzBsn2yVa/xb5SVG/TqC9ggnBovOWVbNSLwA9Rvzr2rZElYT8ykYf6oRlA1E+t/gyooz7e2TdvmBrv368oqwOTdzdN4z5BWK82tKDvW69WFBDfiac9323Un3lOaKZZAn+caaO3xg/fPM9fc+Y1ShyCJkmSIHsE3mMjz/nWeK/dnKGthLvouubNMAo9y/S9i1mCUmHqRnYd+E6UeKkb/CY0RVBkGboJC6tpUa3wW4P4eUCF7i8jPYFMkNlErkndgulwBxMYWrA+15W3xre/6+DV10jMEO2iJECf1v8NEgxP0I9iaDfRLbMbur+P+EW53r9Dq6+Elp8h7wTHJU1i04KoPk3gzitGHsLks1G9an+9QDeGQeu/tOQ78YgTwya+qIzgORCl/0+/Hnt1jbIw/Qy+z11mEy78VAdMtye0qUnUYtpulAqZ81ZBeNx8BXVv9Y/1Z6LeefXDKepNd4kya8fdLqBG6ZLfLxNv6ukfvfgjzoOefZTHU2YVDrVYktxdvFy2WUObH/OTNb+so9lxvMyC3tgUu25UE4KMZ1/aucfpErfqegIKFnSPQIc2dDq+n2/lTU6E27Panbh219L2O06hvYymHGJ00tfd+fAsKGwyXLdHTE3Y+TK6bOanibOM+YTmOevtZ06POZR5DeG5SrL8f8WSPcFMzfuCLyfFDr+eKXxXFUXILjwPzjMH5AoHHPy3B2POORzdgyf3cpIDmiYBgef8vThSwUEG1FzkXJVfLNSCv4AB54wX2NGoAX/DqbqYC/laWGjah5i7hi0vzlvZzzYXcawCVDnzrirq4kLQDVFVQXS1FaqwlYu9OlNzRVsLNRxAEIv4Ysu9FMqFZ9EKq85Yej1js81qge3SeRSMT1tD9FVelfnZUZ4pW0bQxAHQ10uLljLsexkFcVRbz7kHp0EM9wBKOYnPBBfVOOSqMafHgm5WNuPZpiryQNVQzmtVVnJNzAeL+eVnLXhO5e1ALEQDTK+1sAxeGpOb1QCZSzZUdZALTuU8FHN7cgOiamRe46+1Gom5LurzsaTqSi6CyiaIuY+29Njdyu7JYrRiYID9Y2N4TVxKIX4e6ifrzB5rpiyBbbCgLEZ3LY/1zFWUO5tuLmjrwTDaKDjMGGgix2kAAyJBmRquPwdG3IKdxF6P9uBoJ0UBdJOaSkXDw+lSkF2PmTjT8ZIVdofOVPamjGm7hOJb9J45AEWB9pByNdPW14QuhN6lPRnOV9BL1pd0zGpU2+uyNX2ZzVdC5Hfsj9V6Pnwp1pZmTKaz+XJ6KYrxcd+9+OnHhPtIZgNVcCZjCKfIeiFIU+KMrsDy64895tNOJyFbA47KASDvHUf0MIG5j/2VhB+6KmLyApXPZX7JyzMgyy+iwgmatpNcamrJi2xOjVVFtH1cpvN6pfu1Dc8JuFOkudzEa1oiNwawq2BaS5Qcbc6+DFZwo419Y5GCPF7sQooi5Vj72Km5Y6klA2wln3H4LeJqmQLm5iQekMVw0Sapo2b7g1kPzJliRh+Kietszgdnc8BNWT+8OmsD+AvjgWMKptiyphmiroLu9X0rVGXO6L4VFPE2sArBwD2rnCODE3VJI+eFIIDh1YYMQBdofRH3Ki9W/jVQqCamxWm7ctE6HHsTQ8wwabMHuuy3NPmvHCspVnvm2JEHGvjMMfHKMRHsji9KV6AQ2+ZjtMwdThaPWmcxGvRiUluNDjXuRSKc1PNbk7CbG8OXJXXOO+5eWy57iuDyL+Fu7TLblCPNi6XBwaEje/pBCNst/6yOVI2de4R/JvfwmKNRbaxQocikF4noJdkLF2y84HJhWvQ8mM6ykzI3h4g6u9vjspfvpx9tgkjkM3vpbE6atIqs9fU78nlI3o3XMUo8DtinCXzTXrNsu4dWeluW32FFqEv442imf9ZxpcWzm7tqaz8uxSBKYZg23kuvUsP1M6z0PLuPv5zXtdDlepzQIUlGkLhWqyWSLZKSSEB2ej2mw/M3sXdF8QkiH4U7rzyrlLPXj/WfAVpBH8HQhknzFGWWC1HjDxHLetWVUMcqJAoRNCIsl9si4HgAJImXSJpsiz1MDKlNA8D0qHa3Szfq4yidhJME7FKYPEvl7pNU1qHlxR4s9XQpKhBWFSjFJTmapyz1qdeT+RrCDCvupBS9fbrVZQnkBbEPS8BEENmZD19jN64KRKDrL900LVRZO22SrNTOb/P7/OxWCrzH9soNqEyGg7id8AvRz9wy+W3GFPWY8S08yGyvFDW4rmniWVckz49+0qXkyZ0rZUo3zPetnw1PYYnPGd1Psk+edWf8/U6EJTUWXe+3hhzN1+NrdjplVQs6paBMcHiCIsg2MYNWhlXh2YgOMCTuIYi/EuR31J9Ovtuf8WWpG85S/DYHmDD1avkXt7EZROVtTMGEL/72qvd0JK5bCov0Kxvv40tbifiP9zqrb5X7sHmKf/IosX+264tYD+fgPMvx5YVOuSrl9/k3rLAiHNbDIyxKHoN/FeCrw5+N9yLfsaSYTdsshb9/Ui9n01vDtKwoC1NFaFSGx3lZ4UzPMez/3PRLmEoA/7jRFOi3N5qVOprhyRWYjfte7983N72KLhbEXsirsLw1Cnw5x4eHzsN8/gHw6xHNcX8a0c+ZvP9i/tXyUNPP78P7Pw==</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D3DF7BAE6D161DAEE0401F0A05993EE0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8B9BD7003BBB444E0401F0A079937CC</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateULC_nodes" searchProperties="true" id="cd40b3ab-6913-4d7e-89a6-de3ee7939c2c"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1e725ea4-5ab5-4198-b3ca-fdc8ed1eae6b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="d00e6bae-51d2-4183-948a-ccd98070405a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));

if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:UserLinkConsent");
}else{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:UserLinkConsent", "UTF-8"));
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="26ef2103-5bce-4422-9c48-a8636ffec9ff"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_ULC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ULC" id="4cba94d4-8307-4cd2-9703-fa14ec153f4d"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ULC" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml;charset=UTF-8"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>

<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7602</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>

<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7603</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>

<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7604</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="792bf73d-1fc2-4492-9e10-6b03ca0aa35b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_ULC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                               contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="ab61c96d-4255-44be-985d-17517449c8ea">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfbkqLKEn33Kwzn0bC5ibeY7ojiImKLCuL15QQWJaAISoGgX78LHG3t6Z49+zx02JVUZq3MXCSrfmJr77MdgDGKYi8Myqr0Wvkf30R83eZRrQ4Zpla36E3NWrON2qbV3LRZG67tNlspqxgnSA1wbAXxa4WlGa5GczWWNxm6U293aPqFa7RXlfIMRZiEJlte6Eo52/sB7hTHvlaSKOiEFvZwJ7D2CHdi2JkAbdAhOzvWDVPl7ecVZXFg9ObG8aFDUfDFRhD5PnyB4Z76ST3t+WnjzsRzAitOIvTrTBu/Vn75pmn6knIvYeRQLE3TFN2myB4be86Pylvp5oxsNdiE17VoBWHgQcv3LlYOSkOxG9pl4Dth5MXu/pvQDMXQeegaymANMvXgR4X6OKBA95eRnkBG2Kph12JuwQy0QREKICpPDfW18uPvOnj1NSMrwJsw2uNP6/8GCQUn5IcHZNfwLbMbur+P+EW53n4i2FED6CfYO6FhTpODBREujyO08bKBhwn5bFwu2l/O8I1hCP6XlvykHnES2NQXlZE8B+H4/+nXY6+uUWaWn6C38UrSqWDcG8nn9XSihLgnXS7Z1FjX1dcCwuPmK6h7q3+tPxP1zqtfTj3a2U8nTqi2GL4BxWYUpiBR8FZJdlGPmUm7YNg4XS6c7u4kVtyOqvUWUt05VM79dXhsu6B1nk/E9ozbbLel6pjjpqA1gbvM2gRznFCzSRXGYyVdDAPZ2qheuA3n/RbHZ/p4wKirPlflhrsGVBdO60R1OecgYUrZL3BjWgrhZqoK+plNVzE+sntuQb9+5PSYQ57XOzoXSeb/L3i6LVmxdV+I+aTYkNczRm+aqkrJRRTBeeKAVBWAQ/62YCg4u6O785R2SgtA17tAEgV/Kw80sFMAM5UFVxNnMy0TL6AvOMMZcTRLwF8JmiGnUrqUZrrek1PXtJXZea34yeoiDzWAC2fR1WRDnkmGKWsaCK+2TJPWSrbVJlqq6kupRAJIcna42Eo7RkrmQVbltQnPLid8slrMiL17HuyHp7Up+5qoKeLkqEzUNSfpch8YyzlkuwnxvQz2h7C0nAoPTv0D2gLUTWlyJrho5i7VzCk7lAyrsJnPNk1V+pqOU1EvslJKctqfTS8ftRAFTbT3ciabYHytBTTF7pBeLfrYmvOBZoBUcgrndzm1Rzcgmk6nJfFaq4GcGrIxHXY1Q01lUNgkOfXxmh26a8U9QU7P+ibYPjZG1OV5NyDPA+MEz/yxZCldsN7PGMgZLvR4z1qEqbNqpZK+7L+HK5WEGQJdFgQdEEA0yFMj9RfAQJjxo4PXZj002HTDPXKjksaE77vTJaNbHjdyxsM5L212zbHijTnLdinVh+yW2wFVRfY74+qWbSwpQwq8S2P0Pl0gL1pe4iGvMw2vxZeMeTJdSKHftHuL5fS9mi2hbo7Gk+l8fMmy4XHbuvhxbyT0oklfk5zREKExhlWKtrqC2ZJ4cdnbEj5tDBrxJeBoAgDK1nFkjxBY6G2vJOwZmkzICzQxVcS5qEyAolRlVZB0fdN1mTFUZsmUGWqqbPukTOflwvBLK1GQSKdoa746LNkuvTKBXQTT63LX0ad8tb9AK33om7MYpIfZJmAYWjnovY2WOlDLGWCr6UQgb5FQSlQwtUaHPp29zxo0c9Rtvz9pgymXTdhdNnKd1XnnrHakKcuHV2dpAn9mPnBMJRSbl3RTNjTQur5vmaZOOcOH++yw3sNMMknPCufQFGSjq9PTTJLA+9WGTcBmeHmRt5ooF/4lkGkWocVpvXDxMhh6I1NOCGmTB7ps1yz9rxzLKVZ65thRBDr4zDH5yjEZbI5VtSUxmG+IBzxPHUGRj3pzNui3D7S+GOxKQrVLObHn10dBKzXfq3PmnDbdrT6ft1XJFavBZuly61igrQvUUX/XVDxjJwWNun/WBprOTz3KP9NbdEzxoDRUmUDm4kuXakdJVdivvD0Z13V2uh9PkpM6td4xc3bXx3k73Y57DYqKlDN/aa5OencRwuX1O/J5SN6N1zFKPQ7Ypwl8016TZL1FML4t8++wKpW75ONoxX/WcbnFs2ubYmvnkItBHKMgrrzlXrmG6yRE6Xl2h3w5r2upJchNiWFEgWbaLZqX6TrNdGlAN9ttVmaYm9i7ovgEUQyDjZeflcvZ68f6zwDhvoNRYKOodgoT6CJc+UPEvF5lNTCICgkDjMyQyOVuA9RlVmozdLdNt5p0V+IaYrMtyBIttbkWqJSHYTwKRhHYxCh6lsrck1Q2EPQOHsr1dC4qMFEVOCYlOVqnJPaZl5P1EqCEKO4oF70dtt7iKeztDz7KAVP70E589HJwD0WBKHz9ZWsWxIW12aDpQu18m9/nZ7dSkD22l2/AeTICIu1Ev4n+Voe/ZfJ9xo3HjG/hQWJ7uaghdY0jD16RPD/6oEvOkztX8pRumO9bPxuewlKfM7qfZJ88eGf8/U5EJDURXW+3hhytl+NLcjolRQuauaCMSHiKoegGNUEwIarwbIY7FFD3ENRfCfI76k8n3+3P+JLYDSYxeZv3hDDlYvkXt7EJwvltTCWEz/72qvd0JKlbjLL4K5vok0tbjviP9zrYgfk+Yh6TnzSM7I92fRHr4RySZz6+vMDJV7n8Pn/DChiSsB4ZYWH0GPyrAF8d/my8F/mOJSZsWicx+v5JOZ9NrxULwjAJYlWqFIbHeVngjM8H1PnY9FuYQgD/utFk+NsbzUIbTMjk2luV+17v3zfXvIIuEBEv7BVYXisZuZyTwwPnYT7/AvjliAZy/U8j+jmTt9/Mv1seavr5fXj7Bw==</con:value></con:property><con:property><con:name>tName</con:name><con:value>WithRightsLockerDataGet and MUC</con:value></con:property><con:property><con:name>sName</con:name><con:value>ISC_TestCases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value>close</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D14403889CD0F3ECE0401F0A07992161/User/urn:dece:userid:org:dece:D14403889CDFF3ECE0401F0A07992161/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>policyId</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D8BE7D11CAE49805E0401F0A07992E11/User/urn:dece:userid:org:dece:D8BE7D11CB019805E0401F0A07992E11/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3DD6C150D6CC4DCE0401F0A0799470D</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AUserLinkConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMUC_nodes" searchProperties="true" id="7044159d-b473-4095-8031-f599211b7f3c"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ac3675dc-d8f3-498d-a8dc-253f06d506b2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="a8085ec9-865c-43c7-98dc-d48848e042ec"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));

if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:ManageUserConsent");
}else{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageUserConsent", "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="a27d3ea0-f453-4665-b91a-0f848b1f8809"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MUC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_MUC" id="0c185912-c0d1-402a-9611-e3ee5a6b1be8"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_MUC" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml;charset=UTF-8"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>

   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7602</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>

   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7603</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>

   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7604</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="5fbf7510-4487-4f33-9f37-0cc3944cfeaa">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_MUC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                              contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="267e8a22-c879-4164-8225-7064adbcf656">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfbkqLKEn33Kwzn0bC5ibeY7ojiImKLCuL15QQWJaAISoGgX78LHG3t6Z49+zx02JVUZq3MXCSrfmJr77MdgDGKYi8Myqr0Wvkf30R83eZRrQ4Zpla36E3NWrON2qbV3LRZG67tNlspqxgnSA1wbAXxa4WlGa5GczWWNxm6U293aPqFa7RXlfIMRZiEJlte6Eo52/sB7hTHvlaSKOiEFvZwJ7D2CHdi2JkAbdAhOzvWDVPl7ecVZXFg9ObG8aFDUfDFRhD5PnyB4Z76ST3t+WnjzsRzAitOIvTrTBu/Vn75pmn6knIvYeRQLE3TFN2myB4be86Pylvp5oxsNdiE17VoBWHgQcv3LlYOSkOxG9pl4Dth5MXu/pvQDMXQeegaymANMvXgR4X6OKBA95eRnkBG2Kph12JuwQy0QREKICpPDfW18uPvOnj1NSMrwJsw2uNP6/8GCQUn5IcHZNfwLbMbur+P+EW53n4i2FED6CfYO6FhTpODBREujyO08bKBhwn5bFwu2l/O8I1hCP6XlvykHnES2NQXlZE8B+H4/+nXY6+uUWaWn6C38UrSqWDcG8nn9XSihLgnXS7Z1FjX1dcCwuPmK6h7q3+tPxP1zqtfTj3a2U8nTqi2GL4BxWYUpiBR8FZJdlGPmUm7YNg4XS6c7u4kVtyOqvUWUt05VM79dXhsu6B1nk/E9ozbbLel6pjjpqA1gbvM2gRznFCzSRXGYyVdDAPZ2qheuA3n/RbHZ/p4wKirPlflhrsGVBdO60R1OecgYUrZL3BjWgrhZqoK+plNVzE+sntuQb9+5PSYQ57XOzoXSeb/L3i6LVmxdV+I+aTYkNczRm+aqkrJRRTBeeKAVBWAQ/62YCg4u6O785R2SgtA17tAEgV/Kw80sFMAM5UFVxNnMy0TL6AvOMMZcTRLwF8JmiGnUrqUZrrek1PXtJXZea34yeoiDzWAC2fR1WRDnkmGKWsaCK+2TJPWSrbVJlqq6kupRAJIcna42Eo7RkrmQVbltQnPLid8slrMiL17HuyHp7Up+5qoKeLkqEzUNSfpch8YyzlkuwnxvQz2h7C0nAoPTv0D2gLUTWlyJrho5i7VzCk7lAyrsJnPNk1V+pqOU1EvslJKctqfTS8ftRAFTbT3ciabYHytBTTF7pBeLfrYmvOBZoBUcgrndzm1Rzcgmk6nJfFaq4GcGrIxHXY1Q01lUNgkOfXxmh26a8U9QU7P+ibYPjZG1OV5NyDPA+MEz/yxZCldsN7PGMgZLvR4z1qEqbNqpZK+7L+HK5WEGQJdFgQdEEA0yFMj9RfAQJjxo4PXZj002HTDPXKjksaE77vTJaNbHjdyxsM5L212zbHijTnLdinVh+yW2wFVRfY74+qWbSwpQwq8S2P0Pl0gL1pe4iGvMw2vxZeMeTJdSKHftHuL5fS9mi2hbo7Gk+l8fMmy4XHbuvhxbyT0oklfk5zREKExhlWKtrqC2ZJ4cdnbEj5tDBrxJeBoAgDK1nFkjxBY6G2vJOwZmkzICzQxVcS5qEyAolRlVZB0fdN1mTFUZsmUGWqqbPukTOflwvBLK1GQSKdoa746LNkuvTKBXQTT63LX0ad8tb9AK33om7MYpIfZJmAYWjnovY2WOlDLGWCr6UQgb5FQSlQwtUaHPp29zxo0c9Rtvz9pgymXTdhdNnKd1XnnrHakKcuHV2dpAn9mPnBMJRSbl3RTNjTQur5vmaZOOcOH++yw3sNMMknPCufQFGSjq9PTTJLA+9WGTcBmeHmRt5ooF/4lkGkWocVpvXDxMhh6I1NOCGmTB7ps1yz9rxzLKVZ65thRBDr4zDH5yjEZbI5VtSUxmG+IBzxPHUGRj3pzNui3D7S+GOxKQrVLObHn10dBKzXfq3PmnDbdrT6ft1XJFavBZuly61igrQvUUX/XVDxjJwWNun/WBprOTz3KP9NbdEzxoDRUmUDm4kuXakdJVdivvD0Z13V2uh9PkpM6td4xc3bXx3k73Y57DYqKlDN/aa5OencRwuX1O/J5SN6N1zFKPQ7Ypwl8016TZL1FML4t8++wKpW75ONoxX/WcbnFs2ubYmvnkItBHKMgrrzlXrmG6yRE6Xl2h3w5r2upJchNiWFEgWbaLZqX6TrNdGlAN9ttVmaYm9i7ovgEUQyDjZeflcvZ68f6zwDhvoNRYKOodgoT6CJc+UPEvF5lNTCICgkDjMyQyOVuA9RlVmozdLdNt5p0V+IaYrMtyBIttbkWqJSHYTwKRhHYxCh6lsrck1Q2EPQOHsr1dC4qMFEVOCYlOVqnJPaZl5P1EqCEKO4oF70dtt7iKeztDz7KAVP70E589HJwD0WBKHz9ZWsWxIW12aDpQu18m9/nZ7dSkD22l2/AeTICIu1Ev4n+Voe/ZfJ9xo3HjG/hQWJ7uaghdY0jD16RPD/6oEvOkztX8pRumO9bPxuewlKfM7qfZJ88eGf8/U5EJDURXW+3hhytl+NLcjolRQuauaCMSHiKoegGNUEwIarwbIY7FFD3ENRfCfI76k8n3+3P+JLYDSYxeZv3hDDlYvkXt7EJwvltTCWEz/72qvd0JKlbjLL4K5vok0tbjviP9zrYgfk+Yh6TnzSM7I92fRHr4RySZz6+vMDJV7n8Pn/DChiSsB4ZYWH0GPyrAF8d/my8F/mOJSZsWicx+v5JOZ9NrxULwjAJYlWqFIbHeVngjM8H1PnY9FuYQgD/utFk+NsbzUIbTMjk2luV+17v3zfXvIIuEBEv7BVYXisZuZyTwwPnYT7/AvjliAZy/U8j+jmTt9/Mv1seavr5fXj7Bw==</con:value></con:property><con:property><con:name>tName</con:name><con:value>WithRightsLockerDataGet and MUC</con:value></con:property><con:property><con:name>sName</con:name><con:value>ISC_TestCases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D8BE7D11CAE49805E0401F0A07992E11/User/urn:dece:userid:org:dece:D8BE7D11CB019805E0401F0A07992E11/Policy/urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageUserConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS GET API - Invoked to the Coordinator URL" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="1b0c7056-ff98-4639-9f62-9b240f1791cc">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="2b4eb2e6-133c-43e5-a91a-aff02e762383">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("actionAuthHeader",null);
tC.setPropertyValue("deviceAuthHeaderValue",null);
tC.setPropertyValue("actionDeviceAuthHeader",null);
tC.setPropertyValue("actionIgnoreAuthTokenStatus",null);
tC.setPropertyValue("actionSkipNodeUserCheck",null);
tC.setPropertyValue("actionSkipNodeIDCheck",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("isDeviceFlag",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("authHeaderString",null);
tC.setPropertyValue("affilnodeid",null);
tC.setPropertyValue("assertCreatingNodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsIgnoreAssertTimesFlag",null);
tC.setPropertyValue("stsExpectedAffiliationListSize",null);
tC.setPropertyValue("expectErrTypeSTSGet",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("authHeaderValue",null);
tC.setPropertyValue("deviceAuthHeaderValue",null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("rauthToken",null);
tC.setPropertyValue("stsaudienceIgnoreAll",null);
tC.setPropertyValue("stsaudience",null);
tC.setPropertyValue("stsaudienceIgnoreNodes",null);
tC.setPropertyValue("nodeidFULL",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("contentLocation",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="7e0164e1-db2f-4848-8db6-7554d74fe0e6">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("actionDeviceAuthHeader",callTC.getPropertyValue("actionDeviceAuthHeader"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertCreatingNodeid",callTC.getPropertyValue("assertCreatingNodeid"));
tC.setPropertyValue("affilnodeid",callTC.getPropertyValue("affilnodeid"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("expectNodeUserRowCount",callTC.getPropertyValue("expectNodeUserRowCount"));
tC.setPropertyValue("expectCreateExpireHoursDiff",callTC.getPropertyValue("expectCreateExpireHoursDiff"));
tC.setPropertyValue("expectErrTypeSTSGet",callTC.getPropertyValue("expectErrTypeSTSGet"));
tC.setPropertyValue("stsIgnoreAssertTimesFlag",callTC.getPropertyValue("stsIgnoreAssertTimesFlag"));
tC.setPropertyValue("authHeaderString",callTC.getPropertyValue("authHeaderString"));
tC.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
tC.setPropertyValue("deviceAuthToken",callTC.getPropertyValue("deviceAuthToken"));
tC.setPropertyValue("rauthToken",callTC.getPropertyValue("rauthToken"));
tC.setPropertyValue("actionAuthHeader",callTC.getPropertyValue("actionAuthHeader"));
tC.setPropertyValue("actionIgnoreAuthTokenStatus",callTC.getPropertyValue("actionIgnoreAuthTokenStatus"));
tC.setPropertyValue("actionSkipNodeUserCheck",callTC.getPropertyValue("actionSkipNodeUserCheck"));
tC.setPropertyValue("actionSkipNodeIDCheck",callTC.getPropertyValue("actionSkipNodeIDCheck"));
tC.setPropertyValue("stsaudience",callTC.getPropertyValue("stsaudience"));
tC.setPropertyValue("stsaudienceIgnoreAll",callTC.getPropertyValue("stsaudienceIgnoreAll"));
tC.setPropertyValue("stsaudienceIgnoreNodes",callTC.getPropertyValue("stsaudienceIgnoreNodes"));
tC.setPropertyValue("isDeviceFlag",callTC.getPropertyValue("isDeviceFlag"));
tC.setPropertyValue("username",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("password",callTC.getPropertyValue("UserPassword"));
tC.setPropertyValue("contentLocation",callTC.getPropertyValue("contentLocation"));

if (tC.getPropertyValue("expectErrTypeSTSGet") == null ||
	tC.getPropertyValue("expectErrTypeSTSGet") == "") {
		tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
}
if (tC.getPropertyValue("stsIgnoreAssertTimesFlag") == null ||
	tC.getPropertyValue("stsIgnoreAssertTimesFlag") == "") {
		tC.setPropertyValue("stsIgnoreAssertTimesFlag","false");
}
if (tC.getPropertyValue("tokentype") == null ||
	tC.getPropertyValue("tokentype") == "") {
		tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
}

if (tC.getPropertyValue("isDeviceFlag") == null ||
	tC.getPropertyValue("isDeviceFlag") == 'null') {
		tC.setPropertyValue("isDeviceFlag","false");
}

if (tC.getPropertyValue("actionSkipNodeIDCheck") == null ||
	tC.getPropertyValue("actionSkipNodeIDCheck") == 'null') {
		tC.setPropertyValue("actionSkipNodeIDCheck","false");
}
if (tC.getPropertyValue("nodeid") != 'null' || tC.getPropertyValue("nodeid") != null) {
		tC.setPropertyValue("nodeidFULL", tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
}

/*
*  ONLY pull the current TC assertion of the tokentype is saml2 (needed for the exchange)
*/
if (tC.getPropertyValue("tokentype") == tP.getPropertyValue("urntokenType_saml")) {
	log.info "Extracting assertion";
	tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
}

/*
*  Construct the expected Affiliation list
*/
def affiliationList = [tC.getPropertyValue("nodeidFULL").toString()];
def ignoreNodesList = [];
def stsaudienceList = [];
	
if (tC.getPropertyValue("stsaudienceIgnoreAll").toString() == "false") {
	if (tC.getPropertyValue("stsaudience") != 'null') {
		stsaudienceList = tC.getPropertyValue("stsaudience").toString().tokenize(",");

		/*
		*  Now remove the ingnorenodes 
		*/
		if (tC.getPropertyValue("stsaudienceIgnoreNodes") != 'null') {
			ignoreNodesList = tC.getPropertyValue("stsaudienceIgnoreNodes").toString().tokenize(",");
			ignoreNodesList.each {
				if (stsaudienceList.contains(it)) {
					stsaudienceList = stsaudienceList.minus(it);
				}
			}
		}
	}

	if (stsaudienceList.size() >= 1) {
		log.info "DEBUG: Adding stsaudienceList";
		affiliationList.addAll(stsaudienceList);
	}
} 

tC.setPropertyValue("stsExpectedAffiliationListSize",affiliationList.size().toString());

log.info "DEBUG: affiliationList size is " + affiliationList.size();
affiliationList.each {
	log.info "DEBUG afflicationList Member: " + it;
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish attributes based on NodeID" id="d4933345-34b4-4df1-b7e2-2e97f59941cf">
        <con:settings/>
        <con:config>
          <script>import java.util.StringTokenizer; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodeid = tC.getPropertyValue("nodeid").toString();

/*
*  See if we are a device
*/
switch (nodeid) {
	case tP.getPropertyValue("nodeIdDEV").toString():
		urlEndPoint = "device";
		tC.setPropertyValue("isDeviceFlag","true");
		break;
	default:
		urlEndPoint = "coordinator";
		tC.setPropertyValue("isDeviceFlag","false");
		break;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Construct URL" id="8d9dd7b1-070e-4270-9521-8a6d54b9306f">
        <con:settings/>
        <con:config><script>import java.util.StringTokenizer; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

Boolean appliedFirstNode = false;
String url = "";
String anode = "";
String urlEndPoint = "";
String nodeid = tC.getPropertyValue("nodeid").toString();

log.info "nodeid[$nodeid]";

if (tC.getPropertyValue("isDeviceFlag") == "true") {
	urlEndPoint = "device";
}

log.info "urlEndPoint: " + urlEndPoint;

/*
*  Set the endpoint
*/
switch (urlEndPoint) {
	case "device":
			url = "https://" + tP.getPropertyValue("targetDeviceDomain").toString() + 
			"/rest/" + tP.getPropertyValue("versionMajor").toString() +
			"/" + tP.getPropertyValue("versionMinor").toString() +
			"/SecurityToken/Assertion/" +
			tC.getPropertyValue("assertionUUID").toString();
		break;
	case "coordinator":
	default:
		url = "https://" + tP.getPropertyValue("targetHostq").toString() + 
			":" + tP.getPropertyValue("targetPortq").toString() + 
			"/rest/" + tP.getPropertyValue("versionMajor").toString() +
			"/" + tP.getPropertyValue("versionMinor").toString() +
			"/SecurityToken/Assertion/" +
			tC.getPropertyValue("assertionUUID").toString();
	break;
}

log.info "url[$url]";

testRunner.testCase.getTestStepByName('GET - STS').httpRequest.setEndpoint(url);

</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Construct Authorization Header if necessary" id="68462762-77b8-41c4-bc12-e24986a66d29">
        <con:settings/>
        <con:config><script>import org.apache.commons.codec.binary.Base64;
import com.eviware.soapui.support.types.StringToStringMap;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//Initialize header Key-Value type object
def headers = new StringToStringMap() 

//Initialize Rest Request object
def restRequest = testRunner.testCase.getTestStepByName("GET - STS").testRequest;

//Declare variable to store "Authorization" and "x-dece-application-authorization" header values
String authorization = null;
String xDeceApplicationAuthorization = null;

log.info("isDeviceFlag  : '" + tC.getPropertyValue("isDeviceFlag").toString() + "'");

if (tC.getPropertyValue("tokentype") == tP.getPropertyValue("urntokenType_deviceauthtoken")) {
                log.info("Request is on Device host and its an STS-Get call, So both headers 'Authorization' and 'x-dece-application-authorization' will be required.")
                log.info("Uuid type is DeviceAuthToken so 'Authorization' header will contain DeviceAuthToken value");

                if (tC.getPropertyValue("actionAuthHeader") == "EXCLUDE") {
                                log.info("Exclude 'Authorization' header enabled, so setting the value of authorization to null");
                                authorization = null;
                                log.info("Authorization = '" + authorization + "'");
                }else{
                                log.info("Exclude 'Authorization' header disabled, so setting the value of authorization to DeviceAuthToken");
                                authorization = "DeviceCode value=\"" + tC.getPropertyValue("deviceAuthToken") + "\"";
                                log.info("Authorization = '" + authorization + "'");
                                tC.setPropertyValue("authHeaderValue",authorization);             
                }

                if (tC.getPropertyValue("actionDeviceAuthHeader") == "EXCLUDE") {
                                log.info("Exclude 'x-dece-application-authorization' header enabled, so setting the value of xDeceApplicationAuthorization to null");                              
                                xDeceApplicationAuthorization = null;
                                log.info("x-dece-application-authorization = '" + xDeceApplicationAuthorization + "'");
                }else{
                                log.info("Exclude 'x-dece-application-authorization' header disabled, so setting the value of xDeceApplicationAuthorization from project property 'XDeceApplicationAuthorization'");                            
                                tC.setPropertyValue("deviceAuthHeaderValue",tP.getPropertyValue("XDeceApplicationAuthorization"));
                                xDeceApplicationAuthorization = tP.getPropertyValue("XDeceApplicationAuthorization");
                                log.info("x-dece-application-authorization = '" + xDeceApplicationAuthorization + "'");
                }

                //Set the values in HashMap
                headers.put("Authorization",authorization);
                headers.put("x-dece-ApplicationAuthorization",xDeceApplicationAuthorization);
}else if(tC.getPropertyValue("isDeviceFlag").toString() == "true"){
                log.info("Request is on Device host and it is an STS-Get call, So both headers 'Authorization' and 'x-dece-application-authorization' will be required.")
                log.info("Uuid type is not DeviceAuthToken so 'Authorization' header will contain BasicAuth value");

                if (tC.getPropertyValue("actionAuthHeader") == "EXCLUDE") {
                                log.info("Exclude 'Authorization' header enabled, so setting the value of authorization to null");
                                authorization = null;
                                log.info("Authorization = '" + authorization + "'");
                }else{
                                log.info("Exclude 'Authorization' header disabled, so setting the value of authorization to BasicAuth");
                                String combo = tC.getPropertyValue("username").toString() + ":" + tC.getPropertyValue("password").toString();
                                authorization = "Basic " + combo.bytes.encodeBase64().toString()
                                                                log.info("Authorization = '" + authorization + "'");
                                tC.setPropertyValue("authHeaderValue",authorization);             
                }              
                if (tC.getPropertyValue("actionDeviceAuthHeader") == "EXCLUDE") {
                                log.info("Exclude 'x-dece-application-authorization' header enabled, so setting the value of xDeceApplicationAuthorization to null");                              
                                xDeceApplicationAuthorization = null;
                                log.info("x-dece-application-authorization = '" + xDeceApplicationAuthorization + "'");
                }else{
                                log.info("Exclude 'x-dece-application-authorization' header disabled, so setting the value of xDeceApplicationAuthorization from project property 'XDeceApplicationAuthorization'");                            
                                tC.setPropertyValue("deviceAuthHeaderValue",tP.getPropertyValue("XDeceApplicationAuthorization"));
                                xDeceApplicationAuthorization = tP.getPropertyValue("XDeceApplicationAuthorization");
                                log.info("x-dece-application-authorization = '" + xDeceApplicationAuthorization + "'");
                }
                //Set the values in HashMap
                headers.put("Authorization",authorization);
                headers.put("x-dece-ApplicationAuthorization",xDeceApplicationAuthorization);
}else{
                log.info("Request is on qhost so no headers required");
}

log.info("Set header - '" + headers.values() + "'");
restRequest.setRequestHeaders(headers);
log.info("Headers set successfully")















/*
 * --------By Sanjeet ---------
 * Below is the old code
 * Once the  above code starts showing all pass results, we can remove below one
 */




//import org.apache.commons.codec.binary.Base64;
//import com.eviware.soapui.support.types.StringToStringsMap 
//def tC = testRunner.getTestCase();
//def tS = tC.getTestSuite();
//def tP = tS.getProject();
//
//
//def httpRequestStep = testRunner.testCase.getTestStepByName("GET - STS").getHttpRequest();
//def headers = new StringToStringsMap();
//
///*
//*  Device auth token requires the authorization header be
//*  included with the device code
//*/
//
//log.info("STSGet Tokentype : '" + tC.getPropertyValue("tokentype") + "'");
//if (tC.getPropertyValue("tokentype") == tP.getPropertyValue("urntokenType_deviceauthtoken")) {
//	String authHeaderValue = "DeviceCode value=\"" + tC.getPropertyValue("deviceAuthToken") + "\"";
//
//	tC.setPropertyValue("authHeaderValue",authHeaderValue);
//
//	log.info "Property authHeaderValue is - " + tC.getPropertyValue("authHeaderValue");
//	
//	tC.setPropertyValue("deviceAuthHeaderValue","dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6");
//
//	headers.put("Authorization",authHeaderValue); 
// 	 /*
//	  * Disable below step by Sanjeet
//	  * Since added a script in setup suite to get this from DB.So commenting from here.
//	  */
// 	 //headers.put("x-dece-ApplicationAuthorization","dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6")
// 	 headers.put("x-dece-ApplicationAuthorization",tP.getPropertyValue("XDeceApplicationAuthorization"));
// 	 httpRequestStep.setRequestHeaders(headers);
// 	 
//} else if (tC.getPropertyValue("isDeviceFlag").toString() == "true") {
//	/*
//	*  construct the basic auth header
//	*/
//	String combo = tC.getPropertyValue("username").toString() + ":" + tC.getPropertyValue("password").toString();
//	String authHeaderValue = "Basic " + combo.bytes.encodeBase64().toString()
//
//	log.info "combo[$combo] - authHeaderValue[$authHeaderValue]";
//
//	tC.setPropertyValue("authHeaderValue",authHeaderValue);
//
//	tC.setPropertyValue("deviceAuthHeaderValue","dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6");
// 	/*
//	  * Disable below step by Sanjeet
//	  * Since added a script in setup suite to get this from DB.So commenting from here.
//	*/
// 	 //headers.put("x-dece-ApplicationAuthorization","dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6")
// 	 headers.put("x-dece-ApplicationAuthorization",tP.getPropertyValue("XDeceApplicationAuthorization"));
// 	 httpRequestStep.setRequestHeaders(headers);	
//}else{
//	log.info("Not a request to devicde host, hence removing device headers");
//	httpRequestStep.setRequestHeaders(headers);	
//}
//
//
//	if (tC.getPropertyValue("actionAuthHeader") == "EXCLUDE") {
//	tC.setPropertyValue("authHeaderValue",null);
//}
//
//	if (tC.getPropertyValue("actionDeviceAuthHeader") == "EXCLUDE") {
//	tC.setPropertyValue("deviceAuthHeaderValue",null);
//}
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish PEM" id="a03383f3-9072-43fc-b6bc-9557162ceb32">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - STS");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Obtain current sysdate from DB" id="983b491d-dca0-4798-93fa-daecfb983287">
        <con:settings/>
        <con:config>
          <script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("currentDBTOD",null);

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
String sqlResultXML = "";
String cDate = "";
String tod = "";

try {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
	sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
	log.info "sqlResultXML[$sqlResultXML]";

	if (sqlResultXML.length() > 0) {
		def myXML = new XmlSlurper().parseText(sqlResultXML);
		tod = myXML.ResultSet.Row.TOD;
		log.info "tod[$tod]";
	}

}
catch (Throwable e) {
	log.info "sql[$sql]";
	log.info "dbUtils request failed! - " + e;
	assert 1 == 2;
}
finally {
	if (tod.length() > 0) {
		tC.setPropertyValue("currentDBTOD", tod);
	}
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="GET - STS" id="bf7931e1-8d86-4e3e-9ff8-84db869eb832"><con:settings/><con:config service="STSGet" resourcePath="" methodName="STS GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STS" mediaType="application/xml;charset=UTF-8" sslKeystore="DEV_concat.pem" accept="" id="0a2fc78e-ce81-44c9-9cff-19fe71eef60e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3RzYXBpXzEwN18xNDIzMTExNjc2MzE0OnRlc3Rpbmc="/>
  &lt;con:entry key="x-dece-ApplicationAuthorization" value="dclient-basic rhnfsoccpd9obsxolvts:8F127F82AC1FEB7FBCF3489BB5A44326C393C48"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>https://qa.d.uvvu.com:7001/rest/2015/02/SecurityToken/Assertion/_cbc84f00-7093-447c-8461-e3b73bdcfd37</con:endpoint><con:request/><con:originalUri>https://qa.pc.uvvutest.biz/rest/1/11/SecurityToken/Assertion/_c0c39e64-c826-4893-a68a-84c127a2be28</con:originalUri><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="assertionUUID" value="${#TestCase#assertionUUID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set node_oid value based on nodeid" id="f7056bef-8c16-4393-97d6-31caadef8070"><con:settings/><con:config><script>

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def nodeoidGet = new dbUtils.dbNode(log,testProject.getPropertyValue("targetSystem"));

String nodeId = testCase.getPropertyValue("nodeid");
def node_oid = null;
switch (nodeId) {
case "dece:cs":
	node_oid = "40";
break;
case "coord:cs":
	node_oid = "41";
break;
case "RET":
	node_oid = "C0CEF8E08CE1C7D6E0401F0A0599120B";
break;
case "RET_CS_1":
	node_oid = "CCE44AF42FD7063BE0401F0A07991776";
break;
case "LLASP":
	node_oid = "C0CEF8E08CD7C7D6E0401F0A0599120B";
break;
case "LLASP_CS_1":
	node_oid = "CCE44AF42FCD063BE0401F0A07991776";
break;
case "DLASP":
	node_oid = "C0CEF8E08CDCC7D6E0401F0A0599120B";
break;
case "DLASP_CS_1":
	node_oid = "CCE44AF42FD2063BE0401F0A07991776";
break;
case "DSP":
	node_oid = "C0CEF8E08CD2C7D6E0401F0A0599120B";
break;
case "DSP_CS_1":
	node_oid = "CCE44AF42FC8063BE0401F0A07991776";
break;
case "DEV_CS_1":
	node_oid = "CE8BFD2E2DD09BAEE0401F0A07990E42";
break;
case "COO_CS_1":
	node_oid = "CCE44AF42FC3063BE0401F0A07991776";
break;
case "CON_CS_1":
	node_oid = "CCE44AF42FBE063BE0401F0A07991776";
break;
default:
	node_oid = nodeoidGet.nodeoidGetFromNodeId(nodeId);
}

testCase.setPropertyValue("node_oid",""+node_oid);
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="963f52aa-fbe8-4f7a-89d2-73748f5481d2">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('GET - STS');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");
String XMLbody = "";

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();

rawResp = new ByteArrayOutputStream();

rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;
log.info "PATTY " + strVal.indexOf("&lt;?xml version=\"1.0\" ")

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
if (startAssert > 0) {
	XMLbody  = strVal.substring(startAssert, strVal.length());
}

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Extract Key Elements from &lt;Assertion> Body" id="b983d727-8b8a-4c4f-a72f-a6f22e1edae5">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");

int lastColon = 0;
int lastSlash = 0;

if (expectErrType == "" || expectErrType == "SUCCESS") {
	tC.setPropertyValue("assertionAccountIdFULL",null);
	tC.setPropertyValue("assertionUserIdFULL",null);
	tC.setPropertyValue("assertionNotBefore",null);
	tC.setPropertyValue("assertionNotOnOrAfter",null);
	tC.setPropertyValue("assertionAudienceRestriction",null);
	tC.setPropertyValue("assertionUserId",null);
	tC.setPropertyValue("assertionAccountId",null);

	
	
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			def accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			def userId    = myXML."saml2:Subject"."saml2:NameID";
			def NotBefore = myXML."saml2:Conditions".@NotBefore.text();
			def NotOnOrAfter = myXML."saml2:Conditions".@NotOnOrAfter.text();
			def AudienceRestriction = myXML."saml2:Conditions".AudienceRestriction;
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";
			this.log.info "NotBefore [$NotBefore]";
			this.log.info "NotOnOrAfter [$NotOnOrAfter]";
			this.log.info "AudienceRestriction [$AudienceRestriction]";
						
			tC.setPropertyValue("assertionAccountIdFULL",accountId.toString());
			tC.setPropertyValue("assertionUserIdFULL",userId.toString());
			tC.setPropertyValue("assertionNotBefore",NotBefore.toString());
			tC.setPropertyValue("assertionNotOnOrAfter",NotOnOrAfter.toString());
			tC.setPropertyValue("assertionAudienceRestriction",NotBefore.toString());
			tC.setPropertyValue("assertionAccountId",accountId.toString().substring(accountId.toString().lastIndexOf(':') + 1).toString());
			tC.setPropertyValue("assertionUserId",userId.toString().substring(userId.toString().lastIndexOf(':') + 1).toString());
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers" id="9da94241-d54d-4452-b953-94775dcba4aa">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def url = tP.getPropertyValue("targetURL");
def assertionUUID = tC.getPropertyValue("assertionUUID");

def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

this.log.info "expectErrType is $expectErrType";
 
if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
	tC.setPropertyValue("expectErrTypeSTSGet",expectErrType);
}


switch (expectErrType) {

	
	case "Forbidden":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "application/xml;charset=UTF-8";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "Forbidden";
		errorReason = "Unknown Error";
		break;
	case "FORBIDDEN_INVALID_ROLE":
		errorReason = "forbidden";
		errorID = "urn:dece:errorid:org:dece:securitycontext:Forbidden:1120";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
		break;
	case "FORBIDDEN_INVALID_USER_STATUS":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "application/xml;charset=UTF-8";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:InvalidUserStatus";
		errorReason = "User does not have proper status to build token";
		
		break;
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "application/xml;charset=UTF-8";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "Forbidden";
		errorReason = "forbidden";
	break;
	case "FORBIDDEN:1119":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "application/xml;charset=UTF-8";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1119";
		errorReason = "The request is not authorized.";
	break;
	case "UNAUTHORIZED":
		expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		expectHTTPcontenttype = "text/xml";
		contentLengthZero = true;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = false;
		
	break;
	case "token_rejected":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "text/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:"+expectErrType;
		errorReason = "The request is not authorized.";
		break;
		
	case "unauthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorReason = "The request is not authorized.";
		break;
		
	case "INVALID_ASSERTION":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "text/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:InvalidAssertion";
		errorReason = "The request is not authorized.";
		break;
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml;charset=UTF-8";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	// assert tC.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	

if (doContentTypeHeader) {
	//assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Locationaccount
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

this.log.info "expectErrType [$expectErrType]";

if (dobodyXML) {
	if (XMLbody.length() > 0) {
			def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", ds: "http://www.w3.org/2000/09/xmldsig#");
		if (expectErrType == "SUCCESS") {
			// Verify response sizes...
			this.log.info "Assertion size: " + myXML.size();
			
			assert myXML.size() == 1;
			assert myXML."ds:Signature".size()    == 1;
			assert myXML."ds:Signature"."ds:SignedInfo".size()   == 1;
			assert myXML."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
			assert myXML."ds:Signature"."ds:SignatureValue".size()  == 1;
			//assert myXML."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
			assert myXML."saml2:Subject"."saml2:NameID".size() == 1;
			assert myXML."saml2:Advice"."saml2:AssertionURIRef".size() == 1;
			
			def samlRespNodeAccount = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
				def ExpeAssertionURIRef = "$url/rest/$major/$minor/SecurityToken/Assertion/$assertionUUID";
				
				this.log.info "AssertionURIRef: Expect[$ExpeAssertionURIRef] Received: " + myXML."saml2:Advice"."saml2:AssertionURIRef".toString();
				//assert myXML.Error.Reason.toString() == ExpeAssertionURIRef;
		} else {
			// ErrorCode
			this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
			assert myXML.Error.@ErrorID.toString() == errorID;
	
			// ErrorReason
			
			this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
			assert myXML.Error.Reason.toString() == errorReason;
			
		
			// ErrorLink
			/*
			this.log.info "ErrorLink: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
			assert myXML.Error.ErrorLink.toString() == errorLink;
			*/
		}
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Validate NODE_ACCOUNT row entry" disabled="true" id="09a19472-43e9-44c3-9f10-3365032a5e4d">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));

String acct = tC.getPropertyValue("assertionAccountId").toString();
String nodeUser = tC.getPropertyValue("assertionUserId").toString();
String node_oid = tC.getPropertyValue("node_oid").toString();
String resultsDB = "";

/*
*  If this is a device, adjust the nodeid
*/
if (tC.getPropertyValue("isDeviceFlag").toString() == "true") {
	node_oid = tP.getPropertyValue("nodeDeviceDefault").toString();
}


String sql = """SELECT 
to_char(rawtohex(ACCOUNT_OID)) ACCOUNT_OID,
to_char(rawtohex(NODE_OID)) NODE_OID 
FROM NODE_ACCOUNT where NODE_ACCOUNT_ID = hextoraw('$acct') 
and NODE_OID = hextoraw('$node_oid')""";

try {
	log.info "sql is [$sql]";
	resultsDB = dbUtils.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
} catch (Throwable e) {
	log.info "ERROR - SelectFromDB issue! - $e";
} finally {
	log.info "results is [$resultsDB]";
}

try {
	def myXML = new XmlSlurper().parseText(resultsDB);

	String dbAccountOID = myXML.ResultSet.Row[0].ACCOUNT_OID;
	String dbNodeOID = myXML.ResultSet.Row[0].NODE_OID;
}
catch(Throwable e) {
	log.info "ERROR - XmlSlurper Problem - $e";
}
finally {
	if (tC.getPropertyValue("expectErrTypeSTSGet").toString() == "SUCCESS") {
		log.info "Assert DB ACCOUNT_OID [$dbAccountOID] == [" + tC.getPropertyValue("accountOID") + "]";
		assert dbAccountOID == tC.getPropertyValue("accountOID").toString();

		if (tC.getPropertyValue("actionSkipNodeIDCheck").toString() == "false") {
			log.info "Assert DB nodeid [$dbNodeOID] == [$node_oid]";
			assert dbNodeOID == node_oid;
		}
	} 
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Validate DEVICE_AUTH_TOKEN.STATUS deleted if tokentype:DeviceAuthToken" id="df151e22-3054-45c0-b6c9-8cda61b1870f">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbutils;

String expectstatus = "deleted";
String dbstatus = "";

if (tC.getPropertyValue("tokentype") == tP.getPropertyValue("urntokenType_deviceauthtoken") &amp;&amp;
	tC.getPropertyValue("actionIgnoreAuthTokenStatus") != "true") {
	if (tC.getPropertyValue("expectErrTypeSTSGet") != "SUCCESS") {
		expectstatus = "active";
	}
	try {
		dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
		dbstatus = dbUtils.deviceAuthTokenGetStatus(tC.getPropertyValue("rauthToken"));	
	}
	catch (Throwable e) {
		log.info "ERROR - dbUtils.deviceAuthTokenGetStatus - $e";
	}
	finally {
		log.info "Asserting dbstatus[$dbstatus] == expectstatus[$expectstatus] - " + 
			tC.getPropertyValue("rauthToken").toString();
		assert dbstatus == expectstatus  ;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Fetch NODE_USER_SAML_ASSERTION Row" id="67d141ca-0bc2-4ba3-aad8-45c810f64aa8">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;
def myXML;

tC.setPropertyValue("assertionROW",null);

String arow = "";

if (tC.getPropertyValue("expectErrTypeSTSGet") == "SUCCESS") {
	try {
		dbUtils = new dbUtils.dbSAMLAssertion(log,tP.getPropertyValue("targetSystem"));
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbSAMLAssertion - $e";
		assert 1 == 2;
	}
	finally {
		String uuid = tC.getPropertyValue("assertionUUID").toString();
		
		/*
		*  Assert we have a location header value..
		*/
		assert uuid.length() > 1;

		log.info "uuid [$uuid]";

		/*
		*  There should only be one NODE_USER_SAML_ASSERTION row 
		*  with this UUID.
		*/
		arow = dbUtils.samlGetAssertionRow(uuid);

		assert arow.length() > 0;

		log.info "arow is [$arow]";

		tC.setPropertyValue("assertionROW",arow);
	}

	/*
	*  Parse the XML
	*/
	try {
		myXML = new XmlSlurper().parseText(arow);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify only one row was returned..
		*/
		log.info "ASSERT - Row Size is 1";
		assert myXML.ResultSet.Row.size() == 1;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Validate NODE_USER_SAML_ASSERTION.NODE_USER_SAML_ASSERTION matches response body" id="3babf0f6-225e-40ea-94f3-c5287d13e703">
        <con:settings/>
        <con:config><script>import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def dbUtils;
def dbUtilsUser;

tC.setPropertyValue("computedAssertionXML",null);
tC.setPropertyValue("dbassertionNodeaccountid",null);
tC.setPropertyValue("dbassertionNodeuserid",null);

String assertionXML = "";
String arow = tC.getPropertyValue("assertionROW");

if (tC.getPropertyValue("expectErrTypeSTSGet") == "SUCCESS") {
	/*
	*  Make sure we have data in arow
	*/
	assert arow.length() > 1;
	
	try {
		myXML = new XmlSlurper().parseText(arow);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify only one row was returned..
		*/
		log.info "ASSERT - Row Size is 1";
		assert myXML.ResultSet.Row.size() == 1;

		String assertRaw = myXML.ResultSet.Row.NODE_USER_SAML_ASSERTION_PART1.text() +
				myXML.ResultSet.Row.NODE_USER_SAML_ASSERTION_PART2.text();

		/*
		*  Base64 decode the assertion clob
		*/
		byte [] xmlBytes = Base64.decode(assertRaw);
		assertionXML = new String(xmlBytes, "UTF8");

		assert assertionXML.length() > 1;

		tC.setPropertyValue("computedAssertionXML", assertionXML);
	}
	/*
	*  Now parse the assertion XML
	*/
	try {
		myXML = new XmlSlurper().parseText(assertionXML).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", saml2p: "urn:oasis:names:tc:SAML:2.0:protocol");
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		/*
		*  Verify the assertion body matches that contained in
		*  NODE_USER_SAML_ASSERTION table
		*/
		log.info "Asserting STSGET Body XML matches NODE_USER_SAML_ASSERTION.NODE_USER_SAML_ASSERTION";
		assert tC.getPropertyValue("computedAssertionXML").toString() == tC.getPropertyValue("computedAssertionXML").toString()
		
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Validate DEVICE_AUTH_TOKEN row" id="f3c07ef4-998d-43d9-8659-f0a474503534">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbutils;

String expectstatus = "deleted";
String dbstatus = "";

if (tC.getPropertyValue("tokentype") == tP.getPropertyValue("urntokenType_deviceauthtoken") &amp;&amp;
	tC.getPropertyValue("actionIgnoreAuthTokenStatus") != "true") {
	if (tC.getPropertyValue("expectErrTypeSTSGet") != "SUCCESS") {
		expectstatus = "active";
	}
	try {
		dbUtils = new dbUtils.dbDeviceAuthToken(log,tP.getPropertyValue("targetSystem"));
		dbstatus = dbUtils.deviceAuthTokenGetStatus(tC.getPropertyValue("rauthToken"));	
	}
	catch (Throwable e) {
		log.info "ERROR - dbUtils.deviceAuthTokenGetStatus - $e";
	}
	finally {
		log.info "Asserting dbstatus[$dbstatus] == expectstatus[$expectstatus] - " + 
			tC.getPropertyValue("rauthToken").toString();
		assert dbstatus == expectstatus  ;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="49b43330-23ef-4112-bc57-53b23a71336f">
        <con:settings/>
        <con:config>
          <script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
//import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	
int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/
byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("assert", base64encodeStr);
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Return extracted Properties back to calling Test Case" id="5777325d-9b2e-4a84-81e6-5884a43a7980">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assert",tC.getPropertyValue("assert"));
callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));

String acctID = tC.getPropertyValue("assertionAccountIdFULL");
String userID = tC.getPropertyValue("assertionUserIdFULL");

if (acctID != null &amp;&amp; acctID.length() > 0) {
	callTC.setPropertyValue("assertionAccountId",acctID.substring(acctID.lastIndexOf(":")+1,acctID.length()));
	callTC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue("assertionAccountIdFULL"));
} else {
	callTC.setPropertyValue("assertionAccountId","ERROR");
}
if (userID != null &amp;&amp; userID.length() > 0) {
	callTC.setPropertyValue("assertionUserId",userID.substring(userID.lastIndexOf(":")+1,userID.length()));
	callTC.setPropertyValue("assertionUserIdFULL",tC.getPropertyValue("assertionUserIdFULL"));
} else {
	callTC.setPropertyValue("assertionUserId","ERROR");
}

if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
	log.info "$userID"
	callTC.setPropertyValue("NODE_ACCOUNT_ID",acctID.substring(acctID.lastIndexOf(":")+1,acctID.length()));
	callTC.setPropertyValue("NODE_USER_ID",userID.substring(userID.lastIndexOf(":")+1,userID.length()))
	callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("assertionAccountIdFULL"));
	callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("assertionUserIdFULL"));
}else{
	
	callTC.setPropertyValue("NODE_ACCOUNT_ID",acctID.substring(acctID.lastIndexOf(":")+1,acctID.length()));
	callTC.setPropertyValue("NODE_USER_ID",userID.substring(userID.lastIndexOf(":")+1,userID.length()))
	callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",URLEncoder.encode(tC.getPropertyValue("assertionAccountIdFULL"), "UTF-8"));
	callTC.setPropertyValue("NODE_USER_ID_FULL",URLEncoder.encode(tC.getPropertyValue("assertionUserIdFULL"), "UTF-8"));
}
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Save the Request &amp; Response with TC Name" disabled="true" id="953a3edc-ebcb-492c-9f04-7fd9c3232c11"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep = tC.getTestStepByName('GET - STS');

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def myP = testRunner.testCase.testSuite.project.name;

def tName = context.expand( '${#TestCase#tName}' );

def logFile = new File(projectPath +"\\"+myP +"\\"+tName+".txt")
logFile.append("Request:\n");

def req= context.expand('${GET - STS#Request}')
log.info messageExchange.getRawRequestData();
logFile.append(req);
log.info "Request: "+req;

logFile.append("\n\nResponse:\n");
res = new ByteArrayOutputStream();
def res = tStep.httpRequest.response.getRawResponseData();;
 strVal  = new String(res);

logFile.append(strVal);
log.info "Response: "+strVal;</script></con:config></con:testStep><con:properties>
        
        
        <con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E50900C2777539DE05307991F0AD82B</con:value></con:property><con:property><con:name>actionAuthHeader</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionDeviceAuthHeader</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>actionIgnoreAuthTokenStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionSkipNodeIDCheck</con:name><con:value>false</con:value></con:property><con:property><con:name>actionSkipNodeUserCheck</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>affilnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZRc6o6EP4rDn28g0SFUpjqDGrtVWvbI/ac1pc7MQRNC8EmQfT8+pOgUrS213ufnF03337J7n7LNYdxVHc9zjETJKGVdRxR7ubeppYy6iaQE+5SGGPuCuT63ujOrVeBC/dHtEq/29T+QTN0ZYYA6DZwGrpp2ki/Mi9rOm7M7MYsQGHQsGUo5ynuUy4gFU2tDmqWDuo6sCbAdM1L15LINphqlZ+YcYktQ6pA25Fa86a2EGLpGkaWZdWsUU3Y3KgDUDOeR3c+WuAYaq3r7Y3yRKy1i0fVACMcRaiKkti4Ng5irgPu+mROoUgZ3uUKvsoFDOAYMibgZH6hFWdx0KdhkpsdSBNKEIzIb6jeZ4TFIgkqXjRPGBGL+MtL1IAC1vEa6ahm0gvNOKR2JtABQ8ahzhewtsMa4xAzTBGuPI37Te3ivKrlRycMUh4mLOaH5n/jg+kKR8kSBzrfX2tH7XzAEy/VusbI7VMUpZys8L1q1iVEmO+qidH5UJVHhkOyviNcNuiaK3ZGmd6RuX2NLpljLv5PgUrF2YL8hFGKW/d48TqbvIjVxiB+Fi575nDs/52hZ/jUzAmUg3NHUdqtedSURRNtT0C7c5tO149PmTm8/3G3nv1waGp6DfH8l/1IX7wwbPuXqMOHt9PBYrl5owPM+7NFshkMnd+1aRRl8XieWv2ogbzXYPI+QWlmv70nL1467FiTaTsDbLWa457xBgN/9cvrWSSrj5Kru4jNBrexI6YbP72h4Sh7v2cNtiLemo1WaArrg3F3MH56CH7Z8abT3vSbxXVK/A99+5n309krRmJvqjbodys9WSUovhcz5SGBHuah7lKJDxeYCq2lTintcFMpdyRwZQ23NrixgOe1O91GvQMcz7sBVgNYjlPrAc9q1xt7kdmyOKLYSWhIVC4ludu2+Z4git0Zhgwz7RukLhSwcp+IB/rAvFBgdqiwdllhVVt/CXT83z6njAmICuAqTRvL98InVNzcq/gxl/pptTf2+F6wIqgoZ7GUpFbJ7s61nMtpeofVoJquVqkSc9dWU8zkLBiKhwHqho9RKudvM0neMDUKFOMssdvf/Dh54T+kmIoF9QUUOJbdUsnNM7abj7nabn0a4PW5q/MgpSyEwGtxyteJ5GZWjL9d3shFKk66H+VPlrCguOAprFIeeU+53AShc2Upodt8DImajmJCUCJhiRzRhJXBTwGcSn7oLB654CIEI7NU4K//qajZa2oQoSSlot/VckdZD3KeYrPE7kfQJ5hccopvEPLvHyE6yVsAYfnlwkmOr1aJyyUgnZc0ZZf0WFZ6badnO45n1bxuWVacK+ujPw/YtT65P3tK73Tc460/</con:value></con:property><con:property><con:name>assertCreatingNodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value>_cbc84f00-7093-447c-8461-e3b73bdcfd37</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E50FB9F799A51ADE05305991F0A9857</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0E50FB9F799A51ADE05305991F0A9857</con:value></con:property><con:property><con:name>assertionAudienceRestriction</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015-02-05T04:46:42.070Z</con:value></con:property><con:property><con:name>assertionNotBefore</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015-02-05T04:46:42.070Z</con:value></con:property><con:property><con:name>assertionNotOnOrAfter</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2025-02-05T04:46:52.070Z</con:value></con:property><con:property><con:name>assertionROW</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <NODE_USER_SAML_ASSERTION_OID>0E50FB97F97A0855E05307991F0A873C</NODE_USER_SAML_ASSERTION_OID>
      <NODE_OID>0200</NODE_OID>
      <NODE_USER_SAML_ASSERTION_PART1>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOlJlc3BvbnNlIHhtbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiBDb25zZW50PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDp1bnNwZWNpZmllZCIgSUQ9Il8xYjE3NzM5YS0xYWFhLTQ5ZDgtOGU0Ni04MzE2ZjBhMmRhNDIiIElzc3VlSW5zdGFudD0iMjAxNS0wMi0wNVQwNDo0Njo1Mi4wNzBaIiBWZXJzaW9uPSIyLjAiPjxzYW1sMjpJc3N1ZXIgeG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPmh0dHA6Ly9jLmRlY2VsbGMuY29tLzwvc2FtbDI6SXNzdWVyPjxzYW1sMnA6U3RhdHVzPjxzYW1sMnA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8+PC9zYW1sMnA6U3RhdHVzPjxzYW1sMjpBc3NlcnRpb24geG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIElEPSJfY2JjODRmMDAtNzA5My00NDdjLTg0NjEtZTNiNzNiZGNmZDM3IiBJc3N1ZUluc3RhbnQ9IjIwMTUtMDItMDVUMDQ6NDY6NTIuMDcwWiIgVmVyc2lvbj0iMi4wIiB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiPjxzYW1sMjpJc3N1ZXI+aHR0cDovL2MuZGVjZWxsYy5jb20vPC9zYW1sMjpJc3N1ZXI+PGRzOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+PGRzOlNpZ25lZEluZm8+PGRzOkNhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48ZHM6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIi8+PGRzOlJlZmVyZW5jZSBVUkk9IiNfY2JjODRmMDAtNzA5My00NDdjLTg0NjEtZTNiNzNiZGNmZDM3Ij48ZHM6VHJhbnNmb3Jtcz48ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiLz48ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIj48ZWM6SW5jbHVzaXZlTmFtZXNwYWNlcyB4bWxuczplYz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIiBQcmVmaXhMaXN0PSJ4cyIvPjwvZHM6VHJhbnNmb3JtPjwvZHM6VHJhbnNmb3Jtcz48ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiLz48ZHM6RGlnZXN0VmFsdWU+TmVoamJUWXR2eS9pU3dmcEY0S1JTSHdjWGFVPTwvZHM6RGlnZXN0VmFsdWU+PC9kczpSZWZlcmVuY2U+PC9kczpTaWduZWRJbmZvPjxkczpTaWduYXR1cmVWYWx1ZT5hN0NHdVp4UFV3NEtOUUx4YlE5bnU0QTN0WCs3UG5ZQWZmQlM2Y0NzS0daSmhweWtuSmVzSWJob3lKSzl6MVpsbHdtUmd1NUlsM2NBamRUcVRjdXc3a3FvWUF1S0M1VFpCdzBydnZnZUYva2FkU3ZXQUY1aXcyTW84TGxyYkpHbTl0WnlTdUVuZk13cU5yM3J2aUF4ck12Y1phMkpSREpSVU9kVzdteUNCeUk9PC9kczpTaWduYXR1cmVWYWx1ZT48L2RzOlNpZ25hdHVyZT48c2FtbDI6U3ViamVjdD48c2FtbDI6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOm5hbWVpZC1mb3JtYXQ6cGVyc2lzdGVudCI+dXJuOmRlY2U6dXNlcmlkOm9yZzpkZWNlOjBFNTBBQUJDRDMyQzA5QUFFMDUzMDU5OTFGMEE1QjIzPC9zYW1sMjpOYW1lSUQ+PHNhbWwyOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgTm90T25PckFmdGVyPSIyMDE1LTAyLTA1VDA3OjQ2OjUyLjA3MFoiLz48L3NhbWwyOlN1YmplY3RDb25maXJtYXRpb24+PC9zYW1sMjpTdWJqZWN0PjxzYW1sMjpDb25kaXRpb25zIE5vdEJlZm9yZT0iMjAxNS0wMi0wNVQwNDo0Njo0Mi4wNzBaIiBOb3RPbk9yQWZ0ZXI9IjIwMjUtMDItMDVUMDQ6NDY6NTIuMDcwWiIvPjxzYW1sMjpBZHZpY2U+PHNhbWwyOkFzc2VydGlvblVSSVJlZj5odHRwczovL3FhLmQudXZ2dS5jb206NzAwMS9yZXN0LzIwMTUvMDIvU2VjdXJpdHlUb2tlbi9Bc3NlcnRpb24vX2NiYzg0ZjAwLTcwOTMtNDQ3Yy04NDYxLWUzYjczYmRjZmQzNzwvc2FtbDI6QXNzZXJ0aW9uVVJJUmVmPjwvc2FtbDI6QWR2aWNlPjxzYW1sMjpBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMTUtMDItMDVUMDQ6NDY6NTIuMDcwWiIgU2Vzc2lvbkluZGV4PSJfY2JjODRmMDAtNzA5My00NDdjLTg0NjEtZTNiNzNiZGNmZDM3Ij48c2FtbDI6QXV0aG5Db250ZXh0PjxzYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YWM6Y2xhc3NlczpQYXNzd29yZDwvc2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY+PHNhbWwyOkF1dGhlbnRpY2F0aW5nQXV0aG9yaXR5PnVybjpkZWNlOm9yZzpvcmc6ZGVjZTpjb29yZGluYXRvcjwvc2FtbDI6QXV0aGVudGljYXRpbmdBdXRob3JpdHk+PC9zYW1sMjpBdXRobkNvbnRleHQ+PC9zYW1sMjpBdXRoblN0YXRlbWVudD48c2FtbDI6QXR0cmlidXRlU3RhdGVtZW50PjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0iYWNjb3VudElEIiBOYW1lRm9ybWF0PSJ1cm46ZGVjZTp0eXBlOmFjY291bnRJRCI+PHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJ4czpzdHJpbmciPnVybjpkZWNlOmFjY291bnRpZDpvcmc6ZGVjZTowRTUwRkI5Rjc5OUE1MUFERTA1MzA1OTkxRjBBOTg1Nzwvc2FtbDI6QXR0cmlidXRlVmFsdWU+PC9zYW1sMjpBdHRyaWJ1dGU+PC9zYW1sMjpBdHRy</NODE_USER_SAML_ASSERTION_PART1>
      <NODE_USER_SAML_ASSERTION_PART2>aWJ1dGVTdGF0ZW1lbnQ+PC9zYW1sMjpBc3NlcnRpb24+PC9zYW1sMnA6UmVzcG9uc2U+</NODE_USER_SAML_ASSERTION_PART2>
      <NODE_USER_SAML_UUID>_cbc84f00-7093-447c-8461-e3b73bdcfd37</NODE_USER_SAML_UUID>
      <CREATED_DATE>2015-02-05 04:46:52.0</CREATED_DATE>
      <NODE_USER_ID>0E50FB97F9790855E05307991F0A873C</NODE_USER_ID>
      <NODE_ACCOUNT_ID>0E50FB7DC13151AFE05305991F0AD434</NODE_ACCOUNT_ID>
      <STATUS>active</STATUS>
      <EXPIRATION_DATE>2025-02-05 04:46:52.0</EXPIRATION_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E50AABCD32C09AAE05305991F0A5B23</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0E50AABCD32C09AAE05305991F0A5B23</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_cbc84f00-7093-447c-8461-e3b73bdcfd37</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authHeaderString</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authHeaderValue</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Basic c3RzYXBpXzEwN18xNDIzMTExNjc2MzE0OnRlc3Rpbmc=</con:value></con:property>
        
        
        
        
        
        
        <con:property><con:name>computedAssertionXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:unspecified" ID="_1b17739a-1aaa-49d8-8e46-8316f0a2da42" IssueInstant="2015-02-05T04:46:52.070Z" Version="2.0"><saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">http://c.decellc.com/</saml2:Issuer><saml2p:Status><saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/></saml2p:Status><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_cbc84f00-7093-447c-8461-e3b73bdcfd37" IssueInstant="2015-02-05T04:46:52.070Z" Version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><ds:Reference URI="#_cbc84f00-7093-447c-8461-e3b73bdcfd37"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="xs"/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><ds:DigestValue>NehjbTYtvy/iSwfpF4KRSHwcXaU=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>a7CGuZxPUw4KNQLxbQ9nu4A3tX+7PnYAffBS6cCsKGZJhpyknJesIbhoyJK9z1ZllwmRgu5Il3cAjdTqTcuw7kqoYAuKC5TZBw0rvvgeF/kadSvWAF5iw2Mo8LlrbJGm9tZySuEnfMwqNr3rviAxrMvcZa2JRDJRUOdW7myCByI=</ds:SignatureValue></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:0E50AABCD32C09AAE05305991F0A5B23</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"><saml2:SubjectConfirmationData NotOnOrAfter="2015-02-05T07:46:52.070Z"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2015-02-05T04:46:42.070Z" NotOnOrAfter="2025-02-05T04:46:52.070Z"/><saml2:Advice><saml2:AssertionURIRef>https://qa.d.uvvu.com:7001/rest/2015/02/SecurityToken/Assertion/_cbc84f00-7093-447c-8461-e3b73bdcfd37</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2015-02-05T04:46:52.070Z" SessionIndex="_cbc84f00-7093-447c-8461-e3b73bdcfd37"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:0E50FB9F799A51ADE05305991F0A9857</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></saml2p:Response>]]></con:value></con:property><con:property><con:name>connection</con:name><con:value>close</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>2605</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentType</con:name><con:value>text/xml;charset=UTF-8</con:value></con:property><con:property><con:name>currentDBTOD</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015/02/05 04:47:28</con:value></con:property>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>dbassertionNodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dbassertionNodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dbCreateExpireHoursDiff</con:name><con:value>723</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <DIFFERENCE_HOURS>720</DIFFERENCE_HOURS>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>deviceAuthHeaderValue</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dclient-basic rhnfsoccpd9obsxolvts:8F127F82AC1FEB7FBCF3489BB5A44326C393C48</con:value></con:property><con:property><con:name>deviceAuthToken</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectCreateExpireHoursDiff</con:name><con:value>87648</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectNodeUserRowCount</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>isDeviceFlag</con:name><con:value>true</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DEV_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DEV</con:value></con:property><con:property><con:name>nodeidFULL</con:name><con:value>urn:dece:org:org:dece:DEV</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>C0CEF8E08CCDC7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>86717</con:value></con:property><con:property><con:name>rauthToken</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>3_P1 Test Cases</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>stsaudience</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsaudienceIgnoreAll</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsaudienceIgnoreNodes</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsExpectedAffiliationListSize</con:name><con:value>1</con:value></con:property><con:property><con:name>stsIgnoreAssertTimesFlag</con:name><con:value>false</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_32001 - STS GET BasicAuth - Device - Username in 'active' status - P1</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>stsapi_107_1423111676314</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E5090105CB253ABE05307991F0A93E8</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_cbc84f00-7093-447c-8461-e3b73bdcfd37" IssueInstant="2015-02-05T04:46:52.070Z" Version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><ds:Reference URI="#_cbc84f00-7093-447c-8461-e3b73bdcfd37"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="xs"/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><ds:DigestValue>NehjbTYtvy/iSwfpF4KRSHwcXaU=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>a7CGuZxPUw4KNQLxbQ9nu4A3tX+7PnYAffBS6cCsKGZJhpyknJesIbhoyJK9z1ZllwmRgu5Il3cAjdTqTcuw7kqoYAuKC5TZBw0rvvgeF/kadSvWAF5iw2Mo8LlrbJGm9tZySuEnfMwqNr3rviAxrMvcZa2JRDJRUOdW7myCByI=</ds:SignatureValue></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:0E50AABCD32C09AAE05305991F0A5B23</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"><saml2:SubjectConfirmationData NotOnOrAfter="2015-02-05T07:46:52.070Z"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2015-02-05T04:46:42.070Z" NotOnOrAfter="2025-02-05T04:46:52.070Z"/><saml2:Advice><saml2:AssertionURIRef>https://qa.d.uvvu.com:7001/rest/2015/02/SecurityToken/Assertion/_cbc84f00-7093-447c-8461-e3b73bdcfd37</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2015-02-05T04:46:52.070Z" SessionIndex="_cbc84f00-7093-447c-8461-e3b73bdcfd37"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:0E50FB9F799A51ADE05305991F0A9857</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>3286f6f3-da45-4264-9ee2-bc03b02c4214</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateULCatOrg" searchProperties="true" id="50c9722f-f790-4a2b-a49c-73000a48d120"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="68ca0b16-387e-4ed3-aa8c-6d5d75678e9b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("orgid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="9637c5b7-9a40-4448-bbde-f1f09405aff0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));

if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:UserLinkConsent");
}else{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:UserLinkConsent", "UTF-8"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="f00097ba-9d73-48e3-91e7-b114d28d025a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_ULC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ULC" id="2c3ca6f4-3a2c-4f4c-98c9-95597a0185ba"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ULC" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml;charset=UTF-8"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:o:${#TestCase#orgid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="92835c8a-9924-4f72-bb40-b2541e3234ce">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_ULC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                               log.info "versionMinor: "+tP.getPropertyValue("versionMinor");
			if (tP.getPropertyValue("versionMinor")!="02"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="ba6f0a15-62b6-4c46-8565-80503bc669f9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdbc6rKEn73V1iuR8sAAipWkqpBQFHRKHjjZRcOw0W5yXDTX7/BRFeSlayTfZ50enq6v77Q880jNnyv3QcYozhxw6AuC0+NfyxjT0MOdlrQhKjFtK12a8+y3RbbYyiK4iyrS/UadRnjFMkBTowgeWq0SYpukb1Wu6NR7T5N9Sn6gaU7eqO+RjEuTZcqD2SjXvhegPtXt0+NNA76oYFd3A8MH+F+AvsqUKb9UrNv3DA1nh9fUV4dxs9OkkR9goAPJoLI8+ADDH3ikfig82jivuragZGkMXrzaeKnxtvZPM8fcvohjG2iTZIkQXJEqWNi1/7VeK7dDiNTDqzwdT0wgjBwoeG5F6MCpaDECc068OwwdhPH/8Y0RVBkZbqFCtiCFBP8ahC/HVzR/dDSB5AxNlrYMaibsSWyUIwCiOqrpfzU+PWzCr6e1WIjwFYY+/jT+r9BQkGGvDBCZgvfIruh+7nFL9L1/IhgXw6gl2I3Q7OqTSIDIlx/iZHlFlMXl81n4vq1/PUC3zoMwf9SkkfiPc4SNvFFZgTXRjj5f+r1vlavVtaGl6LnfUrmQ49G64O4YGVmup6l7NbyXhip93SF8F75FdS91G/rz41676u3Q/JlKTvkZrfNrGB9yfjJNmXBXFO4CVaN2Ug6DGJNOhQhz9HEmV2yTWKCODQd55w60/eb6Ywfz20H9Lo9flMTHXlFEYUi44DI0q0+1AjVF33yZGZicp4hDG3GTHvhWmcvQWem5xNVZ52hNqZARvJBkxAhu9O33kpO41qq6GMg7sDLUJFIIQKH1H76HdP7GKq4Juh8DbL6v2VJTjAS474YVJPCKj/PBD0rsjxoCoMBQAMb5DIPbJmfXsCMt48n5+gOuZzkwWIlAQGclSXIBXsnrBeLiZib67Wnr2VJ4pUlk4/ATqiVG4JYrAV9OyaNjR7t2hKpqzxvbpfhnh5H5uiYjxw4UzQln2nyWTmIxUwTyc1VZhfl+qIcFGqureja5sBzylLMhfzqURBzZ6ZvltFuxeXwIi4UwAwBtRIHjjLS/DUF6aUDD+JUAcernHeUwXqtFKIGXmq8PVuXsWkDSY+gb0Z733PeGR+VxjVzuD7vh16qX8SDMhCHA/U0VOU9LSzEMVjuVvvN+mhspKwGRzOwv3l0WdfYhrmt93JhsRtPQl12MjgDC5HnF6BMFwkUeTgG4ZAHCgPc4jI48J1wYEo5MW7jWpPzhp3t2T1tsTEkPYPq9ajddNN5OXUEMWjqk3R/cBRnK82bE9XMVlzCXXY4a2Ydw6VgEVmLrThKJoU1Wqi1/YtQbOGoadpjwrtwUqx0xyC+nB1PsZfJpjPH571rWRt+O2e8ruUp9DKyPCs646YWLo4x2eER3SZ252yS1ICt8AAMD6sDv1D4XpVUU84XO4U3gCQmKbgc2smkvT6NR5kHdzQIi8lmfji+FcYUcpEn8oVYtpVY6wnArIowUleidAAr3rZj3hYlfgEFsNjJk3xX5ms1KpU/51G65tEWeSDSOuhwoxq9IrlknqgMA84BvwokzlFOxcbs+GT3hMSpOouYXMEzK9A34VHx3XgVp+pqMplNi72WDo+HclZZpDrJaL0mZscIuLOJ5hyFUDBeot0uiZoBjGEiR74iF5e5jg89d++T4yZL8S+kALvtlb/PV0ND1CexrVKT0TJ4obtcDafWeeQ3D71809TUTtQ1B4ElnM+EHq/JEIQSt2RPZtFuH51VPu3k1hgc90Z7Vngcf+bEia7BfLmYbFS/ydbYbDr1yYtGMLNonqvDnBEXiyZt8tpIw1Hs7tKeXcTzwGzvjKST6eS640bekWunR42J6LXtl8V6ycyoq7zUFswW6r7djeCYWBIZELvWVB6e9xfjEvlz+DpAP0+Hu/B1fhDvJ8uH0XMjHWrZrQgmt2V1AclCXSpvBSP5O4GpJK7Zsq6q/ahiQThBQdJ4rk5V5KWflhTHNfvllfG6FhmBE3oDgeTJDkuLkkgyJCWRgOxyXLsntm8s5xXFJ4iDMLDcylfF415vqb8DhH4fo8BEcSsLU+gg3PiLxSpfdTlYltdvGGCkhSVPbLMU2aE7PVHkuiTTETsMRUskKzIMyzISwzfqszCZB/MYWAmKP3JE9gNHXCLoRi6qiGR1m+LyOsVJmZKTkaWJRz1kxkOA0pJqxhXb67eZHktg1488VAEm/NBMPfQQOdE1QQR+/W23DIiv0qWo/SOrg+tN/22In/du2Sh1TLdSwFU8PCorir4gvOQtmO+D7r0P+mYepKZbXehlapPYha9IPm797piqVe7tUkZ1g3zX/Cz4YJX4HNDdkZm58N7z9+dAySZLvvF8K8nJeDg9pFmWXovQrbhUXJonKILsEiqCaUmIzlp4RAFxN0H8iIveUX/yfJd/xJcmTqAm5ffsly1Tvy5/8BBREa4eInLZ8sVPXzkfXJZ5S1CRfCUbeOV7pUL81ycN7MNKrxS/lD95GJu/y/WFrXd+yjirAeYGdrWqmOf5m6aAYWnWLYdYGL83/pWBr5x/FN6TfMeSlN20TxP0/U69mk5PDQPCMA0SWWhcBe8n5hVnco5Q/7fSH2au3O+NzBf4WzK/VaZqObt8o3HXdf+3csu9tgtE5SnsXrE8NYryXVo6D+x3E/oN4OchLXKCAGiJp8Qedx/SLMdRNMXeE/ghkuc/xH9K3uX08/fw/C8=</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_ 18014 - SAMLExchange - with ULC at Org level - Requesting with other node of different Org - P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>8_STS Create and SAML Exchange - FUNC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E4D9D8CD0B0653EFE0401F0A079928E2</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E4D9E9DDA3FB1E89E0401F0A05991315</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value>close</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D14403889CD0F3ECE0401F0A07992161/User/urn:dece:userid:org:dece:D14403889CDFF3ECE0401F0A07992161/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>policyId</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E4D9E9DDA3FB1E89E0401F0A05991315/User/urn:dece:userid:org:dece:E4D9D8CD0B0653EFE0401F0A079928E2/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3DD6C150D6CC4DCE0401F0A0799470D</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AUserLinkConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE4D9E9DDA3FB1E89E0401F0A05991315</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE4D9D8CD0B0653EFE0401F0A079928E2</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\STSAPIProjects/RET_concat.pem</con:value></con:property><con:property><con:name>orgid</con:name><con:value>ISC_R1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Flush User Assertion data for Device" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="355eaf6f-b30d-4d38-a126-87e9dfe35cb5">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="46e36d08-4570-44d8-a5d0-1ea34e5cd176">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",null);
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeDeviceDefault"));
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("expectNodeUserRowCount",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properities" id="55c9ee0d-2d34-4b78-a434-db2b2b18f0aa">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("expectNodeUserRowCount",callTC.getPropertyValue("expectNodeUserRowCount"));


if (tC.getPropertyValue("expectNodeUserRowCount") == null || tC.getPropertyValue("expectNodeUserRowCount") == "null") {
	tC.setPropertyValue("expectNodeUserRowCount","1");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Delete NODE_USER_SAML_ASSERTION and NODE_USER rows" id="4caed40d-3a14-4382-89cb-9e617f21dd0e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
Boolean delSamlNodeRows = true;
String rowoid = null;
String nodeSamlNodeUserId = null;
String node_oid = nodeoidGet.nodeoidGetFromNodeId(tC.getPropertyValue("nodeid").toString());
String useroid = tC.getPropertyValue("useroid");
String sql = """select to_char(rawtohex(ROW_OID)) ROW_OID from NODE_USER where USER_OID = hextoraw('$useroid') and NODE_OID = hextoraw('$node_oid')""";

log.info sql;

try {
	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR during a.SelectFromDB - $e";
}
finally {
	log.info sql;
	log.info results;
}

if (!results.isEmpty()) {
	try {
		myXML = new XmlSlurper().parseText(results);
	}
	catch (Throwable e) {
		log.info "Error during XmlSlurper - $e";
	}
	finally {
		def rowsReturned = myXML.ResultSet.Row.size();
		def oids = myXML.ResultSet.Row;

		log.info "rowsReturned - $rowsReturned";

		for (oid in oids.ROW_OID) {
			log.info "oid is " + oid;
			sql = "DELETE NODE_USER_SAML_ASSERTION where " +
				"NODE_USER_ID = '" + oid + "'";
			try	{	
				rc = a.dbConnExecuteUpdate(sql);
						
				if(rc != 0) {
					log.info "Error - Could not delete OID: "  + oid;
					log.info "Error - SQL: " + sql;
				} 
			}
			catch(Throwable e) {
				log.info "ERROR during a.dbConnExecuteUpdate - $e";
			}
			
			/*
			*  Now remove the NODE_USER row
			*/
			sql = "DELETE NODE_USER where " +
				"ROW_OID = '" + oid + "'";
			try	{	
				rc = a.dbConnExecuteUpdate(sql);
						
				if(rc != 0) {
					log.info "Error - Could not delete NODE_USER OID: "  + oid;
					log.info "Error - SQL: " + sql;
				} 
			}
			catch(Throwable e) {
				log.info "ERROR during a.dbConnExecuteUpdate - $e";
			}
		}
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Delete NODE_ACCOUNT rows" id="aff3e748-665f-4844-b812-52fe07cb05e6">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

Boolean delSamlNodeRows = true;
String rowoid = null;
String nodeSamlNodeUserId = null;
String nodeid = tC.getPropertyValue("nodeid");
String accountoid = tC.getPropertyValue("accountoid");
String sql = """DELETE from NODE_ACCOUNT where NODE_OID = hextoraw('$nodeid')
  and ACCOUNT_OID = hextoraw('$accountoid') 
""";

log.info sql;

try {
	results = a.DeleteFromDB(sql,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.error e;
	assert 1 == 2;
}
finally {
	log.info sql;
	log.info results;
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify no NODE_USER_SAML_ASSERTION rows exist for node/user" id="91938f61-fe6c-4b5c-bed4-8d0236e564f8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Verify no Node/User Assertion Data Exists")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1399827972014</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0200</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>F9239F0C88866819E0401F0A059941FF</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>F923A2E629B25520E0401F0A05992FF1</con:value>
        </con:property>
        <con:property>
          <con:name>expectNodeUserRowCount</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_32037 - STS GET BasicAuth - Device - Fifty Repetitive Assertions for full user no existing assertion status blocked:tou - P2</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>6_STS GET Basic Auth - Device Role - P2 - Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>86733</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verify no Node/User Assertion Data Exists" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2aabdc2c-a512-4029-8cc0-7c0730061f71">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="d54eff19-27eb-4f71-a486-44080bab5521">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("accountoid",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properities" id="e2d76554-5cd3-40a1-b172-021e9176c4b4">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify no NODE_USER_SAML_ASSERTION rows for Node/User" id="0c963a9d-120e-42ed-8407-0c24fa8a5d77">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
int nodeSamlRowCount = 1;
String node_oid = nodeoidGet.nodeoidGetFromNodeId(tC.getPropertyValue("nodeid").toString());
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String accountoid = tC.getPropertyValue("accountoid");
String useroid = tC.getPropertyValue("useroid");
String results = null;

String sql = """SELECT count(NODE_USER_SAML_ASSERTION_OID) as CNT from NODE_USER_SAML_ASSERTION where
  NODE_OID = hextoraw('$node_oid') and NODE_USER_ID = hextoraw((select ROW_OID from NODE_USER where NODE_OID = hextoraw('$node_oid') 
  and USER_OID = hextoraw('$useroid')))
  """;

try {
	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));

	myXML = new XmlSlurper().parseText(results);
	
	if (myXML.ResultSet.Row.size() == 1) {
		nodeSamlRowCount = myXML.ResultSet.Row.CNT.text().toInteger();
	} else {
		nodeSamlRowCount = 1;
	}
}
catch(Throwable e) {
	log.error e;
	assert 1 == 2;
}
finally {
	log.info sql;
	log.info results;
	log.info "nodeSamlRowCount[$nodeSamlRowCount]";

	assert nodeSamlRowCount == 0;
}
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_06068 - STS - Device - FORBIDDEN - Device Basic auth header not supplied - P0</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>2_P0 Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>stsapi_107_1420205305185</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0BAC49BC82B87A38E05307991F0A37AD</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0BAC4993A3877A3EE05307991F0AE956</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Flush Node/User Assertion Data" searchProperties="true" id="ec490db5-2426-4d4c-9dbd-b8322ea0348d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="51c4f7c5-0455-4e7c-907b-43ed0e151ab3"><con:settings/><con:config><script>	def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String nodelist = tP.getPropertyValue("nodeIdRTL").toString() +
	"," +
	tP.getPropertyValue("nodeIdAccportal").toString() +
	"," +
	tP.getPropertyValue("nodeIdDLASP").toString() +
	"," +
	tP.getPropertyValue("nodeIdDevice").toString() +
	"," +
	tP.getPropertyValue("nodeIdportal").toString() +
	"," +
	tP.getPropertyValue("nodeIdLLASP").toString();

log.info "nodelist[$nodelist]";
	
tC.setPropertyValue("username",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("expectNodeUserRowCount",null);
tC.setPropertyValue("nodelist",nodelist);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properities" id="35fa4ce6-b8dd-4ec0-bac0-0abb38af6f71"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Delete NODE_USER_SAML_ASSERTION rows" id="d5b527fa-9352-4dcc-9820-700f5e775344"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String nodelist = tC.getPropertyValue("nodelist").toString();
String nodeid = tC.getPropertyValue("nodeid");
String useroid = tC.getPropertyValue("useroid");
int results = 0;
def nodeoidGet = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
assert nodelist.length() > 0;
assert nodelist != 'null';

List nodeList = nodelist.tokenize(",");

assert nodeList.size() >= 1;

nodeList.each {
	/*
	*  First node in the list is always the entity nodes.  All
	*  others are affiliates
	*/
	
	log.info "It: $it";
	String node_oid = nodeoidGet.nodeoidGetFromNodeId("$it");
	String sql = """DELETE from NODE_USER_SAML_ASSERTION where NODE_OID = hextoraw('$node_oid')
  		and NODE_USER_ID = (select ROW_OID from NODE_USER where USER_OID = hextoraw('$useroid') 
  		and NODE_OID = hextoraw('$node_oid'))""";

  	log.info sql;

  	try {
  		dbUtils = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem"));
		results = dbUtils.DeleteFromDB(sql);
	}
	catch(Throwable e) {
		log.error "ERROR! - dbUtils.DeleteFromDB - $e";
	}
	finally {
		//log.info sql;
		log.info "result[$results]";
	}
}
tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost")+":"+tP.getPropertyValue("targetPort"));</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_06065 - STS - Device - Fifty Repetitive Assertions for full user no existing assertion status pending - P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>5_STS Create Tokentype usernamepassword - Device Role - P2 - Test Cases</con:value></con:property><con:property><con:name>username</con:name><con:value>stsapi_107_1409969368598</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value>025C467425F04845E05305991E0AA9BC</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>025C40AB8735485DE05305991E0A339D</con:value></con:property><con:property><con:name>expectNodeUserRowCount</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodelist</con:name><con:value>RET,ACCESS,DLASP,null,iscportal1,LLASP</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Set Environmental Properties" disabled="true" id="e9db47a0-3777-4681-bb45-208e118f395a"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set Environmental Properties" searchProperties="true" id="d418f865-d847-4c81-b23e-ac158bfa76b7"><con:settings/><con:testStep type="groovy" name="Set Environmental Properties" id="b44e78d1-942f-4055-8899-56a4449c59a4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ENV = context.expand( '${#Project#ENV}' )

log.info "Environment "+ENV;

if(ENV=="QALP1")
{
	tP.setPropertyValue("targetSystem","LP1");
	tP.setPropertyValue("AlternateEmail","test_+sts123@uvvutesting.biz");
	tP.setPropertyValue("Device_HostName","https://qa.d.uvvu.com:7001");
	tP.setPropertyValue("Provision_HostName","https://qa.p.uvvu.com:7001");
	tP.setPropertyValue("Query_HostName","https://qa.q.uvvu.com:7001");
	tP.setPropertyValue("targetHostd","qa.d.uvvu.com");
	tP.setPropertyValue("targetPortd","7001");
	tP.setPropertyValue("targetDeviceDomain","qa.d.uvvu.com:7001");
	tP.setPropertyValue("targetHost","qa.p.uvvu.com");
	tP.setPropertyValue("targetHostq","qa.q.uvvu.com");
	tP.setPropertyValue("targetPort","7001");
	tP.setPropertyValue("targetPortq","7001");
	tP.setPropertyValue("targetURL","qa.p.uvvu.com:7001");
	tP.setPropertyValue("targetUrlSHost","qa.s.uvvu.com:7001");
	tP.setPropertyValue("samlAuthenticatingAuthority", "urn:dece:org:org:dece:coordinator");
	tP.setPropertyValue("samlIssuer", "http://c.decellc.com/");
	tP.setPropertyValue("TOUUrl","qa.c.uvvu.com:7001");
	tP.setPropertyValue("OrgID","ISC_R1");
	//org1
	tP.setPropertyValue("nodeIdRTL","RET");
	tP.setPropertyValue("nodeIdRTLCS","RET_CS_1");
	tP.setPropertyValue("nodeIdLLASP","LLASP");
	tP.setPropertyValue("nodeIdLLASPCS","LLASP_CS_1");
	tP.setPropertyValue("nodeIdDLASP","DLASP");
	tP.setPropertyValue("nodeIdDLASPCS","DLASP_CS_1");
	tP.setPropertyValue("nodeIdAccportal","ACCESS");
	tP.setPropertyValue("nodeIdAccportalCS","ACCESCS");
	tP.setPropertyValue("nodeIdCoo","COO");
	tP.setPropertyValue("nodeIdCoordCS","coord:cs");
	tP.setPropertyValue("nodeIdCON","CON");
	tP.setPropertyValue("nodeIdCONCS","CON_CS_1");
	tP.setPropertyValue("nodeIdDECE","DECE");
	tP.setPropertyValue("nodeIdDECECS","dece:cs");
	tP.setPropertyValue("nodeIdDEV","DEV");
	tP.setPropertyValue("nodeIdDEVCS","DEV_CS_1");
	tP.setPropertyValue("nodeIdDSP","DSP");
	tP.setPropertyValue("nodeIdDSPCS","DSP_CS_1");
	tP.setPropertyValue("nodeIdportal","iscportal1");
	tP.setPropertyValue("nodeIdportalCS","iscportalcs1");
	tP.setPropertyValue("nodeIdNotProvisioned", "notprovisioned");
	tP.setPropertyValue("nodeDeviceDefault", "0200");
	
	//org2
	tP.setPropertyValue("nodeIdRTL2","RET_2");
	tP.setPropertyValue("nodeIdRTLCS2","RET_CS_2");
	tP.setPropertyValue("nodeIdLLASP2","LLASP_2");
	tP.setPropertyValue("nodeIdLLASPCS2","LLASP_CS_2");
	tP.setPropertyValue("nodeIdDLASP2","DLASP_2");
	tP.setPropertyValue("nodeIdDLASPCS2","DLASP_CS_2");
	tP.setPropertyValue("nodeIdAccportal2","ACCESS_2");
	tP.setPropertyValue("nodeIdAccportalCS2","ACCESS_CS_2");
	tP.setPropertyValue("nodeIdCoordCS2","COO_CS_1");
	tP.setPropertyValue("nodeIdDEVCS2","DEV_CS_2");
	tP.setPropertyValue("nodeIdDSP2","DSP_2");
	tP.setPropertyValue("nodeIdDSPCS2","DSP_CS_2");
	tP.setPropertyValue("nodeIdportal2","");
	tP.setPropertyValue("nodeIdportalCS2","");
	
	tP.setPropertyValue("linkLASPNodeAffiliationLLASP", "");
	tP.setPropertyValue("nodeAffiliationACSPTL", "ACCESS,RET,DLASP");
	tP.setPropertyValue("nodeAffiliationDECECS", "");
	tP.setPropertyValue("nodeAffiliationDLASP", "DLASP,RET,LLASP");
	tP.setPropertyValue("nodeAffiliationLLASP", "LLASP,RET,DLASP");
	tP.setPropertyValue("nodeAffiliationRTL", "RET,LLASP,DLASP");
	tP.setPropertyValue("nodeEntityAffilatedNodes", "");
	tP.setPropertyValue("alid", "urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt");
	tP.setPropertyValue("cid", "urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt");
	tP.setPropertyValue("StreamHandleID", "urn:dece:streamhandleid:org:dece:D3CD9D93C110059998E0401F0A07992FB8");
	tP.setPropertyValue("certsPath_Windows", "C:/certs");
	tP.setPropertyValue("certsPath_Linux", "/opt/dece/certs/");
	
}

else if(ENV=="QALP2")
{
	tP.setPropertyValue("targetSystem","LP2");
	tP.setPropertyValue("AlternateEmail","test_+sts123@uvvutesting.biz");
	tP.setPropertyValue("Device_HostName","https://qa.d.uvvu.com:7002");
	tP.setPropertyValue("Provision_HostName","https://qa.p.uvvu.com:7002");
	tP.setPropertyValue("Query_HostName","https://qa.q.uvvu.com:7002");
	tP.setPropertyValue("targetHostd","qa.d.uvvu.com");
	tP.setPropertyValue("targetPortd","7002");
	tP.setPropertyValue("targetDeviceDomain","qa.d.uvvu.com:7002");
	tP.setPropertyValue("targetHost","qa.p.uvvu.com");
	tP.setPropertyValue("targetHostq","qa.q.uvvu.com");
	tP.setPropertyValue("targetPort","7002");
	tP.setPropertyValue("targetPortq","7002");
	tP.setPropertyValue("targetURL","qa.p.uvvu.com:7002");
	tP.setPropertyValue("targetUrlSHost","qa.s.uvvu.com:7002");
	tP.setPropertyValue("TOUUrl","qa.c.uvvu.com:7002");
	tP.setPropertyValue("samlAuthenticatingAuthority", "urn:dece:org:org:dece:coordinator");
	tP.setPropertyValue("samlIssuer", "http://c.decellc.com/");
	tP.setPropertyValue("OrgID","ISC_R1");
	
	//org1
	tP.setPropertyValue("nodeIdRTL","RET");
	tP.setPropertyValue("nodeIdRTLCS","RET_CS_1");
	tP.setPropertyValue("nodeIdLLASP","LLASP");
	tP.setPropertyValue("nodeIdLLASPCS","LLASP_CS_1");
	tP.setPropertyValue("nodeIdDLASP","DLASP");
	tP.setPropertyValue("nodeIdDLASPCS","DLASP_CS_1");
	tP.setPropertyValue("nodeIdAccportal","ACCESS");
	tP.setPropertyValue("nodeIdAccportalCS","ACCESCS");
	tP.setPropertyValue("nodeIdCoo","COO");
	tP.setPropertyValue("nodeIdCoordCS","coord:cs");
	tP.setPropertyValue("nodeIdCON","CON");
	tP.setPropertyValue("nodeIdCONCS","CON_CS_1");
	tP.setPropertyValue("nodeIdDECE","DECE");
	tP.setPropertyValue("nodeIdDECECS","dece:cs");
	tP.setPropertyValue("nodeIdDEV","DEV");
	tP.setPropertyValue("nodeIdDEVCS","DEV_CS_1");
	tP.setPropertyValue("nodeIdDSP","DSP");
	tP.setPropertyValue("nodeIdDSPCS","DSP_CS_1");
	tP.setPropertyValue("nodeIdportal","iscportal1");
	tP.setPropertyValue("nodeIdportalCS","iscportalcs1");
	tP.setPropertyValue("nodeIdNotProvisioned", "notprovisioned");
	tP.setPropertyValue("nodeDeviceDefault", "0200");
	
	//org2
	tP.setPropertyValue("nodeIdRTL2","RET_2");
	tP.setPropertyValue("nodeIdRTLCS2","RET_CS_2");
	tP.setPropertyValue("nodeIdLLASP2","LLASP_2");
	tP.setPropertyValue("nodeIdLLASPCS2","LLASP_CS_2");
	tP.setPropertyValue("nodeIdDLASP2","DLASP_2");
	tP.setPropertyValue("nodeIdDLASPCS2","DLASP_CS_2");
	tP.setPropertyValue("nodeIdAccportal2","ACCESS_2");
	tP.setPropertyValue("nodeIdAccportalCS2","ACCESS_CS_2");
	tP.setPropertyValue("nodeIdCoordCS2","COO_CS_1");
	tP.setPropertyValue("nodeIdDEVCS2","DEV_CS_2");
	tP.setPropertyValue("nodeIdDSP2","DSP_2");
	tP.setPropertyValue("nodeIdDSPCS2","DSP_CS_2");
	tP.setPropertyValue("nodeIdportal2","");
	tP.setPropertyValue("nodeIdportalCS2","");
	

	tP.setPropertyValue("linkLASPNodeAffiliationLLASP", "");
	tP.setPropertyValue("nodeAffiliationACSPTL", "ACCESS,RET,DLASP");
	tP.setPropertyValue("nodeAffiliationDECECS", "");
	tP.setPropertyValue("nodeAffiliationDLASP", "DLASP,RET,LLASP");
	tP.setPropertyValue("nodeAffiliationLLASP", "LLASP,RET,DLASP");
	tP.setPropertyValue("nodeAffiliationRTL", "RET,LLASP,DLASP");
	tP.setPropertyValue("nodeEntityAffilatedNodes", "");
	tP.setPropertyValue("alid", "urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt");
	tP.setPropertyValue("cid", "urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt");
	tP.setPropertyValue("StreamHandleID", "urn:dece:streamhandleid:org:dece:D3CD9D93C110059998E0401F0A07992FB8");
	tP.setPropertyValue("certsPath_Windows", "C:/certs");
	tP.setPropertyValue("certsPath_Linux", "/opt/dece/certs/");
}

else if(ENV=="QALP3")
{
	tP.setPropertyValue("targetSystem","LP3");
	tP.setPropertyValue("AlternateEmail","test_+sts123@uvvutesting.biz");
	tP.setPropertyValue("Device_HostName","https://qa.d.uvvu.com:7003");
	tP.setPropertyValue("Provision_HostName","https://qa.p.uvvu.com:7003");
	tP.setPropertyValue("Query_HostName","https://qa.q.uvvu.com:7003");
	tP.setPropertyValue("targetHostd","qa.d.uvvu.com");
	tP.setPropertyValue("targetPortd","7003")
	tP.setPropertyValue("targetDeviceDomain","qa.d.uvvu.com:7003");
	tP.setPropertyValue("targetHost","qa.p.uvvu.com");
	tP.setPropertyValue("targetHostq","qa.q.uvvu.com");
	tP.setPropertyValue("targetPort","7003");
	tP.setPropertyValue("targetPortq","7003");
	tP.setPropertyValue("targetURL","qa.p.uvvu.com:7003");
	tP.setPropertyValue("targetUrlSHost","qa.s.uvvu.com:7003");
	tP.setPropertyValue("samlAuthenticatingAuthority", "urn:dece:org:org:dece:coordinator");
	tP.setPropertyValue("samlIssuer", "http://c.decellc.com/");
	tP.setPropertyValue("TOUUrl","qa.c.uvvu.com:7003");
	tP.setPropertyValue("OrgID","ISC_R1");
	
	//org1
	tP.setPropertyValue("nodeIdRTL","RET");
	tP.setPropertyValue("nodeIdRTLCS","RET_CS_1");
	tP.setPropertyValue("nodeIdLLASP","LLASP");
	tP.setPropertyValue("nodeIdLLASPCS","LLASP_CS_1");
	tP.setPropertyValue("nodeIdDLASP","DLASP");
	tP.setPropertyValue("nodeIdDLASPCS","DLASP_CS_1");
	tP.setPropertyValue("nodeIdAccportal","ACCESS");
	tP.setPropertyValue("nodeIdAccportalCS","ACCESCS");
	tP.setPropertyValue("nodeIdCoo","COO");
	tP.setPropertyValue("nodeIdCoordCS","coord:cs");
	tP.setPropertyValue("nodeIdCON","CON");
	tP.setPropertyValue("nodeIdCONCS","CON_CS_1");
	tP.setPropertyValue("nodeIdDECE","DECE");
	tP.setPropertyValue("nodeIdDECECS","dece:cs");
	tP.setPropertyValue("nodeIdDEV","DEV");
	tP.setPropertyValue("nodeIdDEVCS","DEV_CS_1");
	tP.setPropertyValue("nodeIdDSP","DSP");
	tP.setPropertyValue("nodeIdDSPCS","DSP_CS_1");
	tP.setPropertyValue("nodeIdportal","iscportal1");
	tP.setPropertyValue("nodeIdportalCS","iscportalcs1");
	tP.setPropertyValue("nodeIdNotProvisioned", "notprovisioned");
	tP.setPropertyValue("nodeDeviceDefault", "0200");
	
	//org2
	tP.setPropertyValue("nodeIdRTL2","RET_2");
	tP.setPropertyValue("nodeIdRTLCS2","RET_CS_2");
	tP.setPropertyValue("nodeIdLLASP2","LLASP_2");
	tP.setPropertyValue("nodeIdLLASPCS2","LLASP_CS_2");
	tP.setPropertyValue("nodeIdDLASP2","DLASP_2");
	tP.setPropertyValue("nodeIdDLASPCS2","DLASP_CS_2");
	tP.setPropertyValue("nodeIdAccportal2","ACCESS_2");
	tP.setPropertyValue("nodeIdAccportalCS2","ACCESS_CS_2");
	tP.setPropertyValue("nodeIdCoordCS2","COO_CS_1");
	tP.setPropertyValue("nodeIdDEVCS2","DEV_CS_2");
	tP.setPropertyValue("nodeIdDSP2","DSP_2");
	tP.setPropertyValue("nodeIdDSPCS2","DSP_CS_2");
	tP.setPropertyValue("nodeIdportal2","");
	tP.setPropertyValue("nodeIdportalCS2","");
	
	tP.setPropertyValue("linkLASPNodeAffiliationLLASP", "");
	tP.setPropertyValue("nodeAffiliationACSPTL", "ACCESS,RET,DLASP");
	tP.setPropertyValue("nodeAffiliationDECECS", "");
	tP.setPropertyValue("nodeAffiliationDLASP", "DLASP,RET,LLASP");
	tP.setPropertyValue("nodeAffiliationLLASP", "LLASP,RET,DLASP");
	tP.setPropertyValue("nodeAffiliationRTL", "RET,LLASP,DLASP");
	tP.setPropertyValue("nodeEntityAffilatedNodes", "");
	tP.setPropertyValue("alid", "urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt");
	tP.setPropertyValue("cid", "urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt");
	tP.setPropertyValue("StreamHandleID", "urn:dece:streamhandleid:org:dece:D3CD9D93C110059998E0401F0A07992FB8");
	tP.setPropertyValue("certsPath_Windows", "C:/certs");
	tP.setPropertyValue("certsPath_Linux", "/opt/dece/certs/");
	
}

else if(ENV=="DEV")
{
	tP.setPropertyValue("targetSystem","DEV");
	tP.setPropertyValue("AlternateEmail","test_+sts123@uvvutesting.biz");
	tP.setPropertyValue("Device_HostName","https://lp2.dev.d.uvvu.com:8443");
	tP.setPropertyValue("Provision_HostName","https://lp2.dev.p.uvvu.com:8443");
	tP.setPropertyValue("Query_HostName","https://lp2.dev.q.uvvu.com:8443");
	tP.setPropertyValue("targetHostd","lp2.dev.d.uvvu.com");
	tP.setPropertyValue("targetPortd","8443");
	tP.setPropertyValue("targetDeviceDomain","lp2.dev.d.uvvu.com:8443");
	tP.setPropertyValue("targetHost","lp2.dev.p.uvvu.com");
	tP.setPropertyValue("targetHostq","lp2.dev.q.uvvu.com");
	tP.setPropertyValue("targetPort","8443");
	tP.setPropertyValue("targetPortq","8443");
	tP.setPropertyValue("targetURL","lp2.dev.p.uvvu.com:8443");
	tP.setPropertyValue("targetUrlSHost","lp2.dev.s.uvvu.com:8443");
	tP.setPropertyValue("OrgID","QA_ORG_1");
	
	//org1
	tP.setPropertyValue("nodeIdRTL","ISC_RET");
	tP.setPropertyValue("nodeIdRTLCS","ISC_RETCS");
	tP.setPropertyValue("nodeIdLLASP","ISC_LLASP");
	tP.setPropertyValue("nodeIdLLASPCS","ISC_LLASPCS");
	tP.setPropertyValue("nodeIdDLASP","ISC_DLASP");
	tP.setPropertyValue("nodeIdDLASPCS","ISC_DLASPCS");
	tP.setPropertyValue("nodeIdAccportal","ISC_ACCESS");
	tP.setPropertyValue("nodeIdAccportalCS","ISC_ACCESSCS");
	tP.setPropertyValue("nodeIdCoo","ISC_COO");
	tP.setPropertyValue("nodeIdCoordCS","ISC_COOCS");
	tP.setPropertyValue("nodeIdCON","");
	tP.setPropertyValue("nodeIdCONCS","");
	tP.setPropertyValue("nodeIdDECE","ISC_DECE");
	tP.setPropertyValue("nodeIdDECECS","ISC_DECECS");
	tP.setPropertyValue("nodeIdDEV","ISC_DEVICE");
	tP.setPropertyValue("nodeIdDEVCS","ISC_DEVICECS");
	tP.setPropertyValue("nodeIdDSP","ISC_DSP");
	tP.setPropertyValue("nodeIdDSPCS","ISC_DSPCS");
	tP.setPropertyValue("nodeIdportal","ISC_PORTAL");
	tP.setPropertyValue("nodeIdportalCS","ISC_PORTALCS");
	tP.setPropertyValue("nodeIdNotProvisioned", "notprovisioned");
	tP.setPropertyValue("samlAuthenticatingAuthority", "urn:dece:org:org:dece:coordinator");
	tP.setPropertyValue("samlIssuer", "http://c.decellc.com/");
	tP.setPropertyValue("TOUUrl", "qa.c.uvvu.com:7001");
	tP.setPropertyValue("nodeDeviceDefault", "0200");
	
	
	//org2
	tP.setPropertyValue("nodeIdRTL2","ISC_RET1");
	tP.setPropertyValue("nodeIdRTLCS2","ISC_RETCS1");
	tP.setPropertyValue("nodeIdLLASP2","ISC_LLASP2");
	tP.setPropertyValue("nodeIdLLASPCS2","ISC_LLASPCS2");
	tP.setPropertyValue("nodeIdDLASP2","ISC_DLASP2");
	tP.setPropertyValue("nodeIdDLASPCS2","ISC_DLASPCS2");
	tP.setPropertyValue("nodeIdAccportal2","ISC_ACCESS2");
	tP.setPropertyValue("nodeIdAccportalCS2","ISC_ACCESSCS2");
	tP.setPropertyValue("nodeIdCoordCS2","");
	tP.setPropertyValue("nodeIdDEVCS2","ISC_DEVICECS2");
	tP.setPropertyValue("nodeIdDSP2","ISC_DSP2");
	tP.setPropertyValue("nodeIdDSPCS2","ISC_DSPCS2");
	tP.setPropertyValue("nodeIdportal2","");
	tP.setPropertyValue("nodeIdportalCS2","");
	
	
	tP.setPropertyValue("linkLASPNodeAffiliationLLASP", "");
	tP.setPropertyValue("nodeAffiliationACSPTL", "ISC_ACCESS,ISC_RET,ISC_DLASP");
	tP.setPropertyValue("nodeAffiliationDECECS", "");
	tP.setPropertyValue("nodeAffiliationDLASP", "ISC_DLASP,ISC_RET,ISC_LLASP");
	tP.setPropertyValue("nodeAffiliationLLASP", "ISC_LLASP,ISC_RET,ISC_DLASP");
	tP.setPropertyValue("nodeAffiliationRTL", "ISC_RET,ISC_LLASP,ISC_DLASP");
	tP.setPropertyValue("nodeEntityAffilatedNodes", "");
	tP.setPropertyValue("alid", "urn:dece:alid:test:Thu_Nov_21_14_36_04_IST_2013");
	tP.setPropertyValue("cid", "urn:dece:cid:test:Fri_Oct_11_18_54_51_GMT_05_30_2013");
	tP.setPropertyValue("StreamHandleID", "urn:dece:streamhandleid:org:dece:EC3B6FFFD3665563E0401F0A0F9911CD");
	tP.setPropertyValue("certsPath_Windows", "C:/certs");
	tP.setPropertyValue("certsPath_Linux", "/opt/dece/certs/");
}

else
{
	log.info ENV+" Environment Not Found..";
}
	</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:endpointStrategy xsi:type="con:DefaultEndpointStrategy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:endpoint mode="OVERRIDE">https://qa.p.uvvu.com:7001/${#TestCase#endPoint}</con:endpoint></con:endpointStrategy><con:requirements/><con:properties><con:property><con:name>AccountCountry</con:name><con:value>US</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_sts123@uvvutesting.biz</con:value></con:property><con:property><con:name>APID</con:name><con:value>urn:dece:apid:org:200002</con:value></con:property><con:property><con:name>Batch_HostName</con:name><con:value>https://qa.b.uvvu.com:7002</con:value></con:property><con:property><con:name>cacheDuration</con:name><con:value>86400</con:value></con:property><con:property><con:name>CertMatchesNodeID</con:name><con:value>YES</con:value></con:property><con:property><con:name>CertMatchesNodeName</con:name><con:value>YES</con:value></con:property><con:property><con:name>certsPath_Linux</con:name><con:value>../../Certs/QALP2/</con:value></con:property><con:property><con:name>certsPath_Windows</con:name><con:value>../../Certs/QALP2/</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>clusterNumber</con:name><con:value>1</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_02</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_06</con:name><con:value>http://www.decellc.org/schema/2012/12/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_07</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_11</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_21</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coords</con:name><con:value>FALKY,COORD-10000,COORD-3034,COORD-2999,COORD-2509,COORD-627,UV-135,UV-340,Coord-2180</con:value></con:property><con:property><con:name>DBIdentifier</con:name><con:value>LP2</con:value></con:property><con:property><con:name>DBPassword</con:name><con:value>lp2db_23</con:value></con:property><con:property><con:name>DBUsername</con:name><con:value>DEQA2_APP</con:value></con:property><con:property><con:name>Device_HostName</con:name><con:value>https://qa.d.uvvu.com:7002</con:value></con:property><con:property><con:name>disablePriority</con:name><con:value>P3,CHILD,CLG</con:value></con:property><con:property><con:name>enablePriorityScript</con:name><con:value>false</con:value></con:property><con:property><con:name>ENV</con:name><con:value>QALP2</con:value></con:property><con:property><con:name>envIdentifier</con:name><con:value>LP2</con:value></con:property><con:property><con:name>expectHoursDiffActiveDECE:CS</con:name><con:value>24</con:value></con:property><con:property><con:name>expectHoursDiffActiveLLASP</con:name><con:value>87648</con:value></con:property><con:property><con:name>expectHoursDiffActiveNoUserLinkConsent</con:name><con:value>6</con:value></con:property><con:property><con:name>expectHoursDiffActiveOthers</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectHoursDiffActiveRTL</con:name><con:value>8760</con:value></con:property><con:property><con:name>expectHoursDiffBlockedTou</con:name><con:value>6</con:value></con:property><con:property><con:name>expectHoursDiffDeviceActive</con:name><con:value>87648</con:value></con:property><con:property><con:name>expectHoursDiffPending</con:name><con:value>6</con:value></con:property><con:property><con:name>fileKeyStorePath</con:name><con:value>/opt/dece/soapUIProjects/STSAPIProjects_LP1</con:value></con:property><con:property><con:name>JDBCConnStr</con:name><con:value>jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>JKSAliasName</con:name><con:value>qalp1</con:value></con:property><con:property><con:name>JKSPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>linkLASPNodeAffiliationLLASP</con:name><con:value/></con:property><con:property><con:name>maxUserName</con:name><con:value>64</con:value></con:property><con:property><con:name>minUserName</con:name><con:value>6</con:value></con:property><con:property><con:name>nodeAffiliationACSPTL</con:name><con:value>ACCESS_2,RET_2,DLASP_2</con:value></con:property><con:property><con:name>nodeAffiliationDECECS</con:name><con:value/></con:property><con:property><con:name>nodeAffiliationDLASP</con:name><con:value>DLASP_2,RET_2,LLASP_2</con:value></con:property><con:property><con:name>nodeAffiliationLLASP</con:name><con:value>LLASP_2,RET_2,DLASP_2</con:value></con:property><con:property><con:name>nodeAffiliationRTL</con:name><con:value>RET_2,LLASP_2,DLASP_2</con:value></con:property><con:property><con:name>nodeDeviceDefault</con:name><con:value>0200</con:value></con:property><con:property><con:name>nodeEntityAffilatedNodes</con:name><con:value/></con:property><con:property><con:name>nodeIdAccportal</con:name><con:value>ACCESS_2</con:value></con:property><con:property><con:name>nodeIdAccportal2</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>nodeIdAccportalCS</con:name><con:value>ACCESSCS_2</con:value></con:property><con:property><con:name>nodeIdAccportalCS2</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>nodeIdCON</con:name><con:value>CON_2</con:value></con:property><con:property><con:name>nodeIdCON2</con:name><con:value>CON</con:value></con:property><con:property><con:name>nodeIdCONCS</con:name><con:value>CON_CS_2</con:value></con:property><con:property><con:name>nodeIdCONCS2</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>nodeIdCoo</con:name><con:value>COO_2</con:value></con:property><con:property><con:name>nodeIdCoo2</con:name><con:value>COO_2</con:value></con:property><con:property><con:name>nodeIdCoordCS</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>nodeIdCoordCS2</con:name><con:value>COO_CS_1</con:value></con:property><con:property><con:name>nodeIdDECE</con:name><con:value>DECE</con:value></con:property><con:property><con:name>nodeIdDECECS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>nodeIdDeceDomainManager</con:name><con:value/></con:property><con:property><con:name>nodeIdDEV</con:name><con:value>DEV_2</con:value></con:property><con:property><con:name>nodeIdDEV2</con:name><con:value>DEV_2</con:value></con:property><con:property><con:name>nodeIdDEVCS2</con:name><con:value>DEV_CS_2</con:value></con:property><con:property><con:name>nodeIdDLASP</con:name><con:value>DLASP_2</con:value></con:property><con:property><con:name>nodeIdDLASP2</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeIdDLASPCS</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdDLASPCS2</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdDSP</con:name><con:value>DSP_2</con:value></con:property><con:property><con:name>nodeIdDSP2</con:name><con:value>DSP</con:value></con:property><con:property><con:name>nodeIdDSPCS</con:name><con:value>DSP_CS_2</con:value></con:property><con:property><con:name>nodeIdDSPCS2</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>nodeIdLLASP</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>nodeIdLLASP2</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeIdLLASPCS</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdLLASPCS2</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdNotProvisioned</con:name><con:value>notprovisioned</con:value></con:property><con:property><con:name>nodeIdportal</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdportal2</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdportalCS</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdportalCS2</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdRTL2</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdRTLCS</con:name><con:value>RET_CS_2</con:value></con:property><con:property><con:name>nodeIdRTLCS2</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>OrgID</con:name><con:value>ISC_R1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>runTeardown</con:name><con:value>false</con:value></con:property><con:property><con:name>scriptsPath_Windows</con:name><con:value>C:\Scripts</con:value></con:property><con:property><con:name>Provision_HostName</con:name><con:value>https://qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>Rights_APID</con:name><con:value>urn:dece:apid:file:SARVAJEET_CID_DONT_TOUCH_11.txt:AUDIO_Number_11</con:value></con:property><con:property><con:name>Rights_CID</con:name><con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_11.txt</con:value></con:property><con:property><con:name>Query_HostName</con:name><con:value>https://qa.q.uvvu.com:7002</con:value></con:property><con:property><con:name>Rights_ALID</con:name><con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_11.txt</con:value></con:property><con:property><con:name>samlAuthenticatingAuthority</con:name><con:value>urn:dece:org:org:dece:coordinator</con:value></con:property><con:property><con:name>samlIssuer</con:name><con:value>http://c.decellc.com/</con:value></con:property><con:property><con:name>Streams_ALID</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_618356324.txt</con:value></con:property><con:property><con:name>targetDeviceDomain</con:name><con:value>qa.d.uvvu.com:7002</con:value></con:property><con:property><con:name>scriptsPath_Linux</con:name><con:value>/opt/dece/scripts</con:value></con:property><con:property><con:name>targetHostC</con:name><con:value>qa.c.uvvu.com:7001</con:value></con:property><con:property><con:name>targetHostd</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>StreamHandleID</con:name><con:value>urn:dece:streamhandleid:org:dece:D3CD9D93C110059998E0401F0A07992FB8</con:value></con:property><con:property><con:name>Streams_APID</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt:857081750</con:value></con:property><con:property><con:name>Streams_CID</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_178066866.txt</con:value></con:property><con:property><con:name>targerHostd</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targetHost</con:name><con:value>qa.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostB</con:name><con:value>qa.b.uvvu.com:7002</con:value></con:property><con:property><con:name>targetHostP</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>targetHostq</con:name><con:value>qa.q.uvvu.com</con:value></con:property><con:property><con:name>targetHostS</con:name><con:value>qa.s.uvvu.com:7002</con:value></con:property><con:property><con:name>targetPort</con:name><con:value>7002</con:value></con:property><con:property><con:name>targetPortd</con:name><con:value>7001</con:value></con:property><con:property><con:name>targetPortq</con:name><con:value>7002</con:value></con:property><con:property><con:name>targetSystem</con:name><con:value>LP2</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>targetUrlSHost</con:name><con:value>qa.s.uvvu.com:7002</con:value></con:property><con:property><con:name>TOUPolicyResource</con:name><con:value>https://qa.c.uvvu.com:7002/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20140811/html</con:value></con:property><con:property><con:name>TOUUrl</con:name><con:value>qa.c.uvvu.com:7002</con:value></con:property><con:property><con:name>TOUUrl_06</con:name><con:value>qa.uvvu.com</con:value></con:property><con:property><con:name>TOUUrl_07</con:name><con:value>qa.c.uvvu.com</con:value></con:property><con:property><con:name>URLEncode</con:name><con:value>NO</con:value></con:property><con:property><con:name>urnaccount</con:name><con:value>urn:dece:accountid:org:dece:</con:value></con:property><con:property><con:name>urnError</con:name><con:value>urn:dece:errorid:org:dece:</con:value></con:property><con:property><con:name>urnNode</con:name><con:value>urn:dece:org:org:dece:</con:value></con:property><con:property><con:name>urnstream</con:name><con:value>urn:dece:streamhandleid:org:dece:</con:value></con:property><con:property><con:name>urntokenType_deviceauthtoken</con:name><con:value>urn:dece:type:tokentype:DeviceAuthToken</con:value></con:property><con:property><con:name>urntokenType_saml</con:name><con:value>urn:dece:type:tokentype:saml2</con:value></con:property><con:property><con:name>urntokenType_userpassword</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>versionMinor</con:name><con:value>02</con:value></con:property><con:property><con:name>versionURLEncode</con:name><con:value>06</con:value></con:property><con:property><con:name>UserPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>nodeIdDEVCS</con:name><con:value>DEV_CS_1</con:value></con:property><con:property><con:name>nodeIdDEVCS</con:name><con:value>DEV_CS_2</con:value></con:property><con:property><con:name>nodeIdRTL</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdRTL</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>versionMajor</con:name><con:value>2015</con:value></con:property><con:property><con:name>XDeceApplicationAuthorization</con:name><con:value>dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6</con:value></con:property><con:property><con:name>DMR_CID</con:name><con:value>urn:dece:cid:org:200002</con:value></con:property><con:property><con:name>DMR_APID</con:name><con:value>urn:dece:apid:org:200002</con:value></con:property><con:property><con:name>DMR_ALID</con:name><con:value>urn:dece:alid:org:200002</con:value></con:property><con:property><con:name>DMR_BID</con:name><con:value>urn:dece:bid:org:200002</con:value></con:property><con:property><con:name>enableFlakyScript</con:name><con:value>false</con:value></con:property><con:property><con:name>Flaky_Disabled</con:name><con:value>true</con:value></con:property></con:properties><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:parameters/></con:reporting><con:eventHandlers type="TestRunListener.afterStep" name="TestRunListener.afterStep"><con:script>if(testStepResult.getTestStep().config.type.toString() == "restrequest")
{
	byte [] tempByteArrRequest = testStepResult.getRawRequestData();
	String tempRequest = new String(tempByteArrRequest);

	log.info("\n-----------------------------&lt;" + testStepResult.getTestStep().getName() + "Request>--------------------------------\n");
	log.info(tempRequest);
	log.info("\n-----------------------------&lt;/" + testStepResult.getTestStep().getName() + "Request>--------------------------------\n");

	byte [] tempByteArrResponse = testStepResult.getRawResponseData();
	String tempResponse = new String(tempByteArrResponse);


	log.info("\n-----------------------------&lt;" + testStepResult.getTestStep().getName() + "Response>--------------------------------\n");
	log.info(tempResponse);
	log.info("\n-----------------------------&lt;/" + testStepResult.getTestStep().getName() + "Response>--------------------------------\n");

log.info("################################################################################\n");
}</con:script></con:eventHandlers><con:sensitiveInformation/></con:soapui-project>