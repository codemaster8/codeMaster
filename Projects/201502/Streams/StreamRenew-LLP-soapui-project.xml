<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="StreamRenewLLP" resourceRoot="" soapui-version="4.6.1" abortOnError="false" runType="SEQUENTIAL" activeEnvironment="Default" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="Authentication/Permission Test Cases"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="Copy of TC_DECE_10004 - StreamRenew - FUNC - DLP - AccountIdInvalid - accountId archived"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="C:\Documents and Settings\ashwin.tikle\Desktop\stream renew report"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="StreamDelete" type="rest" id="3b492f67-115a-413d-b988-3f95ade5b4a3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>https://${#Project#targetURL}</con:endpoint></con:endpoints><con:resource name="StreamDelete" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" id="80184fc8-e203-475a-bf4d-962fecb8f6e5"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>STREAM</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="DELETE" method="DELETE" id="58df498a-480e-4619-8885-ffc42f359884"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>405 400 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 405</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>401 400 404 403 409</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="StreamDelete" mediaType="application/xml" id="e35ade99-ec4e-467e-bbc0-5f1630c0dde7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="RightsTokenCreate" path="/rest/{MAJOR}/{MINOR}/Account/${#TestCase#assertionAccountIdFULL}/RightsToken" id="fd240b30-e4f1-4205-a37d-baef7d1f9e1f"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="9150af14-9d36-4664-873e-3c25c093eda9"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201 0</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404 400</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>403 404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="RightsTokenCreate" mediaType="application/xml" postQueryString="false" id="8c1437a4-b2a5-4b06-9b3e-fa2b9c91ee11"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#rtrassert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:RightsTokenData xmlns:dece="http://www.decellc.org/schema" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.decellc.org/schema dece.xsd ">
  <dece:ALID>${#Project#alid}</dece:ALID>
  <dece:CID>${#Project#cid}</dece:CID>
  <dece:SoldAs>
    <dece:DisplayName Language="en">Avatar</dece:DisplayName>
    <dece:CID>${#Project#cid}</dece:CID>
  </dece:SoldAs>
  <dece:RightsProfiles>
    <dece:PurchaseProfile Profile="urn:dece:type:mediaprofile:highdefinition">
      <dece:BurnsLeft>0</dece:BurnsLeft>
      <dece:CanDownload>true</dece:CanDownload>
      <dece:CanStream>true</dece:CanStream>
    </dece:PurchaseProfile>
  <!--  <dece:RentalProfile>
      <dece:AbsoluteExpiration>2001-12-31T12:00:00</dece:AbsoluteExpiration> 
      <dece:DownloadToPlayMax>PT1004199059S</dece:DownloadToPlayMax>
      <dece:PlayDurationMax>PT130S</dece:PlayDurationMax>
    </dece:RentalProfile> -->     
  </dece:RightsProfiles>
  <dece:LicenseAcqLoc DRMType="urn:dece:drm:playready:11">
    <dece:Location>https://dl.bestbuy.com/p/</dece:Location>
    <dece:Preference>1</dece:Preference>
  </dece:LicenseAcqLoc>
  <dece:LicenseAcqLoc DRMType="urn:dece:drm:playready:11">
    <dece:Location>https://dl.bestbuy.com/p/aaaa</dece:Location>
    <dece:Preference>2</dece:Preference>
  </dece:LicenseAcqLoc>
  <dece:LicenseAcqLoc DRMType="urn:dece:drm:playready:11">
    <dece:Location>https://dl.bestbuy.com/p/bbbb</dece:Location>
    <dece:Preference>3</dece:Preference>
  </dece:LicenseAcqLoc>
  <dece:FulfillmentWebLoc xsi:type="dece:ResourceLocation-type">
    <dece:Location>https://dl.bestbuy.com/p/cccc</dece:Location>
    <dece:Preference>1</dece:Preference>
  </dece:FulfillmentWebLoc>
  <dece:FulfillmentManifestLoc xsi:type="dece:ResourceLocation-type">
    <dece:Location>https://dl.bestbuy.com/p/dddddd</dece:Location>
    <dece:Preference>1</dece:Preference>
  </dece:FulfillmentManifestLoc>
  <dece:PurchaseInfo>
    <dece:RetailerID>urn:dece:org:org:dece:${#Project#rtrorgid}</dece:RetailerID>
    <dece:RetailerTransaction>99-${=(int)(Math.random()*100000)}-${=(int)(Math.random()*100000)}</dece:RetailerTransaction>
    <dece:PurchaseAccount>urn:dece:accountid:org:dece:${#Project#rtrnodeaccountid}</dece:PurchaseAccount>
    <dece:PurchaseUser>urn:dece:userid:org:dece:${#Project#rtrnodeuserid}</dece:PurchaseUser>
    <dece:PurchaseTime>2010-11-29T08:44:01Z</dece:PurchaseTime>
  </dece:PurchaseInfo>
  <dece:TokenInfo CreatedBy="urn:dece:userid:org:dece:${#Project#rtrnodeuserid}" CreatedDateTime="2001-12-31T12:00:00" LastModifiedBy="urn:dece:userid:org:dece:${#Project#nodertruserid}"   LastModifiedDateTime="2001-12-31T12:00:00">
    <dece:TransactionInfo CreatedBy="urn:dece:userid:org:dece:${#Project#rtrnodeuserid}" CreatedDateTime="2001-12-31T12:00:00" LastModifiedBy="urn:dece:userid:org:dece:${#Project#nodertruserid}" LastModifiedDateTime="2001-12-31T12:00:00">dece:TransactionInfo</dece:TransactionInfo>
  </dece:TokenInfo>
  <dece:ViewControl>
    <dece:AllowedUser></dece:AllowedUser>
  </dece:ViewControl>
</dece:RightsTokenData>
]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamCreate" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream" id="dd5fd66d-5678-437e-9cba-e6fb38a75aa0"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="22046f80-b8c3-4c9c-a06c-5c667531dfc0"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201 0</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 409 404 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>0</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="StreamCreate" mediaType="application/xml" postQueryString="false" id="62c3b47d-a1df-482c-9060-0d4e33d92d65"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamView" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{SH}" id="fdc6e249-958b-43c1-91bf-e2adb2f9325e"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>SH</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="fbaa00bc-8c4b-4edd-9ac9-1d10f9332e7b"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>405 400 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 405</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>401 400 404 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="StreamView" mediaType="application/xml" id="5002a010-eb0d-4c0d-82bd-04c3cb5bbfbb"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="STS" path="/rest/{MAJOR}/{MINOR}/SecurityToken/SecurityTokenExchange" id="129712ca-9cab-4cfe-addc-795001251aa3"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="657f9c5f-8ffa-4845-87fe-c5672c848bea"><con:settings/><con:parameters><con:parameter><con:name>tokentype</con:name><con:value>${#TestCase#tokentype}</con:value><con:style>QUERY</con:style><con:default>${#TestCase#tokentype}</con:default></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>201 0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>0</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="STS" mediaType="application/xml" postQueryString="false" id="c3786d89-a247-411b-802f-01d1cd063a26"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
<Credentials xmlns="http://www.decellc.org/schema">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
</Credentials>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="STS GET" path="/rest/{MAJOR}/{MINOR}/SecurityToken/Assertion/{ASSERTION}" id="33871f82-c8b7-4a0e-a076-876a6185a1d5"><con:settings/><con:parameters><con:parameter><con:name>ASSERTION</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUUID}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="44eff4f0-0c62-495a-b27d-6b4ab6d4c124"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>0</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="STS GET" mediaType="application/xml" id="4c2ee6f6-af8e-4fa0-940c-f4b28b1ba84f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamRenew" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" id="5b05f51d-deb8-4d66-be91-c806d93d4542"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>STREAM</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="PUT" method="PUT" id="268c8d0d-1842-4c37-ac16-7e561843c62a"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404 409</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Stream</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>409 400 404 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:request name="StreamRenew" mediaType="application/xml" postQueryString="false" id="5c698983-54ec-4732-a21a-2251e4f88bd5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreate Account" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" id="4be65c79-a60c-4736-8e28-23c32824dd0b"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="8abdd04c-1749-4f96-b918-b23d6c729583"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:request name="PolicyCreate Account" mediaType="application/xml" postQueryString="false" id="c8c9180d-aa19-47d6-beaa-dacea4c7bc36"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#SchemaNameSpace} dece.xsd" xmlns:dece="${#Project#SchemaNameSpace}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}
      <!--<dece:Resource>${#TestCase#policyResource}</dece:Resource>-->
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#policyCreator}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreate User" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="35a2a3de-ff8f-4bad-bc38-5483e592706f"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>USER</con:name><con:value>${#TestCase#assertionUserIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUserIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="949e64ec-abe9-4d77-89c5-90ecd5a7dd64"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201 0</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="PolicyCreate User" mediaType="application/xml" postQueryString="false" id="8940d944-f256-45c9-af87-507712e5da12"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#SchemaNameSpace} dece.xsd" xmlns:dece="${#Project#SchemaNameSpace}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}
      <!--<dece:Resource>${#TestCase#policyResource}</dece:Resource>-->
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#policyCreator}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamRenew1" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}/Renew" id="a87bc8b9-1e47-4db5-8a47-cf7d9f206a3e"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>STREAM</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="84b12514-97fa-49ad-97e8-97a7fe62f626"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404 409</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Stream</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:Stream</con:element></con:representation><con:request name="StreamRenew" mediaType="application/xml" postQueryString="false" id="d952e693-2475-4bf6-bfa9-cd503aa79001"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Coordinator APIs" type="rest" basePath="" id="6b31786a-1831-470f-a7bd-4a0861cac4bc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>https://${#Project#targetURL}</con:endpoint></con:endpoints><con:resource name="PolicyGet Account" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" id="9a91959b-1a89-4ad4-ae4d-edbb32affeb7"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="4cd3bc2f-1b75-4384-ae55-ecba93fb5ce6"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:PolicyList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="PolicyGet Account" mediaType="application/xml" id="b0cb64be-d218-447b-8e97-3fca21872c75"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Projec#targetPort}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyGet User" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="1cafd11e-319c-4004-96cf-03e20049f655"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>USER</con:name><con:value>${#TestCase#assertionUserIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUserIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="586acae4-ba53-4e8b-a4b3-d3a953cacc3d"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:PolicyList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="PolicyGet User" mediaType="application/xml" id="07c1feae-c8a3-48b6-ba28-896b041f5f6e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Projec#targetPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Policies" type="rest" basePath="" id="69ae8af0-72c8-49bf-b5a4-11bb0660603b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="PolicyDelete Account" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" id="322213e7-6560-44ee-8969-ea8bc0fa6971"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="DELETE" method="DELETE" id="5888a93f-7ca6-4d78-adf3-41f979c02a03"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:request name="PolicyDelete Account" mediaType="application/xml" id="5127be76-edea-4c6a-8ed3-f613c212a4bc"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyDelete User" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="397b694d-8187-4306-97c6-7a0b1f3eb609"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>USER</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUserIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="DELETE" method="DELETE" id="c598961d-ea5b-4bda-a2dc-2654b58468e5"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0 200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/082012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:request name="PolicyDelete User" mediaType="application/xml" id="087c1282-9555-4123-ad79-3ff8847cbbc0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="E2E" type="rest" basePath="" definitionUrl="E:\COmmon\E2E_1.wadl" id="8f406d0a-0c15-400c-bba3-b5d655e13ad9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/E:/COmmon/E2E_1.wadl"><con:part><con:url>file:/E:/COmmon/E2E_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="E2E"/>
  <resources base="">
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account" id="AccountCreate">
      <doc xml:lang="en" title="AccountCreate"/>
      <method name="POST" id="AccountCreate">
        <doc xml:lang="en" title="AccountCreate"/>
        <request/>
      </method>
    </resource>
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{AccountID}/User" id="UserCreate">
      <doc xml:lang="en" title="UserCreate"/>
      <param name="AccountID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="UserCreate">
        <doc xml:lang="en" title="UserCreate"/>
        <request>
          <representation mediaType="application/xml" element="coor:User" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </request>
        <response status="403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="coor:User" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/SecurityTokenExchange" id="STSCreate">
      <doc xml:lang="en" title="STSCreate"/>
      <param name="tokentype" default="urn:dece:type:tokentype:usernamepassword" type="xs:string" required="false" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="audience" default="${#TestCase#audienceList}" type="xs:string" required="false" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="STSCreate">
        <doc xml:lang="en" title="STSCreate"/>
        <request>
          <representation mediaType="application/xml" element="coor:Credentials" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </request>
        <response status="403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="coor:Credentials" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="201">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/Assertion/{ASSERTION}" id="STSGet">
      <doc xml:lang="en" title="STSGet"/>
      <param name="ASSERTION" default="${#TestCase#assertionUUID}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="STSGet">
        <doc xml:lang="en" title="STSGet"/>
        <request/>
        <response status="200">
          <representation mediaType="text/xml;charset=ISO-8859-1"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="PolicyCreateUser">
      <doc xml:lang="en" title="PolicyCreateUser"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="NodeUserId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyClass" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="PolicyCreateUser">
        <doc xml:lang="en" title="PolicyCreateUser"/>
        <request>
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </request>
        <response status="404">
          <representation mediaType="text/html; charset=iso-8859-1"/>
          <representation mediaType="text/xml"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="PolicyCreateAccount">
      <doc xml:lang="en" title="PolicyCreateAccount"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyClass" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="PolicyCreateAccount">
        <doc xml:lang="en" title="PolicyCreateAccount"/>
        <request>
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints/><con:resource name="AccountCreate" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account" id="f471421b-22d7-4b32-be30-80e7648ff7f2"><con:settings/><con:parameters/><con:method name="AccountCreate" method="POST" id="95dbbea2-2fc4-4f8d-b5f5-36bb1b1a4f4d"><con:settings/><con:parameters/><con:request name="Request 1" id="c710871f-141a-4e69-a0af-a868d639e5f2" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserCreate" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{AccountID}/User" id="c727fab6-a36c-43dc-b000-5a00571a34d0"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="UserCreate" method="POST" id="85e166c4-2b59-4aad-923d-5daea8d1d158"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="7a25fdad-3e8e-4cdd-8b8c-63c0efd727f7" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="STSCreate" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/SecurityTokenExchange" id="8ef31604-1139-4a6a-b830-ede6dbf30f22"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>tokentype</con:name><con:value>${#TestCase#tokentype}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#tokentype}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>audience</con:name><con:value>${#TestCase#audienceList}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#audienceList}</con:default></con:parameter></con:parameters><con:method name="STSCreate" method="POST" id="15e95400-d530-49ab-a05f-8f6b6d89edbe"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:Credentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:Credentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="c6ca80f4-c6df-4fd2-86b3-0225503bda49" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="STSGet" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/Assertion/{ASSERTION}" id="e8057867-42db-423e-a972-72894fc5a6df"><con:settings/><con:parameters><con:parameter><con:name>ASSERTION</con:name><con:value>${#TestCase#assertionUUID}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionUUID}</con:default></con:parameter></con:parameters><con:method name="STSGet" method="GET" id="3d5cb182-9855-449e-bc5f-4602153d2bb3"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="a03eb043-c47b-42b1-abbb-0695f5b79df0" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreateUser" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="b01af1f3-e22b-453c-ac44-65be69c59569"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>NodeUserId</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="PolicyCreateUser" method="POST" id="48562408-72e9-4fe8-81dc-5b0bd37c8410"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="eb861623-135e-4cfa-9764-679fdcc4ae06" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreateAccount" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="3518959b-4690-471b-9a05-49e9c7dbe85d"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="PolicyCreateAccount" method="POST" id="f430e6e3-b374-4def-b909-0ac5adfc7947"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="973c51cc-5717-43a4-8ad4-38915cad277c" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="AccountUserCreate" path="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account" id="c727fab6-a36c-43dc-b000-5a00571a34d0"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="AccountUserCreate" method="POST" id="85e166c4-2b59-4aad-923d-5daea8d1d158"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="7a25fdad-3e8e-4cdd-8b8c-63c0efd727f7" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsTokenDelete" type="rest" basePath="" definitionUrl="C:\Users\sourabh.verma\Desktop\RightsTokenDelete_1.wadl" id="269191a6-293d-459f-9683-b4596e5a96c2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/sourabh.verma/Desktop/RightsTokenDelete_1.wadl"><con:part><con:url>file:/C:/Users/sourabh.verma/Desktop/RightsTokenDelete_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="RightsTokenDelete"/>
  <resources base="${#Project#Provision_HostName}">
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" id="RightTokenDelete">
      <doc xml:lang="en" title="RightTokenDelete"/>
      <param name="AccountID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="RightsTokenID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="DELETE" id="RightsTokenDelete">
        <doc xml:lang="en" title="RightsTokenDelete"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml"/>
          <representation mediaType="application/xml; charset=UTF-8"/>
        </response>
        <response status="400 401 403 404 500">
          <representation mediaType="application/xml" element="sch:Errors" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
        <response status="500">
          <representation mediaType="text/html"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
        <response status="400 403 500">
          <representation mediaType="application/xml; charset=UTF-8"/>
        </response>
        <response status="412">
          <representation mediaType="text/html;charset=utf-8"/>
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
      </method>
      <method name="HEAD" id="HeadMethod">
        <doc xml:lang="en" title="HeadMethod"/>
        <request/>
      </method>
      <method name="PUT" id="PutMethod">
        <doc xml:lang="en" title="PutMethod"/>
        <request/>
        <response status="200">
          <representation mediaType=""/>
        </response>
      </method>
      <method name="GET" id="GetMethod">
        <doc xml:lang="en" title="GetMethod"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml" element="proj:RightsToken" xmlns:proj="${#Project#coordinatorSchema}"/>
        </response>
      </method>
      <method name="POST" id="PostMethod">
        <doc xml:lang="en" title="PostMethod"/>
        <request/>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints/><con:resource name="RightTokenDelete" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" id="ddf7c6e9-4585-4d8c-b299-522bec188b55"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>RightsTokenID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="RightsTokenDelete" method="DELETE" id="a9d0f7f9-3b60-438d-8bd6-34994ff2bd56"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 404 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>400 403 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>412</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="4907b433-3e0d-4e25-99f1-8f6a91b7a49a"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="HeadMethod" method="HEAD" id="f81045c6-2e9c-472c-ad89-99d4b06958d5"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json" id="85f618dc-8b58-46ab-aca6-ca58b6b0fb22"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PutMethod" method="PUT" id="d6514a60-001d-4b5b-8a54-6b13801b72f8"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="3841c7d7-d4a8-44da-aa0e-49267a16d0dd"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="GetMethod" method="GET" id="6f0a0457-7efe-4fb2-9f13-a5b9471e19b7"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:proj="${#Project#coordinatorSchema}">proj:RightsToken</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="bc4fb3dd-ff44-49cd-9c69-34864194dee4"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PostMethod" method="POST" id="43d78d84-6498-47ba-8a5f-9d5fb5bc9a26"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json" id="42c2427a-c06a-4517-960f-ca22b8342b79"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsTokenGet" type="rest" basePath="" definitionUrl="C:\Users\sourabh.verma\Desktop\RightsTokenGet_1.wadl" id="7471ba8b-5a0f-4ddd-948c-354e08aa0945" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/sourabh.verma/Desktop/RightsTokenGet_1.wadl"><con:part><con:url>file:/C:/Users/sourabh.verma/Desktop/RightsTokenGet_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="RightsTokenGet"/>
  <resources base="https://qa.p.uvvu.com:7001">
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" id="RightsTokenGet[ByTokenId]">
      <doc xml:lang="en" title="RightsTokenGet[ByTokenId]"/>
      <param name="AccountID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="RightsTokenID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="RightsTokenGet[byTokenID]">
        <doc xml:lang="en" title="RightsTokenGet[byTokenID]"/>
        <request/>
        <response status="400 401 403 404 500">
          <representation mediaType="application/xml" element="sch:Errors" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
        <response status="401 500 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml" element="sch:RightsTokenList" xmlns:sch="http://www.decellc.org/schema"/>
          <representation mediaType="application/xml;charset=ISO-8859-1"/>
        </response>
        <response status="403 500">
          <representation mediaType="text/xml"/>
        </response>
      </method>
      <method name="POST" id="PostMethod">
        <doc xml:lang="en" title="PostMethod"/>
        <request/>
      </method>
      <method name="PUT" id="PutMethod">
        <doc xml:lang="en" title="PutMethod"/>
        <request/>
      </method>
      <method name="DELETE" id="DeleteMethod">
        <doc xml:lang="en" title="DeleteMethod"/>
        <request/>
      </method>
      <method name="HEAD" id="HeadMethod">
        <doc xml:lang="en" title="HeadMethod"/>
        <request/>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>https://qa.p.uvvu.com:7001</con:endpoint></con:endpoints><con:resource name="RightsTokenGet[ByTokenId]" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" id="3a187c7d-07c5-4dde-b143-68f8a135b2b3"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>RightsTokenID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="RightsTokenGet[byTokenID]" method="GET" id="60008eb2-afbb-4824-9113-d874a710cfb4"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 404 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>401 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:RightsTokenList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>403 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="a19e589c-e8f7-4035-b984-8ef4f94ea032"><con:settings/><con:endpoint>https://qa.p.uvvu.com:7001</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PostMethod" method="POST" id="2b5a7a0b-87e4-452d-80e1-f2b025be1bb5"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json" id="c99abec3-36b8-47dd-8e0b-1e6d2ca148c5"><con:settings/><con:endpoint>https://qa.p.uvvu.com:7001</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PutMethod" method="PUT" id="1a6341b1-0b70-4c52-a1c9-cc6ca468a27e"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json" id="9c6e7c55-bdcf-4196-98ea-ac20583e1775"><con:settings/><con:endpoint>https://qa.p.uvvu.com:7001</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="DeleteMethod" method="DELETE" id="f38de41e-64bb-489c-b853-7d448f5828cb"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json" id="c81aed20-6229-4b0f-995f-7cf4bb5f8fd4"><con:settings/><con:endpoint>https://qa.p.uvvu.com:7001</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="HeadMethod" method="HEAD" id="3796bd53-9ebe-453f-b7a3-08201610246f"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json" id="7dea5eee-03b9-4eb5-86bd-16a8b81a8ce4"><con:settings/><con:endpoint>https://qa.p.uvvu.com:7001</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite name="00SetupScripts" id="765c747e-0a9a-48c8-862c-4bae25e4fb28"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Setup" searchProperties="true" id="b3a00664-46f2-4dc8-a6b6-ae6ff182c273"><con:settings/><con:testStep type="groovy" name="Set ENV Properties" id="a890207e-7e24-44cd-b918-d8b334052b06"><con:settings/><con:config><script>	def tC = testRunner.getTestCase();
	def tS = tC.getTestSuite();
	def tP = tS.getProject();

	log.info("Set Environment properties!!!");
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
	def projectPath = groovyUtils.projectPath
	log.info("Project Path : '" + projectPath + "'");

	def eNV = context.expand( '${#Project#ENV}' )
	log.info("Environment: '" + eNV+ "'");

	def propertiesPath = null;

	if (System.properties['os.name'].toLowerCase().contains('windows')) 
		{
				log.info "it's Windows OS!!";
				File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
				propertiesPath = temp.getCanonicalPath();
		} 
	else 
		{
				log.info "it's Linux OS!!";
				File temp = new File(projectPath + "/../../../Properties/");
				propertiesPath = temp.getCanonicalPath();
		}
		
	log.info("Properties File Location : '" + propertiesPath+ "'");


	def propMap=[:]
	BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));
	log.info("Load property file : '" + propertiesPath + "/" + eNV +"project.properties"+ "'");
	String line;
	while ((line = reader.readLine()) != null)
		{
			if (line.trim().length()==0) continue;
			if (line.charAt(0)=='#') continue;

			int delimPosition = line.indexOf("=");
			String key = line.substring(0, delimPosition-0).trim();
			String value = line.substring(delimPosition+1).trim();
			propMap.put(key, value);
		}

	propMap.each{ k, v -> tP.setPropertyValue(k,v)}
	
	tP.setPropertyValue("APID",tP.getPropertyValue("Streams_APID"));
tP.setPropertyValue("ALID",tP.getPropertyValue("Streams_ALID"));
tP.setPropertyValue("CID",tP.getPropertyValue("Streams_CID"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Set_CoordinatorSchema" id="dfc1dcaf-4624-4e6d-b1f3-4819e29e1f89"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "V2: "+tP.getPropertyValue("VersionMinor");

def v2 = context.expand( '${#Project#VersionMinor}' )
def schema = tP.getPropertyValue("coordinatorSchema_"+v2);

tP.setPropertyValue("coordinatorSchema",schema);
log.info "Setting the coordinatorSchema value ---- "+schema;

//a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));
//assert a.cidSetStatusActive('urn:dece:cid:file:STREAMS_CIDVersion_828445.txt')==1</script></con:config></con:testStep><con:testStep type="datasource" name="Country" id="2a987b55-39c7-4aa4-9f7c-d2886647c977"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">US&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">GB&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CA&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">IE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AU&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NZ&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AT&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">DE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CH&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">FR&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">BE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NL&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">LU&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Country</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="TOUSetup" id="82683891-a287-445f-b36a-e7a4eb21be05"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def tP = testSuite.getProject();

def dBHost = context.expand( '${#Project#targetSystem}' )

def country = context.expand( '${Country#Country}' )

def a = new dbUtils.dbUtils(log,dBHost);
String sql = """select consent_version from (select
	            consent_version            
	            from
	            CONSENT
	            where
	            CONSENT_URN = 'urn:dece:type:policy:TermsOfUse'
	            and
	            COUNTRY = '""" + country + """'
	            order by
	            consent_version desc)
	            where rownum &lt; 2""";             
	log.info sql;
        
        results = a.SelectFromDB(sql,dBHost);

//                            a.dbConnClose();
       assert results.length() > 0;
       log.info "results" + results;

       def myXML = new XmlSlurper().parseText(results);   

       log.info myXML.ResultSet.Row.CONSENT_VERSION.text();
                testCase.setPropertyValue("Consent_Version",myXML.ResultSet.Row.CONSENT_VERSION.text());
                

def consent_Version = context.expand( '${#TestCase#Consent_Version}' )

tP.setPropertyValue("TOU_"+country,consent_Version);


</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" disabled="true" id="deda74e0-f9ba-4fde-ada2-25a3d9581990"><con:settings/><con:config><dataSourceStep>Country</dataSourceStep><targetStep>TOUSetup</targetStep></con:config></con:testStep><con:testStep type="groovy" name="Set TOU Policy Resource" id="02d1d319-ddee-4e83-a333-0f55c869faa9"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def policy_TOU = context.expand( '${#Project#Policy_TOU}' )


String country = context.expand( '${#Project#Country}' );
def tOUUrl = context.expand( '${#Project#TOUUrl}' )

def touForCountry = "TOU_"+country
def consent_Version =  tP.getPropertyValue(touForCountry);

tP.setPropertyValue("policy_TOU",'https://'+ tOUUrl + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');

log.info "Policy TOU from Project level property " + tP.getPropertyValue("policy_TOU");
</script></con:config></con:testStep><con:testStep type="groovy" name="MicroService Enable/Disable Testcases" id="fde620ea-ecc1-4861-995e-e957b9745405"><con:settings/><con:config><script><![CDATA[
//TestCase
def testCase  = testRunner.getTestCase();
def microService = context.expand( '${#Project#microService}' ).toString();
ArrayList<String> Suit_lst=new ArrayList<String>();
//Get Arguments
 
def project = context.testCase.testSuite.project;

for (suiteName in project.testSuiteList) {
log.info suiteName.name;
Suit_lst.add(suiteName.name);
  
}

//log.info "suit"+Suit_lst.get(1);





ArrayList<String> Tstep=new ArrayList<String>();

def TStep1  = "Remove Account's StreamHandles";
def TStep2 = "Verify STREAM_DATA_HISTORY row";
def TStep3 = "Verify STREAM_DATA, STREAM_HISTORY row counts for the Account";
def TStep4 = "Post Test Cleanup";
def TStep5 ="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts"
def TStep6 ="Verify STREAM_DATA row"
def TStep7 = "Remove account's stream handles"
def TStep8 =  "Post Test Execution cleanup"
def TStep9 ="Remove all Parental Control Policies"

Tstep.add(TStep1);
Tstep.add(TStep2);
Tstep.add(TStep3);
Tstep.add(TStep4);
Tstep.add(TStep5);
Tstep.add(TStep6);
Tstep.add(TStep7);
Tstep.add(TStep8);
Tstep.add(TStep9);

for (String suit : Suit_lst)
{  def testSuite = suit;
     def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
     def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

   for(i = 0; i <= TCCount - 1; i++)
     {                                              
                def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
                testStepList  = targetTestCase.getTestStepList();
                testStepCount = targetTestCase.getTestStepCount();
                if(targetTestCase.isDisabled() == false)
                {
                                for(j = 0; j <= testStepCount - 1; j++)
                                {              
                                	      def q=0;  
                                                try
                                                {     
                                                          for (String T_step : Tstep)	
					                                {
                                                                if (testStepList[j].name == T_step) {
                                                                                
                                                                                targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
                                                                                //targetTestCase.removeTestStep(targetTestStep);
                                                                                if(microService=="ON")
																				{  
																				   targetTestStep.setDisabled(true)
																				   log.info "Disabled Step " + testStepList[j].name;
																				}
																				else
																				{  
																				   targetTestStep.setDisabled(false)
																				   log.info "Enabled Step " + testStepList[j].name;
																				}
                                                                         }
													q++;
																  
												}
                                                                
                                                                //stepScript = testStepList[j].getScript();
                                                                //stepScript = stepScript.replace(oldString, newString);
                                                                //targetTestStep.setScript(stepScript);                  
                                                }
                                                catch(Throwable e)
                                                {
                                                                log.info "ERROR:" + e;
                                                }              
                                }
                }
    } 
}                                                                                             
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Identify Flaky Testcases" id="1f136748-ea99-4117-be05-88a0c669a7f3"><con:settings/><con:config><script>//Project Level Variable name – FLAKYSELECTOR.
//Possible Values – all, only_flaky, without_flaky
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tc_condition  = context.expand( '${#Project#FLAKYSELECTOR}' ).toString();
log.info tc_condition

tP.getTestSuiteList().each
{
      if(!it.getName().toLowerCase().contains("setup") &amp;&amp; !it.isDisabled())
       {
                it.getTestCaseList().each
         {
             if(tc_condition.toLowerCase()=="all")
             {
                                
                 if(it.getName().toLowerCase().contains("migrated"))
                       it.setDisabled(true);  
                   else 
                         if (!it.isDisabled()) {
                               it.setDisabled(false);
                           }
                                                                                                              
                }
                                                                
             else if(tc_condition.toLowerCase()=="only_flaky")
               {
                  if(it.getName().toLowerCase().contains("flaky"))
                                                it.setDisabled(false);  
                  else
                         it.setDisabled(true);
                }
                else
                {
                   if(it.getName().toLowerCase().contains("migrated") || it.getName().toLowerCase().contains("flaky"))
                                           it.setDisabled(true);  
                   else
                        if (!it.isDisabled()) {
                                it.setDisabled(false);
                                 }
 
                }
           }
        }
}

</script></con:config></con:testStep><con:properties><con:property><con:name>Consent_Version</con:name><con:value>20140811</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48eef7a0-e5f2-4926-99bb-c9ecd11b1888</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0f3550c-c4aa-4ddc-abb8-3d629c23599f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>396d1d6b-33dd-48d6-b41d-40fc4be4bc57</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="P0 Test Cases" id="b5c1dfee-0c95-4df4-854b-66af11e66743"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00000 - StreamRenew - LLP - Test Suite Staging" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="ed480236-8baf-4fe6-8150-1c1cbb8e1005"><con:description> This test case will verify the proper response from the Application Tier layer with malformed stream handle values. </con:description><con:settings/><con:testStep type="groovy" name="Establish data for RET,LLASP,DLASP" id="57585dd3-3048-4302-9957-b017eeaf5719"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("E_2_E");

def runnerTS = myTS.run( null , false )

assert runnerTS.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="b33f7226-2106-4d87-842d-b3f518b385d0"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_FOUND");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="918479f8-bb1b-4a02-acac-9d926d083750"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update MD_BASIC_RATING_SET.IS_ADULT to 'N'" id="dcf2df4f-5383-4d08-8e48-ae46c0470727"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String cid = tP.getPropertyValue("cid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.sqlSetIsAdult(cid,"N") == 1;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'active'" id="588c0f9c-d3ee-43dc-aae1-029bfeeffb6f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusActive(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'active'" id="4764a101-2255-4438-a1bd-9cda4d00f306"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetAssetMapStatusActive(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="c8fd1ca6-a81d-409c-bb37-03aaf2a9b39d" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log);
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove all Parental Control Policies" id="bfc173f9-3e02-4703-b221-1680c40e5e7a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="bcd720ec-6f55-4358-9f3e-c6e345da2897"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="ba29af1e-37ba-4331-bd10-035c83739e3d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_034019</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">147666C1A0112808E05305991F0ACC22</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">147666C2BA19280AE05305991F0AAFC9</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvOYMt5YXYEqh+UOExIymElIXlKK3ICILYMlseTrRzLgACG5zMyTS+1W9+lFp/uSoSi0XY8xSDiJaW4VhZS5qbSmiYS6MWKEuRRFwFyOXd+76bp23nTR7oqW6zRr2nPBsYOSVX3RoWIhvRBUqjoaBYFuFrEJdqWMy0FZqjImoEMZR5TXNNu0irpZ0O3CwDJds+wWinmrUn3ScveQMGlbquRNbQtqxWrahPOZaxjL5TK/dPJxMjZs07SM4U3XxxOIkFa/3ESUOkrqW32cDwBDGOI8jiPj0jjQuQyY65MxRVwksPUVfObLNMyqIXUCRsbftOwuBB06itNjA9GYEoxC8oZUfm6AT+Ig54XjOCF8En0ahGUqwzqssI6tAv2mGYfQzjR0gDBhSGcTZG1t9WEECVAMuV/9Tk37dl7V0quDBFE2ipOIHR7/DA/QBYTxDAKd7cLaQjvf4IlM1S8Bux2KQ8HIAm5Vs84QBratJuDzTeXuEhiRVZcw2aArptAZ+/COjptsNMkYGP+bAu0VZ2PkHoUC6mhxc9FG0fTqjTDnp2Xf0/6azIvX+GFcSwHsK6eCrLSb41FTZk20uRENo4fbi7XTHFwsm2XzftHq+aXriRdjQroXdBj02vS2Mm+GBrl7jNBTeX29YkOP3r6YV9Nm2/cNj1XGj3fJf9EPa+w43/3oibzcRqLx1not9lp2O2kJf7qOfqyN6qr/6gyHjvC6pWp8Me82o96reYFnV6MpOAxE43oS3xTXj9cPFm//8lvw9nOJPLOHvOL33mMtC2cP/6Fs9+Z98TIFzHdH1QadZq4tq4T412SmJCTQR6mqO1PkwzhQrtXVLcUdrpB0RwJX1nBztgrlUqnUsK88q2JXTK9lFh2zWK1abdPz2o3qjmQ2KI4gNmI6IsqXotxN23wNEEcuAxpAoi9iIZmOaV9YbCKOch3al48gpgwGsaRnaz0JEAmnk7FYWhO6qLKigLWYLrTcbcx7tJd4Iw7JISc7B5zcB0xmBBRxq75msrEZl7mYo4XgoZVfoDwFIak9USzr2oVK0WAkmoWgkBpRHIgQ8rPJLM2MwTZfW0eYpdJ+a5C+tk/jOv63S4HUCYhSYCqWK5BlhBPDxdkF8iHg0skhtDPviYCohyXzyROCN0gOf723ieqPrEeaXc+/24HOdP/g7nPDf7b+0kD3H5x3/9W5rOXHm8YX+TSOS5k5ChZkz+1u65DzSzJefdeIc2Tl53mxWIi09woFx0ikeUMSvGX4gIUk5PUgfgVqZCaMs6ZfhvrIcyY/xCf4hPoccYjkQ8mlxzPWHR+YWnc68oWvzt2lDlzKvHFY8VOyRihXNYX4y20Ou1jpSfGd/CzjJHgv1wlbe35knHLb4YSO1UlNvvUnTYFjaZZIzo6TfeOnDJxyfijMkpxh4bKbXgSHz//kFBnXNIRxLCjvNLVUsD8gUpx8PQP3XemDmXQGZUsp+f+tVCdpC2CQqywjqX21W7iq/+l4b8hsnZ6YM5ZnWqacM5X9OdNo2HaWlAN09Q/ij5K9PB33eP03</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:147666C2BA18280AE05305991F0AAFC9</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">147666C2BA18280AE05305991F0AAFC9</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">147666C1A0102808E05305991F0ACC22</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:147666C1A0102808E05305991F0ACC22</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">147666C1A0182808E05305991F0ACC22</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:147666C1A0182808E05305991F0ACC22</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81219</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>750b6e2e-c17b-4c09-9a71-ad88f105a18f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57585dd3-3048-4302-9957-b017eeaf5719</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32053 - StreamRenew - LLP - Full user can renew full-user created stream-200 OK" searchProperties="true" id="19116f8e-966e-4d2d-a170-8f7272b71cd4"><con:description>This test case will verify that a full userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="5111ff34-95aa-4763-9df6-8777dbbb1355"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
//tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Passwordllp"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="9841f0aa-25dd-4484-912f-1a056173b376"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="6d06c8b0-733b-46be-815f-362d434186c6" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="eb6d4f50-85ac-4eb4-be54-d9ff0ac0333f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="1b187d4c-c2b8-49d9-a803-ef7697f10243"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="e2b9a5f3-06d5-4041-9a71-e78dbff66d48"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="923bbf86-ecee-410b-a592-1bffe7814cbd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="58a579a4-c8b5-4405-b022-d06d23b90a2c" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="f6501e1d-3f8a-4980-86f6-8f44af100a72" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="a87ea64f-a097-4299-9dec-45f4365cc8f2" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="981ffb29-8f48-41f3-b441-803ccd58e5f5" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>F380F2ACFD6E4DC68E3EB5C45D2DFE8F</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvOYMt5YXYEqh+UOExIymElIXlKK3ICILYMlseTrRzLgACG5zMyTS+1W9+lFp/uSoSi0XY8xSDiJaW4VhZS5qbSmiYS6MWKEuRRFwFyOXd+76bp23nTR7oqW6zRr2nPBsYOSVX3RoWIhvRBUqjoaBYFuFrEJdqWMy0FZqjImoEMZR5TXNNu0irpZ0O3CwDJds+wWinmrUn3ScveQMGlbquRNbQtqxWrahPOZaxjL5TK/dPJxMjZs07SM4U3XxxOIkFa/3ESUOkrqW32cDwBDGOI8jiPj0jjQuQyY65MxRVwksPUVfObLNMyqIXUCRsbftOwuBB06itNjA9GYEoxC8oZUfm6AT+Ig54XjOCF8En0ahGUqwzqssI6tAv2mGYfQzjR0gDBhSGcTZG1t9WEECVAMuV/9Tk37dl7V0quDBFE2ipOIHR7/DA/QBYTxDAKd7cLaQjvf4IlM1S8Bux2KQ8HIAm5Vs84QBratJuDzTeXuEhiRVZcw2aArptAZ+/COjptsNMkYGP+bAu0VZ2PkHoUC6mhxc9FG0fTqjTDnp2Xf0/6azIvX+GFcSwHsK6eCrLSb41FTZk20uRENo4fbi7XTHFwsm2XzftHq+aXriRdjQroXdBj02vS2Mm+GBrl7jNBTeX29YkOP3r6YV9Nm2/cNj1XGj3fJf9EPa+w43/3oibzcRqLx1not9lp2O2kJf7qOfqyN6qr/6gyHjvC6pWp8Me82o96reYFnV6MpOAxE43oS3xTXj9cPFm//8lvw9nOJPLOHvOL33mMtC2cP/6Fs9+Z98TIFzHdH1QadZq4tq4T412SmJCTQR6mqO1PkwzhQrtXVLcUdrpB0RwJX1nBztgrlUqnUsK88q2JXTK9lFh2zWK1abdPz2o3qjmQ2KI4gNmI6IsqXotxN23wNEEcuAxpAoi9iIZmOaV9YbCKOch3al48gpgwGsaRnaz0JEAmnk7FYWhO6qLKigLWYLrTcbcx7tJd4Iw7JISc7B5zcB0xmBBRxq75msrEZl7mYo4XgoZVfoDwFIak9USzr2oVK0WAkmoWgkBpRHIgQ8rPJLM2MwTZfW0eYpdJ+a5C+tk/jOv63S4HUCYhSYCqWK5BlhBPDxdkF8iHg0skhtDPviYCohyXzyROCN0gOf723ieqPrEeaXc+/24HOdP/g7nPDf7b+0kD3H5x3/9W5rOXHm8YX+TSOS5k5ChZkz+1u65DzSzJefdeIc2Tl53mxWIi09woFx0ikeUMSvGX4gIUk5PUgfgVqZCaMs6ZfhvrIcyY/xCf4hPoccYjkQ8mlxzPWHR+YWnc68oWvzt2lDlzKvHFY8VOyRihXNYX4y20Ou1jpSfGd/CzjJHgv1wlbe35knHLb4YSO1UlNvvUnTYFjaZZIzo6TfeOnDJxyfijMkpxh4bKbXgSHz//kFBnXNIRxLCjvNLVUsD8gUpx8PQP3XemDmXQGZUsp+f+tVCdpC2CQqywjqX21W7iq/+l4b8hsnZ6YM5ZnWqacM5X9OdNo2HaWlAN09Q/ij5K9PB33eP03</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>147666C1A9ED2808E05305991F0ACC22</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_034019</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:F380F2ACFD6E4DC68E3EB5C45D2DFE8F</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:147666C1A9ED2808E05305991F0ACC22</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">147666C1A0112808E05305991F0ACC22</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">147666C2BA19280AE05305991F0AAFC9</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:147666C2BA18280AE05305991F0AAFC9</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">147666C2BA18280AE05305991F0AAFC9</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">147666C1A0102808E05305991F0ACC22</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:147666C1A0102808E05305991F0ACC22</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">147666C1A0182808E05305991F0ACC22</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81441</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:147666C1A0182808E05305991F0ACC22</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="Linked LASP Test Cases_P1" id="2af6cdea-6fd0-4c39-9710-3fa738301f99"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00000 - StreamRenew - LLP - Test Suite Staging" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="60315afb-970d-4ca1-b73a-d8b28418630c"><con:description> This test case will verify the proper response from the Application Tier layer with malformed stream handle values. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b0810e37-6668-404d-ad62-c08897d481e2"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_FOUND");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="eb1d18d7-db75-4052-b783-d25c5e7a3b96"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update MD_BASIC_RATING_SET.IS_ADULT to 'N'" id="70e497e4-a967-42e1-b19b-fff835dfa2eb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String cid = tP.getPropertyValue("cid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.sqlSetIsAdult(cid,"N") == 1;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'active'" id="9b2604f8-df3d-4a57-b072-26339460b34a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusActive(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'active'" id="76b2df35-bd83-4fb0-b4bd-ca48f73f939f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetAssetMapStatusActive(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="312db355-668e-4982-b319-b0c92f3bfed6" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log);
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove all Parental Control Policies" id="6bfef0e4-d70f-4647-bf14-eeca8e22718d" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="d1f489dd-80f7-445b-978f-c576d6da0d4c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="3482723e-39be-4d17-baea-4b77ce3deca4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>13D2A366BD130FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:org:200002</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVZbc9o6EP4rjPt4xlg2xoAnMGNuPU5JQoEmDS8dIS+gxsggyUDy649kwAVyObR98mi92v32om/3SuBF7PiBEMAlTVhhu4iZ8DNp3Ug58xMsqPAZXoDwJfGHwU3Pd4rIx4crRiFs140fNVSpgDOZmLVJpWy6JQImtmFiRq5rTz2Y1qYOUapCpBAyITGTdcNBdtlErml7I+T5paqPKsWS7Y6Nwj1woWwrlSIy9qC2om7MpVz6lrXZbIqbUjHhM8tByLa+3/SGZA4LbDSudhFljnhjr0+KERCIY1IkycK6sk50riLhD+mMYZly2PuK3vOFLFSzlE4k6OyTkd+FKGTTJDu2MEsYJTimL1jn5wbkPIkKQTxLOJXzxbtB2EgbNmFLTGK77JNhnUK70NAJQi6wKebY3tsawBQ4MAKFb4Owbny6rGrZ1RHHTEwTvhCnx9/DA2wNcbKEyBSHsPbQLjf4RqYaV0D8kJE4FXQNt7pZl5iA2FcTyOWmCn0OU7rtUaEadCs0OusY3tlxl402nYGQf1Kgo+LsjNzjOIXGfO7VNum/2xRZzs+wR4eVhf21F/TKKKxnAI6VM0Fe2t3xrCnzJtrdIK3+fTe0X7zu1rtdl9J/VmMPRWLa5c8/b0th5/E7RuNvX+a3Kd30P395GQ/c6t3jt7BVITet5TAevYRJmd/Pvka8P+LV+dP1y8PjerV6ICX64A6saMNn5dSLx+178tCxmmjyEATzNvWuq/G2NvFK7Tty3a1Mm5V+dN+ZbKKA3DjLz83Bdffp38ekycFaJeOHijWe1fNwjvCfyg5vfphOfgKRh6Nug7Bd6KoqYfkxmWkJjcxppuovNfkICUwaDX1Lc4efKrqjka9quDvbpbZTcdwWclDHQS27g8olVKnV7C4KXC9wDiSzQ3EGsZWwKdW+NOXu2uZjgGThC2ARcHOdpIrphPGBxTaWuBCygXoECRMwShQ92wSx9QTo07b6VLWdiXBipCRcgFG4TeQdu+PBVAI/JeXaCSkPgNAlBc3curGF6mwhVTJWeJ3K2C6ucZFBqrida5r1HbdatgRdLGPQUK1FEqUxFJfzZZYaS+y+jomJyKSDzih7bu8Gdv7vkAOlE1GtIHQsTVB1hFfTpeKXD4G8Cth7cwodzAdpRPXLUgmVnJIdktNfv/pEN0jeJO1eMOwfQOe6v3H3R2v4w/5DA72/cN77W+eqlq9vWh/k0zovZe4oWtMjt4e1Qw0wRXmNQyOusF1cFdP1Os16z3VLFlfmLcXwtjUEkipGfh4lT8Cs3IR10fjLUZ95zuWn+FI5Z0OJJSzUQylkxwv2nSEIve+E6olvL12mTlyqvEnYyrdkrVjtahrxh+sc8YnWU+K++mwSHv0q1xu2jvyoONW6Iymb6ZMefc/vNAVJlFmqSDvhx8bfMvCW81NhnuQci1TdNEklvP+noNm4bmBCkpTJsG1kguMJkeGUz0vwfym9MpMNoXwrpf+/lpo0awGiyFbpZ/b1cuHr/mezoymzd3o+aIKS5zXbtoO6nXY2aMq7QdOpNSt5Uk7QNV6JX0uO8nTe443/AA==</con:value></con:property><con:property><con:name>assertid</con:name><con:value/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>13D2A366BD120FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:13D2A366BD120FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>13D2724C020E20C1E05307991F0A46A2</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:13D2724C020E20C1E05307991F0A46A2</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:org:200002</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81219</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>13D2A366BD1A0FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>urn:dece:rightslockerid:org:dece:13D2A366BD1A0FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_121015</con:value></con:property><con:property><con:name>useroid</con:name><con:value>13D2724C020F20C1E05307991F0A46A2</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>750b6e2e-c17b-4c09-9a71-ad88f105a18f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_11000 - StreamRenew - LLP - StreamHandleInvalid - Stream handle malformed-400 Bad Request_MIGRATED" searchProperties="true" id="c7c0527b-5e2c-4981-9258-833fac4ca252" disabled="true"><con:description> This test case will verify the proper response from the Application Tier layer with malformed stream handle values. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9ae15978-1190-4e30-98e5-930ba7e0fca0"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_VALID");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="620ab39a-8376-4c21-875b-3854509b6409"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="c1355694-48d5-4bb1-8125-557930e546b9" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log);
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="3f866038-7a62-474e-a687-4ab17fdcde46"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="574e7f09-2dd1-420b-9551-ebe0ea9c25bd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasource" name="Grid of maliformed stream handles" id="41108f89-b801-41b7-a56d-e99da6424759"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:B&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:aaaaaaBBBBBcccccc&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:!!!!&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:1000-a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:a39999b&lt;/con:entry></row></con:configuration></con:dataSource><con:property>streamhandle</con:property><con:startRow/><con:endRow/><con:trimValues>true</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>false</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="737147ef-fb1c-456a-8940-23c66d1ced8e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>streamhandle</con:name><con:sourceType>streamhandle</con:sourceType><con:sourceStep>Grid of maliformed stream handles</con:sourceStep><con:sourcePath/><con:targetType>streamhandleFULL_body</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="9ac9c77b-0c02-4cb8-86db-cf3bcbeddef3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Process next stream handle in Grid" id="7d957383-2dc9-49f8-b8f6-4a408ff98963"><con:settings/><con:config><dataSourceStep>Grid of maliformed stream handles</dataSourceStep><targetStep>Property Transfer</targetStep></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="42bed993-ba10-46b1-b088-60e537101ff0" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbStreams(log);

assert a.streamGetStreamDataRowCount(acct) == 0;
assert b.streamGetStreamDataHistoryRowCount(acct) == 0;</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_121015</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:AC670597A591467AA3E7B86EFD283F7C</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2A366BD130FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2724C020F20C1E05307991F0A46A2</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPt4xlg2xoAnMGNuPU5JQoEmDS8dIS+gxsggyUDy649kwAVyObR98mi92v32om/3SuBF7PiBEMAlTVhhu4iZ8DNp3Ug58xMsqPAZXoDwJfGHwU3Pd4rIx4crRiFs140fNVSpgDOZmLVJpWy6JQImtmFiRq5rTz2Y1qYOUapCpBAyITGTdcNBdtlErml7I+T5paqPKsWS7Y6Nwj1woWwrlSIy9qC2om7MpVz6lrXZbIqbUjHhM8tByLa+3/SGZA4LbDSudhFljnhjr0+KERCIY1IkycK6sk50riLhD+mMYZly2PuK3vOFLFSzlE4k6OyTkd+FKGTTJDu2MEsYJTimL1jn5wbkPIkKQTxLOJXzxbtB2EgbNmFLTGK77JNhnUK70NAJQi6wKebY3tsawBQ4MAKFb4Owbny6rGrZ1RHHTEwTvhCnx9/DA2wNcbKEyBSHsPbQLjf4RqYaV0D8kJE4FXQNt7pZl5iA2FcTyOWmCn0OU7rtUaEadCs0OusY3tlxl402nYGQf1Kgo+LsjNzjOIXGfO7VNum/2xRZzs+wR4eVhf21F/TKKKxnAI6VM0Fe2t3xrCnzJtrdIK3+fTe0X7zu1rtdl9J/VmMPRWLa5c8/b0th5/E7RuNvX+a3Kd30P395GQ/c6t3jt7BVITet5TAevYRJmd/Pvka8P+LV+dP1y8PjerV6ICX64A6saMNn5dSLx+178tCxmmjyEATzNvWuq/G2NvFK7Tty3a1Mm5V+dN+ZbKKA3DjLz83Bdffp38ekycFaJeOHijWe1fNwjvCfyg5vfphOfgKRh6Nug7Bd6KoqYfkxmWkJjcxppuovNfkICUwaDX1Lc4efKrqjka9quDvbpbZTcdwWclDHQS27g8olVKnV7C4KXC9wDiSzQ3EGsZWwKdW+NOXu2uZjgGThC2ARcHOdpIrphPGBxTaWuBCygXoECRMwShQ92wSx9QTo07b6VLWdiXBipCRcgFG4TeQdu+PBVAI/JeXaCSkPgNAlBc3curGF6mwhVTJWeJ3K2C6ucZFBqrida5r1HbdatgRdLGPQUK1FEqUxFJfzZZYaS+y+jomJyKSDzih7bu8Gdv7vkAOlE1GtIHQsTVB1hFfTpeKXD4G8Cth7cwodzAdpRPXLUgmVnJIdktNfv/pEN0jeJO1eMOwfQOe6v3H3R2v4w/5DA72/cN77W+eqlq9vWh/k0zovZe4oWtMjt4e1Qw0wRXmNQyOusF1cFdP1Os16z3VLFlfmLcXwtjUEkipGfh4lT8Cs3IR10fjLUZ95zuWn+FI5Z0OJJSzUQylkxwv2nSEIve+E6olvL12mTlyqvEnYyrdkrVjtahrxh+sc8YnWU+K++mwSHv0q1xu2jvyoONW6Iymb6ZMefc/vNAVJlFmqSDvhx8bfMvCW81NhnuQci1TdNEklvP+noNm4bmBCkpTJsG1kguMJkeGUz0vwfym9MpMNoXwrpf+/lpo0awGiyFbpZ/b1cuHr/mezoymzd3o+aIKS5zXbtoO6nXY2aMq7QdOpNSt5Uk7QNV6JX0uO8nTe443/AA==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_VALID</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2724C020E20C1E05307991F0A46A2</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2724C020E20C1E05307991F0A46A2</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2A366BD120FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2A366BD120FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2A366BD1A0FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81220</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2A366BD1A0FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2A366BEA60FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2A366BEA60FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>streamhandleFULL_body</con:name><con:value>urn:dece:streamhandleid:org:dece:a39999b</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>AC670597A591467AA3E7B86EFD283F7C</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>3f866038-7a62-474e-a687-4ab17fdcde46</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>574e7f09-2dd1-420b-9551-ebe0ea9c25bd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_11001 - StreamRenew - LLP - StreamNotFound - Stream handle does not exist-404 Not Found_MIGRATED" searchProperties="true" id="dde67f15-11a7-49f1-8ab6-486fc3dfb39e" disabled="true"><con:description> This test case will verify the proper response from the Application Tier layer when the API is invoked with a nonexistent stream handle.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2a24e27f-4f16-43fc-8ad1-53713bc6ec56"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_FOUND");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="63bc1d1c-e473-41f3-8993-30f70f84d746"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="d763123b-328f-4c20-85a7-c9926f2ae301" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log);
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="d5e21936-b3ab-422d-adb2-5a3a553b9459"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Create nonexistent stream handle" id="d93c2391-9de3-4bb8-8fa6-7b0fc65eea51"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new generalUtils.generalUtils(log);

String x = a.randomHexString(40);
String b = tP.getPropertyValue("urnstream") + x;

tC.setPropertyValue("streamhandleFULL",b);

this.log.info "a[$a] b[$b] x[$x]";</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="d97d63db-53ad-42a9-bb16-d40461b0b46b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="51c9be89-ed26-4d75-a38b-eb608d4b10fd" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbStreams(log);

assert a.streamGetStreamDataRowCount(acct) == 0;
assert b.streamGetStreamDataHistoryRowCount(acct) == 0;</script></con:config></con:testStep><con:testStep type="groovy" name="Generate another request if necessary" id="bb9e05af-caf4-46c9-b793-17c9da421bcb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Create nonexistent stream handle");
}</script></con:config></con:testStep><con:properties><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>3</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPt4xlg2xoAnMGNuPU5JQoEmDS8dIS+gxsggyUDy649kwAVyObR98mi92v32om/3SuBF7PiBEMAlTVhhu4iZ8DNp3Ug58xMsqPAZXoDwJfGHwU3Pd4rIx4crRiFs140fNVSpgDOZmLVJpWy6JQImtmFiRq5rTz2Y1qYOUapCpBAyITGTdcNBdtlErml7I+T5paqPKsWS7Y6Nwj1woWwrlSIy9qC2om7MpVz6lrXZbIqbUjHhM8tByLa+3/SGZA4LbDSudhFljnhjr0+KERCIY1IkycK6sk50riLhD+mMYZly2PuK3vOFLFSzlE4k6OyTkd+FKGTTJDu2MEsYJTimL1jn5wbkPIkKQTxLOJXzxbtB2EgbNmFLTGK77JNhnUK70NAJQi6wKebY3tsawBQ4MAKFb4Owbny6rGrZ1RHHTEwTvhCnx9/DA2wNcbKEyBSHsPbQLjf4RqYaV0D8kJE4FXQNt7pZl5iA2FcTyOWmCn0OU7rtUaEadCs0OusY3tlxl402nYGQf1Kgo+LsjNzjOIXGfO7VNum/2xRZzs+wR4eVhf21F/TKKKxnAI6VM0Fe2t3xrCnzJtrdIK3+fTe0X7zu1rtdl9J/VmMPRWLa5c8/b0th5/E7RuNvX+a3Kd30P395GQ/c6t3jt7BVITet5TAevYRJmd/Pvka8P+LV+dP1y8PjerV6ICX64A6saMNn5dSLx+178tCxmmjyEATzNvWuq/G2NvFK7Tty3a1Mm5V+dN+ZbKKA3DjLz83Bdffp38ekycFaJeOHijWe1fNwjvCfyg5vfphOfgKRh6Nug7Bd6KoqYfkxmWkJjcxppuovNfkICUwaDX1Lc4efKrqjka9quDvbpbZTcdwWclDHQS27g8olVKnV7C4KXC9wDiSzQ3EGsZWwKdW+NOXu2uZjgGThC2ARcHOdpIrphPGBxTaWuBCygXoECRMwShQ92wSx9QTo07b6VLWdiXBipCRcgFG4TeQdu+PBVAI/JeXaCSkPgNAlBc3curGF6mwhVTJWeJ3K2C6ucZFBqrida5r1HbdatgRdLGPQUK1FEqUxFJfzZZYaS+y+jomJyKSDzih7bu8Gdv7vkAOlE1GtIHQsTVB1hFfTpeKXD4G8Cth7cwodzAdpRPXLUgmVnJIdktNfv/pEN0jeJO1eMOwfQOe6v3H3R2v4w/5DA72/cN77W+eqlq9vWh/k0zovZe4oWtMjt4e1Qw0wRXmNQyOusF1cFdP1Os16z3VLFlfmLcXwtjUEkipGfh4lT8Cs3IR10fjLUZ95zuWn+FI5Z0OJJSzUQylkxwv2nSEIve+E6olvL12mTlyqvEnYyrdkrVjtahrxh+sc8YnWU+K++mwSHv0q1xu2jvyoONW6Iymb6ZMefc/vNAVJlFmqSDvhx8bfMvCW81NhnuQci1TdNEklvP+noNm4bmBCkpTJsG1kguMJkeGUz0vwfym9MpMNoXwrpf+/lpo0awGiyFbpZ/b1cuHr/mezoymzd3o+aIKS5zXbtoO6nXY2aMq7QdOpNSt5Uk7QNV6JX0uO8nTe443/AA==</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2A366BF780FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>100</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>bstreamcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>bstreamhistcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>astreamcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>astreamhistcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_121015</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:83257FBA8E98113C28FE96A5F47156DC49FFD9B8</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2A366BD130FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2724C020F20C1E05307991F0A46A2</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>25</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2724C020E20C1E05307991F0A46A2</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2724C020E20C1E05307991F0A46A2</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2A366BD120FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2A366BD120FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2A366BD1A0FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81221</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2A366BD1A0FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2A366BF780FEDE05305991F0AE9B7</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>d5e21936-b3ab-422d-adb2-5a3a553b9459</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a24e27f-4f16-43fc-8ad1-53713bc6ec56</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63bc1d1c-e473-41f3-8993-30f70f84d746</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d763123b-328f-4c20-85a7-c9926f2ae301</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d93c2391-9de3-4bb8-8fa6-7b0fc65eea51</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d97d63db-53ad-42a9-bb16-d40461b0b46b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>51c9be89-ed26-4d75-a38b-eb608d4b10fd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb9e05af-caf4-46c9-b793-17c9da421bcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_11010 - StreamRenew - LLP - StreamNotActive - Verification of stream renew after stream delete -403 Forbidden" searchProperties="true" id="eadd3575-d953-45ea-9d5b-68471c090e8c"><con:description> This test case will verify the proper response from the Application Tier layer when the API is invoked with a stream handle owned by the same account but a different LASP</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f833e515-6cfb-4df8-8cbc-25064de10113"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="6e6bec39-9217-452b-b511-c0c063fc796a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="3814b6b8-1a67-48a7-a6f7-20182c3b29a2" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="b9a07b84-f6c1-4954-949f-c908e8de93e6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="52c5eecd-9ff6-4c80-8740-6505e5086042"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="e2110e4d-d84b-46b9-ade1-239d5663413b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="606bf326-1af5-4cfb-a766-3972b9fc8dba"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="124e76f9-7d4d-4e2e-ba5c-81817ce773d4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="24bf6cb8-00a6-4c1f-838e-44340044cd0a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="3804e75d-7aa7-46ed-be05-6948d9548749" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>DF589372A61445E783A88F598E55017B</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPt4xlg2xoAnMGNuPU5JQoEmDS8dIS+gxsggyUDy649kwAVyObR98mi92v32om/3SuBF7PiBEMAlTVhhu4iZ8DNp3Ug58xMsqPAZXoDwJfGHwU3Pd4rIx4crRiFs140fNVSpgDOZmLVJpWy6JQImtmFiRq5rTz2Y1qYOUapCpBAyITGTdcNBdtlErml7I+T5paqPKsWS7Y6Nwj1woWwrlSIy9qC2om7MpVz6lrXZbIqbUjHhM8tByLa+3/SGZA4LbDSudhFljnhjr0+KERCIY1IkycK6sk50riLhD+mMYZly2PuK3vOFLFSzlE4k6OyTkd+FKGTTJDu2MEsYJTimL1jn5wbkPIkKQTxLOJXzxbtB2EgbNmFLTGK77JNhnUK70NAJQi6wKebY3tsawBQ4MAKFb4Owbny6rGrZ1RHHTEwTvhCnx9/DA2wNcbKEyBSHsPbQLjf4RqYaV0D8kJE4FXQNt7pZl5iA2FcTyOWmCn0OU7rtUaEadCs0OusY3tlxl402nYGQf1Kgo+LsjNzjOIXGfO7VNum/2xRZzs+wR4eVhf21F/TKKKxnAI6VM0Fe2t3xrCnzJtrdIK3+fTe0X7zu1rtdl9J/VmMPRWLa5c8/b0th5/E7RuNvX+a3Kd30P395GQ/c6t3jt7BVITet5TAevYRJmd/Pvka8P+LV+dP1y8PjerV6ICX64A6saMNn5dSLx+178tCxmmjyEATzNvWuq/G2NvFK7Tty3a1Mm5V+dN+ZbKKA3DjLz83Bdffp38ekycFaJeOHijWe1fNwjvCfyg5vfphOfgKRh6Nug7Bd6KoqYfkxmWkJjcxppuovNfkICUwaDX1Lc4efKrqjka9quDvbpbZTcdwWclDHQS27g8olVKnV7C4KXC9wDiSzQ3EGsZWwKdW+NOXu2uZjgGThC2ARcHOdpIrphPGBxTaWuBCygXoECRMwShQ92wSx9QTo07b6VLWdiXBipCRcgFG4TeQdu+PBVAI/JeXaCSkPgNAlBc3curGF6mwhVTJWeJ3K2C6ucZFBqrida5r1HbdatgRdLGPQUK1FEqUxFJfzZZYaS+y+jomJyKSDzih7bu8Gdv7vkAOlE1GtIHQsTVB1hFfTpeKXD4G8Cth7cwodzAdpRPXLUgmVnJIdktNfv/pEN0jeJO1eMOwfQOe6v3H3R2v4w/5DA72/cN77W+eqlq9vWh/k0zovZe4oWtMjt4e1Qw0wRXmNQyOusF1cFdP1Os16z3VLFlfmLcXwtjUEkipGfh4lT8Cs3IR10fjLUZ95zuWn+FI5Z0OJJSzUQylkxwv2nSEIve+E6olvL12mTlyqvEnYyrdkrVjtahrxh+sc8YnWU+K++mwSHv0q1xu2jvyoONW6Iymb6ZMefc/vNAVJlFmqSDvhx8bfMvCW81NhnuQci1TdNEklvP+noNm4bmBCkpTJsG1kguMJkeGUz0vwfym9MpMNoXwrpf+/lpo0awGiyFbpZ/b1cuHr/mezoymzd3o+aIKS5zXbtoO6nXY2aMq7QdOpNSt5Uk7QNV6JX0uO8nTe443/AA==</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2B1C79D765914E05305991F0A33A5</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)}</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>righstokenid</con:name><con:value>141711</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>bstreamcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>bstreamhistcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>astreamcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>astreamhistcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_121015</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:DF589372A61445E783A88F598E55017B</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2A366BD130FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2724C020F20C1E05307991F0A46A2</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2724C020E20C1E05307991F0A46A2</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2724C020E20C1E05307991F0A46A2</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2A366BD120FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2A366BD120FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2B1C79D765914E05305991F0A33A5</con:value></con:property><con:property><con:name>expectDBClosedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2A366BD1A0FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2A366BD1A0FEDE05305991F0AE9B7</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>e2110e4d-d84b-46b9-ade1-239d5663413b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>606bf326-1af5-4cfb-a766-3972b9fc8dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12070 - StreamRenew - LLP - RightsTokenNotActive - RIGHTS_TOKEN.STATUS_ID of deleted cannot be renewed-403 Forbidden" searchProperties="true" id="b406f264-509b-4dfd-a373-82bc85d68fd9"><con:description>This test case will verify that an expired RightsToken has no impact on the renewal of the stream handle associated with it</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d2a3267c-cb33-4810-84ae-97db412b64a3"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","RT_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="149b6154-d5c4-49ba-a273-4cf38508e46f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="db94169f-b235-4b47-b014-a5e0fa1c75bf" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="6a1f7c15-3456-464d-912b-571dae574b04"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="edd288e9-6481-44c4-8ede-880bf31ab5fb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="d9eb01fe-ee15-494c-a34e-3890fa21205d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="eeb10329-6a3e-4f68-b670-2c083e153d86"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment RET to Delete Rights" id="447726c5-e738-4634-b885-8799a0af355b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","RET");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RIGHTS_TOKEN Delete" id="34171451-55f6-41bf-9de5-b0ae5ad4ec46"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenDeleteRequest")

myTC.setPropertyValue("TCaseName",tC.getName());
myTC.setPropertyValue("TSuiteName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment LLASP" id="81eb11d9-0ab3-4514-9d60-11481a0f1847"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
//def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")
//
//myTC.setPropertyValue("tName",tC.getName());
//myTC.setPropertyValue("sName",tS.getName());
//
//def runnerTC = myTC.run( null , false )
//
//assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="50379158-44b0-4463-b21f-2f781971414c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="b1c7f1ac-1d6a-49ff-b2fc-012b8e34d8ba" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="f6edbf68-18df-489a-bbf7-13043e2f70bf" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="ed41ec8c-da71-401a-aa5c-861fad48e3c4" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79E2D5914E05305991F0A33A5</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_121015</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:363B6D3A70C54AD1995AD2475693B7C0</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>363B6D3A70C54AD1995AD2475693B7C0</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2A366C36B0FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2A366C36B0FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822ACDD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ACDD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81262</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>RT_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79E2C5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvOYMl6wDXYFqsySCTNAEiDL8DIl5AYUbBksGUi+/koGHCDLZWaeXGq3Tp9e1N2XDEWh6fmMQcJJTAubKKTMy6RVJU2oFyNGmEdRBMzj2Bv43Y5nFnUP7a8ohXazqvwuVexy2Zm4KoyDiWqVx446LkOgWtbEMkwHlyZgCVXGUmhTxhHlVcXUDVvVLdVwhrrj2bqnO8WyWR4phQdImMAWKkVd2ZHasKoy43zhadp6vS6uS8U4mWqmrhvaU7czwDOIkFK73HqUGUpqO31cDABDGOIijiPtUjvSuQyYNyBTiniawM5W8JktXdNdTegEjEy/KfldCNp0EmfHBqIxJRiF5BXJ+HSBz+Kg4IfTOCF8Fn3qhKFLYBU2WMWGRb8p2jG1M4GOGCYMqWyGjB1WHyaQAMVQuO+3q8q387KWXR0miLJJnETs+PhnfICuIIwXwgLbu7Wjdj7gB5GqXQL22hSHKSMr6MliXSAMbJdNwOdDFW4TmJBNhzBRoBsm2WmH9E6O22g0yRQY/5sEHSRnC/KAwhRq09ns+QVazuvqdj4aNJLRKJmNoO1W6qyaEThUzgR5arfHk6LMi2h7IyotFxu32x1dXDXpfPOdOterl9WMT50Q8UYrCkcdXmFj58Kf3+j3Px978f335sP6/iXqB/aPQePH1V19TfThpPf0OA2c6zmYUV1v9QbzWLNvr5atcI1YeePeuUvH15e3Jfcu7j0OR4v7h0V4ffNreEF/9ulzuPbbd8/UvpmNu70fXfM6tZZj3jAvxq/Przeofv30y6/m7hzwP5bt3/wgHT8D5vujLIN2s3AlsoT4181MSkigTjJVbyGbD+NAuVKTt2Tv8FLR7kjgiRxuz0apadaNRtltmQ3bNayWbpd023WNK90vlXx732S2LE4oNmI6IdKWbLnbsvmaII48BjSARF3Fqeh0TPkCsYk4KrRpXzyCmDIYxqI9T3loGDbMEYGpgeNKmFbmY/q6REqhF/MbepP4Ew7JcU92j3pyHzBZEJCNW9Y1E4XNuIjFEq1SgV5coSKFVLT2RHZZz7QqtsZItAhBMtWiOEhDKC5miywyGtt+TRVhlkn7rWH22j716/TfPgRCJyBSgUlf6iDSCKfDxRK+7B1557Dz4RDaw/tpQOTDEvHkCcFbJse/3spE1kdeI82OP7jdk851/+Du78bgt/GXAJ1/MN75V+Mil+9val/EUztNZW4oWJEDs/utQ8wv0fFq+0JcIqO4LKarVZrVnmWVtETAa6LBG9oAcCoa8sswngPVcgjtrOmXsz6xnMuP+aV8RgcccYjEQylkxzPWnQEwue60xQvfnLtLHZkUceOw4R/JGqFY1STjL7c57GGpJ8S34rOOk+AtXR9gHdgRfopthxM6lSc5+V4+KQocC1gienacHIJ/BPCR8WNhHuScCxfVNE45fP6nIJtxVUEYxynl7aaSCQ4HRMaTvyzAe1N6B5PNoHwpJf+/laokKwEMYpVlJMOXu4Un659OD4bMzujpnHErpuk3mrbl193DOVPRS+U8KEfsau/E7yUHcTqt8dp/</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ACD64AB9E05305991F0A8037</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>d9eb01fe-ee15-494c-a34e-3890fa21205d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eeb10329-6a3e-4f68-b670-2c083e153d86</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>447726c5-e738-4634-b885-8799a0af355b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>81eb11d9-0ab3-4514-9d60-11481a0f1847</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12085 - StreamRenew - LLP - ContentIDNotActive - MD_BASIC CID status of 'deleted'-403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="456d288c-6f48-4c05-848c-df578c0abb48" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0c3aa1c3-751b-4565-8412-ab1068e22606"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","CID_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="39863fe7-4611-4931-ab14-2195138e4deb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="f9da5a63-5ab3-429b-bfdc-b764015a6554"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="1b76b11e-ea88-4727-8678-92b75d623ec4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="e19d6cdd-86d9-4bbf-94e4-c346c9fd29c6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="a628090d-de83-48fe-b289-008d0f9e0bc1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="86f991e8-f8d4-4142-95b1-876839ab66a6"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'deleted'" id="c427c0ca-fe82-46c8-92e4-7dc973c7d79e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusDeleted(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="6d80e651-f571-4caf-a618-e65ff3f93235"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="59046eb0-c674-4c2e-9c8f-1be997e3df90"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="82fd3702-df7c-4be6-8b36-750e8ed5afc7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="3439934c-aa97-40f7-851b-c1fb971d6bbf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'active'" id="97769302-572d-4405-9528-60b2b0d78689"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusActive(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="806176dc-7d3e-4d8e-8bdb-3b644e0e276a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140924_125110</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:03CB9D3459834554E05305991F0A2ED2</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:03CB912771AA25B0E05305991F0AAF4D</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">03CB864126970AB2E05305991F0AF2BB</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">03CB86C4645D44D8E05307991F0A8A0E</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPt4xli+cfEEZgwkLQ0JF1Oa5KUjZNkosWViyQb66ysZcIGQHNo+ebRe7X570bd7xWAcGY7LGE45SWhlHUeUOYW0pWQpdRLICHMojDFzOHI8927gGFXgwP0VpdLvtZQfpm1bQRPWVWDOddUyzYbamNsN1fRrCCELGNA2hSpjGe5TxiHlLcUAuqWCpmpYU1B3DN0xa1XLMp6UygynTNgWKlWg7ECtWUtZcL50NG21WlVXZjVJQ80AQNce7gYeWuAYKu2rbUSFo7S900dVHyMcRaiKkli70o50rnzmeCSkkGcp3vny3/MFNNDUhI7PSPhJKe9iv0+DpDh2IU0oQTAiP6HMzx3mi8SvuFGYpIQv4neD0IE0rOI1UpFu0U+KdgztQkNHCFMGVbaA+s7WBAc4xRThyrdJv6V8uqxqxdVpCikLkjRmx8c/w4NpjqNkiX2V7cPaQbvc4JlMta8wcvoURRkjOb6XzbqECLNdNTG63FRllOKArAeEiQZdM4lOO4R3ctxmo0dCzPjfFOigOFsjMxhluH3nsq/u4zO8G26eX3/2M++B57MvN8/5V7dVADhULgRlabfHk6Ysm2h7Y3DvTQyWjB/rUXPyWHsIp4/mXS0Mp1onsDfgGxiF4/V4PmT50KLLRRKEDZgNqDmuT9zr0ePTIK0/vd7eks/UjUff49FtBsDMHvZ6y1nvZa3XzO63Fy/7bx0Oa7nhPmyGzbGOrzH6svg8H4ONHSw7vej+u/slTBqroYH6T98bt+uvxrU2AbPui+3n/efxzPU+13fhnuA/lu3fvJfNnzHi+6Nsg36vciOqBPnHZCYlxFeDQtVZSvJhHFOutOUtyR1OJuiO+I6o4fYMzG6nUetaNcvuWlavcQ1sE9SbTf0GuA0XXO9JZoviBGI3oQGRviTlbtvmY4AodhimPk7VPMkE0zHlA4s9yGGlTyfiESSU4Wki6Fm35vPNipJ6VuOBbtOfflYnMA8MrFTuEz6kw9QNOE6PSFkHR6Q8wYgsCZbMLRubic5mXCTjFeYZj/RqDqsUZ4LbU0mzjmE1bI2ReBlhCVWLEz+LcHW5WBap0dj2a6gQsUI6uZ4Wz+3dwE7/7XMgdHwiFZiMpYNFHfGZ6WLsA3kTsH12Cu3Nu5lP5MsSCeUpQVskx79+94lskLJJegPXG+1Bl7p/cPdH1/uh/6WBwT84H/yrc1HLtze1D/KpnZaydOTn5MDtfu0QA0xQXnvfiK+w+lrN8jwrWq8uqT0V5jVZXA0YmodRJkh5M01eMNVKK9pFE7AEfuK8lB9DzPiCehxyHIu3UimOF6w8HmZy5emLV76+dJ86cilSx/Gan5N1I7GuScQfbnTIQVJPiEfis0pS/3fFztg68CPiFBsPJzSUJzn9Nu/0BUqEWSJ4O0kPjZ8zcM75sbBMcomFi4aaZxy//6ciCbmlQISSjPJ+TykEh0OiwMk3S+z8VnpjpphD5WJK/n8zVUnRAkjwrdAv7Mv9wpFPgIYHg2bn9O2ssXSj1qwBt2MUs8bezpobo9Mpk3KErv1G/FZykKfTHm//Ag==</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>CID_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:03CB86C4645C44D8E05307991F0A8A0E</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">03CB86C4645C44D8E05307991F0A8A0E</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">03CB864126960AB2E05305991F0AF2BB</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:03CB864126960AB2E05305991F0AF2BB</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>03CB912771AA25B0E05305991F0AAF4D</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>03CB9D3459834554E05305991F0A2ED2</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">03CB8641269E0AB2E05305991F0AF2BB</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:03CB8641269E0AB2E05305991F0AF2BB</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a628090d-de83-48fe-b289-008d0f9e0bc1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>86f991e8-f8d4-4142-95b1-876839ab66a6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12086 - StreamRenew - LLP - ContentIDNotActive - MD_BASIC CID status of 'suspended'-403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b67d99c0-d798-4c42-a96d-a933e3a99cb0" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f08404d2-fe6c-4559-a970-c877d689042a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","CID_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="9809f860-46b4-47ab-bf84-65cb171c27b8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="c19acd74-f995-4116-9440-39b2d5ee1a6a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="ba834f74-2f63-450f-b115-03a0c81e3086"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="f74508d6-21ab-48aa-8884-176117986e47"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="d5ec9990-c127-408e-9416-3be4ae92d47d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="ca1964fc-99ee-4c1f-b71b-8ae35cdd8520"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'suspended'" id="e12cb4af-7769-470d-908e-68f7ffea3c2e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusSuspended(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="f9eadcfa-cbec-43e4-80db-07bd9b42a85f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="c5e65c2e-1a21-4e12-938d-02a79f2fe0ca"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="79b904c3-a1fd-4b5f-8764-ab077f8721e3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="528e914f-9320-4960-b266-43f6217bfd4e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'active'" id="a136cf01-2865-4234-9363-c256e85a6bb9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusActive(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="9c9e548d-64b5-4885-9d91-d7408cb7b9e9"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140910_054347</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:02B3CD8F9FAE5169E05305991F0A27D2</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:02B3E4A024E36075E05305991F0AB3DB</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">02B3C0D613DE46A1E05307991F0AA557</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">02B3E33858FB4832E05307991F0AB13F</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvOYMl7ZXIEqgoeKMw5wIVvlZUrIAsTYkpFkQ/L1IxlwgCyXmXlyqd06fXpRd19ykMS21+UcMYEpqWySmHCvkLa1jBGPAo65R0CCuCegN+nehp5dNT2wv6JVAr+t/ZzOIgdNQUO3G6ihu9a0rjeRFen1GZg6pmXXHGsqVTnPUEC4AES0Ndu0XN1s6ZZ5Z7Y81/VMt2rX3Wet8oAYl9hSpWpqO1Ib3tYWQqSeYazX6+raqVI2N2zTtIyn23ACFygBWudy61FhiHV2+rAaIYjiGFYhTYxL40jnMuLeBM8JEBlDO1vRZ7ZMw2wZUifieP5NK++iKCAzWhx7gFCCIYjxK1DxuUViQaNKN55ThsUi+dQJy1TAOtpAHVou+aYZx9TOBDpiyDjQ+QJYO6wxmiGGCESV+3HQ1r6dl7Xi6h0DhM8oS/jx8c/4IJKjmKYo0vnerR218wE/iFTnEkEvIDDOOM7RQBVrCiDiu2wieD5UZcTQDG9CzGWBbrhiZxzSOzluo+HjOeLibxJ0kJwtyAOIM9QZJAvSp/3soTZZcvdxk93ejq5Xm4d8eN8uCBwqF4IytdvjSVGWRbS9MRnFjxYPHlc0HPA4wONH0pteD26aNffHqu6/NO1hPqdDMEgDKuCwF7d84syxb7+mjnUvekHmbsjomubz6eJpavy4Bjc362Xr5WLpT/8bPj0sRrVwErKg0UzvWwPgvFqtbLCxxzgc9n60Bskwj0n/2knDx8b6+fYuo2y1XDzM8wv3uU5vbi6WPSdkIUwW7Fe7dOeA/7Fs/+Yn2XSJoNgfVRkEfqUvswTE181MSXCkzwpVL1XNhwtEhNZRt1Tv8DLZ7nDkyRxuz6Z95Xx3nGat2e+6Tcf+btYcs9FqWX2ze2U5/X2T2bI4odijZIaVLdVyt2XzNUGYeByRCDE9p5nsdFz7AtEHAlQCMpaPgBKO7qhsz5YLTD7bNH4BNqNWKlorFhErbcZLrTKgYkiGrDsTiB01Zcs+aspjBHGKkercqrC5rGwuZDBWIM9EbFVzUCUok72dqTbr2W6zZnCcpDFSVI2ERlmMqukiLUJj8O3X1gHkhXT8/a54bp86dvpvHwOpE2GlwJUvV0jmEb2bLo5X2zvyzuHah1NoD9/NIqxelgyoYBhumRz/eqsTVSBlkfhhdzLaky51/+Duz97kp/WXAOE/GA//1bjM5fubxhfxNE5TWRqKcnxgdr92yAEmW15nX4grUF1VszzPitJrqNbOJLyhkmuYtjFBMJNN+eWO/kLEKFGMsyZgSfzEeCk/ppiJBZkIIFAi30qlOJ6x8kwQVytPIF/55tx96sikDJ1AG/GRrBfLdU0x/nKjgx5UelI8kp81ZdFbxj7AOrAj/ZQbj8Bkrk5q+r18UheQSlgs+zZlh+AfAXxk/FhYBrnkImRBTTOBPv9TUQ25rQEIaUZE4GuF4HBIFDzFS4q8N6V3MMUcKhdT/P+bqY6LEoBIrrMcF/hqv/DUEyDzg0GzM3o6a3qmX7cc33frXetw1nRrtUYZlCN2nXfi95KDOJ3WeOc3</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>CID_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:02B3E33858FA4832E05307991F0AB13F</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">02B3E33858FA4832E05307991F0AB13F</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">02B3C0D613DD46A1E05307991F0AA557</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:02B3C0D613DD46A1E05307991F0AA557</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>02B3E4A024E36075E05305991F0AB3DB</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>02B3CD8F9FAE5169E05305991F0A27D2</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">02B3C0D613E546A1E05307991F0AA557</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:02B3C0D613E546A1E05307991F0AA557</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>d5ec9990-c127-408e-9416-3be4ae92d47d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ca1964fc-99ee-4c1f-b71b-8ae35cdd8520</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12095 - StreamRenew - LLP - StreamRightsNotGranted - PURCHASE_PROFILE.STREAM value of  'N'-403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="9518c7d4-d42e-4160-8b25-cf37276be1eb" disabled="true"><con:description>This test case will verify proper StreamCreate behavior when the PURCHASE_PROFILE.STREAM value associated with the RightsToken is 'N'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="be7f00c5-0902-4374-b1b8-952aa3b00393"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","CID_NOT_GRANTED");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="df319842-afc3-4702-885a-90d51eca5ba6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="ea5c55c1-b9ac-4b9f-916b-6177ed79d255" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="fd784e89-7b57-4307-8818-8a52bc254810"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="bb904bc2-5537-49ed-b7d4-d16af17a3979"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="f50c443f-abbf-4d7f-a515-bdd0dabd88d1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="d43acc2b-c0fc-459a-9a75-682a4305f2a8"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken PURCHASE_PROFILE.STREAM to 'N'" id="10cf2e51-e7f2-4d73-9a94-427baa441355"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsPurchaseProfileStreamOff(rt) >= 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="f37d5f52-0301-429f-a49b-f3f6dbc9c116"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="88a35c91-5dc2-42f5-ab03-c754064118e9" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="805dc1ee-11e6-4527-a410-74d6be2ddf40" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="370f1022-acad-4ab7-afca-c3bf1991fa64" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken PURCHASE_PROFILE.STREAM to 'Y'" id="210945b2-1c41-4f79-8e87-77ffaa10b42d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsPurchaseProfileStreamOn(rt) >= 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="eeb4d558-4349-4799-8893-0da58b7d4dc7" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>rightstokenid</con:name><con:value>13D2A366C3E70FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPCSuuid_member}</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CE2DD4B0D37B4674A764E512B6E7E3BC</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountid</con:name><con:value>900</con:value></con:property><con:property><con:name>userid</con:name><con:value>600</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvOYMl6wDXYFqsySCTNAEiDL8DIl5AYUbBksGUi+/koGHCDLZWaeXGq3Tp9e1N2XDEWh6fmMQcJJTAubKKTMy6RVJU2oFyNGmEdRBMzj2Bv43Y5nFnUP7a8ohXazqvwuVexy2Zm4KoyDiWqVx446LkOgWtbEMkwHlyZgCVXGUmhTxhHlVcXUDVvVLdVwhrrj2bqnO8WyWR4phQdImMAWKkVd2ZHasKoy43zhadp6vS6uS8U4mWqmrhvaU7czwDOIkFK73HqUGUpqO31cDABDGOIijiPtUjvSuQyYNyBTiniawM5W8JktXdNdTegEjEy/KfldCNp0EmfHBqIxJRiF5BXJ+HSBz+Kg4IfTOCF8Fn3qhKFLYBU2WMWGRb8p2jG1M4GOGCYMqWyGjB1WHyaQAMVQuO+3q8q387KWXR0miLJJnETs+PhnfICuIIwXwgLbu7Wjdj7gB5GqXQL22hSHKSMr6MliXSAMbJdNwOdDFW4TmJBNhzBRoBsm2WmH9E6O22g0yRQY/5sEHSRnC/KAwhRq09ns+QVazuvqdj4aNJLRKJmNoO1W6qyaEThUzgR5arfHk6LMi2h7IyotFxu32x1dXDXpfPOdOterl9WMT50Q8UYrCkcdXmFj58Kf3+j3Px978f335sP6/iXqB/aPQePH1V19TfThpPf0OA2c6zmYUV1v9QbzWLNvr5atcI1YeePeuUvH15e3Jfcu7j0OR4v7h0V4ffNreEF/9ulzuPbbd8/UvpmNu70fXfM6tZZj3jAvxq/Przeofv30y6/m7hzwP5bt3/wgHT8D5vujLIN2s3AlsoT4181MSkigTjJVbyGbD+NAuVKTt2Tv8FLR7kjgiRxuz0apadaNRtltmQ3bNayWbpd023WNK90vlXx732S2LE4oNmI6IdKWbLnbsvmaII48BjSARF3Fqeh0TPkCsYk4KrRpXzyCmDIYxqI9T3loGDbMEYGpgeNKmFbmY/q6REqhF/MbepP4Ew7JcU92j3pyHzBZEJCNW9Y1E4XNuIjFEq1SgV5coSKFVLT2RHZZz7QqtsZItAhBMtWiOEhDKC5miywyGtt+TRVhlkn7rWH22j716/TfPgRCJyBSgUlf6iDSCKfDxRK+7B1557Dz4RDaw/tpQOTDEvHkCcFbJse/3spE1kdeI82OP7jdk851/+Du78bgt/GXAJ1/MN75V+Mil+9val/EUztNZW4oWJEDs/utQ8wv0fFq+0JcIqO4LKarVZrVnmWVtETAa6LBG9oAcCoa8sswngPVcgjtrOmXsz6xnMuP+aV8RgcccYjEQylkxzPWnQEwue60xQvfnLtLHZkUceOw4R/JGqFY1STjL7c57GGpJ8S34rOOk+AtXR9gHdgRfopthxM6lSc5+V4+KQocC1gienacHIJ/BPCR8WNhHuScCxfVNE45fP6nIJtxVUEYxynl7aaSCQ4HRMaTvyzAe1N6B5PNoHwpJf+/laokKwEMYpVlJMOXu4Un659OD4bMzujpnHErpuk3mrbl193DOVPRS+U8KEfsau/E7yUHcTqt8dp/</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>nickname</con:name><con:value/></con:property><con:property><con:name>beforeAPIstreamrowcount</con:name><con:value>0</con:value></con:property><con:property><con:name>beforeAPIstreamhistoryrowcount</con:name><con:value>0</con:value></con:property><con:property><con:name>afterAPIstreamhistoryrowcount</con:name><con:value>0</con:value></con:property><con:property><con:name>afterAPIstreamrowcount</con:name><con:value>0</con:value></con:property><con:property><con:name>nodertraccountid</con:name><con:value>100102</con:value></con:property><con:property><con:name>nodertruserid</con:name><con:value>100202</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpuuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>llpuuid</con:name><con:value>${#Project#assertLLPuuid}</con:value></con:property><con:property><con:name>rtruuid</con:name><con:value>${#Project#assertRTRuuid}</con:value></con:property><con:property><con:name>streamcntbefore</con:name><con:value>10</con:value></con:property><con:property><con:name>streamcntafter</con:name><con:value>10</con:value></con:property><con:property><con:name>streamhistorybefore</con:name><con:value>0</con:value></con:property><con:property><con:name>streamhistoryafter</con:name><con:value>0</con:value></con:property><con:property><con:name>rtraccountid</con:name><con:value>900</con:value></con:property><con:property><con:name>rtruserid</con:name><con:value>600</con:value></con:property><con:property><con:name>rtrorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeorgid</con:name><con:value>3</con:value></con:property><con:property><con:name>llpnodeaccountid</con:name><con:value>910600</con:value></con:property><con:property><con:name>llpassert</con:name><con:value>zVdLd6rKEp77K1zuYVbCQ03UFT2reQYVFAQVZwgtoAhIg6C//jQY3SY7+3XvHdxBVuyiHl9Vfd1d/fpPsQ/qR5ggPwr7DeqJbNRhaEeOH7r9hqELj53GP4PaK7L2Ad0DCMEkxZp1ies3osSlHimSfCaxkYRQBqUQpVaY9hs0SZGPZOeRbuoU3Wt3e+3m03OntWrU59dQdBkKBw9Rr3Leb2RJ2Iss5KNeaO0h6qV2bwbkcQ9r9qxr5MbgHUsVMCEGrw7qzXw3tNIsge8OHdRveGka9wgiz/OnvPmEsRI0SZIE2SWwjoN891sD5/VuDB0p3ESXNWuFUejbVuCfrTKiDFMvcuogcKPET739T1xTBEWWrh9hYT/aVCv81iC+B6jQ/aGnDyATZD0iz6KuzjS4gQnuEKwbmtRvfLtvwkVDT6wQbaJkjz6t/y4wDI8wiGLoPKIr/iuGP/f4RVEGr9DuSaEdZMg/QqXsdGzZENWnCdz4xdhHmD8OqlddrhfoShJo/03hX4l7nBg28UVlON+FKP1PunLfkYuXuRVkcKCSp2LIG+GsuTSXq828JSjj1LFHtAv6FYR75QuoW0Pf15/peGPPuxGnTtca8G1lOhO5hR49d6ZKiwo3zWTzsJZmY8JkQmDoItcNLPUlTpYSqdOtc7o4dI7u2iQmw3PMz7WOzY6F2inN5rRhuMp+u+fibXfETnfFc5OlO4Q6IlOPPDCjJhJSxwo9PuOhLYbNPKdpcgf02AwUejvk0Gk5D8dBq5a+5JB9Y8QTRQeLQ86vKLn/Paf7HMq8RvBUJVn+XrbJLmel1m3Blpt9gzdhCgeyJHHZmWXBaeaCXGKAi/+2QGHc3cHb+WI3JxmgqgLgWCbY8mMZ7ERAGTzjyex8LhfsGQwZV5ljQ70GghUja3zO5SY3V9U3Pvd0R5yf1mKQrc68IgNUGbOezGv8nNN0XpZBdJEVMrcWi608k3NJNbkadsDxRXx2xG4KxcK3aaktz9q0OWtnq+Ucy4XTeK8c1zofyKwssrODOJPWTU7lh0AzFzYtZNj2PN7HUc00mDujYQy3AAo5iWOCs6zvclk3aIXTrEqmf5TJkjiUVZSzapWVWOPz4dw4f68Fy8iss+cLXgfTSy1snRUUcrUcImvRDmUN5JxbGY/43JlcgcgqmdfYS63GfK7xmqEIsiblPKhkHJ8HaE0r3lr0jnZTLYY62N43hlX5hRDi76F2tE/tQ80SBbDezym7qXm23/atZZS7q07OqeZwFK0k7EYBKs8wKsCASFCmhuvPgDEzb09iv0v7cLwRoj30kppMRaPd8VyQHb85cafKos1tdi9T0Z82LccjpMCmt80dkCTojChPtRzNJDQu9M/Pk5GxhH5inlOlrVLPfqdd0xaZseSi4MV5W5rG6KEwbVWfTGfGYnouCuWw7ZyD9G3CvCWzocy5EwXCKbIfCNISGL3DtVnzbYv5tNFI2K4BV2YAELeuy/uYwMzb9kLCN03mMXmBzOYiu2DFGRDFB15iOFXdCB41tcV5ZlCKLPFOgMt0MpdaUFuxDIc7RVqLVWzSArnSgVM5U1u84KpG+2G4hCtVCfR5CvJ4vgkpihRj9W0j564tlwxwpHzG4F3E1DIJGNYkHpLFaP5MUgfVCYazLjCaxYzeFRPPXZ127mqHm2LebR1TB8Fcv+OYhCm2qKk6r8mgc9lvhSwZTS2w90W83tsFp+OeVcaRzvCaoJJGwXFgdJEhHdAFMs/8Vmb5yr4GCtnCtDiulx4yQ8Wf6HyGSZvd0WW7psnfcqykWO0jxw4sUMFnjvEXjvFgc3iQOhyF2s9sjBa5y4j8QX2Zj4fdmFSX412NeRAIN/WD1iTs5ProYUGd8hdvqy4WXYnz2IdwY3rNdcqQ1tlW4XD3IvrajgufW8FJHstq2/CJ4ERu4SFH45oiUSHfTM8C0U2yB2a/8vfnc7NFG/vpLDtKhjVC1MlbHxbdfDt9eyaIRDy1zy+royosI9u83COfD8mb8HKMEvcH7IcT+Do+zbL1FtrpdVnewxJXF/DlaKU/H8WoJ6qS+M7jplLtZSGKoY1hQKcx2CTQiV6Je5ef4rFRuPFLw3KIvNy8vx787H1vDa0EJo1feCqTrkuhhkeJKERQj/oNhE+ILPQPGcbq4Qu2UVeidBJOErBJYVJNqNTXE6qG04l9WI6xd4MALKx9HMAnO9oTlm1HWZgi/ANVs8ZPgX3+ds0B6zh+qYBKWAzExYSfp+ZWs0ddMf0h9qt7kDl+OVLggqSJb1+QfPw0eM8NpQ60D9bRiqmno/UUwgyP8EmV5hX7zeSz4IN74nNmt4jO0bdvvLs9ISQOTz4DwLAcf/P78dtnCzzwluISOMLIMW54w7v2z8TtjYD+wc8Ta2078AfP7z5u8o/YstQLZyneT3vc/nq1/P2T5oM1Tj+FRfqVjA0wwDL4L985ds8u9bB4iv/lUeJ8r/oXvr76+FF4y+eGKcVNW2cp/PmXerl3+413nvtOoxJcD4e7XXFffo5neQJcTCSu8YPTavZ7H+aLnz3QKGIpj2e2B/dW46br/1750a/6ZON9jvV76SnG+Av8tMTBQ7cxoOhmq32rywdIgx/EP0r+iyIm1/n+b8qo8cL/XQmBwDEsriO+qpqt/0kpP2/Owb8=</con:value></con:property><con:property><con:name>llpaccountid</con:name><con:value>3</con:value></con:property><con:property><con:name>llpuserid</con:name><con:value>3</con:value></con:property><con:property><con:name>llpnodeid</con:name><con:value>910</con:value></con:property><con:property><con:name>llpnodeuserid</con:name><con:value>100600</con:value></con:property><con:property><con:name>llporgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpnodeaccountid</con:name><con:value>910604</con:value></con:property><con:property><con:name>dlpassert</con:name><con:value>zVdJk6LKFt77Kwx6WVEFaFEOUXojGURUVBCcdgzJoAhKgqC//iZY2lpdPb33Fm9hSJ48w3emzJPv/+S7oHqEMfKjsEPQLxRRhaEV2X7odghd6z03iX+6lXdk7IJaGyAE4wRzViW+Q0SxSz/TFPVGvRJVCaEUSiFKjDDpEDWKpp6p5nOtrtH1Nt1oM8wLQ7fWRHV+NVUrTGHjIWqXyjtEGoftyEA+aofGDqJ2YrVnQB61MWfbuFomuh9YSoMx2X23UXvmu6GRpDH8UGijDuElyb5NklmWvWT1F4yVrFEURVItEvPYyHe/EdivD2FoS6ETXdacEUahbxmBfzYKizJMvMiugsCNYj/xdj9RTZM0Vah+hrn1bNGv4TeC/G6gRPeHmh5Axsh4Rp5BX5Wp0IExzhCs6qrUIb7dJ+HCocVGiJwo3qFP678zDMMjDKI9tJ/RFf8Vw59r/CIo3XdotaXQClLkH+G4yPTesCCqTmPo+PnIR7h+bFQts1zN0bVIoPU3gX8n73Fi2OQXkeF9F6LkP8nKfUYuWuZGkMKuziFOEQQntLneri8fVJ0i+6fasRkonRLCPfMF1C2hH+vP5Xirng+hUUK3/IHE1U8NwQGOylJNcxTuthNxuFL44VY3ksO8aToJZyUNmDanTtiv5dEGmDQKRZ3Zns5qa4PMzdiBFXa1GsgzxlyLRpPWUdpIJ57TmNe0MTgs9wCYi6NE19/OLbVxpJiNiKAhRiO/P1Ty9Ss1Sg8HGcKDYMlOa1xhB84WCG/iBmiCTRqHeOt2vvt070Ph1xCeSieL7yVDtXgjMW4Lrmh2BzdhAruyJPHpmePAaeaCTGKBi38bMGbd7cHb+mIro1igKD3Ac2ywEUYy2IqA1gXWk7n5XM65Mxiw7niOBbUKCNasrAoZn634uaL0hczTbHF+MsUgXZ+FsQxQKcx5sqAKc17VBFkG0YWWy7wp5ht5JmeSsuIrWAEv5PuzLbYSKOa+VZMYHM3aasak6+Uc03un0W58NDUhkDlZ5GYHcSaZdV4RBkBdLaxaL8Wy59FuH1VWOnsnNNjDDYC9jMI2wVnWtpms6bUxrxolTXukyZI4kBWUcUrplVgRssFcP3+PBcfKnL0TckED00ssLI3rjan1coCMBRPKKsh4txQeCpk9uQKRFSqrcJdYjYRMFVR93JNVKRNASeOFLEBmbeyZone06ko+0MDmPjG4Gxa9EO+H6tE6MYeKIfaAuZvTVl31LJ/xjWWUuetmxiurwTBaS1jNGCgCyyoAA6JA4RqOPwtG7JyZ7P1WzYcjpxftoBdXZDoabo/nnGr69Yk7HS8Y3tk2pqI/rRu2R0qBVdvUt0CSoD2kPcWw1RWp8qF/fpsM9SX049U5GTMK/eY3mYq6SPUlHwUNu79c6cOnfGUp2mQ60xfTc56PD5vmOUj6E7YfzwYy707GEE6R9URSRo/VmjzDrfobXE+OSkGmAlyZBUDcuK7g4wJm+5tLEfZVWcDFC2QuE7kFJ86AKD4JEssritPz6KklzlOdHsuSYAc4TKfVUg0qa47lcaYoY7Her2o9aq0Bu1SmvAo9V9GZp8ESrpVxoM0TkO3nTkjTlLhX+o6cuZZcVIAtZTMWdxFbSSWgG5P9gMqH8zeKPih2MJi1gF7PZ7VtPvHc9Wnrrrc4Kau71llpIJhrdzUm4RJbVBRNUGXQvPRbLkt6XQ2sXb43d1bOazhnpXCksYLaUyg953kwvNCQBmo5Wp2FjcwJpXwF5LKBy+JoLj20Csf+RBNSXLTpXblszBr12xorSqzyWGMHDijgc40JlxoTgHN4kpo8jZg3bo8WmcuKwkFpzEeD1p5SlqNthX3qkW7iB6+TsJlpw6cFfcoa3kZZLFoS73FPobPy6mbCUsbZUuBg2xB9dcuHb6/BSR7JCqP7ZHCiNvCQoVFlLNGhUE/OPbIVp0/sbu3vzuf6a03fTWfpUdKNIaJPnnlYtLLNtP9GkrF4Ys6N9VHpLSNrdblHPh+SN+LlGCXvD9iHE/g6Ps1ScwOt5Los7mGJr/bw5WgkPx/F6Be6pPj2s1OyttMQ7aGFYUCb6DoxtKN38l7lJ3tcFDp+IVgMkZeb99eDn7Vrm9CIYUz8QlPhdFUKVTxKRCGCWtQhED4h0tA/pBirhy9YojqOkkk4iYGTwLicUOmvJ1QVu7P3YTHG3g0CMDd2+wC+WNGONCwrSsME4Q9Uzho/BfZ57+oD5rH9ggEVsFiIgwk/T80U3aavmP4Q+1U9SG2/GClwQJLYty5IHre6H76hxIbWwTgae/rlaLyEMMUjfFy6ecV+E/lMeFBPfvbsZtE++tat7m5PCInHk08XsBwv3PQ+7n2WwANvQS6AI4wc44Y3vKZ/Jm9vBPQPfp4YpmXDHzR/6LjRH7GliRfOEtxPO5z+arn8/ZPmQRq7n8A8+YrGBRhgYfyX7xyrbRV8mDzFf1kU29+j/oWurzYfiTd/bpgSnDQzTeDPd6pF73aIjzr3baIkXA+Hu664Dz8vcAIJLiIST/ygtJz9Pob5/GcPNJpcyqOZ5cGdQdx4/d8zP/tlnizc55i/nZz2GH+On5bYeOgSXbpWf2VucXmA1P2B/CPlvwhifJ3v/yaMqtD7vwsh6PEsh+OIr6r66/8klJ+bs/sv</con:value></con:property><con:property><con:name>dlpnodeuserid</con:name><con:value>100604</con:value></con:property><con:property><con:name>dlpaccountid</con:name><con:value/></con:property><con:property><con:name>dlpuserid</con:name><con:value/></con:property><con:property><con:name>dlpnodeid</con:name><con:value>914</con:value></con:property><con:property><con:name>dlporgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>interations</con:name><con:value>3</con:value></con:property><con:property><con:name>streamhandle_2</con:name><con:value>13370</con:value></con:property><con:property><con:name>streamhandle_3</con:name><con:value>13372</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>13364</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>errorRespType</con:name><con:value>CID_NOT_GRANTED</con:value></con:property><con:property><con:name>coorcsnodeuserid</con:name><con:value>10060007</con:value></con:property><con:property><con:name>streamdeletenodeaccount</con:name><con:value>910604</con:value></con:property><con:property><con:name>dlpOrg1Basic1_nodeaccountid</con:name><con:value>910604</con:value></con:property><con:property><con:name>llpcsnodeaccountid</con:name><con:value>9109115</con:value></con:property><con:property><con:name>coorcsuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>llpaccountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>orgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dlpcsorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>912</con:value></con:property><con:property><con:name>portOrg1Full1_nodeid</con:name><con:value>9110</con:value></con:property><con:property><con:name>portalnodeid</con:name><con:value>9110</con:value></con:property><con:property><con:name>portOrg1Basic1_accountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>streamcreateassert</con:name><con:value>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</con:value></con:property><con:property><con:name>portOrg1Standard1_nodeaccountid</con:name><con:value>9109110</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79E2D5914E05305991F0A33A5</con:value></con:property><con:property><con:name>portalnodeaccountid</con:name><con:value>9109110</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_10550 - StreamCreate - FUNC - DLP - StreamRightsNotGranted - PURCHASE_PROFILE.STREAM value of  'N'</con:value></con:property><con:property><con:name>dlpOrg1Full1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>portOrg1Basic1_assert</con:name><con:value>zVdZd6rKEn73V7jcj66EwWjUFT2rGYOKCgIObwgtoAxKg6C//jQY3ZqdPd17H+5DVuyihq+qvu6ufvsnD/zqEcbIi8JejXoma1UYWpHthU6vpmvCU7v2T7/yhszAp7sAIRgnWLMqcb1aFDvUE0WSLfKFwmYSQimUQpSYYdKr0SRFPpHtJ/pVoxpdstGlWs+vNLWqVY1rMLoIhsOHqFu679XSOOxGJvJQNzQDiLqJ1Z0BedTFml3zGrvW/0BTBoyJ/puNujPPCc0kjeGHQxv1am6S7LsEkWXZc9Z4xmgJmiRJguwQWMdGnvOthjP7MIa2FG6iy5o1wyj0LNP3zmYRUYaJG9lV4DtR7CVu8BPXFEGRhesnmFtPFvUSfqsR3wOU6P7Q0wPIGJlPyDWpqzMVbmCMewSruir1at8e23DR0WIzRJsoDtCn9d+FhuER+tEe2k/omsEVxZ97/KIs/TdodaXQ8lPkHeG46PXetCCqTmO48fKRhzCDbFQt+1zN0ZUm0Pqb0r8R9zgxbOKLynCeA1Hyn/TlvicXL4bpp7Bv0YHDyJuVBpzj4Qjos3TUfNkTHMPplRDulS+gbi39WH8m5I0/H0b+YDZLdh2HioHhN8kJQ9T91bwzWIrGor7LhVd5kIOVnnXW8mI2QKud2oCKYp+IvQ0Hnumr5ow5tbmVuIPrSkBThqce22vloLCabm0NxdKo2DHGYEdqc1aQFuMobtPBqVVvHfQj2or1ejhnWcGXMGxCphnYTnzt3Gw3Kgyiw5E69ybjaKiuubytvfS+53SfQ5HXEJ7KJIvfiybZ4czEvC3YYrtv8DZMYF+WJC49syw4zRyQSQxw8N8WjBlnd3B3ntjJSAYoigA4lvG3/EgGOxFQOs+4MmsYcs6ewYBxxgY21CrAXzGyymdctuQMRXnnM1ezReO0Fv10debHMkClMevKvMobnKrxsgyiiyyXubWYb+WZnEnKkqtgBxyf78+22EmgmHsWLTXlWZNezprpamFguXAaBePjWuN9mZVFdnYQZ9K6wSn8AKjLuUULKbY9j4J9VFnqzJ3RYA+3AAoZiWOCs6ztMlnT6TGnmqVMe5TJkjiQFZSxSpmVWOGzgaGfv9eCZWTWDvic18D0UgtLY4UxuVoMkDlvhrIKMs4pjYd8Zk+uQGSFzCrspVYjPlN5VR8LsiplPChlHJ/5aE2P3bXoHq2Gkg80sL1vDKvwcyHE30P1aJ2ah4opCmAdGJTVUF3La3rmIsqcVTvjlOVgGK0k7GYMFJ5hFIABkaBIDdefASPGaE72Xof24GgjRAF044pMRcPd8ZyTba8xcabjeZPb7F6nojdtmLZLSL5Fbxs7IEnQHlKuYtrqklC50Du3JkN9Ab14eU7GTYVqee1mRZ2n+oKL/Ff7fbHUh/V8aSnaZDrT59Nzno8P2/bZT94nzHs8G8icMxlDOEVWnSBNgdHaXJNdvm8xnzYqCZsV4MgMAOLWcXgPE5h5315I+K7KPCYvkNlMZOesOAOiWOclhlOUjeBSU0s0Up0ayxJv+7hMp+VC9SsrluFwp0hzvtovaYHEx4tdOlNeeMFR9GZ9sIArZexrRgKyvbEJKYoU98r7Rs4cSy4YYEvZjMG7iKmkEtDNyX5A5kOjRVIHxcYnSgfojXxG7/KJ66xOO2e1w01Z3m2dpQZ8Q7vjmIQpNq8oGq/KoH3Zb7ks6Q3Vt4J8vw6snNNwz0rjSGN4VVBIPec4MLzIkAboHC3P/FZm+dK+AnLZxLQ4rhcuWoZjb6LxKSZtekeX7Zomf8uxgmKVR44dWKCAzxzjLxzjweZQl9ochZotdo/mmcOI/EF5NUaDzp5UFqNdhakLhJN4/sskbGfasD6nTtmru1Xm847EuWw93CzdxjphSPNsKXCwexU9dceFrRf/JI9kpal7hH8it/CQoVFlLFEh30jOAtGJ0zoTrLzgfG680HownaVHSTeHiDq568O8k22n7y2CiMVT8/y6OirCIrKWl3vk8yF5E16OUeL+gH04ga8D1Cxdb6GVXJfFPSxxVQFfjmby82GMeqZKiWc/bUrVbhqiPbQwDGjX+psY2tEbce/yUzw2CjdeYVgMkpeb99ejnxV019CMYVz7haci6aoUqniUiEIEtahXQ/iESEPvkGKsLr5ga9VxlEzCSQw2CYzLGZX6ekZVcTp7DxaD7N0gAHMz2Pvw2YoCwrSsKA0ThH+gctb4KbDP3645YB3bKxRQAYuBuJjwcW6muy+tbuOK6Q+xX92D1PaKkQIXJIk964Lk8VP/IzeU2NA6mEdzTz0fzecQpniIj8s0r9hvJp8FD+6Jz5ndItpHz7rx7vaMkDg8+fQBw3L8ze/jt88WeOQtxAVwhJFj3PCGd+2didsrAf2Dnyjm2rLhD54/fNzkj9jSxA1nCd5PAW5/tVz+/lHzYI3TT2CefCVjfQywCP7Ll47VtQo9LJ7if1kU29+r/oWvrz4+Cm/53DAluGnrNIE//1It9m6v9sFzz66VguvhcLcr7svP8SxPgIuJxNV+cFrOfh/DfP6zJxpFLOTRzHJhYNZuut7vlZ+8sk8W3udYv5uc9hh/jh+XOHjo1PoU3Xhp3uryAKn/g/hHyX9RxPg63/9NGVVe+L8rIRA4hsV1xFdV4+V/UsrPm7P/Lw==</con:value></con:property><con:property><con:name>portOrg1Standard1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>portOrg1Full1_nodeuserid</con:name><con:value>10060010</con:value></con:property><con:property><con:name>dlpcsuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>portOrg1Standard1_useroid</con:name><con:value>602</con:value></con:property><con:property><con:name>portOrg1Full1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>portOrg1Basic1_nodeid</con:name><con:value>9110</con:value></con:property><con:property><con:name>dlpOrg1Full1_nodeuserid</con:name><con:value>100604</con:value></con:property><con:property><con:name>dlpOrg1Standard1_nodeuserid</con:name><con:value>1006042</con:value></con:property><con:property><con:name>dlpOrg1Standard1_nodeid</con:name><con:value>914</con:value></con:property><con:property><con:name>portaluserid</con:name><con:value>600</con:value></con:property><con:property><con:name>coorcsorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpcsaccountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>portalaccountid</con:name><con:value>900</con:value></con:property><con:property><con:name>portalassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreaterequestuser</con:name><con:value>100604</con:value></con:property><con:property><con:name>streamcreatrequestuser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>llpcsorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>portOrg1Standard1_nodeuserid</con:name><con:value>10060210</con:value></con:property><con:property><con:name>dlpOrg1Full1_nodeaccountid</con:name><con:value>910604</con:value></con:property><con:property><con:name>dlpcsassert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpcsnodeuserid</con:name><con:value>10060016</con:value></con:property><con:property><con:name>portOrg1Full1_accountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>dlpOrg1Basic1_useroid</con:name><con:value>604</con:value></con:property><con:property><con:name>portalnodeuserid</con:name><con:value>10060010</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>dlpOrg1Basic1_nodeuserid</con:name><con:value>1006044</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ACD64AB9E05305991F0A8037</con:value></con:property><con:property><con:name>dlpOrg1Full1_nodeid</con:name><con:value>914</con:value></con:property><con:property><con:name>dlpcsnodeid</con:name><con:value>9116</con:value></con:property><con:property><con:name>usernodeid</con:name><con:value/></con:property><con:property><con:name>rtrnodeaccountid</con:name><con:value>910602</con:value></con:property><con:property><con:name>portOrg1Basic1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>coorcsnodeid</con:name><con:value>9107</con:value></con:property><con:property><con:name>dlpOrg1Basic1_accountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>streamdeleterequestuser</con:name><con:value>100604</con:value></con:property><con:property><con:name>dlpOrg1Standard1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpOrg1Full1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpaccountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>coorcsassert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpOrg1Basic1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>portOrg1Full1_useroid</con:name><con:value>600</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>coorcsaccountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>portOrg1Standard1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpOrg1Standard1_nodeaccountid</con:name><con:value>910604</con:value></con:property><con:property><con:name>dlpOrg1Full1_accountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>dlpOrg1Basic1_nodeid</con:name><con:value>914</con:value></con:property><con:property><con:name>dlpOrg1Standard1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpOrg1Full1_useroid</con:name><con:value>600</con:value></con:property><con:property><con:name>portOrg1Full1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>llpcsuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>portOrg1Basic1_useroid</con:name><con:value>604</con:value></con:property><con:property><con:name>streamcreateuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>skipRemoveStreamsFlag</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>llpcsnodeuserid</con:name><con:value>10060015</con:value></con:property><con:property><con:name>coorcsnodeaccountid</con:name><con:value>9109107</con:value></con:property><con:property><con:name>rtrnodeuserid</con:name><con:value>100602</con:value></con:property><con:property><con:name>portOrg1Basic1_nodeaccountid</con:name><con:value>9109110</con:value></con:property><con:property><con:name>llpcsnodeid</con:name><con:value>9115</con:value></con:property><con:property><con:name>dlpcsnodeaccountid</con:name><con:value>9109116</con:value></con:property><con:property><con:name>dlpOrg1Basic1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>llpcsassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreatenodeaccount</con:name><con:value>910604</con:value></con:property><con:property><con:name>portOrg1Basic1_nodeuserid</con:name><con:value>10060410</con:value></con:property><con:property><con:name>portOrg1Standard1_accountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>dlpOrg1Standard1_useroid</con:name><con:value>602</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>llpuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>portOrg1Full1_nodeaccountid</con:name><con:value>9109110</con:value></con:property><con:property><con:name>portOrg1Standard1_nodeid</con:name><con:value>9110</con:value></con:property><con:property><con:name>streamdeleteassert</con:name><con:value>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</con:value></con:property><con:property><con:name>portalorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>llpcsaccountid</con:name><con:value>900</con:value></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Test Cases</con:value></con:property><con:property><con:name>dlpOrg1Standard1_accountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_122214</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorRespTypeStreamCreate</con:name><con:value>CID_NOT_GRANTED</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:CE2DD4B0D37B4674A764E512B6E7E3BC</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2A366C3E70FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>CID_NOT_GRANTED</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79E2C5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ACDD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822ACDD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f50c443f-abbf-4d7f-a515-bdd0dabd88d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d43acc2b-c0fc-459a-9a75-682a4305f2a8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_14800 - StreamRenew - LLP - AccountNotActive - ACCOUNT.STATUS of pending-403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="23d4ba94-0c2c-442b-ae11-854d025cb0e8" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e5d1e7ec-911b-4998-898a-c6b464fdd27a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","AccountNotActive");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="efde0a07-a937-4e65-8b16-cafc062e9fda"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="c0b19295-584c-493e-bb1a-f6e5da74711f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="e5bd1032-fb3f-4830-9b8a-dc87f5feca1a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="1575e52f-e838-499a-ac64-b88e39e8df42"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="ab11e454-0f0d-4af8-91d8-115880812f6f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to pending" id="509d1497-f508-4e60-a366-f62a6e41625b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "pending");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="af86bd63-3e53-4e5c-82c0-3125066acec0"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="f103222f-c566-4488-8ad9-9753dfd237b8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="da00fa6c-daa3-44a1-b9bd-0357124561aa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="5244e7e9-ab81-46e3-a197-9b787358091a" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81296</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_122214</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ACD64AB9E05305991F0A8037</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79E2D5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvOYMl6wDXYFqsySCTNAEiDL8DIl5AYUbBksGUi+/koGHCDLZWaeXGq3Tp9e1N2XDEWh6fmMQcJJTAubKKTMy6RVJU2oFyNGmEdRBMzj2Bv43Y5nFnUP7a8ohXazqvwuVexy2Zm4KoyDiWqVx446LkOgWtbEMkwHlyZgCVXGUmhTxhHlVcXUDVvVLdVwhrrj2bqnO8WyWR4phQdImMAWKkVd2ZHasKoy43zhadp6vS6uS8U4mWqmrhvaU7czwDOIkFK73HqUGUpqO31cDABDGOIijiPtUjvSuQyYNyBTiniawM5W8JktXdNdTegEjEy/KfldCNp0EmfHBqIxJRiF5BXJ+HSBz+Kg4IfTOCF8Fn3qhKFLYBU2WMWGRb8p2jG1M4GOGCYMqWyGjB1WHyaQAMVQuO+3q8q387KWXR0miLJJnETs+PhnfICuIIwXwgLbu7Wjdj7gB5GqXQL22hSHKSMr6MliXSAMbJdNwOdDFW4TmJBNhzBRoBsm2WmH9E6O22g0yRQY/5sEHSRnC/KAwhRq09ns+QVazuvqdj4aNJLRKJmNoO1W6qyaEThUzgR5arfHk6LMi2h7IyotFxu32x1dXDXpfPOdOterl9WMT50Q8UYrCkcdXmFj58Kf3+j3Px978f335sP6/iXqB/aPQePH1V19TfThpPf0OA2c6zmYUV1v9QbzWLNvr5atcI1YeePeuUvH15e3Jfcu7j0OR4v7h0V4ffNreEF/9ulzuPbbd8/UvpmNu70fXfM6tZZj3jAvxq/Przeofv30y6/m7hzwP5bt3/wgHT8D5vujLIN2s3AlsoT4181MSkigTjJVbyGbD+NAuVKTt2Tv8FLR7kjgiRxuz0apadaNRtltmQ3bNayWbpd023WNK90vlXx732S2LE4oNmI6IdKWbLnbsvmaII48BjSARF3Fqeh0TPkCsYk4KrRpXzyCmDIYxqI9T3loGDbMEYGpgeNKmFbmY/q6REqhF/MbepP4Ew7JcU92j3pyHzBZEJCNW9Y1E4XNuIjFEq1SgV5coSKFVLT2RHZZz7QqtsZItAhBMtWiOEhDKC5miywyGtt+TRVhlkn7rWH22j716/TfPgRCJyBSgUlf6iDSCKfDxRK+7B1557Dz4RDaw/tpQOTDEvHkCcFbJse/3spE1kdeI82OP7jdk851/+Du78bgt/GXAJ1/MN75V+Mil+9val/EUztNZW4oWJEDs/utQ8wv0fFq+0JcIqO4LKarVZrVnmWVtETAa6LBG9oAcCoa8sswngPVcgjtrOmXsz6xnMuP+aV8RgcccYjEQylkxzPWnQEwue60xQvfnLtLHZkUceOw4R/JGqFY1STjL7c57GGpJ8S34rOOk+AtXR9gHdgRfopthxM6lSc5+V4+KQocC1gienacHIJ/BPCR8WNhHuScCxfVNE45fP6nIJtxVUEYxynl7aaSCQ4HRMaTvyzAe1N6B5PNoHwpJf+/laokKwEMYpVlJMOXu4Un659OD4bMzujpnHErpuk3mrbl193DOVPRS+U8KEfsau/E7yUHcTqt8dp/</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">242A49E6AD5B48D99380E33E3BD79F75</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79FC05914E05305991F0A33A5</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79E2C5914E05305991F0A33A5</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822ACDD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ACDD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2B1C79FC05914E05305991F0A33A5</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:242A49E6AD5B48D99380E33E3BD79F75</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ab11e454-0f0d-4af8-91d8-115880812f6f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>af86bd63-3e53-4e5c-82c0-3125066acec0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_14840 - StreamRenew - LLP - ACCOUNT_USER.STATUS of pending-200 OK" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="bc93ba77-ea17-4bed-87e4-8d1f92b9c71f" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="00763a4b-57fb-4c4f-94b6-9155585f22ac"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="528cb2de-2048-4e5a-968f-4f54b7c6f77e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="7720777b-fc41-449f-9b5b-fe10dbd8b4ae" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="1d8f2846-b7af-432c-9919-f568bee15284"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="5eb57cfa-5890-4ada-857c-36df1ed82a89"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="fa5f389e-5ad0-4453-ac74-60b365db4376"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="c62d66ad-9eb8-46b4-acf9-6577a77fd1ee"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="7c92e97f-4a19-49a3-babf-652dfb1df5dc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to pending" id="67ee67a6-b34f-4747-9279-0f8f8bc88378"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "pending");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="42f367fc-6ea7-4fc9-9410-7cd0421da0e5"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="0cef66d7-5e5b-4d07-adc8-750adc3b9176"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="50f71924-19e6-4251-93d4-48ddc06dc3ad"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="59a03171-5d28-4c31-9e8b-f5e03290cf39" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81304</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140906_123233</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6E3CDF76CBA4B3E0401F0A05997558</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6E3CDE54B58A9FE0401F0A05997546</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7c92e97f-4a19-49a3-babf-652dfb1df5dc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>42f367fc-6ea7-4fc9-9410-7cd0421da0e5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_14846 - StreamRenew - LLP - UserNotActive - ACCOUNT_USER.STATUS of blocked:tou-200 OK" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c2dc5b78-871d-4627-9f75-b0394c78d4a4" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="5d074e65-3b00-4052-bebc-08ca61c0cbe7"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="57c66c0a-36f8-4753-8010-3c0ae3d8412f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="f4fdd720-85c3-4fb8-8e2f-6c5b30bccf51" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="984222a7-a412-4735-92f9-afef11664bf7"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="952cd01e-7115-4ab4-a2fd-60ebc6310fce"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="32fb45bf-e36e-4946-989e-230aec8d64a5"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="f2709129-7530-4eb3-884d-733ceaa0d5ba"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="14ae5aff-a339-4f47-be5c-3e820e49d68a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to blocked:tou" id="19388bc2-fb67-43d4-9e18-42c2d6135cba"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "blocked:tou");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="b8de0c43-014c-4f2f-a6b8-444d297bc033"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="d620cddd-3985-4267-b672-e0b333c20266"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="2ada32b9-f2da-4831-bd53-0ac30484ff79"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="b290b683-76fa-422e-b000-28eba8c0c11a" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140906_123233</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6E3D7D216396C8E0401F0A05997568</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6E3CDF1EF8C01CE0401F0A0599753E</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>14ae5aff-a339-4f47-be5c-3e820e49d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b8de0c43-014c-4f2f-a6b8-444d297bc033</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44857 - StreamRenew - LLP - StreamOwnerMismatch - Stream_Renew_By_DLPCS_ManageAccountConsentnotPresent_diffOrg - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="8388fe81-22f3-44ec-a355-86401dad58c6" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="891d47d2-d0f2-4ddd-a83d-49b334c0b2d6"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="efb906dd-2efa-4aa0-a64c-2bb27b3c968e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="06be10d7-d83f-4556-a1e0-b2caf9aafb5b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="51ad0595-2b5e-47de-b2a1-28aa09ee388d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="9025e021-71e5-4882-8fd8-7e96815a1ebf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="2943b884-608c-4c6e-8ebf-f5df3e152d3c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="82636c2e-af54-4b6e-b5f5-06cac0344b75"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="9a215d17-9725-4a1c-84df-dd80f6d6a36c"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to DLPCS" id="58009b69-602f-45ec-b1c0-df2dd9bba210"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="97d6a84d-f527-4bd4-b63d-ba708ebaf8d9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="e4745a81-8035-4461-bcf1-714c91fb81be" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="29b0505d-b951-49d1-b5e6-ec7ce77be2c0" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="87ef3da9-d22f-4063-944c-34f69b7b404d" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="1426c3ab-39b6-4baf-b2bc-1aaef313cecb" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140906_123233</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6E3CDE3F08E506E0401F0A0599754C</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6E3CE0C624163EE0401F0A05997542</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81279</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>51ad0595-2b5e-47de-b2a1-28aa09ee388d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>82636c2e-af54-4b6e-b5f5-06cac0344b75</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9a215d17-9725-4a1c-84df-dd80f6d6a36c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab14d866-420b-4cce-bdde-8cabb0e8c598</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44851 - StreamRenew - LLP - Stream_renew _by_DLP_Manage account consent present-200 OK_MIGRATED" searchProperties="true" id="bfc57809-2409-4ea3-9168-61d35b44f26d" disabled="true"><con:description>This test case will verify that a full userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9ffe5fd5-c493-4b2b-8e67-daa2c82feb85"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="8a627ca2-3ebf-48eb-a711-80d39bbff4e5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="af3f5a66-7fd3-48d4-9973-30c38ec83beb" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="d1542098-cf19-49dc-8271-05c6bd5babae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" id="daad333d-0ced-4a2f-b6b0-f66bb6e171fc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="a195a68e-9137-4dc0-9f40-ec4ca1cef115"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="8cd0ab31-cbe6-4a6e-80ef-d0de073db8bf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="9475b0bf-816d-4a37-b797-f415b0fd3932"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="73bacd88-da29-4569-a883-13df5112b964"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="b112f68a-6b8f-4350-8ea2-551290b663f8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="e5c06eca-ba0f-4151-b4ac-61944d6185c5" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="a0297c9e-7858-4a70-ab84-2adda280be60" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="766b6428-8740-44c3-a69d-43ca230681fd" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="98269f37-580a-4fbc-8a7d-e2998019ef29" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>C136B41ACFA545EC92E93F4944F53579</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvOYMl6wDXYFqsySCTNAEiDL8DIl5AYUbBksGUi+/koGHCDLZWaeXGq3Tp9e1N2XDEWh6fmMQcJJTAubKKTMy6RVJU2oFyNGmEdRBMzj2Bv43Y5nFnUP7a8ohXazqvwuVexy2Zm4KoyDiWqVx446LkOgWtbEMkwHlyZgCVXGUmhTxhHlVcXUDVvVLdVwhrrj2bqnO8WyWR4phQdImMAWKkVd2ZHasKoy43zhadp6vS6uS8U4mWqmrhvaU7czwDOIkFK73HqUGUpqO31cDABDGOIijiPtUjvSuQyYNyBTiniawM5W8JktXdNdTegEjEy/KfldCNp0EmfHBqIxJRiF5BXJ+HSBz+Kg4IfTOCF8Fn3qhKFLYBU2WMWGRb8p2jG1M4GOGCYMqWyGjB1WHyaQAMVQuO+3q8q387KWXR0miLJJnETs+PhnfICuIIwXwgLbu7Wjdj7gB5GqXQL22hSHKSMr6MliXSAMbJdNwOdDFW4TmJBNhzBRoBsm2WmH9E6O22g0yRQY/5sEHSRnC/KAwhRq09ns+QVazuvqdj4aNJLRKJmNoO1W6qyaEThUzgR5arfHk6LMi2h7IyotFxu32x1dXDXpfPOdOterl9WMT50Q8UYrCkcdXmFj58Kf3+j3Px978f335sP6/iXqB/aPQePH1V19TfThpPf0OA2c6zmYUV1v9QbzWLNvr5atcI1YeePeuUvH15e3Jfcu7j0OR4v7h0V4ffNreEF/9ulzuPbbd8/UvpmNu70fXfM6tZZj3jAvxq/Przeofv30y6/m7hzwP5bt3/wgHT8D5vujLIN2s3AlsoT4181MSkigTjJVbyGbD+NAuVKTt2Tv8FLR7kjgiRxuz0apadaNRtltmQ3bNayWbpd023WNK90vlXx732S2LE4oNmI6IdKWbLnbsvmaII48BjSARF3Fqeh0TPkCsYk4KrRpXzyCmDIYxqI9T3loGDbMEYGpgeNKmFbmY/q6REqhF/MbepP4Ew7JcU92j3pyHzBZEJCNW9Y1E4XNuIjFEq1SgV5coSKFVLT2RHZZz7QqtsZItAhBMtWiOEhDKC5miywyGtt+TRVhlkn7rWH22j716/TfPgRCJyBSgUlf6iDSCKfDxRK+7B1557Dz4RDaw/tpQOTDEvHkCcFbJse/3spE1kdeI82OP7jdk851/+Du78bgt/GXAJ1/MN75V+Mil+9val/EUztNZW4oWJEDs/utQ8wv0fFq+0JcIqO4LKarVZrVnmWVtETAa6LBG9oAcCoa8sswngPVcgjtrOmXsz6xnMuP+aV8RgcccYjEQylkxzPWnQEwue60xQvfnLtLHZkUceOw4R/JGqFY1STjL7c57GGpJ8S34rOOk+AtXR9gHdgRfopthxM6lSc5+V4+KQocC1gienacHIJ/BPCR8WNhHuScCxfVNE45fP6nIJtxVUEYxynl7aaSCQ4HRMaTvyzAe1N6B5PNoHwpJf+/laokKwEMYpVlJMOXu4Un659OD4bMzujpnHErpuk3mrbl193DOVPRS+U8KEfsau/E7yUHcTqt8dp/</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D29822AED34AB9E05305991F0A8037</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_122214</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:C136B41ACFA545EC92E93F4944F53579</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D29822AED34AB9E05305991F0A8037</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ACD64AB9E05305991F0A8037</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79E2D5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79E2C5914E05305991F0A33A5</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ACDD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822ACDD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81253</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>daad333d-0ced-4a2f-b6b0-f66bb6e171fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1542098-cf19-49dc-8271-05c6bd5babae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>73bacd88-da29-4569-a883-13df5112b964</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9475b0bf-816d-4a37-b797-f415b0fd3932</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44852 - StreamRenew - LLP - StreamOwnerMismatch - Stream_Renew_By_DLPCS_ManageAccountConsentPresent_sameOrg - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6cee7927-fd86-4b0f-89a5-133b350ea73b" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7a0b1108-487e-4ad7-8d4e-a5a4c6de5706"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="cd007419-2c66-47d1-a0eb-52bb8b5ab2b6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="d52d23f0-6d1b-4ef1-b1b2-d1d8f7b64aaf" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="12ee29f4-dc35-41fd-92f4-9fab97ef52f4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="54ddf234-3cd0-48c4-b0cc-ffcb31948d3b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="1422b4d3-0e36-49bf-b286-ade539186860"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="5ee6b059-e948-4925-a6bb-0b72ad66ed8b"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to DLPCS" id="74c6ceaf-ec52-40b2-b137-b0b09b606d01"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="3bfc1a35-0c6d-4273-9245-8704d557c2c0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" id="46bbdd21-ac6d-4cf8-8f4c-f46d64f22bcf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="80891cbe-de96-48b7-a05d-ca91becc462d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="824417cc-cca5-4023-8fd3-c9074b8d10e7" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="f66ef5b5-c9ad-4f26-b8c4-86301465c306" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="ed9b7977-1834-404b-a9a4-936cc38bd2d2" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="2976aaf8-ccab-42e5-9a3f-add865fc5430" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_122214</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:3C0B9DDCDB384A02BD0765266812B48C</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2B1C7A0575914E05305991F0A33A5</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2B1C7A0575914E05305991F0A33A5</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>3C0B9DDCDB384A02BD0765266812B48C</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81279</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>46bbdd21-ac6d-4cf8-8f4c-f46d64f22bcf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3bfc1a35-0c6d-4273-9245-8704d557c2c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1422b4d3-0e36-49bf-b286-ade539186860</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ee6b059-e948-4925-a6bb-0b72ad66ed8b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44853 - StreamRenew - LLP - StreamOwnerMismatch - Stream_Renew_By_DLPCS_ManageAccountConsentPresent_diffOrg - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a718a91b-ab79-482c-9395-f9809775a5d5" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9f0bd9b9-351f-484e-8782-9a3f313023ef"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="05051ee4-79d3-49d2-96af-c9feab9fb7e9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="601780f1-a544-450b-8c9c-39ae9a76163e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="0b312a78-9ea6-44ad-8829-b4c605ba54a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="4e2321d9-d80e-4d8a-934d-2c2006eb481f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="de864c17-d9b9-4b25-af3a-e3b5f1e20f64"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="61cc5ced-3520-4adb-989b-dc88a7f93c2e"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to DLPCS" id="525bad16-7c2d-4ec0-89f9-099a9ce32b2c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="a735f92d-a98c-447b-adcd-d236efdf0fe0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" id="debdd447-3195-4f74-b15f-358b2def1be1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="9510374c-b601-41c0-a479-8e05bc3c42fe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="57c3225d-43a5-462a-b027-15d3d30c8627" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="a33418d2-fcaf-4db4-a508-3914af34d695" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="d3589c4d-a07c-472e-a4ab-2ff0e801f6d0" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="33d5ee57-03e5-4927-9556-534f606c02b1" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140906_123233</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6E3D7D223A96C8E0401F0A05997568</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6E3CDF1F6EC01CE0401F0A0599753E</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81279</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>debdd447-3195-4f74-b15f-358b2def1be1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a735f92d-a98c-447b-adcd-d236efdf0fe0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>de864c17-d9b9-4b25-af3a-e3b5f1e20f64</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>61cc5ced-3520-4adb-989b-dc88a7f93c2e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44854 - StreamRenew - LLP - StreamOwnerMismatch - Stream_Renew_By_LLPCS_ManageAccountConsentPresent_sameOrg - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="faa92633-4b1c-41b3-9b90-96a7b54540cc" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e6319326-5b9a-466c-b768-562fe127f9af"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="165bf1f3-c22e-41c6-b676-fb61a7e5af27"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="bf8ac476-6084-4928-8e26-a008b3bb4d02" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="a710f89b-9024-4dd9-9bac-eb980097fe8b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="74ad35e0-653f-4e5d-a5f2-0486b8c1f56c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="2a93f22f-b34d-48e2-880b-f2b02cb8e42b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="3c51dcb3-f479-4a43-b1c0-70216276db99"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to LLPCS" id="715634d7-9e15-4728-9534-2dfa7ab1189a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="3c38bd67-6efa-4e10-b77e-4550be7a75fd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" id="51797c53-b1c9-4b34-a932-1bd26a91d1e1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="6708b4e3-2389-4aa4-ad59-a6fe6bbbd990"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="d77b390c-c856-4935-b890-1f1089f2ca72" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="e8156d5f-9424-4800-84e8-a907b6a9c4ce" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="7e2a34bc-303c-40dc-bb9b-310768042aa2" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="3a840ec1-859d-4a8c-8796-fa093fed273d" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_122214</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:2A19EC797F5348D093F1618572482F9F</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2A366C4E20FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ACD64AB9E05305991F0A8037</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79E2D5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvOYMl6wDXYFqsySCTNAEiDL8DIl5AYUbBksGUi+/koGHCDLZWaeXGq3Tp9e1N2XDEWh6fmMQcJJTAubKKTMy6RVJU2oFyNGmEdRBMzj2Bv43Y5nFnUP7a8ohXazqvwuVexy2Zm4KoyDiWqVx446LkOgWtbEMkwHlyZgCVXGUmhTxhHlVcXUDVvVLdVwhrrj2bqnO8WyWR4phQdImMAWKkVd2ZHasKoy43zhadp6vS6uS8U4mWqmrhvaU7czwDOIkFK73HqUGUpqO31cDABDGOIijiPtUjvSuQyYNyBTiniawM5W8JktXdNdTegEjEy/KfldCNp0EmfHBqIxJRiF5BXJ+HSBz+Kg4IfTOCF8Fn3qhKFLYBU2WMWGRb8p2jG1M4GOGCYMqWyGjB1WHyaQAMVQuO+3q8q387KWXR0miLJJnETs+PhnfICuIIwXwgLbu7Wjdj7gB5GqXQL22hSHKSMr6MliXSAMbJdNwOdDFW4TmJBNhzBRoBsm2WmH9E6O22g0yRQY/5sEHSRnC/KAwhRq09ns+QVazuvqdj4aNJLRKJmNoO1W6qyaEThUzgR5arfHk6LMi2h7IyotFxu32x1dXDXpfPOdOterl9WMT50Q8UYrCkcdXmFj58Kf3+j3Px978f335sP6/iXqB/aPQePH1V19TfThpPf0OA2c6zmYUV1v9QbzWLNvr5atcI1YeePeuUvH15e3Jfcu7j0OR4v7h0V4ffNreEF/9ulzuPbbd8/UvpmNu70fXfM6tZZj3jAvxq/Przeofv30y6/m7hzwP5bt3/wgHT8D5vujLIN2s3AlsoT4181MSkigTjJVbyGbD+NAuVKTt2Tv8FLR7kjgiRxuz0apadaNRtltmQ3bNayWbpd023WNK90vlXx732S2LE4oNmI6IdKWbLnbsvmaII48BjSARF3Fqeh0TPkCsYk4KrRpXzyCmDIYxqI9T3loGDbMEYGpgeNKmFbmY/q6REqhF/MbepP4Ew7JcU92j3pyHzBZEJCNW9Y1E4XNuIjFEq1SgV5coSKFVLT2RHZZz7QqtsZItAhBMtWiOEhDKC5miywyGtt+TRVhlkn7rWH22j716/TfPgRCJyBSgUlf6iDSCKfDxRK+7B1557Dz4RDaw/tpQOTDEvHkCcFbJse/3spE1kdeI82OP7jdk851/+Du78bgt/GXAJ1/MN75V+Mil+9val/EUztNZW4oWJEDs/utQ8wv0fFq+0JcIqO4LKarVZrVnmWVtETAa6LBG9oAcCoa8sswngPVcgjtrOmXsz6xnMuP+aV8RgcccYjEQylkxzPWnQEwue60xQvfnLtLHZkUceOw4R/JGqFY1STjL7c57GGpJ8S34rOOk+AtXR9gHdgRfopthxM6lSc5+V4+KQocC1gienacHIJ/BPCR8WNhHuScCxfVNE45fP6nIJtxVUEYxynl7aaSCQ4HRMaTvyzAe1N6B5PNoHwpJf+/laokKwEMYpVlJMOXu4Un659OD4bMzujpnHErpuk3mrbl193DOVPRS+U8KEfsau/E7yUHcTqt8dp/</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79E2C5914E05305991F0A33A5</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2A366C4E20FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>2A19EC797F5348D093F1618572482F9F</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81279</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822ACDD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ACDD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>51797c53-b1c9-4b34-a932-1bd26a91d1e1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3c38bd67-6efa-4e10-b77e-4550be7a75fd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a93f22f-b34d-48e2-880b-f2b02cb8e42b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3c51dcb3-f479-4a43-b1c0-70216276db99</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12053 - StreamRenew - LLP - StreamExpirationDateTimeExceedsMaximumRenewalTimeAllowed - Stream Renew not allowed for ExpraionDateTime above MaxAddHours - 400 Bad Request_MIGRATED" searchProperties="true" id="e23b7d56-7165-4530-87c3-011156701d78" disabled="true"><con:description>This test case will verify that a full userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9cdf5b38-5d7d-40ce-9f66-e92c83fbf4a2"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_EXPIRATION_DATE_TIME_EXCEEDS_MAXIMUM_RENEWAL_TIME_ALLOWED");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="8e3b3ab4-07ee-48bf-ba56-aa6e174109ae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="bc7c07ba-cebf-4420-ba87-6429f3944d7b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="f23138ae-ca5b-4dfc-bd95-d5379d3bd1f0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="89c9b32f-6682-4175-a0f9-643322f52050"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="b25d29c7-5143-44d1-a599-cc486fbd3e74"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 7 hours" id="8977b12f-ba34-4908-b086-8046429197b6"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+28800000);
	}
else
	{
d=new Date(new Date().getTime()+72000000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="6ee1c57f-9ddd-49b9-9074-7a1c0331a502"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="63922507-d6e1-4247-bf33-e4f79fe5b57c" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="3c8884e3-fdaf-4fca-b6f7-0ff6ee8a6975" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="f0824528-5eb6-45ea-ab2f-d375752c6074" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="f9518c49-ab87-4532-8c96-577544c08876" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>8596582F07664DDF9FE3B1110B9C8C32</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvOYMl6wDXYFqsySCTNAEiDL8DIl5AYUbBksGUi+/koGHCDLZWaeXGq3Tp9e1N2XDEWh6fmMQcJJTAubKKTMy6RVJU2oFyNGmEdRBMzj2Bv43Y5nFnUP7a8ohXazqvwuVexy2Zm4KoyDiWqVx446LkOgWtbEMkwHlyZgCVXGUmhTxhHlVcXUDVvVLdVwhrrj2bqnO8WyWR4phQdImMAWKkVd2ZHasKoy43zhadp6vS6uS8U4mWqmrhvaU7czwDOIkFK73HqUGUpqO31cDABDGOIijiPtUjvSuQyYNyBTiniawM5W8JktXdNdTegEjEy/KfldCNp0EmfHBqIxJRiF5BXJ+HSBz+Kg4IfTOCF8Fn3qhKFLYBU2WMWGRb8p2jG1M4GOGCYMqWyGjB1WHyaQAMVQuO+3q8q387KWXR0miLJJnETs+PhnfICuIIwXwgLbu7Wjdj7gB5GqXQL22hSHKSMr6MliXSAMbJdNwOdDFW4TmJBNhzBRoBsm2WmH9E6O22g0yRQY/5sEHSRnC/KAwhRq09ns+QVazuvqdj4aNJLRKJmNoO1W6qyaEThUzgR5arfHk6LMi2h7IyotFxu32x1dXDXpfPOdOterl9WMT50Q8UYrCkcdXmFj58Kf3+j3Px978f335sP6/iXqB/aPQePH1V19TfThpPf0OA2c6zmYUV1v9QbzWLNvr5atcI1YeePeuUvH15e3Jfcu7j0OR4v7h0V4ffNreEF/9ulzuPbbd8/UvpmNu70fXfM6tZZj3jAvxq/Przeofv30y6/m7hzwP5bt3/wgHT8D5vujLIN2s3AlsoT4181MSkigTjJVbyGbD+NAuVKTt2Tv8FLR7kjgiRxuz0apadaNRtltmQ3bNayWbpd023WNK90vlXx732S2LE4oNmI6IdKWbLnbsvmaII48BjSARF3Fqeh0TPkCsYk4KrRpXzyCmDIYxqI9T3loGDbMEYGpgeNKmFbmY/q6REqhF/MbepP4Ew7JcU92j3pyHzBZEJCNW9Y1E4XNuIjFEq1SgV5coSKFVLT2RHZZz7QqtsZItAhBMtWiOEhDKC5miywyGtt+TRVhlkn7rWH22j716/TfPgRCJyBSgUlf6iDSCKfDxRK+7B1557Dz4RDaw/tpQOTDEvHkCcFbJse/3spE1kdeI82OP7jdk851/+Du78bgt/GXAJ1/MN75V+Mil+9val/EUztNZW4oWJEDs/utQ8wv0fFq+0JcIqO4LKarVZrVnmWVtETAa6LBG9oAcCoa8sswngPVcgjtrOmXsz6xnMuP+aV8RgcccYjEQylkxzPWnQEwue60xQvfnLtLHZkUceOw4R/JGqFY1STjL7c57GGpJ8S34rOOk+AtXR9gHdgRfopthxM6lSc5+V4+KQocC1gienacHIJ/BPCR8WNhHuScCxfVNE45fP6nIJtxVUEYxynl7aaSCQ4HRMaTvyzAe1N6B5PNoHwpJf+/laokKwEMYpVlJMOXu4Un659OD4bMzujpnHErpuk3mrbl193DOVPRS+U8KEfsau/E7yUHcTqt8dp/</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2B1C7A1935914E05305991F0A33A5</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>zVdZd6rKEn73V7jcj1mGQUmiK/GsZhBRUUHA4Y2hGZRBaRDk159Wo9tkZ0/33of7kBW7qOGrqq+7q1//KaOwfoApCpL4rUE9ko06jO3ECWLvraFr/eZL459e7RWZUUh3AUIwzbBmXeLfGq5lOQ5N0k27bZvNNmSem1aLNpsUSWJpoy4hlEMpRpkZZ28NmqTIJvnUpBmNancZukuTj9TLy7pRN67R6VN0jCdG3XO8t0aext3ERAHqxmYEUTezu3Mgj7tYs2tewTR67/DOAVOi9+qg7jzwYjPLU/ju0EFvDT/Ldl2CKIrisWg9JqlH0CRJEmSHwDoOCrxvDZzquzF0pNhNLmvOjJM4sM0wqMxTRBlmfuLUQeglaZD50U9cUwRFnlw3YWk3baodf2sQ3wOc0f2hpw8gU2Q2kW9SV2cqdGGKmwbruiq9Nb79pi8XIy01Y+QmaYQ+rf8OC4wPMEx20Gmia0pXWH/u8Ys69V6h3ZViO8xRcICTU/N3pg1RfZZCNyjHAcKUclD93Ph6ia68gfbf9OKVuMeJYRNfVIYPPIiy/6RR9026eDHMMIe9XUkSnbHeWs4iv9Q2yVFOBlsrYrVn4e0M4V75AurW4/f1Z4beCPVu5MyNdcsrHBsVNiQGnLoaz81CtHhqSYhUQpqW20bT4iHoT5dT85hxxrTUGIV294yV5az7zIViW6Ce9GqCasKSPDLLZD+mt9IMyEaHMlJtzA8OB6MFwNO845rsoWVR8r6kJ53RwTnYwTjkaEi7D3t7V3nPPFPBOIz8WVJ7Svw1yR3zuFz4es623a389j2n+xxOeY3g8Zzk6feSITu8mZm3BXfa/y7elxnsyZLE5xXHgePcA4XEAg//bcCE9bZ7fxuInYJkgaL0Ac+x4UYYy2ArAkoXWF/mDEMuuQoMWW9iYEOtBsI1K6tCwRcr3lCUgVD4miMaR0sM83UlTGSAzsacLwuqYPCqJsgySC6yUuYtsdzIc7mQlBVfww54odxVjtjJoFgGNi0x8pyhV3MmXy8NLO8fx9HkYGlCKHOyyM334lyyWrwiDIG6Wth0P8e21TjaJbWVzt4ZDXdwA2C/IHFMUMnatpA1nZ7wqnmWaR9lsiQOZQUVnHLOSqwJxdDQq++14FiZcyKhFDQwu9TC1rj+hFwvh8hcMLGsgoL3zsYjoXCmVyCyQhY17lKrsVCogqpP+rIqFQI4y3ihCJFFT3xL9A92SymHGtjcN4ZThEU/xt9j9WAfmX3NFPvAigzKbqm+HTCBuUwKb/1S8MpqOErWEnYzAYrAsgrAgEhwSg3XnwVj1mCmu6BDB3Ds9pMI+mlNppLR9lCV5EvQmnqzyYLh3e3zTAxmLdPxCSm06U1rCyQJOiPKV0xHXREqHwfV03SkL2GQrqpswijUU/DC1NRFri/5JHx2BsuVPnooV7aiTWdzfTGrynKy37xUYTaYsoN0PpR5bzqBcIbsB4I0+6z2wjPcarDBfHJVEjI14MksAOLG84QAE5gdbC4kHKiygMkLZK4QuQUnzoEoPggSyyuK2/epmS0auU5NZElwQlym42qphrU1x/K4U6S5WO9WdJ9ca8A5O1PaQt9TdOZhuIRrZRJqRgaKneHGFEWKO2XgyoVnyycGOFIxZ/EuYmu5BHRzuhuS5ch4Iqm94oTDeQforXJOb8up762PW2+9xU1Z3W2dlQZCQ7vjmIQptqgpmqDK4OWy30pZ0ltqaEflzorsktdwz87GicYKal8h9ZLnwegiQxqgS7SqhI3MCWf7GihlE9PiYC19tIonwVQTckza/I4uG4smf8uxE8VqHzm254ACPnNMuHBMAO7+QXrhKcQ8cTu0KDxWFPbKszEednakshxva+xDn/CyIGxP45dCGz0sqGPx7G+UxaIj8T73ELsrv2VlLGlWtgKH22cxULd8/NQOj/JYVhg9IMIjuYH7Ao1rE4mKhVZW9YlOmj+w0TqIqqrVpvVoNs8Pkm6OEHX0rf2iU2xmgyeCSMUjUz2vD0p/mdiryz3y+ZC8CS/HKHF/wH44ga8T1Ty3NtDOrsvTPSzx9T6+HM3s59MZ9UidJYHTdM+q3TxGO2hjGNBp9NwUOskrce/yUzwuid3gZHgaNS83769nQTvqWtBMYdr4hadT0nUpVvEokcQIaslbA+ETIo+DfY6x+viCbdQnSTaNpylwM5ieh1bq66FVxensAniabO8GAVia0S6Ej3YSEaZtJ3mcIfwDnWeNnwL7/O2aA9ZxgpMCOsFiIS4m/DxIt5hu+4rpD7Ff3YPcCU4jBS5Ilgb2BcnHT7333FDmQHtvHswd9XgwH2OY46k+Pad5xX4z+Sz44J74nNktonMI7Bvvbg8NiceTTw+wHC/c/H789tkCz8An8Qk4wsgxbnjDawUVcXs2oH/wI8a0bAf+4Pndx03+EVue+fE8w/spwu2vn5e/f+V8sMbpZ7DMvpJxIQZ4Cv7Lp4/dtU96WDzD/4okdb5X/QtfX338KLzlc8OU4aZZeQZ//qV+2rtvjXeeB07jLLgeDne74r78vMAJBLiYSHzjB6fn2e99mC9/9majiKU8nts+jMzGTTf4vXIzOPfJxvsc63ez4w7jL/FrEwePvUaPoltt5laXD5B6P4h/lPwXRUyv8/3flFEV+v93JQR9nuVwHfFV1Wr/T0r5eXP2/gU=</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_122214</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:8596582F07664DDF9FE3B1110B9C8C32</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2B1C7A1935914E05305991F0A33A5</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ACD64AB9E05305991F0A8037</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79E2D5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_EXPIRATION_DATE_TIME_EXCEEDS_MAXIMUM_RENEWAL_TIME_ALLOWED</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79E2C5914E05305991F0A33A5</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ACDD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822ACDD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81253</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c8d9f205-8ea3-49e9-ae2b-8ffe3972bd14</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12054 - StreamRenew - LLP - StreamExpirationDateTimeBelowLowerBoundary - Stream Renew not allowed for ExpraionDateTime below previous ExpirationDateTime  - 400 Bad Request_MIGRATED" searchProperties="true" id="60574221-d9ab-4f1f-acd4-aeab25761809" disabled="true"><con:description>This test case will verify that a full userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b54dbe06-a012-4447-8ab5-7f5450b7fcb0"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_EXPIRATION_DATE_TIME_BELOW_LOWER_BOUNDARY");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="9a8dbac0-b9b6-4007-8866-0fc55f947fb2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="56b560f8-6306-44fd-ba95-3338e26ccbb1" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="b7e954c4-aee3-4e0d-8553-b0fe22ed7aec"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="2c6f8f4b-6b2b-46df-a055-80bfef1059ed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="9d42cea8-5d3c-46f2-b030-3191beb081a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate - 1 hours" id="552b19d9-ff4b-4a1a-abb3-ff813142bc96"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

Date d=new Date(new Date().getTime()-3600000);

String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="194aa1fb-b340-469e-ac95-5e5a7740450a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="b023c680-3d47-4903-a72a-f2e26c740c85" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="458b3a9c-fd13-4b5a-89bf-3d7a3521ea60" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="60df80e6-a579-420e-8922-b345e1f37857" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="89c6dd1a-f168-4df2-828e-cddf3d9dee22" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>A0F5D1943A98474582DFFDB2562F7098</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvOYMl6wDXYFqsySCTNAEiDL8DIl5AYUbBksGUi+/koGHCDLZWaeXGq3Tp9e1N2XDEWh6fmMQcJJTAubKKTMy6RVJU2oFyNGmEdRBMzj2Bv43Y5nFnUP7a8ohXazqvwuVexy2Zm4KoyDiWqVx446LkOgWtbEMkwHlyZgCVXGUmhTxhHlVcXUDVvVLdVwhrrj2bqnO8WyWR4phQdImMAWKkVd2ZHasKoy43zhadp6vS6uS8U4mWqmrhvaU7czwDOIkFK73HqUGUpqO31cDABDGOIijiPtUjvSuQyYNyBTiniawM5W8JktXdNdTegEjEy/KfldCNp0EmfHBqIxJRiF5BXJ+HSBz+Kg4IfTOCF8Fn3qhKFLYBU2WMWGRb8p2jG1M4GOGCYMqWyGjB1WHyaQAMVQuO+3q8q387KWXR0miLJJnETs+PhnfICuIIwXwgLbu7Wjdj7gB5GqXQL22hSHKSMr6MliXSAMbJdNwOdDFW4TmJBNhzBRoBsm2WmH9E6O22g0yRQY/5sEHSRnC/KAwhRq09ns+QVazuvqdj4aNJLRKJmNoO1W6qyaEThUzgR5arfHk6LMi2h7IyotFxu32x1dXDXpfPOdOterl9WMT50Q8UYrCkcdXmFj58Kf3+j3Px978f335sP6/iXqB/aPQePH1V19TfThpPf0OA2c6zmYUV1v9QbzWLNvr5atcI1YeePeuUvH15e3Jfcu7j0OR4v7h0V4ffNreEF/9ulzuPbbd8/UvpmNu70fXfM6tZZj3jAvxq/Przeofv30y6/m7hzwP5bt3/wgHT8D5vujLIN2s3AlsoT4181MSkigTjJVbyGbD+NAuVKTt2Tv8FLR7kjgiRxuz0apadaNRtltmQ3bNayWbpd023WNK90vlXx732S2LE4oNmI6IdKWbLnbsvmaII48BjSARF3Fqeh0TPkCsYk4KrRpXzyCmDIYxqI9T3loGDbMEYGpgeNKmFbmY/q6REqhF/MbepP4Ew7JcU92j3pyHzBZEJCNW9Y1E4XNuIjFEq1SgV5coSKFVLT2RHZZz7QqtsZItAhBMtWiOEhDKC5miywyGtt+TRVhlkn7rWH22j716/TfPgRCJyBSgUlf6iDSCKfDxRK+7B1557Dz4RDaw/tpQOTDEvHkCcFbJse/3spE1kdeI82OP7jdk851/+Du78bgt/GXAJ1/MN75V+Mil+9val/EUztNZW4oWJEDs/utQ8wv0fFq+0JcIqO4LKarVZrVnmWVtETAa6LBG9oAcCoa8sswngPVcgjtrOmXsz6xnMuP+aV8RgcccYjEQylkxzPWnQEwue60xQvfnLtLHZkUceOw4R/JGqFY1STjL7c57GGpJ8S34rOOk+AtXR9gHdgRfopthxM6lSc5+V4+KQocC1gienacHIJ/BPCR8WNhHuScCxfVNE45fP6nIJtxVUEYxynl7aaSCQ4HRMaTvyzAe1N6B5PNoHwpJf+/laokKwEMYpVlJMOXu4Un659OD4bMzujpnHErpuk3mrbl193DOVPRS+U8KEfsau/E7yUHcTqt8dp/</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2CFD287C50EFFE05307991F0AE210</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_122214</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:A0F5D1943A98474582DFFDB2562F7098</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2CFD287C50EFFE05307991F0AE210</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ACD64AB9E05305991F0A8037</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79E2D5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_EXPIRATION_DATE_TIME_BELOW_LOWER_BOUNDARY</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79E2C5914E05305991F0A33A5</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ACDD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822ACDD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81253</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c8d9f205-8ea3-49e9-ae2b-8ffe3972bd14</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12055 - StreamRenew - LLP - StreamExpirationDateTimeExceedsUpperBoundary - Stream Renew not allowed for ExpraionDateTime above 24 Hours - 400 Bad Request_MIGRATED" searchProperties="true" id="7993d263-fc34-4423-bc70-1e692db7e562" disabled="true"><con:description>This test case will verify that a full userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="160f6bf3-5137-4775-9ba2-797a7ba67a84"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="4286f4a5-41c3-4a35-b672-35abcc3a47ac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="6a41a1e1-4aa5-40f9-a310-9c06992e65b5" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="ac40b294-107b-48fd-897c-79c241ecb9e3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="7d7ef5fe-8203-49cc-b3af-1c44af1a9de2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="7e845ade-1919-440d-8148-661c835857c1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 5 hours" id="473dec68-250c-489e-9f4a-28d2f82acbbc"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+19200000);
	}
else
	{
d=new Date(new Date().getTime()+60000000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew 1" id="80eb2443-302d-4a6b-86c6-3fdc205bd7a3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 10 hours" id="d575863a-2e49-44ff-b2a4-09cabfd914a0"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+38400000);
	}
else
	{
d=new Date(new Date().getTime()+80000000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew 2" id="e04d7313-adc3-45b3-baa7-03a22841bc26"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 15 hours" id="1091a795-3d13-43da-8dc5-8ac6fbc57e0c"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+57600000);
	}
else
	{
d=new Date(new Date().getTime()+90000000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew 3" id="98e0e839-8141-406b-b4ad-0c75d6c03ef1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 20 hours" id="52caaa0d-26c8-48af-aa5a-9b601e59eb9d"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+76800000);
	}
else
	{
d=new Date(new Date().getTime()+110000000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);

tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_EXPIRATION_DATE_TIME_EXCEEDS_UPPER_BOUNDARY");




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew 4" id="52998a27-ec13-44b2-95f4-3946bd692600"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="6d88a0b7-8c1c-46d2-ad6e-6f9d86fef86e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" disabled="true" id="ba1ea203-5606-4cc6-8d84-4e08186d99cc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" disabled="true" id="c65c1640-ef6d-4d8c-8f54-bd64130a50f9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="d0c562f3-8a0b-4873-a08d-3fa5e313981e" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>158F3E0BB52C4A38B0A921785B85A7D7</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvOYMl6wDXYFqsySCTNAEiDL8DIl5AYUbBksGUi+/koGHCDLZWaeXGq3Tp9e1N2XDEWh6fmMQcJJTAubKKTMy6RVJU2oFyNGmEdRBMzj2Bv43Y5nFnUP7a8ohXazqvwuVexy2Zm4KoyDiWqVx446LkOgWtbEMkwHlyZgCVXGUmhTxhHlVcXUDVvVLdVwhrrj2bqnO8WyWR4phQdImMAWKkVd2ZHasKoy43zhadp6vS6uS8U4mWqmrhvaU7czwDOIkFK73HqUGUpqO31cDABDGOIijiPtUjvSuQyYNyBTiniawM5W8JktXdNdTegEjEy/KfldCNp0EmfHBqIxJRiF5BXJ+HSBz+Kg4IfTOCF8Fn3qhKFLYBU2WMWGRb8p2jG1M4GOGCYMqWyGjB1WHyaQAMVQuO+3q8q387KWXR0miLJJnETs+PhnfICuIIwXwgLbu7Wjdj7gB5GqXQL22hSHKSMr6MliXSAMbJdNwOdDFW4TmJBNhzBRoBsm2WmH9E6O22g0yRQY/5sEHSRnC/KAwhRq09ns+QVazuvqdj4aNJLRKJmNoO1W6qyaEThUzgR5arfHk6LMi2h7IyotFxu32x1dXDXpfPOdOterl9WMT50Q8UYrCkcdXmFj58Kf3+j3Px978f335sP6/iXqB/aPQePH1V19TfThpPf0OA2c6zmYUV1v9QbzWLNvr5atcI1YeePeuUvH15e3Jfcu7j0OR4v7h0V4ffNreEF/9ulzuPbbd8/UvpmNu70fXfM6tZZj3jAvxq/Przeofv30y6/m7hzwP5bt3/wgHT8D5vujLIN2s3AlsoT4181MSkigTjJVbyGbD+NAuVKTt2Tv8FLR7kjgiRxuz0apadaNRtltmQ3bNayWbpd023WNK90vlXx732S2LE4oNmI6IdKWbLnbsvmaII48BjSARF3Fqeh0TPkCsYk4KrRpXzyCmDIYxqI9T3loGDbMEYGpgeNKmFbmY/q6REqhF/MbepP4Ew7JcU92j3pyHzBZEJCNW9Y1E4XNuIjFEq1SgV5coSKFVLT2RHZZz7QqtsZItAhBMtWiOEhDKC5miywyGtt+TRVhlkn7rWH22j716/TfPgRCJyBSgUlf6iDSCKfDxRK+7B1557Dz4RDaw/tpQOTDEvHkCcFbJse/3spE1kdeI82OP7jdk851/+Du78bgt/GXAJ1/MN75V+Mil+9val/EUztNZW4oWJEDs/utQ8wv0fFq+0JcIqO4LKarVZrVnmWVtETAa6LBG9oAcCoa8sswngPVcgjtrOmXsz6xnMuP+aV8RgcccYjEQylkxzPWnQEwue60xQvfnLtLHZkUceOw4R/JGqFY1STjL7c57GGpJ8S34rOOk+AtXR9gHdgRfopthxM6lSc5+V4+KQocC1gienacHIJ/BPCR8WNhHuScCxfVNE45fP6nIJtxVUEYxynl7aaSCQ4HRMaTvyzAe1N6B5PNoHwpJf+/laokKwEMYpVlJMOXu4Un659OD4bMzujpnHErpuk3mrbl193DOVPRS+U8KEfsau/E7yUHcTqt8dp/</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2B1C7A1EA5914E05305991F0A33A5</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_122214</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:158F3E0BB52C4A38B0A921785B85A7D7</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2B1C7A1EA5914E05305991F0A33A5</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ACD64AB9E05305991F0A8037</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79E2D5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_EXPIRATION_DATE_TIME_EXCEEDS_UPPER_BOUNDARY</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79E2C5914E05305991F0A33A5</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ACDD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822ACDD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81253</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c8d9f205-8ea3-49e9-ae2b-8ffe3972bd14</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d575863a-2e49-44ff-b2a4-09cabfd914a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e04d7313-adc3-45b3-baa7-03a22841bc26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1091a795-3d13-43da-8dc5-8ac6fbc57e0c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98e0e839-8141-406b-b4ad-0c75d6c03ef1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>52caaa0d-26c8-48af-aa5a-9b601e59eb9d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>52998a27-ec13-44b2-95f4-3946bd692600</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44855 - StreamRenew - LLP - Stream_renew _by_DLP_Manage account consent not present-200 OK_MIGRATED" searchProperties="true" id="ee42a295-4205-4e0c-bd8b-98c0846f018f" disabled="true"><con:description>This test case will verify that a full userId can invoked the StreamRenew API without Manage user consent policy.</con:description><con:settings/><con:testStep type="groovy" name="Establish data and LLP without MAC" id="ab14d866-420b-4cce-bdde-8cabb0e8c598"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("E_2_E_without_MAC");

def runnerTS = myTS.run( null , false )

assert runnerTS.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="21b421d9-7866-49dc-8a2f-8f336b8d73c5"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="910a8355-b66d-46c4-a3bb-d6ffcc13b27c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="794527e2-7016-4cfd-9660-9de959025d14" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="8d3479a4-b4de-47cb-bcb1-69dee997188c" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="8f71e2af-7985-4adb-bb2b-a15a9b510146"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="6fe8ec6f-48b5-4488-8aea-7a5009ac137a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="e541b6b8-4dde-453d-a920-95bafb7cc9a9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="a8fdebff-0ccf-46a2-a292-9f606070712c"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="ff3f3510-4d81-4076-9110-b96d11903a89"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="8af69bdc-fb0b-41b0-9c8d-a46e82e305e4" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="51673fd1-0e67-4bdf-ae42-9439b2728977" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="76cc4710-4b22-4804-aee2-d6a7097b8d2b" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="4c1aceee-63f8-4d55-869c-c05351263027" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>320D7DC23F114733861EC9F3E776B7DF</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbvU+I8EP5XmN5Hp6SlLT86wkwFPXEQPYu+6hcnJClE27QmKaB//SUFKiD6cnefOtludp/dfbK7xwImcc0PhCBc0pRVFknMhF9I20bOmZ9CQYXPYEKEL5EfBpcDv1a1fLi+YlT6vbbxZHkYjRt1xxw3cN106w1kNpHtmjZuNlDDrTVrLVupCpGTPhMSMtk2apbtmZbSqY+shm+5vmVVvab1aFTuCBfKtlKpWsYK1EK0jamUmQ/AfD6vzp1qyiegZlk2uL8chGhKEmh0jpcRFY54Z6WPqpggEseoitIEHIMtnWMs/JBOGJQ5Jytf+CtfFrBaQOlgQSc/jPIuwX0WpcWxC1nKKIIxfYc6P5dETlNcCeJJyqmcJl8GYVvasEkWyFSJYz8MsA3tQENbCLmApphCe2XrhkSEE4ZI5fam3zZ+HFa14uqIQyailCdi+/hneAibkTjNCDbFOqwVtMMN7slU55ggv89QnAs6I0NN1gwiIlbVJOhwU5VrTiK6GFChCLoQGh3YhLdzXGajRydEyL8p0EZxlkbuYJyTzhV/mw/E1dhGIHrPBPdux43zi+n8P3jaLgBsKheCsrTL4w4pSxItbwTdeUwGXQjyuD9pnT/c3IqH0S/0HD6+DxJncfI8RS+RdzZMUoxPMcD306w5ceN779dL0sXDrDd2qOM554Di+2iWIIyj6NGz79JWA4yTxsPlyQV1r0UtHP3EruXcgiw/6l738tANL73z4Gp0YV8tToajN9oXt89n9y/3F9FPkZ3XjhJwREfpNO7zgetwe2i1y3A28G/L1m8+zMfPBMn1UdOg36ucqSpB+X0z0xKKzahQ9TPdfIQkTBodfUv3Dj9X7Y5iX9VwebadXu3ErQdnbhBY3RP71PIcy2u17DMrqDeD3rrJLFHsQOymLKLal265S9p8DxAlviAME27O0lx1OmF8Y7EHJaz02Y16BCkTZJSq9jzjeDJ5caz39J3aXmOeTOvZq9fIkFEZpvKKXfEgkoRv9WTb2urJNwTRjBLduDWvhSK2kCoXr3CWy9iuzmCVkVy1dq67rF9zmx4QNMliopECxaU8JtVsmhWZAWL5rZkQiUJ6czoqXtuXce3+W6dA6WCqFYSO5YSoMpJPw8XxvXUgnwKu7x1Ca/NBjql+WCqfklO0RLL964Mmmh8lR3qDILxegy51/+DuUzd8sv/SwOAfnA/+1bmq5eeb4Jt8gt1Slo7wjG64XW8dan6pjtdZE/EV2tXXaj6b5QX3XNcBXJkHqsHbICQoVw35bZS+EAZKE+Cg6Vei3vFcyrfx5XLKQgklSdRDqRTHA9adkAi97vTVC18cukttuVR5k2Qh98m6sVrVNOJvtznkI62nxNfqM085/ijXHlsbflScatuRlE30SU++ty9IgVJllqqenfJN4/sM7HO+LSyTXGKRik3jXJKv/1R0M24bEKE0Z7LfMwrB5oAocMq3jPgfSp/MFDOoXErp/2+lJi0ogIhaZQUt7Ovdwtf8Z5ONIbNyun/OtKzv5sw2us4n8WfJRp52Od75DQ==</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2CFD28AB70EFFE05307991F0AE210</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_123612</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:320D7DC23F114733861EC9F3E776B7DF</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2CFD28AB70EFFE05307991F0AE210</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AF4910CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AF4AB0CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B46AF4AA0CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AF4AA0CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AF4900CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2B46AF4900CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AF4980CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2B46AF4980CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81253</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>daad333d-0ced-4a2f-b6b0-f66bb6e171fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8d3479a4-b4de-47cb-bcb1-69dee997188c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e541b6b8-4dde-453d-a920-95bafb7cc9a9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a8fdebff-0ccf-46a2-a292-9f606070712c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44858 - StreamRenew - LLP - StreamOwnerMismatch - Stream_Renew_By_LLPCS_ManageAccountConsentnotPresent_sameOrg - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="8150ee9b-56a6-4107-b182-948132f4c151" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="821c6525-146f-4d03-b031-1b0557072254"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="175e859e-b3a1-4a4d-9e3c-43ca6b28b64b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="78185601-6774-40db-b8af-1c2b2c93fc2e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="724b80a6-26d1-4bed-a229-6b767a2f6b15" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="184c61b4-c356-4a77-a725-bdc1449a0201"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="8887bd32-9a24-4260-aa7c-d616b048334d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="5a24527f-ff78-44d4-811d-cadbae47bce0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="657fa368-2ce2-41f6-93d0-f23f06755a59"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to LLPCS" id="063f3166-c67d-41c4-a726-f6ca705c1e99"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="f4f0c7f1-eb73-4508-9260-d8e5d37edf69"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="4676f0d4-dd7b-4224-bbbf-f9631f4a0030" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="750542e9-76e3-4e4a-9394-238a4a1ee60d" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="6698db5f-fa39-4454-9475-3f7ce2449689" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="8ea99eb4-7938-4394-8f4e-0713ebf6c9d7" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_123612</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:DA2F2BBFDCAF4049AE3E9421BE4CB743</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2CFD28BC20EFFE05307991F0AE210</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56890067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56895167DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPp4JiSBhEumMEO57GRLC4W2p9uXjusoxG3i0NgO0F9/7AApUNrD7j5lrMjSJ+mzpHOG4qjidhiDlJOElpZxRJmbS1uaSKmbIEaYS1EMzOXYnXauhm6lbLpoe0Ureb2W9uQ3K0E1MEF3UD3QbWw/6wg913QfNyzT8U3LQSBVGRPgUcYR5S2tIqW6aetW7dasu2bNrdbK1YbzqJXuIWXStlQpm9oG1JK1tJDzuWsYi8WivKiWk3RmVEzTMh6uhlMcQoy09vk6otxR2t7o47IPGKIIl3ESG+fGns65z9wpmVHERQobX/5XvkzDbBpSx2dkdqYVd8H3aJDkxy6iCSUYReQdqfxcAQ8Tv9SJZklKeBh/GYRlKsM6LLGOLZueacY+tBMN7SFMGdJZiKyNrQkEkALFULqbeC3t7LSq5VdvU0RZkKQx2z/+Hh6gGUTJHHydbcPaQDvd4JFMtc8Bux7FkWAkg2tF1jnCwDbVBHy6qdI4hYAsh4RJgi6ZQmfswjs4rrPRIzNg/E8KtFOctZF7FAlo16+5+dxMkJjx5+jKSwfCY86LX7+7SVo5gF3lXFCUdn08IGVBovWNYHjjh8nDNJg8sAFkF+FgBsPw57zLAuxQ0aj1WdxZZvXLkb28CsedkbH4Nfft1T8DzxrddZ3RuOtnnv342rhe1G8bvdlr/2eNBj8fg1H2gAbCv7i8tqs3OGCX79SI7THpN/99kc7CH9P7qH/XFP3H7Ie9mkQ/mnBRG4zfH+5f62S1iPs9POv6Iw+L5vwROtVfrSKcHfz7su2bn4rnF8B8e1Q08HqlgawS4t83MyUhvh7kqu5cNR/GgXKtrW6p3uEK2e6I78oars9WtVc1L5xao+mYtXpv0Dedquk0m9bA7HQHTn3bZNYoDiB2ExoQ5Uu13DVtvgeIY5cB9SHVs0TITse0byz2EEclj07kI0gog9tEtmcLrcK0tkwFFrP3qLlsRqEw7Wpa00rXCR/RUdoJOKR7Pdky93ryBDCZE1CNW/GaSWIzLnPxhjLBI6ucoTIFIVt7qrqsW7EbjsFIPI9AITXixBcRlOfhPM+Mwdbfio4wy6WT/m3+2r6M6/DfNgVSxydKgalYLkCWEY4Ml8o2kE8B144Ooa35jvCJelgynzwleI1k/9cHTRQ/Co70hp3peAu60P2Nu0/d6ZP1hwaGf+F8+LfOZS0/3zS+yadxWMrCkZ+RHbfbrUPOL9nx2lsiviGr/FYWWSZy7tl21UileUM2eMuYAhayIa9uk1egRmHCOGn6FagPPBfyfXyCh3TKEYdYPpRSfjxh3ZkCU+uOJ1/48tRdas+lzBuHJT8m60ZyVVOIv93msIuVnhSP5WeRpP5HuY7Y2vEj45TbDid0pk5q8q2+IAVOpFkie3aS7ho/ZuCY831hkeQCC5dsehYcvv5TUs24pSGME0G519Nywe6AyHHy1RzcD6VPZvIZVCyl5P+3Up3kFMByAZb6uX21W7iK/3S2M2Q2To/OmcZg8N2c2UfX/iT+LNnJ0yHH2/8B</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D30B5688FF67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B5688FF67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D30B56895067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56895067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2CFD28BC20EFFE05307991F0AE210</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>DA2F2BBFDCAF4049AE3E9421BE4CB743</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81279</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D30B56890767DFE05305991F0ACF57</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56890767DFE05305991F0ACF57</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>724b80a6-26d1-4bed-a229-6b767a2f6b15</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5a24527f-ff78-44d4-811d-cadbae47bce0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>657fa368-2ce2-41f6-93d0-f23f06755a59</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44856 - StreamRenew - LLP - StreamOwnerMismatch - Stream_Renew_By_DLPCS_ManageAccountConsentnotPresent_sameOrg - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a8c7c73e-266c-4fad-b203-b750c64eabda" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="77db495a-4fa8-4d32-bc8f-d241dbdb0313"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="10379d7a-482f-4916-9855-3a77d32071bc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="a2f42386-fd32-4102-8eb3-548e86394b94" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="bc8d8670-a420-46f9-af0e-7335976768fc" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="5df92fd8-dea6-4423-b321-e144b47db23b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="a2af0ba3-a122-43ec-97f0-a43ba98a6fb4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="94c3bc62-52ae-4c27-84d8-144eaed8e8b3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="aa72e430-2b45-443d-b9b8-620a7ad172cb"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to DLPCS" id="9e172f5d-9a70-4338-9005-08374126c6ca"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="d60d9fe8-034d-454c-bc2f-ca63cdc80870"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="f7918c56-0e4d-4de8-bb94-39fd5bea7070" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="c654801f-f18e-4bfa-98ba-d41aaf315d21" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="74d5b879-aee9-4fcc-9ae4-644732636a8a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="e90ac9b6-9b4a-4e37-85db-be0bfea99410" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>13D30B56890067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assert</con:name><con:value>nVbbcuI4EP0VynmkjK/cXIEqLpMME3JZzMxO8ZIScttoYkvEkrnk61cy4GBCsuw+udRudZ/uPjrSNUdJbHs9ziEVhNHKJokp93JrR8tS6jHECfcoSoB7Ant+737s2TXTQ4ctWmU07GjPYdOybGfu6q7TQrrbClr6vAVYD+fIboQBajbcunTlPIMR5QJR0dFs06rrpqtbjanZ9MyGV6/X3Lo50yq/IOUytnSpmdoe1IZ3tIUQS88w1ut1be3UWBoZtmlaxu/7sY8XkCCte72rKE+Udvf+uBYAhjjGNcwS49oo+VwH3PNJRJHIUtjnCj7LZRpm25A+ASfRlVbshWBEQ5YvB4gySjCKyRtS/bkHsWBBpRdHLCVikXxahGWqwDpssI4tl15pRhnahYFKCFOOdL5A1j7WBEJIgWKo/JyMOtrVZVPLt05TRHnI0oSXl/8ND9AVxGwJgc4PZe2hXR7wTKe614C9EcVxxskKHhRZlwgD308T8OWhKk8phGQzJlwSdMMVOuMY3sly140hiYCL/zOgo+HsgvxCcQbdlRPev96++n+Tb+Ofxt0TbjxOqwZ7ZQ/rTg7g2Dk3FKPdLU9IWZBot2PorKxq+8fb1vRntjlPJ1NW78/ILLwLoqoVT1+q1ZkThcGi/jarbu9uf4WPf9HR75e5fXuzpOLme+KmP7+3oo3z1LqNtmvfT0g4Gd9twmFvsmmOZ+zhbdpfO6P7pIkG35PJbfJjy+J4vRBNg7wY03kWWc3+wGEzx5j0e+3MhpfhNAqXDszNQfqDR8sXtHaqeF/uCf6y7XDm/Wz+B7A4LBUNRsPKjZwSEl+LmbKQQA9zV2+pxIcLoELrql1KO7xMyh0JPDnD3dpyho7ZtNx+r9+vD4f2N7PumPV227oxe6ZruweR2aE4gThgNCQql5LcHW2+BogTjwMNINVXLJNKx7UvIg6RQJURnchDwCiHKZPy3Eg3zWbG2rCy19afIFu55A+OqMBa5YGJR/qY9kIBaUmTLbOkyRPAZElACbfiNZfE5kL24hWtMhFbtRWqUciktKdKZT3bbdUNTpJlDAqpkbAgi6G2XCzzzhh897V1hHluHY57/tPzwH+280P3aXmn/w6dkD4BUQ5cldQHOU04c8e4h3o+1N04excdwveygKjzJdsqUoJ3SMq/3tmiaFJQ5b2wA/Jiw6mhFNw4ravIF6wILmhfXN5S06UKdA/DeUVW7bWWrVZZPg/XdYxUhjek6FmGDziTIrWdshegRhHCuOhGKFCfZC7sZXyZWFBfIAGJJE8lX17wBPCBqyfASLJ+c+n7opRS9k3ARpyzDWL5fFGIv3zhYA8rP2l+kp81S4P3cZ2JdZRH1ilfAILQSK3UbbD9hBuYybBE6hhLj4OfC3AuedlYNLnAIiSb5pmAz/9UlEB1NIQxy6gYDbXccCyaOU6xXYL37vQhTK7LxUON/PtLTSc5BTDI5x0neXx133qK/zQ6Et590k+0t/2V9pbRdT+YP1qO+nTK8e4/</con:value></con:property><con:property><con:name>assertid</con:name><con:value/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>13D30714BAB95DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:13D30714BAB95DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>13D30714BABB5DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:13D30714BABB5DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81279</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>13D30B56890767DFE05305991F0ACF57</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>urn:dece:rightslockerid:org:dece:13D30B56890767DFE05305991F0ACF57</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2F17B3CF74E9AE05305991F0A2702</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2F17B3CF74E9AE05305991F0A2702</con:value></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value>EC7BB0A90A3E4CF4B2A786EC4A0D706F</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:EC7BB0A90A3E4CF4B2A786EC4A0D706F</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_123841</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56895167DFE05305991F0ACF57</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>bc8d8670-a420-46f9-af0e-7335976768fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>94c3bc62-52ae-4c27-84d8-144eaed8e8b3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aa72e430-2b45-443d-b9b8-620a7ad172cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="Linked LASP Test Cases_P2" id="8591f263-d2e8-4514-811d-f17ca9a76145"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">D:\StreamR3_1061N\StrmRnew</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00000 - StreamRenew - LLP - Test Suite Staging" searchProperties="true" id="5e1a9e9e-9e42-4504-9aff-7cc474298234" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description> This test case will verify the proper response from the Application Tier layer with malformed stream handle values. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b8d6d2d6-6ffc-4459-9b99-afcf9165bf9c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_FOUND");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="334c7b7a-9745-4ab9-aec6-0dfb14fb3e32"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update MD_BASIC_RATING_SET.IS_ADULT to 'N'" id="b2060051-1644-4048-8fe4-7a2550c847a0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String cid = tP.getPropertyValue("cid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.sqlSetIsAdult(cid,"N") == 1;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'active'" id="106ed04e-dab4-4fb2-a92c-c3ad0271692b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusActive(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'active'" id="12f96343-49f9-4816-8aa1-96cb4f716d52"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetAssetMapStatusActive(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="6b8d1d4d-c15b-4f67-83bc-1e20241c72ed" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log);
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove all Parental Control Policies" id="750b6e2e-c17b-4c09-9a71-ad88f105a18f" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="f326fa97-0e09-49fd-b216-acdecef15989"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="57fbd923-90ac-4139-84a4-60e075604e27"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_123841</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56890067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56895167DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPp4JiSBhEumMEO57GRLC4W2p9uXjusoxG3i0NgO0F9/7AApUNrD7j5lrMjSJ+mzpHOG4qjidhiDlJOElpZxRJmbS1uaSKmbIEaYS1EMzOXYnXauhm6lbLpoe0Ureb2W9uQ3K0E1MEF3UD3QbWw/6wg913QfNyzT8U3LQSBVGRPgUcYR5S2tIqW6aetW7dasu2bNrdbK1YbzqJXuIWXStlQpm9oG1JK1tJDzuWsYi8WivKiWk3RmVEzTMh6uhlMcQoy09vk6otxR2t7o47IPGKIIl3ESG+fGns65z9wpmVHERQobX/5XvkzDbBpSx2dkdqYVd8H3aJDkxy6iCSUYReQdqfxcAQ8Tv9SJZklKeBh/GYRlKsM6LLGOLZueacY+tBMN7SFMGdJZiKyNrQkEkALFULqbeC3t7LSq5VdvU0RZkKQx2z/+Hh6gGUTJHHydbcPaQDvd4JFMtc8Bux7FkWAkg2tF1jnCwDbVBHy6qdI4hYAsh4RJgi6ZQmfswjs4rrPRIzNg/E8KtFOctZF7FAlo16+5+dxMkJjx5+jKSwfCY86LX7+7SVo5gF3lXFCUdn08IGVBovWNYHjjh8nDNJg8sAFkF+FgBsPw57zLAuxQ0aj1WdxZZvXLkb28CsedkbH4Nfft1T8DzxrddZ3RuOtnnv342rhe1G8bvdlr/2eNBj8fg1H2gAbCv7i8tqs3OGCX79SI7THpN/99kc7CH9P7qH/XFP3H7Ie9mkQ/mnBRG4zfH+5f62S1iPs9POv6Iw+L5vwROtVfrSKcHfz7su2bn4rnF8B8e1Q08HqlgawS4t83MyUhvh7kqu5cNR/GgXKtrW6p3uEK2e6I78oars9WtVc1L5xao+mYtXpv0Dedquk0m9bA7HQHTn3bZNYoDiB2ExoQ5Uu13DVtvgeIY5cB9SHVs0TITse0byz2EEclj07kI0gog9tEtmcLrcK0tkwFFrP3qLlsRqEw7Wpa00rXCR/RUdoJOKR7Pdky93ryBDCZE1CNW/GaSWIzLnPxhjLBI6ucoTIFIVt7qrqsW7EbjsFIPI9AITXixBcRlOfhPM+Mwdbfio4wy6WT/m3+2r6M6/DfNgVSxydKgalYLkCWEY4Ml8o2kE8B144Ooa35jvCJelgynzwleI1k/9cHTRQ/Co70hp3peAu60P2Nu0/d6ZP1hwaGf+F8+LfOZS0/3zS+yadxWMrCkZ+RHbfbrUPOL9nx2lsiviGr/FYWWSZy7tl21UileUM2eMuYAhayIa9uk1egRmHCOGn6FagPPBfyfXyCh3TKEYdYPpRSfjxh3ZkCU+uOJ1/48tRdas+lzBuHJT8m60ZyVVOIv93msIuVnhSP5WeRpP5HuY7Y2vEj45TbDid0pk5q8q2+IAVOpFkie3aS7ho/ZuCY831hkeQCC5dsehYcvv5TUs24pSGME0G519Nywe6AyHHy1RzcD6VPZvIZVCyl5P+3Up3kFMByAZb6uX21W7iK/3S2M2Q2To/OmcZg8N2c2UfX/iT+LNnJ0yHH2/8B</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D30B56895067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56895067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B5688FF67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D30B5688FF67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56890767DFE05305991F0ACF57</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D30B56890767DFE05305991F0ACF57</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81219</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>750b6e2e-c17b-4c09-9a71-ad88f105a18f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_11008 - StreamRenew - LLP - StreamNotFound - Stream handle owned by another account-404 Not Found_MIGRATED" searchProperties="true" id="6eb9ce9a-95d1-48f3-a183-eaa58206c684" disabled="true"><con:description> This test case will verify the proper response from the Application Tier layer when the API is invoked with a stream handle owned by another account.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="5b81e5b8-812b-4836-be74-594078882292"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_FOUND");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="02d93c4f-1746-41bc-9940-1e96a4108dca"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="1023d6e3-c296-47f7-86ac-19ac7cfb600a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="b34d7de0-1874-4391-bd27-c778042ce869"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="7e02d15d-e2df-4769-8c3e-365ec38fa4ae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="208e23a2-60df-4599-8978-793d8e6a7455"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Change STREAM_HANDLE.ACCOUNT_OID" id="cc168b8c-fec5-4ef4-b293-3a264ee2117b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamSetAccountOID(tC.getPropertyValue("streamhandle"),"01") == 1;


def assertionAccountIdFULL = context.expand( '${#TestCase#assertionAccountIdFULL}' )

assertionAccountIdFULL=assertionAccountIdFULL+"1";
tC.setPropertyValue("assertionAccountIdFULL",assertionAccountIdFULL);</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="c8bc7a4f-706e-477e-8a9c-30ea217443e3"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="5aeca678-6c72-4ed5-8c0e-924c37fdb4fe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="8abdbe91-b79d-4dcf-b625-e58f77622d2a" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>useroid</con:name><con:value>13D30B56895167DFE05305991F0ACF57</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_123841</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:11B64FAF0C8F447C8FF0F4A158A87FFC</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>11B64FAF0C8F447C8FF0F4A158A87FFC</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value>2011/03/13 12:53:11</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D30714BF635DD2E05305991F0A0424</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D30714BF635DD2E05305991F0A0424</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>urn:dece:rightslockerid:org:dece:13D30B56890767DFE05305991F0ACF57</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>13D30B56890767DFE05305991F0ACF57</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81228</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>bstreamhistcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>bstreamcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-03 19:46:48.304</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-02 19:46:48.304</con:value></con:property><con:property><con:name>astreamhistcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>astreamcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:13D30B56895067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>13D30B56895067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:13D30B5688FF67DFE05305991F0ACF571</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>13D30B5688FF67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertid</con:name><con:value/></con:property><con:property><con:name>assert</con:name><con:value>pVZbc+I6DP4rTPp4JiSBhEumMEO57GRLC4W2p9uXjusoxG3i0NgO0F9/7AApUNrD7j5lrMjSJ+mzpHOG4qjidhiDlJOElpZxRJmbS1uaSKmbIEaYS1EMzOXYnXauhm6lbLpoe0Ureb2W9uQ3K0E1MEF3UD3QbWw/6wg913QfNyzT8U3LQSBVGRPgUcYR5S2tIqW6aetW7dasu2bNrdbK1YbzqJXuIWXStlQpm9oG1JK1tJDzuWsYi8WivKiWk3RmVEzTMh6uhlMcQoy09vk6otxR2t7o47IPGKIIl3ESG+fGns65z9wpmVHERQobX/5XvkzDbBpSx2dkdqYVd8H3aJDkxy6iCSUYReQdqfxcAQ8Tv9SJZklKeBh/GYRlKsM6LLGOLZueacY+tBMN7SFMGdJZiKyNrQkEkALFULqbeC3t7LSq5VdvU0RZkKQx2z/+Hh6gGUTJHHydbcPaQDvd4JFMtc8Bux7FkWAkg2tF1jnCwDbVBHy6qdI4hYAsh4RJgi6ZQmfswjs4rrPRIzNg/E8KtFOctZF7FAlo16+5+dxMkJjx5+jKSwfCY86LX7+7SVo5gF3lXFCUdn08IGVBovWNYHjjh8nDNJg8sAFkF+FgBsPw57zLAuxQ0aj1WdxZZvXLkb28CsedkbH4Nfft1T8DzxrddZ3RuOtnnv342rhe1G8bvdlr/2eNBj8fg1H2gAbCv7i8tqs3OGCX79SI7THpN/99kc7CH9P7qH/XFP3H7Ie9mkQ/mnBRG4zfH+5f62S1iPs9POv6Iw+L5vwROtVfrSKcHfz7su2bn4rnF8B8e1Q08HqlgawS4t83MyUhvh7kqu5cNR/GgXKtrW6p3uEK2e6I78oars9WtVc1L5xao+mYtXpv0Dedquk0m9bA7HQHTn3bZNYoDiB2ExoQ5Uu13DVtvgeIY5cB9SHVs0TITse0byz2EEclj07kI0gog9tEtmcLrcK0tkwFFrP3qLlsRqEw7Wpa00rXCR/RUdoJOKR7Pdky93ryBDCZE1CNW/GaSWIzLnPxhjLBI6ucoTIFIVt7qrqsW7EbjsFIPI9AITXixBcRlOfhPM+Mwdbfio4wy6WT/m3+2r6M6/DfNgVSxydKgalYLkCWEY4Ml8o2kE8B144Ooa35jvCJelgynzwleI1k/9cHTRQ/Co70hp3peAu60P2Nu0/d6ZP1hwaGf+F8+LfOZS0/3zS+yadxWMrCkZ+RHbfbrUPOL9nx2lsiviGr/FYWWSZy7tl21UileUM2eMuYAhayIa9uk1egRmHCOGn6FagPPBfyfXyCh3TKEYdYPpRSfjxh3ZkCU+uOJ1/48tRdas+lzBuHJT8m60ZyVVOIv93msIuVnhSP5WeRpP5HuY7Y2vEj45TbDid0pk5q8q2+IAVOpFkie3aS7ho/ZuCY831hkeQCC5dsehYcvv5TUs24pSGME0G519Nywe6AyHHy1RzcD6VPZvIZVCyl5P+3Up3kFMByAZb6uX21W7iK/3S2M2Q2To/OmcZg8N2c2UfX/iT+LNnJ0yHH2/8B</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-03 19:46:48.304</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-02 19:46:48.304</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>13D30B56890067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>208e23a2-60df-4599-8978-793d8e6a7455</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8bc7a4f-706e-477e-8a9c-30ea217443e3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_11049 - StreamRenew - LLP - StreamNotActive - StreamRenew attempt after StreamDelete API invocation-403 Forbidden_FLAKY" searchProperties="true" id="4c1afa30-fb68-416a-b826-cf994eb4642b" disabled="true"><con:description> This test case will verify the proper response from the Application Tier layer when the API is invoked with a stream handle that is in 'deleted' status.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2f7e6464-8671-4740-a8e9-4940afc55c67"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="56ed1675-e796-4953-8bdb-900451c430d1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="3198bbb0-fb93-4a78-ae07-6b3eabbad006" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="136d4696-d58b-4eb1-9563-e04fd1a8f27c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="18566abd-9a8d-4982-a30b-8e8d7ec9d4f1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="9578fb59-7f88-4a4a-a46f-439b504ec698"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="176c739a-9aaa-4443-aba3-630edff4f140"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="a9d305fe-a7eb-4f14-8fc2-e731d0fdde16"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="984774bb-d12d-4391-aba9-a6587e4d4db1" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="b6f96868-0ba2-400f-a0ab-8c32d89f5a9c" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="3a0c97ef-d1c3-4765-9484-88ad5fee3283" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="8ecda26a-dddc-4902-a104-0f875c06f0d2" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56890067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPp4JiSBhEumMEO57GRLC4W2p9uXjusoxG3i0NgO0F9/7AApUNrD7j5lrMjSJ+mzpHOG4qjidhiDlJOElpZxRJmbS1uaSKmbIEaYS1EMzOXYnXauhm6lbLpoe0Ureb2W9uQ3K0E1MEF3UD3QbWw/6wg913QfNyzT8U3LQSBVGRPgUcYR5S2tIqW6aetW7dasu2bNrdbK1YbzqJXuIWXStlQpm9oG1JK1tJDzuWsYi8WivKiWk3RmVEzTMh6uhlMcQoy09vk6otxR2t7o47IPGKIIl3ESG+fGns65z9wpmVHERQobX/5XvkzDbBpSx2dkdqYVd8H3aJDkxy6iCSUYReQdqfxcAQ8Tv9SJZklKeBh/GYRlKsM6LLGOLZueacY+tBMN7SFMGdJZiKyNrQkEkALFULqbeC3t7LSq5VdvU0RZkKQx2z/+Hh6gGUTJHHydbcPaQDvd4JFMtc8Bux7FkWAkg2tF1jnCwDbVBHy6qdI4hYAsh4RJgi6ZQmfswjs4rrPRIzNg/E8KtFOctZF7FAlo16+5+dxMkJjx5+jKSwfCY86LX7+7SVo5gF3lXFCUdn08IGVBovWNYHjjh8nDNJg8sAFkF+FgBsPw57zLAuxQ0aj1WdxZZvXLkb28CsedkbH4Nfft1T8DzxrddZ3RuOtnnv342rhe1G8bvdlr/2eNBj8fg1H2gAbCv7i8tqs3OGCX79SI7THpN/99kc7CH9P7qH/XFP3H7Ie9mkQ/mnBRG4zfH+5f62S1iPs9POv6Iw+L5vwROtVfrSKcHfz7su2bn4rnF8B8e1Q08HqlgawS4t83MyUhvh7kqu5cNR/GgXKtrW6p3uEK2e6I78oars9WtVc1L5xao+mYtXpv0Dedquk0m9bA7HQHTn3bZNYoDiB2ExoQ5Uu13DVtvgeIY5cB9SHVs0TITse0byz2EEclj07kI0gog9tEtmcLrcK0tkwFFrP3qLlsRqEw7Wpa00rXCR/RUdoJOKR7Pdky93ryBDCZE1CNW/GaSWIzLnPxhjLBI6ucoTIFIVt7qrqsW7EbjsFIPI9AITXixBcRlOfhPM+Mwdbfio4wy6WT/m3+2r6M6/DfNgVSxydKgalYLkCWEY4Ml8o2kE8B144Ooa35jvCJelgynzwleI1k/9cHTRQ/Co70hp3peAu60P2Nu0/d6ZP1hwaGf+F8+LfOZS0/3zS+yadxWMrCkZ+RHbfbrUPOL9nx2lsiviGr/FYWWSZy7tl21UileUM2eMuYAhayIa9uk1egRmHCOGn6FagPPBfyfXyCh3TKEYdYPpRSfjxh3ZkCU+uOJ1/48tRdas+lzBuHJT8m60ZyVVOIv93msIuVnhSP5WeRpP5HuY7Y2vEj45TbDid0pk5q8q2+IAVOpFkie3aS7ho/ZuCY831hkeQCC5dsehYcvv5TUs24pSGME0G519Nywe6AyHHy1RzcD6VPZvIZVCyl5P+3Up3kFMByAZb6uX21W7iK/3S2M2Q2To/OmcZg8N2c2UfX/iT+LNnJ0yHH2/8B</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B5688FF67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D30B5688FF67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56895067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D30B56895067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeleteddBy</con:name><con:value>0914</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D30714BF845DD2E05305991F0A0424</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D30714BF845DD2E05305991F0A0424</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value>2010/12/19 12:32</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>A97CF4BED9A54F308FA54C2163AB6496</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:A97CF4BED9A54F308FA54C2163AB6496</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>100</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_123841</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56895167DFE05305991F0ACF57</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56890767DFE05305991F0ACF57</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81233</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D30B56890767DFE05305991F0ACF57</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>176c739a-9aaa-4443-aba3-630edff4f140</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12071 - StreamRenew - LLP - RightsTokenNotActive - RIGHTS_TOKEN.STATUS_ID of suspended cannot be renewed-403 Forbidden" searchProperties="true" id="1daa10de-9486-4f10-940e-95f4c3a83a87" disabled="true"><con:description>This test case will verify that an expired RightsToken has no impact on the renewal of the stream handle associated with it</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9b09b5d1-53dc-4bc9-87b0-3db03d8fcc1d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","RT_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="fa318d56-82b5-4f7b-8e63-e7aa288d450b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="1a306866-cf2c-4549-861d-d230f2f31e42" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="02477c38-b950-423e-bf0e-7a66104e9128"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="669490e6-52a7-4803-9535-78b231f8ebff"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set RIGHTS_TOKEN.STATUS_ID to suspended" id="668d13aa-9ffa-4daf-ab96-ed12ad7e1714"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert b.rightsTokenSetStatusSuspended(tC.getPropertyValue("rightstokenid")) == 1;



</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="7c8bd37b-b1c6-4730-a412-0ee4a55d62ef"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="6b2fb57b-a639-46a3-a2ad-cb1835e1b009"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="dc31415a-0b0c-4b43-bc7a-0aa5808d1066" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="7a017891-9b48-440e-837c-42f7fc076bca" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="6510c301-2ee4-470b-bec9-66fca639314e" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140906_123233</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>RT_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdZc6pME773V1iey1TCJm6VpGpYJKiorC53CKOgCMiAoL/+GzAak5OTc97vImWm6eWZ7md6ep6RvQ/oHkAIJqkfhXVZeGmsWqRLsrTzyHTt5mPToanHldNqPXba9nq9ttdux2026jJCGZRDlNph+tKgSYp6JJlHijEoqkc3e1Tzqdlhlo26BROEPWOVJ7JRL/ZBiHpV1JdGloS9yEY+6oX2HqJe6vR0oIx6WLNnXyE1Xp8vIKuAyauXpnGPIJwnFzowCJwnJ9oTz8QnnWcX9XR/E9pplsD3mC56abzb5nn+lDNPUbIhaJIkCbJLYB0X+Ztfjdfa1Ri6criOLmveDqPQd+zAP9slKAWmXuTWQbCJEj/19n9wTREUWbp+hIXz6FDN8FeD+AhQoftHT59AJsh+RJ5NXZ1pcA0TGDqwbmryS+PXPxXwYmokdojWUbJHX9b/DREMjzCIYug+ouvGruD+3eM32Xp9hk5PDp0gQ/4RjkuWxLYDUX2awLVfjHyEueeielX9eoGuBIPOf6nIM3GPE8MmvsmM4G8gSv+fct2X6uLFsoMMvuqt07qw5m1i1tKlhUtIp0muxfaiG8ovFYR75QuoW6Xf1195eqPVu9Fwvcvgw14Z2IPpcSoEIM6KxUCgCcOSAps9hH2ZOZ3G5iSxnPWbRwFpfPJMtj1eyEtregbW3NLNYfg2D6bLGlzx5xUY2p3mPOYJAF1/yEDKiCaDbHVgzBnnNzldH7CGdBygE6vsovlRkLfD4ZJhvBDwA+d03qkO8otxp7Y1mWXK7tFEb42UiBeVk/Lysaf7PZT7GsJTtcny/zlLdgU7tW8LvmwUa3w6U/iqyLKQnXkenPQNyGUObPDfFoy5ze7g7Xypm5McUNU+EHgu2IojBewkQJki5ym8ZSkFfwYDbjO2sKFRA8GSUzQxF/KFYKnqm5h7hitZp5UUZMuzOFYAqox5TxE10RI0Q1QUEF1khSKspGKr6Eouqwuhhh0IYhGfXambQqnwHVpmFZ2lFzqbLecWlvdPo/34uDLEQOEVidcPki6vGEEVB0BbzBy6n2Hb82gfR7WFyd0ZDWK4BbCfkzgmOCvGLlcMkx4Lml3JjM8yRZYGiopyXq12JdXEfGCZ549c8JzCu3uxEA0wveTCMfj+mFzOB8iesaGigVzYVMZDMXcnVyCKSuY1/pKrkZhromaO+4om5yKoZIKYB2hFj72V5B0dRi0GBtjeF4ZXxVk/xN9D7eic2EPNlvpgtbcoh9E8x2d9ex7lm2UnF9TFYBgtZexmDFSR41SAAZGg3BrOPwdGnMVOYr9L+3C07kd76CU1hYqGu+O5IDs+M9lMxzNWWO/aU8mfMrbrEXLg0FtmB2QZukPKU21XWxCaEPrn1mRozqGfLM7pmFWplt9ha9osM+dCFLTdt/nCHD4UC0c1JlPdnE3PRTE+bDvnIH2bcG+JPlCEzWQM4RQ5DwRp9zmjI7D84m2L+bTWSMjWwEbhAJC2m43oYwJzb9sLCd80RcTkBQqfS/yMl3QgSQ+izAmquu571NSRrMykxoosugFO02kx14LakucEXCnSni3jBd0nlwZwK2dqU+xvVJN9GMzhUh0HhpWCPLbWIUWRUqy+rZV84yglA1w51zl8irhaJgPTnsQDshhaLZI6qG4w0LvAZAqd3hUTb7M87TbLHS7K4u7oLAwQWMYdx2RMsVlNNURNAZ3LeSsU2WS0wNkX8WrvFIKBa1YZRwYnan2VNAtBAMOLDBmALtDiLG4VXqzsa6BQbEyL42ruoUU49ieGmGHSZnd02a5o8q8cKylW+8yxAw9U8JVj4oVjIlgfHuSOQCG2xcdolm84STyobWs06MakOh/tatxDn9ikftCchJ3cGD7MqFPe9rbqbNaVBY9/CNcLj1mlHGmfHRUOdm3J13ZC2GoGJ2WkqKzpE8GJ3MJDjka1sUyFIpOe+0Q3yR64/dLfn89Mkzb3Uz07yqY9RNTJWx1m3Xw7fWsRRCKd2HN7eVT788hZXO6Rr03yJry0UeK+wX7qwNfRS89WW+ik12V5D8tCvY8vRzv9eYwrJb77uK5Ue3E5C6IUhmnjtbQqR7hehgc93+3hm/Oy7nKtFkuzHOi32iTFciLZJKk+CUi2223SPLjOehcUXyDyUbj2y1jlMHu5rH8G6Ox7K2gnMGn84KnMU10ONTx9RCGCRvTS6HA01W4zJOBJsot/hFanzbRAh21yGHS33aiPo3QSThKwTmFyNyA3vw7IGnT82IflFP0+S6AUJ+JgH7M0oJ6O9lMIMzxmJ+Wkiy07bJUAws32sYM/4O6WxBFKn2IvroaZP27j67frjrGO65cKqATNQVwt+M1IT14R/7Yz+tvR/+oeZK5fziw4fWniOxcknz99sKGkwY0KZJdqXjHfVP/NtEtRrd9NiR8QEV+TcYvkHv27uNeHCZ618ThWvUcQLtrBfjo8ZcdjVpWpTZI0kWD3BEWQhA6dDI+LJyPawZC4eSD+ZVC/Yf4S9yb/jC5LvVBP8SnfY0bVq+XfH2mfrHECUlik38n4AD/LyuA/vtycnlPqYfEU/+RR4n7k/Rtfd3Ew5LJD+eGmXJUT9ulzed9PQs+JsFcfN6kouff9nf13sT8Lb+m6QUkxK1ZZCv/8pV52n5eG7ThRFqay0KgE9x2xwpyeYtj7UPrNTTXivr9ZCvTHN8tcGemOB/d246br/1350a8K70BshfwKy0ujwK9vHDzc3HXgd4B/aMLsT034805efxP/LrnL6Vdmv/4P</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6EA82A3E9A8DCFE0401F0A07995A9A</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6EA8A8E5CE3D7EE0401F0A07995A9E</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81263</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7c8bd37b-b1c6-4730-a412-0ee4a55d62ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12073 - StreamRenew - LLP - RightsTokenNotActive - RIGHTS_TOKEN.STATUS_ID of pending cannot be renewed-403 Forbidden" searchProperties="true" id="5c51e8e5-b0fa-4220-9a62-dcb4fe979b23" disabled="true"><con:description>This test case will verify that an expired RightsToken has no impact on the renewal of the stream handle associated with it</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="83a786bf-205a-40b1-ac04-d6bd3696d263"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","RT_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="80fafffa-11ec-4361-ac89-2f6eda98a7db"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="56132a84-c841-42fe-bfa1-3fd89c884740" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="51a93bc7-a2de-467d-8456-e21312b009ad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="b540ce74-e5ea-4dcd-a7ce-35b25776e5e6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set RIGHTS_TOKEN.STATUS_ID to pending" id="137b4abf-7fe0-4dd8-8c48-a22a3e143757"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert b.rightsTokenSetStatusPending(tC.getPropertyValue("rightstokenid")) == 1;



</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="cb26eb64-810d-43ca-9451-083b77155935"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="92adb2f5-8c47-41ea-bbfc-8d3256c7c318"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="0eda989c-6f0f-402f-9b38-772c6771a96f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="7daf0fba-ac9f-4fbc-8488-c82f615fbd5a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="bca79656-8358-419d-82bd-1dd95f924539" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140906_123233</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>RT_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6EA829AD592520E0401F0A05996415</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6EA8A8E5DE3D7EE0401F0A07995A9E</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81265</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>cb26eb64-810d-43ca-9451-083b77155935</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12080 - StreamRenew - LLP - AssetLogicalIDNotActive - ASSET_LP_MAP status of 'deleted'-200 OK" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="82d30322-234a-43cb-a83a-0a792a60fc06" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID whos ASSET_LP_MAP status is 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="5cfd0cba-5e1e-430a-86f9-f2226bbe2920"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
//tC.setPropertyValue("expectErrTypeStreamRenew","LOGICAL_ASSET_NOT_ACTIVE");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="66aa4279-01c7-449d-9a3b-71a5d5e3ca10"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="fc345725-c9cd-46f7-a68e-e14688a2123c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="d4b3c861-1e15-45bb-ae1a-2a82f0ac8537"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="f2a41bae-03f7-47f1-ba44-81d7f9c43b5a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'deleted'" id="02131bfc-e841-43c2-aa38-e7efb6f0f70c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetAssetMapStatusDeleted(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="2b00d801-ea50-48bf-bce9-eca6939343ab"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="b1740c7d-c39f-477f-9be0-569149f4a58f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="8ebd3a2c-278c-4660-abc6-f0bc52ac5ed0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="90aa90a4-fd6c-4d0f-890f-4c189c4fd620"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="be16a45f-ac09-4fe3-9d7d-b98b1405669d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'active'" id="dd9a73ed-68ce-4835-8433-defab258c5cb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetAssetMapStatusActive(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="571c99bd-cc6c-4d6d-86a2-1e43acade857"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140906_123233</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6EA84B28421E3EE0401F0A05996419</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6EA8A8E5E03D7EE0401F0A07995A9E</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2b00d801-ea50-48bf-bce9-eca6939343ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12081 - StreamRenew - LLP - AssetLogicalIDNotActive - ASSET_LP_MAP status of 'suspended'-200 OK" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="08d45bb9-63c8-4d75-b3cb-7b67e61af003" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID whos ASSET_LP_MAP status is 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="79d16f0e-fd83-4d5d-8c58-776655fb81c6"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
//tC.setPropertyValue("expectErrTypeStreamRenew","LOGICAL_ASSET_NOT_ACTIVE");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="ff28afe0-6646-4261-bd2f-58c1d2e4c21d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="f082bed4-3fed-4f92-982f-0f4b67425843"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="68e9ede9-fc75-4c95-ae03-d0fe68e861be"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="a7e8e7cb-713b-4d10-a5e0-f01f8eea1e92"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'suspended'" id="448be70c-4338-4ae8-a35e-3a781bf18eed"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetAssetMapStatusSuspended(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="4664c25e-e1b2-40f7-ac86-245786ec3977"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="f47e2bac-bd3a-4688-9553-ed5e6c64078f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="cf52340e-d01e-4c63-b149-9338522f916f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="06adaa65-de76-4f0e-af58-668746b32aae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="61a434d7-f304-40b2-a79d-5e22e02e130d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'active'" id="5bc34765-109b-4f22-b71b-1f36c60c16ce"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetAssetMapStatusActive(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="ea4bdf65-5652-478e-8699-e4c84f3df86d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140906_123233</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6EA82A8C1F445DE0401F0A07995AA2</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6EA84B28531E3EE0401F0A05996419</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>4664c25e-e1b2-40f7-ac86-245786ec3977</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12082 - StreamRenew - LLP - AssetLogicalIDNotActive - ASSET_LP_MAP status of 'other'-200 OK" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7dde1ed6-7434-40ef-ad11-e698f10060ef" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID whos ASSET_LP_MAP status is 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="fe709ce3-e5f5-4521-95e2-64dcec62924c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
//tC.setPropertyValue("expectErrTypeStreamRenew","LOGICAL_ASSET_NOT_ACTIVE");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="e990f781-0bc9-4272-a1df-ba3b45fab95a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="bf3d2272-4b3a-4394-b665-2c15f919715b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="4df48b9d-d871-442f-936d-446aeaa0d941"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="91328855-ed64-4165-87fc-2536088722a0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'other'" id="8dcc0e11-37ad-4367-ac0a-5f8677616819"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetAssetMapStatusOther(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="5db44403-00bf-4011-bdbf-b2e3cf7fa8b7"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="04403165-101c-420d-b651-fec8bb1f106f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="a4b621b3-29a1-41c4-82e2-ffc322737a28"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="d050631d-1575-4e5c-a48c-b3c3f2861781"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="b2fab6cf-c06a-4996-a070-67e18da7866b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'active'" id="bdc692bd-06bf-4720-a90c-7a3d09eb0cee"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetAssetMapStatusActive(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="22964dac-cf97-431f-a191-84db26bb2e72"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140906_123233</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6EA871C51F4AC5E0401F0A07995AAE</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6EA829AE502520E0401F0A05996415</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5db44403-00bf-4011-bdbf-b2e3cf7fa8b7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12087 - StreamRenew - LLP - ContentIDNotActive - MD_BASIC CID status of 'other'-403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="659f3da4-c41f-4ced-8d8e-907a8490f35b" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="33799e5e-a9a3-43e8-b967-3a30daee16d3"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","CID_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="25cd0181-5454-480e-9069-4b5bdfb2e54f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="ed796959-ebb4-4dad-bae7-c74e88aaf107"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="902b9faf-b3d1-496a-a6dc-537e27ac995a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="f8d97a60-3392-4328-a920-684d8f3fd7a5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'other'" id="612b05c9-abb6-4c74-a3ed-0f0c50437550"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusOther(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="30c97a88-9eb0-4b2d-b6a6-2654eb3d7dd3"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="bae05dcf-d24e-4223-b938-0ed214142e4b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="38581b2c-05ec-40bb-bee3-3198011daee4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="b7847dcb-5f4a-4820-b54e-6dbd1316a52b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="ad1f734f-2efc-467a-b6c4-e40fc16d861b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'active'" id="65beb3a7-9df3-47db-88b8-31122586ef0c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusActive(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="31f002cf-5001-4469-b6c9-476c410eeeaa"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140906_123233</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>CID_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6EA842431D367DE0401F0A0599641D</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6EA82A40268DCFE0401F0A07995A9A</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>30c97a88-9eb0-4b2d-b6a6-2654eb3d7dd3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_14801 - StreamRenew - LLP - AccountNotActive - ACCOUNT.STATUS of deleted-403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="83df2843-2ed8-4dab-a030-b2e8073334ae" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b73fe3c4-8f2f-4540-b45d-a2cbc4caab72"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="f9dfad4d-0533-431d-83cb-c6bd0fcf1f26"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="79e7991c-6f6c-4bb3-9616-653096436dec" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="53a75696-b0a2-48c2-89f1-990ffae01b20"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="bf2d2fa5-195a-495f-b744-66d9d7ab2bb9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to deleted" id="66e87ce1-08de-4f5f-85dc-963f1ca299ec"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "deleted");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="491ff6e7-5d8c-4333-960d-be1a5dcf408c"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="25821199-fd38-4779-b858-ad576135e41f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="80ff3b1e-eb6e-4020-9333-07b15057b953"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="3c032648-23fa-48b6-bcca-7f1943c53ce9" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_123841</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56890067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56895167DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPp4JiSBhEumMEO57GRLC4W2p9uXjusoxG3i0NgO0F9/7AApUNrD7j5lrMjSJ+mzpHOG4qjidhiDlJOElpZxRJmbS1uaSKmbIEaYS1EMzOXYnXauhm6lbLpoe0Ureb2W9uQ3K0E1MEF3UD3QbWw/6wg913QfNyzT8U3LQSBVGRPgUcYR5S2tIqW6aetW7dasu2bNrdbK1YbzqJXuIWXStlQpm9oG1JK1tJDzuWsYi8WivKiWk3RmVEzTMh6uhlMcQoy09vk6otxR2t7o47IPGKIIl3ESG+fGns65z9wpmVHERQobX/5XvkzDbBpSx2dkdqYVd8H3aJDkxy6iCSUYReQdqfxcAQ8Tv9SJZklKeBh/GYRlKsM6LLGOLZueacY+tBMN7SFMGdJZiKyNrQkEkALFULqbeC3t7LSq5VdvU0RZkKQx2z/+Hh6gGUTJHHydbcPaQDvd4JFMtc8Bux7FkWAkg2tF1jnCwDbVBHy6qdI4hYAsh4RJgi6ZQmfswjs4rrPRIzNg/E8KtFOctZF7FAlo16+5+dxMkJjx5+jKSwfCY86LX7+7SVo5gF3lXFCUdn08IGVBovWNYHjjh8nDNJg8sAFkF+FgBsPw57zLAuxQ0aj1WdxZZvXLkb28CsedkbH4Nfft1T8DzxrddZ3RuOtnnv342rhe1G8bvdlr/2eNBj8fg1H2gAbCv7i8tqs3OGCX79SI7THpN/99kc7CH9P7qH/XFP3H7Ie9mkQ/mnBRG4zfH+5f62S1iPs9POv6Iw+L5vwROtVfrSKcHfz7su2bn4rnF8B8e1Q08HqlgawS4t83MyUhvh7kqu5cNR/GgXKtrW6p3uEK2e6I78oars9WtVc1L5xao+mYtXpv0Dedquk0m9bA7HQHTn3bZNYoDiB2ExoQ5Uu13DVtvgeIY5cB9SHVs0TITse0byz2EEclj07kI0gog9tEtmcLrcK0tkwFFrP3qLlsRqEw7Wpa00rXCR/RUdoJOKR7Pdky93ryBDCZE1CNW/GaSWIzLnPxhjLBI6ucoTIFIVt7qrqsW7EbjsFIPI9AITXixBcRlOfhPM+Mwdbfio4wy6WT/m3+2r6M6/DfNgVSxydKgalYLkCWEY4Ml8o2kE8B144Ooa35jvCJelgynzwleI1k/9cHTRQ/Co70hp3peAu60P2Nu0/d6ZP1hwaGf+F8+LfOZS0/3zS+yadxWMrCkZ+RHbfbrUPOL9nx2lsiviGr/FYWWSZy7tl21UileUM2eMuYAhayIa9uk1egRmHCOGn6FagPPBfyfXyCh3TKEYdYPpRSfjxh3ZkCU+uOJ1/48tRdas+lzBuHJT8m60ZyVVOIv93msIuVnhSP5WeRpP5HuY7Y2vEj45TbDid0pk5q8q2+IAVOpFkie3aS7ho/ZuCY831hkeQCC5dsehYcvv5TUs24pSGME0G519Nywe6AyHHy1RzcD6VPZvIZVCyl5P+3Up3kFMByAZb6uX21W7iK/3S2M2Q2To/OmcZg8N2c2UfX/iT+LNnJ0yHH2/8B</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">5E9D87D82C4D4948926CEF56CABBA100</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2F17B3D7F4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D30B5688FF67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B5688FF67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D30B56895067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56895067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2F17B3D7F4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:5E9D87D82C4D4948926CEF56CABBA100</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81297</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D30B56890767DFE05305991F0ACF57</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56890767DFE05305991F0ACF57</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>491ff6e7-5d8c-4333-960d-be1a5dcf408c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_14806 - StreamRenew - LLP - AccountNotActive - ACCOUNT.STATUS of blocked:tou-403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7f0f892f-a47a-41a2-a659-0627ee07c67c" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4b9fc2e3-dcbe-4063-81e8-8907ab248465"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="f8dada4d-eb4a-49cb-bbd9-fae93f7e6053"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="7f9d82b7-7718-425f-b98b-e509cb6fafc9" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="be20b00c-46d3-4a6f-b3e9-209111666649"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="9d27c8c3-47b1-40b6-b1bb-92a35696fdf5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to blocked:tou" id="db680b2b-30d3-40b2-948d-42ebd0388f39"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "blocked:tou");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="ea87e0cd-3c2d-45f4-87ea-4c043c57c764"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="10a8d43f-50fa-4377-b7c3-aebbb683c4ff"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="2f6de345-84e8-4e88-a9e8-ecd4b94a5a20"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="7d1cb928-a231-4cc2-8c6a-00265a3af131" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_123841</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56890067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56895167DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPp4JiSBhEumMEO57GRLC4W2p9uXjusoxG3i0NgO0F9/7AApUNrD7j5lrMjSJ+mzpHOG4qjidhiDlJOElpZxRJmbS1uaSKmbIEaYS1EMzOXYnXauhm6lbLpoe0Ureb2W9uQ3K0E1MEF3UD3QbWw/6wg913QfNyzT8U3LQSBVGRPgUcYR5S2tIqW6aetW7dasu2bNrdbK1YbzqJXuIWXStlQpm9oG1JK1tJDzuWsYi8WivKiWk3RmVEzTMh6uhlMcQoy09vk6otxR2t7o47IPGKIIl3ESG+fGns65z9wpmVHERQobX/5XvkzDbBpSx2dkdqYVd8H3aJDkxy6iCSUYReQdqfxcAQ8Tv9SJZklKeBh/GYRlKsM6LLGOLZueacY+tBMN7SFMGdJZiKyNrQkEkALFULqbeC3t7LSq5VdvU0RZkKQx2z/+Hh6gGUTJHHydbcPaQDvd4JFMtc8Bux7FkWAkg2tF1jnCwDbVBHy6qdI4hYAsh4RJgi6ZQmfswjs4rrPRIzNg/E8KtFOctZF7FAlo16+5+dxMkJjx5+jKSwfCY86LX7+7SVo5gF3lXFCUdn08IGVBovWNYHjjh8nDNJg8sAFkF+FgBsPw57zLAuxQ0aj1WdxZZvXLkb28CsedkbH4Nfft1T8DzxrddZ3RuOtnnv342rhe1G8bvdlr/2eNBj8fg1H2gAbCv7i8tqs3OGCX79SI7THpN/99kc7CH9P7qH/XFP3H7Ie9mkQ/mnBRG4zfH+5f62S1iPs9POv6Iw+L5vwROtVfrSKcHfz7su2bn4rnF8B8e1Q08HqlgawS4t83MyUhvh7kqu5cNR/GgXKtrW6p3uEK2e6I78oars9WtVc1L5xao+mYtXpv0Dedquk0m9bA7HQHTn3bZNYoDiB2ExoQ5Uu13DVtvgeIY5cB9SHVs0TITse0byz2EEclj07kI0gog9tEtmcLrcK0tkwFFrP3qLlsRqEw7Wpa00rXCR/RUdoJOKR7Pdky93ryBDCZE1CNW/GaSWIzLnPxhjLBI6ucoTIFIVt7qrqsW7EbjsFIPI9AITXixBcRlOfhPM+Mwdbfio4wy6WT/m3+2r6M6/DfNgVSxydKgalYLkCWEY4Ml8o2kE8B144Ooa35jvCJelgynzwleI1k/9cHTRQ/Co70hp3peAu60P2Nu0/d6ZP1hwaGf+F8+LfOZS0/3zS+yadxWMrCkZ+RHbfbrUPOL9nx2lsiviGr/FYWWSZy7tl21UileUM2eMuYAhayIa9uk1egRmHCOGn6FagPPBfyfXyCh3TKEYdYPpRSfjxh3ZkCU+uOJ1/48tRdas+lzBuHJT8m60ZyVVOIv93msIuVnhSP5WeRpP5HuY7Y2vEj45TbDid0pk5q8q2+IAVOpFkie3aS7ho/ZuCY831hkeQCC5dsehYcvv5TUs24pSGME0G519Nywe6AyHHy1RzcD6VPZvIZVCyl5P+3Up3kFMByAZb6uX21W7iK/3S2M2Q2To/OmcZg8N2c2UfX/iT+LNnJ0yHH2/8B</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">117427401CAC48079E1B4EF495AFC23C</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BFB05DD2E05305991F0A0424</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D30B5688FF67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B5688FF67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D30B56895067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56895067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D30B56890767DFE05305991F0ACF57</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56890767DFE05305991F0ACF57</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D30714BFB05DD2E05305991F0A0424</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:117427401CAC48079E1B4EF495AFC23C</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ea87e0cd-3c2d-45f4-87ea-4c043c57c764</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_14807 - StreamRenew - LLP - AccountNotActive - ACCOUNT.STATUS of blocked-403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c7cf5fac-79e7-4061-8ca2-a933fd6724b3" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6927b362-f50f-4ff7-bfe4-66276dc351c2"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="da453f63-153a-464a-8f5e-d71c67181b75"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="79ab92d9-079a-4d2e-be1c-ea36c64f637f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="1c23d374-05e6-4f49-a00d-099f013d4c45"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="eb39a658-b3cf-4200-ace6-0afd0fff1742"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to blocked" id="f60d861f-392d-4d91-83bc-f6658b05ca8b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "blocked");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="993329cf-3d8c-4fd8-9cac-728611316294"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="a28920db-b1eb-4d1e-bb2f-092735401648"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="595b1a4c-0924-488d-a0c0-77e39d0a5dcf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="2fc003da-1057-477f-8be1-f5e0a8967ac9" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81303</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_123841</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56890067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56895167DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPp4JiSBhEumMEO57GRLC4W2p9uXjusoxG3i0NgO0F9/7AApUNrD7j5lrMjSJ+mzpHOG4qjidhiDlJOElpZxRJmbS1uaSKmbIEaYS1EMzOXYnXauhm6lbLpoe0Ureb2W9uQ3K0E1MEF3UD3QbWw/6wg913QfNyzT8U3LQSBVGRPgUcYR5S2tIqW6aetW7dasu2bNrdbK1YbzqJXuIWXStlQpm9oG1JK1tJDzuWsYi8WivKiWk3RmVEzTMh6uhlMcQoy09vk6otxR2t7o47IPGKIIl3ESG+fGns65z9wpmVHERQobX/5XvkzDbBpSx2dkdqYVd8H3aJDkxy6iCSUYReQdqfxcAQ8Tv9SJZklKeBh/GYRlKsM6LLGOLZueacY+tBMN7SFMGdJZiKyNrQkEkALFULqbeC3t7LSq5VdvU0RZkKQx2z/+Hh6gGUTJHHydbcPaQDvd4JFMtc8Bux7FkWAkg2tF1jnCwDbVBHy6qdI4hYAsh4RJgi6ZQmfswjs4rrPRIzNg/E8KtFOctZF7FAlo16+5+dxMkJjx5+jKSwfCY86LX7+7SVo5gF3lXFCUdn08IGVBovWNYHjjh8nDNJg8sAFkF+FgBsPw57zLAuxQ0aj1WdxZZvXLkb28CsedkbH4Nfft1T8DzxrddZ3RuOtnnv342rhe1G8bvdlr/2eNBj8fg1H2gAbCv7i8tqs3OGCX79SI7THpN/99kc7CH9P7qH/XFP3H7Ie9mkQ/mnBRG4zfH+5f62S1iPs9POv6Iw+L5vwROtVfrSKcHfz7su2bn4rnF8B8e1Q08HqlgawS4t83MyUhvh7kqu5cNR/GgXKtrW6p3uEK2e6I78oars9WtVc1L5xao+mYtXpv0Dedquk0m9bA7HQHTn3bZNYoDiB2ExoQ5Uu13DVtvgeIY5cB9SHVs0TITse0byz2EEclj07kI0gog9tEtmcLrcK0tkwFFrP3qLlsRqEw7Wpa00rXCR/RUdoJOKR7Pdky93ryBDCZE1CNW/GaSWIzLnPxhjLBI6ucoTIFIVt7qrqsW7EbjsFIPI9AITXixBcRlOfhPM+Mwdbfio4wy6WT/m3+2r6M6/DfNgVSxydKgalYLkCWEY4Ml8o2kE8B144Ooa35jvCJelgynzwleI1k/9cHTRQ/Co70hp3peAu60P2Nu0/d6ZP1hwaGf+F8+LfOZS0/3zS+yadxWMrCkZ+RHbfbrUPOL9nx2lsiviGr/FYWWSZy7tl21UileUM2eMuYAhayIa9uk1egRmHCOGn6FagPPBfyfXyCh3TKEYdYPpRSfjxh3ZkCU+uOJ1/48tRdas+lzBuHJT8m60ZyVVOIv93msIuVnhSP5WeRpP5HuY7Y2vEj45TbDid0pk5q8q2+IAVOpFkie3aS7ho/ZuCY831hkeQCC5dsehYcvv5TUs24pSGME0G519Nywe6AyHHy1RzcD6VPZvIZVCyl5P+3Up3kFMByAZb6uX21W7iK/3S2M2Q2To/OmcZg8N2c2UfX/iT+LNnJ0yHH2/8B</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3DDB07C662D64F5F93CFF8CC05533224</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE63612E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D30B5688FF67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B5688FF67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D30B56895067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56895067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D30B56890767DFE05305991F0ACF57</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56890767DFE05305991F0ACF57</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D34AAE63612E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:3DDB07C662D64F5F93CFF8CC05533224</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>993329cf-3d8c-4fd8-9cac-728611316294</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_14841 - StreamRenew - LLP - ACCOUNT_USER.STATUS of deleted-200 OK_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="634cc64f-a10e-48ec-ae54-52ebf91bba6e" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="c3537385-c843-4c8f-8ac1-a46229fe2013"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="8bb65426-798e-4d75-9495-00675d2f027d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="148c5970-6a22-4d33-8a06-e8ee61f2b2d2" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="61feb45e-d7bb-4372-84f5-5b9d622424af"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="915520b4-bf86-46d9-8792-82889bd2e602"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="56661965-8c28-48be-a557-61df5bc14adb"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="8fcadcf5-fe8c-4889-b78a-e52a45538cb5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to deleted" id="4c39bc36-4205-4f37-92a5-9a0537fc1852"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "deleted");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="161627bb-d1dd-4be1-806d-5c544f392f0f"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="63b51619-cd07-4b10-a4bc-240f646bf464"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="332c22a5-7829-406a-893e-fea3d4425dba"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="ff1f2c31-66f2-4dd9-be23-a9232286185a" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_123841</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56890067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56895167DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPp4JiSBhEumMEO57GRLC4W2p9uXjusoxG3i0NgO0F9/7AApUNrD7j5lrMjSJ+mzpHOG4qjidhiDlJOElpZxRJmbS1uaSKmbIEaYS1EMzOXYnXauhm6lbLpoe0Ureb2W9uQ3K0E1MEF3UD3QbWw/6wg913QfNyzT8U3LQSBVGRPgUcYR5S2tIqW6aetW7dasu2bNrdbK1YbzqJXuIWXStlQpm9oG1JK1tJDzuWsYi8WivKiWk3RmVEzTMh6uhlMcQoy09vk6otxR2t7o47IPGKIIl3ESG+fGns65z9wpmVHERQobX/5XvkzDbBpSx2dkdqYVd8H3aJDkxy6iCSUYReQdqfxcAQ8Tv9SJZklKeBh/GYRlKsM6LLGOLZueacY+tBMN7SFMGdJZiKyNrQkEkALFULqbeC3t7LSq5VdvU0RZkKQx2z/+Hh6gGUTJHHydbcPaQDvd4JFMtc8Bux7FkWAkg2tF1jnCwDbVBHy6qdI4hYAsh4RJgi6ZQmfswjs4rrPRIzNg/E8KtFOctZF7FAlo16+5+dxMkJjx5+jKSwfCY86LX7+7SVo5gF3lXFCUdn08IGVBovWNYHjjh8nDNJg8sAFkF+FgBsPw57zLAuxQ0aj1WdxZZvXLkb28CsedkbH4Nfft1T8DzxrddZ3RuOtnnv342rhe1G8bvdlr/2eNBj8fg1H2gAbCv7i8tqs3OGCX79SI7THpN/99kc7CH9P7qH/XFP3H7Ie9mkQ/mnBRG4zfH+5f62S1iPs9POv6Iw+L5vwROtVfrSKcHfz7su2bn4rnF8B8e1Q08HqlgawS4t83MyUhvh7kqu5cNR/GgXKtrW6p3uEK2e6I78oars9WtVc1L5xao+mYtXpv0Dedquk0m9bA7HQHTn3bZNYoDiB2ExoQ5Uu13DVtvgeIY5cB9SHVs0TITse0byz2EEclj07kI0gog9tEtmcLrcK0tkwFFrP3qLlsRqEw7Wpa00rXCR/RUdoJOKR7Pdky93ryBDCZE1CNW/GaSWIzLnPxhjLBI6ucoTIFIVt7qrqsW7EbjsFIPI9AITXixBcRlOfhPM+Mwdbfio4wy6WT/m3+2r6M6/DfNgVSxydKgalYLkCWEY4Ml8o2kE8B144Ooa35jvCJelgynzwleI1k/9cHTRQ/Co70hp3peAu60P2Nu0/d6ZP1hwaGf+F8+LfOZS0/3zS+yadxWMrCkZ+RHbfbrUPOL9nx2lsiviGr/FYWWSZy7tl21UileUM2eMuYAhayIa9uk1egRmHCOGn6FagPPBfyfXyCh3TKEYdYPpRSfjxh3ZkCU+uOJ1/48tRdas+lzBuHJT8m60ZyVVOIv93msIuVnhSP5WeRpP5HuY7Y2vEj45TbDid0pk5q8q2+IAVOpFkie3aS7ho/ZuCY831hkeQCC5dsehYcvv5TUs24pSGME0G519Nywe6AyHHy1RzcD6VPZvIZVCyl5P+3Up3kFMByAZb6uX21W7iK/3S2M2Q2To/OmcZg8N2c2UfX/iT+LNnJ0yHH2/8B</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">B60BD0009AFE4933AE6D238054572BD2</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D353F90CA64378E05307991F0AAAF5</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D30B5688FF67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B5688FF67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D30B56895067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56895067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D353F90CA64378E05307991F0AAAF5</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:B60BD0009AFE4933AE6D238054572BD2</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81305</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D30B56890767DFE05305991F0ACF57</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B56890767DFE05305991F0ACF57</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>161627bb-d1dd-4be1-806d-5c544f392f0f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Test Cases Containing APIs" disabled="true" id="7949b172-79ad-427f-bdde-97fc734158c3"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS API" searchProperties="true" id="a3ca1214-bd95-46db-92ad-d5471b6f568f" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="5d1046de-82e2-48ae-a41b-80d2dd4fed41"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("expectErrTypeSTS",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="c90169e1-c954-424d-b116-d1e8b791961d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
tC.setPropertyValue("expectErrTypeSTS",callTC.getPropertyValue("expectErrTypeSTS"));


</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="e7c43eae-3e83-4573-8ce7-3d737b2e71bc"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep  testStep = testCase.getTestStepByName("POST - STS");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "0910":  // LLP
		keyStorePath = "I:\\deceAPI\\certs\\910_concat.pem";
	break;
	case "0914":  // DLP
		keyStorePath = "I:\\deceAPI\\certs\\914_concat.pem";
	break;
	case "0912":  // RTR
		keyStorePath = "I:\\deceAPI\\certs\\912_concat.pem";
	break;
	case "1910":  // LLP Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1910.pem";
	break;
	case "1912":  // RTR Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1912.pem";
	break;
	case "1914":  // DLP Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1914_concat.pem";
	break;
	case "0701":
		keyStorePath = "I:\\deceAPI\\certs\\999.pem";
	break;
	case "80080010":
	default:
		keyStorePath = "I:\\deceAPI\\certs\\80080010_concat.pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - STS" id="3de63cbf-5104-4bcb-aa6b-4d480e44500a"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/SecurityToken/SecurityTokenExchange" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS" mediaType="application/xml" postQueryString="false" sslKeystore="912_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#targetURL}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="http://www.decellc.org/schema/2010/10/dece">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="tokentype" value="${#TestCase#tokentype}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="15c0fc3c-7522-4a91-836b-6fae27cf981d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('POST - STS');

String expXML = null;
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;

/*
*  Get the HTTP headers
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
//tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);

this.log.info "contentLength [$contentLength]";

if (contentLength.toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
     rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);

     int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

	String XMLbody  = strVal.substring(startAssert, strVal.length());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="886560c0-00b0-48e5-b001-e0bf11a3256e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url           = tP.getPropertyValue("targetURL");
def urnacct       = tP.getPropertyValue("urnaccount");
def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrTypeSTS");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest  = url + "/rest/$major/$minor/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

log.info "major[$major] - minor[$minor]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="7773d381-2e31-4182-bc84-9941e03daad4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="921388b4-a9a1-4e7f-8437-427b552d05b6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties 1" id="ead3f0b4-001d-4ce9-bc46-1b4d9d0609c7"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid","0912");
tC.setPropertyValue("rtrnodeid","0912");
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);



</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="93f73e6e-ec36-4dc2-aa3c-8374e2b6a756"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL", callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("cid", callTC.getPropertyValue("cid"));
tC.setPropertyValue("alid", callTC.getPropertyValue("alid"));

if (tC.getPropertyValue("alid") == "null" || tC.getPropertyValue("alid") == null) {
	tC.setPropertyValue("alid", tP.getPropertyValue("alid"));
}
if (tC.getPropertyValue("cid") == "null" || tC.getPropertyValue("cid") == null) {
	tC.setPropertyValue("cid", tP.getPropertyValue("cid"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity as RTR Consumer" id="a4ee7114-c986-4106-a7f8-89022422836a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="3b40bc2a-a1a4-4596-9821-344d7914dc26"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId    = testCase.getPropertyValue("nodeid");
String rtrnodeId = testCase.getPropertyValue("rtrnodeid");

RestTestRequestStep  testStep = testCase.getTestStepByName("POST - RightsTokenCreate");

/* 
*  if the rtrnodeid is set that means override the default
*  nodeid extracted.
*/
if (rtrnodeId.length() > 0 &amp;&amp; rtrnodeId != "") {
	nodeId = rtrnodeId;
}

switch (nodeId) {
	case "1912":  // DLP Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1912.pem";
	break;
	case "0912":
		keyStorePath = "I:\\deceAPI\\certs\\912_concat.pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - RightsTokenCreate" id="77700114-23a0-4c4f-b847-c82fcd3299d1"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/${#TestCase#assertionAccountIdFULL}/RightsToken" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - RightsTokenCreate" mediaType="application/xml" postQueryString="false" sslKeystore="912_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2011/06/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="${#TestCase#alid}" ContentID="${#TestCase#cid}">
                <ns4:SoldAs>
                                <ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName>
                                <ns4:ContentID>${#Project#cid}</ns4:ContentID>
                </ns4:SoldAs>
                <ns4:RightsProfiles>
                                <ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition">
                                                <ns4:CanDownload>true</ns4:CanDownload>
                                                <ns4:CanStream>true</ns4:CanStream>
                                </ns4:PurchaseProfile>
                                <ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition">
                                                <ns4:CanDownload>true</ns4:CanDownload>
                                                <ns4:CanStream>true</ns4:CanStream>
                                </ns4:PurchaseProfile>
                                <ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition">
                                                <ns4:CanDownload>true</ns4:CanDownload>
                                                <ns4:CanStream>true</ns4:CanStream>
                                </ns4:PurchaseProfile>
                </ns4:RightsProfiles>
                <ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc>
                <ns4:FulfillmentWebLoc ContentProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentWebLoc>
                <ns4:FulfillmentWebLoc ContentProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentWebLoc>
                <ns4:FulfillmentManifestLoc ContentProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location>
                                <ns4:Preference>3</ns4:Preference>
                </ns4:FulfillmentManifestLoc>
                <ns4:FulfillmentManifestLoc ContentProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentManifestLoc>
                <ns4:PurchaseInfo>
                                <ns4:NodeID>urn:dece:org:org:dece:${#TestCase#nodeid}</ns4:NodeID>
                                <ns4:RetailerTransaction>RetailerTransaction_1_node0799_RetailerNode</ns4:RetailerTransaction>
                                <ns4:PurchaseAccount>${#TestCase#assertionAccountIdFULL}</ns4:PurchaseAccount>
                                <ns4:PurchaseUser>${#TestCase#assertionUserIdFULL}</ns4:PurchaseUser>
                                <ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime>
                </ns4:PurchaseInfo>
</ns4:RightsTokenData>
]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Handle from API Result" id="c0853b4a-3b72-41be-8cda-69253f635322"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def targetHost = testProject.getPropertyValue("targetHost");
def nodeaccountId = testCase.getPropertyValue("assertionAccountIdFULL");
def urnRightsToken = testProject.getPropertyValue("urnRightsToken");
def urnAcct = testProject.getPropertyValue("urnaccount");
def tStep  = testCase.getTestStepByName('POST - RightsTokenCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String rightsid = null;
String rightsidfull = null;
String contentLocation = null;
String major = testProject.getPropertyValue("VersionMajor");
String minor = testProject.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
	}
}

def b = contentLocation.toURL();
def urlStr = b.getPath();

//Assert the hostname in the URL is correct
//assert b.getHost().matches(targetHost.toString());
//Assert the protocol is correct
//assert b.getProtocol().matches("https");
//Assert the URI is correct
assert b.getPath().matches("/rest/$major/$minor/Account/$nodeaccountId/RightsToken/$urnRightsToken[0-9, A-F]*");


//this.log.info "b is " + b.getPath();


//this.log.info "urlStr is " +urlStr;

int lastColon = urlStr.lastIndexOf(':');
int lastSlash = urlStr.lastIndexOf('/');
rightsid     = urlStr.substring(lastColon + 1);
rightsidfull = urlStr.substring(lastSlash + 1);

this.log.info "rightsid[$rightsid] - rightsidfull[$rightsidfull]";

testCase.setPropertyValue("rightstokenid",rightsid);
testCase.setPropertyValue("rightstokenidFULL",rightsidfull);



</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="932296fb-ada9-454a-85cd-3f715c6484db"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Return RightsToken to calling Test Case" id="b1b9bc26-be94-4695-b5d7-b3f35d716b95"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("rightstokenid",tC.getPropertyValue("rightstokenid"));
callTC.setPropertyValue("rightstokenidFULL",tC.getPropertyValue("rightstokenidFULL"));</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">fc976555-dca4-4e0b-bc03-89ef6a35cb2d</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7002/rest/1/0/SecurityToken/Assertion/fc976555-dca4-4e0b-bc03-89ef6a35cb2d</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/plain; charset=UTF-8</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Authorization Information Extraction via STS</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>pjgorg1full1</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" >
<Error ErrorID="Forbidden">
       <Reason>Forbidden</Reason>
        <OriginalRequest></OriginalRequest>
       <ErrorLink></ErrorLink>
    </Error>
</ErrorList>
]]></con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS GET API" searchProperties="true" id="0d14930d-5afc-4c75-9527-3edd573da514" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e0c17819-07c4-4a73-9c93-3e8c9721b41e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("expectErrTypeSTSGet",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="786a8093-a978-4deb-8226-ea7de07c5e6c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectErrTypeSTSGet",callTC.getPropertyValue("expectErrTypeSTSGet"));


</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="bfab7bef-cad4-45e4-ace9-8c28f705ba34"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("STS - GET");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "0910":
		keyStorePath = "I:\\deceAPI\\certs\\910_concat.pem";
	break;
	case "9115":  // LLPCS
		keyStorePath = "I:\\deceAPI\\certs\\9115_concat.pem";
	break;
	case "9116":  // DLPCS
		keyStorePath = "I:\\deceAPI\\certs\\9116_concat.pem";
	break;
	case "0912":
		keyStorePath = "I:\\deceAPI\\certs\\912_concat.pem";
	break;
	case "0914":
		keyStorePath = "I:\\deceAPI\\certs\\914_concat.pem";
	break;
	case "1910":  // LLP Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1910.pem";
	break;
	case "1912":  // RTR Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1912.pem";
	break;
	case "1914":  // DLP Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1914_concat.pem";
	break;
	case "666":
		keyStorePath = "I:\\deceAPI\\certs\\666_concat.pem";
	break;
	case "0999":
		keyStorePath = "C:\\Temp\\peter.pem";
	break;
	case "80080010":
	default:
		keyStorePath = "I:\\deceAPI\\certs\\80080010_concat.pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="STS - GET" id="ea51f7fe-050d-4725-b201-59070cca8fbc"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/SecurityToken/Assertion/{ASSERTION}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STS - GET" mediaType="application/xml" sslKeystore="912_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="0a34d0ba-f9d8-42be-a30c-dcc3e3837ef9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('STS - GET');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
		 	status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
//tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="f9901345-70be-4b58-ba8a-6c45526719d0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def url           = tP.getPropertyValue("targetURL");
def urnacct       = tP.getPropertyValue("urnaccount");
def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest  = url + "/rest/$major/$minor/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
	tC.setPropertyValue("expectErrTypeSTSGet",expectErrType);
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "Forbidden";
		errorReason = "Forbidden";
	break;
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

this.log.info "expectErrType [$expectErrType]";

if (dobodyXML) {
	if (XMLbody.length() > 0) {
			def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", ds: "http://www.w3.org/2000/09/xmldsig#");
		if (expectErrType == "SUCCESS") {
			// Verify response sizes...
			this.log.info "Assertion size: " + myXML.size();

			/*
			assert myXML."saml2:Assertion".size() == 1;
			assert myXML."saml2:Assertion"."ds:Signature".size()    == 1;
			assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo".size()   == 1;
			assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
			assert myXML."saml2:Assertion"."ds:Signature"."ds:SignatureValue".size()  == 1;
			assert myXML."saml2:Assertion"."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
			assert myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID".size() == 1;
			*/
			assert myXML.size() == 1;
			assert myXML."ds:Signature".size() == 1;
			assert myXML."ds:Signature"."ds:SignedInfo".size()   == 1;
			assert myXML."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
			assert myXML."ds:Signature"."ds:SignatureValue".size()  == 1;
			assert myXML."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
			assert myXML."saml2:Subject"."saml2:NameID".size() == 1;

			def samlRespNodeAccount = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
			
		} else {
			// ErrorCode
			this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
			assert myXML.Error.@ErrorID.toString() == errorID;
	
			// ErrorReason
			this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
			assert myXML.Error.Reason.toString() == errorReason;

			// ErrorLink
			this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		return false;
	}
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Extract NodeUserID and NodeAccountId" id="fb14a53b-a0c0-4c0a-babe-5a133b56744a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody       = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Subject"."saml2:NameID";

			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";

			tC.setPropertyValue("assertionAccountId",accountId.substring(accountId.lastIndexOf(":")+1, accountId.length()));
			tC.setPropertyValue("assertionAccountIdFULL",accountId);
			tC.setPropertyValue("assertionUserId",userId.substring(userId.lastIndexOf(":")+1,userId.length()));
			tC.setPropertyValue("assertionUserIdFULL",userId);

			this.log.info "assertionAccountId property is " + tC.getPropertyValue("assertionAccountId");
			this.log.info "assertionUserId property is " + tC.getPropertyValue("assertionUserId");
	} else {
		return false;
	}
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="7ca274ed-f043-4ba5-85b3-acdf2b66df74"><con:settings/><con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
//import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	
int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/
byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("assert", base64encodeStr);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Return extracted Properties back to calling Test Case" id="bfe4d5b3-e756-4886-b866-55ddb6d76c98"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertXML",tC.getPropertyValue("assertXML"));
callTC.setPropertyValue("assert",tC.getPropertyValue("assert"));
callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));
callTC.setPropertyValue("assertionAccountId",tC.getPropertyValue("assertionAccountId"));
callTC.setPropertyValue("assertionUserId",tC.getPropertyValue("assertionUserId"));
callTC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue("assertionAccountIdFULL"));
callTC.setPropertyValue("assertionUserIdFULL",tC.getPropertyValue("assertionUserIdFULL"));</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Authorization Information Extraction via STS</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>fc976555-dca4-4e0b-bc03-89ef6a35cb2d</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>9B4E7893991CB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="fc976555-dca4-4e0b-bc03-89ef6a35cb2d" IssueInstant="2011-03-14T11:35:20.398Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#fc976555-dca4-4e0b-bc03-89ef6a35cb2d">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>6DexyurGLqSowU+Y9X0cA5GOCYI=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
ARjU3UquhujWTJxfLbm+5AN7XKShkQ53+KgDZs+8HnnVJxIEjGTiuvzRrd0+QUu0LP0H3WQ5GkMp
4DQGLdcqAslwMQoeFhWyuRJDpIVAV0PN12FAuDKcF0pzNqJSYOSsG60FcPV/3XzYGHJznAJZbZCq
UeeJGqAqQGh2l+3r++E=
</ds:SignatureValue>
<ds:KeyInfo><ds:X509Data><ds:X509Certificate>MIIDuzCCAySgAwIBAgIBAjANBgkqhkiG9w0BAQQFADCBljELMAkGA1UEBhMCVVMxCzAJBgNVBAgT
AlZBMREwDwYDVQQHEwhTdGVybGluZzENMAsGA1UEChMEREVDRTEMMAoGA1UECxMDbGxjMSMwIQYD
VQQDExpzdG9teGxic2I5MS52YS5uZXVzdGFyLmNvbTElMCMGCSqGSIb3DQEJARYWc2FudG9zLmpo
YUBuZXVzdGFyLmJpejAeFw0xMDAzMTkwMTU2NDRaFw0xMTAzMTkwMTU2NDRaMIGJMQswCQYDVQQG
EwJVUzELMAkGA1UECBMCdmExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQ0w
CwYDVQQLEwRERUNFMRIwEAYDVQQDEwlsb2NhbGhvc3QxJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5q
aGFAbmV1c3Rhci5iaXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALBV5Opi92ieLfFomehr
M1oKkvzx08i3OgPNW5Dfk7PGiP3adh/Ilc2j3kAIIedK1hQadRY/RDniz6OKUXeirYztN5Q16i85
RWuUXDol7dHXYUK+xYcQTOPSUWPzxxNqj8zltHOBHrSJMDgONeePsc+/0aFBT8D5CYHjHEwfR0e5
AgMBAAGjggEiMIIBHjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl
ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU5+JXeZQNlTVtAwpVfn110GpQHfMwgcMGA1UdIwSBuzCB
uIAUaOpJ0xKV601qQdlJS9AU3xS2kxOhgZykgZkwgZYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJW
QTERMA8GA1UEBxMIU3RlcmxpbmcxDTALBgNVBAoTBERFQ0UxDDAKBgNVBAsTA2xsYzEjMCEGA1UE
AxMac3RvbXhsYnNiOTEudmEubmV1c3Rhci5jb20xJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5qaGFA
bmV1c3Rhci5iaXqCAQAwDQYJKoZIhvcNAQEEBQADgYEAfq+I8D1s56CpsWwgBGEqQ7VLJ9p0QXLk
B+F/gtil4On8wTK+W1yw7hjQWW9IDhC+nfYh3btB0azcQeJk7GiRkDn64lyMLMQ5Ui/ly0jeqwsL
NI1nE3tzF/9ru+BmZimzz342UmPSuvIUaKs1yhbqW9wjPH6//rGy5z7ZvQFXocY=</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:9B4E7893991CB1C5E0401F0A0599216F</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"><saml2:SubjectConfirmationData InResponseTo="2357E245F6274DB5468DE1D15A084A29" NotOnOrAfter="2011-03-15T11:35:20.398Z" Recipient="http://stdecqavutl1.va.neustar.com:2485/saml/dumpcustomerpost.php"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2011-03-14T11:35:10.398Z" NotOnOrAfter="2012-03-14T11:35:20.398Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:0912</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:1912</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7002/rest/1/0/SecurityToken/Assertion/fc976555-dca4-4e0b-bc03-89ef6a35cb2d</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2011-03-14T11:35:20.398Z"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>connection</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentType</con:name><con:value>text/xml;charset=ISO-8859-1</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>4278</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B4E7893991CB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>assertId</con:name><con:value>fc976555-dca4-4e0b-bc03-89ef6a35cb2d</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreate" searchProperties="true" id="ee86d2a4-ae72-437a-a234-b581a0c086ae"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="06f43687-5328-4bee-a745-4169db9ac896"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());
tC.setPropertyValue("rtrnodeid",tP.getPropertyValue("nodeoid10").toString());
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="713e6140-72b7-4e01-b419-ec3abb78087d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL", callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId", callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("cid", callTC.getPropertyValue("cid"));
tC.setPropertyValue("alid", callTC.getPropertyValue("alid"));

if (tC.getPropertyValue("alid") == "null" || tC.getPropertyValue("alid") == null) {
	tC.setPropertyValue("alid", tP.getPropertyValue("alid"));
}
if (tC.getPropertyValue("cid") == "null" || tC.getPropertyValue("cid") == null) {
	tC.setPropertyValue("cid", tP.getPropertyValue("cid"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="42c9ebca-e766-4f03-9bd1-3b6bf3c3952b" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity as RTR Consumer" id="22dd9232-85ec-4a2e-aa18-53d99515a96a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
//tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def assertionAccountIdFULLEncoded = URLEncoder.encode(tC.getPropertyValue("assertionAccountIdFULL"),"UTF-8");
tC.setPropertyValue("assertionAccountIdFULLEncoded",assertionAccountIdFULLEncoded)

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="d8bd999b-6dd8-48f5-ba88-49e5c36bcfe7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - RightsTokenCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - RightsTokenCreate" id="2eba1a83-84df-4c2d-bed3-dce4cd8f32a6"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/${#TestCase#assertionAccountIdFULL}/RightsToken" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - RightsTokenCreate" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="${#Project#alid}" ContentID="${#Project#cid}">
                <ns4:SoldAs>
                                <ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName>
                                <ns4:ContentID>${#Project#cid}</ns4:ContentID>
                </ns4:SoldAs>
                <ns4:RightsProfiles>
                                <ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
                                                <ns4:CanDownload>true</ns4:CanDownload>
                                                <ns4:CanStream>true</ns4:CanStream>
                                </ns4:PurchaseProfile>
                                <ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
                                                <ns4:CanDownload>true</ns4:CanDownload>
                                                <ns4:CanStream>true</ns4:CanStream>
                                </ns4:PurchaseProfile>
                                
                </ns4:RightsProfiles>
                <ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc>
                <ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentWebLoc>
                <ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentWebLoc>
                <ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location>
                                <ns4:Preference>3</ns4:Preference>
                </ns4:FulfillmentManifestLoc>
                <ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentManifestLoc>
				<ns4:StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">   
                                <ns4:Location>https://dl.bestbuy.com/p/streaminglink</ns4:Location>                                
                                <ns4:Preference>3</ns4:Preference> 
</ns4:StreamWebLoc> 
<ns4:StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type">    
                                <ns4:Location>https://dl.bestbuy.com/p/streaminglink</ns4:Location>                                
                                <ns4:Preference>3</ns4:Preference> 
</ns4:StreamWebLoc>

                <ns4:PurchaseInfo>
                                <ns4:NodeID>urn:dece:org:org:dece:${#TestCase#nodeid}</ns4:NodeID>
                                <ns4:RetailerTransaction>RetailerTransaction_1_node0799_RetailerNode</ns4:RetailerTransaction>
                                <ns4:PurchaseAccount>urn:dece:accountid:org:dece:${#TestCase#assertionAccountId}</ns4:PurchaseAccount>
                                <ns4:PurchaseUser>urn:dece:userid:org:dece:${#TestCase#assertionUserId}</ns4:PurchaseUser>
                                <ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime>
                </ns4:PurchaseInfo>
</ns4:RightsTokenData>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Handle from API Result" id="9a14002c-7a4b-4ff5-abe8-793ea0e6d152"><con:settings/><con:config><script>import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def targetHost = testProject.getPropertyValue("targetHost");
def nodeaccountId = testCase.getPropertyValue("assertionAccountIdFULL");
def urnRightsToken = testProject.getPropertyValue("urnRightsToken");
def urnAcct = testProject.getPropertyValue("urnaccount");
def tStep  = testCase.getTestStepByName('POST - RightsTokenCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String rightsid = null;
String rightsidfull = null;
String contentLocation = null;
String major = testProject.getPropertyValue("VersionMajor");
String minor = testProject.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
	}
}

def b = contentLocation;
//def urlStr = b.getPath();
def urlStr = b;
//Assert the hostname in the URL is correct
//assert b.getHost().matches(targetHost.toString());
//Assert the protocol is correct
//assert b.getProtocol().matches("https");
//Assert the URI is correct
//assert b.getPath().matches("/rest/$major/$minor/Account/$nodeaccountId/RightsToken/$urnRightsToken[0-9, A-F]*");

if(testProject.getPropertyValue("V2") == testProject.getPropertyValue("versionUrlEncode"))
{
int lastColon = urlStr.lastIndexOf('%');
int lastSlash = urlStr.lastIndexOf('/');
rightsid = urlStr.substring(lastColon + 3);
rightsidFULL = urlStr.substring(lastSlash + 1);
testCase.setPropertyValue("rightstokenid",rightsid);
testCase.setPropertyValue("rightstokenidFULL",rightsidFULL);
}
else
{
int lastColon = urlStr.lastIndexOf(':');
int lastSlash = urlStr.lastIndexOf('/');
rightsid = urlStr.substring(lastColon + 1);
rightsidFULL = urlStr.substring(lastSlash + 1);
testCase.setPropertyValue("rightstokenid",rightsid);
testCase.setPropertyValue("rightstokenidFULL",rightsidFULL);
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Return RightsToken to calling Test Case" id="76fa974f-2974-4e2c-bdc6-d733d9435d74"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("rightstokenid",tC.getPropertyValue("rightstokenid"));
callTC.setPropertyValue("rightstokenidFULL",tC.getPropertyValue("rightstokenidFULL"));</script></con:config></con:testStep><con:properties><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowid</con:name><con:value>9B4E7893991DB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>useroid</con:name><con:value>147666C2BA19280AE05305991F0AAFC9</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_034019</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_32053 - StreamRenew - LLP - Full user can renew full-user created stream-200 OK</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>P0 Test Cases</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:147666C1A9ED2808E05305991F0ACC22</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>147666C1A9ED2808E05305991F0ACC22</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>urn:dece:rightslockerid:org:dece:147666C1A0182808E05305991F0ACC22</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>147666C1A0182808E05305991F0ACC22</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81155</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B4E7893991CB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:147666C2BA18280AE05305991F0AAFC9</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>147666C2BA18280AE05305991F0AAFC9</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3A147666C1A0102808E05305991F0ACC22</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:147666C1A0102808E05305991F0ACC22</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>147666C1A0102808E05305991F0ACC22</con:value></con:property><con:property><con:name>assertId</con:name><con:value/></con:property><con:property><con:name>assert</con:name><con:value>pVbZcuI6EP0VyvOYMt5YXYEqh+UOExIymElIXlKK3ICILYMlseTrRzLgACG5zMyTS+1W9+lFp/uSoSi0XY8xSDiJaW4VhZS5qbSmiYS6MWKEuRRFwFyOXd+76bp23nTR7oqW6zRr2nPBsYOSVX3RoWIhvRBUqjoaBYFuFrEJdqWMy0FZqjImoEMZR5TXNNu0irpZ0O3CwDJds+wWinmrUn3ScveQMGlbquRNbQtqxWrahPOZaxjL5TK/dPJxMjZs07SM4U3XxxOIkFa/3ESUOkrqW32cDwBDGOI8jiPj0jjQuQyY65MxRVwksPUVfObLNMyqIXUCRsbftOwuBB06itNjA9GYEoxC8oZUfm6AT+Ig54XjOCF8En0ahGUqwzqssI6tAv2mGYfQzjR0gDBhSGcTZG1t9WEECVAMuV/9Tk37dl7V0quDBFE2ipOIHR7/DA/QBYTxDAKd7cLaQjvf4IlM1S8Bux2KQ8HIAm5Vs84QBratJuDzTeXuEhiRVZcw2aArptAZ+/COjptsNMkYGP+bAu0VZ2PkHoUC6mhxc9FG0fTqjTDnp2Xf0/6azIvX+GFcSwHsK6eCrLSb41FTZk20uRENo4fbi7XTHFwsm2XzftHq+aXriRdjQroXdBj02vS2Mm+GBrl7jNBTeX29YkOP3r6YV9Nm2/cNj1XGj3fJf9EPa+w43/3oibzcRqLx1not9lp2O2kJf7qOfqyN6qr/6gyHjvC6pWp8Me82o96reYFnV6MpOAxE43oS3xTXj9cPFm//8lvw9nOJPLOHvOL33mMtC2cP/6Fs9+Z98TIFzHdH1QadZq4tq4T412SmJCTQR6mqO1PkwzhQrtXVLcUdrpB0RwJX1nBztgrlUqnUsK88q2JXTK9lFh2zWK1abdPz2o3qjmQ2KI4gNmI6IsqXotxN23wNEEcuAxpAoi9iIZmOaV9YbCKOch3al48gpgwGsaRnaz0JEAmnk7FYWhO6qLKigLWYLrTcbcx7tJd4Iw7JISc7B5zcB0xmBBRxq75msrEZl7mYo4XgoZVfoDwFIak9USzr2oVK0WAkmoWgkBpRHIgQ8rPJLM2MwTZfW0eYpdJ+a5C+tk/jOv63S4HUCYhSYCqWK5BlhBPDxdkF8iHg0skhtDPviYCohyXzyROCN0gOf723ieqPrEeaXc+/24HOdP/g7nPDf7b+0kD3H5x3/9W5rOXHm8YX+TSOS5k5ChZkz+1u65DzSzJefdeIc2Tl53mxWIi09woFx0ikeUMSvGX4gIUk5PUgfgVqZCaMs6ZfhvrIcyY/xCf4hPoccYjkQ8mlxzPWHR+YWnc68oWvzt2lDlzKvHFY8VOyRihXNYX4y20Ou1jpSfGd/CzjJHgv1wlbe35knHLb4YSO1UlNvvUnTYFjaZZIzo6TfeOnDJxyfijMkpxh4bKbXgSHz//kFBnXNIRxLCjvNLVUsD8gUpx8PQP3XemDmXQGZUsp+f+tVCdpC2CQqywjqX21W7iq/+l4b8hsnZ6YM5ZnWqacM5X9OdNo2HaWlAN09Q/ij5K9PB33eP03</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowid</con:name><con:value>9B4E7893991BB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>147666C1A0112808E05305991F0ACC22</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>42c9ebca-e766-4f03-9bd1-3b6bf3c3952b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b58db208-1b7f-4625-bece-3a57de3e4e35"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="5a1fd1fc-5e04-4c88-bc94-1dd51ef2b4da"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="6a73c04c-11e7-45df-b4e9-5d732c66776b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="cf48510f-b3cb-47c4-b253-aec994100a70"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete" id="27bb0869-7820-41ef-8e49-5f3309be5f75"><con:settings/><con:config service="Policies" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="441801_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicyID}${#TestCase#PolicyID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="9ae9c8d3-7594-4cbb-935b-176e23429d33"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="357e93d4-b53e-4767-8a6c-46e91b70de40"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="8a5b4aa9-7ca3-4e42-bf5f-3d0363291477"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Establish Parental Control Rating</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>441801</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:CDE731E3368061F5E0401F0A0599744D</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:CDE73B60531DC842E0401F0A0599072D</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyInfoInURLNotValid">
      <Reason Language="en">The policy information in the URL is not valid.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest1/07/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3ACDE731E3368061F5E0401F0A0599744D/Policy/urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest1/07/error/en/ErrorList.html#Policy:PolicyInfoInURLNotValid</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>815</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81156</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ACDE731E3368061F5E0401F0A0599744D</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamRenew" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="fc7b8b9d-34f8-4223-9c7d-cf0282761be9"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="92c9347f-2340-4c25-84a5-8d5cfd01df85"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("counter",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamRenew",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBUpdatedBy",null);
tC.setPropertyValue("streamHistoryRows",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("streamhandleFULL_body",null);

if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
{
	testRunner.testCase.getTestStepByName( "PUT - StreamRenew" ).disabled = true;
	testRunner.testCase.getTestStepByName( "Extract Response Body for PUT" ).disabled = true;
}
else
{
	testRunner.testCase.getTestStepByName( "GET - StreamRenew" ).disabled = true;
	testRunner.testCase.getTestStepByName( "Extract Response Body for GET" ).disabled = true;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="60d6553f-6c21-4216-a98f-889d58dd4090"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("expectErrTypeStreamRenew",callTC.getPropertyValue("expectErrTypeStreamRenew"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBUpdatedBy",callTC.getPropertyValue("expectDBUpdatedBy"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "null") {
	tC.setPropertyValue("expectDBStatus","active");
} 
if (tC.getPropertyValue("expectDBUpdatedBy") == null || tC.getPropertyValue("expectDBUpdatedBy") == "null") {
	tC.setPropertyValue("expectDBUpdatedBy",tC.getPropertyValue("nodeid"));
} 
if (tC.getPropertyValue("nodetype") == null || tC.getPropertyValue("nodetype") == "null") {
	tC.setPropertyValue("nodetype","dlp");
} 
if (tC.getPropertyValue("counter") == null || tC.getPropertyValue("counter") == "") {
	tC.setPropertyValue("counter","1");
} 

try {
	tC.setPropertyValue("streamhandleFULL_body",callTC.getPropertyValue("streamhandleFULL_body"));
	streamhandleFULL_body=tC.getPropertyValue("streamhandleFULL_body");
	if(streamhandleFULL_body!=null)
	  log.info "values set"
	 else
	 tC.setPropertyValue("streamhandleFULL_body",callTC.getPropertyValue("streamhandleFULL"))
	 log.info "streamhandleFULL_body"+tC.getPropertyValue("streamhandleFULL_body");
}
catch(Throwable e) {
	log.info e; 
	tC.setPropertyValue("streamhandleFULL_body :- ",callTC.getPropertyValue("streamhandleFULL"))
}</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row if Required" id="5fa093d7-cde4-47ab-8ace-606c68569492"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamCreate") == "SUCCESS") {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

	String sh = tC.getPropertyValue("streamhandle");
	String results = null;
	String sql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw( '$sh')""";

	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem").toString());
	log.info results;

	/*
	*  If zero length, no need to continue;
	*/
	assert results.length() > 0;

	try {
		def myXML = new XmlSlurper().parseText(results);
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		assert myXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", results);
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="c59e7b84-c504-422f-af15-e52afd617a63"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PUT - StreamRenew");
RestTestRequestStep testStep1 = tC.getTestStepByName("GET - StreamRenew");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA.EXPIRATION before API invocation" id="f75c2369-7030-42e0-8ee7-c281481b3f27"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireBeforeRenew", a.streamGetExpireDate(tC.getPropertyValue("streamhandle")));



</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT - StreamRenew" id="0efd52ce-dd41-473a-9a87-7cfb70dbd8cc"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT - StreamRenew" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Stream xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md"       xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" StreamHandleID="${#TestCase#streamhandleFULL_body}">       
<StreamClientNickname>Release 4</StreamClientNickname>        
<RequestingUserID>urn:dece:userid:org:dece:${#TestCase#assertionUserId}</RequestingUserID>       
<RightsTokenID>urn:dece:rightstokenid:org:dece:${#TestCase#rightstokenid}</RightsTokenID>        
<TransactionID>Sprint 4.1</TransactionID>
<ExpirationDateTime>${#Project#ExpirationDateTime}</ExpirationDateTime>
<SubDividedGeolocation ViaProxy="urn:dece:type:true" Confidence="1" CalculationMethod="urn:dece:type:geoloc:networkaddress">US 20148</SubDividedGeolocation>
</Stream>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body for PUT" id="ada61512-3f68-4daa-808b-bc019a51f1f6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('PUT - StreamRenew');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamRenew" id="b2bbedfb-cc8e-46f1-aa94-92b9bb031624"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}/Renew" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamRenew" mediaType="application/xml" id="5002a010-eb0d-4c0d-82bd-04c3cb5bbfbb" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body for GET" id="8cbd24d4-5d25-4c7f-8a37-61a593e9e5f5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - StreamRenew');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA.EXPIRATION after API invocation" id="94702db2-1cc2-4217-88b8-f2268d946c5b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("streamExpireAfterRenew", a.streamGetExpireDate(tC.getPropertyValue("streamhandle")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="0a2739fe-5db4-461e-b203-f10b18179a7a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamRenew") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamRenew")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "Policy:RatingPolicyExists";
		break;
	case "RENEW_EXCEED_MAX_TIME":
		errId = "StreamRenewExceedsMaximumTime";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_VALID":
		errId = "StreamHandleIDNotValid";
		break;	
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	case "USER_PRIVILEGE_ACCESS_RESTRICTED":
		errId = "UserPrivilegeAccessRestricted";
	break;
	case "STREAM_EXPIRATION_DATE_TIME_EXCEEDS_MAXIMUM_RENEWAL_TIME_ALLOWED":
		errId = "StreamExpirationDateTimeExceedsMaximumRenewalTimeAllowed";
	break;
	case "STREAM_EXPIRATION_DATE_TIME_BELOW_LOWER_BOUNDARY":
		errId = "StreamExpirationDateTimeBelowLowerBoundary";
	break;
	case "STREAM_EXPIRATION_DATE_TIME_EXCEEDS_UPPER_BOUNDARY":
		errId = "StreamExpirationDateTimeExceedsUpperBoundary";
	break;
	default:
		errId = tC.getPropertyValue("expectErrTypeStreamRenew").toString();
		break;
}

log.info "errId [$errId]";
try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="d61bcd3c-a2ca-4d1b-a8f3-b1e007fd6969"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("recvCreationDate",null);
tC.setPropertyValue("recvExpirationDateTime",null);

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct = tC.getPropertyValue("nodeaccountid");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def sh = tC.getPropertyValue("streamhandleFULL");
def nodeid  = tC.getPropertyValue("nodeid");
def account = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamRenew");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodetype = tC.getPropertyValue("nodetype");

boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag = false;
boolean XMLbodynull = false;
boolean httpLocationHeader = false;
boolean processXMLFlag = true;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectDescription = "";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expectStreamStatus = tC.getPropertyValue("expectDBStatus");
String received;

switch (expectStreamStatus) {
	case "active":
		expectDescription = "active"; break;
	case "deleted":
		expectDescription = "deleted"; break;
	default:
		expectDescription = "active"; break;
}		


this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		XMLbodynull = false;
		httpLocationHeader = false;
	break;
	
     case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request";
		errorReason = "node_status_inactive";
		errorLink = "$errorHost/deceerrors/error/error_response.html";
	break;

	case "Assertion_Not_Found":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Invalid Assertion";
		errorReason = "Assertion_Not_Found";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "NotFound":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		XMLbodynull = true;
		errorReason = "The supplied StreamHandleID was not found.";
		errorID = "urn:dece:errorid:org:dece:StreamNotFound";		
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NotFound";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
if(tC.getPropertyValue("httpStatus") == "HTTP/1.1 400 Bad Request")
{
	expectHTTPconnection = "close";
}
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
//if (XMLbodynull) {
//	assert tC.getPropertyValue("httpContentLength").toInteger() == 20;
//} else {
//	assert tC.getPropertyValue("httpContentLength").toInteger() > 20;
//}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a;
	//def urlStr = b.getPath();
	def urlStr = b;

	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 3);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
	else
	{
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}

//Content-Type

if(errorRespType == "NotFound"){
expectHTTPcontenttype = "text/xml";
}
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
				
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			//assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		String assertionUserIdFULL = "";
		String recvStreamHandle = myXML.@StreamHandleID.text();
		String RequestingUserID = myXML.RequestingUserID;
		String RightsTokenID = myXML.RightsTokenID;
		String recvExpirationDateTime = myXML.ExpirationDateTime;
		String Value = myXML.ResourceStatus.Current.Value;
		String recvDescription = myXML.ResourceStatus.Current.Description;
		String recvCreatedBy = myXML.ResourceStatus.Current.@CreatedBy.text();
		String recvModifiedBy = myXML.ResourceStatus.Current.@ModifiedBy.text();
		String recvCreationDate = myXML.ResourceStatus.Current.@CreationDate.text();

		tC.setPropertyValue("recvCreationDate",recvCreationDate);
		tC.setPropertyValue("recvExpirationDateTime",recvExpirationDateTime);
		
		// StreamHandle ID
		log.info "recvStreamHandle[$recvStreamHandle] - Expect["+"urn:dece:streamhandleid:org:dece:"+tC.getPropertyValue("streamhandle") + "]";
		assert recvStreamHandle == "urn:dece:streamhandleid:org:dece:"+tC.getPropertyValue("streamhandle");
		
		//RequestingUserID
		/*
		*  For llp and llpcs the requestinguserID element 
		*  should not be returned.  
		*/
		
		if (nodetype == "llpcs" || nodetype == "dlpcs") {
			assertionUserIdFULL = "";
		} else {
			assertionUserIdFULL = "urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId");
		}
		log.info "RequestingUserID[$RequestingUserID] - nodetype[$nodetype] - Expect[$assertionUserIdFULL]";
		assert RequestingUserID == assertionUserIdFULL;
		
		//RightsTokenID
		log.info "RightsTokenID[$RightsTokenID] - Expect[" + tC.getPropertyValue("rightstokenidFULL") + "]";
		assert RightsTokenID == "urn:dece:rightstokenid:org:dece:"+tC.getPropertyValue("rightstokenid");
		//ExpirationDate
		log.info "recvExpirationDateTime[$recvExpirationDateTime] - Size is " + recvExpirationDateTime.size();
		assert recvExpirationDateTime.size() > 0;

		//Value (status)
		log.info "Value[$Value] - Expect[" + tC.getPropertyValue("expectDBStatus") + "]";
		if (tC.getPropertyValue("expectDBStatus") == "active") {
			assert Value == "urn:dece:type:status:active";
		} else {
			assert Value == "urn:dece:type:status:deleted";
		}
		
		log.info "recvDescription[$recvDescription] - Expect[$expectDescription]";
		assert recvDescription == expectDescription;
		log.info "recvCreatedBy[$recvCreatedBy] - Expect[" + urnnode + tC.getPropertyValue("expectDBCreatedBy") + "]";
		assert recvCreatedBy == urnnode + tC.getPropertyValue("expectDBCreatedBy");
		log.info "recvModifiedBy[$recvModifiedBy] - Expect[" + urnnode + tC.getPropertyValue("nodeid") + "]";
		assert recvModifiedBy == urnnode + tC.getPropertyValue("nodeid");

		/*
		*  History validation
		*/
		if (tC.getPropertyValue("streamHistoryRows") != null) {
		def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

		int rCnt = myHistoryXML.ResultSet.Row.size();

		log.info "-------------HISTORY-----------------";
		log.info "Row Count is $rCnt";
		log.info "&lt;History> Row Count is " + myXML.ResourceStatus.History.size();

		assert myXML.ResourceStatus.History.Prior.size() == rCnt;

		for (int i = 0; i &lt; rCnt; i++) {
			String hrecvModifiedBy = myXML.ResourceStatus.History.Prior[i].@ModifiedBy.text();
			String hexpectModifiedBy = urnnode + myHistoryXML.ResultSet.Row[i].CREATED_BY_NODE_OID.text();
			log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
			assert hrecvModifiedBy == hexpectModifiedBy;

			String hrecvStatus = myXML.ResourceStatus.History.Prior[i].Value;
			String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
			log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
			if (hexpectStatus == "active") {
				assert hrecvStatus == "urn:dece:type:status:active";
			} else {
				assert hrecvStatus == "urn:dece:type:status:deleted";
			}
			
			String hrecvDescription = myXML.ResourceStatus.History.Prior[i].Description;
			switch (hexpectStatus) {
				case "active": hexpectDescription = "active"; break;
				case "deleted": hexpectDescription = "deleted"; break;
				default: hexpectDescription = "deleted"; break;
			}
			log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
			assert hrecvDescription == hexpectDescription;
		}
	}
} 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Assert STREAM_DATA.EXPIRATION_DATE changed/unchanged based on API result" id="ac9b2d77-ab23-47a5-8907-0b8f955e4e54" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamRenew") == "SUCCESS") {
	a = new generalUtils.generalUtils(log);

	int w = a.dateDiff(tC.getPropertyValue("streamExpireBeforeRenew"),tC.getPropertyValue("streamExpireAfterRenew"));
	int y = tP.getPropertyValue("streamRenewTimeHours").toInteger();

	//assert w == y;
	/*
	*  hack
	*/
	assert w -1 &lt;= y;
	assert w >= y - 1;
} else {
	/*
	*  If the API was not successful then STREAM_DATA.EXPIRATION_DATE should
	*  not have been modified...
	*/
	assert tC.getPropertyValue("streamExpireBeforeRenew") == tC.getPropertyValue("streamExpireAfterRenew");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Enable test steps" id="16c35512-a0c4-493b-8306-2db4c2bbf97d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

	testRunner.testCase.getTestStepByName( "PUT - StreamRenew" ).disabled = false;
	testRunner.testCase.getTestStepByName( "Extract Response Body for PUT" ).disabled = false;


	testRunner.testCase.getTestStepByName( "GET - StreamRenew" ).disabled = false;
	testRunner.testCase.getTestStepByName( "Extract Response Body for GET" ).disabled = false;
</script></con:config></con:testStep><con:testStep type="groovy" name="Assert different between returned Create/Expire time less than 24 hours" id="314bcf2c-5330-46d7-ace4-80c1f804f090" disabled="true"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
			cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
			cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

if (tC.getPropertyValue("expectErrTypeStreamRenew") == "SUCCESS") {
	String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
	String recvEdate = tC.getPropertyValue("recvExpirationDateTime");
	String cDate = "";
	String eDate = "";
	int streamMaxCreateExpireTimeDiffhours = tP.getPropertyValue("streamMaxCreateExpireTimeDiffhours").toInteger();

	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "recvEdate[$recvEdate]";
	
		cDate = formatDate(recvCdate);
		eDate = formatDate(recvEdate);

		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,eDate);
	
		log.info "cDate[$cDate]";
		log.info "eDate[$eDate]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and Expire Time
		*  is less than  hours.
		*/
		assert j &lt;= streamMaxCreateExpireTimeDiffhours;
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVbZcuI6EP0VyvOYMt5YXYEqh+UOExIymElIXlKK3ICILYMlseTrRzLgACG5zMyTS+1W9+lFp/uSoSi0XY8xSDiJaW4VhZS5qbSmiYS6MWKEuRRFwFyOXd+76bp23nTR7oqW6zRr2nPBsYOSVX3RoWIhvRBUqjoaBYFuFrEJdqWMy0FZqjImoEMZR5TXNNu0irpZ0O3CwDJds+wWinmrUn3ScveQMGlbquRNbQtqxWrahPOZaxjL5TK/dPJxMjZs07SM4U3XxxOIkFa/3ESUOkrqW32cDwBDGOI8jiPj0jjQuQyY65MxRVwksPUVfObLNMyqIXUCRsbftOwuBB06itNjA9GYEoxC8oZUfm6AT+Ig54XjOCF8En0ahGUqwzqssI6tAv2mGYfQzjR0gDBhSGcTZG1t9WEECVAMuV/9Tk37dl7V0quDBFE2ipOIHR7/DA/QBYTxDAKd7cLaQjvf4IlM1S8Bux2KQ8HIAm5Vs84QBratJuDzTeXuEhiRVZcw2aArptAZ+/COjptsNMkYGP+bAu0VZ2PkHoUC6mhxc9FG0fTqjTDnp2Xf0/6azIvX+GFcSwHsK6eCrLSb41FTZk20uRENo4fbi7XTHFwsm2XzftHq+aXriRdjQroXdBj02vS2Mm+GBrl7jNBTeX29YkOP3r6YV9Nm2/cNj1XGj3fJf9EPa+w43/3oibzcRqLx1not9lp2O2kJf7qOfqyN6qr/6gyHjvC6pWp8Me82o96reYFnV6MpOAxE43oS3xTXj9cPFm//8lvw9nOJPLOHvOL33mMtC2cP/6Fs9+Z98TIFzHdH1QadZq4tq4T412SmJCTQR6mqO1PkwzhQrtXVLcUdrpB0RwJX1nBztgrlUqnUsK88q2JXTK9lFh2zWK1abdPz2o3qjmQ2KI4gNmI6IsqXotxN23wNEEcuAxpAoi9iIZmOaV9YbCKOch3al48gpgwGsaRnaz0JEAmnk7FYWhO6qLKigLWYLrTcbcx7tJd4Iw7JISc7B5zcB0xmBBRxq75msrEZl7mYo4XgoZVfoDwFIak9USzr2oVK0WAkmoWgkBpRHIgQ8rPJLM2MwTZfW0eYpdJ+a5C+tk/jOv63S4HUCYhSYCqWK5BlhBPDxdkF8iHg0skhtDPviYCohyXzyROCN0gOf723ieqPrEeaXc+/24HOdP/g7nPDf7b+0kD3H5x3/9W5rOXHm8YX+TSOS5k5ChZkz+1u65DzSzJefdeIc2Tl53mxWIi09woFx0ikeUMSvGX4gIUk5PUgfgVqZCaMs6ZfhvrIcyY/xCf4hPoccYjkQ8mlxzPWHR+YWnc68oWvzt2lDlzKvHFY8VOyRihXNYX4y20Ou1jpSfGd/CzjJHgv1wlbe35knHLb4YSO1UlNvvUnTYFjaZZIzo6TfeOnDJxyfijMkpxh4bKbXgSHz//kFBnXNIRxLCjvNLVUsD8gUpx8PQP3XemDmXQGZUsp+f+tVCdpC2CQqywjqX21W7iq/+l4b8hsnZ6YM5ZnWqacM5X9OdNo2HaWlAN09Q/ij5K9PB33eP03</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>147666C1A0102808E05305991F0ACC22</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:147666C1A0102808E05305991F0ACC22</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE114E8D795B2AF0BE0401F0A079904CD</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>147666C2BA18280AE05305991F0AAFC9</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:147666C2BA18280AE05305991F0AAFC9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81158</con:value></con:property><con:property><con:name>recvCreationDate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015-04-24T10:09:11.700Z</con:value></con:property><con:property><con:name>recvExpirationDateTime</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015-04-24T17:42:31.905Z</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>147666C1A9ED2808E05305991F0ACC22</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:147666C1A9ED2808E05305991F0ACC22</con:value></con:property><con:property><con:name>sName</con:name><con:value>P0 Test Cases</con:value></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value>2015/04/24 17:42:31</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value>2015/04/24 16:09:11</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>F380F2ACFD6E4DC68E3EB5C45D2DFE8F</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:F380F2ACFD6E4DC68E3EB5C45D2DFE8F</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3AE461645BAC8BFC19E0401F0A07997218</con:value></con:property><con:property><con:name>streamhandleFULL_body</con:name><con:value>urn:dece:streamhandleid:org:dece:F380F2ACFD6E4DC68E3EB5C45D2DFE8F</con:value></con:property><con:property><con:name>streamHistoryRows</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_32053 - StreamRenew - LLP - Full user can renew full-user created stream-200 OK</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_034019</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<Stream StreamHandleID="urn:dece:streamhandleid:org:dece:F380F2ACFD6E4DC68E3EB5C45D2DFE8F" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <StreamClientNickname>Release 4</StreamClientNickname>
   <RequestingUserID>urn:dece:userid:org:dece:147666C2BA18280AE05305991F0AAFC9</RequestingUserID>
   <RightsTokenID>urn:dece:rightstokenid:org:dece:147666C1A9ED2808E05305991F0ACC22</RightsTokenID>
   <TransactionID>Sprint 4.1</TransactionID>
   <ExpirationDateTime>2015-04-24T17:42:31.905Z</ExpirationDateTime>
   <SubDividedGeolocation Confidence="1" CalculationMethod="urn:dece:type:geoloc:networkaddress" ViaProxy="urn:dece:type:true">US 20148</SubDividedGeolocation>
   <ResourceStatus>
      <Current CreationDate="2015-04-24T10:09:11.700Z" CreatedBy="urn:dece:org:org:dece:LLASP" ModificationDate="2015-04-24T10:09:23.922Z" ModifiedBy="urn:dece:org:org:dece:LLASP">
         <Value>urn:dece:type:status:active</Value>
         <Description>active</Description>
      </Current>
   </ResourceStatus>
</Stream>]]></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ada61512-3f68-4daa-808b-bc019a51f1f6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b2bbedfb-cc8e-46f1-aa94-92b9bb031624</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8cbd24d4-5d25-4c7f-8a37-61a593e9e5f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>16c35512-a0c4-493b-8306-2db4c2bbf97d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamView" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7228e9a7-1592-45cf-a960-e1da09572f63"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f727bb83-3473-4835-be32-c64de892ea61"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamView",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="7e527f3e-5bb0-4897-b3f4-d9bb339e9cc6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("expectErrTypeStreamView",callTC.getPropertyValue("expectErrTypeStreamView"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "null") {
	tC.setPropertyValue("expectDBStatus","active");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="0c145cc4-d7ea-448c-ad05-e86e26490c6d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - StreamView");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamView" id="11499fd4-d46a-44bb-83cb-2b4cf51c10a8"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{SH}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamView" mediaType="application/xml" sslKeystore="LLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="af9a25d6-3c10-4f23-8f97-8def8df48a4c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - StreamView');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="a82f50d0-96e4-42d9-86b8-12ad26e33055"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamView") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamView")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="ac8a593f-336b-46e2-92d6-b6c309a06224"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct = tC.getPropertyValue("nodeaccountid");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def sh = tC.getPropertyValue("streamhandleFULL");
def nodeid  = tC.getPropertyValue("nodeid");
def account = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamView");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodetype = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = false;
boolean XMLbodynull = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;


this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		XMLbodynull = false;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Bad_Request";
		errorReason = "Node_status_inactive";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
/*//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 20;
} else {
	//assert tC.getPropertyValue("httpContentLength").toInteger() > 20;
}*/

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a;
	//def urlStr = b.getPath();
	def urlStr = b;

	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 3);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
	else
	{
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}

//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		String RequestingUserID = myXML.RequestingUserID;
		String RightsTokenID = myXML.RightsTokenID;
		String Value = myXML.ResourceStatus.Current.Value;

		if(tC.getPropertyValue("httpStatus") == "HTTP/1.1 200 OK")
		{
		String ExpirationDateTime = myXML.ExpirationDateTime;
		tP.setPropertyValue("ExpirationDateTime",ExpirationDateTime);
		}
		if (nodetype == "llpcs" || nodetype == "dlpcs") {
			log.info "RequestingUserID[$RequestingUserID] - nodetype[$nodetype] SHOULD BE NULL";
			assert RequestingUserID == "";
			assert myXML.RequestingUserID.size() == 0;
		} else {
			log.info "RequestingUserID[$RequestingUserID] - Expect[" + tC.getPropertyValue("assertionUserIdFULL") + "]";
			assert RequestingUserID == tC.getPropertyValue("assertionUserIdFULL");
		}
		log.info "RightsTokenID[$RightsTokenID] - Expect[" + tC.getPropertyValue("rightstokenidFULL") + "]";
		assert RightsTokenID == tC.getPropertyValue("rightstokenidFULL");

		//Value (status)
		log.info "Value[$Value] - Expect[" + tC.getPropertyValue("expectDBStatus") + "]";
		if (tC.getPropertyValue("expectDBStatus") == "active") {
			assert Value == "urn:dece:type:status:active";
		} else {
			assert Value == "urn:dece:type:status:deleted";
		}
	}
} 

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value>pVZbc+I6DP4rTPp4JiSBhEumMEO57GRLC4W2p9uXjusoxG3i0NgO0F9/7AApUNrD7j5lrMjSJ+mzpHOG4qjidhiDlJOElpZxRJmbS1uaSKmbIEaYS1EMzOXYnXauhm6lbLpoe0Ureb2W9uQ3K0E1MEF3UD3QbWw/6wg913QfNyzT8U3LQSBVGRPgUcYR5S2tIqW6aetW7dasu2bNrdbK1YbzqJXuIWXStlQpm9oG1JK1tJDzuWsYi8WivKiWk3RmVEzTMh6uhlMcQoy09vk6otxR2t7o47IPGKIIl3ESG+fGns65z9wpmVHERQobX/5XvkzDbBpSx2dkdqYVd8H3aJDkxy6iCSUYReQdqfxcAQ8Tv9SJZklKeBh/GYRlKsM6LLGOLZueacY+tBMN7SFMGdJZiKyNrQkEkALFULqbeC3t7LSq5VdvU0RZkKQx2z/+Hh6gGUTJHHydbcPaQDvd4JFMtc8Bux7FkWAkg2tF1jnCwDbVBHy6qdI4hYAsh4RJgi6ZQmfswjs4rrPRIzNg/E8KtFOctZF7FAlo16+5+dxMkJjx5+jKSwfCY86LX7+7SVo5gF3lXFCUdn08IGVBovWNYHjjh8nDNJg8sAFkF+FgBsPw57zLAuxQ0aj1WdxZZvXLkb28CsedkbH4Nfft1T8DzxrddZ3RuOtnnv342rhe1G8bvdlr/2eNBj8fg1H2gAbCv7i8tqs3OGCX79SI7THpN/99kc7CH9P7qH/XFP3H7Ie9mkQ/mnBRG4zfH+5f62S1iPs9POv6Iw+L5vwROtVfrSKcHfz7su2bn4rnF8B8e1Q08HqlgawS4t83MyUhvh7kqu5cNR/GgXKtrW6p3uEK2e6I78oars9WtVc1L5xao+mYtXpv0Dedquk0m9bA7HQHTn3bZNYoDiB2ExoQ5Uu13DVtvgeIY5cB9SHVs0TITse0byz2EEclj07kI0gog9tEtmcLrcK0tkwFFrP3qLlsRqEw7Wpa00rXCR/RUdoJOKR7Pdky93ryBDCZE1CNW/GaSWIzLnPxhjLBI6ucoTIFIVt7qrqsW7EbjsFIPI9AITXixBcRlOfhPM+Mwdbfio4wy6WT/m3+2r6M6/DfNgVSxydKgalYLkCWEY4Ml8o2kE8B144Ooa35jvCJelgynzwleI1k/9cHTRQ/Co70hp3peAu60P2Nu0/d6ZP1hwaGf+F8+LfOZS0/3zS+yadxWMrCkZ+RHbfbrUPOL9nx2lsiviGr/FYWWSZy7tl21UileUM2eMuYAhayIa9uk1egRmHCOGn6FagPPBfyfXyCh3TKEYdYPpRSfjxh3ZkCU+uOJ1/48tRdas+lzBuHJT8m60ZyVVOIv93msIuVnhSP5WeRpP5HuY7Y2vEj45TbDid0pk5q8q2+IAVOpFkie3aS7ho/ZuCY831hkeQCC5dsehYcvv5TUs24pSGME0G519Nywe6AyHHy1RzcD6VPZvIZVCyl5P+3Up3kFMByAZb6uX21W7iK/3S2M2Q2To/OmcZg8N2c2UfX/iT+LNnJ0yHH2/8B</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:13D30B5688FF67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:13D30B56895067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>errorID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D30714BF635DD2E05305991F0A0424</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases_P2</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:11B64FAF0C8F447C8FF0F4A158A87FFC</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_11008 - StreamRenew - LLP - StreamNotFound - Stream handle owned by another account-404 Not Found_FLAKY</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_123841</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<Stream StreamHandleID="urn:dece:streamhandleid:org:dece:11B64FAF0C8F447C8FF0F4A158A87FFC" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <StreamClientNickname>Ultraviolet4.0</StreamClientNickname>
   <RequestingUserID>urn:dece:userid:org:dece:13D30B56895067DFE05305991F0ACF57</RequestingUserID>
   <RightsTokenID>urn:dece:rightstokenid:org:dece:13D30714BF635DD2E05305991F0A0424</RightsTokenID>
   <TransactionID>StreamsProject</TransactionID>
   <ExpirationDateTime>2015-04-16T13:19:05.971Z</ExpirationDateTime>
   <ResourceStatus>
      <Current CreationDate="2015-04-16T07:19:05.971Z" CreatedBy="urn:dece:org:org:dece:LLASP">
         <Value>urn:dece:type:status:active</Value>
         <Description>active</Description>
      </Current>
   </ResourceStatus>
</Stream>]]></con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81157</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3ADE4F27425F386C62E0401F0A07997352</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ACDE731E3368061F5E0401F0A0599744D</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>13D30B5688FF67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>13D30B56895067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="149b2681-6e69-4521-b659-1a85ccd94ad4"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7bed9898-efe2-41de-a887-61587e1a566a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="ba6da321-2249-42b3-9ebb-9854fcb757e0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML" id="78fb61f7-9b83-497a-9931-eb1c77b8d555"><con:settings/><con:config><script><![CDATA[def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

	
mmpaRatingsUS = ["us:mpaa:g","us:mpaa:pg","us:mpaa:pg-13","us:mpaa:r","us:mpaa:nc-17"];
tvpgRatingsUS = ["us:tvpg:tv-y","us:tvpg:tv-y7","us:tvpg:tv-g","us:tvpg:tv-pg","us:tvpg:tv-14","us:tvpg:tv-ma"];
tvpgRatingsreasoncodesUS = ["us:tvpg:v","us:tvpg:s","us:tvpg:l","us:tvpg:d","us:tvpg:fv"];
fabUS = ["us:fab:c","us:fab:f","us:fab:pd","us:fab:pd-m","us:fab:em","us:fab:ao"];
fabreasoncodesUS = ["us:fab:violence","us:fab:frightening","us:fab:sexual","us:fab:mildlang","us:fab:stronglang","us:fab:substance","us:fab:intense","us:fab:bnudity","us:fab:fnudity","us:fab:explicit","us:fab:erotica"];
esrbgamesUS = ["us:esrb:ec","us:esrb:e","us:esrb:e10+","us:esrb:t","us:esrb:m","us:esrb:ao","us:esrb:rp"];
mpaattrailersUS = ["us:mpaat:gb","us:mpaat:rb"];
tvmovieRatingsGB = ["gb:bbfc:u","gb:bbfc:pg","gb:bbfc:12","gb:bbfc:15","gb:bbfc:18","gb:bbfc:r18"];
chvrsRatingsCA = ["ca:chvrs:g","ca:chvrs:pg","ca:chvrs:14a","ca:chvrs:18a","ca:chvrs:r"];
cbscRatingsCA = ["ca:cbsc:c","ca:cbsc:c8","ca:cbsc:g","ca:cbsc:pg","ca:cbsc:14+","ca:cbsc:18+"];
filmtvifcoIE = ["ie:ifco:g","ie:ifco:pg","ie:ifco:12","ie:ifco:15","ie:ifco:18"];
filmtvncsAU = ["au:ncs:g","au:ncs:pg","au:ncs:m","au:ncs:ma15","au:ncs:r18"];
filmtvoflcNZ = ["nz:oflc:g","nz:oflc:pg","nz:oflc:m","nz:oflc:rp13","nz:oflc:r13","nz:oflc:r15","nz:oflc:rp16","nz:oflc:r16","nz:oflc:r18","nz:oflc:r"];
MocRatingFR = ["FR:MOC:U","FR:MOC:10","FR:MOC:12","FR:MOC:16","FR:MOC:18"];
FSKRatingDE = ["DE:FSK:0","DE:FSK:6","DE:FSK:12","DE:FSK:16","DE:FSK:18"];
FSKRatingAT = ["AT:FSK:0","AT:FSK:6","AT:FSK:12","AT:FSK:16","AT:FSK:18"];
FSKRatingCH = ["CH:FSK:0","CH:FSK:6","CH:FSK:12","CH:FSK:16","CH:FSK:18"];
KijwijzerRatingBE= ["BE:KIJWIJZER:AL","BE:KIJWIJZER:6","BE:KIJWIJZER:9","BE:KIJWIJZER:12","BE:KIJWIJZER:16"];
MocRatingLU = ["LU:MOC:U","LU:MOC:10","LU:MOC:12","LU:MOC:16","LU:MOC:18"];
FSKRatingLU= ["LU:FSK:0","LU:FSK:6","LU:FSK:12","LU:FSK:16","LU:FSK:18"];
KijwijzerRatingNL= ["NL:KIJWIJZER:AL","NL:KIJWIJZER:6","NL:KIJWIJZER:9","NL:KIJWIJZER:12","NL:KIJWIJZER:16"];


String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {
	case "${urnRating}us:mpaa:g":
	case "${urnRating}us:mpaa:pg":
	case "${urnRating}us:mpaa:pg-13":
	case "${urnRating}us:mpaa:r":
	case "${urnRating}us:mpaa:nc-17":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}us:tvpg:tv-y":
	case "${urnRating}us:tvpg:tv-y7":
	//case "${urnRating}us:tvpg:tv-y7-fv":
	case "${urnRating}us:tvpg:tv-g":
	case "${urnRating}us:tvpg:tv-pg":
	case "${urnRating}us:tvpg:tv-14":
	case "${urnRating}us:tvpg:tv-ma":
		for (rating in tvpgRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        case "${urnRating}us:tvpg:v":
	case "${urnRating}us:tvpg:s":
	case "${urnRating}us:tvpg:l":
	case "${urnRating}us:tvpg:d":
	case "${urnRating}us:tvpg:fv":
		for (rating in tvpgRatingsreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:c":
	case "${urnRating}us:fab:f":
	case "${urnRating}us:fab:pd":
	case "${urnRating}us:fab:pd-m":
	case "${urnRating}us:fab:em":
	case "${urnRating}us:fab:ao":
        	for (rating in fabUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:violence":
	case "${urnRating}us:fab:frightening":
	case "${urnRating}us:fab:sexual":
	case "${urnRating}us:fab:mildlang":
	case "${urnRating}us:fab:stronglang":
        case "${urnRating}us:fab:substance":
	case "${urnRating}us:fab:intense":
	case "${urnRating}us:fab:bnudity":
	case "${urnRating}us:fab:fnudity":
	case "${urnRating}us:fab:explicit":
	case "${urnRating}us:fab:erotica":
		for (rating in fabreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:esrb:ec":
	case "${urnRating}us:esrb:e":
	case "${urnRating}us:esrb:e10+":
	case "${urnRating}us:esrb:t":
	case "${urnRating}us:esrb:m":
	case "${urnRating}us:esrb:ao":
        case "${urnRating}us:esrb:rp":
        	for (rating in esrbgamesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:mpaat:gb":
        case "${urnRating}us:mpaat:rb":
        	for (rating in mpaattrailersUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
   
     //case "${urnRating}gb:bbfc:e":  
	case "${urnRating}gb:bbfc:u":
	case "${urnRating}gb:bbfc:pg":
	case "${urnRating}gb:bbfc:12":
	case "${urnRating}gb:bbfc:15":
	case "${urnRating}gb:bbfc:18":
	case "${urnRating}gb:bbfc:r18":
		for (rating in tvmovieRatingsGB) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>" + rating.replaceAll("&","&amp;") + "</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

        //case "${urnRating}ca:chvrs:e":   
        case "${urnRating}ca:chvrs:g":
	case "${urnRating}ca:chvrs:pg":
	case "${urnRating}ca:chvrs:14a":
	case "${urnRating}ca:chvrs:18a":
	case "${urnRating}ca:chvrs:r": 
	//case "${urnRating}ca:chvrs:e":
		for (rating in chvrsRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

        //case "${urnRating}ca:cbsc:e": 
        case "${urnRating}ca:cbsc:c":
	case "${urnRating}ca:cbsc:c8":
	case "${urnRating}ca:cbsc:g":
	case "${urnRating}ca:cbsc:pg":
	case "${urnRating}ca:cbsc:14+":
        case "${urnRating}ca:cbsc:18+":
      	//case "${urnRating}ca:cbsc:e":
      		for (rating in cbscRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        //case "${urnRating}ie:ifco:e": 
        case "${urnRating}ie:ifco:g":
	case "${urnRating}ie:ifco:pg":
	case "${urnRating}ie:ifco:12":
	case "${urnRating}ie:ifco:15":
	case "${urnRating}ie:ifco:18":
      		for (rating in filmtvifcoIE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        //case "${urnRating}au:ncs:e": 
        case "${urnRating}au:ncs:g":
	case "${urnRating}au:ncs:pg":
	case "${urnRating}au:ncs:m":
	case "${urnRating}au:ncs:ma15":
	case "${urnRating}au:ncs:r18":
      		for (rating in filmtvncsAU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
        //case "${urnRating}nz:oflc:e": 
        case "${urnRating}nz:oflc:g":
	case "${urnRating}nz:oflc:pg":
	case "${urnRating}nz:oflc:m":
	case "${urnRating}nz:oflc:rp13":
	case "${urnRating}nz:oflc:r13":
	case "${urnRating}nz:oflc:r15":
	case "${urnRating}nz:oflc:rp16":
        case "${urnRating}nz:oflc:r16": 
        case "${urnRating}nz:oflc:r18":
	case "${urnRating}nz:oflc:r":
	      		for (rating in filmtvoflcNZ) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
       case "${urnRating}FR:MOC:U":
	case "${urnRating}FR:MOC:10":
	case "${urnRating}FR:MOC:12":
	case "${urnRating}FR:MOC:16":
	case "${urnRating}FR:MOC:18":
      		for (rating in MocRatingFR) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

	case "${urnRating}DE:FSK:0":
	case "${urnRating}DE:FSK:6":
	case "${urnRating}DE:FSK:12":
	case "${urnRating}DE:FSK:16":
	case "${urnRating}DE:FSK:18":
      		for (rating in FSKRatingDE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}AT:FSK:0":
	case "${urnRating}AT:FSK:6":
	case "${urnRating}AT:FSK:12":
	case "${urnRating}AT:FSK:16":
	case "${urnRating}AT:FSK:18":
      		for (rating in FSKRatingAT) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}CH:FSK:0":
	case "${urnRating}CH:FSK:6":
	case "${urnRating}CH:FSK:12":
	case "${urnRating}CH:FSK:16":
	case "${urnRating}CH:FSK:18":
      		for (rating in FSKRatingCH) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}BE:KIJWIJZER:AL":
	case "${urnRating}BE:KIJWIJZER:6":
	case "${urnRating}BE:KIJWIJZER:9":
	case "${urnRating}BE:KIJWIJZER:12":
	case "${urnRating}BE:KIJWIJZER:16":
      		for (rating in KijwijzerRatingBE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}LU:FSK:0":
	case "${urnRating}LU:FSK:6":
	case "${urnRating}LU:FSK:12":
	case "${urnRating}LU:FSK:16":
	case "${urnRating}LU:FSK:18":
      		for (rating in FSKRatingLU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}LU:MOC:U":
	case "${urnRating}LU:MOC:10":
	case "${urnRating}LU:MOC:12":
	case "${urnRating}LU:MOC:16":
	case "${urnRating}LU:MOC:18":
      		for (rating in MocRatingLU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}NL:KIJWIJZER:AL":
	case "${urnRating}NL:KIJWIJZER:6":
	case "${urnRating}NL:KIJWIJZER:9":
	case "${urnRating}NL:KIJWIJZER:12":
	case "${urnRating}NL:KIJWIJZER:16":
      		for (rating in KijwijzerRatingNL) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
   
	default:
		resourceXml = "<dece:Resource>$resource</dece:Resource>";
		break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);
]]></script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="d8dd7ce5-990a-4994-bfb5-9b956341fe6c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate User");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate User" id="d753fc64-8eda-4145-a870-801593de94a7"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate User" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#targetURL}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}  
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="bf817b37-f41a-4e23-985c-d3272ee4a3a7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('POST - PolicyCreate User');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="5c14a658-fcff-438c-9ce2-63d3484c3539"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPt4xli+cfEEZgwkLQ0JF1Oa5KUjZNkosWViyQb66ysZcIGQHNo+ebRe7X570bd7xWAcGY7LGE45SWhlHUeUOYW0pWQpdRLICHMojDFzOHI8927gGFXgwP0VpdLvtZQfpm1bQRPWVWDOddUyzYbamNsN1fRrCCELGNA2hSpjGe5TxiHlLcUAuqWCpmpYU1B3DN0xa1XLMp6UygynTNgWKlWg7ECtWUtZcL50NG21WlVXZjVJQ80AQNce7gYeWuAYKu2rbUSFo7S900dVHyMcRaiKkli70o50rnzmeCSkkGcp3vny3/MFNNDUhI7PSPhJKe9iv0+DpDh2IU0oQTAiP6HMzx3mi8SvuFGYpIQv4neD0IE0rOI1UpFu0U+KdgztQkNHCFMGVbaA+s7WBAc4xRThyrdJv6V8uqxqxdVpCikLkjRmx8c/w4NpjqNkiX2V7cPaQbvc4JlMta8wcvoURRkjOb6XzbqECLNdNTG63FRllOKArAeEiQZdM4lOO4R3ctxmo0dCzPjfFOigOFsjMxhluH3nsq/u4zO8G26eX3/2M++B57MvN8/5V7dVADhULgRlabfHk6Ysm2h7Y3DvTQyWjB/rUXPyWHsIp4/mXS0Mp1onsDfgGxiF4/V4PmT50KLLRRKEDZgNqDmuT9zr0ePTIK0/vd7eks/UjUff49FtBsDMHvZ6y1nvZa3XzO63Fy/7bx0Oa7nhPmyGzbGOrzH6svg8H4ONHSw7vej+u/slTBqroYH6T98bt+uvxrU2AbPui+3n/efxzPU+13fhnuA/lu3fvJfNnzHi+6Nsg36vciOqBPnHZCYlxFeDQtVZSvJhHFOutOUtyR1OJuiO+I6o4fYMzG6nUetaNcvuWlavcQ1sE9SbTf0GuA0XXO9JZoviBGI3oQGRviTlbtvmY4AodhimPk7VPMkE0zHlA4s9yGGlTyfiESSU4Wki6Fm35vPNipJ6VuOBbtOfflYnMA8MrFTuEz6kw9QNOE6PSFkHR6Q8wYgsCZbMLRubic5mXCTjFeYZj/RqDqsUZ4LbU0mzjmE1bI2ReBlhCVWLEz+LcHW5WBap0dj2a6gQsUI6uZ4Wz+3dwE7/7XMgdHwiFZiMpYNFHfGZ6WLsA3kTsH12Cu3Nu5lP5MsSCeUpQVskx79+94lskLJJegPXG+1Bl7p/cPdH1/uh/6WBwT84H/yrc1HLtze1D/KpnZaydOTn5MDtfu0QA0xQXnvfiK+w+lrN8jwrWq8uqT0V5jVZXA0YmodRJkh5M01eMNVKK9pFE7AEfuK8lB9DzPiCehxyHIu3UimOF6w8HmZy5emLV76+dJ86cilSx/Gan5N1I7GuScQfbnTIQVJPiEfis0pS/3fFztg68CPiFBsPJzSUJzn9Nu/0BUqEWSJ4O0kPjZ8zcM75sbBMcomFi4aaZxy//6ciCbmlQISSjPJ+TykEh0OiwMk3S+z8VnpjpphD5WJK/n8zVUnRAkjwrdAv7Mv9wpFPgIYHg2bn9O2ssXSj1qwBt2MUs8bezpobo9Mpk3KErv1G/FZykKfTHm//Ag==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:03CB864126960AB2E05305991F0AF2BB</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:03CB86C4645C44D8E05307991F0A8A0E</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/2015/02/Account/urn:dece:accountid:org:dece:03CB864126960AB2E05305991F0AF2BB/User/urn:dece:userid:org:dece:03CB86C4645C44D8E05307991F0A8A0E/Policy/urn:dece:type:policy:UserDataUsageConsent</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>UserDataUsageConsent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:03CB86C4645C44D8E05307991F0A8A0E</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:org:org:dece:LLASP</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:userid:org:dece:03CB86C4645C44D8E05307991F0A8A0E</con:value></con:property><con:property><con:name>policyResourceXML</con:name><con:value>&lt;dece:Resource>urn:dece:userid:org:dece:03CB86C4645C44D8E05307991F0A8A0E&lt;/dece:Resource></con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Establish High-Level Policies for User/Account/Node</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81162</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE114E8D795B2AF0BE0401F0A079904CD</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE114E8D795B4AF0BE0401F0A079904CD</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>03CB864126960AB2E05305991F0AF2BB</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>03CB86C4645C44D8E05307991F0A8A0E</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\GIT\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamDelete" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="bcc79614-1594-4bca-923c-5515bf3b466f"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f61274ed-53cf-45ca-ad98-3419cd6de911"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamDelete",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="9e9c296c-48ea-4879-85eb-0aed139a0100"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("expectErrTypeStreamDelete",callTC.getPropertyValue("expectErrTypeStreamDelete"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectErrTypeStreamDelete") == null || tC.getPropertyValue("expectErrTypeStreamDelete") == "null") {
	tC.setPropertyValue("expectErrTypeStreamDelete", "SUCCESS");
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="1afc95d0-801b-4fdf-a9a4-0ec4abe10e80"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - StreamDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - StreamDelete" id="a66908d9-c4ff-4ee9-b6c2-016128cee778"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - StreamDelete" mediaType="application/xml" sslKeystore="LLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="eca724dd-210b-4497-aee1-721972c313c7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - StreamDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="39f9a00a-fe24-49a7-b0b7-263ae2138b9a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamDelete[" + tC.getPropertyValue("expectErrTypeStreamDelete") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamDelete")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="da23e386-ca5f-4fca-9888-a55215bc5705"><con:settings/><con:config><script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct = tC.getPropertyValue("nodeaccountid");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def sh = tC.getPropertyValue("streamhandleFULL");
def nodeid        = tC.getPropertyValue("nodeid");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamDelete");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = false;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;






this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Bad_Request";
		errorReason = "Node_status_inactive";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a;
	//def urlStr = b.getPath();
	def urlStr = b;

	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 3);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
	else
	{
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}

//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		this.log.info "ResourceStatus size is " + myXML.ResourceStatus.size();
		this.log.info "ResourceStatus.Current size is " + myXML.ResourceStatus.Current.size();
		this.log.info "ResourceStatus.Current.Value size is " + myXML.ResourceStatus.Current.Value.size();
		this.log.info "ResourceStatus.Current.Description size is " + myXML.ResourceStatus.Current.Description.size();
		this.log.info "myXML.RequestingUserID size is " + myXML.RequestingUserID.size();
		this.log.info "myXML.RightsTokenID size is " + myXML.RightsTokenID.size();
		this.log.info "ExpirationDateTime size is " + myXML.ExpirationDateTime.size();
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;
		if (nodetype != "llp" && nodetype != "llpcs") {
			assert myXML.RequestingUserID.size() == 1;
		} else {
			assert myXML.RequestingUserID.size() == 0;
		}
		assert myXML.RightsTokenID.size() == 1;
		assert myXML.ExpirationDateTime.size() == 1;

		// ModifiedBy
		expected = urnnode + nodeid;
		received = myXML.ResourceStatus.Current.@ModifiedBy.text();
		this.log.info "ModifiedBy - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// StreamHandleID
		expected = sh;
		received = myXML.@StreamHandleID.text();
		this.log.info "StreamHandleID - Expect[$expected] Received[$received]";
		assert expected == received;

		// CreatedBy
		expected = urnnode + tC.getPropertyValue("expectDBCreatedBy");
		received = myXML.ResourceStatus.Current.@CreatedBy.text();
		this.log.info "CreatedBy - Expect[$expected] Received[$received]";
		assert expected == received;

		// Value
		expected = tC.getPropertyValue("expectDBStatus");
		received = myXML.ResourceStatus.Current.Value.text();
		this.log.info "Value - Expect[$expected] Received[$received]";
		assert expected == received;

		// Description
		expected = description;
		received = myXML.ResourceStatus.Current.Description.text();
		this.log.info "Description - Expect[$expected] Received[$received]";
		assert expected == received;

		// RequestingUserID
		received = myXML.RequestingUserID.text();
		if (nodetype != "llp" && nodetype != "llpcs") {
			expected = tC.getPropertyValue("assertionUserIdFULL");
		} else {
			expected = "";  /* LLP has not user associated with it */
		}
		this.log.info "RequestingUserID - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// RightsTokenID
		expected = tC.getPropertyValue("rightstokenidFULL");
		received = myXML.RightsTokenID.text();
		this.log.info "RightsTokenID - Expect[$expected] Received[$received]";
		assert expected == received;

		// RightsTokenID
		assert myXML.ExpirationDateTime.text().length() > 0;
	}
} 

]]></script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVZbc+I6DP4rTPp4JiSBhEumMEO57GRLC4W2p9uXjusoxG3i0NgO0F9/7AApUNrD7j5lrMjSJ+mzpHOG4qjidhiDlJOElpZxRJmbS1uaSKmbIEaYS1EMzOXYnXauhm6lbLpoe0Ureb2W9uQ3K0E1MEF3UD3QbWw/6wg913QfNyzT8U3LQSBVGRPgUcYR5S2tIqW6aetW7dasu2bNrdbK1YbzqJXuIWXStlQpm9oG1JK1tJDzuWsYi8WivKiWk3RmVEzTMh6uhlMcQoy09vk6otxR2t7o47IPGKIIl3ESG+fGns65z9wpmVHERQobX/5XvkzDbBpSx2dkdqYVd8H3aJDkxy6iCSUYReQdqfxcAQ8Tv9SJZklKeBh/GYRlKsM6LLGOLZueacY+tBMN7SFMGdJZiKyNrQkEkALFULqbeC3t7LSq5VdvU0RZkKQx2z/+Hh6gGUTJHHydbcPaQDvd4JFMtc8Bux7FkWAkg2tF1jnCwDbVBHy6qdI4hYAsh4RJgi6ZQmfswjs4rrPRIzNg/E8KtFOctZF7FAlo16+5+dxMkJjx5+jKSwfCY86LX7+7SVo5gF3lXFCUdn08IGVBovWNYHjjh8nDNJg8sAFkF+FgBsPw57zLAuxQ0aj1WdxZZvXLkb28CsedkbH4Nfft1T8DzxrddZ3RuOtnnv342rhe1G8bvdlr/2eNBj8fg1H2gAbCv7i8tqs3OGCX79SI7THpN/99kc7CH9P7qH/XFP3H7Ie9mkQ/mnBRG4zfH+5f62S1iPs9POv6Iw+L5vwROtVfrSKcHfz7su2bn4rnF8B8e1Q08HqlgawS4t83MyUhvh7kqu5cNR/GgXKtrW6p3uEK2e6I78oars9WtVc1L5xao+mYtXpv0Dedquk0m9bA7HQHTn3bZNYoDiB2ExoQ5Uu13DVtvgeIY5cB9SHVs0TITse0byz2EEclj07kI0gog9tEtmcLrcK0tkwFFrP3qLlsRqEw7Wpa00rXCR/RUdoJOKR7Pdky93ryBDCZE1CNW/GaSWIzLnPxhjLBI6ucoTIFIVt7qrqsW7EbjsFIPI9AITXixBcRlOfhPM+Mwdbfio4wy6WT/m3+2r6M6/DfNgVSxydKgalYLkCWEY4Ml8o2kE8B144Ooa35jvCJelgynzwleI1k/9cHTRQ/Co70hp3peAu60P2Nu0/d6ZP1hwaGf+F8+LfOZS0/3zS+yadxWMrCkZ+RHbfbrUPOL9nx2lsiviGr/FYWWSZy7tl21UileUM2eMuYAhayIa9uk1egRmHCOGn6FagPPBfyfXyCh3TKEYdYPpRSfjxh3ZkCU+uOJ1/48tRdas+lzBuHJT8m60ZyVVOIv93msIuVnhSP5WeRpP5HuY7Y2vEj45TbDid0pk5q8q2+IAVOpFkie3aS7ho/ZuCY831hkeQCC5dsehYcvv5TUs24pSGME0G519Nywe6AyHHy1RzcD6VPZvIZVCyl5P+3Up3kFMByAZb6uX21W7iK/3S2M2Q2To/OmcZg8N2c2UfX/iT+LNnJ0yHH2/8B</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:13D30B5688FF67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:13D30B56895067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:13D30714BF845DD2E05305991F0A0424</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases_P2</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>97397C14A82BFA4CE0401F0A07996491</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:A97CF4BED9A54F308FA54C2163AB6496</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_11049 - StreamRenew - LLP - StreamNotActive - StreamRenew attempt after StreamDelete API invocation-403 Forbidden</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_123841</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81159</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3AE460F8FB1F2E764AE0401F0A05994434</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE114E8D795B2AF0BE0401F0A079904CD</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>13D30B5688FF67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>13D30B56895067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamCreate" searchProperties="true" id="97494bd7-b393-4421-a45f-bd21752d2d85"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ef81d255-c40e-4c9c-8c7c-b322b514313b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("nickname",null);
tC.setPropertyValue("transactionid",null);
tC.setPropertyValue("requestBody",null);
tC.setPropertyValue("sCbodyRequestingUserSetting",null);
tC.setPropertyValue("sCbodyTransactionIDSetting",null);
tC.setPropertyValue("expectErrTypeStreamCreate",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="c1d2fad8-3e44-4b92-9692-3c22261469fd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("transactionid",callTC.getPropertyValue("transactionid"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("expectErrTypeStreamCreate",callTC.getPropertyValue("expectErrTypeStreamCreate"));
tC.setPropertyValue("sCbodyRequestingUserSetting",callTC.getPropertyValue("sCbodyRequestingUserSetting"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("sCbodyTransactionIDSetting",callTC.getPropertyValue("sCbodyTransactionIDSetting"));

if (tC.getPropertyValue("expectErrTypeStreamCreate") == null || tC.getPropertyValue("expectErrTypeStreamCreate") == "") {
	tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
}
if (tC.getPropertyValue("nodetype") == null || tC.getPropertyValue("nodetype") == "") {
	tC.setPropertyValue("nodetype","dlp");
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Construct the StreamCreate request Body" id="790fa91f-fb76-4126-9580-5021d8ca7863" disabled="true"><con:settings/><con:config><script><![CDATA[def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String transStr = "";
String b = "";
String c = "";
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema").toString();
String assertionUserIdFULL = tC.getPropertyValue("assertionUserIdFULL").toString();
String assertionUserId = tC.getPropertyValue("assertionUserId").toString();
String SchemaNameSpace = tP.getPropertyValue("SchemaNameSpace").toString();
String rightstokenidFULL = tC.getPropertyValue("rightstokenidFULL").toString();
String rightstokenid= tC.getPropertyValue("rightstokenid").toString();
String transactionid = tC.getPropertyValue("transactionid").toString();
String nickname = tC.getPropertyValue("nickname").toString();
String sCbodyRequestingUserSetting = tC.getPropertyValue("sCbodyRequestingUserSetting");
String sCbodyTransactionidSetting = tC.getPropertyValue("sCbodyTransactionidSetting");

if (transactionid == "null") {
	transactionid = "";
}
if (nickname == "null") {
	nickname = "";
}
if (rightstokenidFULL == "null") {
	rightstokenidFULL = "";
}
if (assertionUserIdFULL == "null") {
	assertionUserIdFULL = "";
}

log.info "transactionid[$transactionid]";

String xmlBody = """<Stream xmlns="$coordinatorSchema" xmlns:ns2="http://www.movielabs.com/md" 
     xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
      <StreamClientNickname>$nickname</StreamClientNickname> 
      %%REQUESTINGUSER%%
      <RightsTokenID>urn:dece:rightstokenid:org:dece:$rightstokenid</RightsTokenID>
      %%TRANSACTIONID%%
</Stream>""";

log.info "sCbodyRequestingUserSetting[$sCbodyRequestingUserSetting]";
log.info "sCbodyTransactionidSetting[$sCbodyTransactionidSetting]";

switch (sCbodyTransactionidSetting) {
	case "exclude":
		transStr = "";
		break;
	case "nullContent":
		transStr = "<TransactionID></TransactionID>";
		break;
	default:
		transStr = "<TransactionID>" + transactionid + "</TransactionID>";
		break;
}

switch (sCbodyRequestingUserSetting) {
	case "exclude":
		b = "";
		break;
	case "nullContent":
		b = "<RequestingUserID></RequestingUserID>";
		break;
	default:
		b = "<RequestingUserID>urn:dece:userid:org:dece:$assertionUserId</RequestingUserID>";
		break;
}

requestBody = xmlBody.replaceAll("%%REQUESTINGUSER%%", b);

log.info xmlBody;

tC.setPropertyValue("requestBody", xmlBody);

]]></script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="d163948d-19cc-463b-a9d8-64378094d1c8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - StreamCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - StreamCreate" id="8ff16994-5ad9-46a2-96c2-63aee3c8cd18"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - StreamCreate" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Stream xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" 
     xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
      <StreamClientNickname>Ultraviolet4.0</StreamClientNickname> 
      <RequestingUserID>urn:dece:userid:org:dece:${#TestCase#assertionUserId}</RequestingUserID>
      <RightsTokenID>urn:dece:rightstokenid:org:dece:${#TestCase#rightstokenid}</RightsTokenID>
      <TransactionID>StreamsProject</TransactionID>
</Stream>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="a7d0bdfe-b2a5-42e7-8c8a-ccde77d5200d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - StreamCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

 if(status=="HTTP/1.1 201 Created")
  {  int StreamCreateCount=Integer.parseInt(tP.getPropertyValue("StreamCreateCount"));
   log.info "StreamCreateCount : "+StreamCreateCount;
   StreamCreateCount++;
    log.info "StreamCreateCount : "+StreamCreateCount;
     tP.setPropertyValue("StreamCreateCount", StreamCreateCount.toString());
  }

  
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="f6bd877f-8fec-4051-9fb8-15029a3a9f89"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamCreate[" + tC.getPropertyValue("expectErrTypeStreamCreate") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamCreate")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	case "USER_PRIVILEGE_ACCESS_RESTRICTED":
		errId = "UserPrivilegeAccessRestricted";
	break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="dc358237-bd0e-4bd0-b850-80a2e35559f2"><con:settings/><con:config><script><![CDATA[import java.net.URLDecoder;
import java.net.URLEncoder;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");
def urnnode   = tP.getPropertyValue("urnNode");

def sh            = tC.getPropertyValue("streamhandleFULL");
def nodeid        = tC.getPropertyValue("nodeid");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = false;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
String urnErr = tP.getPropertyValue("urnError");





this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Bad_Request";
		errorReason = "Node_status_inactive";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a;
	//def urlStr = b.getPath();
	def urlStr = b;

	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 3);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
	else
	{
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}
//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		this.log.info "ResourceStatus size is " + myXML.ResourceStatus.size();
		this.log.info "ResourceStatus.Current size is " + myXML.ResourceStatus.Current.size();
		this.log.info "ResourceStatus.Current.Value size is " + myXML.ResourceStatus.Current.Value.size();
		this.log.info "ResourceStatus.Current.Description size is " + myXML.ResourceStatus.Current.Description.size();
		this.log.info "myXML.RequestingUserID size is " + myXML.RequestingUserID.size();
		this.log.info "myXML.RightsTokenID size is " + myXML.RightsTokenID.size();
		this.log.info "ExpirationDateTime size is " + myXML.ExpirationDateTime.size();
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;
		if (nodetype != "llp" && nodetype != "llpcs") {
			assert myXML.RequestingUserID.size() == 1;
		} else {
			assert myXML.RequestingUserID.size() == 0;
		}
		assert myXML.RightsTokenID.size() == 1;
		assert myXML.ExpirationDateTime.size() == 1;

		// ModifiedBy
		expected = urnnode + nodeid;
		received = myXML.ResourceStatus.Current.@ModifiedBy.text();
		this.log.info "ModifiedBy - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// StreamHandleID
		expected = sh;
		received = myXML.@StreamHandleID.text();
		this.log.info "StreamHandleID - Expect[$expected] Received[$received]";
		assert expected == received;

		// CreatedBy
		expected = urnnode + tC.getPropertyValue("expectDBCreatedBy");
		received = myXML.ResourceStatus.Current.@CreatedBy.text();
		this.log.info "CreatedBy - Expect[$expected] Received[$received]";
		assert expected == received;

		// Value
		expected = tC.getPropertyValue("expectDBStatus");
		received = myXML.ResourceStatus.Current.Value.text();
		this.log.info "Value - Expect[$expected] Received[$received]";
		assert expected == received;

		// Description
		expected = description;
		received = myXML.ResourceStatus.Current.Description.text();
		this.log.info "Description - Expect[$expected] Received[$received]";
		assert expected == received;

		// RequestingUserID
		received = myXML.RequestingUserID.text();
		if (nodetype != "llp" && nodetype != "llpcs") {
			expected = tC.getPropertyValue("assertionUserIdFULL");
		} else {
			expected = "";  /* LLP has not user associated with it */
		}
		this.log.info "RequestingUserID - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// RightsTokenID
		expected = tC.getPropertyValue("rightstokenidFULL");
		received = myXML.RightsTokenID.text();
		this.log.info "RightsTokenID - Expect[$expected] Received[$received]";
		assert expected == received;

		// RightsTokenID
		assert myXML.ExpirationDateTime.text().length() > 0;
	}
} 

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Return the streamhandle" id="478838f8-3b36-47be-bc70-1e4bfd725fb4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle"));
callTC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL"));
callTC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_034019</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_32053 - StreamRenew - LLP - Full user can renew full-user created stream-200 OK</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:F380F2ACFD6E4DC68E3EB5C45D2DFE8F</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>F380F2ACFD6E4DC68E3EB5C45D2DFE8F</con:value></con:property><con:property><con:name>sName</con:name><con:value>P0 Test Cases</con:value></con:property><con:property><con:name>sCbodyTransactionIDSetting</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sCbodyRequestingUserSetting</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:147666C1A9ED2808E05305991F0ACC22</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>147666C1A9ED2808E05305991F0ACC22</con:value></con:property><con:property><con:name>requestBody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81160</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9AAD6886B417B607E0401F0A0599673B</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value>https://qa1.q.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:147666C1A0102808E05305991F0ACC22/Stream/urn:dece:streamhandleid:org:dece:F380F2ACFD6E4DC68E3EB5C45D2DFE8F</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value>https://qa.q.uvvu.com:7002/dece/Account/urn:dece:accountid:org:dece:96D720451F824F56E0401F0A079921A9/Stream/urn:dece:streamhandleid:org:dece:98F5525959D92153E0401F0A07993F6C</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:147666C2BA18280AE05305991F0AAFC9</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>147666C2BA18280AE05305991F0AAFC9</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE114E8D795B2AF0BE0401F0A079904CD</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:147666C1A0102808E05305991F0ACC22</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>147666C1A0102808E05305991F0ACC22</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVbZcuI6EP0VyvOYMt5YXYEqh+UOExIymElIXlKK3ICILYMlseTrRzLgACG5zMyTS+1W9+lFp/uSoSi0XY8xSDiJaW4VhZS5qbSmiYS6MWKEuRRFwFyOXd+76bp23nTR7oqW6zRr2nPBsYOSVX3RoWIhvRBUqjoaBYFuFrEJdqWMy0FZqjImoEMZR5TXNNu0irpZ0O3CwDJds+wWinmrUn3ScveQMGlbquRNbQtqxWrahPOZaxjL5TK/dPJxMjZs07SM4U3XxxOIkFa/3ESUOkrqW32cDwBDGOI8jiPj0jjQuQyY65MxRVwksPUVfObLNMyqIXUCRsbftOwuBB06itNjA9GYEoxC8oZUfm6AT+Ig54XjOCF8En0ahGUqwzqssI6tAv2mGYfQzjR0gDBhSGcTZG1t9WEECVAMuV/9Tk37dl7V0quDBFE2ipOIHR7/DA/QBYTxDAKd7cLaQjvf4IlM1S8Bux2KQ8HIAm5Vs84QBratJuDzTeXuEhiRVZcw2aArptAZ+/COjptsNMkYGP+bAu0VZ2PkHoUC6mhxc9FG0fTqjTDnp2Xf0/6azIvX+GFcSwHsK6eCrLSb41FTZk20uRENo4fbi7XTHFwsm2XzftHq+aXriRdjQroXdBj02vS2Mm+GBrl7jNBTeX29YkOP3r6YV9Nm2/cNj1XGj3fJf9EPa+w43/3oibzcRqLx1not9lp2O2kJf7qOfqyN6qr/6gyHjvC6pWp8Me82o96reYFnV6MpOAxE43oS3xTXj9cPFm//8lvw9nOJPLOHvOL33mMtC2cP/6Fs9+Z98TIFzHdH1QadZq4tq4T412SmJCTQR6mqO1PkwzhQrtXVLcUdrpB0RwJX1nBztgrlUqnUsK88q2JXTK9lFh2zWK1abdPz2o3qjmQ2KI4gNmI6IsqXotxN23wNEEcuAxpAoi9iIZmOaV9YbCKOch3al48gpgwGsaRnaz0JEAmnk7FYWhO6qLKigLWYLrTcbcx7tJd4Iw7JISc7B5zcB0xmBBRxq75msrEZl7mYo4XgoZVfoDwFIak9USzr2oVK0WAkmoWgkBpRHIgQ8rPJLM2MwTZfW0eYpdJ+a5C+tk/jOv63S4HUCYhSYCqWK5BlhBPDxdkF8iHg0skhtDPviYCohyXzyROCN0gOf723ieqPrEeaXc+/24HOdP/g7nPDf7b+0kD3H5x3/9W5rOXHm8YX+TSOS5k5ChZkz+1u65DzSzJefdeIc2Tl53mxWIi09woFx0ikeUMSvGX4gIUk5PUgfgVqZCaMs6ZfhvrIcyY/xCf4hPoccYjkQ8mlxzPWHR+YWnc68oWvzt2lDlzKvHFY8VOyRihXNYX4y20Ou1jpSfGd/CzjJHgv1wlbe35knHLb4YSO1UlNvvUnTYFjaZZIzo6TfeOnDJxyfijMkpxh4bKbXgSHz//kFBnXNIRxLCjvNLVUsD8gUpx8PQP3XemDmXQGZUsp+f+tVCdpC2CQqywjqX21W7iq/+l4b8hsnZ6YM5ZnWqacM5X9OdNo2HaWlAN09Q/ij5K9PB33eP03</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2adeabc1-1785-4cfb-b032-0c28f0c1dc43"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a6599df7-c78a-4f19-9532-da80e02d4d1b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="9b72755e-2f84-4514-af54-3c9841b60084"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML" id="8a902d07-d4c1-41fb-bcc7-faacedef5201"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
/*
*  Complete rating set which doesn't appear to work
mmpaRatingsUS = ["US:MPAA:G", "US:MPAA:PG", "US:MPAA:PG-13","US:MPAA:R", "US:MPAA:NC-17", "US:MPAA:NR",
	"US:MPAA:M", "US:MPAA:GP", "US:MPAA:SMA","US:MPAA:X"];
*/
	
mmpaRatingsUS = ["US:MPAA:G", "US:MPAA:PG", "US:MPAA:PG-13","US:MPAA:R", "US:MPAA:NC-17"];

String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {
	case "${urnRating}US:MPAA:M":
	case "${urnRating}US:MPAA:NC-17":
	case "${urnRating}US:MPAA:R":
	case "${urnRating}US:MPAA:PG-13":
	case "${urnRating}US:MPAA:PG":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "&lt;dece:Resource>$rating&lt;/dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
	break;
	default:
		resourceXml = "&lt;dece:Resource>$resource&lt;/dece:Resource>";
	break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);


</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="2af42cdb-6d9e-440b-a3bf-c276d48ab968"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate Account");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate Account" id="79d224a2-42a8-444e-a3ef-d0e5d14e1d3b"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate Account" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#targetURL}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}
      <!--<dece:Resource>${#TestCase#policyResource}</dece:Resource>-->
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="ac7671da-37f9-4f59-bf21-9d54925f563c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate Account');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="bf3b5320-4783-4800-a41d-28e61d424b95"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvOYMl6wDXYFqsySCTNAEiDL8DIl5AYUbBksGUi+/koGHCDLZWaeXGq3Tp9e1N2XDEWh6fmMQcJJTAubKKTMy6RVJU2oFyNGmEdRBMzj2Bv43Y5nFnUP7a8ohXazqvwuVexy2Zm4KoyDiWqVx446LkOgWtbEMkwHlyZgCVXGUmhTxhHlVcXUDVvVLdVwhrrj2bqnO8WyWR4phQdImMAWKkVd2ZHasKoy43zhadp6vS6uS8U4mWqmrhvaU7czwDOIkFK73HqUGUpqO31cDABDGOIijiPtUjvSuQyYNyBTiniawM5W8JktXdNdTegEjEy/KfldCNp0EmfHBqIxJRiF5BXJ+HSBz+Kg4IfTOCF8Fn3qhKFLYBU2WMWGRb8p2jG1M4GOGCYMqWyGjB1WHyaQAMVQuO+3q8q387KWXR0miLJJnETs+PhnfICuIIwXwgLbu7Wjdj7gB5GqXQL22hSHKSMr6MliXSAMbJdNwOdDFW4TmJBNhzBRoBsm2WmH9E6O22g0yRQY/5sEHSRnC/KAwhRq09ns+QVazuvqdj4aNJLRKJmNoO1W6qyaEThUzgR5arfHk6LMi2h7IyotFxu32x1dXDXpfPOdOterl9WMT50Q8UYrCkcdXmFj58Kf3+j3Px978f335sP6/iXqB/aPQePH1V19TfThpPf0OA2c6zmYUV1v9QbzWLNvr5atcI1YeePeuUvH15e3Jfcu7j0OR4v7h0V4ffNreEF/9ulzuPbbd8/UvpmNu70fXfM6tZZj3jAvxq/Przeofv30y6/m7hzwP5bt3/wgHT8D5vujLIN2s3AlsoT4181MSkigTjJVbyGbD+NAuVKTt2Tv8FLR7kjgiRxuz0apadaNRtltmQ3bNayWbpd023WNK90vlXx732S2LE4oNmI6IdKWbLnbsvmaII48BjSARF3Fqeh0TPkCsYk4KrRpXzyCmDIYxqI9T3loGDbMEYGpgeNKmFbmY/q6REqhF/MbepP4Ew7JcU92j3pyHzBZEJCNW9Y1E4XNuIjFEq1SgV5coSKFVLT2RHZZz7QqtsZItAhBMtWiOEhDKC5miywyGtt+TRVhlkn7rWH22j716/TfPgRCJyBSgUlf6iDSCKfDxRK+7B1557Dz4RDaw/tpQOTDEvHkCcFbJse/3spE1kdeI82OP7jdk851/+Du78bgt/GXAJ1/MN75V+Mil+9val/EUztNZW4oWJEDs/utQ8wv0fFq+0JcIqO4LKarVZrVnmWVtETAa6LBG9oAcCoa8sswngPVcgjtrOmXsz6xnMuP+aV8RgcccYjEQylkxzPWnQEwue60xQvfnLtLHZkUceOw4R/JGqFY1STjL7c57GGpJ8S34rOOk+AtXR9gHdgRfopthxM6lSc5+V4+KQocC1gienacHIJ/BPCR8WNhHuScCxfVNE45fP6nIJtxVUEYxynl7aaSCQ4HRMaTvyzAe1N6B5PNoHwpJf+/laokKwEMYpVlJMOXu4Un659OD4bMzujpnHErpuk3mrbl193DOVPRS+U8KEfsau/E7yUHcTqt8dp/</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ManageAccountConsent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:org:org:dece:LLASP_CS_1</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>policyResourceXML</con:name><con:value>&lt;dece:Resource>urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037&lt;/dece:Resource></con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Establish Manage account consent policy</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:DuplicatePolicyCannotBeAdded">
      <Reason Language="en">The requested policy already exists.</Reason>
      <OriginalRequest>http://qa1.p.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037/Policy/urn:dece:type:policy:ManageAccountConsent</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/1/11/error/en/ErrorList.html#Policy:DuplicatePolicyCannotBeAdded</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81161</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE114E25E319930F9E0401F0A05990E71</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>13D2B1C79E2C5914E05305991F0A33A5</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="ba8aea65-c545-4cca-8cbe-d5b1c891661d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="86c99414-ecbe-4cd2-96a2-19c97fa8c4e0"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="2549aa87-aec1-47e0-a7c6-6fed32e43559"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="ae90d111-2d8f-4a7e-8b1f-e333ca0ca003"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet Account");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet Account" id="1286d587-5d96-48bf-8d70-0c2ed2217e3a"><con:settings/><con:config service="Coordinator APIs" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet Account" mediaType="application/xml" sslKeystore="LLASP_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="60dd99ec-4c61-49ad-8521-411bd8e2b212"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet Account');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="ec1c43f9-b381-4439-8213-4874f0d45ade"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

/*
*  The body should not be null...something should be
*  there.
*/
assert XMLbody.size() > 0;

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}

tC.setPropertyValue("policyExists", policyWasFound);

log.info "policyExists setting is " + tC.getPropertyValue("policyExists");</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="2f560670-8436-4e9c-941f-a389a741e87d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));

//if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
//}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Establish Manage account consent policy</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvOYMl6wDXYFqsySCTNAEiDL8DIl5AYUbBksGUi+/koGHCDLZWaeXGq3Tp9e1N2XDEWh6fmMQcJJTAubKKTMy6RVJU2oFyNGmEdRBMzj2Bv43Y5nFnUP7a8ohXazqvwuVexy2Zm4KoyDiWqVx446LkOgWtbEMkwHlyZgCVXGUmhTxhHlVcXUDVvVLdVwhrrj2bqnO8WyWR4phQdImMAWKkVd2ZHasKoy43zhadp6vS6uS8U4mWqmrhvaU7czwDOIkFK73HqUGUpqO31cDABDGOIijiPtUjvSuQyYNyBTiniawM5W8JktXdNdTegEjEy/KfldCNp0EmfHBqIxJRiF5BXJ+HSBz+Kg4IfTOCF8Fn3qhKFLYBU2WMWGRb8p2jG1M4GOGCYMqWyGjB1WHyaQAMVQuO+3q8q387KWXR0miLJJnETs+PhnfICuIIwXwgLbu7Wjdj7gB5GqXQL22hSHKSMr6MliXSAMbJdNwOdDFW4TmJBNhzBRoBsm2WmH9E6O22g0yRQY/5sEHSRnC/KAwhRq09ns+QVazuvqdj4aNJLRKJmNoO1W6qyaEThUzgR5arfHk6LMi2h7IyotFxu32x1dXDXpfPOdOterl9WMT50Q8UYrCkcdXmFj58Kf3+j3Px978f335sP6/iXqB/aPQePH1V19TfThpPf0OA2c6zmYUV1v9QbzWLNvr5atcI1YeePeuUvH15e3Jfcu7j0OR4v7h0V4ffNreEF/9ulzuPbbd8/UvpmNu70fXfM6tZZj3jAvxq/Przeofv30y6/m7hzwP5bt3/wgHT8D5vujLIN2s3AlsoT4181MSkigTjJVbyGbD+NAuVKTt2Tv8FLR7kjgiRxuz0apadaNRtltmQ3bNayWbpd023WNK90vlXx732S2LE4oNmI6IdKWbLnbsvmaII48BjSARF3Fqeh0TPkCsYk4KrRpXzyCmDIYxqI9T3loGDbMEYGpgeNKmFbmY/q6REqhF/MbepP4Ew7JcU92j3pyHzBZEJCNW9Y1E4XNuIjFEq1SgV5coSKFVLT2RHZZz7QqtsZItAhBMtWiOEhDKC5miywyGtt+TRVhlkn7rWH22j716/TfPgRCJyBSgUlf6iDSCKfDxRK+7B1557Dz4RDaw/tpQOTDEvHkCcFbJse/3spE1kdeI82OP7jdk851/+Du78bgt/GXAJ1/MN75V+Mil+9val/EUztNZW4oWJEDs/utQ8wv0fFq+0JcIqO4LKarVZrVnmWVtETAa6LBG9oAcCoa8sswngPVcgjtrOmXsz6xnMuP+aV8RgcccYjEQylkxzPWnQEwue60xQvfnLtLHZkUceOw4R/JGqFY1STjL7c57GGpJ8S34rOOk+AtXR9gHdgRfopthxM6lSc5+V4+KQocC1gienacHIJ/BPCR8WNhHuScCxfVNE45fP6nIJtxVUEYxynl7aaSCQ4HRMaTvyzAe1N6B5PNoHwpJf+/laokKwEMYpVlJMOXu4Un659OD4bMzujpnHErpuk3mrbl193DOVPRS+U8KEfsau/E7yUHcTqt8dp/</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ManageAccountConsent</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:13D29822AD424AB9E05305991F0A8037">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</Resource>
      <RequestingEntity>urn:dece:org:org:dece:RET</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-16T06:49:52.000Z" CreatedBy="urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:13D29822AD4C4AB9E05305991F0A8037">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</Resource>
      <RequestingEntity>urn:dece:org:org:dece:LLASP</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-16T06:49:56.000Z" CreatedBy="urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:13D29822AD544AB9E05305991F0A8037">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</Resource>
      <RequestingEntity>urn:dece:org:org:dece:LLASP_CS_1</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-16T06:49:59.000Z" CreatedBy="urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:13D2A366C38D0FEDE05305991F0AE9B7">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</Resource>
      <RequestingEntity>urn:dece:org:org:dece:DLASP</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-16T06:50:02.000Z" CreatedBy="urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:13D29822AD664AB9E05305991F0A8037">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</Resource>
      <RequestingEntity>urn:dece:org:org:dece:DLASP_CS_1</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-16T06:50:05.000Z" CreatedBy="urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:13D2B1C79E675914E05305991F0A33A5">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</Resource>
      <RequestingEntity>urn:dece:org:org:dece:LLASP_CS_2</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-16T06:50:14.000Z" CreatedBy="urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:13D2B46AEA4C6E30E05305991F0A10A3">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</Resource>
      <RequestingEntity>urn:dece:org:org:dece:DLASP_CS_2</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-16T06:50:24.000Z" CreatedBy="urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>false</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81163</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE114E25E319930F9E0401F0A05990E71</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>13D2B1C79E2C5914E05305991F0A33A5</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="66586be9-a512-43c4-b35d-cdd204766418"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="3d909fd5-522a-4f6f-8915-7346a46d3344"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("returnXMLResult",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="38c5b21a-6e64-401d-97b5-a862e60221d6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (tC.getPropertyValue("returnXMLResult") == null || tC.getPropertyValue("returnXMLResult") == "") {
		tC.setPropertyValue("returnXMLResult","false");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="adf04daa-a89c-4c27-832b-d90c6e0a084e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet User");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet User" id="f9a9e377-6158-4e4f-9578-09a71b974927"><con:settings/><con:config service="Coordinator APIs" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet User" mediaType="application/xml" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="9a427a9a-a933-4214-ac18-aae4cfb8ff65"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet User');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="610994ab-384f-49a8-af2f-28764f50bd61"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

Boolean policyError = false;
String policyWasFound = false;
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

/*
*  The body should not be null...something should be
*  there.
*/
assert XMLbody.size() > 0;

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass[0].text();
}

switch (httpStatus) {
	case "HTTP/1.1 200 OK":
	def myXML1 = new XmlSlurper().parseText(XMLbody);
	def PolicyIDFull = myXML1.Policy.@PolicyID.text().toString();
	int lastColon = PolicyIDFull.lastIndexOf(':');
	PolicyID     = PolicyIDFull.substring(lastColon + 1);
	log.info"=========="+PolicyID
	policyWasFound = "true";
	tC.setPropertyValue("PolicyID",PolicyID);
	break;
	case "HTTP/1.1 404 Not Found":
		policyWasFound = "false";
		break;
	default:
		policyError = true;
		break;
}

if (policyError) {
	log.info "ERROR - Bad HTTP Status Code in API! - $httpStatus";
	assert 1 == 2;
} 

tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="5a68bc66-430c-41a2-b731-edcbe037abd1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));

if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Establish High-Level Policies for User/Account/Node</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPt4xli+cfEEZgwkLQ0JF1Oa5KUjZNkosWViyQb66ysZcIGQHNo+ebRe7X570bd7xWAcGY7LGE45SWhlHUeUOYW0pWQpdRLICHMojDFzOHI8927gGFXgwP0VpdLvtZQfpm1bQRPWVWDOddUyzYbamNsN1fRrCCELGNA2hSpjGe5TxiHlLcUAuqWCpmpYU1B3DN0xa1XLMp6UygynTNgWKlWg7ECtWUtZcL50NG21WlVXZjVJQ80AQNce7gYeWuAYKu2rbUSFo7S900dVHyMcRaiKkli70o50rnzmeCSkkGcp3vny3/MFNNDUhI7PSPhJKe9iv0+DpDh2IU0oQTAiP6HMzx3mi8SvuFGYpIQv4neD0IE0rOI1UpFu0U+KdgztQkNHCFMGVbaA+s7WBAc4xRThyrdJv6V8uqxqxdVpCikLkjRmx8c/w4NpjqNkiX2V7cPaQbvc4JlMta8wcvoURRkjOb6XzbqECLNdNTG63FRllOKArAeEiQZdM4lOO4R3ctxmo0dCzPjfFOigOFsjMxhluH3nsq/u4zO8G26eX3/2M++B57MvN8/5V7dVADhULgRlabfHk6Ysm2h7Y3DvTQyWjB/rUXPyWHsIp4/mXS0Mp1onsDfgGxiF4/V4PmT50KLLRRKEDZgNqDmuT9zr0ePTIK0/vd7eks/UjUff49FtBsDMHvZ6y1nvZa3XzO63Fy/7bx0Oa7nhPmyGzbGOrzH6svg8H4ONHSw7vej+u/slTBqroYH6T98bt+uvxrU2AbPui+3n/efxzPU+13fhnuA/lu3fvJfNnzHi+6Nsg36vciOqBPnHZCYlxFeDQtVZSvJhHFOutOUtyR1OJuiO+I6o4fYMzG6nUetaNcvuWlavcQ1sE9SbTf0GuA0XXO9JZoviBGI3oQGRviTlbtvmY4AodhimPk7VPMkE0zHlA4s9yGGlTyfiESSU4Wki6Fm35vPNipJ6VuOBbtOfflYnMA8MrFTuEz6kw9QNOE6PSFkHR6Q8wYgsCZbMLRubic5mXCTjFeYZj/RqDqsUZ4LbU0mzjmE1bI2ReBlhCVWLEz+LcHW5WBap0dj2a6gQsUI6uZ4Wz+3dwE7/7XMgdHwiFZiMpYNFHfGZ6WLsA3kTsH12Cu3Nu5lP5MsSCeUpQVskx79+94lskLJJegPXG+1Bl7p/cPdH1/uh/6WBwT84H/yrc1HLtze1D/KpnZaydOTn5MDtfu0QA0xQXnvfiK+w+lrN8jwrWq8uqT0V5jVZXA0YmodRJkh5M01eMNVKK9pFE7AEfuK8lB9DzPiCehxyHIu3UimOF6w8HmZy5emLV76+dJ86cilSx/Gan5N1I7GuScQfbnTIQVJPiEfis0pS/3fFztg68CPiFBsPJzSUJzn9Nu/0BUqEWSJ4O0kPjZ8zcM75sbBMcomFi4aaZxy//6ciCbmlQISSjPJ+TykEh0OiwMk3S+z8VnpjpphD5WJK/n8zVUnRAkjwrdAv7Mv9wpFPgIYHg2bn9O2ssXSj1qwBt2MUs8bezpobo9Mpk3KErv1G/FZykKfTHm//Ag==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:03CB864126960AB2E05305991F0AF2BB</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:03CB86C4645C44D8E05307991F0A8A0E</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>UserDataUsageConsent</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://stdecqavap9.va.neustar.com:8009/rest/2015/02/Account/urn:dece:accountid:org:dece:03CB864126960AB2E05305991F0AF2BB/User/urn:dece:userid:org:dece:03CB86C4645C44D8E05307991F0A8A0E/Policy/urn:dece:type:policy:UserDataUsageConsent</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>828</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>false</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81164</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>03CB870B6AFF45EDE05307991F0AD468</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE114E8D795B2AF0BE0401F0A079904CD</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE114E8D795B4AF0BE0401F0A079904CD</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>03CB864126960AB2E05305991F0AF2BB</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>03CB86C4645C44D8E05307991F0A8A0E</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\GIT\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2aeb2df6-3fdb-4ff7-979a-90f937abd398"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="32f24d21-4639-4f8d-9246-20607598f0fc"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="fcf273dc-356e-43b2-a41d-756d35dca40a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("PolicyID",callTC.getPropertyValue("PolicyID"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="fbb694d7-20ea-4b36-8eff-d250b3146b9f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete User");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete User" id="88e91dce-aa2a-42cf-b83a-a023472e8f13"><con:settings/><con:config service="Policies" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete User" mediaType="application/xml" sslKeystore="3610_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://${#Project#targetURL}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#PolicyID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="23574971-d04f-4377-a93e-cc3005130029"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - PolicyDelete User');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="fdb0899d-efc0-405b-8a85-f63877b50bb4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="38d400ae-938a-4267-9160-c93ff2e7f989"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>3610</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:E114E25E319930F9E0401F0A05990E71</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:E114E25E319B30F9E0401F0A05990E71</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<html><head><title>JBoss Web/2.1.3.GA - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 412 - </h1><HR size="1" noshade="noshade"><p><b>type</b> Status report</p><p><b>message</b> <u></u></p><p><b>description</b> <u>A specified precondition has failed for this request ().</u></p><HR size="1" noshade="noshade"><h3>JBoss Web/2.1.3.GA</h3></body></html>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 412 Precondition Failed</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>text/html;charset=utf-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>388</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81165</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:E403E26556717E64E0401F0A0599765F</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE114E25E319930F9E0401F0A05990E71</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE114E25E319B30F9E0401F0A05990E71</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE403E26556717E64E0401F0A0599765F</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamRenew1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="acc66aa7-d0f5-4105-8a34-8a8c0b8c76bd"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="aad5fcab-5bc3-4e30-a09c-2ab990e08b03"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("counter",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamRenew",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBUpdatedBy",null);
tC.setPropertyValue("streamHistoryRows",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="8dbbe436-f411-4b3a-a836-82d926c42c2f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("expectErrTypeStreamRenew",callTC.getPropertyValue("expectErrTypeStreamRenew"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBUpdatedBy",callTC.getPropertyValue("expectDBUpdatedBy"));

if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "null") {
	tC.setPropertyValue("expectDBStatus","active");
} 
if (tC.getPropertyValue("expectDBUpdatedBy") == null || tC.getPropertyValue("expectDBUpdatedBy") == "null") {
	tC.setPropertyValue("expectDBUpdatedBy",tC.getPropertyValue("nodeid"));
} 
if (tC.getPropertyValue("nodetype") == null || tC.getPropertyValue("nodetype") == "null") {
	tC.setPropertyValue("nodetype","dlp");
} 
if (tC.getPropertyValue("counter") == null || tC.getPropertyValue("counter") == "") {
	tC.setPropertyValue("counter","1");
} </script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row if Required" id="232edc38-e1e1-47bf-b89b-1e77fc2562b2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamCreate") == "SUCCESS") {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

	String sh = tC.getPropertyValue("streamhandle");
	String results = null;
	String sql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw( '$hsh')""";

	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem").toString());
	log.info results;

	/*
	*  If zero length, no need to continue;
	*/
	assert results.length() > 0;

	try {
		def myXML = new XmlSlurper().parseText(results);
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		assert myXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", results);
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="52ecb628-457e-492f-b37a-4dac5435edf7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PUT - StreamRenew");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA.EXPIRATION before API invocation" id="1fa81763-a61c-4cdc-8d66-575b7ad4b4c5"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireBeforeRenew", a.streamGetExpireDate(tC.getPropertyValue("streamhandle")));



</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT - StreamRenew" id="f4243990-6620-4df0-bcf6-39ab9e67306f"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT - StreamRenew" mediaType="application/xml" postQueryString="false" sslKeystore="0914_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA.EXPIRATION after API invocation" id="e1004fa3-0354-44a2-9064-19007125affc"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("streamExpireAfterRenew", a.streamGetExpireDate(tC.getPropertyValue("streamhandle")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="c1e7c3c8-60c4-427f-9bba-e7924fbcd486"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('PUT - StreamRenew');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="74b4578e-b1ea-4876-aa71-c36d0eb51332"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamRenew") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamRenew")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "Policy:RatingPolicyExists";
		break;
	case "RENEW_EXCEED_MAX_TIME":
		errId = "StreamRenewExceedsMaximumTime";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	case "USER_PRIVILEGE_ACCESS_RESTRICTED":
		errId = "UserPrivilegeAccessRestricted";
	break;
	default:
		errId = tC.getPropertyValue("expectErrTypeStreamRenew").toString();
		break;
}

log.info "errId [$errId]";
try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="829732ae-5394-4f2c-9be4-94004d722e75"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("recvCreationDate",null);
tC.setPropertyValue("recvExpirationDateTime",null);

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct = tC.getPropertyValue("nodeaccountid");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def sh = tC.getPropertyValue("streamhandleFULL");
def nodeid  = tC.getPropertyValue("nodeid");
def account = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamRenew");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodetype = tC.getPropertyValue("nodetype");

boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag = false;
boolean XMLbodynull = false;
boolean httpLocationHeader = false;
boolean processXMLFlag = true;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectDescription = "";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expectStreamStatus = tC.getPropertyValue("expectDBStatus");
String received;

switch (expectStreamStatus) {
	case "active":
		expectDescription = "active"; break;
	case "deleted":
		expectDescription = "deleted"; break;
	default:
		expectDescription = "active"; break;
}		


this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		XMLbodynull = false;
		httpLocationHeader = false;
	break;
	

     case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request";
		errorReason = "node_status_inactive";
		errorLink = "$errorHost/deceerrors/error/error_response.html";
	break;

	case "Assertion_Not_Found":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Invalid Assertion";
		errorReason = "Assertion_Not_Found";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "NotFound":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		XMLbodynull = true;
		errorReason = "The supplied StreamHandleID was not found.";
		errorID = "urn:dece:errorid:org:dece:StreamNotFound";		
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NotFound";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
if(tC.getPropertyValue("httpStatus") == "HTTP/1.1 400 Bad Request")
{
	expectHTTPconnection = "close";
}
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/${account}/Stream/$urnstream[0-9, A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}

//Content-Type

if(errorRespType == "NotFound"){
expectHTTPcontenttype = "text/xml";
}
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
				
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		String assertionUserIdFULL = "";
		String recvStreamHandle = myXML.@StreamHandleID.text();
		String RequestingUserID = myXML.RequestingUserID;
		String RightsTokenID = myXML.RightsTokenID;
		String recvExpirationDateTime = myXML.ExpirationDateTime;
		String Value = myXML.ResourceStatus.Current.Value;
		String recvDescription = myXML.ResourceStatus.Current.Description;
		String recvCreatedBy = myXML.ResourceStatus.Current.@CreatedBy.text();
		String recvModifiedBy = myXML.ResourceStatus.Current.@ModifiedBy.text();
		String recvCreationDate = myXML.ResourceStatus.Current.@CreationDate.text();

		tC.setPropertyValue("recvCreationDate",recvCreationDate);
		tC.setPropertyValue("recvExpirationDateTime",recvExpirationDateTime);
		
		// StreamHandle ID
		log.info "recvStreamHandle[$recvStreamHandle] - Expect[" + tC.getPropertyValue("streamhandleFULL") + "]";
		assert recvStreamHandle == tC.getPropertyValue("streamhandleFULL");
		
		//RequestingUserID
		/*
		*  For llp and llpcs the requestinguserID element 
		*  should not be returned.  
		*/
		
		if (nodetype == "llp" || nodetype == "llpcs") {
			assertionUserIdFULL = "";
		} else {
			assertionUserIdFULL = tC.getPropertyValue("assertionUserIdFULL");
		}
		log.info "RequestingUserID[$RequestingUserID] - nodetype[$nodetype] - Expect[$assertionUserIdFULL]";
		assert RequestingUserID == assertionUserIdFULL;
		
		//RightsTokenID
		log.info "RightsTokenID[$RightsTokenID] - Expect[" + tC.getPropertyValue("rightstokenidFULL") + "]";
		assert RightsTokenID == tC.getPropertyValue("rightstokenidFULL");
		//ExpirationDate
		log.info "recvExpirationDateTime[$recvExpirationDateTime] - Size is " + recvExpirationDateTime.size();
		assert recvExpirationDateTime.size() > 0;

		//Value (status)
		log.info "Value[$Value] - Expect[" + tC.getPropertyValue("expectDBStatus") + "]";
		if (tC.getPropertyValue("expectDBStatus") == "active") {
			assert Value == "urn:dece:type:status:active";
		} else {
			assert Value == "urn:dece:type:status:deleted";
		}
		
		log.info "recvDescription[$recvDescription] - Expect[$expectDescription]";
		assert recvDescription == expectDescription;
		log.info "recvCreatedBy[$recvCreatedBy] - Expect[" + urnnode + tC.getPropertyValue("expectDBCreatedBy") + "]";
		assert recvCreatedBy == urnnode + tC.getPropertyValue("expectDBCreatedBy");
		log.info "recvModifiedBy[$recvModifiedBy] - Expect[" + urnnode + tC.getPropertyValue("nodeid") + "]";
		assert recvModifiedBy == urnnode + tC.getPropertyValue("nodeid");

		/*
		*  History validation
		*/
		if (tC.getPropertyValue("streamHistoryRows") != null) {
		def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

		int rCnt = myHistoryXML.ResultSet.Row.size();

		log.info "-------------HISTORY-----------------";
		log.info "Row Count is $rCnt";
		log.info "&lt;History> Row Count is " + myXML.ResourceStatus.History.size();

		assert myXML.ResourceStatus.History.Prior.size() == rCnt;

		for (int i = 0; i &lt; rCnt; i++) {
			String hrecvModifiedBy = myXML.ResourceStatus.History.Prior[i].@ModifiedBy.text();
			String hexpectModifiedBy = urnnode + myHistoryXML.ResultSet.Row[i].CREATED_BY_NODE_OID.text();
			log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
			assert hrecvModifiedBy == hexpectModifiedBy;

			String hrecvStatus = myXML.ResourceStatus.History.Prior[i].Value;
			String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
			log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
			if (hexpectStatus == "active") {
				assert hrecvStatus == "urn:dece:type:status:active";
			} else {
				assert hrecvStatus == "urn:dece:type:status:deleted";
			}
			
			String hrecvDescription = myXML.ResourceStatus.History.Prior[i].Description;
			switch (hexpectStatus) {
				case "active": hexpectDescription = "active"; break;
				case "deleted": hexpectDescription = "deleted"; break;
				default: hexpectDescription = "deleted"; break;
			}
			log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
			assert hrecvDescription == hexpectDescription;
		}
	}
} 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Assert STREAM_DATA.EXPIRATION_DATE changed/unchanged based on API result" id="ad99ef26-f752-479b-9c10-49b06f65534f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamRenew") == "SUCCESS") {
	a = new generalUtils.generalUtils(log);

	int w = a.dateDiff(tC.getPropertyValue("streamExpireBeforeRenew"),tC.getPropertyValue("streamExpireAfterRenew"));
	int y = tP.getPropertyValue("streamRenewTimeHours").toInteger();

	//assert w == y;
	/*
	*  hack
	*/
	assert w -1 &lt;= y;
	assert w >= y - 1;
} else {
	/*
	*  If the API was not successful then STREAM_DATA.EXPIRATION_DATE should
	*  not have been modified...
	*/
	assert tC.getPropertyValue("streamExpireBeforeRenew") == tC.getPropertyValue("streamExpireAfterRenew");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Assert different between returned Create/Expire time less than 24 hours" id="f5064f6b-30eb-4fc6-bfad-e5d10b441d01"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
			cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
			cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

if (tC.getPropertyValue("expectErrTypeStreamRenew") == "SUCCESS") {
	String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
	String recvEdate = tC.getPropertyValue("recvExpirationDateTime");
	String cDate = "";
	String eDate = "";
	int streamMaxCreateExpireTimeDiffhours = tP.getPropertyValue("streamMaxCreateExpireTimeDiffhours").toInteger();

	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "recvEdate[$recvEdate]";
	
		cDate = formatDate(recvCdate);
		eDate = formatDate(recvEdate);

		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,eDate);
	
		log.info "cDate[$cDate]";
		log.info "eDate[$eDate]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and Expire Time
		*  is less than  hours.
		*/
		assert j &lt;= streamMaxCreateExpireTimeDiffhours;
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_44850 - StreamRenew - DLP - Stream renew using q host</con:value></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CC471A4126DF4EB3E0401F0A07997EFF</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:CC471A4126DF4EB3E0401F0A07997EFF</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value>_1029c393-6b62-44e3-ba8e-e9ce35d27fb1</con:value></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>0914</con:value></con:property><con:property><con:name>streamHistoryRows</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>pjgorg1full1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:CC471A4126D34EB3E0401F0A07997EFF</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value>2012/10/18 09:16:18</con:value></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value>2012/10/18 15:16:18</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Stream StreamHandleID="urn:dece:streamhandleid:org:dece:CC471A4126DF4EB3E0401F0A07997EFF" xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RequestingUserID>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</RequestingUserID>
   <RightsTokenID>urn:dece:rightstokenid:org:dece:CC471A4126D34EB3E0401F0A07997EFF</RightsTokenID>
   <TransactionID>${=(int)(Math.random()*10000)</TransactionID>
   <ExpirationDateTime>2012-10-18T15:16:18.000Z</ExpirationDateTime>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0914" CreationDate="2012-10-17T19:16:11.804Z" ModifiedBy="urn:dece:org:org:dece:0914" ModificationDate="2012-10-17T19:16:23.556Z">
         <Value>urn:dece:type:status:active</Value>
         <Description>active</Description>
      </Current>
      <History>
         <Prior ModifiedBy="urn:dece:org:org:dece:0914" ModificationDate="2012-10-17T19:16:11.804Z">
            <Value>urn:dece:type:status:active</Value>
            <Description>active</Description>
         </Prior>
      </History>
   </ResourceStatus>
</Stream>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>1313</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>recvCreationDate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012-10-17T19:16:11.804Z</con:value></con:property><con:property><con:name>recvExpirationDateTime</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012-10-18T15:16:18.000Z</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81158</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for ParentalControlRating" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="7454ab44-8e42-4b4a-ab6c-4a073e7d4805"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="88735341-67be-4ecc-8461-db833f1e67df"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="8f52e3d7-9107-448d-9151-f0d230212024"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML" id="af72047f-fd04-4749-9106-7cfc6a3728d8"><con:settings/><con:config><script><![CDATA[def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

	
mmpaRatingsUS = ["us:mpaa:g","us:mpaa:pg","us:mpaa:pg-13","us:mpaa:r","us:mpaa:nc-17"];
tvpgRatingsUS = ["us:tvpg:tv-y","us:tvpg:tv-y7"/*,"us:tvpg:tv-y7-fv"*/,"us:tvpg:tv-g","us:tvpg:tv-pg","us:tvpg:tv-14","us:tvpg:tv-ma"];
tvpgRatingsreasoncodesUS = ["us:tvpg:v","us:tvpg:s","us:tvpg:l","us:tvpg:d","us:tvpg:fv"];
fabUS = ["us:fab:c","us:fab:f","us:fab:pd","us:fab:pd-m","us:fab:em","us:fab:ao"];
fabreasoncodesUS = ["us:fab:violence","us:fab:frightening","us:fab:sexual","us:fab:mildlang","us:fab:stronglang","us:fab:substance","us:fab:intense","us:fab:bnudity","us:fab:fnudity","us:fab:explicit","us:fab:erotica"];
esrbgamesUS = ["us:esrb:ec","us:esrb:e","us:esrb:e10+","us:esrb:t","us:esrb:m","us:esrb:ao","us:esrb:rp"];
mpaattrailersUS = ["us:mpaat:gb","us:mpaat:rb"];
tvmovieRatingsGB = ["gb:bbfc:u","gb:bbfc:pg","gb:bbfc:12","gb:bbfc:15","gb:bbfc:18","gb:bbfc:r18"];
chvrsRatingsCA = ["ca:chvrs:g","ca:chvrs:pg","ca:chvrs:14a","ca:chvrs:18a","ca:chvrs:r"];
cbscRatingsCA = ["ca:cbsc:c","ca:cbsc:c8","ca:cbsc:g","ca:cbsc:pg","ca:cbsc:14+","ca:cbsc:18+"];
filmtvifcoIE = ["ie:ifco:g","ie:ifco:pg","ie:ifco:12","ie:ifco:15","ie:ifco:18"];
filmtvncsAU = ["au:ncs:g","au:ncs:pg","au:ncs:m","au:ncs:ma15","au:ncs:r18"];
filmtvoflcNZ = ["nz:oflc:g","nz:oflc:pg","nz:oflc:m","nz:oflc:rp13","nz:oflc:r13","nz:oflc:r15","nz:oflc:rp16","nz:oflc:r16","nz:oflc:r18","nz:oflc:r"];
MocRatingFR = ["FR:MOC:U","FR:MOC:10","FR:MOC:12","FR:MOC:16","FR:MOC:18"];
FSKRatingDE = ["DE:FSK:0","DE:FSK:6","DE:FSK:12","DE:FSK:16","DE:FSK:18"];
FSKRatingAT= ["AT:FSK:0","AT:FSK:6","AT:FSK:12","AT:FSK:16","AT:FSK:18"];
FSKRatingCH= ["CH:FSK:0","CH:FSK:6","CH:FSK:12","CH:FSK:16","CH:FSK:18"];
KijkwijzerRatingBE= ["BE:KIJKWIJZER:AL","BE:KIJKWIJZER:6","BE:KIJKWIJZER:9","BE:KIJKWIJZER:12","BE:KIJKWIJZER:16"];
MocRatingLU = ["LU:MOC:U","LU:MOC:10","LU:MOC:12","LU:MOC:16","LU:MOC:18"];
FSKRatingLU= ["LU:FSK:0","LU:FSK:6","LU:FSK:12","LU:FSK:16","LU:FSK:18"];
KijkwijzerRatingNL= ["NL:KIJKWIJZER:AL","NL:KIJKWIJZER:6","NL:KIJKWIJZER:9","NL:KIJKWIJZER:12","NL:KIJKWIJZER:16"];

String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {
	case "${urnRating}us:mpaa:g":
	case "${urnRating}us:mpaa:pg":
	case "${urnRating}us:mpaa:pg-13":
	case "${urnRating}us:mpaa:r":
	case "${urnRating}us:mpaa:nc-17":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}us:tvpg:tv-y":
	case "${urnRating}us:tvpg:tv-y7":
	//case "${urnRating}us:tvpg:tv-y7-fv":
	case "${urnRating}us:tvpg:tv-g":
	case "${urnRating}us:tvpg:tv-pg":
	case "${urnRating}us:tvpg:tv-14":
	case "${urnRating}us:tvpg:tv-ma":
		for (rating in tvpgRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        case "${urnRating}us:tvpg:v":
	case "${urnRating}us:tvpg:s":
	case "${urnRating}us:tvpg:l":
	case "${urnRating}us:tvpg:d":
	case "${urnRating}us:tvpg:fv":
		for (rating in tvpgRatingsreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:c":
	case "${urnRating}us:fab:f":
	case "${urnRating}us:fab:pd":
	case "${urnRating}us:fab:pd-m":
	case "${urnRating}us:fab:em":
	case "${urnRating}us:fab:ao":
        	for (rating in fabUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:violence":
	case "${urnRating}us:fab:frightening":
	case "${urnRating}us:fab:sexual":
	case "${urnRating}us:fab:mildlang":
	case "${urnRating}us:fab:stronglang":
        case "${urnRating}us:fab:substance":
	case "${urnRating}us:fab:intense":
	case "${urnRating}us:fab:bnudity":
	case "${urnRating}us:fab:fnudity":
	case "${urnRating}us:fab:explicit":
	case "${urnRating}us:fab:erotica":
		for (rating in fabreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:esrb:ec":
	case "${urnRating}us:esrb:e":
	case "${urnRating}us:esrb:e10+":
	case "${urnRating}us:esrb:t":
	case "${urnRating}us:esrb:m":
	case "${urnRating}us:esrb:ao":
        case "${urnRating}us:esrb:rp":
        	for (rating in esrbgamesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:mpaat:gb":
        case "${urnRating}us:mpaat:rb":
        	for (rating in mpaattrailersUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
   
     //case "${urnRating}gb:bbfc:e":  
	case "${urnRating}gb:bbfc:u":
	case "${urnRating}gb:bbfc:pg":
	case "${urnRating}gb:bbfc:12":
	case "${urnRating}gb:bbfc:15":
	case "${urnRating}gb:bbfc:18":
	case "${urnRating}gb:bbfc:r18":
		for (rating in tvmovieRatingsGB) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>" + rating.replaceAll("&","&amp;") + "</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

           //case "${urnRating}ca:chvrs:e":
        case "${urnRating}ca:chvrs:g":
	case "${urnRating}ca:chvrs:pg":
	case "${urnRating}ca:chvrs:14a":
	case "${urnRating}ca:chvrs:18a":
	case "${urnRating}ca:chvrs:r": 
	case "${urnRating}ca:chvrs:e":
		for (rating in chvrsRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

        //case "${urnRating}ca:cbsc:e": 
        case "${urnRating}ca:cbsc:c":
	case "${urnRating}ca:cbsc:c8":
	case "${urnRating}ca:cbsc:g":
	case "${urnRating}ca:cbsc:pg":
	case "${urnRating}ca:cbsc:14+":
        case "${urnRating}ca:cbsc:18+":
      	case "${urnRating}ca:cbsc:e":
      		for (rating in cbscRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        //case "${urnRating}ie:ifco:e": 
        case "${urnRating}ie:ifco:g":
	case "${urnRating}ie:ifco:pg":
	case "${urnRating}ie:ifco:12":
	case "${urnRating}ie:ifco:15":
	case "${urnRating}ie:ifco:18":
      		for (rating in filmtvifcoIE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        //case "${urnRating}au:ncs:e": 
        case "${urnRating}au:ncs:g":
	case "${urnRating}au:ncs:pg":
	case "${urnRating}au:ncs:m":
	case "${urnRating}au:ncs:ma15":
	case "${urnRating}au:ncs:r18":
      		for (rating in filmtvncsAU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
        //case "${urnRating}nz:oflc:e": 
        case "${urnRating}nz:oflc:g":
	case "${urnRating}nz:oflc:pg":
	case "${urnRating}nz:oflc:m":
	case "${urnRating}nz:oflc:rp13":
	case "${urnRating}nz:oflc:r13":
	case "${urnRating}nz:oflc:r15":
	case "${urnRating}nz:oflc:rp16":
        case "${urnRating}nz:oflc:r16": 
        case "${urnRating}nz:oflc:r18":
	case "${urnRating}nz:oflc:r":
	      		for (rating in filmtvoflcNZ) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
         case "${urnRating}FR:MOC:U":
	case "${urnRating}FR:MOC:10":
	case "${urnRating}FR:MOC:12":
	case "${urnRating}FR:MOC:16":
	case "${urnRating}FR:MOC:18":
      		for (rating in MocRatingFR) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

	case "${urnRating}DE:FSK:0":
	case "${urnRating}DE:FSK:6":
	case "${urnRating}DE:FSK:12":
	case "${urnRating}DE:FSK:16":
	case "${urnRating}DE:FSK:18":
      		for (rating in FSKRatingDE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}AT:FSK:0":
	case "${urnRating}AT:FSK:6":
	case "${urnRating}AT:FSK:12":
	case "${urnRating}AT:FSK:16":
	case "${urnRating}AT:FSK:18":
      		for (rating in FSKRatingAT) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}CH:FSK:0":
	case "${urnRating}CH:FSK:6":
	case "${urnRating}CH:FSK:12":
	case "${urnRating}CH:FSK:16":
	case "${urnRating}CH:FSK:18":
      		for (rating in FSKRatingCH) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

   case "${urnRating}BE:KIJKWIJZER:AL":
	case "${urnRating}BE:KIJKWIJZER:6":
	case "${urnRating}BE:KIJKWIJZER:9":
	case "${urnRating}BE:KIJKWIJZER:12":
	case "${urnRating}BE:KIJKWIJZER:16":
      		for (rating in KijkwijzerRatingBE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}LU:FSK:0":
	case "${urnRating}LU:FSK:6":
	case "${urnRating}LU:FSK:12":
	case "${urnRating}LU:FSK:16":
	case "${urnRating}LU:FSK:18":
      		for (rating in FSKRatingLU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}LU:MOC:U":
	case "${urnRating}LU:MOC:10":
	case "${urnRating}LU:MOC:12":
	case "${urnRating}LU:MOC:16":
	case "${urnRating}LU:MOC:18":
      		for (rating in MocRatingLU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}NL:KIJKWIJZER:AL":
	case "${urnRating}NL:KIJKWIJZER:6":
	case "${urnRating}NL:KIJKWIJZER:9":
	case "${urnRating}NL:KIJKWIJZER:12":
	case "${urnRating}NL:KIJKWIJZER:16":
      		for (rating in KijkwijzerRatingNL) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
   
	default:
		resourceXml = "<dece:Resource>$resource</dece:Resource>";
		break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);
]]></script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="84cfc44c-f6b2-4a68-ab89-69b6d824ea52"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate" id="9441c628-3fb6-401a-b46f-64660fa0b470"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}  
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnParentalControlRating}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="69fa8d3a-4acf-449c-b023-3f3592595060"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="ec027da5-155b-4fea-9292-5fada24baf02"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPt4xli+cfEEZgwkLQ0JF1Oa5KUjZNkosWViyQb66ysZcIGQHNo+ebRe7X570bd7xWAcGY7LGE45SWhlHUeUOYW0pWQpdRLICHMojDFzOHI8927gGFXgwP0VpdLvtZQfpm1bQRPWVWDOddUyzYbamNsN1fRrCCELGNA2hSpjGe5TxiHlLcUAuqWCpmpYU1B3DN0xa1XLMp6UygynTNgWKlWg7ECtWUtZcL50NG21WlVXZjVJQ80AQNce7gYeWuAYKu2rbUSFo7S900dVHyMcRaiKkli70o50rnzmeCSkkGcp3vny3/MFNNDUhI7PSPhJKe9iv0+DpDh2IU0oQTAiP6HMzx3mi8SvuFGYpIQv4neD0IE0rOI1UpFu0U+KdgztQkNHCFMGVbaA+s7WBAc4xRThyrdJv6V8uqxqxdVpCikLkjRmx8c/w4NpjqNkiX2V7cPaQbvc4JlMta8wcvoURRkjOb6XzbqECLNdNTG63FRllOKArAeEiQZdM4lOO4R3ctxmo0dCzPjfFOigOFsjMxhluH3nsq/u4zO8G26eX3/2M++B57MvN8/5V7dVADhULgRlabfHk6Ysm2h7Y3DvTQyWjB/rUXPyWHsIp4/mXS0Mp1onsDfgGxiF4/V4PmT50KLLRRKEDZgNqDmuT9zr0ePTIK0/vd7eks/UjUff49FtBsDMHvZ6y1nvZa3XzO63Fy/7bx0Oa7nhPmyGzbGOrzH6svg8H4ONHSw7vej+u/slTBqroYH6T98bt+uvxrU2AbPui+3n/efxzPU+13fhnuA/lu3fvJfNnzHi+6Nsg36vciOqBPnHZCYlxFeDQtVZSvJhHFOutOUtyR1OJuiO+I6o4fYMzG6nUetaNcvuWlavcQ1sE9SbTf0GuA0XXO9JZoviBGI3oQGRviTlbtvmY4AodhimPk7VPMkE0zHlA4s9yGGlTyfiESSU4Wki6Fm35vPNipJ6VuOBbtOfflYnMA8MrFTuEz6kw9QNOE6PSFkHR6Q8wYgsCZbMLRubic5mXCTjFeYZj/RqDqsUZ4LbU0mzjmE1bI2ReBlhCVWLEz+LcHW5WBap0dj2a6gQsUI6uZ4Wz+3dwE7/7XMgdHwiFZiMpYNFHfGZ6WLsA3kTsH12Cu3Nu5lP5MsSCeUpQVskx79+94lskLJJegPXG+1Bl7p/cPdH1/uh/6WBwT84H/yrc1HLtze1D/KpnZaydOTn5MDtfu0QA0xQXnvfiK+w+lrN8jwrWq8uqT0V5jVZXA0YmodRJkh5M01eMNVKK9pFE7AEfuK8lB9DzPiCehxyHIu3UimOF6w8HmZy5emLV76+dJ86cilSx/Gan5N1I7GuScQfbnTIQVJPiEfis0pS/3fFztg68CPiFBsPJzSUJzn9Nu/0BUqEWSJ4O0kPjZ8zcM75sbBMcomFi4aaZxy//6ciCbmlQISSjPJ+TykEh0OiwMk3S+z8VnpjpphD5WJK/n8zVUnRAkjwrdAv7Mv9wpFPgIYHg2bn9O2ssXSj1qwBt2MUs8bezpobo9Mpk3KErv1G/FZykKfTHm//Ag==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:03CB864126960AB2E05305991F0AF2BB</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:03CB86C4645C44D8E05307991F0A8A0E</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/2015/02/Account/urn:dece:accountid:org:dece:03CB864126960AB2E05305991F0AF2BB/User/urn:dece:userid:org:dece:03CB86C4645C44D8E05307991F0A8A0E/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:03CB86C4645C44D8E05307991F0A8A0E</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:03CB86C4645C44D8E05307991F0A8A0E</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:us:mpaa:nc-17</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Establish Parental Control Rating</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResourceXML</con:name><con:value><![CDATA[<dece:Resource>urn:dece:type:rating:us:mpaa:g</dece:Resource>
<dece:Resource>urn:dece:type:rating:us:mpaa:pg</dece:Resource>
<dece:Resource>urn:dece:type:rating:us:mpaa:pg-13</dece:Resource>
<dece:Resource>urn:dece:type:rating:us:mpaa:r</dece:Resource>
<dece:Resource>urn:dece:type:rating:us:mpaa:nc-17</dece:Resource>
]]></con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77323</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\GIT\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>03CB864126960AB2E05305991F0AF2BB</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>03CB86C4645C44D8E05307991F0A8A0E</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenDeleteRequest" searchProperties="true" id="5f580c3b-be80-44e9-a0fe-44c33dd10e69">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Properties" id="167bfc70-4968-430d-afbf-2f6c339a5864">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

//log.info callTSuitename
//log.info callTCasename.getName();

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("assert"));
testRunner.testCase.getTestStepByName("RightsTokenDeleteRequest").testRequest.setRequestHeaders(headers);
testCase.setPropertyValue("assert",CallingTCase.getPropertyValue("assert"));

// setUp Node Properties

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));

//SetUp test properties
testCase.setPropertyValue("RightsTokenID",CallingTCase.getPropertyValue("rightstokenidFULL"));
//testCase.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("assertionAccountIdFULL"));
//testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));

log.info CallingTCase.getPropertyValue("assertionAccountIdFULL") 
	testCase.setPropertyValue("encodedAccountID",CallingTCase.getPropertyValue("assertionAccountIdFULL"));
	testCase.setPropertyValue("encodedRightsTokenID",CallingTCase.getPropertyValue("rightstokenidFULL"));
	
//Testing RightTokenCreate Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTDReq","OK");
//CallingTCase.setPropertyValue("FeedRTDReq",CallingTCase.getPropertyValue("FeedRTDReq"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsTokenGet API to have the ETAG" id="66d7cbd9-dc8f-4f70-8863-89b007ed7a66"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;

//Extractthe Response and Set the ETag Value at the Project Level Properties
RTCRequest = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Extract RightsToken-Get Information")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

runnerRTC = RTCRequest.run( null , false );

def etagValue=testProject.getPropertyValue("ETag");
log.info "etagValue=="+etagValue;
//Set the Etag value as Header to the RightsTokenDelete API Request

def headers = new StringToStringMap()
headers.put("If-Match",etagValue);
headers.put("Authorization","SAML2 assertion="+ testCase.getPropertyValue("assert"));
testRunner.testCase.getTestStepByName("RightsTokenDeleteRequest").testRequest.setRequestHeaders(headers);

assert runnerRTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Exact the ETag Details" disabled="true" id="4ef6f464-b25b-4413-94e2-5974d46b7905"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//Extractthe Response and Set the ETag Value at the Project Level Properties
def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Get Information")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

def etagValue=testProject.getPropertyValue("ETag");
log.info "etagValue=="+etagValue;
//Set the Etag value as Header to the RightsTokenDelete API Request
if (etagValue.toString()!="null")
{
def headers = new StringToStringMap()
headers.put("IF-Match",etagValue);
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("assert"));
testRunner.testCase.getTestStepByName("RightsTokenDeleteRequest").testRequest.setRequestHeaders(headers);
}
assert runnerRTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="pem set" id="3d536961-1fd1-4e47-894f-f346df1fbb9e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenDeleteRequest");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsTokenDeleteRequest" id="23484e0a-db0b-4388-9db6-ff73bbc61bd1">
        <con:settings/>
        <con:config service="RightsTokenDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsTokenDeleteRequest" mediaType="application/xml" sslKeystore="RET_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=pVbZcuI6EP0VyvOYMl6wDXYFqsySCTNAEiDL8DIl5AYUbBksGUi+/koGHCDLZWaeXGq3Tp9e1N2XDEWh6fmMQcJJTAubKKTMy6RVJU2oFyNGmEdRBMzj2Bv43Y5nFnUP7a8ohXazqvwuVexy2Zm4KoyDiWqVx446LkOgWtbEMkwHlyZgCVXGUmhTxhHlVcXUDVvVLdVwhrrj2bqnO8WyWR4phQdImMAWKkVd2ZHasKoy43zhadp6vS6uS8U4mWqmrhvaU7czwDOIkFK73HqUGUpqO31cDABDGOIijiPtUjvSuQyYNyBTiniawM5W8JktXdNdTegEjEy/KfldCNp0EmfHBqIxJRiF5BXJ+HSBz+Kg4IfTOCF8Fn3qhKFLYBU2WMWGRb8p2jG1M4GOGCYMqWyGjB1WHyaQAMVQuO+3q8q387KWXR0miLJJnETs+PhnfICuIIwXwgLbu7Wjdj7gB5GqXQL22hSHKSMr6MliXSAMbJdNwOdDFW4TmJBNhzBRoBsm2WmH9E6O22g0yRQY/5sEHSRnC/KAwhRq09ns+QVazuvqdj4aNJLRKJmNoO1W6qyaEThUzgR5arfHk6LMi2h7IyotFxu32x1dXDXpfPOdOterl9WMT50Q8UYrCkcdXmFj58Kf3+j3Px978f335sP6/iXqB/aPQePH1V19TfThpPf0OA2c6zmYUV1v9QbzWLNvr5atcI1YeePeuUvH15e3Jfcu7j0OR4v7h0V4ffNreEF/9ulzuPbbd8/UvpmNu70fXfM6tZZj3jAvxq/Przeofv30y6/m7hzwP5bt3/wgHT8D5vujLIN2s3AlsoT4181MSkigTjJVbyGbD+NAuVKTt2Tv8FLR7kjgiRxuz0apadaNRtltmQ3bNayWbpd023WNK90vlXx732S2LE4oNmI6IdKWbLnbsvmaII48BjSARF3Fqeh0TPkCsYk4KrRpXzyCmDIYxqI9T3loGDbMEYGpgeNKmFbmY/q6REqhF/MbepP4Ew7JcU92j3pyHzBZEJCNW9Y1E4XNuIjFEq1SgV5coSKFVLT2RHZZz7QqtsZItAhBMtWiOEhDKC5miywyGtt+TRVhlkn7rWH22j716/TfPgRCJyBSgUlf6iDSCKfDxRK+7B1557Dz4RDaw/tpQOTDEvHkCcFbJse/3spE1kdeI82OP7jdk851/+Du78bgt/GXAJ1/MN75V+Mil+9val/EUztNZW4oWJEDs/utQ8wv0fFq+0JcIqO4LKarVZrVnmWVtETAa6LBG9oAcCoa8sswngPVcgjtrOmXsz6xnMuP+aV8RgcccYjEQylkxzPWnQEwue60xQvfnLtLHZkUceOw4R/JGqFY1STjL7c57GGpJ8S34rOOk+AtXR9gHdgRfopthxM6lSc5+V4+KQocC1gienacHIJ/BPCR8WNhHuScCxfVNE45fP6nIJtxVUEYxynl7aaSCQ4HRMaTvyzAe1N6B5PNoHwpJf+/laokKwEMYpVlJMOXu4Un659OD4bMzujpnHErpuk3mrbl193DOVPRS+U8KEfsau/E7yUHcTqt8dp/"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint>
            <con:request/>
            <con:credentials>
              <con:username/>
              <con:password xsi:nil="true"/>
              <con:domain xsi:nil="true"/>
            <con:authType>Global HTTP Settings</con:authType></con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="AccountID" value="${#TestCase#encodedAccountID}"/>
  <con:entry key="RightsTokenID" value="${#TestCase#encodedRightsTokenID}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep><con:testStep type="restrequest" name="RightsTokenDeleteRequest_with_NULL_trxid" disabled="true" id="7716d157-b382-46b8-87fe-df09c978f150">
        <con:settings/>
        <con:config service="RightsTokenDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsTokenDeleteRequest_with_NULL_trxid" mediaType="application/xml" sslKeystore="222259_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=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" xmlns="http://eviware.com/soapui/config"/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:endpoint>${#Project#Provision_HostName}</con:endpoint>
            <con:request/>
            <con:credentials>
              <con:username/>
              <con:password xsi:nil="true"/>
              <con:domain xsi:nil="true"/>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="AccountID" value="${#TestCase#AccountID}"/>
              <con:entry key="RightsTokenID" value="urn:dece:rightstokenid:org:dece:B6ACE7F48352D3C9E0401F0A059915EC "/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep><con:properties>
        
        <con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</con:value></con:property>
        
        
        
        
      <con:property><con:name>assert</con:name><con:value>pVbZcuI6EP0VyvOYMl6wDXYFqsySCTNAEiDL8DIl5AYUbBksGUi+/koGHCDLZWaeXGq3Tp9e1N2XDEWh6fmMQcJJTAubKKTMy6RVJU2oFyNGmEdRBMzj2Bv43Y5nFnUP7a8ohXazqvwuVexy2Zm4KoyDiWqVx446LkOgWtbEMkwHlyZgCVXGUmhTxhHlVcXUDVvVLdVwhrrj2bqnO8WyWR4phQdImMAWKkVd2ZHasKoy43zhadp6vS6uS8U4mWqmrhvaU7czwDOIkFK73HqUGUpqO31cDABDGOIijiPtUjvSuQyYNyBTiniawM5W8JktXdNdTegEjEy/KfldCNp0EmfHBqIxJRiF5BXJ+HSBz+Kg4IfTOCF8Fn3qhKFLYBU2WMWGRb8p2jG1M4GOGCYMqWyGjB1WHyaQAMVQuO+3q8q387KWXR0miLJJnETs+PhnfICuIIwXwgLbu7Wjdj7gB5GqXQL22hSHKSMr6MliXSAMbJdNwOdDFW4TmJBNhzBRoBsm2WmH9E6O22g0yRQY/5sEHSRnC/KAwhRq09ns+QVazuvqdj4aNJLRKJmNoO1W6qyaEThUzgR5arfHk6LMi2h7IyotFxu32x1dXDXpfPOdOterl9WMT50Q8UYrCkcdXmFj58Kf3+j3Px978f335sP6/iXqB/aPQePH1V19TfThpPf0OA2c6zmYUV1v9QbzWLNvr5atcI1YeePeuUvH15e3Jfcu7j0OR4v7h0V4ffNreEF/9ulzuPbbd8/UvpmNu70fXfM6tZZj3jAvxq/Przeofv30y6/m7hzwP5bt3/wgHT8D5vujLIN2s3AlsoT4181MSkigTjJVbyGbD+NAuVKTt2Tv8FLR7kjgiRxuz0apadaNRtltmQ3bNayWbpd023WNK90vlXx732S2LE4oNmI6IdKWbLnbsvmaII48BjSARF3Fqeh0TPkCsYk4KrRpXzyCmDIYxqI9T3loGDbMEYGpgeNKmFbmY/q6REqhF/MbepP4Ew7JcU92j3pyHzBZEJCNW9Y1E4XNuIjFEq1SgV5coSKFVLT2RHZZz7QqtsZItAhBMtWiOEhDKC5miywyGtt+TRVhlkn7rWH22j716/TfPgRCJyBSgUlf6iDSCKfDxRK+7B1557Dz4RDaw/tpQOTDEvHkCcFbJse/3spE1kdeI82OP7jdk851/+Du78bgt/GXAJ1/MN75V+Mil+9val/EUztNZW4oWJEDs/utQ8wv0fFq+0JcIqO4LKarVZrVnmWVtETAa6LBG9oAcCoa8sswngPVcgjtrOmXsz6xnMuP+aV8RgcccYjEQylkxzPWnQEwue60xQvfnLtLHZkUceOw4R/JGqFY1STjL7c57GGpJ8S34rOOk+AtXR9gHdgRfopthxM6lSc5+V4+KQocC1gienacHIJ/BPCR8WNhHuScCxfVNE45fP6nIJtxVUEYxynl7aaSCQ4HRMaTvyzAe1N6B5PNoHwpJf+/laokKwEMYpVlJMOXu4Un659OD4bMzujpnHErpuk3mrbl193DOVPRS+U8KEfsau/E7yUHcTqt8dp/</con:value></con:property><con:property><con:name>encodedAccountID</con:name><con:value>urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>encodedRightsTokenID</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2A366C36B0FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FeedRTDReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>1463</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountDoesNotHaveRightsTokenInURL">
      <Reason Language="en">The rights token was not found in the account.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037/RightsToken/urn:dece:rightstokenid:org:dece:13D2A366C36B0FEDE05305991F0AE9B7</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/1/11/error/en/ErrorList.html#AccountDoesNotHaveRightsTokenInURL</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>RightsTokenID</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2A366C36B0FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>RTObjType</con:name><con:value>Error</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases_P1</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>TC_DECE_12070 - StreamRenew - LLP - RightsTokenNotActive - RIGHTS_TOKEN.STATUS_ID of deleted cannot be renewed-403 Forbidden_FLAKY</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_12070 - StreamRenew - LLP - RightsTokenNotActive - RIGHTS_TOKEN.STATUS_ID of deleted cannot be renewed-403 Forbidden</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Linked LASP Test Cases_P1</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>1584ee73-97f2-474b-955f-c1c6f5a8ea91</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71721bdd-13aa-4a9d-b861-704bd42cc7b0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for ParentalConrolRating" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="f8da0068-b88d-4eee-bb5b-9d23a74a8044"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="348f155b-3047-4806-a0fe-0092970a3794"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("returnXMLResult",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="9daac22d-7df9-4859-bdfa-8e4712be2451"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

tC.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (tC.getPropertyValue("returnXMLResult") == null || tC.getPropertyValue("returnXMLResult") == "") {
		tC.setPropertyValue("returnXMLResult","false");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="85d64caa-6a9d-4c47-a1f3-266119b88b48"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet" id="92840355-f92e-4787-9a85-b45bcc62aacc"><con:settings/><con:config service="Coordinator APIs" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet" mediaType="application/xml" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnParentalControlRating}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="04312149-bd0c-4cc8-a10e-139d60134dc1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="a56940ea-a164-47ae-b96b-a8aaf946c07c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def XMLbody = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema")

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	try {
		myXML = new XmlSlurper().parseText(XMLbody);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
		log.info "xmlPolicyClass[$xmlPolicyClass]";
		log.info "tcPolicyClass[tcPolicyClass]";
	}
}

if (httpStatus == "HTTP/1.1 200 OK" ) {
	def myXML1 = new XmlSlurper().parseText(XMLbody);
	def PolicyIDFull = myXML1.Policy.@PolicyID.text().toString();
	int lastColon = PolicyIDFull.lastIndexOf(':');
	PolicyID     = PolicyIDFull.substring(lastColon + 1);
	log.info"=========="+PolicyID
	policyWasFound = "true";
	tC.setPropertyValue("PolicyID",PolicyID);
	
	
} else if ( httpStatus == "HTTP/1.1 404 Not Found") {
	policyWasFound = "false";
	
} else {
	log.info "ERROR!";
	assert 1 == 2;
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="e385b848-53d0-46fb-b249-cb5b8e8e853c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));


if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZhc9o8DP4rXPZxF5KQQEKucMcI3digY4F2e/myc20BbhMHYoem/PrZATKgtC/bvsBZkaVH0mNJVxzFUc3vcA6poAmr5HHEuF9IW1qWMj9BnHKfoRi4L7A/7gwHfq1q+mh/Rav0g5b2s+bVPK8xc/VZE2zdcdC9fn8vfxxwZw0bPNtxkVTlPIM+4wIx0dJqplXXTUe36hPL9C3Xd8yq6zamWuUOUi5tS5Wqqe1A5bylLYRY+obx9PRUfbKrSTo3aqZpGT+GgzFeQIy09tU2osJR2t7p4yoBDFGEqziJjSvjSOeKcH9M5wyJLIWdL/KaL9Mwm4bUIZzO32nlXSB9NkuKYxexhFGMIrpBKj9DEIuEVDrRPEmpWMSvBmGZyrAOOdax5bB3mnEM7UJDRwhTjnS+QNbOVggzSIFhqNyG/Zb27rKqFVcnKWJ8lqQxPz7+GR5ga4iSJRCd78PaQbvc4JlMta8A+32Go4zTNdwosi4RBr6rJuDLTVVGKcxoPqBcEjTnCp1xCO/kuM1GQOfAxd8U6KA4WyN3KMqg/XEUrmfpp/r7xreG7dluNl51N19gdI2eWgWAQ+VCUJZ2ezwhZUmi7Q08cGbTJFxBMlgj4tTj0Jxzu4c3wV04wpPGXcf4Dr27sLaZ9qaebVx/Zt5NHtu9leM1yJegGd7mbv6t/4DyD/ak3qX92wl+MMWDOWnesvgWvc+fG6knyEB8GBj3g8cfq2D1idzNP06Ho8A0rs3h9Db7HNqk35h+D2ve4Nly2aQpugQvh//l4TCuZ7UFIeawVYZzgP9Ytn/z4+z+AbDYHxUN+kHlWlYJibebmZJQos8KVX+pmg8XwITWVrdU7/Az2e4o8WUNt2fL7lpNsx6Y3Yblel7QM+u2WW82rWuzU/e69r7JbFGcQOwmbEaVL9Vyt7R5GyCOfQ6MQKqvk0x2Oq69YTFAAlX6LJSPIGEcJolszxnN3LkbEe/xATb5Btkb4jXEo9AqN4n4yr6mnZmA9Lgl20ctOQRMlxRU31a05pLXXMhUrNA6E5FVXaMqg0x29lQ1Wb/meHWD03gZgQJqxAnJIqguF8siMQbf/td0hHkhDXuT4rG9Gtbpt30GpA6hSoGrWD6ArCKcmS32PpAXATfOzqC9+U5GqHpXMp0ipXiL5PjTb5YoepQUCQad8WgPutT9g7s/u+Of1l8aGPyD88G/Ope1fHnTeCOfxmkpS0dkTQ/c7pcOOb5kw2vvibhCVnVVzdbrrOCe49hGKs0bsr9bxhhwJvvx8yR5BGaUJoyLhl+J+sRzKT/Gl4kFGwskIJYPpVIcL9h2xsDVttOXDzy/dJU6cinzJiAX52TdSG5qCvGbyxz2sdKT4pH8e0pS8rtcZ2wd+JFxymVHUDZXJzX4nl8hBU6kWSpbdpIeGj9n4JzzY2GZ5BKLkGy6zwS8/qWienFLQxgnGRP9QCsEh/OhwCmel+D/VnphphhB5U5K/38p1WlBAQxyk+W0sK9WC1/xn80PZszO6emYcXpO03R7jhk4tcMxY3uBVyblCF37hfil5CBPpxxv/wI=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13C14E4907E40D42E05305991F0A38D8</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13C1905D0C61788DE05305991F0A58C3</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:13C14E4907E40D42E05305991F0A38D8/User/urn:dece:userid:org:dece:13C1905D0C61788DE05305991F0A58C3/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/1/11/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77321</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>02B39B1220B0314AE05307991F0ABD1C</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13C14E4907E40D42E05305991F0A38D8</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13C1905D0C61788DE05305991F0A58C3</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for ParentalControlRating" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="a1545ea1-731b-4709-86d1-2bea475fdc0a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e264e04d-6c29-4c78-b25f-6c5a7312c367"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="1f3e890c-a31b-43c0-ad9c-00c9f9ccf54a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("PolicyID",callTC.getPropertyValue("PolicyID"));

tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="1fb16ddd-4f78-4ead-a51b-c855878c310c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete" id="52cac0fe-073b-41ac-a8fb-7b8253d5e6f4"><con:settings/><con:config service="Policies" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="LLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicyID}${#TestCase#PolicyID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="27f2151d-e0a3-4531-b3db-41669358d8a0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="4ffa4992-e36c-48fe-9fb4-c24a13f16649"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="c1c963c9-34e4-4ed2-994b-cf9e03d89c48"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVbZcuI6EP0VyvOYMl7ZXIEqgoeKMw5wIVvlZUrIAsTYkpFkQ/L1IxlwgCyXmXlyqd06fXpRd19ykMS21+UcMYEpqWySmHCvkLa1jBGPAo65R0CCuCegN+nehp5dNT2wv6JVAr+t/ZzOIgdNQUO3G6ihu9a0rjeRFen1GZg6pmXXHGsqVTnPUEC4AES0Ndu0XN1s6ZZ5Z7Y81/VMt2rX3Wet8oAYl9hSpWpqO1Ib3tYWQqSeYazX6+raqVI2N2zTtIyn23ACFygBWudy61FhiHV2+rAaIYjiGFYhTYxL40jnMuLeBM8JEBlDO1vRZ7ZMw2wZUifieP5NK++iKCAzWhx7gFCCIYjxK1DxuUViQaNKN55ThsUi+dQJy1TAOtpAHVou+aYZx9TOBDpiyDjQ+QJYO6wxmiGGCESV+3HQ1r6dl7Xi6h0DhM8oS/jx8c/4IJKjmKYo0vnerR218wE/iFTnEkEvIDDOOM7RQBVrCiDiu2wieD5UZcTQDG9CzGWBbrhiZxzSOzluo+HjOeLibxJ0kJwtyAOIM9QZJAvSp/3soTZZcvdxk93ejq5Xm4d8eN8uCBwqF4IytdvjSVGWRbS9MRnFjxYPHlc0HPA4wONH0pteD26aNffHqu6/NO1hPqdDMEgDKuCwF7d84syxb7+mjnUvekHmbsjomubz6eJpavy4Bjc362Xr5WLpT/8bPj0sRrVwErKg0UzvWwPgvFqtbLCxxzgc9n60Bskwj0n/2knDx8b6+fYuo2y1XDzM8wv3uU5vbi6WPSdkIUwW7Fe7dOeA/7Fs/+Yn2XSJoNgfVRkEfqUvswTE181MSXCkzwpVL1XNhwtEhNZRt1Tv8DLZ7nDkyRxuz6Z95Xx3nGat2e+6Tcf+btYcs9FqWX2ze2U5/X2T2bI4odijZIaVLdVyt2XzNUGYeByRCDE9p5nsdFz7AtEHAlQCMpaPgBKO7qhsz5YLTD7bNH4BNqNWKlorFhErbcZLrTKgYkiGrDsTiB01Zcs+aspjBHGKkercqrC5rGwuZDBWIM9EbFVzUCUok72dqTbr2W6zZnCcpDFSVI2ERlmMqukiLUJj8O3X1gHkhXT8/a54bp86dvpvHwOpE2GlwJUvV0jmEb2bLo5X2zvyzuHah1NoD9/NIqxelgyoYBhumRz/eqsTVSBlkfhhdzLaky51/+Duz97kp/WXAOE/GA//1bjM5fubxhfxNE5TWRqKcnxgdr92yAEmW15nX4grUF1VszzPitJrqNbOJLyhkmuYtjFBMJNN+eWO/kLEKFGMsyZgSfzEeCk/ppiJBZkIIFAi30qlOJ6x8kwQVytPIF/55tx96sikDJ1AG/GRrBfLdU0x/nKjgx5UelI8kp81ZdFbxj7AOrAj/ZQbj8Bkrk5q+r18UheQSlgs+zZlh+AfAXxk/FhYBrnkImRBTTOBPv9TUQ25rQEIaUZE4GuF4HBIFDzFS4q8N6V3MMUcKhdT/P+bqY6LEoBIrrMcF/hqv/DUEyDzg0GzM3o6a3qmX7cc33frXetw1nRrtUYZlCN2nXfi95KDOJ3WeOc3</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:02B3C0D613DD46A1E05307991F0AA557</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:02B3E33858FA4832E05307991F0AB13F</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77325</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>02B39B1220B0314AE05307991F0ABD1C</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE68F7AD0B700B174E0401F0A0799424D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>02B3C0D613DD46A1E05307991F0AA557</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>02B3E33858FA4832E05307991F0AB13F</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for ParentalControlBlockUnratedContent" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="144a1229-ed25-4249-9a5a-d577dadd766b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="70b5b3f0-bd40-4dd3-9d4f-ff30b838d222"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="78252ac4-22fd-4777-a382-78e365585ccf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="15b74c44-6b94-4f4e-aa34-0ae133b7390f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate" id="da90f73b-babd-4555-9dc0-b2cd4d56501e"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>  
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnParentalControlBlockUnratedContent}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="12dd2023-865d-400b-87a0-cdb52b05355b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="3644bf23-bff5-4af1-a8d9-8c67bbdc3054"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZZc+I4EH6fX+HyPG4ZH9gBXIEqgmHHCTkWckzmJSXkttHGlokkc+TXr2RiAoRkk5kqqii1W91fH/q6jznKUsfvcg5MkJxqYdDWHxpHll13sWt4br1huBPHNZpWHBsQ4UkjttzIcixdCzkvIKRcICraumPZrmEdGY5zbbu+o361I7fxS9dugXFpWqrU5K1lllLul27besGonyNOuE9RBtwX2B93z4e+1PRRhUnvHK9Rlg5ZZyrEzDdNXIsAQ5riGs4z89jc0TmOuD8mCUWiYPDiM+Jt/eXuYrGoLeq1nCWmY1mWabVMqRNxknzXO9+qyxCFNM7X5x6iOSUYpeQZKVDnIKZ5pHXTJGdETLN3TNumbSnTBiyxgW2XftfNVwcluk9a2gHJODL4FNmVsRHEwIBi0G5GYVv//rkKru9eM0R5nLOM752/BgnoHNJ8BpHBq8gqdJ+3eCBdnWPAfkhxWnAyhwvVJjOEgWtXDGKyHBIumy/iWll+bcnlj1RdBvgrZTk2t7FK6OaB7AQkAS5+p2bb9VpbuUVpAR1+12t1sYduTueD3tEo7rXG8YQ2UDNK2iWEbeU1qE25X877zbrprZdL5MpLFuE8ua0PMAvvGvfmP+7Z0vJGl1MLUSb6Djw/mo3g7PxW3PSHpHs1cOxR01qduvml1S16J/eO9eSYg9bo8VsOq8z23JOEt+qTE+t5cnofD88u0V/d8VUwZlEQTs5+Fo+/nr07aP4gJxd3N/mPi9YsgPtxeB/Q87/Pf0KxeETJZPbNXfH7Abu9uGHXd3enT+mML9qvMW3HsCusKGFcTP4FLKqjao8w0AayXkh8TC9KQiIjLlX9meIoLoAKvaNuKWrxC0lAJPJlMddnWZ5+PagP+i3H6tndZt9yLXtgdS2v1Wp4Xr/ioDWKPYi9nMZE+VIsu+6fjwHizOdAI2DGPC/wFLj+gcUACaSFdCQfR045XOeSxe1FOp08ZyucuMnczjLvKXKWWd3DC127yMUlvWTdWADb5e7GDnePAJMZAUXwqsO5bHEuZDKe0LwQqV2boxqFQo4AplhY3mt6JifZLAUF1czyqEihNpvOytSYfP3vGAjzUjrqX5cv793A9r9VOZA6EVEKXMVyArKOcGAI2VUgbwL2Dg6ryny3iIh6YDKhghG8RrL76bVPVINsmiQYyndQgd7ofuHuQ2/8YP+mgeEfOB/+qXNZy7c3zQ/yae6XcuMompMtt9UiIGebZL5O1YhPqPZUK+bzomy9hmJ1Js2bktxtcwy4kNS8us4fgZobE+anJuMG9Z7njXwXXyGmdCyQgEw+FK08fmItGgNXa1Eon/jyszvXjkuZNwFLcUjWS+X2pBB/uGBhHys9Kb6Sf4ucRa/lOmBry4+MU+5CgtBEndQMXL3TFDiXZokk7ZxtGz9k4JDzXeEmyRssQnbTpBDw/hdNsXFbRxjnBRVhoJeC7QlR4hSrGfivSm/MlFPoZa1Y8nfXip/nw7Hk6gzpG13y/8oGKdsFg662lxJLW1/KLVk6p8nWRHoB+HYoNQJ7EFito97eUDpqbhK4E0nnjfitZCun+++h8x8=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6E3D7D1FD096C8E0401F0A05997568</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6E3D3FE920C1A8E0401F0A0599755E</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:FC6E3D7D1FD096C8E0401F0A05997568/User/urn:dece:userid:org:dece:FC6E3D3FE920C1A8E0401F0A0599755E/Policy/urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:FC6E3D3FE920C1A8E0401F0A0599755E</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:FC6E3D3FE920C1A8E0401F0A0599755E</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:US:MPAA:G</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - General Policy Establishment</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResourceXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77323</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6E3D7D1FD096C8E0401F0A05997568</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6E3D3FE920C1A8E0401F0A0599755E</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for ParentalControlBlockUnratedContent" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="5b0078c5-515d-4bc1-affb-ee0e84c3c8ad"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ad35817e-09d2-4980-b826-f10448296361"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("returnXMLResult",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="ada93987-4f24-4c2e-9a39-4ec473a48477"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

tC.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (tC.getPropertyValue("returnXMLResult") == null || tC.getPropertyValue("returnXMLResult") == "") {
		tC.setPropertyValue("returnXMLResult","false");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="9a86e548-f496-4c97-89cb-6671a13bf681"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet" id="34a78c6e-2613-4181-b92c-90aeb389e12e"><con:settings/><con:config service="Coordinator APIs" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet" mediaType="application/xml" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnParentalControlBlockUnratedContent}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="00a459e5-84ee-4aea-94e6-c1bffc952c2a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="cb050320-d7a6-4f07-ae3e-b40cac665236"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def XMLbody = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema")

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	try {
		myXML = new XmlSlurper().parseText(XMLbody);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
		log.info "xmlPolicyClass[$xmlPolicyClass]";
		log.info "tcPolicyClass[tcPolicyClass]";
	}
}

if (httpStatus == "HTTP/1.1 200 OK") {
	def myXML1 = new XmlSlurper().parseText(XMLbody);
	def PolicyIDFull = myXML1.Policy.@PolicyID.text().toString();
	int lastColon = PolicyIDFull.lastIndexOf(':');
	PolicyID     = PolicyIDFull.substring(lastColon + 1);
	log.info"=========="+PolicyID
	policyWasFound = "true";
	tC.setPropertyValue("PolicyID",PolicyID);
	
} else if ( httpStatus == "HTTP/1.1 404 Not Found") {
	policyWasFound = "false";
	//tC.setPropertyValue("policyExists", policyWasFound);
} else {
	log.info "ERROR!";
	assert 1 == 2;
}




tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="bb1d319b-f985-4d00-9f22-7c20668866d3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));


if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZhc9o8DP4rXPZxF5KQQEKucMcI3digY4F2e/myc20BbhMHYoem/PrZATKgtC/bvsBZkaVH0mNJVxzFUc3vcA6poAmr5HHEuF9IW1qWMj9BnHKfoRi4L7A/7gwHfq1q+mh/Rav0g5b2s+bVPK8xc/VZE2zdcdC9fn8vfxxwZw0bPNtxkVTlPIM+4wIx0dJqplXXTUe36hPL9C3Xd8yq6zamWuUOUi5tS5Wqqe1A5bylLYRY+obx9PRUfbKrSTo3aqZpGT+GgzFeQIy09tU2osJR2t7p4yoBDFGEqziJjSvjSOeKcH9M5wyJLIWdL/KaL9Mwm4bUIZzO32nlXSB9NkuKYxexhFGMIrpBKj9DEIuEVDrRPEmpWMSvBmGZyrAOOdax5bB3mnEM7UJDRwhTjnS+QNbOVggzSIFhqNyG/Zb27rKqFVcnKWJ8lqQxPz7+GR5ga4iSJRCd78PaQbvc4JlMta8A+32Go4zTNdwosi4RBr6rJuDLTVVGKcxoPqBcEjTnCp1xCO/kuM1GQOfAxd8U6KA4WyN3KMqg/XEUrmfpp/r7xreG7dluNl51N19gdI2eWgWAQ+VCUJZ2ezwhZUmi7Q08cGbTJFxBMlgj4tTj0Jxzu4c3wV04wpPGXcf4Dr27sLaZ9qaebVx/Zt5NHtu9leM1yJegGd7mbv6t/4DyD/ak3qX92wl+MMWDOWnesvgWvc+fG6knyEB8GBj3g8cfq2D1idzNP06Ho8A0rs3h9Db7HNqk35h+D2ve4Nly2aQpugQvh//l4TCuZ7UFIeawVYZzgP9Ytn/z4+z+AbDYHxUN+kHlWlYJibebmZJQos8KVX+pmg8XwITWVrdU7/Az2e4o8WUNt2fL7lpNsx6Y3Yblel7QM+u2WW82rWuzU/e69r7JbFGcQOwmbEaVL9Vyt7R5GyCOfQ6MQKqvk0x2Oq69YTFAAlX6LJSPIGEcJolszxnN3LkbEe/xATb5Btkb4jXEo9AqN4n4yr6mnZmA9Lgl20ctOQRMlxRU31a05pLXXMhUrNA6E5FVXaMqg0x29lQ1Wb/meHWD03gZgQJqxAnJIqguF8siMQbf/td0hHkhDXuT4rG9Gtbpt30GpA6hSoGrWD6ArCKcmS32PpAXATfOzqC9+U5GqHpXMp0ipXiL5PjTb5YoepQUCQad8WgPutT9g7s/u+Of1l8aGPyD88G/Ope1fHnTeCOfxmkpS0dkTQ/c7pcOOb5kw2vvibhCVnVVzdbrrOCe49hGKs0bsr9bxhhwJvvx8yR5BGaUJoyLhl+J+sRzKT/Gl4kFGwskIJYPpVIcL9h2xsDVttOXDzy/dJU6cinzJiAX52TdSG5qCvGbyxz2sdKT4pH8e0pS8rtcZ2wd+JFxymVHUDZXJzX4nl8hBU6kWSpbdpIeGj9n4JzzY2GZ5BKLkGy6zwS8/qWienFLQxgnGRP9QCsEh/OhwCmel+D/VnphphhB5U5K/38p1WlBAQxyk+W0sK9WC1/xn80PZszO6emYcXpO03R7jhk4tcMxY3uBVyblCF37hfil5CBPpxxv/wI=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:13C14E4907E40D42E05305991F0A38D8</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:13C1905D0C61788DE05305991F0A58C3</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:13C14E4907E40D42E05305991F0A38D8/User/urn:dece:userid:org:dece:13C1905D0C61788DE05305991F0A58C3/Policy/urn:dece:type:policy:ParentalControl:BlockUnratedContent</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/1/11/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77321</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6EA84B2B661E3EE0401F0A05996419</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>13C14E4907E40D42E05305991F0A38D8</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>13C1905D0C61788DE05305991F0A58C3</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for ParentalControlBlockUnratedContent" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="f1c31fa9-73c8-4821-81d4-f37421f5f31f"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9756699d-1378-4698-82cc-c21467fe6ec9"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="e10d0cf1-39e8-43b6-a7ba-2e444fdc8fe7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("PolicyID",callTC.getPropertyValue("PolicyID"));

tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="ded27bc4-3b10-4f6b-b8db-bf24b9511e7d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete" id="f0bb24c9-f8f9-463e-b1a1-18fc157bef06"><con:settings/><con:config service="Policies" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="LLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicyID}${#TestCase#PolicyID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="7ebfcc4d-5afe-4c87-a351-47cc39f408a1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="77076462-b82f-470f-a851-2ac167c847db"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="6293ff71-4898-43e9-9ae5-7246cd0fce4f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVZZc+I4EH6fX+HyPG4ZH9gBXIEqgmHHCTkWckzmJSXkttHGlokkc+TXr2RiAoRkk5kqqii1W91fH/q6jznKUsfvcg5MkJxqYdDWHxpHll13sWt4br1huBPHNZpWHBsQ4UkjttzIcixdCzkvIKRcICraumPZrmEdGY5zbbu+o361I7fxS9dugXFpWqrU5K1lllLul27besGonyNOuE9RBtwX2B93z4e+1PRRhUnvHK9Rlg5ZZyrEzDdNXIsAQ5riGs4z89jc0TmOuD8mCUWiYPDiM+Jt/eXuYrGoLeq1nCWmY1mWabVMqRNxknzXO9+qyxCFNM7X5x6iOSUYpeQZKVDnIKZ5pHXTJGdETLN3TNumbSnTBiyxgW2XftfNVwcluk9a2gHJODL4FNmVsRHEwIBi0G5GYVv//rkKru9eM0R5nLOM752/BgnoHNJ8BpHBq8gqdJ+3eCBdnWPAfkhxWnAyhwvVJjOEgWtXDGKyHBIumy/iWll+bcnlj1RdBvgrZTk2t7FK6OaB7AQkAS5+p2bb9VpbuUVpAR1+12t1sYduTueD3tEo7rXG8YQ2UDNK2iWEbeU1qE25X877zbrprZdL5MpLFuE8ua0PMAvvGvfmP+7Z0vJGl1MLUSb6Djw/mo3g7PxW3PSHpHs1cOxR01qduvml1S16J/eO9eSYg9bo8VsOq8z23JOEt+qTE+t5cnofD88u0V/d8VUwZlEQTs5+Fo+/nr07aP4gJxd3N/mPi9YsgPtxeB/Q87/Pf0KxeETJZPbNXfH7Abu9uGHXd3enT+mML9qvMW3HsCusKGFcTP4FLKqjao8w0AayXkh8TC9KQiIjLlX9meIoLoAKvaNuKWrxC0lAJPJlMddnWZ5+PagP+i3H6tndZt9yLXtgdS2v1Wp4Xr/ioDWKPYi9nMZE+VIsu+6fjwHizOdAI2DGPC/wFLj+gcUACaSFdCQfR045XOeSxe1FOp08ZyucuMnczjLvKXKWWd3DC127yMUlvWTdWADb5e7GDnePAJMZAUXwqsO5bHEuZDKe0LwQqV2boxqFQo4AplhY3mt6JifZLAUF1czyqEihNpvOytSYfP3vGAjzUjrqX5cv793A9r9VOZA6EVEKXMVyArKOcGAI2VUgbwL2Dg6ryny3iIh6YDKhghG8RrL76bVPVINsmiQYyndQgd7ofuHuQ2/8YP+mgeEfOB/+qXNZy7c3zQ/yae6XcuMompMtt9UiIGebZL5O1YhPqPZUK+bzomy9hmJ1Js2bktxtcwy4kNS8us4fgZobE+anJuMG9Z7njXwXXyGmdCyQgEw+FK08fmItGgNXa1Eon/jyszvXjkuZNwFLcUjWS+X2pBB/uGBhHys9Kb6Sf4ucRa/lOmBry4+MU+5CgtBEndQMXL3TFDiXZokk7ZxtGz9k4JDzXeEmyRssQnbTpBDw/hdNsXFbRxjnBRVhoJeC7QlR4hSrGfivSm/MlFPoZa1Y8nfXip/nw7Hk6gzpG13y/8oGKdsFg662lxJLW1/KLVk6p8nWRHoB+HYoNQJ7EFito97eUDpqbhK4E0nnjfitZCun+++h8x8=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6E3D7D1FD096C8E0401F0A05997568</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6E3D3FE920C1A8E0401F0A0599755E</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77325</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6EA84B2B661E3EE0401F0A05996419</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE68F7AD0B700B174E0401F0A0799424D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6E3D7D1FD096C8E0401F0A05997568</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6E3D3FE920C1A8E0401F0A0599755E</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for ParentalControlAllowAdult" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="3cd6e4af-217d-45eb-9148-b10084bc9874"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="3c74cc63-6ef4-49c8-94ac-fcfa4ad13cd6"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="261f8271-4e33-436a-a7c3-50e7642e9d29"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="fd2835ea-88ee-4c65-a1eb-23c8ce82c497"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate" id="2496d737-6315-4932-8f7b-7a36bd1831b4"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>  
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnParentalControlAllowAdult}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="d4760247-3a31-44c4-a704-77b095d4ed21"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="7cd94ce8-2b7c-4d71-8323-b09c8d1663df"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZZc+I4EH6fX+HyPG4ZH9gBXIEqgmHHCTkWckzmJSXkttHGlokkc+TXr2RiAoRkk5kqqii1W91fH/q6jznKUsfvcg5MkJxqYdDWHxpHll13sWt4br1huBPHNZpWHBsQ4UkjttzIcixdCzkvIKRcICraumPZrmEdGY5zbbu+o361I7fxS9dugXFpWqrU5K1lllLul27besGonyNOuE9RBtwX2B93z4e+1PRRhUnvHK9Rlg5ZZyrEzDdNXIsAQ5riGs4z89jc0TmOuD8mCUWiYPDiM+Jt/eXuYrGoLeq1nCWmY1mWabVMqRNxknzXO9+qyxCFNM7X5x6iOSUYpeQZKVDnIKZ5pHXTJGdETLN3TNumbSnTBiyxgW2XftfNVwcluk9a2gHJODL4FNmVsRHEwIBi0G5GYVv//rkKru9eM0R5nLOM752/BgnoHNJ8BpHBq8gqdJ+3eCBdnWPAfkhxWnAyhwvVJjOEgWtXDGKyHBIumy/iWll+bcnlj1RdBvgrZTk2t7FK6OaB7AQkAS5+p2bb9VpbuUVpAR1+12t1sYduTueD3tEo7rXG8YQ2UDNK2iWEbeU1qE25X877zbrprZdL5MpLFuE8ua0PMAvvGvfmP+7Z0vJGl1MLUSb6Djw/mo3g7PxW3PSHpHs1cOxR01qduvml1S16J/eO9eSYg9bo8VsOq8z23JOEt+qTE+t5cnofD88u0V/d8VUwZlEQTs5+Fo+/nr07aP4gJxd3N/mPi9YsgPtxeB/Q87/Pf0KxeETJZPbNXfH7Abu9uGHXd3enT+mML9qvMW3HsCusKGFcTP4FLKqjao8w0AayXkh8TC9KQiIjLlX9meIoLoAKvaNuKWrxC0lAJPJlMddnWZ5+PagP+i3H6tndZt9yLXtgdS2v1Wp4Xr/ioDWKPYi9nMZE+VIsu+6fjwHizOdAI2DGPC/wFLj+gcUACaSFdCQfR045XOeSxe1FOp08ZyucuMnczjLvKXKWWd3DC127yMUlvWTdWADb5e7GDnePAJMZAUXwqsO5bHEuZDKe0LwQqV2boxqFQo4AplhY3mt6JifZLAUF1czyqEihNpvOytSYfP3vGAjzUjrqX5cv793A9r9VOZA6EVEKXMVyArKOcGAI2VUgbwL2Dg6ryny3iIh6YDKhghG8RrL76bVPVINsmiQYyndQgd7ofuHuQ2/8YP+mgeEfOB/+qXNZy7c3zQ/yae6XcuMompMtt9UiIGebZL5O1YhPqPZUK+bzomy9hmJ1Js2bktxtcwy4kNS8us4fgZobE+anJuMG9Z7njXwXXyGmdCyQgEw+FK08fmItGgNXa1Eon/jyszvXjkuZNwFLcUjWS+X2pBB/uGBhHys9Kb6Sf4ucRa/lOmBry4+MU+5CgtBEndQMXL3TFDiXZokk7ZxtGz9k4JDzXeEmyRssQnbTpBDw/hdNsXFbRxjnBRVhoJeC7QlR4hSrGfivSm/MlFPoZa1Y8nfXip/nw7Hk6gzpG13y/8oGKdsFg662lxJLW1/KLVk6p8nWRHoB+HYoNQJ7EFito97eUDpqbhK4E0nnjfitZCun+++h8x8=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6E3D7D1FD096C8E0401F0A05997568</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6E3D3FE920C1A8E0401F0A0599755E</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:FC6E3D7D1FD096C8E0401F0A05997568/User/urn:dece:userid:org:dece:FC6E3D3FE920C1A8E0401F0A0599755E/Policy/urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:FC6E3D3FE920C1A8E0401F0A0599755E</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:userid:org:dece:FC6E3D3FE920C1A8E0401F0A0599755E</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Allow Adult Policy Establishment</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResourceXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77323</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6E3D7D1FD096C8E0401F0A05997568</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6E3D3FE920C1A8E0401F0A0599755E</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for ParentalControlAllowAdult" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="ca4f431c-01ab-4054-a5e5-e43f0c92ea58"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1bfeb590-de28-4861-a571-167b1e7ea2bf"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("returnXMLResult",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="46acb471-4b11-49dd-9855-caa2af365cba"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

tC.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (tC.getPropertyValue("returnXMLResult") == null || tC.getPropertyValue("returnXMLResult") == "") {
		tC.setPropertyValue("returnXMLResult","false");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="d982e29e-352c-426e-b0ab-425a95c75303"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet" id="06868568-8c23-4247-9acc-e824af983785"><con:settings/><con:config service="Coordinator APIs" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet" mediaType="application/xml" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnParentalControlAllowAdult}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="37863a3d-4a8d-470d-ad8b-e0eb409e207a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="24db9f37-0c17-4703-9f84-862d66d4138b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def XMLbody = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema")

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	try {
		myXML = new XmlSlurper().parseText(XMLbody);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
		log.info "xmlPolicyClass[$xmlPolicyClass]";
		log.info "tcPolicyClass[tcPolicyClass]";
	}
}

if (httpStatus == "HTTP/1.1 200 OK") {
	def myXML1 = new XmlSlurper().parseText(XMLbody);
	def PolicyIDFull = myXML1.Policy.@PolicyID.text().toString();
	int lastColon = PolicyIDFull.lastIndexOf(':');
	PolicyID     = PolicyIDFull.substring(lastColon + 1);
	log.info"=========="+PolicyID
	policyWasFound = "true";
	tC.setPropertyValue("PolicyID",PolicyID);
	
} else if ( httpStatus == "HTTP/1.1 404 Not Found") {
	policyWasFound = "false";
	//tC.setPropertyValue("policyExists", policyWasFound);
} else {
	log.info "ERROR!";
	assert 1 == 2;
}




tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="f5f72be4-794d-42b9-a3f7-a2bfe34c80f0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));


if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Allow Adult Policy Establishment</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZZc+I4EH6fX+HyPG4ZH9gBXIEqgmHHCTkWckzmJSXkttHGlokkc+TXr2RiAoRkk5kqqii1W91fH/q6jznKUsfvcg5MkJxqYdDWHxpHll13sWt4br1huBPHNZpWHBsQ4UkjttzIcixdCzkvIKRcICraumPZrmEdGY5zbbu+o361I7fxS9dugXFpWqrU5K1lllLul27besGonyNOuE9RBtwX2B93z4e+1PRRhUnvHK9Rlg5ZZyrEzDdNXIsAQ5riGs4z89jc0TmOuD8mCUWiYPDiM+Jt/eXuYrGoLeq1nCWmY1mWabVMqRNxknzXO9+qyxCFNM7X5x6iOSUYpeQZKVDnIKZ5pHXTJGdETLN3TNumbSnTBiyxgW2XftfNVwcluk9a2gHJODL4FNmVsRHEwIBi0G5GYVv//rkKru9eM0R5nLOM752/BgnoHNJ8BpHBq8gqdJ+3eCBdnWPAfkhxWnAyhwvVJjOEgWtXDGKyHBIumy/iWll+bcnlj1RdBvgrZTk2t7FK6OaB7AQkAS5+p2bb9VpbuUVpAR1+12t1sYduTueD3tEo7rXG8YQ2UDNK2iWEbeU1qE25X877zbrprZdL5MpLFuE8ua0PMAvvGvfmP+7Z0vJGl1MLUSb6Djw/mo3g7PxW3PSHpHs1cOxR01qduvml1S16J/eO9eSYg9bo8VsOq8z23JOEt+qTE+t5cnofD88u0V/d8VUwZlEQTs5+Fo+/nr07aP4gJxd3N/mPi9YsgPtxeB/Q87/Pf0KxeETJZPbNXfH7Abu9uGHXd3enT+mML9qvMW3HsCusKGFcTP4FLKqjao8w0AayXkh8TC9KQiIjLlX9meIoLoAKvaNuKWrxC0lAJPJlMddnWZ5+PagP+i3H6tndZt9yLXtgdS2v1Wp4Xr/ioDWKPYi9nMZE+VIsu+6fjwHizOdAI2DGPC/wFLj+gcUACaSFdCQfR045XOeSxe1FOp08ZyucuMnczjLvKXKWWd3DC127yMUlvWTdWADb5e7GDnePAJMZAUXwqsO5bHEuZDKe0LwQqV2boxqFQo4AplhY3mt6JifZLAUF1czyqEihNpvOytSYfP3vGAjzUjrqX5cv793A9r9VOZA6EVEKXMVyArKOcGAI2VUgbwL2Dg6ryny3iIh6YDKhghG8RrL76bVPVINsmiQYyndQgd7ofuHuQ2/8YP+mgeEfOB/+qXNZy7c3zQ/yae6XcuMompMtt9UiIGebZL5O1YhPqPZUK+bzomy9hmJ1Js2bktxtcwy4kNS8us4fgZobE+anJuMG9Z7njXwXXyGmdCyQgEw+FK08fmItGgNXa1Eon/jyszvXjkuZNwFLcUjWS+X2pBB/uGBhHys9Kb6Sf4ucRa/lOmBry4+MU+5CgtBEndQMXL3TFDiXZokk7ZxtGz9k4JDzXeEmyRssQnbTpBDw/hdNsXFbRxjnBRVhoJeC7QlR4hSrGfivSm/MlFPoZa1Y8nfXip/nw7Hk6gzpG13y/8oGKdsFg662lxJLW1/KLVk6p8nWRHoB+HYoNQJ7EFito97eUDpqbhK4E0nnjfitZCun+++h8x8=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6E3D7D1FD096C8E0401F0A05997568</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6E3D3FE920C1A8E0401F0A0599755E</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:8001/rest/1/11/Account/urn:dece:accountid:org:dece:FC6E3D7D1FD096C8E0401F0A05997568/User/urn:dece:userid:org:dece:FC6E3D3FE920C1A8E0401F0A0599755E/Policy/urn:dece:type:policy:ParentalControl:AllowAdult</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>816</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77321</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6EA82A43218DCFE0401F0A07995A9A</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6E3D7D1FD096C8E0401F0A05997568</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6E3D3FE920C1A8E0401F0A0599755E</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for ParentalControlAllowAdult" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="847927bd-80d1-49e1-b052-fe25c1af25c0"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="213a5dc1-26cf-4d6e-8428-fe5c471d706e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="e1b2b486-6a34-4604-a9cf-0120cd11152e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("PolicyID",callTC.getPropertyValue("PolicyID"));

tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="3033b0f7-8b86-4874-9e35-3e5e38f7914d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete" id="d0549d7b-fc06-4554-9c91-0cf1148b9c78"><con:settings/><con:config service="Policies" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="LLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicyID}${#TestCase#PolicyID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="95898e79-4786-4cad-b3c3-0da0359364bd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="4c76a0e4-4809-4512-9d24-0d928d0dbd93"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="54f71381-5b6a-4385-8679-8f669594825b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Remove Allow Adult Policy</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVZZc+I4EH6fX+HyPG4ZH9gBXIEqgmHHCTkWckzmJSXkttHGlokkc+TXr2RiAoRkk5kqqii1W91fH/q6jznKUsfvcg5MkJxqYdDWHxpHll13sWt4br1huBPHNZpWHBsQ4UkjttzIcixdCzkvIKRcICraumPZrmEdGY5zbbu+o361I7fxS9dugXFpWqrU5K1lllLul27besGonyNOuE9RBtwX2B93z4e+1PRRhUnvHK9Rlg5ZZyrEzDdNXIsAQ5riGs4z89jc0TmOuD8mCUWiYPDiM+Jt/eXuYrGoLeq1nCWmY1mWabVMqRNxknzXO9+qyxCFNM7X5x6iOSUYpeQZKVDnIKZ5pHXTJGdETLN3TNumbSnTBiyxgW2XftfNVwcluk9a2gHJODL4FNmVsRHEwIBi0G5GYVv//rkKru9eM0R5nLOM752/BgnoHNJ8BpHBq8gqdJ+3eCBdnWPAfkhxWnAyhwvVJjOEgWtXDGKyHBIumy/iWll+bcnlj1RdBvgrZTk2t7FK6OaB7AQkAS5+p2bb9VpbuUVpAR1+12t1sYduTueD3tEo7rXG8YQ2UDNK2iWEbeU1qE25X877zbrprZdL5MpLFuE8ua0PMAvvGvfmP+7Z0vJGl1MLUSb6Djw/mo3g7PxW3PSHpHs1cOxR01qduvml1S16J/eO9eSYg9bo8VsOq8z23JOEt+qTE+t5cnofD88u0V/d8VUwZlEQTs5+Fo+/nr07aP4gJxd3N/mPi9YsgPtxeB/Q87/Pf0KxeETJZPbNXfH7Abu9uGHXd3enT+mML9qvMW3HsCusKGFcTP4FLKqjao8w0AayXkh8TC9KQiIjLlX9meIoLoAKvaNuKWrxC0lAJPJlMddnWZ5+PagP+i3H6tndZt9yLXtgdS2v1Wp4Xr/ioDWKPYi9nMZE+VIsu+6fjwHizOdAI2DGPC/wFLj+gcUACaSFdCQfR045XOeSxe1FOp08ZyucuMnczjLvKXKWWd3DC127yMUlvWTdWADb5e7GDnePAJMZAUXwqsO5bHEuZDKe0LwQqV2boxqFQo4AplhY3mt6JifZLAUF1czyqEihNpvOytSYfP3vGAjzUjrqX5cv793A9r9VOZA6EVEKXMVyArKOcGAI2VUgbwL2Dg6ryny3iIh6YDKhghG8RrL76bVPVINsmiQYyndQgd7ofuHuQ2/8YP+mgeEfOB/+qXNZy7c3zQ/yae6XcuMompMtt9UiIGebZL5O1YhPqPZUK+bzomy9hmJ1Js2bktxtcwy4kNS8us4fgZobE+anJuMG9Z7njXwXXyGmdCyQgEw+FK08fmItGgNXa1Eon/jyszvXjkuZNwFLcUjWS+X2pBB/uGBhHys9Kb6Sf4ucRa/lOmBry4+MU+5CgtBEndQMXL3TFDiXZokk7ZxtGz9k4JDzXeEmyRssQnbTpBDw/hdNsXFbRxjnBRVhoJeC7QlR4hSrGfivSm/MlFPoZa1Y8nfXip/nw7Hk6gzpG13y/8oGKdsFg662lxJLW1/KLVk6p8nWRHoB+HYoNQJ7EFito97eUDpqbhK4E0nnjfitZCun+++h8x8=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6E3D7D1FD096C8E0401F0A05997568</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6E3D3FE920C1A8E0401F0A0599755E</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77325</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6EA82A43218DCFE0401F0A07995A9A</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE68F7AD0B700B174E0401F0A0799424D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6E3D7D1FD096C8E0401F0A05997568</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6E3D3FE920C1A8E0401F0A0599755E</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenGet Request" searchProperties="true" id="c2e679dd-57ff-472f-ad31-bd31bc60380a">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Get Properties" id="987c397e-da02-4a1f-a4ca-9ce320be5a2d">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

//log.info callTSuitename.getName();
//log.info callTCasename.getName();

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));
//testCase.setPropertyValue("nodeid","0701");
//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("assert"));
//headers.put("Authorization","SAML2 assertion=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");

testRunner.testCase.getTestStepByName("RightsTokenGet byTokenID").testRequest.setRequestHeaders(headers);


//SetUp test properties

testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("AccountID"));
//testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));
testCase.setPropertyValue("RightsTokenID",CallingTCase.getPropertyValue("RightsTokenID"));
//testCase.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
testCase.setPropertyValue("PolicyLockerViewAllConsent",CallingTCase.getPropertyValue("PolicyLockerViewAllConsent"));

	testCase.setPropertyValue("encodedAccountID",CallingTCase.getPropertyValue("AccountID"));
	testCase.setPropertyValue("encodedRightsTokenID",CallingTCase.getPropertyValue("RightsTokenID"));
	
//Testing RightTokenCreate Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTCReq","OK");
CallingTCase.setPropertyValue("FeedRTCReq",testCase.getPropertyValue("FeedRTCReq"));</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="pem set" id="48ef428b-0b1b-4326-8700-886f75580c5b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenGet byTokenID");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsTokenGet byTokenID" id="37d6f5a1-171e-4199-8e24-a02f4cd42951">
        <con:settings/>
        <con:config service="RightsTokenGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenGet[byTokenID]" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsTokenGet byTokenID" mediaType="application/xml" sslKeystore="RET_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=pVbZcuI6EP0VyvOYMl6wDXYFqsySCTNAEiDL8DIl5AYUbBksGUi+/koGHCDLZWaeXGq3Tp9e1N2XDEWh6fmMQcJJTAubKKTMy6RVJU2oFyNGmEdRBMzj2Bv43Y5nFnUP7a8ohXazqvwuVexy2Zm4KoyDiWqVx446LkOgWtbEMkwHlyZgCVXGUmhTxhHlVcXUDVvVLdVwhrrj2bqnO8WyWR4phQdImMAWKkVd2ZHasKoy43zhadp6vS6uS8U4mWqmrhvaU7czwDOIkFK73HqUGUpqO31cDABDGOIijiPtUjvSuQyYNyBTiniawM5W8JktXdNdTegEjEy/KfldCNp0EmfHBqIxJRiF5BXJ+HSBz+Kg4IfTOCF8Fn3qhKFLYBU2WMWGRb8p2jG1M4GOGCYMqWyGjB1WHyaQAMVQuO+3q8q387KWXR0miLJJnETs+PhnfICuIIwXwgLbu7Wjdj7gB5GqXQL22hSHKSMr6MliXSAMbJdNwOdDFW4TmJBNhzBRoBsm2WmH9E6O22g0yRQY/5sEHSRnC/KAwhRq09ns+QVazuvqdj4aNJLRKJmNoO1W6qyaEThUzgR5arfHk6LMi2h7IyotFxu32x1dXDXpfPOdOterl9WMT50Q8UYrCkcdXmFj58Kf3+j3Px978f335sP6/iXqB/aPQePH1V19TfThpPf0OA2c6zmYUV1v9QbzWLNvr5atcI1YeePeuUvH15e3Jfcu7j0OR4v7h0V4ffNreEF/9ulzuPbbd8/UvpmNu70fXfM6tZZj3jAvxq/Przeofv30y6/m7hzwP5bt3/wgHT8D5vujLIN2s3AlsoT4181MSkigTjJVbyGbD+NAuVKTt2Tv8FLR7kjgiRxuz0apadaNRtltmQ3bNayWbpd023WNK90vlXx732S2LE4oNmI6IdKWbLnbsvmaII48BjSARF3Fqeh0TPkCsYk4KrRpXzyCmDIYxqI9T3loGDbMEYGpgeNKmFbmY/q6REqhF/MbepP4Ew7JcU92j3pyHzBZEJCNW9Y1E4XNuIjFEq1SgV5coSKFVLT2RHZZz7QqtsZItAhBMtWiOEhDKC5miywyGtt+TRVhlkn7rWH22j716/TfPgRCJyBSgUlf6iDSCKfDxRK+7B1557Dz4RDaw/tpQOTDEvHkCcFbJse/3spE1kdeI82OP7jdk851/+Du78bgt/GXAJ1/MN75V+Mil+9val/EUztNZW4oWJEDs/utQ8wv0fFq+0JcIqO4LKarVZrVnmWVtETAa6LBG9oAcCoa8sswngPVcgjtrOmXsz6xnMuP+aV8RgcccYjEQylkxzPWnQEwue60xQvfnLtLHZkUceOw4R/JGqFY1STjL7c57GGpJ8S34rOOk+AtXR9gHdgRfopthxM6lSc5+V4+KQocC1gienacHIJ/BPCR8WNhHuScCxfVNE45fP6nIJtxVUEYxynl7aaSCQ4HRMaTvyzAe1N6B5PNoHwpJf+/laokKwEMYpVlJMOXu4Un659OD4bMzujpnHErpuk3mrbl193DOVPRS+U8KEfsau/E7yUHcTqt8dp/" xmlns="http://eviware.com/soapui/config"/></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
            <con:endpoint>${#Project#Query_HostName}</con:endpoint>
            <con:request/>
            
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="AccountID" value="${#TestCase#encodedAccountID}"/>
  <con:entry key="RightsTokenID" value="${#TestCase#encodedRightsTokenID}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsTokenGet.d" disabled="true" id="eaa4061e-09bc-455a-809c-c5c772f50f36">
        <con:settings/>
        <con:config service="RightsTokenGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenGet[byTokenID]" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsTokenGet.d" mediaType="application/xml" sslKeystore="0798_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=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" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>https://qa.d.uvvu.com:7001</con:endpoint>
            <con:request/>
            <con:assertion type="Schema Compliance" id="c5208353-bc0b-470a-82b0-07423a7e5e36">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="AccountID" value="${#TestCase#AccountID}"/>
              <con:entry key="RightsTokenID" value="${#TestCase#RightsTokenID}"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Copy of RightsTokenGet.d" disabled="true" id="44891ec5-81d5-4562-ac83-33362e76d1c2">
        <con:settings/>
        <con:config service="RightsTokenGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenGet[byTokenID]" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Copy of RightsTokenGet.d" mediaType="application/xml" sslKeystore="0798_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>https://qa.d.uvvu.com:7001</con:endpoint>
            <con:request/>
            <con:assertion type="Schema Compliance" id="a90fef60-121c-4a45-90a9-745101e80745">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>schfau1</con:username>
              <con:password>Password1</con:password>
              <con:domain>DECE</con:domain>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="AccountID" value="urn:dece:accountid:org:dece:B63430FA5E97FC0EE0401F0A0599303B"/>
              <con:entry key="RightsTokenID" value="${#TestCase#RightsTokenID}"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Copy of DevAuth RightsTokenGet.d" disabled="true" id="0205e5cf-c63e-4ff3-8512-f85fe12ece0a">
        <con:settings/>
        <con:config service="RightsTokenGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenGet[byTokenID]" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Copy of DevAuth RightsTokenGet.d" mediaType="application/xml" sslKeystore="0798_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=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" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>https://qa.d.uvvu.com:7001</con:endpoint>
            <con:request/>
            <con:assertion type="Schema Compliance" id="f1bc91db-d525-48b7-9255-110e098291d9">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username/>
              <con:password/>
              <con:domain/>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="AccountID" value="urn:dece:accountid:org:dece:A9101167132C21E1E0401F0A222259052A"/>
              <con:entry key="RightsTokenID" value="${#TestCase#RightsTokenID}"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsTokenGet byTokenID-CaseTesting" disabled="true" id="1b34c718-b218-4652-a367-a45ef80555ec">
        <con:settings/>
        <con:config service="RightsTokenGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenGet[byTokenID]" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsTokenGet byTokenID-CaseTesting" mediaType="application/xml" sslKeystore="0798_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=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" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#Provision_HostName}</con:endpoint>
            <con:request/>
            <con:assertion type="Schema Compliance" id="2125d221-e5c1-489c-a3fe-48e8b86f7956">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="AccountID" value="urn:dece:accountid:org:dece:a49f28bf260f2548e0401f0a0599026a"/>
              <con:entry key="RightsTokenID" value="urn:dece:rightstokenid:org:DEce:b6331cc03cfd1a3be0401f0a2222595915"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="BasicAuth-RightsTokenGet.d" disabled="true" id="50cc4c46-77f2-46ad-90c5-29581d119363">
        <con:settings/>
        <con:config service="RightsTokenGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenGet[byTokenID]" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="BasicAuth-RightsTokenGet.d" mediaType="application/xml" sslKeystore="0798_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>https://qa.d.uvvu.com:7001</con:endpoint>
            <con:request/>
            <con:assertion type="Schema Compliance" id="aa25319f-f138-442c-9440-2e32d3da9973">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>schfau1</con:username>
              <con:password>Password1</con:password>
              <con:domain>DECE</con:domain>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="AccountID" value="urn:dece:accountid:org:dece:B63430FA5E97FC0EE0401F0A0599303B"/>
              <con:entry key="RightsTokenID" value="${#TestCase#RightsTokenID}"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep><con:properties>
        
        
        
        
        <con:property><con:name>TSuiteName</con:name><con:value>Test Cases Containing APIs</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>RightsTokenDeleteRequest</con:value></con:property><con:property><con:name>RightsTokenID</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2A366C36B0FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>PolicyLockerViewAllConsent</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
      <con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>encodedRightsTokenID</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2A366C36B0FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>encodedAccountID</con:name><con:value>urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Extract RightsToken-Get Information" searchProperties="true" id="05c798c1-b2e9-4286-a826-1b0949ef5ade">
      <con:settings/>
      <con:testStep type="groovy" name="Extract RightsTokenGet Response" id="0b08d72d-9197-424e-ad06-cd438133f23f">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenGet Request").getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenGet Request").getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getContentAsString();
def RightsResTime = testRunner.testCase.testSuite.project.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenGet Request").getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def Resp_RightTokenObj = Val_RightsResXml.children().collect{ it[0].name()};
testCase.setPropertyValue("RTObjType", Resp_RightTokenObj[0]);
log.info Resp_RightTokenObj[0];

// Evaluate RightsToken Success &amp; Failure

if(RightsResHttpStatus[0] == "HTTP/1.1 200 OK")
{
log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
log.info "RightsObject Returned :"+ testCase.getPropertyValue("RTObjType");
}
else{
log.info " RightsToken Get failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
callingTCase.setPropertyValue("RTObjType",testCase.getPropertyValue("RTObjType"));
def expectedHeader=callingTCase.getPropertyValue("expectErrTypeRTGet");

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath 
def logFile = new File(projectPath +"\\" +testSuite.project.name +".xls")

if ((RightsResHeader.ETag.toString()=="null")||(RightsResHeader.ETag.toString()==''))
{
testProject.setPropertyValue("ETag","*");
}
else
{
log.info "ETag Value=="+RightsResHeader.ETag.value[0].toString();
testProject.setPropertyValue("ETag",RightsResHeader.ETag.value[0].toString() );
}


//logFile.append("${callingTCaseName}"+"\t" +RightsResHeader.ETag.toString() +"\t"+ "$expectedHeader" +"\t"+"${RightsResHttpStatus.toString()}"  +"\n");

</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountDoesNotHaveRightsTokenInURL">
      <Reason Language="en">The rights token was not found in the account.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037/RightsToken/urn:dece:rightstokenid:org:dece:13D2A366C36B0FEDE05305991F0AE9B7</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/1/11/error/en/ErrorList.html#AccountDoesNotHaveRightsTokenInURL</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>1463</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>RightsTokenDeleteRequest</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Test Cases Containing APIs</con:value>
        </con:property>
        <con:property>
          <con:name>RTObjType</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Error</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Test Configuration/Setup" disabled="true" id="9de6c846-c749-4670-8165-38ed0c8cb13c"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Authentication Contexts" searchProperties="true" id="32aa94a5-ac92-4229-a86c-315ead0c0dc2"><con:settings/><con:testStep type="groovy" name="Data Setup when Stream Count Greater then 12 for Stream Service ON" id="8d1bc5e8-43ae-4461-967c-7cc1f9ec7b9c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

int StreamCreateCount = Integer.parseInt(tP.getPropertyValue("StreamCreateCount"));

log.info "Stream Count from Proejct level......:" + StreamCreateCount;
log.info "Not required to create test data...."

def temp_username = callTC.getPropertyValue("username");

log.info "temp_username ... " + temp_username;

	if (temp_username == tP.getPropertyValue("UserName_FAU1"))
	{
		tC.setPropertyValue("UserName_Property","UserName_FAU1");
	}
	else if (temp_username == tP.getPropertyValue("UserName_FAU2"))
	{
		tC.setPropertyValue("UserName_Property","UserName_FAU2");
	}
	else if (temp_username == tP.getPropertyValue("UserName_SAU1"))
	{
		tC.setPropertyValue("UserName_Property","UserName_SAU1");
	}
	else if (temp_username == tP.getPropertyValue("UserName_SAU2"))
	{
		tC.setPropertyValue("UserName_Property","UserName_SAU2");
	}
	else if (temp_username == tP.getPropertyValue("UserName_BAU1"))
	{
		tC.setPropertyValue("UserName_Property","UserName_BAU1");
	}
	else if (temp_username == tP.getPropertyValue("UserName_BAU2"))
	{
		tC.setPropertyValue("UserName_Property","UserName_BAU2");
	}

log.info "UserName property from Test Case ... " + tP.getPropertyValue(tC.getPropertyValue("UserName_Property"));

//run E2E when Stream count reached to 12 in the Account

if(StreamCreateCount>=12)
{     

	StreamCreateCount = 0;

	//update StreamCreateCount to Zero at project level.
	tP.setPropertyValue("StreamCreateCount",StreamCreateCount.toString())
		 
	def myTS = tP.getTestSuiteByName("E_2_E");
	
	def runnerTS = myTS.run( null , false )
	
	assert runnerTS.status == Status.FINISHED;
}

//Setting the desired user from the testcase
tC.setPropertyValue("username",tP.getPropertyValue(tC.getPropertyValue("UserName_Property")));

log.info tC.getPropertyValue("username");

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Properties from calling test case" id="bf13351b-3e06-4058-95a3-754cdad51e2b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC;

tC.setPropertyValue("nodeid", null);
//tC.setPropertyValue("username", null);

try {
	callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

	tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
//	tC.setPropertyValue("username",callTC.getPropertyValue("username"));
}
catch(Throwable e) {
	log.info "ERROR during getTestCaseByName - $e";
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Authentication Context" id="ec432529-551f-48fa-8ece-896d4a0022cb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def dbAcct;

int lastColon;
def nodeID = tC.getPropertyValue("nodeid");
String userID = tC.getPropertyValue("username").toString();
String rturn = tP.getPropertyValue("urnRightsLocker").toString();
String useroid = "";
String acctoid = "";
String uuid = "";
String assertionAccountIdFULL = "";
String assertionUserIdFULL = "";
String assertion = "";
String rightslocker;

assert nodeID.length() > 0;
assert userID.length() > 0;

try {
	def a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	useroid = a.userGetUserOID(userID);
	acctoid = a.userGetAccountOIDbyUsername(userID);
} 
catch (Throwable e) {
	log.info "ERROR during dbUtils.dbUser - $e";
}
/*
*  Null calling test cases current Properties
*/
callTC.setPropertyValue("assert",null);
callTC.setPropertyValue("assertId",null);
callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionAccountIdFULL",null);
callTC.setPropertyValue("assertionAccountId",null);
callTC.setPropertyValue("assertionUserIdFULL",null);
callTC.setPropertyValue("assertionUserId",null);
callTC.setPropertyValue("accountoid",null);
callTC.setPropertyValue("useroid",null);
callTC.setPropertyValue("rightslockerFULL",null);
callTC.setPropertyValue("rightslocker",null);

/*
*  LP2 security contexts
*/

log.info "---- PROCESSING nodeID[$nodeID] userID[$userID]";

	switch (nodeID) {
		case tP.getPropertyValue("nodeoid10"):  // Retailer node
		case tP.getPropertyValue("nodeoid11"):	//LLASPCS node
		case tP.getPropertyValue("nodeoid12"):	//DLASP node
		case tP.getPropertyValue("nodeoid13"):	//DLASPCS node		
		if (userID == tP.getPropertyValue("UserName_FAU1").toString()) {
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLFAU1_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU1_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU1").toString()) {
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLSAU1_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU1_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU1").toString()) {
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLBAU1_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU1_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_FAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLFAU2_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU2_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLSAU2_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU2_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLBAU2_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU2_1").toString()
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;

          case tP.getPropertyValue("nodeoid30"):
          case tP.getPropertyValue("nodeoid31"): // Dynamic lasp and his/her customer service node		
		if (userID == tP.getPropertyValue("UserName_FAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLFAU1_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU1_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLSAU1_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU1_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLBAU1_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU1_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_FAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLFAU2_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU2_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLSAU2_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU2_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLBAU2_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU2_3").toString()
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;
          
          case tP.getPropertyValue("nodeoid20"):
          case tP.getPropertyValue("nodeoid21"): // Linked lasp and his/her customer service node		
		if (userID == tP.getPropertyValue("UserName_FAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLFAU1_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU1_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLSAU1_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU1_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLBAU1_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU1_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_FAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLFAU2_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU2_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLSAU2_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU2_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLBAU2_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU2_2").toString()
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;

		default:
			log.info "ERROR - NodeID supplied is not configured!";
			assert 1 == 2;
			break;
	}

log.info "---- PROCESSING COMPLETE";
/*
*  Get the account's rightslocker
*/
try {
	dbAcct = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbAccount - $e";
	assert 1 == 2;
}
finally {
	try {
		rightslocker = dbAcct.accountGetRightsLockerId(acctoid);

		log.info "rightslocker: $rightslocker";
	}
	catch(Throwable e) {
		log.info "ERROR - dbAcct.accountGetRightsLockerId - $e";
		assert 1 == 2;
	}
	finally {
		assert rightslocker.length() > 0;
	}
}
/*
*  If we are here then we lived.  Now we will populate all the other 
*  generic values everyone gets.
*/
callTC.setPropertyValue("accountoid",acctoid);
callTC.setPropertyValue("useroid",useroid)
callTC.setPropertyValue("assertId",uuid);
callTC.setPropertyValue("assertionUUID",uuid);
callTC.setPropertyValue("assertionAccountIdFULL",assertionAccountIdFULL);
callTC.setPropertyValue("assertionUserIdFULL",assertionUserIdFULL);
callTC.setPropertyValue("assert",assertion);
callTC.setPropertyValue("rightslocker",rightslocker);
callTC.setPropertyValue("rightslockerFULL", rturn + rightslocker);

if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
{
lastColon = assertionAccountIdFULL.lastIndexOf('%');
callTC.setPropertyValue("assertionAccountId",assertionAccountIdFULL.substring(lastColon + 3));
lastColon = assertionUserIdFULL.lastIndexOf('%');
callTC.setPropertyValue("assertionUserId",assertionUserIdFULL.substring(lastColon + 3));
}
else
{
lastColon = assertionAccountIdFULL.lastIndexOf(':');
callTC.setPropertyValue("assertionAccountId",assertionAccountIdFULL.substring(lastColon + 1));
lastColon = assertionUserIdFULL.lastIndexOf(':');
callTC.setPropertyValue("assertionUserId",assertionUserIdFULL.substring(lastColon + 1));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish other account/user related data" disabled="true" id="387f5c42-e377-499f-a96a-79bf45329848"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

String acctoid = tC.getPropertyValue("accountoid").toString();
String nodeID = tC.getPropertyValue("nodeid").toString();
String userID = tC.getPropertyValue("username").toString();
String rightslocker = "";
String useroid = "";
String accountoid = "";

assert acctoid.length() > 0;

/*
*  useroid
*/
try {
	def a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	useroid = a.userGetUserOID(userID);
	acctoid = a.userGetAccountOIDbyUsername(userID);
} 
catch (Throwable e) {
	log.info "ERROR during dbUtils.dbUser - $e";
}

try {
	def a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	rightslocker = a.accountGetRightsLockerId(acctoid);
} 
catch (Throwable e) {
	log.info "ERROR during dbUtils.dbUser - $e";
}
finally {
	callTC.setPropertyValue("rightslocker",null);
	callTC.setPropertyValue("rightslockerFULL",null);
	
	log.info "rightslocker[$rightslocker]";

	callTC.setPropertyValue("rightslocker",rightslocker);
	callTC.setPropertyValue("rightslockerFULL",tP.getPropertyValue("urnRightsLocker").toString() + rightslocker);
}
</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81166</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Cases Containing APIs</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>RightsTokenCreate</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_034019</con:value></con:property><con:property><con:name>UserName_Property</con:name><con:value>UserName_FAU1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8d1bc5e8-43ae-4461-967c-7cc1f9ec7b9c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Authorization Information Extraction via STS" searchProperties="true" id="ae21e503-93f7-4647-9978-f99057e924f1" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Properties" id="20d9a3ad-d4f8-4e94-adae-55fbf17cee63"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("expectErrTypeSTS",null);
tC.setPropertyValue("expectErrTypeSTSGet",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("nodeaccountid",null);
tC.setPropertyValue("nodeuserid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("userrowoid",null);
tC.setPropertyValue("accountrowoid",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properities" id="64b86003-5897-439b-be20-759805d52be6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
tC.setPropertyValue("expectErrTypeSTS",callTC.getPropertyValue("expectErrTypeSTS"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Establish whether login is necessary for node/user combo" id="8bea740b-5442-4e17-89a7-b3a0fbaf0169"><con:settings/><con:config><script>def tC    = testRunner.getTestCase();
def tS    = tC.getTestSuite();
def tP    = tS.getProject();
def today = new Date();

String node      = tC.getPropertyValue("nodeid");
String user      = tC.getPropertyValue("username");
String propAssertion  = node + "_" + user + "_assertion";
String propAssertUUID = node + "_" + user + "_assertUUID";
String propUser       = node + "_" + user;
String propAccountoid = node + "_" + user + "_accountoid";
String propUseroid    = node + "_" + user + "_accountoid";
String propassertionAccountId = node + "_" + user + "_assertionAccountId";
String propassertionAccountIdFULL = node + "_" + user + "_assertionAccountIdFULL";
String propassertionUserId = node + "_" + user + "_assertionUserId";
String propassertionUserIdFULL = node + "_" + user + "_assertionUserIdFULL";
String prop      = tC.getPropertyValue(propUser);
String asstuuid  = tC.getPropertyValue(propAssertUUID);
String assbinary = tC.getPropertyValue(propAssertion);
String assAccountId = tC.getPropertyValue(propAssertion);
String assUserId = tC.getPropertyValue(propassertionUserId);
String assAccountIdFULL = tC.getPropertyValue(propassertionAccountIdFULL);
String assUserIdFULL = tC.getPropertyValue(propassertionUserIdFULL);
String tday = String.format('%tY/%&lt;tm/%&lt;td',today);

this.log.info "Date[$tday] - prop[$prop] - asstuuid[$asstuuid] - assbinary[$assbinary]";
this.log.info "propAssertion[$propAssertion] - propAssertUUID[$propAssertUUID] - propUser[$propUser]";

if (prop == null) {
	tC.setPropertyValue("doSTS","true");
	tC.setPropertyValue(propUser,tday);
	tC.setPropertyValue(propAssertUUID,null);
	tC.setPropertyValue(propAssertion,null);
	tC.setPropertyValue(propAccountoid,null);
	tC.setPropertyValue(propUseroid,null);
	tC.setPropertyValue(propassertionAccountId,null);
	tC.setPropertyValue(propassertionUserId,null);
	tC.setPropertyValue(propassertionAccountIdFULL,null);
	tC.setPropertyValue(propassertionUserIdFULL,null);
	} else if (prop != tday) {
	tC.setPropertyValue("doSTS","true");
	tC.setPropertyValue(propUser,tday);
	tC.setPropertyValue(propAssertUUID,null);
	tC.setPropertyValue(propAssertion,null);
	tC.setPropertyValue(propAccountoid,null);
	tC.setPropertyValue(propUseroid,null);
	tC.setPropertyValue(propassertionAccountId,null);
	tC.setPropertyValue(propassertionUserId,null);
	tC.setPropertyValue(propassertionAccountIdFULL,null);
	tC.setPropertyValue(propassertionUserIdFULL,null);
	tC.setPropertyValue("nodeuserid",null);
} else {
	// Check the UUID property
	if (asstuuid == null || asstuuid == "") {
		log.info "assertionUUID is null/empty";
		tC.setPropertyValue("doSTS","true");
		tC.setPropertyValue(propAssertion,null);
		tC.setPropertyValue(propAssertUUID,null);
		tC.setPropertyValue(propAccountoid,null);
		tC.setPropertyValue(propUseroid,null);
		tC.setPropertyValue(propassertionAccountId,null);
		tC.setPropertyValue(propassertionUserId,null);
		tC.setPropertyValue(propassertionAccountIdFULL,null);
		tC.setPropertyValue(propassertionUserIdFULL,null);
	// Check the assertion binary property
	} else if (assbinary == null || assbinary == "") {
		tC.setPropertyValue("doSTS","true");
		tC.setPropertyValue(propAssertion,null);
		tC.setPropertyValue(propAssertUUID,null);
		tC.setPropertyValue(propAccountoid,null);
		tC.setPropertyValue(propUseroid,null);
		tC.setPropertyValue(propassertionAccountId,null);
		tC.setPropertyValue(propassertionUserId,null);
		tC.setPropertyValue(propassertionAccountIdFULL,null);
		tC.setPropertyValue(propassertionUserIdFULL,null);
	} else {
		int lastSlash = assUserIdFULL.lastIndexOf(':');
		
		tC.setPropertyValue("doSTS","false");
		tC.setPropertyValue("assertionUUID",asstuuid);
		tC.setPropertyValue("assert",assbinary);
		tC.setPropertyValue("accountoid",propAccountoid);
		tC.setPropertyValue("useroid", propUseroid);
		tC.setPropertyValue("assertionAccountId",assAccountId);
		tC.setPropertyValue("assertionUserId",assUserId);
		tC.setPropertyValue("assertionAccountIdFULL",assAccountIdFULL);
		tC.setPropertyValue("assertionUserIdFULL",assUserIdFULL);
		tC.setPropertyValue("nodeuserid",assUserIdFULL.substring(lastSlash + 1));
	}
}
log.info "doSTS is " + tC.getPropertyValue("doSTS");
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="598c836d-2882-41b1-ac19-9ec5e1947321"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String node = tC.getPropertyValue("nodeid");
String user = tC.getPropertyValue("username");
String propAssertion  = node + "_" + user + "_assertion";
String propAssertUUID = node + "_" + user + "_assertUUID";
String propUser = node + "_" + user;

log.info "propUser[$propUser] - propAssertion[$propAssertion] - propAssertUUID[$propAssertUUID]";

def doSTS = tC.getPropertyValue("doSTS");

if (doSTS == "true") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("STS API")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	if (runnerTC.status != Status.FINISHED) {
		tC.setPropertyValue(propUser,null);
		tC.setPropertyValue(propAssertUUID,null);
		tC.setPropertyValue(propAssertion,null);
	} 

	assert runnerTC.status == Status.FINISHED;
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS GET" id="8dbebe99-b3df-47dc-801a-dd797e53f1a6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def doSTS = tC.getPropertyValue("doSTS");

String node = tC.getPropertyValue("nodeid");
String user = tC.getPropertyValue("username");
String propassertionAccountId = node + "_" + user + "_assertionAccountId";
String propassertionAccountIdFULL = node + "_" + user + "_assertionAccountIdFULL";
String propassertionUserId = node + "_" + user + "_assertionUserId";
String propassertionUserIdFULL = node + "_" + user + "_assertionUserIdFULL";

if (doSTS == "true") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("STS GET API")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
	
	tC.setPropertyValue(propassertionAccountId,tC.getPropertyValue("assertionAccountId"));
	tC.setPropertyValue(propassertionAccountIdFULL,tC.getPropertyValue("assertionAccountIdFULL"));
	tC.setPropertyValue(propassertionUserId,tC.getPropertyValue("assertionUserId"));
	tC.setPropertyValue(propassertionUserIdFULL,tC.getPropertyValue("assertionUserIdFULL"));
} 


</script></con:config></con:testStep><con:testStep type="groovy" name="Store assertionUID for the node/user" id="ebb7ea1c-22ea-4896-98b8-33695fae2745"><con:settings/><con:config><script>def tC    = testRunner.getTestCase();
def tS    = tC.getTestSuite();
def tP    = tS.getProject();
def today = new Date();

String node = tC.getPropertyValue("nodeid");
String user = tC.getPropertyValue("username");
String prop = tC.getPropertyValue(node + "_" + user);
String asst = tC.getPropertyValue(node + "_" + user + "_assertUUID");
String tday = String.format('%tY/%&lt;tm/%&lt;td',today);

this.log.info "Date[$tday] - prop[$prop] - asst[$asst]";

if (prop == tday) {
	tC.setPropertyValue(node + "_" + user + "_assertUUID", tC.getPropertyValue("assertionUUID"));
	tC.setPropertyValue(node + "_" + user + "_assertion", tC.getPropertyValue("assert"));
} else {
	tC.setPropertyValue(node + "_" + user,null)
	tC.setPropertyValue(node + "_" + user + "_assertUUID",null);
	tC.setPropertyValue(node + "_" + user + "_assertion",null);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract OID level User/Account Information" id="6b07ef83-33c9-4c81-a87e-a2ec0797a365"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());


String nodeid = tC.getPropertyValue("nodeid").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String results = null;
String accountoid = null;
String useroid = null;
String nodeUser = null;
String nodeAccount = null;
String userRowId = null;
String acctRowId = null;
String sql = """select to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID, to_char(rawtohex(a.USER_OID)) USER_OID, 
to_char(rawtohex(b.NODE_USER_ID)) NODE_USER_ID, to_char(rawtohex(c.NODE_ACCOUNT_ID)) NODE_ACCOUNT_ID, 
to_char(rawtohex(b.ROW_OID)) ROW_OID, to_char(rawtohex(c.ROW_OID)) ROW_OID
from 
   ACCOUNT_USER a, NODE_USER b, NODE_ACCOUNT c
where 
   a.USERNAME = '$uname'
   AND
   a.USER_OID = b.USER_OID
   AND
   a.ACCOUNT_OID = c.ACCOUNT_OID
   AND
   b.NODE_OID = c.NODE_OID 
   AND 
   b.NODE_OID = '$nodeid'""";

results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;

try {
	def myXML = new XmlSlurper().parseText(results);

	accountoid = myXML.ResultSet.Row[0].ACCOUNT_OID.text();
	useroid = myXML.ResultSet.Row[0].USER_OID.text();
	nodeUser = myXML.ResultSet.Row[0].NODE_USER_ID.text();
	nodeAccount = myXML.ResultSet.Row[0].NODE_ACCOUNT_ID.text();
	userRowId = myXML.ResultSet.Row[0].ROW_OID[0].text();
	acctRowId = myXML.ResultSet.Row[0].ROW_OID[1].text();
}
catch(Throwable e) {
	log.info e; 
	assert 1 == 2;
}
finally {
	log.info "accountoid[$accountoid]";
	log.info "useroid[$useroid]";
	log.info "nodeUser[$nodeUser]";
	log.info "nodeAccount[$nodeAccount]";
	log.info "userRowId[$userRowId]";
	log.info "acctRowId[$acctRowId]";

	tC.setPropertyValue("accountoid", accountoid);
	tC.setPropertyValue("useroid", useroid);
	tC.setPropertyValue("userrowid", userRowId);
	tC.setPropertyValue("accountrowid", acctRowId);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract and Store the ACCOUNT.ACCOUNT_OID lockerId" id="a3f68e5c-edbb-430b-ba87-13965e3ad27b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String node = tC.getPropertyValue("nodeid");
String user = tC.getPropertyValue("username");
String propAccountoid = node + "_" + user + "_accountoid";
String propUseroid = node + "_" + user + "_useroid";

tC.setPropertyValue(propAccountoid,tC.getPropertyValue("accountoid"));
tC.setPropertyValue(propUseroid,tC.getPropertyValue("useroid"));

a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));

def x = a.accountGetRightsLockerId(tC.getPropertyValue("accountoid"));

this.log.info "x[$x]";

tC.setPropertyValue("rightslocker",tP.getPropertyValue("urnLocker") + x);


</script></con:config></con:testStep><con:testStep type="groovy" name="Setup base node-level information based on calling Node type" id="b3708838-c263-45d8-9fef-c6dfad05475f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def baseNodeType = tC.getPropertyValue("nodetype");

//
//  Establish project-defined properties at the test case
//  level
//
tC.setPropertyValue("cid",tP.getPropertyValue("cid"));
tC.setPropertyValue("alid",tP.getPropertyValue("alid"));
tC.setPropertyValue("deceorgid",tP.getPropertyValue("deceorgid"));

if (tP.getPropertyValue("targetPort") == "443") {
	tC.setPropertyValue("targetURL",tP.getPropertyValue("targetHost"));
	tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost"));
} else {
	tC.setPropertyValue("targetURL",tP.getPropertyValue("targetHost") + ":" + tP.getPropertyValue("targetPort"));
	tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost") + ":" + tP.getPropertyValue("targetPort"));
}
//
//  Establish the basic nodeaccountid, nodeuserid, etc.. by 
//  nodetype
tC.setPropertyValue("assert",tC.getPropertyValue("assert"));
tC.setPropertyValue("assertId",tC.getPropertyValue("assertId"));
tC.setPropertyValue("nodeaccountid",tC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("nodeuserid",tC.getPropertyValue("assertionUserId"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Promote variables to calling TestCase" id="61c35a89-a0c0-4274-a772-40570639a6d7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def toTCName = tC.getPropertyValue("tName");
def toTSName = tC.getPropertyValue("sName")

String usernodeConcat = tC.getPropertyValue("nodeid") + "_" + tC.getPropertyValue("username");
String usernodeUUIDConcat = tC.getPropertyValue("nodeid") + "_" + tC.getPropertyValue("username") +	"_assertUUID";

//
//  Transfer all the properites created in this test case
//  to the calling testcase.
//
if (toTCName != "" &amp;&amp; toTSName != "") {
	def toTC = testRunner.testCase.testSuite.project.getTestSuiteByName(toTSName).getTestCaseByName(toTCName);

	Map testCasePropertiesMap = tC.getProperties();
	Set testCasePropertiesKeySet = testCasePropertiesMap.keySet();
	Iterator iter = testCasePropertiesKeySet.iterator();
	
	while(iter.hasNext()){
		String testCasePropertyKey = (String)iter.next();

		switch (testCasePropertyKey) {
			case "assert":
			case "assertionAccountId":
			case "assertionAccountIdFULL":
			case "assertionUserId":
			case "assertionUserIdFULL":
			case "assertionUUID":
			case "cid":
			case "deceorgid":
			case "rightslocker":
			case "targetURL":
			case "useroid":
			case "accountoid":
			case "nodeaccountid":
			case "nodeuserid":
					toTC.setPropertyValue(testCasePropertyKey,tC.getPropertyValue(testCasePropertyKey));	
			break;
		}
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>0910_pjgorg1full1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>0910_pjgorg1full1_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0910_pjgorg1full1_assertionAccountId</con:name><con:value>9B65A97BC9DBEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>0910_pjgorg1full1_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>0910_pjgorg1full1_assertionUserId</con:name><con:value>9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>0910_pjgorg1full1_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>0910_pjgorg1full1_assertUUID</con:name><con:value>43a2ee03-3fe6-4b79-8b47-0a0096fc38d4</con:value></con:property><con:property><con:name>0910_pjgorg1full1_useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>0912_pjgOrg1Basic1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertionAccountId</con:name><con:value>9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertionUserId</con:name><con:value>9B630FEB48949993E0401F0A05995D5F</con:value></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B630FEB48949993E0401F0A05995D5F</con:value></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertUUID</con:name><con:value>672aaea0-a1d6-4d72-8722-dede46e212c0</con:value></con:property><con:property><con:name>0912_pjgOrg1Basic1_useroid</con:name><con:value>0604</con:value></con:property><con:property><con:name>0912_pjgorg1full1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>0912_pjgorg1full1_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0912_pjgorg1full1_assertionAccountId</con:name><con:value>9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>0912_pjgorg1full1_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>0912_pjgorg1full1_assertionUserId</con:name><con:value>9B4E7893991CB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>0912_pjgorg1full1_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B4E7893991CB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>0912_pjgorg1full1_assertUUID</con:name><con:value>fc976555-dca4-4e0b-bc03-89ef6a35cb2d</con:value></con:property><con:property><con:name>0912_pjgorg1full1_useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>0912_pjgOrg1Standard1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertionAccountId</con:name><con:value>9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertionUserId</con:name><con:value>9B6294BDB283209BE0401F0A07995359</con:value></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B6294BDB283209BE0401F0A07995359</con:value></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertUUID</con:name><con:value>dc4f7916-304b-4331-a232-b0e0166b2ae4</con:value></con:property><con:property><con:name>0912_pjgOrg1Standard1_useroid</con:name><con:value>0602</con:value></con:property><con:property><con:name>0914_pjgOrg1Basic1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertionAccountId</con:name><con:value>9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertionUserId</con:name><con:value>9B66525BB290015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B66525BB290015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertUUID</con:name><con:value>dacf14f1-39e1-4fd8-a13e-416b0ce396bf</con:value></con:property><con:property><con:name>0914_pjgOrg1Basic1_useroid</con:name><con:value>0604</con:value></con:property><con:property><con:name>0914_pjgorg1full1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertionAccountId</con:name><con:value>9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertionUserId</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>7a21532f-8ba0-481b-8a2a-7b62f6f82097</con:value></con:property><con:property><con:name>0914_pjgorg1full1_useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>0914_pjgorg1full2_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>0914_pjgorg1full2_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0914_pjgorg1full2_assertionAccountId</con:name><con:value>9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgorg1full2_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgorg1full2_assertionUserId</con:name><con:value>9C687F959B4B13ABE0401F0A059957EB</con:value></con:property><con:property><con:name>0914_pjgorg1full2_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9C687F959B4B13ABE0401F0A059957EB</con:value></con:property><con:property><con:name>0914_pjgorg1full2_assertUUID</con:name><con:value>335a05a4-2979-4f2a-9887-b969e7358157</con:value></con:property><con:property><con:name>0914_pjgorg1full2_useroid</con:name><con:value>1600</con:value></con:property><con:property><con:name>0914_pjgOrg1Standard1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertionAccountId</con:name><con:value>9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertionUserId</con:name><con:value>9B65694912BBFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B65694912BBFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertUUID</con:name><con:value>22a732f2-b6f0-4225-9fde-c19e021aa0a6</con:value></con:property><con:property><con:name>0914_pjgOrg1Standard1_useroid</con:name><con:value>0602</con:value></con:property><con:property><con:name>1914_pjgorg1full1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>1914_pjgorg1full1_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>1914_pjgorg1full1_assertionAccountId</con:name><con:value>9B630FEB48529993E0401F0A05995D5F</con:value></con:property><con:property><con:name>1914_pjgorg1full1_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B630FEB48529993E0401F0A05995D5F</con:value></con:property><con:property><con:name>1914_pjgorg1full1_assertionUserId</con:name><con:value>9AAF3967D142A00FE0401F0A059925BE</con:value></con:property><con:property><con:name>1914_pjgorg1full1_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9AAF3967D142A00FE0401F0A059925BE</con:value></con:property><con:property><con:name>1914_pjgorg1full1_assertUUID</con:name><con:value>4356ff1f-e3a9-4826-950e-951734046b6e</con:value></con:property><con:property><con:name>1914_pjgorg1full1_useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>910_null_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>910_null_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>910_null_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>910_null_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>910_null_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9116_pjgOrg1Standard1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9116_pjgOrg1Standard1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9116_pjgOrg1Standard1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9116_pjgOrg1Standard1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9116_pjgOrg1Standard1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9116_pjgOrg1Standard1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9116_pjgOrg1Standard1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9116_pjgOrg1Standard1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B4E7893991BB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value>nVdZc6pME773V1ieSythUdwqSdWwiooKgtsdDiOgCMgi6K//BozG5OTknPe7SJlpenm6+6HpeYnNg0f3QByjKHEDvyrzr7Ut7LZbDMM8WdBsPjURuXnaQLLx1OmibctsMHBDW7WqHMcpkv04Mf3ktUaTFPWEdaimTlG9BtOjyedGt7OuVecoirFnrPJM1qr5wfPjXhn1tZZGfi8wYzfu+eYBxb0E9mZAGfWwZs+8Qaq9vVxBlgGjNydJwh5BwGcLQeR58BkGB+KF+KTzYsW9mWv7ZpJG6D2mFb/W3m2zLHvOGs9BZBM0SZIE2SWwjhW79q/aW+VmjCzZ3wbXM2f6ge9C03MvZgFKQYkTWFXg2UHkJs7hD64pgiIL108oh0+Qavq/asRHgBLdP3r6BDKKzafYMambMw1tUYR8iKqGJr/Wfv1TA6+memT68TaIDvGX839DhPwT8oIQWU/xLbEbuH/3+E213l4Q7Mk+9NLYPaFxwZLQhCiuTiO0dfORG2PuWXG17H41j28EQ/C/dOSFeMSJYRPfVIZ3bRQn/0+7Hlt19TI3vRS9tXiUn9NIGh1nQWbUV90lCQEjTbiV/FpCeFS+grp3+v38lad3Wr0bAW1nNIxj6qS7hT7It6PNoc6AcXs5nDl7lWnUhza/juudvu/PB7ks7CTdTU8XLbLIumqk5GhK9hsLlZH2Slhp8qo0suARxF6mqAESncU51QZ8KM/BnJyOKVoEKT+EIhlexsfBbDWZxVKLFOF0TjSWl5XUH1x8MFhv1tyxYiA0kI7gqEoO7dUbUb0uvH7k9JhDkdcQncski/+XDNnlzcS8H7hiUGzx25mgN0WW+fTCceA8s0Ems8DGfzswZu390dm7UjcjWaCqIuA51tsJIwXsJUAZAuso3Hyu5NwFDFh7PMeGegV4a1bRhIzPVvxcVftC5uiWND9vJC9dX4SxAuLSmHMUQRPmvKYLigKCqyxX+I2U75SZksnqiq9gB7yQhxdL6iZIyl1Iy4wyY+jVjEnXyzmWi+fRYXza6IKncIrEzY7STN40eFUYAG21gLSYYtvL6BAGlZXBPhgNQrQDSMxIHBNcFH2fKbpBj3nNLGX6Z5kiSwNFjTNOLbOSKkI2mBuXj1pwrMJZByEXdDC91gLqnDgm18tBbC4YX9FAxtul8VDIrMkNiKKSWYW71mokZJqgGWNR0eRMAKWMFzIv3tBjZyM5J9hQ84EOdo+N4VRhIfr4ua+d4Jk5VkxJBJvDnIINzYEu45rLILPXnYxXV4NhsJaxmzFQBZZVAQZEgiI1XH8WjNg5MwndLu2i0VYMDsiJKgoVDPenS0523MbEno4XDL/dt6eSO22YlkPIHqR3jT2QZWQNKUc1LW1FaLzvXlqTobFEbrS6JGNGpVpuh6loi9RY8oHXtvrLlTGs5yuo6pPpzFhML3k+Pu46Fy/pT9h+NBsovD0ZIzSNYZ0gTZHVOzzDrfo7zKetRiKmAmyFBUDa2bbgYgKz/d2VhH1NETB5gcJlErfgpBmQpLogs7yqbkWHmkJpnhrUWJEFy8NlOq+WmldZcyyPO0Wai3W4okVyrQOrdKY2BdFWDaY+WKK1Ovb0eQKycL71KYqUQrW/VTIbKgUDLDmbsfgtYiupDAxzEg7IfDhvkdRRtbzBrAuMRj6j9/nEsdfnvb3e46asHl6dlQ68uf7AMRlTbFFRdUFTQOf6vuWKbDQ0Dx7ycHOAOa/jnpXGgc4KmqiSRs7zYHiVxTqg83h1EXYKJ5T2FZArJqbFabN04pU/die6kGLSpg902W1o8q8cKyhW+cyxIwdU8JVjwpVjAtge63KHp2KmxYXxIrNZSTiq7flo0A1JdTnaV9i6SNiJ6zUnfifTh/UFdc7azk5dLLoy73B1f7tyGpuEJc0LVNFg35Zcbc/7raZ3VkaKyhgu4Z3JHTpm8agylilfaCQXkehGaZ09rN3D5dJo0sZhOktPsmEOY+rsbI6Lbrab9lsEEUln5tJen1RxGcDV9TvydUjehdcxSjwO2E8T+LZ6zdLNDsHkdiy+wzJfFfHH0Ux+XuMKiWs9bUvVXljsgnGC/KT2VlgVK1wvxYuea/Xwl/N67rJNod3pNrpdimMpjhHIJkmJJCCZbpemWuJt17ui+AKRC/ytW8Qqltnrx/pngPDQ2yAzQlHtB09Fnaqyr+HtI/BjpAd4m20wbYFuMmKLbjd5lmm2OrxA8RQDyE4T0N1adRwkE38SgW2CoocFmfm6IGsIuqGLii36fZeIE1yIo3lKE496PpnPPkrxmh0Vm26PbnaYsgCElR5CiB/g6RaFQZw8h05YLjN/TOPrs1vGWMdyC4W4AM0i3C30zUpP3RD/lhn97ep/cw9Syy12Fly+JHLhFcnnRx9sKGhwpwLZpegb5rvqv5lS35oSPyAivhbjHsk6uQ9xbxcTvGvjday8j8S4aUfz+ficnk5p2aY2SdJEhN0TFEESMwRTvC6e9WCPfOLugfiXRf2O+Uvcu/wzujRx/FmC3/IDZlS1PP79kvbJGhcgQXnynYzz8LWsCP7jzQ32YKGHxVP8kwXRRw7f+XqIgyEXE8r17eJUbNjnz+19fxN6MMBeXTykgujR93f238X+LLyX6w4lwazYpAn685NqMX1eayaEQeonMl8rBY8TscScnEPU+1D6zU254r7fWfL4j3eWpTKaQQcdzNpd1/278pNbNh4ibBW7JZbXWo5v3zi4bz9M4HeAfxjC4Kch/DmTt9/Ev0seavqV2W//Aw==</con:value></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>9B4E7893991CB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B4E7893991CB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>fc976555-dca4-4e0b-bc03-89ef6a35cb2d</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>nodetype</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B4E7893991CB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>null0900</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Cases Containing APIs</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tName</con:name><con:value>RightsTokenCreate</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>pjgorg1full1</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B4E7893991DB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/03/14</con:value></con:property><con:property><con:name>0912_pjgorg1full1</con:name><con:value>2011/03/14</con:value></con:property><con:property><con:name>0914_pjgOrg1Standard1</con:name><con:value>2011/03/13</con:value></con:property><con:property><con:name>0912_pjgOrg1Standard1</con:name><con:value>2011/03/13</con:value></con:property><con:property><con:name>0914_pjgOrg1Basic1</con:name><con:value>2011/03/13</con:value></con:property><con:property><con:name>0912_pjgOrg1Basic1</con:name><con:value>2011/03/13</con:value></con:property><con:property><con:name>0914_pjgorg1basic2</con:name><con:value>2011/03/13</con:value></con:property><con:property><con:name>0914_pjgorg1basic2_assertUUID</con:name><con:value>da82db4c-1b57-4df2-9fe8-f85459a6a872</con:value></con:property><con:property><con:name>0914_pjgorg1basic2_assertion</con:name><con:value>nVdZc6pME773V1iey1TCorhVkqphEVFRQXC7w2EEFAFZBPn134DRaJKzvN9FykzTy9PdD03Pa2QcXLoLogiFseN7VYl/q5lGmzY3DfhMbZjWc8Pc0s+dLWo/b9tMg+kYTaPdomtVKYoSJHlRbHjxW40mKeqZrD9TdY2iukyzS9ZfyEZrXavOURhhz1jlhaxVs4PrRd0y6lstCb2ub0RO1PWMA4q6MezOgDzqYs2ucYVUe3+9gCwDhu92HAddgoAvJoLIdeEL9A/EK/Gg82pG3ZljeUachOgjphm91T5s0zR9SesvfmgRNEmSBNkhsI4ZOdav2nvlaoxMydv6lzNneL7nQMN1cqMAJaPY9s0qcC0/dGL78BvXFEGRhetnlMFnSDW8XzXiM0CJ7h89PYAMI+M5sg3q6kxFWxQiD6KqrkpvtV//1MCLqRYaXrT1w0P05fzfECHvhFw/QOZzdE3sCu7fPf5QrfdXBLuSB90kck5oXLAkMCCKqtMQbZ1s5ESYe2ZULbtfzaIrwRD8Lx15Je5xYtjED5XhHQtF8f/TrvtWXbzMDTdB736wWgztVDxAmuOWgtRrhseTL7sj4L+VEO6VL6Bunf44f+XpjVYfRrPcViGr9wd9CdHTmYBUrzELslm+yLx1n9BjeZ/b45lm8N62l8VwwxhoNKDhMM+zcay1iSFh6uOTP/LjYSXUocjbLVUab3cqk5iSkHFeqFjG3DKCY35aOIM+YjRK307M5sjdw3nyNHIyZnNeI92zd2lsivPTodXYNqNK/zSNXFcd7+d10N9JBrDbb5853edQ5DVE5zLJ4v8lQ3Z4IzZuB64YFFv8dsboXZYkPsk5DpxnFkglFlj4bwfGrLU/2ntH7KQkCxSlB3iOdXfCSAZ7EVC6wNoyN5/LGZeDAWuN59hQqwB3zcqqkPLpip8rSl9IbQ2ncN6IbrLOhbEMotKYs2VBFea8qgmyDPyLLJP5jZjt5JmcSsqKr2AHvJAFuSl2YiRmDqQlRp4x9GrGJOvlHMt759FhfNpogitzssjNjuJM2tR5RRgAdbWAdC/BtvnoEPiVlc7eGQ0CtAOol5I4JshlbZ/Kmk6PedUoZdqjTJbEgaxEKaeUWYkVIR3M9fyzFhwrc+ZByAQNTC+1gBrXG5Pr5SAyFownqyDlrdJ4KKTm5ApEVsi0wl1qNRJSVVD1cU9WpVQApYwXUjfa0GN7I9onWFeygQZ2943hFGHR8/BzTz3BM3OsGGIPbA5zCtZVGzqMYyz91Fq3U15ZDYb+WsJuxkARWFYBGBAJitRw/VkwYufMJHA6tING255/QHZYkSl/uD/lGdl26hNrOl4w/HbfmorOtG6YNiG5kN7V90CSkDmkbMUw1RWh8p6TNydDfYmccJXHY0ahmk6bqaiLRF/yvtsy+8uVPnzKVlDRJtOZvpjmWTY+7tq5G/cnbD+cDWTemowRmkbwiSCNHqu1eYZb9XeYT1uVREwFWDILgLizLMHBBGb7uwsJ+6osYPICmUtFbsGJMyCKT4LE8oqy7dnUFIrzRKfGsiSYLi7TebVU3cqaY3ncKdJYrIMV3SPXGjBLZ0pD6FmKzjwNlmitjF1tHoM0mG89iiLFQOlv5dSCcsEAU0pnLH6L2EoiAd2YBAMyG86bJHVUTHcw6wC9ns3ofTaxrfV5b633uCmru1dnpQF3rt1xTMIUW1QUTVBl0L68b5ks6XXVhYcs2Bxgxmu4Z6Wxr7GC2lNIPeN5MLzIIg3QWbTKhZ3MCaV9BWSygWlx2iztaOWNnYkmJJi0yR1ddhua/CvHCopVHjl25IACvnJMuHBMANvjk9TmqYhpckG0SC1WFI5Kaz4adAJSWY72FfapR1ix4zYmXjvVhk8L6py27J2yWHQk3uaevO3Krm9iljRyqKDBviU66p73mg33LI9khdEdwj2TO3RMo1FlLFGeUI/zHtEJkyf2sHYOeV5v0PphOktOkm4MI+psb46LTrqb9psEEYpnJm+tT0pv6cPV5TvydUjehJcxStwP2IcJfF29Zslmh2B8PRbfYYmv9vDH0Yj/vMYVEsd83paq3aDYBaMYeXHtvbAqVrhughc9x+ziL+fl3OH4Hg+aHMm2Or064AWyQVI9EpBMp9MUgHDd9S4ovkDkfG/rFLGKZfbysf4zQHjobpARorD2B09FnaqSp+Ltw/cipPlvtTbbFFoMy2BIFCkIgCdpjmKpJqDrXAcIVK069uOJNwnBNkbh3YLc+Logqwg6gYOKLfpjl4hiXIijcUpil3o5GS8eSvCaHRabbpdutJmyAISZHAKIH+DpFgZ+FL8EdlAuM79N4+uza8ZYx3QKhagAzSLcLfRtpWe6zBXxt8zoH1f/q3uQmE6xs+DyxaEDL0geH32yoaDBjQpkh2pcMd9U/820Q1HN76bEHxARX4txi2SenLu414sJ3rXxOlbeRyLctKPxcnxJTqekbFOLJGkixO4JiiCJGYIJXhfPmr9HHnHzQPzLon7D/CXuTf6ILoltbxbjt/yAGVUtj3+/pD1Y4wLEKIt/knEuvpYVwf94c4NdWOhh8RT/pH5oftb9B193cTDkYkI5nlWcig37/NjejzehC33s1cFDyg/vff9k/1PsR+GtXDcoMWbFJonR759Ui+nzVjMg9BMvlvhaKbifiCXm+Byg7qfSNzflivtxZ8mi395ZlvJoBm10MGo3Xefvys9O2XiIsFXklFjeahm+fePgnnU3gT8APgxhttlkaIYFvSZDUgx7P4QbNAduBXzI5P2b+LvkrqZfmf3+Pw==</con:value></con:property><con:property><con:name>0914_pjgorg1basic2_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>0914_pjgorg1basic2_assertionAccountId</con:name><con:value>9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgorg1basic2_assertionUserId</con:name><con:value>9CDFDA6C0B79F3ADE0401F0A05996EAE</con:value></con:property><con:property><con:name>0914_pjgorg1basic2_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgorg1basic2_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9CDFDA6C0B79F3ADE0401F0A05996EAE</con:value></con:property><con:property><con:name>0914_pjgorg1basic2_useroid</con:name><con:value>1604</con:value></con:property><con:property><con:name>0912_pjgorg1basic2</con:name><con:value>2011/03/13</con:value></con:property><con:property><con:name>0912_pjgorg1basic2_assertUUID</con:name><con:value>2cdcc7b9-2025-439e-b55d-995e55b38d45</con:value></con:property><con:property><con:name>0912_pjgorg1basic2_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0912_pjgorg1basic2_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>0912_pjgorg1basic2_assertionAccountId</con:name><con:value>9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>0912_pjgorg1basic2_assertionUserId</con:name><con:value>9D1D45A45534E4E5E0401F0A059975E3</con:value></con:property><con:property><con:name>0912_pjgorg1basic2_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>0912_pjgorg1basic2_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9D1D45A45534E4E5E0401F0A059975E3</con:value></con:property><con:property><con:name>0912_pjgorg1basic2_useroid</con:name><con:value>1604</con:value></con:property><con:property><con:name>0910_pjgorg1full1</con:name><con:value>2011/03/13</con:value></con:property><con:property><con:name>0914_pjgorg1full2</con:name><con:value>2011/03/13</con:value></con:property><con:property><con:name>0910_pjgOrg1Standard1</con:name><con:value>2011/03/13</con:value></con:property><con:property><con:name>0910_pjgOrg1Standard1_assertUUID</con:name><con:value>6e70c902-e5e8-49cc-857f-14eda7025fab</con:value></con:property><con:property><con:name>0910_pjgOrg1Standard1_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0910_pjgOrg1Standard1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>0910_pjgOrg1Standard1_assertionAccountId</con:name><con:value>9B65A97BC9DBEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>0910_pjgOrg1Standard1_assertionUserId</con:name><con:value>9B7969EE9EA1770CE0401F0A079930AA</con:value></con:property><con:property><con:name>0910_pjgOrg1Standard1_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>0910_pjgOrg1Standard1_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B7969EE9EA1770CE0401F0A079930AA</con:value></con:property><con:property><con:name>0910_pjgOrg1Standard1_useroid</con:name><con:value>0602</con:value></con:property><con:property><con:name>0910_pjgorg1full2</con:name><con:value>2011/03/13</con:value></con:property><con:property><con:name>0910_pjgorg1full2_assertUUID</con:name><con:value>a53e480a-f98d-4754-8c8a-97599ea35418</con:value></con:property><con:property><con:name>0910_pjgorg1full2_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0910_pjgorg1full2_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>0910_pjgorg1full2_assertionAccountId</con:name><con:value>9B65A97BC9DBEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>0910_pjgorg1full2_assertionUserId</con:name><con:value>9DD0CB55ED027BCEE0401F0A07993B89</con:value></con:property><con:property><con:name>0910_pjgorg1full2_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>0910_pjgorg1full2_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9DD0CB55ED027BCEE0401F0A07993B89</con:value></con:property><con:property><con:name>0910_pjgorg1full2_useroid</con:name><con:value>1600</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verification of STREAM_DATA row" searchProperties="true" id="04cf3a40-a001-45ca-a16c-feaec4757dbd"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="126722ce-4118-47e5-a512-1e96c1e0b551"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("dbxmlresponse",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectTransactionid",null);
tC.setPropertyValue("expectNickname",null);
tC.setPropertyValue("expectJDBCSQL",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBCreateUser",null);
tC.setPropertyValue("expectDBDeleteUser",null);
tC.setPropertyValue("expectDBRenewedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectDBCreatedByNodeType",null);
tC.setPropertyValue("expectErrTypeStreamRenew",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="e1cdfeb0-d97d-4266-a8b7-b9e9b48660fd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("expectStatus",callTC.getPropertyValue("expectStreamStatus"));
tC.setPropertyValue("expectTransactionid",callTC.getPropertyValue("expectTransactionid"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("expectNickname"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
tC.setPropertyValue("expectDBCreateUser",callTC.getPropertyValue("expectDBCreateUser"));
tC.setPropertyValue("expectDBDeleteUser",callTC.getPropertyValue("expectDBDeleteUser"));
tC.setPropertyValue("expectDBRenewedBy",callTC.getPropertyValue("expectDBRenewedBy"));
tC.setPropertyValue("expectErrTypeStreamRenew",callTC.getPropertyValue("expectErrTypeStreamRenew"));

if (tC.getPropertyValue("expectDBStatus") == "" || tC.getPropertyValue("expectDBStatus") == null) {
		tC.setPropertyValue("expectDBStatus","deleted");
}
if (tC.getPropertyValue("expectDBCreatedByNodeType") == "" || tC.getPropertyValue("expectDBCreatedByNodeType") == null) {
		tC.setPropertyValue("expectDBCreatedByNodeType",tC.getPropertyValue("nodetype"));
}
if (tC.getPropertyValue("expectDBDeleteUser") == "" || tC.getPropertyValue("expectDBDeleteUser") == null) {
		tC.setPropertyValue("expectDBDeleteUser",tC.getPropertyValue("useroid"));
}
if (tC.getPropertyValue("expectDBCreateUser") == "" || tC.getPropertyValue("expectDBCreateUser") == null) {
		tC.setPropertyValue("expectDBCreateUser",tC.getPropertyValue("useroid"));
}
if (tC.getPropertyValue("expectDBRenewedBy") == "" || tC.getPropertyValue("expectDBRenewedBy") == null) {
		tC.setPropertyValue("expectDBRenewedBy",tC.getPropertyValue("nodeid"));
}
if (tC.getPropertyValue("expectErrTypeStreamRenew") == "" || tC.getPropertyValue("expectErrTypeStreamRenew") == null) {
		tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA row" id="8326f67b-375c-4116-b553-0d48d558cf8d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

String nodeid = tC.getPropertyValue("nodeid").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String sh = tC.getPropertyValue("streamhandle");
String results = null;
String accountoid = null;
String useroid = null;
String nodeUser = null;
String nodeAccount = null;
String userRowId = null;
String acctRowId = null;
String sql = """select 
to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
to_char(rawtohex(a.USER_OID)) USER_OID,
TRANSACTION_ID,
STATUS,
STREAM_CLIENT_NICKNAME,
EXPIRATION_DATE,
CLOSED_DATE,
CLOSED_BY_ORG_ID,
CREATED_DATE,
to_char(rawtohex(a.CREATED_BY)) CREATED_BY,
UPDATED_DATE,
to_char(rawtohex(a.UPDATED_BY)) UPDATED_BY 
from STREAM_DATA a where STREAM_HANDLE_OID = hextoraw('$sh')""";

results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;

try {
	def myXML = new XmlSlurper().parseText(results);
}
catch(Throwable e) {
	log.info e; 
	assert 1 == 2;
}
finally {
	tC.setPropertyValue("dbxmlresponse", results);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Assert difference between EXPIRATION_DATE and CREATED_DATE not greater 24 hours" id="b2bdd228-42e4-4f09-9c85-9120527dd61e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def streamhandle = tC.getPropertyValue("streamhandle");

a = new dbUtils.dbStreams(log);

assert a.streamHandleVerifyExpiration(streamhandle) &lt;= 24;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify DB Row Data" id="c74bfc5b-b184-4640-ae98-7e634ee16250"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode   = tP.getPropertyValue("urnNode");
def acct      = tC.getPropertyValue("nodeaccountid");

String XMLbody = tC.getPropertyValue("dbxmlresponse");
String expectStreamHandle = tC.getPropertyValue("streamhandle");
String expectAccountOID   = tC.getPropertyValue("accountoid");
String expectRightsToken  = tC.getPropertyValue("rightstokenid");
String expectUserOID      = tC.getPropertyValue("expectDBCreateUser");
String expectStatus       = tC.getPropertyValue("expectDBStatus");
String expectDBCreatedBy  = tC.getPropertyValue("expectDBCreatedBy");
String expectDBClosedBy = "null";
if (tC.getPropertyValue("expectDBDeletedBy").toString() != "") {
	expectDBClosedBy   = urnnode + tC.getPropertyValue("expectDBDeletedBy");
}

String streamCreateNodeType = tC.getPropertyValue("expectDBCreatedByNodeType");
String expectErrTypeStreamRenew = tC.getPropertyValue("expectErrTypeStreamRenew");
String expectDBUpdatedBy  = tC.getPropertyValue("expectDBRenewedBy");
String strcrtnodeid = "urn:dece:org:org:dece:"+tC.getPropertyValue("expectDBCreatedBy")
a = new dbUtils.dbNode(log);
String nodeoidcreate = a.nodeGetNodeId(strcrtnodeid);
tC.setPropertyValue("expectDBCreatedBy",nodeoidcreate);

String strdelnodeid = "urn:dece:org:org:dece:"+tC.getPropertyValue("expectDBDeletedBy")
b = new dbUtils.dbNode(log);
String nodeoiddelete = b.nodeGetNodeId(strdelnodeid);
tC.setPropertyValue("expectDBDeletedBy",nodeoiddelete);

expectDBCreatedBy    = tC.getPropertyValue("expectDBCreatedBy");
expectDBUpdatedBy    = tC.getPropertyValue("expectDBCreatedBy");
expectDBDeletedBy = tC.getPropertyValue("expectDBDeletedBy");
if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	// Verify sizes...
	assert myXML.ResultSet.Row.STREAM_HANDLE_OID	.size() == 1;
	assert myXML.ResultSet.Row.ACCOUNT_OID.size() == 1;
	assert myXML.ResultSet.Row.RIGHTS_TOKEN_OID.size() == 1;
	assert myXML.ResultSet.Row.STATUS.size() == 1;
	assert myXML.ResultSet.Row.CREATED_BY.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_BY_ORG_ID.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_DATE.size() == 1;
	assert myXML.ResultSet.Row.UPDATED_DATE.size() == 1;
	assert myXML.ResultSet.Row.UPDATED_BY.size() == 1;
	
	String dbStreamHandle = myXML.ResultSet.Row.STREAM_HANDLE_OID.text();
	String dbAccountOid   = myXML.ResultSet.Row.ACCOUNT_OID.text();
	String dbRightsToken  = myXML.ResultSet.Row.RIGHTS_TOKEN_OID.text();
	String dbUserOid      = myXML.ResultSet.Row.USER_OID.text();
	String dbStatus       = myXML.ResultSet.Row.STATUS.text();
	String dbCreatedBy    = myXML.ResultSet.Row.CREATED_BY.text();
	String dbClosedBy     = myXML.ResultSet.Row.CLOSED_BY_ORG_ID.text();
	String dbClosedDate   = myXML.ResultSet.Row.CLOSED_DATE.text();
	String dbUpdatedDate  = myXML.ResultSet.Row.UPDATED_DATE.text();
	String dbUpdatedBy    = myXML.ResultSet.Row.UPDATED_BY.text();
	
	//STREAM_HANDLE_OID
	this.log.info "dbStreamHandle [$dbStreamHandle] - expectStreamHandle[$expectStreamHandle]";
	assert expectStreamHandle.toUpperCase() == dbStreamHandle;

	//ACCOUNT_OID
	this.log.info "dbAccountOid [$dbAccountOid] - expectAccountOID[$expectAccountOID]";
	assert expectAccountOID == dbAccountOid;

	//RIGHTS_TOKEN_OID
	this.log.info "dbRightsToken [$dbRightsToken] - expectRightsToken[$expectRightsToken]";
	assert dbRightsToken == expectRightsToken;

	//USER_OID
	if (streamCreateNodeType == "llpcs" || streamCreateNodeType == "dlpcs") {
		expectUserOID = "null";
	} 
	this.log.info "dbUserOid [$dbUserOid] - expectUserOID[$expectUserOID] - streamCreateNodeType[$streamCreateNodeType]";
	assert dbUserOid == expectUserOID;
	
	//STATUS
	this.log.info "dbStatus [$dbStatus] - expectStatus[$expectStatus]";
	assert dbStatus == expectStatus;

	//CREATED_BY
	this.log.info "dbCreatedBy [$dbCreatedBy] - expectDBCreatedBy[$expectDBCreatedBy]";
	assert dbCreatedBy == expectDBCreatedBy;

	//CLOSED_BY
	this.log.info "dbClosedBy [$dbClosedBy] - expectDBClosedBy[$expectDBClosedBy]";
	if (expectStatus == "active") {
		assert dbClosedBy == "null";
	} else {
		assert dbClosedBy == expectDBClosedBy;
	}

	//CLOSED_DATE
	this.log.info "dbClosedDate [$dbClosedDate]";
	if (expectStatus == "active") {
		assert dbClosedDate == "null";
	} else {
		assert dbClosedDate.length() > 0;
	}

	//UPDATED_DATE
	this.log.info "dbUpdatedDate length " + dbUpdatedDate.length();
	if (expectErrTypeStreamRenew == "SUCCESS") {
		assert dbUpdatedDate.length() > 0;
	} else {
		assert dbUpdatedDate == "null";
	}

	//UPDATED_BY
	if (expectErrTypeStreamRenew != "SUCCESS") {
		expectDBUpdatedBy = "null";
	} 
	this.log.info "dbUpdatedBy[$dbUpdatedBy] expectDBUpdatedBy[$expectDBUpdatedBy]";
	assert dbUpdatedBy == expectDBUpdatedBy;
} else {
	assert 1 == 2;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>03CB864126970AB2E05305991F0AF2BB</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HANDLE_OID>03CB9D3459834554E05305991F0A2ED2</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>03CB912771AA25B0E05305991F0AAF4D</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>03CB864126970AB2E05305991F0AF2BB</ACCOUNT_OID>
      <USER_OID>03CB86C4645D44D8E05307991F0A8A0E</USER_OID>
      <TRANSACTION_ID>StreamsProject</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>Ultraviolet4.0</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2014-09-24 13:27:33.312</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2014-09-24 07:27:33.312</CREATED_DATE>
      <CREATED_BY>C0CEF8E08CD7C7D6E0401F0A0599120B</CREATED_BY>
      <UPDATED_DATE>null</UPDATED_DATE>
      <UPDATED_BY>null</UPDATED_BY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>C0CEF8E08CD7C7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>03CB86C4645D44D8E05307991F0A8A0E</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">01</con:value></con:property><con:property><con:name>expectDBDeleteUser</con:name><con:value>03CB86C4645D44D8E05307991F0A8A0E</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectJDBCSQL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectSQLDefault</con:name><con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HANDLE_OID>975DA31F89B0B21EE0401F0A059979D9</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>975DA31F899FB21EE0401F0A059979D9</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>0900</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>deleted</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>2010-12-15 11:29:52.337</EXPIRATION_DATE>             <CLOSED_DATE>2010-12-14 11:29:53.657</CLOSED_DATE>             <CLOSED_BY_ORG_ID>urn:dece:org:org:dece:0910</CLOSED_BY_ORG_ID>             <CREATED_DATE>2010-12-14 11:29:52.335</CREATED_DATE>             <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>             <UPDATED_DATE/>             <UPDATED_BY/>         </Row>     </ResultSet> </Results>]]></con:value></con:property><con:property><con:name>expectSQLDefaultLLP</con:name><con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HANDLE_OID>*</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>${#TestCase#expectDBStatus}</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>*</EXPIRATION_DATE>             <CLOSED_DATE>*</CLOSED_DATE>             <CLOSED_BY_ORG_ID>${#Project#urnNode}${#TestCase#expectDBDeletedBy}</CLOSED_BY_ORG_ID>             <CREATED_DATE>*</CREATED_DATE>             <CREATED_BY>${#TestCase#expectDBCreatedBy}</CREATED_BY>             <UPDATED_DATE/>             <UPDATED_BY/>         </Row>     </ResultSet> </Results> ]]></con:value></con:property><con:property><con:name>expectSQLwithNickname</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithNicknameLLP</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithTransaction</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithTransactionLLP</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectTransactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>03CB912771AA25B0E05305991F0AAF4D</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases_P1</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>03CB9D3459834554E05305991F0A2ED2</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_12085 - StreamRenew - LLP - ContentIDNotActive - MD_BASIC CID status of 'deleted'-403 Forbidden</con:value></con:property><con:property><con:name>useroid</con:name><con:value>03CB86C4645D44D8E05307991F0A8A0E</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>CID_NOT_ACTIVE</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81167</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verification of STREAM_DATA_HISTORY row" searchProperties="true" id="f754ac22-d249-4b42-85cb-be752a318b9e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0b32f9a0-d916-4f84-8f9d-b7130ccbc721"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("dbxmlresponse",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectTransactionid",null);
tC.setPropertyValue("expectNickname",null);
tC.setPropertyValue("expectJDBCSQL",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectDBCreateUser",null);
tC.setPropertyValue("expectDBDeleteUser",null);
tC.setPropertyValue("expectDBCreatedByNodeType",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="45f47edf-95ac-48e7-907c-47d69183b373"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("expectStatus",callTC.getPropertyValue("expectStreamStatus"));
tC.setPropertyValue("expectTransactionid",callTC.getPropertyValue("expectTransactionid"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("expectNickname"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
tC.setPropertyValue("expectDBCreateUser",callTC.getPropertyValue("expectDBCreateUser"));
tC.setPropertyValue("expectDBDeleteUser",callTC.getPropertyValue("expectDBDeleteUser"));


if (tC.getPropertyValue("expectDBStatus") == "" || tC.getPropertyValue("expectDBStatus") == null) {
		tC.setPropertyValue("expectDBStatus","deleted");
}
if (tC.getPropertyValue("expectDBCreatedByNodeType") == "" || tC.getPropertyValue("expectDBCreatedByNodeType") == null) {
		tC.setPropertyValue("expectDBCreatedByNodeType",tC.getPropertyValue("nodetype"));
}
if (tC.getPropertyValue("expectDBDeleteUser") == "" || tC.getPropertyValue("expectDBDeleteUser") == null) {
		tC.setPropertyValue("expectDBDeleteUser",tC.getPropertyValue("useroid"));
}
if (tC.getPropertyValue("expectDBCreateUser") == "" || tC.getPropertyValue("expectDBCreateUser") == null) {
		tC.setPropertyValue("expectDBCreateUser",tC.getPropertyValue("useroid"));
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row" id="82ce6577-70f8-4549-a5b6-b2211bd56921"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

String nodeid = tC.getPropertyValue("nodeid").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String sh = tC.getPropertyValue("streamhandle");
String status = tC.getPropertyValue("expectDBStatus");
String results = null;
String accountoid = null;
String useroid = null;
String nodeUser = null;
String nodeAccount = null;
String userRowId = null;
String acctRowId = null;
String sql = """select 
to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
TRANSACTION_ID,
STATUS,
STREAM_CLIENT_NICKNAME,
EXPIRATION_DATE,
CLOSED_DATE,
CLOSED_BY_ORG_ID,
CREATED_DATE,
to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw('$sh') 
 and STATUS = '$status'""";

results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;


try {
	def myXML = new XmlSlurper().parseText(results);
	log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
	assert myXML.ResultSet.Row.size() >= 1;
}
catch(Throwable e) {
	log.info e; 
	assert 1 == 2;
}
finally {
	tC.setPropertyValue("dbxmlresponse", results);
}

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>03CB864126970AB2E05305991F0AF2BB</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HISTORY_OID>03CB9D3459844554E05305991F0A2ED2</STREAM_HISTORY_OID>
      <STREAM_HANDLE_OID>03CB9D3459834554E05305991F0A2ED2</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>03CB912771AA25B0E05305991F0AAF4D</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>03CB864126970AB2E05305991F0AF2BB</ACCOUNT_OID>
      <CREATED_BY_USER_OID>03CB86C4645D44D8E05307991F0A8A0E</CREATED_BY_USER_OID>
      <TRANSACTION_ID>StreamsProject</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>Ultraviolet4.0</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2014-09-24 13:27:33.312</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2014-09-24 07:27:33.312</CREATED_DATE>
      <CREATED_BY_NODE_OID>C0CEF8E08CD7C7D6E0401F0A0599120B</CREATED_BY_NODE_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>03CB86C4645D44D8E05307991F0A8A0E</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>expectDBDeleteUser</con:name><con:value>03CB86C4645D44D8E05307991F0A8A0E</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectJDBCSQL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectSQLDefault</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLDefaultLLP</con:name><con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>             <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>deleted</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>*</EXPIRATION_DATE>             <CLOSED_DATE>*</CLOSED_DATE>             <CLOSED_BY_ORG_ID>${#Project#urnNode}${#TestCase#expectDBDeletedBy}</CLOSED_BY_ORG_ID>             <CREATED_DATE>*</CREATED_DATE>             <CREATED_BY>${#TestCase#expectDBCreatedBy}</CREATED_BY>             <UPDATED_BY/>             <UPDATED_DATE/>         </Row>     </ResultSet> </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithNickname</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>       <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithNicknameLLP</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>       <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>       <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithTransaction</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithTransactionLLP</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectTransactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>03CB912771AA25B0E05305991F0AAF4D</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases_P1</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">03CB9D3459834554E05305991F0A2ED2</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_12085 - StreamRenew - LLP - ContentIDNotActive - MD_BASIC CID status of 'deleted'-403 Forbidden</con:value></con:property><con:property><con:name>useroid</con:name><con:value>03CB86C4645D44D8E05307991F0A8A0E</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81168</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish SharedMediaConsent.old" searchProperties="true" id="b82e6540-7ea0-4abb-ad2c-117cf16c0ed6"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="84c8c0b2-ae05-4ad3-b47b-691b98d42b47"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass", "urn:dece:type:policy:ShareMediaHistory");
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="30706f5c-cae2-4cc8-947c-c24bc89bf26e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("policyResource") == null || tC.getPropertyValue("policyResource") == "") {
	tC.setPropertyValue("policyResource","urn:dece:rightslockerid:org:dece:0900");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}
if (tC.getPropertyValue("policyRequestEntity") == null || tC.getPropertyValue("policyRequestEntity") == "") {
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ShareMediaHistory" id="1906dbad-3e46-48c9-9b94-49e8da4c0b2f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate ShareMediaHistory if necessary" id="4892b68b-2e47-484d-a6a3-45eca06a7384"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def exists = tC.getPropertyValue("policyExists");

if (exists != "true") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_04152 - StreamRenew - DLP - Policy - AllowAdult - US - MMPA - AdultContentNotAllowed - Without policy cannot renew IS_ADULT = 'Y'</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Dynamic (DLP) Test Cases SR</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ShareMediaHistory</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>policyResource</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:rating:US:MPAA:G</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81169</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove all Parental Control Policies.old" searchProperties="true" id="2ee320e6-34d2-4dcf-8759-c4d00e9fedd8"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="8c8c745d-d54d-4636-a52a-9f8554670d17"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="1798cece-012a-47b4-b530-b49e8b32802e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" id="971abbba-925f-46fe-be96-924b96b12867"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy" id="a707d091-cbf4-4457-8ff4-628f07c8f008"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:BlockUnratedContent" id="28076d77-c2b9-4ba4-9c5c-a0fa4bdb6edc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:BlockUnratedContent" id="7a115efd-60b2-4344-b37b-fea44721a7fb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:AllowAdult" id="8625d3b5-a92a-42e2-95b0-ba59fa0582c9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:AllowAdult" id="d67c7d0c-fa5c-4ef1-aa8b-7991d0401895"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Request:PolicyClassNotValid">
      <Reason>Request PolicyClass is not valid</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A9B66525BAF65015BE0401F0A059942CA/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A9B66525BAF67015BE0401F0A059942CA/Policy/urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Request:PolicyClassNotValid</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Dynamic (DLPCS) Customer Service Test Cases</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_01000 - StreamRenew - DLPCS - StreamHandleInvalid - Stream handle malformed</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81170</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish Parental Control Rating.old" searchProperties="true" id="54833957-eb03-44c8-babe-dd353a9d4f05"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="17127c16-a79d-4467-a712-a95585dc5aac"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass","urn:dece:type:policy:ParentalControl:RatingPolicy");
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="3bd15bbd-8eab-4f9b-ade4-8c17c76a3afb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.getPropertyValue("policyCreator") == tC.getPropertyValue("assertionUserIdFULL");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" id="0a891668-00ff-4afd-b0f2-644aec668946"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy if necessary" id="ea4f8518-ba86-4d35-bdb0-3c5bdc6683a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ParentalControl:RatingPolicy" id="246dc646-13e9-4375-a269-4cf418cbf96b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("policyRequestEntity",tC.getPropertyValue("assertionUserIdFULL"));
//tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");
//tC.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:G");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Request:PolicyClassNotValid">
      <Reason>Request PolicyClass is not valid</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A9B66525BAF65015BE0401F0A059942CA/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A9B66525BAF67015BE0401F0A059942CA/Policy/urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Request:PolicyClassNotValid</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:US:MPAA:R</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Dynamic (DLP) Test Cases SR</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_04152 - StreamRenew - DLP - Policy - AllowAdult - US - MMPA - AdultContentNotAllowed - Without policy cannot renew IS_ADULT = 'Y'</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81171</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - General Policy Establishment.old" searchProperties="true" id="560afb75-d7cf-4f11-9a9b-84114dcb7f55"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4ca19661-8019-4c84-83be-40a64a03771a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="b6c92fb9-06ea-4ace-a632-a73536c8f350"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.getPropertyValue("policyCreator") == tC.getPropertyValue("assertionUserIdFULL");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for Policy" id="3b7b5147-b197-4ebe-9ba5-d20181935331"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for Policy if necessary" id="2104b77d-e0f5-4113-8ba7-b6130d37789c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", tC.getPropertyValue("policyClass"));

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for Policy" id="98f47fd3-c713-4b73-ba48-4e39239af11c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("policyRequestEntity",tC.getPropertyValue("assertionUserIdFULL"));
//tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");
//tC.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:G");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Request:PolicyClassNotValid">
      <Reason>Request PolicyClass is not valid</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A9B66525BAF65015BE0401F0A059942CA/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A9B66525BAF67015BE0401F0A059942CA/Policy/urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Request:PolicyClassNotValid</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Dynamic (DLP) Test Cases SR</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_04151 - StreamRenew - DLP - Policy - AllowAdult - US - MMPA - Can renew stream that IS_ADULT = 'N'</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81172</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish High-Level Policies for User/Account/Node.old" searchProperties="true" id="6e194537-b474-4724-a1a3-96676ad1dd82"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f1f727df-a37d-4209-93b5-b48992c63ece"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="874f5b2a-2d5a-4aff-81ce-fac52782badb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableManageUserConsent" id="2f3e0d35-6b16-4f88-bdc6-2af9729bebae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableManageUserConsent if necessary" id="eccb440e-f38e-4a5c-83a9-d4161fb4ccec"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ManageUserConsent" id="365980cd-b15b-4de6-ba96-a26c9378da4e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ManageUserConsent if necessary" id="e9fb656b-1eb0-4c13-a1d5-c1587e250907"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsentRequired" id="a64aa9ef-e2d4-4bb1-9a04-edd4bb0838e5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsentRequired if necessary" id="1f72de5e-5e5b-4433-b48d-11459bd1b1ef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsent" id="fabbcfe4-c3ab-497d-a3e3-bb2a46319a12"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsent if necessary" id="746c68a6-5d86-446a-bb1b-ee653bd323ee"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserDataUsageConsent" id="fdb6a12d-0c5b-44df-8a0f-d9d184feed22"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserDataUsageConsent if necessary" id="315e650b-b54a-45d9-a731-3eb697028e38"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_14052 - StreamRenew - DLP - Policy - Verification ParentalControl:RatingPolicy - US - MMPA - PG-13 rating - Full User</con:value></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Test Cases</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:UserDataUsageConsent</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVdbc6rKEn73V1iuR8swoHirJFXDRYOKCuL15RTCcFEEZEDQX78HjMZkZWWvfR5SZpq+fN390fQ8Y/3gMV2IMYpiN/DLkvBSaZmg3mHroAYaJqo1AGjXtg1Ur7E02FqItQDQO5WyhHGCJB/Huh+/VBhA0zXQqtG0RjNd0O7S9ac6w2wq5QWKMPFMVJ5ApZwdPB93i6gvlSTyu4GOXdz19QPC3djozqA86hLNrn6DVHl9voIsAkavThyHXYoynkxkIM8znozgQD1Tn3SeTdydubavx0mE3mOa+KXybpum6VNafwoim2IAABToUETHxK79q/JauhkjU/Kt4HrmdT/wXUP33Iueg5JR7ARmGXp2ELmxc/iDa5qiQe66hjKjZtAN/1eF+ghQoPtLT59ARlivYUenb85UZKEI+QYqz1XppfLrrxp4NdUi3cdWEB3wl/N/Q4T8E/KCEJk1fEvsBu7vPX5TrddnZHQl3/AS7J7QOGdJqBsIl6cRstxs5GLCPROXi+6XM3wjGDL+S0eeqUecBDb1TWUE10Y4/n/a9diqq5eF7iXodTWCyEeHRTic2LOLbBl2mxfmvNOsw5cCwqPyFdS90+/nrzy90+rdyDmHiZUku6pAUQyeWApXHaVSNKG3DgJqezP0gcg08cnsgUQWgwktUDI3CFd+L1KbUXU15Sn1SNHUIWFx6SjZTRm3/UW0EeV5I6PVwNDdVHKr1W0TKnXt1Bq2qqtWNjg2z56m1s/NNDJi2jxNTWG1kOJ18LaAzqg1UqqldVY12fFbxkyz9VA/++dW+vKR02MOeV5DdC6SzP9fsaAj6LF+P/D5oLDI2xmjV1mShOTC8/A8s2EqcdAmfzs45uz90dm7/U4KOKgoPSjwnLcTRzLc9yE9FzlH5hcLOeMvcMDZ4wUx1ErQ23CyKqZCuhYWivImpo5m9hfnbd9LNhdxLENcGPOOLKriQlA1UZZhcJVlsrDtZzt5JqeSshZKxIEgZuHF7Hdi1M9cg5FYecYy6xmbbFYLIu+dR4fxaauJnszLfX527M+kbV1QxAFU10uD6SXE9jI6hEFpPecejAYh2kHUSwGJCS+ytk9lbc6MBVUvZNpnmSz1B7KCU14psuqXxHSwmF8+asFzMm8exEzU4PRaC0Pje2OwWQ2wvmR9WYWpYBfGQzE1JzcgsgLSEn+t1UhMVVGdj3uyKqUiLGSCmHp4y4ydbd85GXUlG2hw99gYXhGXPZ8899WTcWaPJb3fg9vDgjbqqmO4rKuvgtTetFNBWQ+GwUYibsZQETlOgQQQgHlqpP4cHHELdhK6HcZFI6sXHJATlWQ6GO5Plwy03frEno6XrGDtW9O+O63rpkNJnsHs6nsoScgc0o6im+qaUgXfvTQnw/kKudH6Eo9ZhW66bbakLpP5Sgi8lvm2Ws+H1WxtKNpkOpsvp5csGx937YsXv024t2g2kAV7MkZoio0qBfQep7UFll+/7QifLBUgtgRtmYOwv7Nt0SUE5t52VxK+qbJIyAtlPu3zS74/g/1+VZQ4QVGsnkNPjf4imdNjWRJNj5TpvF6pXmnDcwLpFNCXm3DN9MBGg2bhTGmIPVuZs9XBCm2UsactYpiGC8unadAPlTdLTm1DzhlgSumMI28RV0okONcn4QBkw0UT0EfF9AazDpzXsxmzzyaOvTnv7c2eNGX98OqsNegttAeOSYRiy5KiiaoM29f3LZOleV31jEMWbg9GJmikZ4VxoHGi2lPAPBMEOLzKsAaZDK8v4k7mxcK+BDNZJ7Q4bVcOXvtjd6KJCSFt8kCX3ZYB/8qxnGKlzxw78lCBXzkmXjkmQutYldoCjdkmH+JlanN98ai0FqNBJwTKarQvcdUeZceu15j47VQbVpf0OW05O2W57EiCw1d9a+3UtzEH9IuhoMG+1XfVveA3G95ZHskKO3cp7wx26JjiUWks0b5Yjy89qhMlVe6wcQ+XS73BzA/TWXKS5voQ02dne1x20t30rUlRUf/MXlqbk9JbBcb6+h35OiTvwusYpR4H7KcJfFu9Zsl2h4z4dsy/w5JQ7pGPox7/vMblEtesWYVqN8x3QRwjP6685lb5CtdNyKLnml3y5byeO1yzyTIsB3vNFqBZTgQNQPcABGyn02B4eNv1rii+QOQD33LzWPkye/1Y/wzQOHS3SI9QVPnBU16nsuSrZPsIfIy04KXyv05zy5qtBoMsdtvoNKw6arfqlk6bRhNZ7VZbb7aaCOmgrlfK4yCe+JMIWjGKHnZl5uuurCLDDV2UL9TvawWOSU2O+imJPebppD/5KCEbd5Qvvd0WAAyF3UPooRw5dQjMxENPoRMWFaLw9Zep6QYupCay9MSLazgslp4/pvv12a0yRMd0cwWcZ8Qh0lX0zeoPbun8ljbz7RXh5h4mppvvNqTMceQaVySfH32wJqfLB2VounnDfFf9O1PQoRu/m1I/IKK+FuMeyTy5D3FvFxiyk5O1rbi3YNLRo/50fEpOp+SjhxFxT5YsQM2QkZC18qwFe+RTdw/U3yz0d8xf4t7ln9ElsePPYjINDoRu5eL475e5T9akADHK4u9kvEeub3nwH294RtfI9Yh4Sn7SIDI/6v6Nr4c4BHI+yVzfzk/5Jn7+3N7316RrBMSrS4ZZED36/s7+u9ifhfdy3aHEhBXbJEZ/flLOp9RLRTeMIPFjSagUgsfJWWCOzyHqfij95qZYhd/vNtmfLrI0tZJHM8NBB71y13X/XbnmFo03ELHCboHlpZKRWzoJ7tsPk/od4B+GNfvTsP6cyetv4t8lDzX9yuzXfwA=</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish High-Level Policies for User/Account/Node" searchProperties="true" id="93dbc176-9461-47e1-9d3f-ffe76a1a8c10"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0a1f5a5c-1e32-4407-9e81-8cea2f819642"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="73a34216-b678-4ffb-a080-9f0d02b4cf3a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserLinkConsent" id="392af331-0a22-4294-882b-355c20c01efa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "UserLinkConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserLinkConsent if necessary" id="054ac925-e612-460b-b2cc-00c8e367b8c9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "UserLinkConsent");
	tC.setPropertyValue("policyRequestEntity","urn:dece:org:org:dece:"+tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	tC.setPropertyValue("policyCreator","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableManageUserConsent" disabled="true" id="972f9863-2307-4a00-926c-b8e19b7acd7e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableManageUserConsent if necessary" disabled="true" id="7563f153-8017-4ed1-b360-41d0710fa95d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ManageUserConsent" id="2e83d8e9-14c5-4efa-a77e-2ed1639637b7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ManageUserConsent if necessary" id="aacccf29-f5a4-4c08-a374-1fbb7db0e1f3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass","ManageUserConsent");
	tC.setPropertyValue("policyRequestEntity","urn:dece:org:org:dece:"+tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	tC.setPropertyValue("policyCreator","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsentRequired" disabled="true" id="c2a20639-16fc-49a5-b14d-25590ff41272"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsentRequired if necessary" disabled="true" id="1e40f06f-d264-4c86-bd98-0a456b2285f9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsent" disabled="true" id="46818b6e-6cf9-49dc-b026-de1336538eb4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsent if necessary" disabled="true" id="548afec8-1ddd-4b18-8370-e0a6989f01fb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserDataUsageConsent" id="799879d5-12a7-425a-9ff5-ba4b6b77069d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "UserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserDataUsageConsent if necessary" id="3e99bc6b-b600-47ec-ad42-ba6c8d7f1785"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass","UserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity","urn:dece:org:org:dece:"+tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	tC.setPropertyValue("policyCreator","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:03CB86C4645C44D8E05307991F0A8A0E</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:03CB864126960AB2E05305991F0AF2BB</con:value></con:property><con:property><con:name>policyExists</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_14054 - StreamRenew - LLP - Policy - Verification ParentalControl:RatingPolicy - US - MMPA - NC-17 rating - Full User</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases_P1</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>UserDataUsageConsent</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPt4xli+cfEEZgwkLQ0JF1Oa5KUjZNkosWViyQb66ysZcIGQHNo+ebRe7X570bd7xWAcGY7LGE45SWhlHUeUOYW0pWQpdRLICHMojDFzOHI8927gGFXgwP0VpdLvtZQfpm1bQRPWVWDOddUyzYbamNsN1fRrCCELGNA2hSpjGe5TxiHlLcUAuqWCpmpYU1B3DN0xa1XLMp6UygynTNgWKlWg7ECtWUtZcL50NG21WlVXZjVJQ80AQNce7gYeWuAYKu2rbUSFo7S900dVHyMcRaiKkli70o50rnzmeCSkkGcp3vny3/MFNNDUhI7PSPhJKe9iv0+DpDh2IU0oQTAiP6HMzx3mi8SvuFGYpIQv4neD0IE0rOI1UpFu0U+KdgztQkNHCFMGVbaA+s7WBAc4xRThyrdJv6V8uqxqxdVpCikLkjRmx8c/w4NpjqNkiX2V7cPaQbvc4JlMta8wcvoURRkjOb6XzbqECLNdNTG63FRllOKArAeEiQZdM4lOO4R3ctxmo0dCzPjfFOigOFsjMxhluH3nsq/u4zO8G26eX3/2M++B57MvN8/5V7dVADhULgRlabfHk6Ysm2h7Y3DvTQyWjB/rUXPyWHsIp4/mXS0Mp1onsDfgGxiF4/V4PmT50KLLRRKEDZgNqDmuT9zr0ePTIK0/vd7eks/UjUff49FtBsDMHvZ6y1nvZa3XzO63Fy/7bx0Oa7nhPmyGzbGOrzH6svg8H4ONHSw7vej+u/slTBqroYH6T98bt+uvxrU2AbPui+3n/efxzPU+13fhnuA/lu3fvJfNnzHi+6Nsg36vciOqBPnHZCYlxFeDQtVZSvJhHFOutOUtyR1OJuiO+I6o4fYMzG6nUetaNcvuWlavcQ1sE9SbTf0GuA0XXO9JZoviBGI3oQGRviTlbtvmY4AodhimPk7VPMkE0zHlA4s9yGGlTyfiESSU4Wki6Fm35vPNipJ6VuOBbtOfflYnMA8MrFTuEz6kw9QNOE6PSFkHR6Q8wYgsCZbMLRubic5mXCTjFeYZj/RqDqsUZ4LbU0mzjmE1bI2ReBlhCVWLEz+LcHW5WBap0dj2a6gQsUI6uZ4Wz+3dwE7/7XMgdHwiFZiMpYNFHfGZ6WLsA3kTsH12Cu3Nu5lP5MsSCeUpQVskx79+94lskLJJegPXG+1Bl7p/cPdH1/uh/6WBwT84H/yrc1HLtze1D/KpnZaydOTn5MDtfu0QA0xQXnvfiK+w+lrN8jwrWq8uqT0V5jVZXA0YmodRJkh5M01eMNVKK9pFE7AEfuK8lB9DzPiCehxyHIu3UimOF6w8HmZy5emLV76+dJ86cilSx/Gan5N1I7GuScQfbnTIQVJPiEfis0pS/3fFztg68CPiFBsPJzSUJzn9Nu/0BUqEWSJ4O0kPjZ8zcM75sbBMcomFi4aaZxy//6ciCbmlQISSjPJ+TykEh0OiwMk3S+z8VnpjpphD5WJK/n8zVUnRAkjwrdAv7Mv9wpFPgIYHg2bn9O2ssXSj1qwBt2MUs8bezpobo9Mpk3KErv1G/FZykKfTHm//Ag==</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:LLASP</con:value></con:property><con:property><con:name>policyResource</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:03CB86C4645C44D8E05307991F0A8A0E</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:03CB86C4645C44D8E05307991F0A8A0E</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>03CB870B6AFF45EDE05307991F0AD468</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>03CB86C4645C44D8E05307991F0A8A0E</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>03CB864126960AB2E05305991F0AF2BB</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove all Parental Control Policies" searchProperties="true" id="bc5f5b48-ce4e-4273-8dc0-6039c3cbdc6d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f4f9e403-e42a-4139-b660-037a5d1d1b73"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="7eff408a-4bba-41e7-8e02-183b59865131"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" id="6fbcdeda-1913-45b8-9d96-309c538303e0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ParentalControl:RatingPolicy");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalConrolRating")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy" id="185600f4-10bf-4675-9396-e9a1a9b76e0b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlRating")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:BlockUnratedContent" id="3c31b303-ea03-4759-8f07-bcda40b8685b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ParentalControl:BlockUnratedContent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalControlBlockUnratedContent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:BlockUnratedContent" id="e099bc6c-0d8b-46a7-a921-c3630e9a5767"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "ParentalControl:BlockUnratedContent");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlBlockUnratedContent")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:AllowAdult" id="e30a83c0-32c4-4597-9887-5c47017894be" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:AllowAdult" id="a3a76d2c-bbd5-4f77-8b55-85032355b122" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="remove policies" disabled="true" id="f0023a30-5953-4f53-bb9f-c17be9d5e890"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = context.expand( '${#TestCase#useroid}' )

a = new dbUtils.dbPolicy(log,tP.getPropertyValue("targetSystem"));
log.info "useroid"+useroid;
//a.policyDelete(105,useroid,"deleted")
a.policyDelete(300,useroid,"deleted")
a.policyDelete(302,useroid,"deleted")</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZhc9o8DP4rXPZxF5KQQEKucMcI3digY4F2e/myc20BbhMHYoem/PrZATKgtC/bvsBZkaVH0mNJVxzFUc3vcA6poAmr5HHEuF9IW1qWMj9BnHKfoRi4L7A/7gwHfq1q+mh/Rav0g5b2s+bVPK8xc/VZE2zdcdC9fn8vfxxwZw0bPNtxkVTlPIM+4wIx0dJqplXXTUe36hPL9C3Xd8yq6zamWuUOUi5tS5Wqqe1A5bylLYRY+obx9PRUfbKrSTo3aqZpGT+GgzFeQIy09tU2osJR2t7p4yoBDFGEqziJjSvjSOeKcH9M5wyJLIWdL/KaL9Mwm4bUIZzO32nlXSB9NkuKYxexhFGMIrpBKj9DEIuEVDrRPEmpWMSvBmGZyrAOOdax5bB3mnEM7UJDRwhTjnS+QNbOVggzSIFhqNyG/Zb27rKqFVcnKWJ8lqQxPz7+GR5ga4iSJRCd78PaQbvc4JlMta8A+32Go4zTNdwosi4RBr6rJuDLTVVGKcxoPqBcEjTnCp1xCO/kuM1GQOfAxd8U6KA4WyN3KMqg/XEUrmfpp/r7xreG7dluNl51N19gdI2eWgWAQ+VCUJZ2ezwhZUmi7Q08cGbTJFxBMlgj4tTj0Jxzu4c3wV04wpPGXcf4Dr27sLaZ9qaebVx/Zt5NHtu9leM1yJegGd7mbv6t/4DyD/ak3qX92wl+MMWDOWnesvgWvc+fG6knyEB8GBj3g8cfq2D1idzNP06Ho8A0rs3h9Db7HNqk35h+D2ve4Nly2aQpugQvh//l4TCuZ7UFIeawVYZzgP9Ytn/z4+z+AbDYHxUN+kHlWlYJibebmZJQos8KVX+pmg8XwITWVrdU7/Az2e4o8WUNt2fL7lpNsx6Y3Yblel7QM+u2WW82rWuzU/e69r7JbFGcQOwmbEaVL9Vyt7R5GyCOfQ6MQKqvk0x2Oq69YTFAAlX6LJSPIGEcJolszxnN3LkbEe/xATb5Btkb4jXEo9AqN4n4yr6mnZmA9Lgl20ctOQRMlxRU31a05pLXXMhUrNA6E5FVXaMqg0x29lQ1Wb/meHWD03gZgQJqxAnJIqguF8siMQbf/td0hHkhDXuT4rG9Gtbpt30GpA6hSoGrWD6ArCKcmS32PpAXATfOzqC9+U5GqHpXMp0ipXiL5PjTb5YoepQUCQad8WgPutT9g7s/u+Of1l8aGPyD88G/Ope1fHnTeCOfxmkpS0dkTQ/c7pcOOb5kw2vvibhCVnVVzdbrrOCe49hGKs0bsr9bxhhwJvvx8yR5BGaUJoyLhl+J+sRzKT/Gl4kFGwskIJYPpVIcL9h2xsDVttOXDzy/dJU6cinzJiAX52TdSG5qCvGbyxz2sdKT4pH8e0pS8rtcZ2wd+JFxymVHUDZXJzX4nl8hBU6kWSpbdpIeGj9n4JzzY2GZ5BKLkGy6zwS8/qWienFLQxgnGRP9QCsEh/OhwCmel+D/VnphphhB5U5K/38p1WlBAQxyk+W0sK9WC1/xn80PZszO6emYcXpO03R7jhk4tcMxY3uBVyblCF37hfil5CBPpxxv/wI=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13C14E4907E40D42E05305991F0A38D8</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13C1905D0C61788DE05305991F0A58C3</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:13C14E4907E40D42E05305991F0A38D8/User/urn:dece:userid:org:dece:13C1905D0C61788DE05305991F0A58C3/Policy/urn:dece:type:policy:ParentalControl:BlockUnratedContent</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/1/11/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>P0 Test Cases</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00000 - StreamRenew - LLP - Test Suite Staging</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81175</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6EA84B2B661E3EE0401F0A05996419</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13C1905D0C61788DE05305991F0A58C3</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13C14E4907E40D42E05305991F0A38D8</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish Parental Control Rating" searchProperties="true" id="7e4a6097-39b3-478f-a855-e64b11f72da5"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4f978ff5-868e-43db-984d-bb492c8d558e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass","urn:dece:type:policy:ParentalControl:RatingPolicy");
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="842cc9cf-4264-4ddb-afc7-89a5c8fa3265"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));

if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.getPropertyValue("policyCreator") == tC.getPropertyValue("assertionUserIdFULL");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" id="865a0aa5-6e99-4349-b00c-7e0b74dcaa47"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ParentalControl:RatingPolicy");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalConrolRating")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy if necessary" id="655574e7-ef36-4a0f-a96e-68c948f1f9a0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalConrolRating")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ParentalControl:RatingPolicy" id="796549aa-1cb0-4c3c-bcdc-419a72dafbab"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyRequestEntity","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass","ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for ParentalControlRating")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value>pVZbc9o6EP4rjPt4xli+cfEEZgwkLQ0JF1Oa5KUjZNkosWViyQb66ysZcIGQHNo+ebRe7X570bd7xWAcGY7LGE45SWhlHUeUOYW0pWQpdRLICHMojDFzOHI8927gGFXgwP0VpdLvtZQfpm1bQRPWVWDOddUyzYbamNsN1fRrCCELGNA2hSpjGe5TxiHlLcUAuqWCpmpYU1B3DN0xa1XLMp6UygynTNgWKlWg7ECtWUtZcL50NG21WlVXZjVJQ80AQNce7gYeWuAYKu2rbUSFo7S900dVHyMcRaiKkli70o50rnzmeCSkkGcp3vny3/MFNNDUhI7PSPhJKe9iv0+DpDh2IU0oQTAiP6HMzx3mi8SvuFGYpIQv4neD0IE0rOI1UpFu0U+KdgztQkNHCFMGVbaA+s7WBAc4xRThyrdJv6V8uqxqxdVpCikLkjRmx8c/w4NpjqNkiX2V7cPaQbvc4JlMta8wcvoURRkjOb6XzbqECLNdNTG63FRllOKArAeEiQZdM4lOO4R3ctxmo0dCzPjfFOigOFsjMxhluH3nsq/u4zO8G26eX3/2M++B57MvN8/5V7dVADhULgRlabfHk6Ysm2h7Y3DvTQyWjB/rUXPyWHsIp4/mXS0Mp1onsDfgGxiF4/V4PmT50KLLRRKEDZgNqDmuT9zr0ePTIK0/vd7eks/UjUff49FtBsDMHvZ6y1nvZa3XzO63Fy/7bx0Oa7nhPmyGzbGOrzH6svg8H4ONHSw7vej+u/slTBqroYH6T98bt+uvxrU2AbPui+3n/efxzPU+13fhnuA/lu3fvJfNnzHi+6Nsg36vciOqBPnHZCYlxFeDQtVZSvJhHFOutOUtyR1OJuiO+I6o4fYMzG6nUetaNcvuWlavcQ1sE9SbTf0GuA0XXO9JZoviBGI3oQGRviTlbtvmY4AodhimPk7VPMkE0zHlA4s9yGGlTyfiESSU4Wki6Fm35vPNipJ6VuOBbtOfflYnMA8MrFTuEz6kw9QNOE6PSFkHR6Q8wYgsCZbMLRubic5mXCTjFeYZj/RqDqsUZ4LbU0mzjmE1bI2ReBlhCVWLEz+LcHW5WBap0dj2a6gQsUI6uZ4Wz+3dwE7/7XMgdHwiFZiMpYNFHfGZ6WLsA3kTsH12Cu3Nu5lP5MsSCeUpQVskx79+94lskLJJegPXG+1Bl7p/cPdH1/uh/6WBwT84H/yrc1HLtze1D/KpnZaydOTn5MDtfu0QA0xQXnvfiK+w+lrN8jwrWq8uqT0V5jVZXA0YmodRJkh5M01eMNVKK9pFE7AEfuK8lB9DzPiCehxyHIu3UimOF6w8HmZy5emLV76+dJ86cilSx/Gan5N1I7GuScQfbnTIQVJPiEfis0pS/3fFztg68CPiFBsPJzSUJzn9Nu/0BUqEWSJ4O0kPjZ8zcM75sbBMcomFi4aaZxy//6ciCbmlQISSjPJ+TykEh0OiwMk3S+z8VnpjpphD5WJK/n8zVUnRAkjwrdAv7Mv9wpFPgIYHg2bn9O2ssXSj1qwBt2MUs8bezpobo9Mpk3KErv1G/FZykKfTHm//Ag==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:03CB864126960AB2E05305991F0AF2BB</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:03CB86C4645C44D8E05307991F0A8A0E</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://stdecqavap1.va.neustar.com:8009/rest/2015/02/Account/urn:dece:accountid:org:dece:03CB864126960AB2E05305991F0AF2BB/User/urn:dece:userid:org:dece:03CB86C4645C44D8E05307991F0A8A0E/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:03CB86C4645C44D8E05307991F0A8A0E</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:us:mpaa:nc-17</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases_P1</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_14054 - StreamRenew - LLP - Policy - Verification ParentalControl:RatingPolicy - US - MMPA - NC-17 rating - Full User</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81176</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>02B39B1220B0314AE05307991F0ABD1C</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>03CB86C4645C44D8E05307991F0A8A0E</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>03CB864126960AB2E05305991F0AF2BB</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - General Policy Establishment" searchProperties="true" id="22b9824c-4d2a-46a4-aa5f-d2223dbc3ce4"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9c89a892-9a73-43d8-ad85-bf5b335134c1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="144e80c7-c2c4-4636-a65a-bc97bacfd98d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.getPropertyValue("policyCreator") == tC.getPropertyValue("assertionUserIdFULL");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for Policy" id="884a22a4-b1aa-477b-a057-bcb4d93d689c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalControlBlockUnratedContent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for Policy if necessary" id="db8bb675-b0c7-4522-8a90-d9a6e7dfd431"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", tC.getPropertyValue("policyClass"));

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlBlockUnratedContent")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for Policy" id="7b74de03-acee-495f-b752-c8cd906804c3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyRequestEntity","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass", "ParentalControl:BlockUnratedContent");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for ParentalControlBlockUnratedContent")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value>pVZZc+I4EH6fX+HyPG4ZH9gBXIEqgmHHCTkWckzmJSXkttHGlokkc+TXr2RiAoRkk5kqqii1W91fH/q6jznKUsfvcg5MkJxqYdDWHxpHll13sWt4br1huBPHNZpWHBsQ4UkjttzIcixdCzkvIKRcICraumPZrmEdGY5zbbu+o361I7fxS9dugXFpWqrU5K1lllLul27besGonyNOuE9RBtwX2B93z4e+1PRRhUnvHK9Rlg5ZZyrEzDdNXIsAQ5riGs4z89jc0TmOuD8mCUWiYPDiM+Jt/eXuYrGoLeq1nCWmY1mWabVMqRNxknzXO9+qyxCFNM7X5x6iOSUYpeQZKVDnIKZ5pHXTJGdETLN3TNumbSnTBiyxgW2XftfNVwcluk9a2gHJODL4FNmVsRHEwIBi0G5GYVv//rkKru9eM0R5nLOM752/BgnoHNJ8BpHBq8gqdJ+3eCBdnWPAfkhxWnAyhwvVJjOEgWtXDGKyHBIumy/iWll+bcnlj1RdBvgrZTk2t7FK6OaB7AQkAS5+p2bb9VpbuUVpAR1+12t1sYduTueD3tEo7rXG8YQ2UDNK2iWEbeU1qE25X877zbrprZdL5MpLFuE8ua0PMAvvGvfmP+7Z0vJGl1MLUSb6Djw/mo3g7PxW3PSHpHs1cOxR01qduvml1S16J/eO9eSYg9bo8VsOq8z23JOEt+qTE+t5cnofD88u0V/d8VUwZlEQTs5+Fo+/nr07aP4gJxd3N/mPi9YsgPtxeB/Q87/Pf0KxeETJZPbNXfH7Abu9uGHXd3enT+mML9qvMW3HsCusKGFcTP4FLKqjao8w0AayXkh8TC9KQiIjLlX9meIoLoAKvaNuKWrxC0lAJPJlMddnWZ5+PagP+i3H6tndZt9yLXtgdS2v1Wp4Xr/ioDWKPYi9nMZE+VIsu+6fjwHizOdAI2DGPC/wFLj+gcUACaSFdCQfR045XOeSxe1FOp08ZyucuMnczjLvKXKWWd3DC127yMUlvWTdWADb5e7GDnePAJMZAUXwqsO5bHEuZDKe0LwQqV2boxqFQo4AplhY3mt6JifZLAUF1czyqEihNpvOytSYfP3vGAjzUjrqX5cv793A9r9VOZA6EVEKXMVyArKOcGAI2VUgbwL2Dg6ryny3iIh6YDKhghG8RrL76bVPVINsmiQYyndQgd7ofuHuQ2/8YP+mgeEfOB/+qXNZy7c3zQ/yae6XcuMompMtt9UiIGebZL5O1YhPqPZUK+bzomy9hmJ1Js2bktxtcwy4kNS8us4fgZobE+anJuMG9Z7njXwXXyGmdCyQgEw+FK08fmItGgNXa1Eon/jyszvXjkuZNwFLcUjWS+X2pBB/uGBhHys9Kb6Sf4ucRa/lOmBry4+MU+5CgtBEndQMXL3TFDiXZokk7ZxtGz9k4JDzXeEmyRssQnbTpBDw/hdNsXFbRxjnBRVhoJeC7QlR4hSrGfivSm/MlFPoZa1Y8nfXip/nw7Hk6gzpG13y/8oGKdsFg662lxJLW1/KLVk6p8nWRHoB+HYoNQJ7EFito97eUDpqbhK4E0nnjfitZCun+++h8x8=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6E3D7D1FD096C8E0401F0A05997568</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6E3D3FE920C1A8E0401F0A0599755E</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:8001/rest/1/11/Account/urn:dece:accountid:org:dece:FC6E3D7D1FD096C8E0401F0A05997568/User/urn:dece:userid:org:dece:FC6E3D3FE920C1A8E0401F0A0599755E/Policy/urn:dece:type:policy:ParentalControl:BlockUnratedContent</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:FC6E3D3FE920C1A8E0401F0A0599755E</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:US:MPAA:G</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases_P2</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_14083 - StreamRenew - LLP - Policy - BlockUnratedContent - US - MMPA - R - Verification unrated/unknown content blocked</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81177</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6EA82A410B8DCFE0401F0A07995A9A</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6E3D3FE920C1A8E0401F0A0599755E</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6E3D7D1FD096C8E0401F0A05997568</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true" disabled="true" id="938c7843-07fb-436c-8388-f4efdec5e96d"><con:settings/><con:testStep type="groovy" name="Rename Test Cases" id="ce864e1e-1fbf-4b85-9b16-a3147b990c03"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

import java.io.*;

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "Linked LASP Test Cases_P2";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def TCNum = 13;

//BufferedWriter bufferedWriter = null;
//bufferedWriter = new BufferedWriter(new FileWriter("c:\\DiscreteMediaLeaseCreateQuestions.txt"));

def oldTestCaseName;
def newTestCaseName;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	//if(targetTestCase.isDisabled() == false)
	//{
		targetTestCase.setFailOnError(true);
		oldTestCaseName = TCList[i].name;
		//newTestCaseName = oldTestCaseName.replace(" ", "");
		//newTestCaseName = newTestCaseName.replace("_POST_", "_GET_");
		//newTestCaseName = newTestCaseName.replace("_RTL_", "_RTL_CS_");
		newTestCaseName = oldTestCaseName.replace(" DLP ", " LLP ");	
		/*	
		if (TCNum.toString().length() == 1)
			newTestCaseName = "TC_DECE_0000" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 2)
			newTestCaseName = "TC_DECE_000" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 3)
			newTestCaseName = "TC_DECE_00" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 4)
			newTestCaseName = "TC_DECE_0" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
			*/
		targetTestCase.name = newTestCaseName;	
		TCNum = TCNum + 1;
		log.info "Done renaming Test Case '" + oldTestCaseName + "' to '" + newTestCaseName + "'";
	//}
	//else
	//{
	//	bufferedWriter.write(targetTestCase.name);
	//	bufferedWriter.newLine();
	//}
}

//if (bufferedWriter != null) {
	//bufferedWriter.flush();
     //bufferedWriter.close();
//}

log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>PERM_ACCOUNT_CONSENT_POLICIES</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set a Property" searchProperties="true" disabled="true" id="979b505c-9074-4272-8520-9db1877ab5ab"><con:settings/><con:testStep type="groovy" name="Set a Property" id="bbcf12c8-c099-4365-9705-c18cd855e1af"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "LASP Dynamic (DLPCS) Customer Service Test Cases";
def propertyName;

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);	
	propertyName = testCase.getPropertyValue("PropertyName");	
	propertyValue = testCase.getPropertyValue("PropertyValue");		
	if(targetTestCase.isDisabled() == false)
	{
		try
		{
			//nodeRole = targetTestCase.getPropertyValue("ErrorResponse");
			propertyName = "synced";			
			/*if(nodeRole == 'ForbiddenRightsTokenAccessNotAllowed')
			{
				nodeRole = 'ForbiddenDiscreteMediaRightOwnerMismatch';
			}
			*/
			propertyValue = null
			targetTestCase.setPropertyValue(propertyName, propertyValue);
			log.info "Done with Test Case '" + TCList[i].name + "'";
		}
		catch(Throwable e)
		{
			log.info e.text;
		}		
	}	
}

log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>FUNC_USER_CONSENT_POLICIES</con:value></con:property><con:property><con:name>PropertyName</con:name><con:value>NumberOfPolicyRequestingEntities</con:value></con:property><con:property><con:name>PropertyValue</con:name><con:value>1</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Count Test Cases" searchProperties="true" disabled="true" id="a2a73f7a-f740-4da3-8864-cc45ae529e42"><con:settings/><con:testStep type="groovy" name="Count" id="52aae690-30ec-4aba-ace5-f92dee46dd90"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;

mySoapUIUtils = new soapUIUtils(log);

def tcCount = mySoapUIUtils.countTestCases("StreamCreate");
log.info tcCount;</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Change a step's script for all Steps in a Suite" searchProperties="true" disabled="true" id="bf0a17f6-d35d-48a1-9593-b285fb2f8b81"><con:settings/><con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="6b1aa24e-504d-47c1-9ac8-89c5a355a11f"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Linked LASP Test Cases_P2"; 

def oldString = """tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());""";
def newString = """tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());""";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				def testStepName = testStepList[j].name;
				
				if (testStepName == "Establish Test Case Properties") {
					log.info "Hit!";
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					stepScript = testStepList[j].getScript();
					stepScript = stepScript.replace(oldString, newString);
					targetTestStep.setScript(stepScript);		

					/*
					*  Delete a step
					*/
					//targetTestCase.removeTestStep(targetTestStep);

					/*
					*  Replaces step's script completely
					*/
					//stepScript = """""";
					//targetTestStep.setScript(stepScript);		
				}

			}
			catch(Throwable e)
			{
				log.info e;
			}	
		}
	}
}						
log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>RTL_CS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove a Step for all Testcases in a Suite" searchProperties="true" disabled="true" id="eb65e842-ad42-484b-98e7-e0141c3649e2"><con:settings/><con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="5cec7bff-9da4-431b-abbf-fdcdb35d47d0"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Node Authorization Test Cases"; 
def stepName  = "Save node's current role";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList  = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				if (testStepList[j].name == stepName) {
					log.info "Removing Step " + testStepList[j].name;
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					targetTestCase.removeTestStep(targetTestStep);
				}
				
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info "ERROR:" + e;
			}	
		}
	}
}						
log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>RTL_CS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove Manage account consent policy" searchProperties="true" id="a23b4d6b-16d9-45ef-b114-d30bff7f2272"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0366b0c6-b432-425f-a466-48d1f1984db2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("username",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="176d216b-01c0-4f2d-a2d7-20a555939c50"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("username",callTC.getPropertyValue("username"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" disabled="true" id="a4c19c34-c223-46fb-bf95-9ce86725f069"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy" disabled="true" id="77e12d76-b708-4a83-805c-fa3a9630f0bf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:BlockUnratedContent" disabled="true" id="80428614-bfea-4efe-83cb-5879d24f50ff"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:BlockUnratedContent" disabled="true" id="55f503b2-7f0f-4ff1-b11f-d1e7d2a26650"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:AllowAdult" disabled="true" id="b517082c-bc12-4dc1-a1fd-84c008fdd5f2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:AllowAdult" disabled="true" id="808ff68c-91f6-4806-8554-f4023ddf86a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for Manage Account Consent" id="61ec1c00-0eb3-4988-a768-5b1a3f563b58"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ManageAccountConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="remove policies" id="04f019e6-7e4c-42a3-a65e-e1af2f4fefa8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def responseXML = tC.getPropertyValue("policyGetXML");
def policyOid=null;

a = new dbUtils.dbPolicy(log,tP.getPropertyValue("targetSystem"));

def myXML = null;
if(responseXML != null)
{
                try
                {
                                myXML = new XmlSlurper().parseText(responseXML);
                }
                catch(Throwable e)
                {
                                log.info e;                                                                            
                }
}

// Assert that policyListSize is 2 (EMUC and MAC)

log.info myXML.Policy.size()
for(i = 0; i &lt; myXML.Policy.size(); i++)
{        
	policyOid = myXML.Policy[i].@PolicyID.toString().split(':')[5]; 
log.info policyOid;

a.policySetDeleted(policyOid)
//a.sqlPolicyStatus(policyOid,'deleted')
               
}</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvOYMl6wDXYFqsySCTNAEiDL8DIl5AYUbBksGUi+/koGHCDLZWaeXGq3Tp9e1N2XDEWh6fmMQcJJTAubKKTMy6RVJU2oFyNGmEdRBMzj2Bv43Y5nFnUP7a8ohXazqvwuVexy2Zm4KoyDiWqVx446LkOgWtbEMkwHlyZgCVXGUmhTxhHlVcXUDVvVLdVwhrrj2bqnO8WyWR4phQdImMAWKkVd2ZHasKoy43zhadp6vS6uS8U4mWqmrhvaU7czwDOIkFK73HqUGUpqO31cDABDGOIijiPtUjvSuQyYNyBTiniawM5W8JktXdNdTegEjEy/KfldCNp0EmfHBqIxJRiF5BXJ+HSBz+Kg4IfTOCF8Fn3qhKFLYBU2WMWGRb8p2jG1M4GOGCYMqWyGjB1WHyaQAMVQuO+3q8q387KWXR0miLJJnETs+PhnfICuIIwXwgLbu7Wjdj7gB5GqXQL22hSHKSMr6MliXSAMbJdNwOdDFW4TmJBNhzBRoBsm2WmH9E6O22g0yRQY/5sEHSRnC/KAwhRq09ns+QVazuvqdj4aNJLRKJmNoO1W6qyaEThUzgR5arfHk6LMi2h7IyotFxu32x1dXDXpfPOdOterl9WMT50Q8UYrCkcdXmFj58Kf3+j3Px978f335sP6/iXqB/aPQePH1V19TfThpPf0OA2c6zmYUV1v9QbzWLNvr5atcI1YeePeuUvH15e3Jfcu7j0OR4v7h0V4ffNreEF/9ulzuPbbd8/UvpmNu70fXfM6tZZj3jAvxq/Przeofv30y6/m7hzwP5bt3/wgHT8D5vujLIN2s3AlsoT4181MSkigTjJVbyGbD+NAuVKTt2Tv8FLR7kjgiRxuz0apadaNRtltmQ3bNayWbpd023WNK90vlXx732S2LE4oNmI6IdKWbLnbsvmaII48BjSARF3Fqeh0TPkCsYk4KrRpXzyCmDIYxqI9T3loGDbMEYGpgeNKmFbmY/q6REqhF/MbepP4Ew7JcU92j3pyHzBZEJCNW9Y1E4XNuIjFEq1SgV5coSKFVLT2RHZZz7QqtsZItAhBMtWiOEhDKC5miywyGtt+TRVhlkn7rWH22j716/TfPgRCJyBSgUlf6iDSCKfDxRK+7B1557Dz4RDaw/tpQOTDEvHkCcFbJse/3spE1kdeI82OP7jdk851/+Du78bgt/GXAJ1/MN75V+Mil+9val/EUztNZW4oWJEDs/utQ8wv0fFq+0JcIqO4LKarVZrVnmWVtETAa6LBG9oAcCoa8sswngPVcgjtrOmXsz6xnMuP+aV8RgcccYjEQylkxzPWnQEwue60xQvfnLtLHZkUceOw4R/JGqFY1STjL7c57GGpJ8S34rOOk+AtXR9gHdgRfopthxM6lSc5+V4+KQocC1gienacHIJ/BPCR8WNhHuScCxfVNE45fP6nIJtxVUEYxynl7aaSCQ4HRMaTvyzAe1N6B5PNoHwpJf+/laokKwEMYpVlJMOXu4Un659OD4bMzujpnHErpuk3mrbl193DOVPRS+U8KEfsau/E7yUHcTqt8dp/</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>policyClass</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ManageAccountConsent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:CBA1F4F13FEEB33CE0401F0A07996ACF">
      <PolicyClass>urn:dece:type:policy:ParentalControl:AllowAdult</PolicyClass>
      <RequestingEntity>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA" CreationDate="2012-10-09T14:14:42.000Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases_P1</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_44854 - StreamRenew - LLP - StreamOwnerMismatch - Stream_Renew_By_LLPCS_ManageAccountConsentPresent_sameOrg - 403 Forbidden</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81175</con:value></con:property><con:property><con:name>useroid</con:name><con:value>13D2B1C79E2D5914E05305991F0A33A5</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value/></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_122214</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>61ec1c00-0eb3-4988-a768-5b1a3f563b58</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish Manage account consent policy" searchProperties="true" id="716294dd-90ac-4928-bd41-90fc3d2def46"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e2eafd86-b1bd-46bd-8401-d2706c35c7aa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="452ca012-8849-4c6b-872f-f61682045109"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserLinkConsent" disabled="true" id="e487c010-1bee-4c4c-9e8e-0fbbe2673482"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserLinkConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserLinkConsent if necessary" disabled="true" id="886503a4-aa3d-4f49-8fa2-38ae778c269b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserLinkConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableManageUserConsent" disabled="true" id="70799986-9f55-4b53-8b08-bb6bf7acb57e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableManageUserConsent if necessary" disabled="true" id="4dbc46e0-4043-4b43-914d-4c3e7acf461c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ManageAccountConsent" id="d015c9a5-e7ca-4fa5-87f6-76745e518923"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass","ManageAccountConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ManageAccountConsent if necessary" id="e1945d5d-c40b-4994-b694-027ee20a64ac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "ManageAccountConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource","urn:dece:accountid:org:dece:"+tC.getPropertyValue("assertionAccountId"));
	tC.setPropertyValue("policyCreator","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsentRequired" disabled="true" id="87e62daa-db74-4f53-8fe4-1e588689fb74"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsentRequired if necessary" disabled="true" id="c2f3faff-33f9-45c7-8929-f3f54a47f49f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsent" disabled="true" id="a8cf8659-6319-472d-bf97-7839c3677813"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsent if necessary" disabled="true" id="1d287749-f021-4064-9c9d-75f3618dbc0c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserDataUsageConsent" disabled="true" id="76194422-48e5-4a92-b4d3-90786aec6b7c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserDataUsageConsent if necessary" disabled="true" id="b07f2b51-3af0-492e-aa5f-4c523c87f26f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>policyExists</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_44854 - StreamRenew - LLP - StreamOwnerMismatch - Stream_Renew_By_LLPCS_ManageAccountConsentPresent_sameOrg - 403 Forbidden</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases_P1</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ManageAccountConsent</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvOYMl6wDXYFqsySCTNAEiDL8DIl5AYUbBksGUi+/koGHCDLZWaeXGq3Tp9e1N2XDEWh6fmMQcJJTAubKKTMy6RVJU2oFyNGmEdRBMzj2Bv43Y5nFnUP7a8ohXazqvwuVexy2Zm4KoyDiWqVx446LkOgWtbEMkwHlyZgCVXGUmhTxhHlVcXUDVvVLdVwhrrj2bqnO8WyWR4phQdImMAWKkVd2ZHasKoy43zhadp6vS6uS8U4mWqmrhvaU7czwDOIkFK73HqUGUpqO31cDABDGOIijiPtUjvSuQyYNyBTiniawM5W8JktXdNdTegEjEy/KfldCNp0EmfHBqIxJRiF5BXJ+HSBz+Kg4IfTOCF8Fn3qhKFLYBU2WMWGRb8p2jG1M4GOGCYMqWyGjB1WHyaQAMVQuO+3q8q387KWXR0miLJJnETs+PhnfICuIIwXwgLbu7Wjdj7gB5GqXQL22hSHKSMr6MliXSAMbJdNwOdDFW4TmJBNhzBRoBsm2WmH9E6O22g0yRQY/5sEHSRnC/KAwhRq09ns+QVazuvqdj4aNJLRKJmNoO1W6qyaEThUzgR5arfHk6LMi2h7IyotFxu32x1dXDXpfPOdOterl9WMT50Q8UYrCkcdXmFj58Kf3+j3Px978f335sP6/iXqB/aPQePH1V19TfThpPf0OA2c6zmYUV1v9QbzWLNvr5atcI1YeePeuUvH15e3Jfcu7j0OR4v7h0V4ffNreEF/9ulzuPbbd8/UvpmNu70fXfM6tZZj3jAvxq/Przeofv30y6/m7hzwP5bt3/wgHT8D5vujLIN2s3AlsoT4181MSkigTjJVbyGbD+NAuVKTt2Tv8FLR7kjgiRxuz0apadaNRtltmQ3bNayWbpd023WNK90vlXx732S2LE4oNmI6IdKWbLnbsvmaII48BjSARF3Fqeh0TPkCsYk4KrRpXzyCmDIYxqI9T3loGDbMEYGpgeNKmFbmY/q6REqhF/MbepP4Ew7JcU92j3pyHzBZEJCNW9Y1E4XNuIjFEq1SgV5coSKFVLT2RHZZz7QqtsZItAhBMtWiOEhDKC5miywyGtt+TRVhlkn7rWH22j716/TfPgRCJyBSgUlf6iDSCKfDxRK+7B1557Dz4RDaw/tpQOTDEvHkCcFbJse/3spE1kdeI82OP7jdk851/+Du78bgt/GXAJ1/MN75V+Mil+9val/EUztNZW4oWJEDs/utQ8wv0fFq+0JcIqO4LKarVZrVnmWVtETAa6LBG9oAcCoa8sswngPVcgjtrOmXsz6xnMuP+aV8RgcccYjEQylkxzPWnQEwue60xQvfnLtLHZkUceOw4R/JGqFY1STjL7c57GGpJ8S34rOOk+AtXR9gHdgRfopthxM6lSc5+V4+KQocC1gienacHIJ/BPCR8WNhHuScCxfVNE45fP6nIJtxVUEYxynl7aaSCQ4HRMaTvyzAe1N6B5PNoHwpJf+/laokKwEMYpVlJMOXu4Un659OD4bMzujpnHErpuk3mrbl193DOVPRS+U8KEfsau/E7yUHcTqt8dp/</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:LLASP_CS_1</con:value></con:property><con:property><con:name>policyResource</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value/></con:property><con:property><con:name>assertionUserId</con:name><con:value>13D2B1C79E2C5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>13D29822ACD54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:13D29822AD424AB9E05305991F0A8037">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</Resource>
      <RequestingEntity>urn:dece:org:org:dece:RET</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-16T06:49:52.000Z" CreatedBy="urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:13D29822AD4C4AB9E05305991F0A8037">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</Resource>
      <RequestingEntity>urn:dece:org:org:dece:LLASP</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-16T06:49:56.000Z" CreatedBy="urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:13D29822AD544AB9E05305991F0A8037">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</Resource>
      <RequestingEntity>urn:dece:org:org:dece:LLASP_CS_1</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-16T06:49:59.000Z" CreatedBy="urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:13D2A366C38D0FEDE05305991F0AE9B7">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</Resource>
      <RequestingEntity>urn:dece:org:org:dece:DLASP</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-16T06:50:02.000Z" CreatedBy="urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:13D29822AD664AB9E05305991F0A8037">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</Resource>
      <RequestingEntity>urn:dece:org:org:dece:DLASP_CS_1</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-16T06:50:05.000Z" CreatedBy="urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:13D2B1C79E675914E05305991F0A33A5">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</Resource>
      <RequestingEntity>urn:dece:org:org:dece:LLASP_CS_2</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-16T06:50:14.000Z" CreatedBy="urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:13D2B46AEA4C6E30E05305991F0A10A3">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:13D29822ACD54AB9E05305991F0A8037</Resource>
      <RequestingEntity>urn:dece:org:org:dece:DLASP_CS_2</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-16T06:50:24.000Z" CreatedBy="urn:dece:userid:org:dece:13D2B1C79E2C5914E05305991F0A33A5">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove Allow Adult Policy" searchProperties="true" id="6cd2ad5c-c14f-485b-86cd-1f7cc52f9766"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0206fe8f-6a71-4a6c-a555-2b62e07c4595"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="469609ac-c3ba-4f4a-97bf-3f46c7da13ba"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:AllowAdult" id="62a24a2a-c035-4011-94db-c37cb80ce01f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ParentalControl:AllowAdult");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalControlAllowAdult")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:AllowAdult" id="8536a6a2-44e4-4b84-a521-c3c2f1852e9c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlAllowAdult")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="remove policies" disabled="true" id="26442d83-d995-4231-8fe6-571010ee6871"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = context.expand( '${#TestCase#useroid}' )

a = new dbUtils.dbPolicy(log,tP.getPropertyValue("targetSystem"));
log.info "useroid"+useroid;
//a.policyDelete(105,useroid,"deleted")
a.policyDelete(300,useroid,"deleted")
a.policyDelete(302,useroid,"deleted")</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZZc+I4EH6fX+HyPG4ZH9gBXIEqgmHHCTkWckzmJSXkttHGlokkc+TXr2RiAoRkk5kqqii1W91fH/q6jznKUsfvcg5MkJxqYdDWHxpHll13sWt4br1huBPHNZpWHBsQ4UkjttzIcixdCzkvIKRcICraumPZrmEdGY5zbbu+o361I7fxS9dugXFpWqrU5K1lllLul27besGonyNOuE9RBtwX2B93z4e+1PRRhUnvHK9Rlg5ZZyrEzDdNXIsAQ5riGs4z89jc0TmOuD8mCUWiYPDiM+Jt/eXuYrGoLeq1nCWmY1mWabVMqRNxknzXO9+qyxCFNM7X5x6iOSUYpeQZKVDnIKZ5pHXTJGdETLN3TNumbSnTBiyxgW2XftfNVwcluk9a2gHJODL4FNmVsRHEwIBi0G5GYVv//rkKru9eM0R5nLOM752/BgnoHNJ8BpHBq8gqdJ+3eCBdnWPAfkhxWnAyhwvVJjOEgWtXDGKyHBIumy/iWll+bcnlj1RdBvgrZTk2t7FK6OaB7AQkAS5+p2bb9VpbuUVpAR1+12t1sYduTueD3tEo7rXG8YQ2UDNK2iWEbeU1qE25X877zbrprZdL5MpLFuE8ua0PMAvvGvfmP+7Z0vJGl1MLUSb6Djw/mo3g7PxW3PSHpHs1cOxR01qduvml1S16J/eO9eSYg9bo8VsOq8z23JOEt+qTE+t5cnofD88u0V/d8VUwZlEQTs5+Fo+/nr07aP4gJxd3N/mPi9YsgPtxeB/Q87/Pf0KxeETJZPbNXfH7Abu9uGHXd3enT+mML9qvMW3HsCusKGFcTP4FLKqjao8w0AayXkh8TC9KQiIjLlX9meIoLoAKvaNuKWrxC0lAJPJlMddnWZ5+PagP+i3H6tndZt9yLXtgdS2v1Wp4Xr/ioDWKPYi9nMZE+VIsu+6fjwHizOdAI2DGPC/wFLj+gcUACaSFdCQfR045XOeSxe1FOp08ZyucuMnczjLvKXKWWd3DC127yMUlvWTdWADb5e7GDnePAJMZAUXwqsO5bHEuZDKe0LwQqV2boxqFQo4AplhY3mt6JifZLAUF1czyqEihNpvOytSYfP3vGAjzUjrqX5cv793A9r9VOZA6EVEKXMVyArKOcGAI2VUgbwL2Dg6ryny3iIh6YDKhghG8RrL76bVPVINsmiQYyndQgd7ofuHuQ2/8YP+mgeEfOB/+qXNZy7c3zQ/yae6XcuMompMtt9UiIGebZL5O1YhPqPZUK+bzomy9hmJ1Js2bktxtcwy4kNS8us4fgZobE+anJuMG9Z7njXwXXyGmdCyQgEw+FK08fmItGgNXa1Eon/jyszvXjkuZNwFLcUjWS+X2pBB/uGBhHys9Kb6Sf4ucRa/lOmBry4+MU+5CgtBEndQMXL3TFDiXZokk7ZxtGz9k4JDzXeEmyRssQnbTpBDw/hdNsXFbRxjnBRVhoJeC7QlR4hSrGfivSm/MlFPoZa1Y8nfXip/nw7Hk6gzpG13y/8oGKdsFg662lxJLW1/KLVk6p8nWRHoB+HYoNQJ7EFito97eUDpqbhK4E0nnjfitZCun+++h8x8=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6E3D7D1FD096C8E0401F0A05997568</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6E3D3FE920C1A8E0401F0A0599755E</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:FC6EA82A43218DCFE0401F0A07995A9A">
      <PolicyClass>urn:dece:type:policy:ParentalControl:AllowAdult</PolicyClass>
      <RequestingEntity>urn:dece:userid:org:dece:FC6E3D3FE920C1A8E0401F0A0599755E</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2014-06-22T14:51:30.000Z" CreatedBy="urn:dece:userid:org:dece:FC6E3D3FE920C1A8E0401F0A0599755E">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases_P2</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_14152 - StreamRenew - LLP - Policy - AllowAdult - US - MMPA - AdultContentNotAllowed - Without policy cannot renew IS_ADULT = 'Y'</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81175</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6EA82A43218DCFE0401F0A07995A9A</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6E3D3FE920C1A8E0401F0A0599755E</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6E3D7D1FD096C8E0401F0A05997568</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Allow Adult Policy Establishment" searchProperties="true" id="081c8ef5-e5c1-47f3-8a8a-62aba90bc069"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="3f7d3f31-8fff-4c14-a07c-ce42bd8076e6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="630a764a-a390-4462-949d-2100b69d9838"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.getPropertyValue("policyCreator") == tC.getPropertyValue("assertionUserIdFULL");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for Policy" id="860c084d-576c-463b-9b2f-d98887ec32fd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalControlAllowAdult")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for Policy if necessary" id="2b453121-8e2e-4ca2-bcb2-a3b0c06e6ace"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", tC.getPropertyValue("policyClass"));

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlAllowAdult")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for Policy" id="42da2ebc-8a8d-4e7e-aecf-d1970da5223c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyRequestEntity","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass", "ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for ParentalControlAllowAdult")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value>pVZZc+I4EH6fX+HyPG4ZH9gBXIEqgmHHCTkWckzmJSXkttHGlokkc+TXr2RiAoRkk5kqqii1W91fH/q6jznKUsfvcg5MkJxqYdDWHxpHll13sWt4br1huBPHNZpWHBsQ4UkjttzIcixdCzkvIKRcICraumPZrmEdGY5zbbu+o361I7fxS9dugXFpWqrU5K1lllLul27besGonyNOuE9RBtwX2B93z4e+1PRRhUnvHK9Rlg5ZZyrEzDdNXIsAQ5riGs4z89jc0TmOuD8mCUWiYPDiM+Jt/eXuYrGoLeq1nCWmY1mWabVMqRNxknzXO9+qyxCFNM7X5x6iOSUYpeQZKVDnIKZ5pHXTJGdETLN3TNumbSnTBiyxgW2XftfNVwcluk9a2gHJODL4FNmVsRHEwIBi0G5GYVv//rkKru9eM0R5nLOM752/BgnoHNJ8BpHBq8gqdJ+3eCBdnWPAfkhxWnAyhwvVJjOEgWtXDGKyHBIumy/iWll+bcnlj1RdBvgrZTk2t7FK6OaB7AQkAS5+p2bb9VpbuUVpAR1+12t1sYduTueD3tEo7rXG8YQ2UDNK2iWEbeU1qE25X877zbrprZdL5MpLFuE8ua0PMAvvGvfmP+7Z0vJGl1MLUSb6Djw/mo3g7PxW3PSHpHs1cOxR01qduvml1S16J/eO9eSYg9bo8VsOq8z23JOEt+qTE+t5cnofD88u0V/d8VUwZlEQTs5+Fo+/nr07aP4gJxd3N/mPi9YsgPtxeB/Q87/Pf0KxeETJZPbNXfH7Abu9uGHXd3enT+mML9qvMW3HsCusKGFcTP4FLKqjao8w0AayXkh8TC9KQiIjLlX9meIoLoAKvaNuKWrxC0lAJPJlMddnWZ5+PagP+i3H6tndZt9yLXtgdS2v1Wp4Xr/ioDWKPYi9nMZE+VIsu+6fjwHizOdAI2DGPC/wFLj+gcUACaSFdCQfR045XOeSxe1FOp08ZyucuMnczjLvKXKWWd3DC127yMUlvWTdWADb5e7GDnePAJMZAUXwqsO5bHEuZDKe0LwQqV2boxqFQo4AplhY3mt6JifZLAUF1czyqEihNpvOytSYfP3vGAjzUjrqX5cv793A9r9VOZA6EVEKXMVyArKOcGAI2VUgbwL2Dg6ryny3iIh6YDKhghG8RrL76bVPVINsmiQYyndQgd7ofuHuQ2/8YP+mgeEfOB/+qXNZy7c3zQ/yae6XcuMompMtt9UiIGebZL5O1YhPqPZUK+bzomy9hmJ1Js2bktxtcwy4kNS8us4fgZobE+anJuMG9Z7njXwXXyGmdCyQgEw+FK08fmItGgNXa1Eon/jyszvXjkuZNwFLcUjWS+X2pBB/uGBhHys9Kb6Sf4ucRa/lOmBry4+MU+5CgtBEndQMXL3TFDiXZokk7ZxtGz9k4JDzXeEmyRssQnbTpBDw/hdNsXFbRxjnBRVhoJeC7QlR4hSrGfivSm/MlFPoZa1Y8nfXip/nw7Hk6gzpG13y/8oGKdsFg662lxJLW1/KLVk6p8nWRHoB+HYoNQJ7EFito97eUDpqbhK4E0nnjfitZCun+++h8x8=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6E3D7D1FD096C8E0401F0A05997568</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6E3D3FE920C1A8E0401F0A0599755E</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:8001/rest/1/11/Account/urn:dece:accountid:org:dece:FC6E3D7D1FD096C8E0401F0A05997568/User/urn:dece:userid:org:dece:FC6E3D3FE920C1A8E0401F0A0599755E/Policy/urn:dece:type:policy:ParentalControl:AllowAdult</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:FC6E3D3FE920C1A8E0401F0A0599755E</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:userid:org:dece:FC6E3D3FE920C1A8E0401F0A0599755E</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases_P2</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_14152 - StreamRenew - LLP - Policy - AllowAdult - US - MMPA - AdultContentNotAllowed - Without policy cannot renew IS_ADULT = 'Y'</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81177</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6EA82A43218DCFE0401F0A07995A9A</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6E3D3FE920C1A8E0401F0A0599755E</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6E3D7D1FD096C8E0401F0A05997568</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Setup" disabled="true" id="a46914ae-c3af-4eaa-8ea9-aa9a59a6c3b8"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccName_Gen" searchProperties="true" id="22783bc4-6400-4317-8d8c-0b8a3952b49d"><con:settings/><con:testStep type="datagen" name="AccName" id="9bf26b6d-5575-4202-a34f-f93b7b118ecd"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Script"><con:configuration><script>def today= "Ashwin_Acc_Create_" + new Date().format( 'yyyyMMdd_hhmms' );

return today; 
</script></con:configuration><con:name>AccName</con:name><con:mode>READ</con:mode><con:shared>true</con:shared></con:property></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="c1aa5e47-da23-4f91-8dbc-878d16b0659c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>DisplayName</con:name><con:sourceType>AccName</con:sourceType><con:sourceStep>AccName</con:sourceStep><con:targetType>AccountDisplayName</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get_User_Details" searchProperties="true" id="353f546b-a379-4e6c-9dfa-b203605afdb5"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="986cdefe-568c-4017-a530-9e1113ba97c3"><con:settings/><con:config><script>String userid;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def targetHost = testProject.getPropertyValue("targetHost");
//def nodeaccountId = testCase.getPropertyValue("nodertraccountid");

def a = testRunner.testCase.getTestStepByName('User_Create').httpRequest.response.responseHeaders["Content-Location"];
def b = a.toURL();
def urlStr = b.getPath();

//Assert the hostname in the URL is correct
//assert b.getHost().matches(targetHost.toString());
//Assert the protocol is correct
//assert b.getProtocol().matches("https");
//Assert the URI is correct
//assert b.getPath().matches("/dece/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9]*" );
//this.log.info "b is " + b.getPath();


//this.log.info "urlStr is " +urlStr;

int lastSlash = urlStr.lastIndexOf(':');
accountid = urlStr.substring(lastSlash + 1);

//this.log.info "lastSlash is " +lastSlash + "and user id is " + userid ;

testProject.setPropertyValue("NODEUSERID",userid);
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserName_Gen" searchProperties="true" id="4d5c31e1-6609-4b1d-a173-8e012440c196"><con:settings/><con:testStep type="datagen" name="UserName" id="34b5e764-b798-4e9d-b808-fdd7afe1b2c4"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Script"><con:configuration><script>def today= "stream_renew_" + new Date().format( 'yyyyMMdd_hhmms' );

return today; 
</script></con:configuration><con:name>UserName</con:name><con:mode>READ</con:mode><con:shared>true</con:shared></con:property></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="6840a499-2899-4979-9c24-3959f7e3a4e0"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>DisplayName</con:name><con:sourceType>UserName</con:sourceType><con:sourceStep>UserName</con:sourceStep><con:targetType>UserName</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Node_Value</con:name><con:value>urn:dece:role:dece</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Delete" searchProperties="true" id="40ffd973-8b3e-4e23-9986-9ca5541fcd41"><con:settings/><con:testStep type="jdbc" name="Delete_User" id="c56e7c2f-4e65-4a53-8a76-6f52e82cb7be"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>DECLARE
MyAccount ACCOUNT.ACCOUNT_OID%TYPE;
MyUser ACCOUNT_USER.USER_OID% TYPE;
num NUMBER;
BEGIN
SELECT count(*) into num FROM ACCOUNT_USER where ACCOUNT_OID = (select ACCOUNT_OID from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}');
IF (num > 0)
THEN
for MyUser in (SELECT USER_OID FROM ACCOUNT_USER where ACCOUNT_OID= (select ACCOUNT_OID from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}'))
LOOP
Select ACCOUNT_OID into MyAccount from ACCOUNT_USER where USER_OID = MyUser.USER_OID;
--delete from node_user_saml_assertion where NODE_USER_OID = (select NODE_USER_OID from node_user where USER_OID = MyUser.USER_OID) ;
delete from node_user where USER_OID = MyUser.USER_OID;
delete from user_address where USER_OID = MyUser.USER_OID;
delete from user_alt_email where USER_OID = MyUser.USER_OID;
delete from user_language where USER_OID = MyUser.USER_OID;  
delete from user_status_history where USER_OID = MyUser.USER_OID;
delete from user_security_questions where USER_OID = MyUser.USER_OID;
delete from email_notification where USER_OID = MyUser.USER_OID;
delete from account_user_avatar where USER_OID = MyUser.USER_OID;
delete from NEWSFEED_PARM_VAL where NEWSFEED_EVENT_OID in (select NEWSFEED_EVENT_OID from NEWSFEED_EVENT where ACCOUNT_OID = 
MyAccount);
delete from NEWSFEED_EVENT where ACCOUNT_OID = MyAccount;
delete from account_user where USER_OID = MyUser.USER_OID;
commit;
END LOOP;
END IF;
END;
</con:query><con:storedProcedure>false</con:storedProcedure><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set_PEM" searchProperties="true" id="d707bc36-0dc8-4e81-a866-9dbc949a2214"><con:settings/><con:testStep type="groovy" name="Set_Pem_File" id="1c930ee5-dc18-4671-8e96-4d92487de06e"><con:settings/><con:config><script/></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Node_Setup for streams" searchProperties="true" id="2b05fd69-4fca-48b9-beb3-94639c720269"><con:settings/><con:testStep type="jdbc" name="Update_Node_Role" id="64683bb4-5976-42ba-8ffd-f37acbb8c293"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>update NODE_ROLE set ROLE = '${#TestCase#Node_Value}' where NODE_OID = '${#TestCase#Node_OID}'</con:query><con:storedProcedure>false</con:storedProcedure><con:assertion type="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>Node_Value</con:name><con:value>urn:dece:role:lasp:linked</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>C381F9C22E4A41E6E0401F0A0599030B</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="End_To_End" disabled="true" id="271e0208-3a9c-44f1-9982-d6da8bd9b330"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountNameGeneration" searchProperties="true" id="9cae0a72-c324-4a9b-b90c-05fde3fc4e51"><con:settings/><con:testStep type="calltestcase" name="AccName" id="34c9a213-ccf1-418a-a573-58ed063f061b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>22783bc4-6400-4317-8d8c-0b8a3952b49d</con:targetTestCase><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name></con:property><con:property><con:name>sName</con:name></con:property></con:properties><con:returnProperties><con:entry>synced</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>UserNameCounter</con:name><con:value>6</con:value></con:property><con:property><con:name>LoopUntil</con:name><con:value>6</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E2E</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c0697308-b6c8-47f7-96a0-bcb6977b8f38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountCreate" searchProperties="true" id="25b124d8-e7d2-47e0-a094-69722a58ef19"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="groovy" name="Set pem" id="f9460fdf-1ac0-48dc-9e34-20089ed6d452"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Account_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create" id="460723e3-59b6-48e6-b6ed-d0f930239dd0"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account" methodName="AccountCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting><con:setting id="discardResponse">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#coordinatorSchema}"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="03ecb40c-96be-49ac-b978-5200b11706c0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="cfcb2716-fc90-423c-bf26-44eb11d79790"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="2ae24391-7ffb-4b72-a685-6a11e5ec11eb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
def nodeacc = context.expand( '${#Project#NODEACCID}' )
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#VersionMajor}' );
String minor = context.expand( '${#Project#VersionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

     if(minor == tP.getPropertyValue("versionUrlEncode"))
     {
	assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeaccountid     = urlStr.substring(lastSlash + 1);
	accountid = urlStr.substring(lastColon + 3);
	
	tP.setPropertyValue("ACCOUNTID",accountid);
	tP.setPropertyValue("NODEACCOUNTID",nodeaccountid);
     }
     else
     {
	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeaccountid     = urlStr.substring(lastSlash + 1);
	accountid = urlStr.substring(lastColon + 1);
	
	tP.setPropertyValue("ACCOUNTID",accountid);
	tP.setPropertyValue("NODEACCOUNTID",nodeaccountid);
     }
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:147666C1A0102808E05305991F0ACC22</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>500500</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>39da0c46-7f38-4527-b6be-af58fbc91aba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bf0fa3e3-b1e7-4bf9-9635-da2c55ceeed9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0696f15b-f3ce-463e-b03b-33fc4c9d061d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserNameGeneration" searchProperties="true" id="93af9c8d-5f2b-4d9d-9080-a9b61e4cc85b"><con:settings/><con:testStep type="groovy" name="SetCounter" id="104468d8-aea4-480d-9c74-f7de83d7801a"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("UserNameCounter","1");
testCase.setPropertyValue("LoopUntil","6");</script></con:config></con:testStep><con:testStep type="calltestcase" name="Get_UserName" id="9f7a9588-6c88-497e-9b28-bc535a3b744c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>4d5c31e1-6609-4b1d-a173-8e012440c196</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property><con:property><con:name>Node_Value</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="Delay" id="d30b6e68-2a47-490a-871f-9d34953b4889"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="SetUserNames" id="796a34b7-52f1-4960-81fa-f70bd4f674be"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def UserName = testProject.getPropertyValue("UserName");

def count = testCase.getPropertyValue("UserNameCounter").toInteger();

if(count == 1)
{
	testProject.setPropertyValue("UserName_FAU1",UserName);
	log.info "==============="
}
if(count == 2)
{
	testProject.setPropertyValue("UserName_SAU1",UserName);
	log.info "==============="
}
if(count == 3)
{
	testProject.setPropertyValue("UserName_BAU1",UserName);
	log.info "==============="
}
if(count == 4)
{
	testProject.setPropertyValue("UserName_FAU2",UserName);
	log.info "==============="
}
if(count == 5)
{
	testProject.setPropertyValue("UserName_SAU2",UserName);
	log.info "==============="
}
if(count == 6)
{
	testProject.setPropertyValue("UserName_BAU2",UserName);
	log.info "==============="
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter and loop again if necessary" id="88e6dc82-2fec-449a-a087-93ddd18cc477"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def counter = testCase.getPropertyValue("UserNameCounter").toInteger();
def loopuntil = testCase.getPropertyValue("LoopUntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("UserNameCounter",counter.toString());
    testRunner.gotoStepByName("Get_UserName");
}
</script></con:config></con:testStep><con:properties><con:property><con:name>UserNameCounter</con:name><con:value>6</con:value></con:property><con:property><con:name>LoopUntil</con:name><con:value>6</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c0697308-b6c8-47f7-96a0-bcb6977b8f38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FirstUserCreate" searchProperties="true" id="1986561c-c195-4f4b-9401-ff82c4321a94"><con:settings/><con:testStep type="groovy" name="Set properties from calling test case" id="65d7c030-1974-4dff-baa0-49077451164c"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));
testCase.setPropertyValue("UserClass",callTC.getPropertyValue("UserClass"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="632c318c-e328-4c54-978d-c6ee1c301e76"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Set Coord Schema"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "V2: "+tP.getPropertyValue("VersionMinor");

def v2 = context.expand( '${#Project#VersionMinor}' )
def schema = tP.getPropertyValue("coordinatorSchema_"+v2);

tP.setPropertyValue("coordinatorSchema",schema);
log.info "Setting the coordinatorSchema value ---- "+schema;

//a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));
//assert a.cidSetStatusActive('urn:dece:cid:file:STREAMS_CIDVersion_828445.txt')==1</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="6b257344-8b32-461f-b2a7-9263c2679057"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account" methodName="AccountUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#coordinatorSchema}"> 
	<DisplayName>${#Project#AccountDisplayName}</DisplayName>
	<Country>${#Project#Country}</Country>
	<UserList>
<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#coordinatorSchema}">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>uvtc_user</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	 <Value>testing@uvvutesting.biz</Value>
        <!--<Value>sunitha.pemmasani@neustar.biz</Value>-->
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>testing1@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	
                <Password>testing</Password> 
	</Credentials>
</User>
</UserList>
</Account>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8ec19c93-3bf1-4caa-a49b-0e6eb7febc0b"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCOUNTID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="26d877fc-83db-4ad2-bb8b-0bf9e033bc58"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="44189932-0d64-4136-bf68-ffd2521a7050"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#VersionMajor}' );
String minor = context.expand( '${#Project#VersionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

                if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
                {                              
                                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");                             
                } else {
                                assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
                }

                urlStr = URLDecoder.decode(urlStr);
                def arrayString = urlStr.split("Account/");
      arrayString= arrayString[1].split("/User/");
      log.info "Node_User_ID=="+arrayString[1]
      log.info "Node_Account_ID=="+arrayString[0]


      

       int lastColon = arrayString[1].lastIndexOf(':');
       accountid     = arrayString[0].substring(lastColon+4);
       userid     = arrayString[1].substring(lastColon +1);
       def useridfull = arrayString[1];    
       def accountidfull = arrayString[0];     
       log.info useridfull  
                                         
       
 
     tP.setPropertyValue("ACCOUNTID",accountid);
	tP.setPropertyValue("NODEACCOUNTID",accountidfull);                           
	tP.setPropertyValue("USERID",userid);
	tP.setPropertyValue("USERIDFULL",useridfull);
	tP.setPropertyValue("NODEUSERID",useridfull);
	

     }
 else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:188C10A6E9C7EB4FE0533D991F0AB3D3/User/urn:dece:userid:org:dece:188C10A6E9C8EB4FE0533D991F0AB3D3</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>UserName</con:name><con:value>stream_renew_20150615_031857</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7f3628e8-17b4-4b24-9a27-1a62fd725b3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserCreate_Standard" searchProperties="true" id="f58dfd6a-8ec9-4e7e-b686-57ed698b508e"><con:settings/><con:testStep type="groovy" name="Set properties for User" id="c738477b-c397-48d6-939c-8532268ee9cf"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));
testCase.setPropertyValue("UserClass",callTC.getPropertyValue("UserClass"));
testCase.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
testCase.setPropertyValue("DateOfBirth",callTC.getPropertyValue("DateOfBirth"));

def NODEUSERIDFULLDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDFULLDecoded",NODEUSERIDFULLDecoded)
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="7c381184-8c5e-4b43-ac19-cacc5eee84cd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="3ca78a59-5f45-4483-82c8-699358040097"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="${#TestCase#UserClass}" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>sau</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#primaryemail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>UK</Country>
	</Address-->
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
<!-- <DateOfBirth> depricated </DateOfBirth> -->      <LegalGuardian>${#TestCase#NODEUSERIDDecoded}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	
                <Password>${#TestCase#Password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8ec19c93-3bf1-4caa-a49b-0e6eb7febc0b"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCOUNTID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="2883bc5d-9fb4-4624-8b20-a5227b9eb661"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="bf717d6a-0fbe-44b8-8e30-18737abbc70f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#VersionMajor}' );
String minor = context.expand( '${#Project#VersionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

     if(minor == tP.getPropertyValue("versionUrlEncode")){
	assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");	
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 3);
     tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
     }
     else
     {
     assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 1);
     tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
     }
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7002/rest/1/07/Account/urn:dece:accountid:org:dece:EBFC43CD0F2A9475E0401F0A05996412/User/urn:dece:userid:org:dece:EBFC513F93D1E093E0401F0A05991966</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>UserName</con:name><con:value>ashwin_user_create_20131125_125632</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:DB93D9108325E854E0401F0A0799736D</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1997-01-07</con:value></con:property><con:property><con:name>NODEUSERIDFULLDecoded</con:name><con:value>urn:dece:userid:org:dece:E461D82DF0911A0CE0401F0A059929E3</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certificates\/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7f3628e8-17b4-4b24-9a27-1a62fd725b3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForFirstUser" searchProperties="true" id="48f85906-581b-4d49-a920-fd9cf97d5f7a"><con:settings/><con:testStep type="groovy" name="Set pem" id="957e7b71-b163-4355-856a-ee0eea79ca50"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testProject.setPropertyValue("userIndex","0");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
//this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID" id="b98d7b89-eb7d-48c0-b74b-96fd7c4f10c8"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();



def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;



if(testProject.getPropertyValue("count") != "1"){
//def NODEUSERIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
//testProject.setPropertyValue("NODEUSERID",NODEUSERIDEncoded)
//testProject.setPropertyValue("NODEUSERIDFAU1_Encoded",NODEUSERIDFAU1_Encoded)

//def NODEACCOUNTIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
//testProject.setPropertyValue("NODEACCOUNTID",NODEACCOUNTIDEncoded)

testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;	
}



</script></con:config></con:testStep><con:testStep type="groovy" name="set user index and create policies" id="5216568d-e179-4482-b408-2a341bdbfb3f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def audienceArray = testProject.getPropertyValue("audienceList").toString();
if(audienceArray.contains(";"))
{
def audiencelistArray = testProject.getPropertyValue("audienceList").toString().split(";");
def l = audiencelistArray.length;
log.info "l==="+l;
def userIndex = testProject.getPropertyValue("userIndex").toInteger();
log.info "userindex====="+userIndex;


String nodeoid = testProject.getPropertyValue("nodeoid"+testProject.getPropertyValue("count")+testProject.getPropertyValue("userIndex"));
testProject.setPropertyValue("Node_OID",nodeoid.toString());

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
if(testProject.getPropertyValue("userIndex") != "0"){
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
}
}

</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="7b718197-2b64-4398-977e-65b234947712"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
      <dece:Resource>${#Project#policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#USERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" id="fa22a7f9-575c-4534-a83b-56079c967123"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="6727db4b-6e86-43c7-8e21-81d59a82b165"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Go to policy create again if necessary" id="bec738ff-6c9d-4987-bc66-5a464e56db22"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def audiencelistArray = tP.getPropertyValue("audienceList").toString().split(";");
def Length = audiencelistArray.length;
log.info "l====="+Length;
def userIndex   = tP.getPropertyValue("userIndex").toInteger();

if(Length > userIndex+1){
    userIndex++;
    log.info "========"+userIndex
    tP.setPropertyValue("userIndex",userIndex.toString());
    
    testRunner.gotoStepByName("set user index and create policies");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set the initial properties" id="28fc1319-99f3-4bea-9cef-e6e67437f221"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("userIndex","0");
String nodeoid = tP.getPropertyValue("nodeoid"+tP.getPropertyValue("count")+tP.getPropertyValue("userIndex"));
log.info"========"+nodeoid
tP.setPropertyValue("Node_OID",nodeoid.toString());
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = false;

</script></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_2_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f020102-31af-4191-b98e-c0bba2ab7ab5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>707eff09-f96a-455f-b067-5fcaba4a8db6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71a94c3c-2ce0-4432-b4cd-f0190ffabade</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5c31e517-f3d1-4b5b-8698-6d855054e184</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForStandardUser" searchProperties="true" id="981a4631-c248-4b38-a89e-6e58e0761fac"><con:settings/><con:testStep type="groovy" name="Set pem" id="5c440fb0-6e7a-4886-9f7e-9a8b36361073"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID" id="4a7921b7-4097-464e-bb57-f671f438a36c"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;

if(testProject.getPropertyValue("count") != "1"){
//def NODEUSERIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
//testProject.setPropertyValue("NODEUSERID",NODEUSERIDEncoded)
//testProject.setPropertyValue("NODEUSERIDFAU1_Encoded",NODEUSERIDFAU1_Encoded)
//
//def NODEACCOUNTIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
//testProject.setPropertyValue("NODEACCOUNTID",NODEACCOUNTIDEncoded)

testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
}</script></con:config></con:testStep><con:testStep type="groovy" name="set user index and create policies" id="e0a0c981-f257-48ab-afd6-6a887a8b4112"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def audienceArray = testProject.getPropertyValue("audienceList").toString();
if(audienceArray.contains(";"))
{
def audiencelistArray = testProject.getPropertyValue("audienceList").toString().split(";");
def l = audiencelistArray.length;
log.info "l==="+l;
def userIndex = testProject.getPropertyValue("userIndex").toInteger();
log.info "userindex====="+userIndex;


String nodeoid = testProject.getPropertyValue("nodeoid"+testProject.getPropertyValue("count")+testProject.getPropertyValue("userIndex"));
testProject.setPropertyValue("Node_OID",nodeoid.toString());

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");

//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
if(testProject.getPropertyValue("userIndex") != "0"){
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
}
}</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="be2dcfee-1dfa-41a8-b78d-a46766123005"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
  <dece:Resource>${#Project#policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#USERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" id="bb78f383-d308-4a2a-9062-579270d31d3d"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="e80b4fad-82b2-4d1b-805a-c22bc451a81a"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Go to policy create again if necessary" id="04bc7730-2d0a-4cac-9259-426d44a0428a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def audiencelistArray = tP.getPropertyValue("audienceList").toString().split(";");
def Length = audiencelistArray.length;
log.info "l====="+Length;
def userIndex   = tP.getPropertyValue("userIndex").toInteger();

if(Length > userIndex+1){
    userIndex++;
    log.info "========"+userIndex
    tP.setPropertyValue("userIndex",userIndex.toString());
    
    testRunner.gotoStepByName("set user index and create policies");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set the initial properties" id="101c6a74-e0d7-4f94-9946-054590f7f985"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("userIndex","0");
String nodeoid = tP.getPropertyValue("nodeoid"+tP.getPropertyValue("count")+tP.getPropertyValue("userIndex"));
log.info"========"+nodeoid
tP.setPropertyValue("Node_OID",nodeoid.toString());
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = false;

</script></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B98D77DD7311E0401F0A05991189</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certificates\/DLASP_CS_2_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95c44820-dc3d-41b1-aaeb-046ed883cdd0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bebf0d96-3664-4297-8a60-39c898da110e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ae07363f-1c5d-48de-93f1-d5ae9ad79a72</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="STS" searchProperties="true" id="9bf04a26-beef-4b3f-8224-c4cf3c04ebbf" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4db725a4-5eea-4c68-baeb-3d81286bc0c3"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));

if(testProject.getPropertyValue("V2") == testProject.getPropertyValue("versionUrlEncode"))
{
	def audienceList = URLEncoder.encode(testProject.getPropertyValue("audienceList"),"UTF-8");
	testCase.setPropertyValue("audienceList",audienceList);
	def tokentype = URLEncoder.encode(testProject.getPropertyValue("tokentype"),"UTF-8");
	testCase.setPropertyValue("tokentype",tokentype);
}
else
{
	def audienceList = URLDecoder.decode(testProject.getPropertyValue("audienceList"),"UTF-8");
	testCase.setPropertyValue("audienceList",audienceList);
	def tokentype = URLDecoder.decode(testProject.getPropertyValue("tokentype"),"UTF-8");
	testCase.setPropertyValue("tokentype",tokentype);
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem1" id="703d0266-2588-4a04-b79a-f3f8991119a1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("STS - POST");
RestTestRequestStep testStep1 = tC.getTestStepByName("GET - STS");
def keyStorePath = tC.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="STS - POST" id="554720c8-f9b9-456d-8e67-4cce3f46da51"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/SecurityTokenExchange" methodName="STSCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STS - POST" mediaType="application/xml" postQueryString="false" sslKeystore="DLASP_CS_2_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
<Credentials xmlns="${#Project#coordinatorSchema}">
  <Username>${#TestCase#UserName}</Username> 
  <Password>${#TestCase#Password}</Password> 
</Credentials>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="fa7995e8-03c8-4191-840e-4453f03b89e4"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="tokentype" value="${#TestCase#tokentype}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Rerun STS Post"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def tStep = testCase.getTestStepByName("STS - POST");

log.info "#########################IN RERUN ######################" + tStep.getName();
String status = tStep.httpRequest.response.responseHeaders["#status#"]; 


if(!status.contains("201 Created"))
{
	log.info "STS Post not Sucessful Retrying...!";
	testRunner.runTestStepByName(tStep.getName());
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="c1d0cf4c-d0db-485c-bfb5-9ce91ae6b286">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def tStep  = tC.getTestStepByName('STS - POST');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
//log.info connection[0];
log.info contentType[0];
log.info contentLength[0];
log.info contentLocation[0];

tC.setPropertyValue("status",status[0]);
//tC.setPropertyValue("connection", connection[0]);
tC.setPropertyValue("contentType", contentType[0]);
tC.setPropertyValue("contentLength", contentLength[0]);
tC.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

    	//XMLbody =  strVal.tokenize('\n').last();

	String XMLbody  = strVal.substring(startAssert, strVal.size());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="847d9319-bc96-487f-829b-e8a18ed2873f">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def major = tP.getPropertyValue("VersionMajor");
def minor = tP.getPropertyValue("VersionMinor");
def expectErrType = tC.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="GET - STS" id="3f989a29-38bb-45d4-a354-6cc7d7132b09"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/Assertion/{ASSERTION}" methodName="STSGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STS" mediaType="application/xml" sslKeystore="DLASP_CS_2_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="31743bc4-b3c6-4521-8732-aa46248b343c"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 200 OK]";</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#UserName}</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers 1" id="f6c5755d-45e7-41d0-830a-47968823bd42"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def callTSname = tC.getPropertyValue("sName");
//def callTCname = tC.getPropertyValue("tName");
//
//def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def tStep  = tC.getTestStepByName('GET - STS');


/*
*  Get the HTTP headers
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
	   /*	case "Location": 
			contentLocation = value[0];
		break;*/
		case "#status#": 
			status = value[0]; 
			break;
		/*case "Connection": 
			connection = value[0]; 
			break;*/
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
//def contentLocation = tStep.httpRequest.response.responseHeaders["Content-Location"];

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
//tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
//tC.setPropertyValue("contentLength", contentLength);
//tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="f565414e-21d1-4187-87d8-275fd63b8965"><con:settings/><con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
import java.lang.*;

//import groovy.sql.Sql;
//import org.apache.commons.codec.binary.Base64;

//com.eviware.soapui.support.ClasspathHacker.addFile( new File("opensaml-2.3.1.jar") );

//import org.opensaml.*;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/

//BaseID base64Encoder1 = new BaseID();

byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("assert", base64encodeStr);

//tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("Count")+"1", "SAML2 Assertion="+base64encodeStr);
tP.setPropertyValue("SAML",base64encodeStr);

//DatatypeHelper DTH = new DatatypeHelper();

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract and Store Account and User Info based on Assertion UUID" id="7b5471f5-baac-4590-810f-75f8d5b87d4e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody       = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrType");

if(tP.getPropertyValue("count") != "1"){
if (expectErrType == "" || expectErrType == "SUCCESS") {
                if (XMLbody.length() > 0) {
                                def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

                                                // Verify response sizes...
                                                assert myXML.size() == 1;

                                                /*
                                                String accountId = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
                                                String userId    = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID";
                                                */
                                                String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
                                                String userId    = myXML."saml2:Subject"."saml2:NameID";
                                                
                                                this.log.info "accountId [$accountId]";
                                                this.log.info "userId [$userId]";

                                                tC.setPropertyValue("assertionAccountId",accountId.substring(accountId.lastIndexOf(":")+1, accountId.length()));
                                                tC.setPropertyValue("assertionUserId",   userId.substring(userId.lastIndexOf(":")+1,userId.length()));
                                                tC.setPropertyValue("assertionAccountIdFULL",accountId);
                                                tC.setPropertyValue("assertionUserIdFULL",userId);
                                                tP.setPropertyValue("NODEACCOUNTID",accountId);
                                                tP.setPropertyValue("NODEUSERID",userId);

                                                def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID"); 
                                                int lastColon = nodeaccountid.lastIndexOf(':');
                                                def accountid = nodeaccountid.substring(lastColon + 1);
                                                tP.setPropertyValue("ACCOUNTID",accountid);
                                                def nodeuserid = tP.getPropertyValue("NODEUSERID"); 
                                                int lastSlash = nodeuserid.lastIndexOf(':');
                                                def userid = nodeuserid.substring(lastSlash + 1);
                                                tP.setPropertyValue("USERID",userid);
									     if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
										{
											def nodeacctid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
										     tP.setPropertyValue("NODEACCOUNTID",nodeacctid);
										     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
										     tP.setPropertyValue("NODEUSERID",nodeuseridfull);
										}
										else
										{
											def nodeaccid = tP.getPropertyValue("NODEACCOUNTID");
										     tP.setPropertyValue("NODEACCOUNTID",nodeaccid);
										     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
										     tP.setPropertyValue("NODEUSERID",nodeuseridfull);
										}
                                                this.log.info "assertionAccountId property is " + tC.getPropertyValue("assertionAccountId");
                                                this.log.info "assertionUserId property is " + tC.getPropertyValue("assertionUserId");
                } else {
                                return false;
                }
}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>CE0F1A1CC2F69345E0401F0A07990CC5</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc6JKEP4rFnncQkDQCBWtUtEcz5qrJpv1JTUZGh0DM8gMavLrzwwqq8bkuLtP1DQ9X399me6+4CiOKl6Lc0gFYbS0iiPKvVza0LKUegxxwj2KYuCewN6wdTXwKmXTQ9srWqnvN7Tnum1j9xxXdGSCqTvVsK6jOoBeDwGwYwaWiwOpynkGfcoFoqKhVUyrqps13aqOTNdzqp7tll3TGWulR0i5xJYqZVPbkFrxhjYVIvEMY7lclpd2maUTo2KalvF0NRjiKcRIa16sPcoNpc2NPi4HgCGKcBmz2Lgw9nQuAu4NyYQikaWwsRV8Zss0TNeQOgEnkzOtuAtBn4YsP3YQZZRgFJF3pOJzBWLKglIrmrCUiGn8qROWqYB1WGEdWw4904x9aicC7TFMOdL5FFkbrHsIIQWKofRw329oZ6dlLb86ShHlIUtjvn/8PT5AFxCxBAKdb93aUDsd8EikmheAvT7FUcbJAq5VsSYIA99kE/DpUKXbFEKyGhAuC3TFFTtjl97BcR0Nn0yAiz9J0E5y1iCPKMqgeefTH5ev9Idz/+4vO4Y/TWfoBvuDles0cgK7yrmgSO36eFCURRGtb7Dx9BH/U31s13r8slYddB96Nw/n4XdRfxl9W87brMaMa/epP7ZF62c0+wbXd1cvrZ8/VpX3CWHuuBadp/Zd1H57wXbkPwBBs3g2gLRNX+103Luqvc0SOhkug+sFGl3ab0ZvPp4Mp8GloA5duYt/k9XwaeFMb8Vi3O137Wg5qH1jD8lTP7y+RWCP5peu+RS26/7PRuHODv992fbND7OXGWCxPaoy6PulnswSEl83MyUhgR7mql6img8XQIXWVLdU7/Ay2e5I4Mkcrs9Wvd6xzFat63bq3bbT65pV2/Zd1+qZrbbt29sms2ZxQLHDaEiULdVy12XzNUEcexxoAKm+YJnsdFz7AtFHApX69F4+AkY5jJhsz4y5y8Tk5CXIZlZUx7PzEDmv7/FUK10zcUNv0lYoIN3ryVZlryffAyYJAdW4VV1zWdhcyFjM0SITkVVeoDKFTLb2VHVZr+LUqwYncRKBYmrELMgiKCfTJI+Mwddf2Xowz6X33VH+2j716/DfNgRSJyBKgStf2iDTCEeGS2XryAeHa0eH0Ba+lQVEPSwZT5ESvGay/+tXmaj6KGrEH7SGt1vShe5v3H3uDJ+tPwQY/IXxwd8al7n8eNP4Ip7GYSoLQ8GC7Jjdbh1yfsmO19wW4hxZ5Xk5WyyyvPYcxzZSCW+oIjDMijEEnMme/DZir0CNAsU4aQAWxA+MF/J9ipmY0qFAAmL5Vkr58YSNZwhcbTx9+chXp65TeyZl6ASsxDFZJ5LbmmL85UKHPaz0pPhWfpYs/eX4MawdO9JPufAIQifqpIbf2yd1gZmEJbJts3QX/BjAMeP7wiLIBRchC+olE/D5n5Lqxw0NYcwyKvq+lgt2Z0TOU7wl4P1S+gCTj6FiLyX/v5jqJC8BDHKb5STHV+uFp54AnezMmY3RT0bN+VejZp9d84P4o2QnToc13vwP</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_833c97c2-a0e0-45f8-a8ee-8feec40d19cd</con:value></con:property><con:property><con:name>assertIdL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value>_833c97c2-a0e0-45f8-a8ee-8feec40d19cd</con:value></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>CE0F1A1CC2F19345E0401F0A07990CC5</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>3512</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>CE0FA9BFE5F30C65E0401F0A07990DF9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>uname</con:name><con:value>shikha_user_create_accp_test_20110610_11508</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150615_031857</con:value></con:property><con:property><con:name>useroid</con:name><con:value>CE0FA9BFE5F80C65E0401F0A07990DF9</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa1.q.uvvu.com:443/rest/2015/02/SecurityToken/Assertion/_833c97c2-a0e0-45f8-a8ee-8feec40d19cd</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
<Error ErrorID="urn:dece:errorid:org:dece:securitycontext:certificate_not_provisioned">
       <Reason Language="en">The security token is required.</Reason>
        <OriginalRequest></OriginalRequest>
       <ErrorLink></ErrorLink>
    </Error>
</ErrorList>
]]></con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value/></con:property><con:property><con:name>assertionUserId</con:name><con:value/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_2_concat.pem</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:DLASP_CS_2</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>800673c1-3147-4c8c-b0c1-58e0015b4b03</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>175431f8-b1ab-411a-838d-f62e6ec865f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7b4251c4-b0c9-4524-b11d-58f032477794</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ad58565a-ea44-49b7-aab1-812ed0ed9584</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63c7be09-e6de-4048-88a8-4093708a9d7b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a41302e2-c2f1-4384-92f7-153edc9522ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2fe33502-92b9-4bc5-9cab-1083378ddd6c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1adab77f-1cd6-4d9f-ac40-f99f00ddbb94</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>af3889f5-e9ad-4a18-837c-7ead87c1caed</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fdb00829-308f-406e-9775-a6c8de3621f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98f48738-f6c6-4056-be18-f24b60c6a023</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cb39d541-2f26-4a00-9fc8-5a5ea810f40b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserCreate_Basic" searchProperties="true" id="103cb904-d5e6-4280-b6d7-346eb7fcce8c"><con:settings/><con:testStep type="groovy" name="Set properties for user" id="21a74e9c-c550-4ffd-abbb-e3d543d9d476"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));

def NODEUSERIDFULLDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDFULLDecoded",NODEUSERIDFULLDecoded)
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="d4f459af-49cf-4078-9233-95f2321af52d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="049fd687-b69b-4bb9-99ae-57e4b0d2a181"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:basic" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>bau</SurName>
	</Name>	
	
  <DisplayImage>
        <DisplayImageData>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
ral9qbL/2Q==</DisplayImageData>
<!--DisplayImageData>jfdkjdkfgdgd</DisplayImageData-->
<!--DisplayImageURL>https://qa.uvvu.com:7001/ssp/image?type=avatar&amp;nodeId=urn:dece:org:org:dece:500500&amp;nodeUserId=urn:dece:userid:org:dece:B2F5D0FFF1B7BEC4E0401F0A0599368E</DisplayImageURL-->
<!--DisplayImageURL>www.yahoo1.com</DisplayImageURL-->
    </DisplayImage>
<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#primaryemail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address-->
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
<!-- <DateOfBirth> depricated </DateOfBirth> -->       <LegalGuardian>urn:dece:userid:org:dece:${#Project#USERIDFULL}</LegalGuardian>
       <Credentials> 

               <Username>${#TestCase#UserName}</Username>	
                <Password>${#TestCase#Password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8ec19c93-3bf1-4caa-a49b-0e6eb7febc0b"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCOUNTID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="5b6e2599-10b5-48de-bd8b-1e864ad18add"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="23d2038a-7d82-416b-b20c-dce41308af0b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#VersionMajor}' );
String minor = context.expand( '${#Project#VersionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	if(minor == tP.getPropertyValue("versionUrlEncode")){
	assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 3);
     tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
	}
	else
	{
	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 1);
     tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
	}
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7002/rest/1/07/Account/urn:dece:accountid:org:dece:EBFC43CD0F2A9475E0401F0A05996412/User/urn:dece:userid:org:dece:EBFC514ADCC4BCF8E0401F0A07995FAC</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>UserName</con:name><con:value>ashwin_user_create_20131125_125633</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:DB8F0F6588921CE6E0401F0A05991E36</con:value></con:property><con:property><con:name>NODEUSERIDFULLDecoded</con:name><con:value>urn:dece:userid:org:dece:E461D82DF0911A0CE0401F0A059929E3</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certificates\/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7f3628e8-17b4-4b24-9a27-1a62fd725b3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForBasicUser" searchProperties="true" id="5f5bf394-8aa6-4f31-b3da-5767e3c8eb12"><con:settings/><con:testStep type="groovy" name="Set pem" id="6e0560f4-90a8-4bfc-89f3-6c8603e7d433"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");
RestTestRequestStep testStep4 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_CLGAttestation");
RestTestRequestStep testStep5 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_COPPA");
//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep4, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep5, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID" id="6f4182cf-c5ca-4aa6-ba2c-e8438a60c603"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();



def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;

def testStep1 = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_CLGAttestation" )
if( testStep1.disabled )
  testStep1.disabled = false;

def testStep2 = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_ManageUserConsent" )
if( testStep2.disabled )
  testStep2.disabled = false;

if(testProject.getPropertyValue("count") != "1"){
//def NODEUSERIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
//testProject.setPropertyValue("NODEUSERID",NODEUSERIDEncoded)
//testProject.setPropertyValue("NODEUSERIDFAU1_Encoded",NODEUSERIDFAU1_Encoded)
//
//def NODEACCOUNTIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
//testProject.setPropertyValue("NODEACCOUNTID",NODEACCOUNTIDEncoded)

testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_CLGAttestation" ).disabled = true;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_ManageUserConsent" ).disabled = true;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_COPPA" ).disabled = true;
}</script></con:config></con:testStep><con:testStep type="groovy" name="set user index and create policies" id="59e0544b-f2bd-4093-8fb7-14137559621c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def audienceArray = testProject.getPropertyValue("audienceList").toString();
if(audienceArray.contains(";"))
{
def audiencelistArray = testProject.getPropertyValue("audienceList").toString().split(";");
def l = audiencelistArray.length;
log.info "l==="+l;
def userIndex = testProject.getPropertyValue("userIndex").toInteger();
log.info "userindex====="+userIndex;


String nodeoid = testProject.getPropertyValue("nodeoid"+testProject.getPropertyValue("count")+testProject.getPropertyValue("userIndex"));
testProject.setPropertyValue("Node_OID",nodeoid.toString());

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
if(testProject.getPropertyValue("userIndex") != "0"){
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_COPPA" ).disabled = true;
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_CLGAttestation" ).disabled = true;
	
}
}</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_CLGAttestation" id="b97b38e0-d120-43f5-b086-8e7dd2a0afca"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_CLGAttestation" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:CLGAttestation</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>     
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERIDFULL}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}CLGAttestation"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="e66da086-867d-4381-a2a8-37b6ea95160e"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
  <dece:Resource>${#Project#policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#USERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERIDFULL}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_COPPA" id="22bfc180-4500-4d0e-9cbd-5e3911c0b7c5"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_COPPA" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:GeoPrivacyAssent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>     
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERIDFULL}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}GeoPrivacyAssent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" id="5a50ccae-8e81-482d-92f5-d552d732c81a"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="4946da2d-6e7d-474d-93b9-bf091e748128" disabled="true"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERIDFULL}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Go to policy create again if necessary" id="529b887b-dccb-475f-afb4-768e2bfc72b2"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def audiencelistArray = tP.getPropertyValue("audienceList").toString().split(";");
def Length = audiencelistArray.length;
log.info "l====="+Length;
def userIndex   = tP.getPropertyValue("userIndex").toInteger();

if(Length > userIndex+1){
    userIndex++;
    log.info "========"+userIndex
    tP.setPropertyValue("userIndex",userIndex.toString());
    
    testRunner.gotoStepByName("set user index and create policies");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set the initial properties" id="986bda53-39cb-41f2-abb4-3cdb419dd9b1"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("userIndex","0");
String nodeoid = tP.getPropertyValue("nodeoid"+tP.getPropertyValue("count")+tP.getPropertyValue("userIndex"));
log.info"========"+nodeoid
tP.setPropertyValue("Node_OID",nodeoid.toString());
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = false;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_COPPA" ).disabled = false;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_CLGAttestation" ).disabled = false;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B98D789E7311E0401F0A05991189</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>NODEUSERIDFULLDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certificates\/DLASP_CS_2_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>538eac1e-267d-47ba-b194-f9953171618c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bac177f5-5586-4318-b970-cc997f810ec4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b2dc8a3b-c62a-4c6a-a101-634c57a370ce</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>41774e16-4267-4acd-bbcd-b821f3f16b23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SetPem" searchProperties="true" id="eb034ff5-ad55-4711-a0fc-42505f1914a6"><con:settings/><con:testStep type="groovy" name="Set Pem" id="f3972d36-f1a1-4286-bbc5-13313e649581"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import org.apache.commons.lang.SystemUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def eNV = context.expand( '${#Project#ENV}' )

def propertiesPath = null;

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows OS!!";
    		File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
    		propertiesPath = temp.getCanonicalPath();
	} 
else 
	{
    		log.info "it's Linux OS!!";
    		File temp = new File(projectPath + "/../../../Properties/");
    		propertiesPath = temp.getCanonicalPath();
	}
	
log.info("Properties File Location : '" + propertiesPath+ "'");




def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));

String line;
while ((line = reader.readLine()) != null)
      {
	       if (line.trim().length()==0) continue;
	       if (line.charAt(0)=='#') continue;
	
	       int delimPosition = line.indexOf("=");
	       String key = line.substring(0, delimPosition-0).trim();
	       String value = line.substring(delimPosition+1).trim();
	       propMap.put(key, value);
      }


if (System.properties['os.name'].toLowerCase().contains('windows')) 
      {
            log.info "it's Windows OS!!!";
            File temp = new File( projectPath + "\\..\\..\\..\\Certs\\" + eNV + "\\");
    		  certPath = temp.getCanonicalPath();      
      } 
else 
      {
            log.info "it's Linux OS!!!";
            File temp = new File(projectPath + "/../../../Certs/" + eNV + "/");
    		  certPath = temp.getCanonicalPath();
      }  
      
 log.info("Cert path: " + certPath );  
                  
def nodeId = context.expand( '${#TestCase#nodeid}' )

log.info "nodeId: "+nodeId;

 if (nodeId == "dece:cs")
       {
             nodeId = "dececs";
       }
 else if (nodeId == "coord:cs")
       {
             nodeId = "coordcs";
       }
 else
       {
             nodeId = nodeId;
       }


//log.info "~~~~~~~~~~~~" +nodeId
boolean imFine = true;
def pwd = null;
def certMatchesNodeID = context.expand( '${#Project#CertMatchesNodeID}' )
log.info("CertMatchesNodeID : '" + certMatchesNodeID + "'");
if (certMatchesNodeID == "YES")
{
		File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
		File f2 = new File(certPath+"/"+nodeId + ".jks");
		File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");
		File f4 = new File(certPath+"/"+nodeId + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");
	
	// sets the certificate from the specific folder when the certname and NodeId are same
	  if(f1.exists()) 
             {
                   keyStorePath = certPath+"/"+nodeId + "_concat.pem";
                   pwd = "123"
                   log.info("F1 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");      
             }
	  else if(f2.exists())
             {
                  	keyStorePath = certPath+"/"+nodeId + ".jks";
                   	pwd = "abcd1234" 
                   	log.info("F2 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");          
             }
	  else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
                   	pwd = "12elma";
				log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
             }
	  else if(f4.exists()) 
             {
                   	keyStorePath = certPath+"/"+nodeId + ".pem";
                   	pwd = "123";
                   	log.info("F4 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");       
             }
	  else
             {
                  	log.info "No cert file is Found!!!";
                  	imFine = false;
             }
}
else
{
	//to get the certificate name from another property based on the nodeid property.
		
	
       def value = propMap.find{ it.value == nodeId }?.key
       def certName = testProject.getPropertyValue(value+"_cert");       
       log.info "cert name .... " + certName;

		File f1 = new File(certPath+"/"+certName + "_concat.pem");
		File f2 = new File(certPath+"/"+certName + ".jks");
		File f3 = new File(certPath+"/truststore-"+certName + ".jks");
		File f4 = new File(certPath+"/"+certName + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");      
		     
       if(f1.exists()) 
             {
             		
				keyStorePath = certPath+"/"+certName + "_concat.pem";
				pwd = "123";
				log.info("F1 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else if(f2.exists())
             {
				keyStorePath = certPath+"/"+certName + ".jks";
				pwd = "abcd1234";
				log.info("F2 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");           
             }
       else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+certName + ".jks";
                   	pwd = "abcd1234";
                   	log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
                   	         
             }
       else if(f4.exists()) 
             {
				keyStorePath = certPath+"/"+certName + ".pem";
				pwd = "123";  
				log.info("F4 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else
			{
			log.info "No cert file is Found!!!";
			imFine = false;
			}                             
}


if(imFine)
{
      def callTSname = testCase.getPropertyValue("sName");
      def callTCname = testCase.getPropertyValue("tName");
      
      def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
      
      callTC.setPropertyValue("keyStorePath","$keyStorePath");
      testCase.setPropertyValue("keyStorePath","$keyStorePath");
      
      SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
      SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
      log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set Pem" disabled="true" id="a14aaf17-0c97-4333-b664-71ed2f3c92ef"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String nodeId = testCase.getPropertyValue("nodeid");

log.info "nodeId: "+nodeId;

if (nodeId == "dece:cs")
	{
		nodeId = "dececs";
	}
else if (nodeId == "coord:cs")
	{
		nodeId = "coordcs";
	}
else
	{
		nodeId = nodeId;
	}
String certPath = testProject.getPropertyValue("certPath");

File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
File f2 = new File(certPath+"/"+nodeId + ".jks");
File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");

boolean imFine = true;

if(f1.exists()) 
	{
		keyStorePath = certPath+"/"+nodeId + "_concat.pem";
		pwd = "123"	
	 }
 else if(f2.exists())
	 {
	 	keyStorePath = certPath+"/"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else if(f3.exists())
	 {
	 	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else
	 {
	 	log.info "Error!";
	 	imFine = false;
	 }


if(imFine)
{
	log.info "keyStorePath: "+keyStorePath;
	def callTSname = testCase.getPropertyValue("sName");
	def callTCname = testCase.getPropertyValue("tName");
	
	def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
	
	callTC.setPropertyValue("keyStorePath","$keyStorePath");
	
	SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
	SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
	log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_2</con:value></con:property><con:property><con:name>tName</con:name><con:value>STS</con:value></con:property><con:property><con:name>sName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_2_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForFirstUser_without MAC" searchProperties="true" id="067a145c-b750-4f75-a865-21e8a90c6c56"><con:settings/><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testProject.setPropertyValue("userIndex","0");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
//RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
//RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
//this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
//soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
//soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();



def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;



if(testProject.getPropertyValue("count") != "1"){
//def NODEUSERIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
//testProject.setPropertyValue("NODEUSERID",NODEUSERIDEncoded)
//testProject.setPropertyValue("NODEUSERIDFAU1_Encoded",NODEUSERIDFAU1_Encoded)

//def NODEACCOUNTIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
//testProject.setPropertyValue("NODEACCOUNTID",NODEACCOUNTIDEncoded)

testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;	
}



</script></con:config></con:testStep><con:testStep type="groovy" name="set user index and create policies"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def audienceArray = testProject.getPropertyValue("audienceList").toString();
if(audienceArray.contains(";"))
{
def audiencelistArray = testProject.getPropertyValue("audienceList").toString().split(";");
def l = audiencelistArray.length;
log.info "l==="+l;
def userIndex = testProject.getPropertyValue("userIndex").toInteger();
log.info "userindex====="+userIndex;


String nodeoid = testProject.getPropertyValue("nodeoid"+testProject.getPropertyValue("count")+testProject.getPropertyValue("userIndex"));
testProject.setPropertyValue("Node_OID",nodeoid.toString());

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
//RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
//RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
//soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
//soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
if(testProject.getPropertyValue("userIndex") != "0"){
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
}
}

</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
      <dece:Resource>${#Project#policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#USERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Go to policy create again if necessary"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def audiencelistArray = tP.getPropertyValue("audienceList").toString().split(";");
def Length = audiencelistArray.length;
log.info "l====="+Length;
def userIndex   = tP.getPropertyValue("userIndex").toInteger();

if(Length > userIndex+1){
    userIndex++;
    log.info "========"+userIndex
    tP.setPropertyValue("userIndex",userIndex.toString());
    
    testRunner.gotoStepByName("set user index and create policies");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set the initial properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("userIndex","0");
String nodeoid = tP.getPropertyValue("nodeoid"+tP.getPropertyValue("count")+tP.getPropertyValue("userIndex"));
log.info"========"+nodeoid
tP.setPropertyValue("Node_OID",nodeoid.toString());
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = false;

</script></con:config></con:testStep><con:properties><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_2_concat.pem</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E_without_MAC</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f020102-31af-4191-b98e-c0bba2ab7ab5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>707eff09-f96a-455f-b067-5fcaba4a8db6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71a94c3c-2ce0-4432-b4cd-f0190ffabade</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5c31e517-f3d1-4b5b-8698-6d855054e184</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="E_2_E" disabled="true" id="c59464e9-84d4-40c2-873c-74ce8c6ee044"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="End_To_End" searchProperties="true" id="f61a1256-f948-4937-93b5-6bc5fc69ae8a"><con:settings/><con:testStep type="groovy" name="Set ALID CID Properties" id="0e38bb91-71bc-410c-8509-6048fb770ed1" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("V2") == "07")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:STREAMS_ALIDVersion_315037.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:STREAMS_CIDVersion_315037.txt");
}
else if(tP.getPropertyValue("V2") == "11")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:RLGET_REFERENCE_R3_EXAMPLE_ALIDVersion_300133.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:RLGET_REFERENCE_R3_EXAMPLE_CIDVersion_300133.txt");
}
else if(tP.getPropertyValue("V2") == "21")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:STREAMS_ALIDVersion_828445.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:STREAMS_CIDVersion_828445.txt");
}


if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
{
	tP.setPropertyValue("urnParentalControlRating","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy")
	tP.setPropertyValue("urnParentalControlBlockUnratedContent","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ABlockUnratedContent")
	tP.setPropertyValue("urnParentalControlAllowAdult","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult")
	tP.setPropertyValue("urnPolicyID","urn%3Adece%3Apolicyid%3Aorg%3Adece%3A");
	tP.setPropertyValue("urnPolicy","urn%3Adece%3Atype%3Apolicy%3A");
	tP.setPropertyValue("urnAccount","urn:dece:accountid:org:dece:");
	tP.setPropertyValue("urnUser","urn:dece:userid:org:dece:");
	tP.setPropertyValue("urnNode","urn:dece:org:org:dece:");
	tP.setPropertyValue("urnRating","urn:dece:type:rating:");
	tP.setPropertyValue("urnRightsToken","urn:dece:rightstokenid:org:dece:");
	tP.setPropertyValue("urnStream","urn:dece:streamhandleid:org:dece:");	
	tP.setPropertyValue("primaryemail","testing@uvvutesting.biz");
	tP.setPropertyValue("AlternateEmail","testing1@uvvutesting.biz");
	tP.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword")
}
else
{
	tP.setPropertyValue("urnParentalControlRating","urn:dece:type:policy:ParentalControl:RatingPolicy")
	tP.setPropertyValue("urnParentalControlBlockUnratedContent","urn:dece:type:policy:ParentalControl:BlockUnratedContent")
	tP.setPropertyValue("urnParentalControlAllowAdult","urn:dece:type:policy:ParentalControl:AllowAdult")
	tP.setPropertyValue("urnPolicy","urn:dece:type:policy:");
	tP.setPropertyValue("urnPolicyID","urn:dece:policyid:org:dece:");
	tP.setPropertyValue("urnAccount","urn:dece:accountid:org:dece:");
	tP.setPropertyValue("urnUser","urn:dece:userid:org:dece:");
	tP.setPropertyValue("urnNode","urn:dece:org:org:dece:");
	tP.setPropertyValue("urnRating","urn:dece:type:rating:");
	tP.setPropertyValue("urnRightsToken","urn:dece:rightstokenid:org:dece:");
	tP.setPropertyValue("urnStream","urn:dece:streamhandleid:org:dece:");
	tP.setPropertyValue("primaryemail","testing@uvvutesting.biz");
	tP.setPropertyValue("AlternateEmail","testing1@uvvutesting.biz");
	tP.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Set Initial Values" id="411f932a-5a8a-4236-a747-4b35d2e935f7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("loop","3");
tP.setPropertyValue("count","1");

tP.setPropertyValue("nodeoid10",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("nodeoid11",tP.getPropertyValue("nodeIdLLASP"));
tP.setPropertyValue("nodeoid12",tP.getPropertyValue("nodeIdLLASPCS"));
tP.setPropertyValue("nodeoid13",tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeoid14",tP.getPropertyValue("nodeIdDLASPCS"));
tP.setPropertyValue("audiencelist1","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASPCS")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASPCS")+";");

tP.setPropertyValue("nodeoid20",tP.getPropertyValue("nodeIdLLASPCS2"));
tP.setPropertyValue("audiencelist2","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASPCS2"));

tP.setPropertyValue("nodeoid30",tP.getPropertyValue("nodeIdDLASPCS2"));
tP.setPropertyValue("audiencelist3","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASPCS2"));





</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID and counter" id="8ef18ee6-04fa-41f6-9f31-4347108e326c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid10"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist1"));
}
if(tP.getPropertyValue("count") == "2")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid20"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist2"));
}
if(tP.getPropertyValue("count") == "3")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid30"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist3"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName" id="ad256574-96d9-47dd-8651-9a88482fe8b3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate" id="f92620e5-7060-495b-9343-4bf11af70826" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
def accountid = tP.getPropertyValue("ACCOUNTID");
tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers" id="ce193a1c-87d2-4e14-a116-e3ab67bf1613"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1" id="97b5d4b0-352c-470d-885f-e26b5066af25"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

  def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
			tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
		def accountid = tP.getPropertyValue("ACCOUNTID");
		tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU1_"+tP.getPropertyValue("count"),useridfull);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1" id="105397b2-1f39-44b3-9037-c4bfe9d20bfb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);
if(tP.getPropertyValue("count") != "1")
{
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
		def nodeaccountid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
		def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1" id="d0b8bbf3-eab8-4933-a636-cbbbee6cdcac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_1Year_FAU1" id="9d42b81a-27c1-4a45-a155-e1f4ee743e01"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);

if(tP.getPropertyValue("count") != "1")
{
	def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter and loop if necessary" id="89de6314-29ce-43b0-8b0d-7cc275a7bbb0" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunner;
import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunContext;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int loopuntil = tP.getPropertyValue("loop").toInteger();
int counter   = tP.getPropertyValue("Count").toInteger();


if (counter &lt; loopuntil) {
	counter++;
    tP.setPropertyValue("Count",counter.toString());
    log.info "============================== $counter ============================";
    testRunner.gotoStepByName("Set NodeID and counter");
}
</script></con:config></con:testStep><con:properties><con:property><con:name>Consent_Version</con:name><con:value>20121024</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1997-01-07</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property><con:property><con:name>UserName</con:name><con:value>stream_renew_20150615_031857</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>993282f6-9376-4ef1-a63a-3c8080ed376d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d586b16a-25ab-42e7-843f-4615e6e5b6af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eceab473-b205-4123-8cc3-1e3b1cc51d7f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8328e7ca-1a6e-4e28-8384-b121130eac4d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f524a7af-4278-406d-9a4d-e50ccabff836</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="E_2_E_without_MAC" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="End_To_End" searchProperties="true" id="766fa23d-3801-44f4-b5d3-d13872e4d410"><con:settings/><con:testStep type="groovy" name="Set ALID CID Properties" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("V2") == "07")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:STREAMS_ALIDVersion_315037.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:STREAMS_CIDVersion_315037.txt");
}
else if(tP.getPropertyValue("V2") == "11")
{
	tP.setPropertyValue("alid","urn:dece:alid:eidr-s:512F-4CA1-D6E8-D57D-5012-I");
	tP.setPropertyValue("cid","urn:dece:cid:eidr-s:512F-4CA1-D6E8-D57D-5012-I");
}
else if(tP.getPropertyValue("V2") == "21")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:STREAMS_ALIDVersion_828445.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:STREAMS_CIDVersion_828445.txt");
}


if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
{
	tP.setPropertyValue("urnParentalControlRating","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy")
	tP.setPropertyValue("urnParentalControlBlockUnratedContent","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ABlockUnratedContent")
	tP.setPropertyValue("urnParentalControlAllowAdult","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult")
	tP.setPropertyValue("urnPolicyID","urn%3Adece%3Apolicyid%3Aorg%3Adece%3A");
	tP.setPropertyValue("urnPolicy","urn%3Adece%3Atype%3Apolicy%3A");
	tP.setPropertyValue("urnAccount","urn:dece:accountid:org:dece:");
	tP.setPropertyValue("urnUser","urn:dece:userid:org:dece:");
	tP.setPropertyValue("urnNode","urn:dece:org:org:dece:");
	tP.setPropertyValue("urnRating","urn:dece:type:rating:");
	tP.setPropertyValue("urnRightsToken","urn:dece:rightstokenid:org:dece:");
	tP.setPropertyValue("urnStream","urn:dece:streamhandleid:org:dece:");	
	tP.setPropertyValue("primaryemail","testing@uvvutesting.biz");
	tP.setPropertyValue("AlternateEmail","testing1@uvvutesting.biz");
	tP.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword")
}
else
{
	tP.setPropertyValue("urnParentalControlRating","urn:dece:type:policy:ParentalControl:RatingPolicy")
	tP.setPropertyValue("urnParentalControlBlockUnratedContent","urn:dece:type:policy:ParentalControl:BlockUnratedContent")
	tP.setPropertyValue("urnParentalControlAllowAdult","urn:dece:type:policy:ParentalControl:AllowAdult")
	tP.setPropertyValue("urnPolicy","urn:dece:type:policy:");
	tP.setPropertyValue("urnPolicyID","urn:dece:policyid:org:dece:");
	tP.setPropertyValue("urnAccount","urn:dece:accountid:org:dece:");
	tP.setPropertyValue("urnUser","urn:dece:userid:org:dece:");
	tP.setPropertyValue("urnNode","urn:dece:org:org:dece:");
	tP.setPropertyValue("urnRating","urn:dece:type:rating:");
	tP.setPropertyValue("urnRightsToken","urn:dece:rightstokenid:org:dece:");
	tP.setPropertyValue("urnStream","urn:dece:streamhandleid:org:dece:");
	tP.setPropertyValue("primaryemail","testing@uvvutesting.biz");
	tP.setPropertyValue("AlternateEmail","testing1@uvvutesting.biz");
	tP.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Set Initial Values"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("loop","3");
tP.setPropertyValue("count","1");

tP.setPropertyValue("nodeoid10",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("nodeoid11",tP.getPropertyValue("nodeIdLLASP"));
tP.setPropertyValue("nodeoid12",tP.getPropertyValue("nodeIdLLASPCS"));
tP.setPropertyValue("nodeoid13",tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeoid14",tP.getPropertyValue("nodeIdDLASPCS"));
tP.setPropertyValue("audiencelist1","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASPCS")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASPCS")+";");

tP.setPropertyValue("nodeoid20",tP.getPropertyValue("nodeIdLLASPCS2"));
tP.setPropertyValue("audiencelist2","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASPCS2"));

tP.setPropertyValue("nodeoid30",tP.getPropertyValue("nodeIdDLASPCS2"));
tP.setPropertyValue("audiencelist3","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASPCS2"));







</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID and counter"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid10"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist1"));
}
if(tP.getPropertyValue("count") == "2")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid20"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist2"));
}
if(tP.getPropertyValue("count") == "3")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid30"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist3"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
def accountid = tP.getPropertyValue("ACCOUNTID");
tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

 def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
			tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
		def accountid = tP.getPropertyValue("ACCOUNTID");
		tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU1_"+tP.getPropertyValue("count"),useridfull);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
if(tP.getPropertyValue("count") != "1")
{
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
		def nodeaccountid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
		def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser_without MAC");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_1Year_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);

if(tP.getPropertyValue("count") != "1")
{
	def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter and loop if necessary" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunner;
import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunContext;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int loopuntil = tP.getPropertyValue("loop").toInteger();
int counter   = tP.getPropertyValue("Count").toInteger();


if (counter &lt; loopuntil) {
	counter++;
    tP.setPropertyValue("Count",counter.toString());
    log.info "==========================================================";
    testRunner.gotoStepByName("Set NodeID and counter");
}
</script></con:config></con:testStep><con:properties><con:property><con:name>Consent_Version</con:name><con:value>20121024</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1997-01-07</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property><con:property><con:name>UserName</con:name><con:value>stream_renew_20150416_123612</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>993282f6-9376-4ef1-a63a-3c8080ed376d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d586b16a-25ab-42e7-843f-4615e6e5b6af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eceab473-b205-4123-8cc3-1e3b1cc51d7f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8328e7ca-1a6e-4e28-8384-b121130eac4d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f524a7af-4278-406d-9a4d-e50ccabff836</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:requirements/><con:properties><con:property><con:name>versionUrlEncode</con:name><con:value>06</con:value></con:property><con:property><con:name>versionMinor</con:name><con:value>02</con:value></con:property><con:property><con:name>versionMajor</con:name><con:value>2015</con:value></con:property><con:property><con:name>V2</con:name><con:value>02</con:value></con:property><con:property><con:name>V1</con:name><con:value>2015</con:value></con:property><con:property><con:name>userStandard2Org1Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>userStandard2Org1Name</con:name><con:value>pjgorg1standard2</con:value></con:property><con:property><con:name>userStandard1Org1Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>userStandard1Org1Namellp</con:name><con:value>saustreamrenew</con:value></con:property><con:property><con:name>userStandard1Org1Name</con:name><con:value>standardstreamrenewretailer</con:value></con:property><con:property><con:name>userPropertyNameArray</con:name><con:value>UserName_FAU1,UserName_SAU1,UserName_FAU2,UserName_SAU2,UserName_BAU1,UserName_BAU2</con:value></con:property><con:property><con:name>UserName_SAU2</con:name><con:value>stream_renew_20150615_03191</con:value></con:property><con:property><con:name>UserName_SAU1</con:name><con:value>stream_renew_20150615_031858</con:value></con:property><con:property><con:name>UserName_FAU2</con:name><con:value>stream_renew_20150615_03190</con:value></con:property><con:property><con:name>UserName_FAU1</con:name><con:value>stream_renew_20150615_031857</con:value></con:property><con:property><con:name>UserName_BAU2</con:name><con:value>stream_renew_20150615_03192</con:value></con:property><con:property><con:name>UserName_BAU1</con:name><con:value>stream_renew_20150615_031859</con:value></con:property><con:property><con:name>UserName</con:name><con:value>stream_renew_20150615_03192</con:value></con:property><con:property><con:name>userIndex</con:name><con:value>0</con:value></con:property><con:property><con:name>USERIDSAU2_1</con:name><con:value>EBFC513F93D1E093E0401F0A05991966</con:value></con:property><con:property><con:name>USERIDSAU1_1</con:name><con:value>EBFC48B71B3A2352E0401F0A07994661</con:value></con:property><con:property><con:name>USERIDFULL</con:name><con:value>urn:dece:userid:org:dece:188C10A6E9C8EB4FE0533D991F0AB3D3</con:value></con:property><con:property><con:name>USERIDFAU2_1</con:name><con:value>EBFC4861FEE1F058E0401F0A05997ECC</con:value></con:property><con:property><con:name>USERIDFAU1_1</con:name><con:value>188C10A6E9C8EB4FE0533D991F0AB3D3</con:value></con:property><con:property><con:name>USERIDBAU2_1</con:name><con:value>EBFC514ADCC4BCF8E0401F0A07995FAC</con:value></con:property><con:property><con:name>USERIDBAU1_1</con:name><con:value>EBFC4850FA7B7490E0401F0A07994665</con:value></con:property><con:property><con:name>USERID</con:name><con:value/></con:property><con:property><con:name>userFull2Org1Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>userFull2Org1Name</con:name><con:value>pjgorg1full2</con:value></con:property><con:property><con:name>userFull1Org1Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>userFull1Org1Namellp</con:name><con:value>faustreamrenew</con:value></con:property><con:property><con:name>userFull1Org1Name</con:name><con:value>fullstreamrenewretailer</con:value></con:property><con:property><con:name>userBasic2Org1Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>userBasic2Org1Name</con:name><con:value>pjgorg1basic2</con:value></con:property><con:property><con:name>userBasic1Org1Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>userBasic1Org1Namellp</con:name><con:value>baustreamrenew</con:value></con:property><con:property><con:name>userBasic1Org1Name</con:name><con:value>basicstreamrenewretailer</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>urntokenType_userpassword</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>urnstream</con:name><con:value>urn:dece:streamhandleid:org:dece:</con:value></con:property><con:property><con:name>urnRightsToken</con:name><con:value>urn:dece:rightstokenid:org:dece:</con:value></con:property><con:property><con:name>urnRightsLocker</con:name><con:value>urn:dece:rightslockerid:org:dece:</con:value></con:property><con:property><con:name>urnRating</con:name><con:value>urn:dece:type:rating:</con:value></con:property><con:property><con:name>urnPolicyID</con:name><con:value>urn:dece:policyid:org:dece:</con:value></con:property><con:property><con:name>urnPolicy</con:name><con:value>urn:dece:type:policy:</con:value></con:property><con:property><con:name>urnParentalControlRating</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>urnParentalControlBlockUnratedContent</con:name><con:value>urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>urnParentalControlAllowAdult</con:name><con:value>urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>urnNode</con:name><con:value>urn:dece:org:org:dece:</con:value></con:property><con:property><con:name>urnGenericRightsToken</con:name><con:value>urn:dece:stream:generic</con:value></con:property><con:property><con:name>urnError</con:name><con:value>urn:dece:errorid:org:dece:</con:value></con:property><con:property><con:name>urnaccount</con:name><con:value>urn:dece:accountid:org:dece:</con:value></con:property><con:property><con:name>URLEncode</con:name><con:value>NO</con:value></con:property><con:property><con:name>TOU_US</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_</con:name><con:value/></con:property><con:property><con:name>TOUUrl_06</con:name><con:value/></con:property><con:property><con:name>TOUUrl</con:name><con:value>qa1.c.uvvu.com</con:value></con:property><con:property><con:name>TOU</con:name><con:value>qa.c.uvvu.com</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>tester</con:name><con:value>pjg</con:value></con:property><con:property><con:name>targetUrlSHost</con:name><con:value>qa1.s.uvvu.com</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetSystem</con:name><con:value>LP1</con:value></con:property><con:property><con:name>targetPortq</con:name><con:value>443</con:value></con:property><con:property><con:name>targetPortd</con:name><con:value>7001</con:value></con:property><con:property><con:name>targetPort</con:name><con:value>443</con:value></con:property><con:property><con:name>targetjdbc</con:name><con:value>jdbc:oracle:thin:DEQA1_APP/lp1db_23@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>targetHostS</con:name><con:value>qa1.s.uvvu.com</con:value></con:property><con:property><con:name>targetHostq</con:name><con:value>qa1.q.uvvu.com</con:value></con:property><con:property><con:name>targetHostP</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostd</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targetHostC</con:name><con:value>qa1.c.uvvu.com</con:value></con:property><con:property><con:name>targetHostB</con:name><con:value>qa1.b.uvvu.com</con:value></con:property><con:property><con:name>targetHost</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetDeviceDomain</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targerHostd</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>Streams_CID</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_596034053.txt</con:value></con:property><con:property><con:name>Streams_APID</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt%3A487811501</con:value></con:property><con:property><con:name>Streams_ALID</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_368915851.txt</con:value></con:property><con:property><con:name>streamRenewTimeHours</con:name><con:value>6</con:value></con:property><con:property><con:name>streamMaxCreateExpireTimeDiffhours</con:name><con:value>24</con:value></con:property><con:property><con:name>streamlimit</con:name><con:value>12</con:value></con:property><con:property><con:name>StreamCreateCount</con:name><con:value>12</con:value></con:property><con:property><con:name>scriptsPath_Windows</con:name><con:value>C:\Scripts</con:value></con:property><con:property><con:name>scriptsPath_Linux</con:name><con:value>/opt/dece/scripts</con:value></con:property><con:property><con:name>SchemaNameSpace</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>SAMLSAU2_3</con:name><con:value>nVZdb+I6EH3fXxFlH1HId4GoIKUJaNOlpSXcZbcvK9cx4G5ip7FDob/+2qFJgdLe7pWQkCfjmTMzx8c+ZyBLLc9nDBUcU6JEYV/9De0udBeGqUGw6GqO24UasDquZli9Xic5gwh2O6oSMVaiiDAOCO+rlmHammlqljszOp7teE63bbvOnar8QAUToYVL21CVTZYS5lVp+2pZEI8ChplHQIaYx6EX+1djT3h6oMakDs53KKuExWDFee7pOmwnCKI0hW1IM/1cP/A5T5gX4yUBvCzQS86E9dWXvU9PT+0nu02LpW4ZhqEbPV34JAwvv6qDL/VmlERkQXfrABBKMAQpfgYS1BXiK5oofrqkBear7J3Qpm4aMrSGNlCDpkO+qvprggrdJyMdgCwY0NgKmHWwKVqgAhGIlH+mUV/9+rkJ7vbOCkDYghYZO1r/HSRE1iilOUo0VldWo/t8xBPtGpwj6EUEpiXDa3QtaZIDiJhyU6AF3owxE+RLmFKNX9kw8cM1yxD8m7Gc6/tYBXT9RHdCvESM/5+Z7c9rF+UHSEs0ePY7z+nkahaBye1jOJ7cLhO3NTTiMIz6FYR95x2oZtwv62OyNtx62eTn3+b3tzfxLzgzL/PsHuLYHl3fmQb7Gc16Adi6j7dXl+E2MYIR8Gd4AQSSlTvMaJldz223d6k/Lt2oRedj8CVNW4v1tPuwnIfX63FrO/mFCmz/yLtnN63y4TJY6iVu+eHZ3XhYmLFj5AFtlds5uYcX36yH7+WK3KVzmtjTdP7nywLS56EzSTfDKZtff/82D5/6rzXt13BorCUhLu8fEOT1UtIjCpWRmBfgH8uLtOBEW1SuXi41inFEuDqQu6S0eKUQIJx4Ypi79fBiFLi+5Zsd9+yi1zsbGo5hjgzfcHs92/HDWoN2KI4gBpQssMwlVXbHn48BwsxjiCSo0Na0hCvE1A8ihoADJSJTcTgoYWhGhYoHnbPQCc1uzw58y3ICozO0XUsAdy9cd+T6qnJN+YRMCn/BUXGg4KZxoOBTBHGOkZR5yXMmiM64aMkjWJc8Ndtr0CaoFBdBIbXYs5yuqzOc5SmSgPWMJmWK2vkqrxqks92/pQHIKms49uOb30H826qO4btVHn+rGyJ8EiwdmCzpAomhohM3kl3X86Zu5+TNVYf3ywTL0ya6ywsMd0gOP72SRrKlYcxrYTXyZsOx4SC4flxXky9ZY9iwv7m2heoLTRjUw3kE7cd2uV6X1Tg6hmHphQivm7rR0WMESyFa2xn9g4jehNA/dWc0qI8yN/ZDfCVfkZgDjjJBHqVafuLBECMmHwyRIP/ms6+Rg5Sibxxt+ClbkIp3hUT84dMDelD6CfON+HuiRfI6rhOx9vKIOsUrgWOylCt5O2zf4QakIiwWckaL/eCnApxKfmhsmtxg4YJN9yVH739RpE71VQAhLQmPQrUy7GtnhZNvc+S9Or0JU+nzy4W7Ye9euD+vxrFQsQyojS/+b2cNV3SBSJX3eoWlr27E+1EkJ8s9rX4B+EauTaHLodu9CEbdRq47QgJHftA08KCSwRvzW8teT4/Pw+Bf</con:value></con:property><con:property><con:name>SAMLSAU2_2</con:name><con:value>nVZdb+I6EH3fXxFlH6vgBBJCooKUEuiNlu52C2XbvqyMM4BvEwdih69fv05oUqC0t3slJOTJeObMzPGxLzmOo7rrcQ6poAlTAr+t/m40QZ+EE1ODpmNqZssMNcdsGpoT2tMwNKeTiWOpSsB5BgHjAjPRVuu60dAMQ6tbI912G3XXbNZs03lSlTGkXIaWLjVdVTZxxLhbpG2rWcrcBHPKXYZj4K4g7tC7GbjS08UlJrVzuUdZJEw7cyEWLkKkFgKBKCI1ksToEh35XIbcHdIZwyJL4SVnyNvqy971el1bN2pJOkN1XdeR7iDpE3I6+6p2vpSbIQzYNNmvu5gljBIc0R3OQd2AmCeh4kWzJKViHr8T2kCGnofWYEM0Ypjsq4peExToPhnpCGTKscbn2CiD3cEUUmAElPu7oK1+/dwE93tHKWZ8mqQxP1n/HSRgK4iSBYQaLysr0X0+4pl2dS6BuAEjUcbpCr7nNFlgAly5TWFKNwPKJflCrhTjVzZc/mjJMiB/M5ZLdIhVQkdnuuPTGXDxf2Z2OK99lDGOMug8e7bh0Kt5ujbGMFz29cf5AD8KLySzdgHh0HkPqhr3y/qUrBW3XjZNx949ceKH3jWa/Qxts4f0b98F3S786+C6h/gTuV/24u6N3bvb/jL90e3IvL5orY0W4dZmNUbPYSQeH2O/H/n1L7GBHnaTcYCXAyLu6bfH3e18HD+Bzmf/PBvfGj+DqX/Lu9HyxmAX0/Xuiv4wBXp4vOn3V+vRzlqx7fbXfT+7n+DRl2TH5yOrf71LxPAi0inMefu1psMajo2lJAyzyb9ARLnM6RH4Sl/OC4uP5SW30FCbFq7uItcoLoAJtZPvyqXFzaQA0dCVw9yve1f9ruXVPcO2mleO0+zppm70dU+3HKdhen6pQXsUJxC7CZvSPFeusnv+fAyQxC4HFkKqrZKMzIGrH0T0scBKwO7k4UgYh1EiVbzlNS2jadqO17Os1lXd63edpm37XdPUm42m1OLvifjBfqTeVEB6pOCGfqTgd0DogkIu8znPuSQ6F7IlS7zKRGTUVrjGIJMXQZprsVs3WxbiNF5EkANGcRJmEdQW80XRIMT3/3UNE15YBwNvePu7O/xdL47hu1WefisbIn1CmjvwvKQrkEOFMzdSo6znnbqbJzdXGd7LQpqfNtldkVKyR3L86ZU0OVsqxrwWViKvNpwajoKj07qqfOGKkor91bUtVV9qQqcczhLXlrVstcqKcdi6XkepDI8MpNtoCCSTorUdJc/AUBUCferOqFCfZK7sx/gyMWdDgQXEkjxKsfzEg2EIPH8wBJL8m8++Ro5Syr4J2Ihztm4k3xU54g+fHsQluZ8038q/dZKGr+M6E+sgj6xTvhIEZbN8ld8O23e4QRIZlko5S9LD4OcCnEt+bKyaXGERkk2TTMD7X5Rcp9oqJiTJmAh8tTAcameBU2wX4L46vQlT6PPLhbvh7164DzeDoVSxGKuVL/1vZ40WdCGg5vd6gaWtbuT7USZnswOtfgH4Rq4Nqcu+VL9uv1XJte04Vt/rVg08qqTzxvzWctDT0/PQ+QM=</con:value></con:property><con:property><con:name>SAMLSAU2_1</con:name><con:value>pVZbc9o6EH7vr/C4jxljyZibJzBjcGickBuXtOlLR5EXUGpksGSg/fWVTEyAkJy0Z4YZRuvV7re7n3b3VJBZ7Hi+EJBKlnAjDJrmD5dGtI7GFatRIzXLjcCx6giQhWsIo3H0iKpQM41QiAxCLiThsmk6CJctjC2nMkQ1r4w8jEr1ivPdNO4hFcq0Uikh01jPYi683G3TzFLuJUQw4XEyA+FJ6g38q56nND1SYDJbpxuUucO0NZVy7tk2LUVAIY5piSYz+9Te0zmNhDdgE05klsKzz0g0zee7q9WqtCqXknRiOwghGzVspRMJNvlstj4VlyEK+TjZnDuEJ5xRErPfRIO6AjlNIsOPJ0nK5HT2hmlsY6RNW7CmFsUu/2zaLw5ydB+0tAcyFcQSU4ILY30YQwqcgjHqh03z88cquLk7TAkX4ySdiYPz30ECvoQ4mUNkiSKyAt3HLR5JV+sUqBdyGmeCLeFa02ROKAjjNoUxW/eYUOSLhJGX31gL9WMFy4D+TVlO7V2sCrp9JDsBm4CQ/1Kz3XptrNyTOIPWA658Pel+nV7ym9F1igiVZ/GX1TIY/l41cwi7yhtQ23I/nw/JuuXW86Vb6kKHD06ck8fV8PJiFJ1Xp5PKeHpZv+Hl+ciFi/On1eT6PgprQdqHNlrc1b8k3fTxtz8OOmyOxbmsnzjO+eL78BMfPzb8+6d+9HPRe2gP4/j+AffL0L7+OR/e3V53eotLsgbCYPgga5fgr8PGU3gxGrXp8jZIggk6Ca6q6+/3d4Hf+eSEX13OT/gdqYy+1RffbHnVfIlpN4Z9YdESBtnjE1BZHDU9wsDoqnoR+X570RIWWeNc1ZvrHiUkcGm29C3dWrxMNSAWeaqYm/NZu9up4HK3UQ7wGWqUz5CLcBf5qNJo4Ea1WvSgDYoDiJ2Ej5n2pbvshj/vA6QzTwCPILWWSUanIMx3LAZEEiPkffU4Ei5gmKguXg38rlOu4S72KwjjdrfuV3C9Wu+02277zC2bxnUib/hN6o8lpHsdHKO9Dt4HyuYMdJvXPBeK6EKqlCzIMpMxLi1JiUOmBkGqe7HnuPWKLdhsHoMGbM+SKIuhNJ/O8wTZYvPvWISKXNo/G+bv783wDr8VmVA6EdMKQsfSBlVNODKKUBHIq4DdoyOrMO9nEdPPTKVVpoxukOx/emGLpsmWKkHPH9wWoLe6f3H3R2fwA/+jgd7/NaDq8fqm/U5O7MNybB1FS7bjthjpakqpHtYqyLQgpUUpWy6znD41hBw7VeZtbKOaPQCaqSb7a5j8BG5vTdgfmnFb1Aeet/J9fJmc8oEkEmaK7EZ+/MCCMwChF5xQPdb1R7enPZcqbxLW8pisE6s9SCN+d1WiHtV6Snyr/lZJGr2U64itHT8qTrXVSMYn+qSn2a83SEETZZap9puku8aPGTjmfF+4TfIWi1RseswkvP3F0H21aRJKk4zLMDBzwW6vz3HKX3PwXpRemcnnyfOCsBZvLgjfrnoD1XVnxNzqsv9WtlhOFwqm3kNyLE1zrfZd5ZxPdmbLM8DD8eKWOwHqOn7DrVV2x0vVxc42gXuRtF6JX0t2cnr4Hlp/AA==</con:value></con:property><con:property><con:name>SAMLSAU1_3</con:name><con:value>nVZdU/I6EL73V3TqpQNpSyu0I8yUVpR3BJV6/ODGCWlooyXFJuXDX3+SYisgenzPDDNMtpvdZ3efPMkZg7PEcFzGcMZJSpW+31afdahb2ND1Gg5Nu2YaUKtBhOwamp5i22i0muYUqkqfsRz3KeOQ8rZqaHqjJrYY1p3WdBoNx2zVNdsaq8o9zpgILVzqmqqsZgllTpG2reYZdVLICHMonGHmcOQE7uDKEZ4OLDGpnbMNyiJh1ok5nzsAoHqIEU4SVEfpDJyBHZ+zkDkBiSjkeYY/coasrX7sXS6X9WWjnmYRMDRNA5oNhE/ISHSsdo7KzTjs02m6WXuQppQgmJB3KEENMI/TUHGTKM0Ij2ffhNaBrsnQNbxCNaSb9FgFnwkKdL+MtAMyY7DGYqiXwUZ4ijNMEVb+GfXb6vHvJrjZe5dByqZpNmN767+DhOkCJ+kchzVWVlai+33EA+3qnGHk9ClKckYWeChpMocIM+Umw1OyuiJMkC9kSjF+ZcXEj5Qsw+hvxnIGtrEK6OBAd3wSYcb/z8y257WJcg+THHcugTEkU5dZ3mKYT+x4/Gi/3DXuV/HJsl1A2HbegKrG/bHeJ2vFrY9NwegmSAejlWb64/Ry5N8PWUM7J5cweogbcRBNJlb3/j36s3y/fB+/BiC6faG3J39Ol/2eN4kvT4I3dpJdgIsH92ly9LQOBrdP60l/QaZPWmPWsnuWDt5fQz5g7u38BEbN8UP4Eg+vr73xy9Oj71n3d4a+9sfWupu/WSaPLqJ8OUCt+foonAz899ZFy3w0tRvdnKJ51P6sabuGXWMpCUE+ecGIl0tJj76v9MS8IP9ZXqSFhLVp4erMpUYxjilXO3KXlBYnFwJEQkcMc7M+7/Y8yzWspt7UdL/XONdMTe9prmbZdsN0u6UGbVDsQfRSOiUyl1TZDX9+BohmDsM0xFltkeYoxkz9IaIPOVT6dCQOR0oZvkuFip+2upZpuX7X9v3zpmaeeq1mzz/vutapZ5xrhqoMU35NrzN3ynG2o+C6tqPgI4zInGAp85LnTBCdcdGSN7jIeaLXF7BOcS4ugkxqsWOYLQswMpsnWAIGszTME1yfx/OiQYBt/g0hSayw+lducPPsBc9GcQy/rXL/W9kQ4RMS6cBkSV0shooP3EiNsp4vdZsHb64yvJuHRJ420V2eEbRBsvvpkzSSLRVjPgsrkVcb9g07wcF+XVW+cEFQxf7q2haqLzShUw7nDdbf6vlikRfjaGqaATIRHuhAa4IAo1yI1voufcUUVCHAr+6MCvVe5sq+iy/nMQ045HgmyKMUy188GALM5IOhL8i/+u1rZCel6BvHK37I5iXiXSER//j0QA6SfsJ8I/6WaRZ+jutArK08ok7xSuCERnIlb4f1N9xAqQhLhJyl2XbwQwEOJd81Vk2usHDBpknO8fdfFKlTbVX0Ms0p7/tqYdjWzgInX8+x8+n0JUyhzx8X7op9e+E+Dq4CoWIzqFa+5L+da6SgC8KqvNcLLG11Jd6PIjmNtrT6A+AXudZN1/etVtfrtSq5btq21XO9qoE7lXS+mL9atnq6fx46/wI=</con:value></con:property><con:property><con:name>SAMLSAU1_2</con:name><con:value>nVZdc9o6EH3vr/C4jx0j2xiMPYEZA6F1Ckkap2mbl44iL6DElokl89FfX8nEDhCSm94ZZhitV7tnd4+OdMJxmth+wDnkgmZMC4dd/bfVtq247d4ZNhDPcGI7NryW3TKazebd1CPQjF2iayHnBYSMC8xEV7dNq2lYlmG3rk3Xb1q+02q4XudW124g5zK0dGmYurZOE8b9Mm1XL3LmZ5hT7jOcAvcF8aNgMvalp48rTHrvZIuyTJj35kIsfIRIIwYCSUIaJEvRCdrzOYm5H9EZw6LI4SlnzLv6097VatVYNRtZPkO2aZrI9JD0iTmdfdR7H6rNEIdsmm3XA8wyRglO6B+sQE1AzLNYC5JZllMxT18JbSHLVKENWBODWA77qKPnBCW6d0baA5lzbPA5tqpgVzCFHBgB7ftV2NU/vm+C273XOWZ8muUpP1j/GyRgS0iyBcQGryqr0L0/4pF29U6A+CEjScHpEs4VTRaYANcuc5jS9ZhySb6Ya+X4tTWXP1qxDMi/jOUE7WKV0NGR7gzpDLj4PzPbndc2yg1OCuhZ9mCxGidos7pfT3l4ym36Jxy1TXBW3RLCrvMWVD3up/UhWWtuPW0Kbr+NvsSEBWcRnI/SAcWnUc7dSzybeH/4DbecH1aWrPJZP739dtphzsaL0JfLz+ko4LlHsdVJ783PG37xg6EP82QYRg+fLx6vvk5clEy4h8/6zji+M5Ob/rfHvndPpvEXMx3hVXBnnaXTYbpJGMU/J+LX+DphX28H59+/N+ePvzrrD+H6YXbtnE4/Re1P7Z8Xs/Qh6z7XtFvDvrGShKi4uwciqqWiRzjURnJeWLwtL8pCY2NauvoLpVFcABN6T+1S0uIXUoBo7Mthbten/dGgFdgt13JNazhqnpqOaY3MwGx5XtMJ+pUGbVEcQBxkbEpVLqWyW/68DZCkPgcWQ24ss4LMgetvRBxigbWQXcnDkTEO15lS8cBrBW2v0x61+7bpuU5rFLQDx3Tdvts3+5aunWfigl3kwVRAvqfglrmn4FdA6IKCknnFcy6JzoVsySNeFiKxGkvcYFDIiyBXWuzbTqeFOE0XCSjAKM3iIoHGYr4oG4T49t82MOGldTwOosvfg+i3XR7DV6s8/FY1RPrEVDlwVVIf5FDhyI3UrOp5pe72wc1VhQ+KmKrTJrsrckq2SPY/PZNGsaVmzHNhFfJ6w6FhLzg6rKvOFy8pqdlfX9tS9aUm9KrhPOLGY6NYLotyHK5p2iiX4ZGFTBdFQAopWpvr7AEYqkOgd90ZNeqDzLV9H18h5iwSWEAqyaOVy3c8GCLg6sEQSvKv3/sa2Usp+yZgLY7ZBol8VyjEbz49iE+UnzRfyr9VlsfP4zoSayePrFO+EgRlM7VSt8PmFW6QTIalUs6yfDf4sQDHku8b6ybXWIRk010h4PUvmtKpro4JyQomwqFeGna1s8QpNgvwn51ehCn1+enCXfNXL9yfk3EkVSzFeu1L/9vZoCVdCOjqXi+xdPW1fD/K5Gy2o9VPAF/IteUEw2Gr0x+MOrVcu54npXBQN3Cvkt4L80vLTk8Pz0PvLw==</con:value></con:property><con:property><con:name>SAMLSAU1_1</con:name><con:value>pVZbb9pKEH7vr7Dcx8h4feFmBSTutUJCCjSt8lIt6wE2sdeOd20Iv75rEztASE7aIyGhHc/OfHPZb+aS48A3nQ7nEAsaMsXtt9TfsLTNpemZmldd2JqN65aGmwbSPNRoWgvk1ZCFVcXlPAGXcYGZaKkmMizNMDSzOkd1x6w7lllpNGv3qnIHMZempUoFqco28Bl3crctNYmZE2JOucNwANwRxJl1rseO1HRwgUltX+5R5g7j9lqIyNF1UvGAgO+TCgkD/VI/0rn0uDOjK4ZFEsOLT4+31Je7m82msrEqYbzSTYSQjpq61PE4XX1V21+Ky+C5bBnuzz3MQkYJ9ukOZ6CuQaxDT+n4qzCmYh28Y9rQDZSZ1mBLNGLY7KuqvzrI0X3S0hHImGONr7FRGJvCEmJgBJQfU7elfv1cBfd35zFmfBnGAT85/x0kYCn4YQSexovICnSft3gmXe1LII7LiJ9wmsJN1iYRJsCV2xiWdDumXDafx5W8/MqWyx8tugzI35TlUj/EKqHrZ7LTpyvg4l9qdlivvZU77CfQZuFdGo8mu51u/3xuiO7NFax29l1s7ngrh3CovAdVlvvlfNqsZW+9XJrURbytTa4u7ikP3fvRRdcaGMMe6yzmk2/mI6H+eNW7WKQ1WIz4lN19H90nvJvy0bNl3g6IWE3MZBoNvBs08b58f0ibFv5RX+5uvj8nj4831druGvu/AA3vzcFmtN66Txfz+9vIWpKLLWfRw86I2Jry9aD2rTccfbtKg4Z48IzeVe/LVS34hdZTs6aLn3cNdzP+OWi9xnQYw7GwoIRZsngAIopj1h5uXxnKemHxMb1kEuppy1zViTKO4gKYUNvZrYxanEQSEPUcWcz9edAd9uxGt250rY5pVc0BspExRB1UbzbtWs0oOGiP4gRiL2RLmvnKWHbfPx8DJIHDgXkQa2mYkDVw9QOLfSyw4rKpfBwh4zAPJYsPUL9XrVbRwEbDTmdo1m3LsurNoVGtNpvDZldVbkIxYZO4sxQQHzG4gY4YfAqERhQyms/6nMtG50Km5AmnifCNSoorDBI5COKMix3TblR1ToPIhwywHoRe4kMlWkd5gnS+/zc1THgunQ7m+ft7N7zTb0UmpI5HMwWexdIFWU04M4rMIpA3AdtnR1ZhvpN4NHtmMq0ipmSP5PjTa7dkbVK2Sn/cmd0WoEvdv7j7uzf7bfyjgfH/NSDr8fam/kFO9NNylI68lB64LUa6nFKSw9pFMz3hylMlSdMkb586QqYeS/O6oaO6PgOSSJJ9noePwPTShP6pGVeiPvFcyo/xJWLNZgILCGSzK/nxEwvODHi24LjysW4/uz0duZR5E7AV52Q9X+5BGeIPVyXikExPim/l3yaMvddynbF14EfGKbcaQdkqO2XT7PmdpiChNEsl/YbxofFzBs45PxaWSS6xCNlNi0TA+1+UjFdbKiYkTJhw+2ouOOT6HKd4jsB5VXpjJp8nLwvClr+7IPy6Hs8k6wZYLXXpfytrNG8XAmq2h+RYWupW7rvSOVsdzJYXgG/Gi9Xro6HZadr1ajleJF3XbMMsE3gUSfuN+K3kIKen76H9Bw==</con:value></con:property><con:property><con:name>SAMLFULL</con:name><con:value>pVZbc6JKEP4rFnncQkDQCBWtUtEcz5qrJpv1JTUZGh0DM8gMavLrzwwqq8bkuLtP1DQ9X399me6+4CiOKl6Lc0gFYbS0iiPKvVza0LKUegxxwj2KYuCewN6wdTXwKmXTQ9srWqnvN7Tnum1j9xxXdGSCqTvVsK6jOoBeDwGwYwaWiwOpynkGfcoFoqKhVUyrqps13aqOTNdzqp7tll3TGWulR0i5xJYqZVPbkFrxhjYVIvEMY7lclpd2maUTo2KalvF0NRjiKcRIa16sPcoNpc2NPi4HgCGKcBmz2Lgw9nQuAu4NyYQikaWwsRV8Zss0TNeQOgEnkzOtuAtBn4YsP3YQZZRgFJF3pOJzBWLKglIrmrCUiGn8qROWqYB1WGEdWw4904x9aicC7TFMOdL5FFkbrHsIIQWKofRw329oZ6dlLb86ShHlIUtjvn/8PT5AFxCxBAKdb93aUDsd8EikmheAvT7FUcbJAq5VsSYIA99kE/DpUKXbFEKyGhAuC3TFFTtjl97BcR0Nn0yAiz9J0E5y1iCPKMqgeefTH5ev9Idz/+4vO4Y/TWfoBvuDles0cgK7yrmgSO36eFCURRGtb7Dx9BH/U31s13r8slYddB96Nw/n4XdRfxl9W87brMaMa/epP7ZF62c0+wbXd1cvrZ8/VpX3CWHuuBadp/Zd1H57wXbkPwBBs3g2gLRNX+103Luqvc0SOhkug+sFGl3ab0ZvPp4Mp8GloA5duYt/k9XwaeFMb8Vi3O137Wg5qH1jD8lTP7y+RWCP5peu+RS26/7PRuHODv992fbND7OXGWCxPaoy6PulnswSEl83MyUhgR7mql6img8XQIXWVLdU7/Ay2e5I4Mkcrs9Wvd6xzFat63bq3bbT65pV2/Zd1+qZrbbt29sms2ZxQLHDaEiULdVy12XzNUEcexxoAKm+YJnsdFz7AtFHApX69F4+AkY5jJhsz4y5y8Tk5CXIZlZUx7PzEDmv7/FUK10zcUNv0lYoIN3ryVZlryffAyYJAdW4VV1zWdhcyFjM0SITkVVeoDKFTLb2VHVZr+LUqwYncRKBYmrELMgiKCfTJI+Mwddf2Xowz6X33VH+2j716/DfNgRSJyBKgStf2iDTCEeGS2XryAeHa0eH0Ba+lQVEPSwZT5ESvGay/+tXmaj6KGrEH7SGt1vShe5v3H3uDJ+tPwQY/IXxwd8al7n8eNP4Ip7GYSoLQ8GC7Jjdbh1yfsmO19wW4hxZ5Xk5WyyyvPYcxzZSCW+oIjDMijEEnMme/DZir0CNAsU4aQAWxA+MF/J9ipmY0qFAAmL5Vkr58YSNZwhcbTx9+chXp65TeyZl6ASsxDFZJ5LbmmL85UKHPaz0pPhWfpYs/eX4MawdO9JPufAIQifqpIbf2yd1gZmEJbJts3QX/BjAMeP7wiLIBRchC+olE/D5n5Lqxw0NYcwyKvq+lgt2Z0TOU7wl4P1S+gCTj6FiLyX/v5jqJC8BDHKb5STHV+uFp54AnezMmY3RT0bN+VejZp9d84P4o2QnToc13vwP</con:value></con:property><con:property><con:name>SAMLFAU2_3</con:name><con:value>nVZdb+I6EH3fXxFlH1chnxASFSRIQDdd2lLC3d27LytjO+BtYqexQ2l//XVCkwKlvd0rISFPxjNnZo6PfcFBllr+iHNcCMKoEoUD9RdMEEArw9Nsy0Oas3IdzbO9lWYnXg+btrlCDlKViPMSR5QLQMVAtQzT1kxTs7pLw/Vtx7d6Hc/q/lSVb7jgMrR06RiqsstSyv067UAtC+ozwAn3Kcgw9wX049HVzJeePmgwqcOLPco6YTHcCJH7ug47CEOcprADWaZf6Ec+F4j7MVlTIMoCP+dEfKA+7314eOg82B1WrHXLMAzd8HTpgzhZf1aHn5rNGEU0Yft1ACijBIKUPIEK1BUWG4aUUbpmBRGb7I3Qpm4aVWgN76AGTYd+VvWXBDW6D0Y6AllwoPENMJtgC5zgAlOIlb8X0UD9/LEJ7vcuC0B5woqMn6z/DBKmW5yyHCONN5U16D4e8Uy7hhcY+hGFacnJFl9XNMkBxFyZFzghuxnhknyIK/X4lR2XP9KwDMM/GcuFfohVQtfPdCcka8zF/5nZ4bz2Ub6BtMRDPKGbG/bluxOXsydx5f41XkyiGCXz8m5QQzh03oNqx/28PiVry63nTaMvX2MXdqeTGY/z1AyeZj/D8gosCZvvpkxP9HtkkyDLdpe/l7x7b8N5yejDuFtcPol7r19sr2+7txZmTnmJPk1h7wdfJTaHyLNm//xepfwu/4lv2OLmR759ZMHj99stIPlms7WWIKBR3LubOzlZeL1b5xY8LSI96X99ukntUv+EdjPrS3h5zTb27Np2viLqDF5qOqzh2NhIQlyufmMommVFjyhUpnJeQLwvL5WFIC2pXf280iguMBXqsNpVSYtfSgEiyJfD3K8n42nQHVuTaa9vuuOxOzEcw5waI8P1PNc1eo0G7VGcQAwYTUiVq1LZPX/eBwgzn2OKcKFtWQk3mKvvRAyBAEpEF/JwMMrxkkkVtxzXMC3PkaBHgRv2Xavf63thzw7M7iicBKpyzcQNvSlGicDFkYKbxpGCLzAkOcGVzFc855LoXMiW3INtKVKzswUdikt5ERSVFvuW0+/qnGR5iivAesZQmeJOvsnrBul8/29pAPLaGs5G8fxXEP+y6mP4ZpWn35qGSB9EKgdelTTGcqj4zI1kNvW8qts5e3M14UclItVpk90VBYF7JMefXkhTsaVlzEthDfJ2w6nhKLh+WlebD20JbNnfXttS9aUmDJvh3IPOfafcbst6HK5hWHohw+umbrh6jGEpRetxye4w1dsQ+ofujBb1SebWfoyvFBsaCyBwJsmj1MsPPBhizKsHQyTJv/voa+QopeybwDtxzhak8l1RIX736QF9WPlJ81z+PbDipfBzsQ7yyDrlK0EQuq5W1e3w+AY3IJNhiZQzVhwGPxfgXPJjY9vkFouQbFqVAr/9Ral0aqACCFlJRRSqteFQO2uc4jHH/ovTqzC1Pj9fuDv+5oX742oWSxXLgNr6kv921khNF4jV6l6vsQzUnXw/yuR0faDVzwBfybXpjMKw2x8H0/6hXHeno6Bt4FElw1fm15aDnp6eh+G/</con:value></con:property><con:property><con:name>SAMLFAU2_2</con:name><con:value>nVZdb+I6EH3fXxGlj1XIB4FAVJAgfCy7dMuFlm37snKdCfg2cbK2E2h//TqhSYHS3u6VkJAn45kzM8fHvuAoCi23xzkwQWKqTAYd9Vc7COpgWZYGgVPXbMdqach2mhoOWrbvO44ftJCqTDhPYUK5QFR0VMsw65ppalbj2nDcuuVarZrTMO9VZQmMy9DSpWaoyjYKKXeLtB01ZdSNESfcpSgC7grsLnqXU1d6uqjEpHYvdiiLhKy7FiJxdR3XfMAQhriG40i/0A98LnzuLsiKIpEyeMnp8476snez2dQ29VrMVrplGIZutHXp43OyOlO7X8rN4E9oEO/WHqIxJRiF5BnloC5BrGNf6YWrmBGxjt4JbeqmkYfWYIs1bNr0TNVfExToPhnpACTjSONrZJbB5hAAA4pBuZlPOurZ5ya423vNEOVBzCJ+tP47SEAzCOMEfI2XlZXoPh/xRLu6F4DdCcVhykkGP3KaJAgDV2YMArKdEi7J53OlGL+y5fJHSpYB/puxXOj7WCV0/UR3BmQFXPyfme3PaxdlicIUunfP4/BuXKdjZLOYsPlynYgk+GfpPcadAsK+8w5UNe6X9TFZK269bLoZ35LNzbdL1A6j+WyoczK//J7di2VzNrV7zvVTsrQd1Bg3+vXv2cp5nm3GT+Tn8tvX1QZGAZ7683TExt++649X8IXd6V/nwzh7MLO7+9Gw/uB5ib18hKtmbN/d1OdX9P7GC27s81s/uP3B+cCwlmtsNpP7n3ymN8f9Rf08O2/cpcFt40u0hs1sFay3tvnwyGzj+fax81rTfg2HxlISFunDv4BFuczpMRkoIzkvJD6Wl9xCfC0oXN0k1ygugAq1m+/KpcVNpQAR35XD3K2H/ZHX6FvDUbNlOv2+MzRswxwZPcNptx3HaJYatENxBNGLaUDyXLnK7vjzMUAcuRyoD0zL4hSvgasfRBwggZQJncvDEVMO17FU8aFhDiRas90ajJrmqNEYGU3PswbtftMZNPueqvyIxRW9Yr1AADtQcNM4UPA5YJIQyGU+5zmXROdCtuQ3ylIRmrUM1Sik8iJguRa7lt1qSI5FSQg5YD2K/TSEWrJOigbpfPdvaQjzwjqd9hazX97il1Ucw3erPP5WNkT6+CR34HlJfZBDhRM3klnW807dzaObqwzfS32SnzbZXcEI3iE5/PRKmpwtFWNeCyuRVxuODQfB9eO6qnx+RnDF/uralqovNaFbDuc3qv2upVmWFuNwDMPSmQyvm7rh6AvAqRStp+v4EahehdA/dWdUqI8yV/ZDfKlY04VAAiJJHqVYfuLBsACePxgmkvzbz75GDlLKvgnYilM2L5Tvihzxh08P7OLcT5pn8m8TM/91XCdi7eWRdcpXgiB0la/y2+HpHW7gWIYlUs5ith/8VIBTyQ+NVZMrLEKy6SEV8P4XJdepjoowjlMqJgO1MOxrZ4FTPCXgvjq9CVPo88uFu+XvXri3l9OFVLEIqZUv+W9njRR0waDm93qBpaNu5ftRJqerPa1+AfhGrk27Nxg0Wn1v1NqX68ao51UNPKik+8b81rLX0+Pz0P0D</con:value></con:property><con:property><con:name>SAMLFAU2_1</con:name><con:value>pVZbc6JKEH7fX0GxjykcwCtUtMqInhBN4qq5nLxsjUMjkwMDYQYv++vPgMGoMTnZPaVVOk1P99fdH919znEUmnaXc0gFjZniOm31Z8uyvMbcamh4blhajeCWNgcPa55P9Kblz30MRFVczjNwGReYibZq6kZVMwzNrM/0pm1atmlWrIb5pCr3kHJpWqpUdFVZRyHjduG2rWYps2PMKbcZjoDbgtjT7vXIlpo2LjGpnfMtysJh2gmESGyESMUDAmFIKiSO0Dk60Dn3uD2lC4ZFlsKrT4+31de7q9WqsqpW4nSBTF3XkW4hqeNxuviudr6Vl8FzmR9vzz3MYkYJDukvnIO6BhHEntINF3FKRRB9YNpAhp6b1mBNNGLU2HcVvTko0H3R0gHIlGONB9gojU3AhxQYAeVu4rbV71+r4PbuLMWM+3Ea8aPz70ECtoQwTsDTeBlZie7rFk+kq3MOxHYZCTNOl3CT0yTBBLgyTsGn6xHlknweV4ryK2suv7RkGZDfKcs52scqoaMT2XHoArj4k5rt12tr5R6HGXSeYvBIDONG7yljEaEbKzTnXm/z6+G6XUDYV96C2pX79XxM1h23Xi+5w2D5cOUOzWbQqvvPk7+qk+XmYeRd6g106WFv+GPcjG7EOovHyV0UwlM69vRbxxrw1SjVr1azuDoZJheXF/5Z+q3qzMJL9HcUPN77WTZwXp6DYN1cPeq394/RBg8H5PmCRsPrQba0hve/nMiJ6rW7+q2TJOihh2hz1g9M2mfdOtx8O6vfrACfrc+u3DtD75MJ/Gi/xbQfw6GwbAnTbP4MRJTHnB6uowxkvbD4vL3kEuppfqFqJ3mP4gKYUDv5rby12JlsQNSzZTG35/7FoFdrNYxBv28M9Hqrr9d0+aer1y2r2e/1yh60RXEEsRczn+a+8i675c/nAElkc2AepNoyzkgAXP3EooMFVlw2kS9HzDjMYtnFa13Tqvar/X7LbPV03ZGfRs3pVqvNRrdRq16oyk0sbtlt2vUFpAcd3NAPOvgECE0o5G0+5zmXROdCpuQFLzMRGpUlrjDI5CBI815sm7VWHXEaJSHkgFEUe1kIlSRIigQhvv01NUx4IZ30Z8X792F4x8/KTEgdj+YKPI/lAmQ14cQoMspA3gVcOzmySvPdzKP5aybTKlJKtkgOH72xJafJjirOqDsdl6B3ur9x92dv+tP4QwOj/2tA1uP9TfRJTtBxOXaOvCXdc1uOdDmlZA/rlGR6wZWXSrZcZgV9mrpuolSaRwbSm2gKJJNNdjOL/wGGdibQl2bcDvWR5538EF8mAjYVWEAkya4Uxy8sOFPg+YLjypd1/dXt6cClzJuAtTgl64VyD8oRf7oqEZvkelI8lj+rOPXeynXC1p4fGafcagRli/yUT7PNB6QgsTRLZfuN033jpwyccn4o3CV5h0VINs0zAR8/UfK+2lYxIXHGhOuohWC/1xc4xSYB+03pnZlinrwuCGv+4YLweD2ayq4bYXWnS/9bWaMFXQio+R5SYGmra7nvSudssTdbXgG+Gy/VnqMPzK5Va9b3x0ujZpi7BB5E0nknfi/Zy+nx+9D5Fw==</con:value></con:property><con:property><con:name>SAMLFAU1_3</con:name><con:value>pVZbc6JKEP4rFnncQkDQCBWtUtEcz5qrJpv1JTUZGh0DM8gMavLrzwwqq8bkuLtP1DQ9X399me6+4CiOKl6Lc0gFYbS0iiPKvVza0LKUegxxwj2KYuCewN6wdTXwKmXTQ9srWqnvN7Tnum1j9xxXdGSCqTvVsK6jOoBeDwGwYwaWiwOpynkGfcoFoqKhVUyrqps13aqOTNdzqp7tll3TGWulR0i5xJYqZVPbkFrxhjYVIvEMY7lclpd2maUTo2KalvF0NRjiKcRIa16sPcoNpc2NPi4HgCGKcBmz2Lgw9nQuAu4NyYQikaWwsRV8Zss0TNeQOgEnkzOtuAtBn4YsP3YQZZRgFJF3pOJzBWLKglIrmrCUiGn8qROWqYB1WGEdWw4904x9aicC7TFMOdL5FFkbrHsIIQWKofRw329oZ6dlLb86ShHlIUtjvn/8PT5AFxCxBAKdb93aUDsd8EikmheAvT7FUcbJAq5VsSYIA99kE/DpUKXbFEKyGhAuC3TFFTtjl97BcR0Nn0yAiz9J0E5y1iCPKMqgeefTH5ev9Idz/+4vO4Y/TWfoBvuDles0cgK7yrmgSO36eFCURRGtb7Dx9BH/U31s13r8slYddB96Nw/n4XdRfxl9W87brMaMa/epP7ZF62c0+wbXd1cvrZ8/VpX3CWHuuBadp/Zd1H57wXbkPwBBs3g2gLRNX+103Luqvc0SOhkug+sFGl3ab0ZvPp4Mp8GloA5duYt/k9XwaeFMb8Vi3O137Wg5qH1jD8lTP7y+RWCP5peu+RS26/7PRuHODv992fbND7OXGWCxPaoy6PulnswSEl83MyUhgR7mql6img8XQIXWVLdU7/Ay2e5I4Mkcrs9Wvd6xzFat63bq3bbT65pV2/Zd1+qZrbbt29sms2ZxQLHDaEiULdVy12XzNUEcexxoAKm+YJnsdFz7AtFHApX69F4+AkY5jJhsz4y5y8Tk5CXIZlZUx7PzEDmv7/FUK10zcUNv0lYoIN3ryVZlryffAyYJAdW4VV1zWdhcyFjM0SITkVVeoDKFTLb2VHVZr+LUqwYncRKBYmrELMgiKCfTJI+Mwddf2Xowz6X33VH+2j716/DfNgRSJyBKgStf2iDTCEeGS2XryAeHa0eH0Ba+lQVEPSwZT5ESvGay/+tXmaj6KGrEH7SGt1vShe5v3H3uDJ+tPwQY/IXxwd8al7n8eNP4Ip7GYSoLQ8GC7Jjdbh1yfsmO19wW4hxZ5Xk5WyyyvPYcxzZSCW+oIjDMijEEnMme/DZir0CNAsU4aQAWxA+MF/J9ipmY0qFAAmL5Vkr58YSNZwhcbTx9+chXp65TeyZl6ASsxDFZJ5LbmmL85UKHPaz0pPhWfpYs/eX4MawdO9JPufAIQifqpIbf2yd1gZmEJbJts3QX/BjAMeP7wiLIBRchC+olE/D5n5Lqxw0NYcwyKvq+lgt2Z0TOU7wl4P1S+gCTj6FiLyX/v5jqJC8BDHKb5STHV+uFp54AnezMmY3RT0bN+VejZp9d84P4o2QnToc13vwP</con:value></con:property><con:property><con:name>SAMLFAU1_2</con:name><con:value>pVZbc6JKEP4rFnncQkDQCBWtUtEcz5qrJpv1JTUZGh0DM8gMavLrzwwqq8bkuLtP1DQ9X399me6+4CiOKl6Lc0gFYbS0iiPKvVza0LKUegxxwj2KYuCewN6wdTXwKmXTQ9srWqnvN7Tnum1j9xxXdGSCqTvVsK6jOoBeDwGwYwaWiwOpynkGfcoFoqKhVUyrqps13aqOTNdzqp7tll3TGWulR0i5xJYqZVPbkFrxhjYVIvEMY7lclpd2maUTo2KalvF0NRjiKcRIa16sPcoNpc2NPi4HgCGKcBmz2Lgw9nQuAu4NyYQikaWwsRV8Zss0TNeQOgEnkzOtuAtBn4YsP3YQZZRgFJF3pOJzBWLKglIrmrCUiGn8qROWqYB1WGEdWw4904x9aicC7TFMOdL5FFkbrHsIIQWKofRw329oZ6dlLb86ShHlIUtjvn/8PT5AFxCxBAKdb93aUDsd8EikmheAvT7FUcbJAq5VsSYIA99kE/DpUKXbFEKyGhAuC3TFFTtjl97BcR0Nn0yAiz9J0E5y1iCPKMqgeefTH5ev9Idz/+4vO4Y/TWfoBvuDles0cgK7yrmgSO36eFCURRGtb7Dx9BH/U31s13r8slYddB96Nw/n4XdRfxl9W87brMaMa/epP7ZF62c0+wbXd1cvrZ8/VpX3CWHuuBadp/Zd1H57wXbkPwBBs3g2gLRNX+103Luqvc0SOhkug+sFGl3ab0ZvPp4Mp8GloA5duYt/k9XwaeFMb8Vi3O137Wg5qH1jD8lTP7y+RWCP5peu+RS26/7PRuHODv992fbND7OXGWCxPaoy6PulnswSEl83MyUhgR7mql6img8XQIXWVLdU7/Ay2e5I4Mkcrs9Wvd6xzFat63bq3bbT65pV2/Zd1+qZrbbt29sms2ZxQLHDaEiULdVy12XzNUEcexxoAKm+YJnsdFz7AtFHApX69F4+AkY5jJhsz4y5y8Tk5CXIZlZUx7PzEDmv7/FUK10zcUNv0lYoIN3ryVZlryffAyYJAdW4VV1zWdhcyFjM0SITkVVeoDKFTLb2VHVZr+LUqwYncRKBYmrELMgiKCfTJI+Mwddf2Xowz6X33VH+2j716/DfNgRSJyBKgStf2iDTCEeGS2XryAeHa0eH0Ba+lQVEPSwZT5ESvGay/+tXmaj6KGrEH7SGt1vShe5v3H3uDJ+tPwQY/IXxwd8al7n8eNP4Ip7GYSoLQ8GC7Jjdbh1yfsmO19wW4hxZ5Xk5WyyyvPYcxzZSCW+oIjDMijEEnMme/DZir0CNAsU4aQAWxA+MF/J9ipmY0qFAAmL5Vkr58YSNZwhcbTx9+chXp65TeyZl6ASsxDFZJ5LbmmL85UKHPaz0pPhWfpYs/eX4MawdO9JPufAIQifqpIbf2yd1gZmEJbJts3QX/BjAMeP7wiLIBRchC+olE/D5n5Lqxw0NYcwyKvq+lgt2Z0TOU7wl4P1S+gCTj6FiLyX/v5jqJC8BDHKb5STHV+uFp54AnezMmY3RT0bN+VejZp9d84P4o2QnToc13vwP</con:value></con:property><con:property><con:name>SAMLFAU1_1</con:name><con:value>pVZbc6JKEP4rFnncQkDQCBWtUtEcz5qrJpv1JTUZGh0DM8gMavLrzwwqq8bkuLtP1DQ9X399me6+4CiOKl6Lc0gFYbS0iiPKvVza0LKUegxxwj2KYuCewN6wdTXwKmXTQ9srWqnvN7Tnum1j9xxXdGSCqTvVsK6jOoBeDwGwYwaWiwOpynkGfcoFoqKhVUyrqps13aqOTNdzqp7tll3TGWulR0i5xJYqZVPbkFrxhjYVIvEMY7lclpd2maUTo2KalvF0NRjiKcRIa16sPcoNpc2NPi4HgCGKcBmz2Lgw9nQuAu4NyYQikaWwsRV8Zss0TNeQOgEnkzOtuAtBn4YsP3YQZZRgFJF3pOJzBWLKglIrmrCUiGn8qROWqYB1WGEdWw4904x9aicC7TFMOdL5FFkbrHsIIQWKofRw329oZ6dlLb86ShHlIUtjvn/8PT5AFxCxBAKdb93aUDsd8EikmheAvT7FUcbJAq5VsSYIA99kE/DpUKXbFEKyGhAuC3TFFTtjl97BcR0Nn0yAiz9J0E5y1iCPKMqgeefTH5ev9Idz/+4vO4Y/TWfoBvuDles0cgK7yrmgSO36eFCURRGtb7Dx9BH/U31s13r8slYddB96Nw/n4XdRfxl9W87brMaMa/epP7ZF62c0+wbXd1cvrZ8/VpX3CWHuuBadp/Zd1H57wXbkPwBBs3g2gLRNX+103Luqvc0SOhkug+sFGl3ab0ZvPp4Mp8GloA5duYt/k9XwaeFMb8Vi3O137Wg5qH1jD8lTP7y+RWCP5peu+RS26/7PRuHODv992fbND7OXGWCxPaoy6PulnswSEl83MyUhgR7mql6img8XQIXWVLdU7/Ay2e5I4Mkcrs9Wvd6xzFat63bq3bbT65pV2/Zd1+qZrbbt29sms2ZxQLHDaEiULdVy12XzNUEcexxoAKm+YJnsdFz7AtFHApX69F4+AkY5jJhsz4y5y8Tk5CXIZlZUx7PzEDmv7/FUK10zcUNv0lYoIN3ryVZlryffAyYJAdW4VV1zWdhcyFjM0SITkVVeoDKFTLb2VHVZr+LUqwYncRKBYmrELMgiKCfTJI+Mwddf2Xowz6X33VH+2j716/DfNgRSJyBKgStf2iDTCEeGS2XryAeHa0eH0Ba+lQVEPSwZT5ESvGay/+tXmaj6KGrEH7SGt1vShe5v3H3uDJ+tPwQY/IXxwd8al7n8eNP4Ip7GYSoLQ8GC7Jjdbh1yfsmO19wW4hxZ5Xk5WyyyvPYcxzZSCW+oIjDMijEEnMme/DZir0CNAsU4aQAWxA+MF/J9ipmY0qFAAmL5Vkr58YSNZwhcbTx9+chXp65TeyZl6ASsxDFZJ5LbmmL85UKHPaz0pPhWfpYs/eX4MawdO9JPufAIQifqpIbf2yd1gZmEJbJts3QX/BjAMeP7wiLIBRchC+olE/D5n5Lqxw0NYcwyKvq+lgt2Z0TOU7wl4P1S+gCTj6FiLyX/v5jqJC8BDHKb5STHV+uFp54AnezMmY3RT0bN+VejZp9d84P4o2QnToc13vwP</con:value></con:property><con:property><con:name>SAMLBAU2_3</con:name><con:value>nVZtU+o6EP7ur+jUj07pe4GOMFMoeDmKiKDX4xcnpoEG2wSbFPD++psUWwHR67kzzJRsN7vP7j59knMG0sTyA8ZQxjElyiBsqU+eZ0JQd1wNWdDRnIbpaqDZ8MQ/xzOe68D1jEhVBozlaEAYB4S3VMswbc00NcudGnXfdn3DrNVt+1FV7lHGRGjhUjNUZZMmhPlF2paaZ8SngGHmE5Ai5nPoT4LhlS88fVBiUtvnW5RFwqwdc770dR3WIgRRksAapKl+ru/5nEfMn+A5ATzP0HvOiLXU973r9bq2tms0m+uWYRi60dSFT8Tw/FRtn5SbUTQgM7pddwGhBEOQ4H+ABDVEPKaREiRzmmEep1+ENnXTkKE1tIEaNB1yquofCQp0P4y0BzJjQGMxMMtgt2iGMkQgUu5uBy319GcT3O6dZoCwGc1SdrD+M0iIrFBClyjSWFlZie7nEY+0q32OoD8gMMkZXqFrSZMlgIgpNxma4c0VZoJ8EVOK8SsbJn64ZBmCfzKWc30Xq4CuH+lOiOeI8f8zs915baPcgyRHbadzfzcO0uDhOn5Eveju1g5jsGoavem4VUDYdd6Cqsb9vj4ka8Wt903YTu/o2dLN+qPR9QvojX8txsP08Ww6D72zv0YO8+KzGbvVJ9nLYuw0L43J82ujs8GXIaHe+Hp4MVoE7sP0ubG0hifuy+9ZzBGbPVyuaWiPyKALGpPxbNpJXqOVwxfO7/vIbdQf+fDeujgbd/8e9zdWsJpeLLKX+DGNrryccm6srDg/ubnp4bNrtNCp4ZqNzfq1P2991LRbw76xlIRJ/rxAkJdLSY9BqPTFvAD/Xl6kBUfarHD1l1KjGEeEq225S0qLnwsBwpEvhrld9zr9rhtYgVn3wk6z6fUMxzD7RmC4zabtBGGpQVsUBxC7lMywzCVVdsuf7wHC1GeIRCjTVjSHMWLqNxFDwIEyILfi46CEoSkVKm72uk7f6zdM0zNDW7TXbtYtz7aNwGs2+o6nKteUj8goC2YcZXsKbhp7Cn6LIF5iJGVe8pwJojMuWvIKVjlPzNoK1AjKxUGQSS32Lafh6gynywRJwHpKozxBtWW8LBqks+3T0gBkhTW8CiY3T93Jk1V8hl9WefiubIjwibB0YLKkDhJDRZ9OJMd3y3o+1e0cPbnK8EEeYfm1ie7yDMMtkv1XH6SRbKkY81FYibzacGjYC64f1lXli1YYVuyvjm2h+kIT2uVwXkHttZavVnkxjrphWHomwuumbtT1CYK5EK23KX1BRK9C6D86MyrUB5kr+z6+nMdkwgFHqSCPUix/cGGYICYvDANB/s1PbyN7KUXfONrwY7ZuIu4VEvG3Vw/oQ+knzDfisabZR+HHYu3kEXWKWwLHZC5X8nR4+4IbkIqwWMgZzXaDHwtwLPm+sWpyhYULNj3nHH39RpE61VIBhDQnfBCqhWFXOwuc/G2J/A+nT2EKfX4/cDfsywP3YXg1ESqWArXyxf/trOGCLhCp8lwvsLTUjbg/iuRkvqPV7wA/ybUpdDl0G51uv1HJdb3ZdPtBt2rgXiXtT+bPlp2eHn4P7X8B</con:value></con:property><con:property><con:name>SAMLBAU2_2</con:name><con:value>nVZdb+I6EH3fXxFlH1ch34FEBSmFspu9QLvQT15WrmMSbxMbYidAf/11QpMCpb3dKyEhj8czZ2ZOjn3GQJoYns8YyjimRAoGXfm3g9ooNDpIcUMzVCzb0RTQsRzFckyxpVuuYTqyFDCWo4AwDgjvyoamm4quK4Z9rbU90/Bst9XuaHNZukUZE6GFS0uTpU2aEOZVabtynhGPAoaZR0CKmMehN/PHI094eqDGJPfOdiirhFkv5nzpqSpshQiiJIEtSFP1TD3wOQuZN8MRATzP0EvOkHXll7Pr9bq1Nls0i1RD0zRVc1XhEzIcfZV7X+rDKAzIgu7WfUAowRAk+BmUoMaIxzSU/CSiGeZx+k5oXdW1MrSCNlCBukW+yuprggrdJyMdgMwYUFgM9DrYFC1QhghE0s006MpfPzfB3dnrDBC2oFnKjtZ/BwmRAiV0iUKF1ZXV6D4f8US7emcIegGBSc5wgSYlTZYAIiZdZWiBNyPMBPlCJlXjlzZM/HDNMgT/Zixn6j5WAV090Z0BjhDj/2dm+/PaRbkFSY568McsHl7G6ynZsv5DQn8t51E6tMb9zlO3grDvvAPVjPtlfUzWhlsvhzAcTN2Hyc/ZzT9LWsyfrhcuWz90eLRx2GLjb7N2PL5/pquIu224WDsmNAe36WR+N/njXH9PLouoc/90tXqYBGvjy/O3TkzHi5u7+VX0fOfCi9tV4hd3BZ/cqHY4mgbqj7uY9IuROp9Pi+cg/hbdjcH3Rzt21p0bFv4i4z8ons832+mvLxsHhiMxMdsOV/nlPXD9oPta034Nh8ZaEmb54x8Eeb0s6REMpKGYF+Afy0tpwaGyqFy9ZalRjCPC5V55qpQWLxcChENPDHO3vjgf9m3f8PW2Mzh3XedCszR9qPma7bqm5Q9qDdqhOILYp2SBy1ylyu748zFAmHoMkRBlSkFzGCMmfxBxADiQAjIVHwclDF1ToeL6udBfwxwaptseOv7wvG3apmmYlm1Zdtvty9KE8ktymfkLjrIDBde1AwWfIoiXGJUyX/KcCaIzLlqyAkXOE71VgBZBubgIslKLPcPq2CrD6TJBJWA1pWGeoNYyXlYNUtnu31AAZJV1NPJnV7/7s99G9Rm+W+XxXt0Q4RPi0oGVJZ0jMVR04kay6nreqds5urnq8H4e4vJrE93lGYY7JIdbr6Qp2dIw5rWwGnlz4NhwEFw9rqvJFxYYNuxvrm2h+kITevVwVqC1auVFkVfjaGuaoWYivKqrWludIZgL0dpe0ydE1CaE+qk7o0F9lLmxH+LLeUxmHHCUCvJI1fITD4YZYuWDIRDk33z2NXKQUvSNow0/Zesn4l1RIv7w6QE9WPoJ85X4W9MsfB3XiVh7eUSd4pXAMYnKVXk7bN/hBqQiLBZyRrP94KcCnEp+aGya3GDhgk2POUfv70ilTnVlACHNCQ8GcmXY184KJ98ukffq9CZMpc8vF+6GvXvh3o9HM6FiKZAbX/zfzgqu6AKRXN7rFZauvBHvR5GcRHta/QLwjVzrQpcHdue8P+w0ct12XXvo95sGHlTSe2N+a9nr6fH30PsX</con:value></con:property><con:property><con:name>SAMLBAU2_1</con:name><con:value>pVZbc9o6EH7vr/C4jx0j+QbYE5hxDDSckhsmadqXjpAFKLVlx5LBya8/sokdICQn7ZlhhtF6tfvt7qfdPeEojgzX45xkgiZMGQ966q+uYxsWsQ0NWcTSLNPEmtMx29rc7DhdvYvnprVQlTHnORkzLhATPdWAuqnpumbYM9hxTd2FdsuG9k9VuSUZl6alSguqShFHjLuV256aZ8xNEKfcZSgm3BXYDbzziSs1XVRjUvsnW5SVw6y/EiJ1AcCtkGASRbiFkxicgD2dk5C7AV0yJPKMPPsMeU99vrvZbFobs5VkS2BACAF0gNQJOV1+Vvuf6sskHLNFsj37iCWMYhTRJ1SCOidilYSKFy2TjIpV/IZpHeiwNK2RAmtYt9hnFbw4qNB90NIeyIwjja+QXhubkgXJCMNEuZmOe+rnj1Vwe3eWIcYXSRbzg/OfQSJsTaIkJaHG68hqdB+3eCRd/ROC3THDUc7pmlyUNEkRJly5ysiCFhPKJflCrlTlVwouf7RmGcF/UpYTsItVQgdHsjOgS8LF39Rst15bK7coykl/jtL7C88n1GMXa+fu7Evn5ilYgO9he9yrIOwqb0E15X4+H5K14dbzpYF1O0P3hhd2Zw/GZpKJ67Mf+S2IJUFGdvuuOLtps0s0B6n3+2r2hEXOQrYu9A38Tm8GX1fDjvMwnT/NL+bXK/gJ8cRJim98YS7vBL360f4yLLxodndrdf5xUjazve7NYJKMgyz/eR8XP3j6NT2Pbx6/BXeFbeeXi69OMJ2sCFox8Okarm99MtNHl4+pZ16fPZFx7yWm3Rj2hXVLCPL5PcGiPpb0GA+UkawXEu+3l1JCQ21Rqbpp2aO4IEyo/fJW2VrcXDYgGrqymNvz8HTk27rlDXzfOvVH3SG0oD6CHuw4jj3y/LoHbVEcQPQTtqClr7LLbvnzPkAcu5ywkGTaOsnxinD1HYsDJJAyZlP5OBLGySyRXdyydNPv+m3YhtA/NTqGOWp3deh1h5buD7uGqlwk4pJdZt5CkGyvg+twr4NPCaYpJWWbL3nOJdG5kCl5QOtcRHprjVqM5HIQZGUvdg2rawNO4zQiJWAQJ2EekVa6SqsEAb79l80J80o6Hc6q9/dmeIff6kxInZCWCryM5ZTIapJXowi6dh3Iq4CtoyOrNu/lIS2fmUyryCjeItn/9MKWkiYNVQYTL7iqQTe6f3D3lx/80v/SwOT/GpD1eH0TvJMTcFiOxlG4pjtu65Eup5TsYf2aTA+o9dDK1+u8ok8HQgNk0jzQAeyAgOBcNtnHWfKbMNCYAB+acQ3qA8+NfB9fLlYsEEiQWJJdqY4fWHACwssFZywfa/HR7WnPpcybIIU4JvMjuQeViN9dlbCLSz0pvpJ/myQLX8p1xNaOHxmn3GoEZcvyVE6zxzdIgRNplsr2m2S7xo8ZOOZ8X9gkucEiJJvmuSBvf1HKvtpTEcZJzsR4oFaC3V5f4RSPKXFflF6ZqebJ84JQ8DcXhLvzSSC7bozURpf+t7JGK7pgopZ7SIWlpxZy35XO2XJntjwDPBwvlukP4MjwHKtjN+PFdpy2pRtNAvci6b8Sv5bs5PTwPfT/BQ==</con:value></con:property><con:property><con:name>SAMLBAU1_3</con:name><con:value>nVZdb+I6EH3vr4iyj6vgfEAJUUEKBLQs0HKBtqu+VMZxwDRxqD+A9tdfJzQpUNrbvRIS8mQ8c2bm+NhXHCax7fmcYyZISrV+0NQfoyqcQ6uOjEsb2UbVnpuGa0XIcM0achqoehmFSNf6nEvcp1xAKpq6bVqOYVmGXZuZdc+pepZZqZvOg67dYcZVaOVSMXVtl8SUe3napi4Z9VLICfcoTDD3BPKm/mjoKU8PFpj01tUeZZ6QtZZCrD0AUCXECMcxqqA0AVfgyOcq5N6ULCgUkuG3nCFv6m97t9ttZetUUrYAtmmawGwA5RNysvihty6KzTjs0yjdrzuQppQgGJNXmIEaYbFMQ82PFykjYpl8EtoClpmFNvAOGciq0h86eE+Qo/tmpCOQjEODL6FVBJvgCDNMEdZuJ/2m/uN7E9zvnTFIeZSyhJ+s/w4Sphscp2scGryorED3/Yhn2tW6wsjrUxRLTjb4OqPJGiLMtTHDEdkNCVfkC7mWj1/bcfUjBcsw+puxXIFDrAo6ONOdgCwwF/9nZofz2ke5g7HELYaklAO0DFejlzv31+/R7p8x8H/zOOg2cwiHzntQ5bjf1qdkLbn1tmk4gNfQMueTJ3rzU97RzsN1rT1buc7qMnmu7WD4FKdqP2qDdOyMlw8gqFvr10AycivgH9efb+7XL+1XGt9sBxcjpw3kYPKEd0Fjkfwak+fdYuk4gVzfr2bOanTbn74MAtCuX5tiwOAwGoqASXv0MIvwvaRgcGnd/FxFf4Lgjl2M7yfU3c6pmcjn6cPtIOwumu81HdZwbCwkYSrnK4xEsczo0Q+0npoXFF/LS2YhoRHlrt460yguMBV6K9uVSYsnlQCR0FPD3K+77V6n5tu+2WsE7UbjsmtWTatn+mat0XCqflBo0B7FCcROSiOS5cpUds+frwGixOOYhpgZm1SiJeb6FxEDKKDWpxN1OFLK8SxVKm77jU6v23Hrtt/rBla10625rlOr9i4tt9ZtKy2+TsUNvWF+JDA7UnDLPFLwCUZkTXAm8xnPuSI6F6olz3AjRWxVNrBCsVQXAcu02LOrbg1wkqxjnAEGSRrKGFfWy3XeIMD3/7YBEc+twdCfjh8700c7P4afVnn6rWiI8glJ5sCzktpYDRWfuZHMop4PdVfP3lxFeF+GJDttqruCEbRHcvzpnTQZW0rGvBdWIC83nBqOgoPTusp84Yagkv3lta1UX2lCqxjOM6w8V+RmI/Nx1E3TBkyFBxYw62CKkTrY4mWWPmEKyhDgW3dGifokc2k/xifFkk4FFDhR5NHy5TceDFPMswdDX5F/993XyFFK1TeBd+KcrROrd0WG+MunB/JQ5qfMY/W3TVn4Pq4zsQ7yqDrVK0EQushW2e3w8gk3UKrCEiVnKTsMfi7AueTHxrLJJRah2DSXAn/+Rct0qqlDhFJJRT/Qc8OhduY4xcsae+9OH8Lk+vx24e74pxfun9FwqlQsgXrpS/7b2SA5XRDWs3s9x9LUd+r9qJLTxYFWvwH8INeW0uWg5rY7PbeU63qjUev5nbKBR5W0Ppg/Wg56enoeWv8C</con:value></con:property><con:property><con:name>SAMLBAU1_2</con:name><con:value>nVZdb+I6EH3vr4jSx1VwEsJHooIUkrKbvbRUQNstLyvXMeA22GnsQLq//tqhSYF+3O6VkJAn45kzM8fHPuNwndiezznOBGFUi8Ke/ruNushpWrbhYgQNp9OFBuzCtnHvOu0WbELHNm1dizjPcUS5gFT0dNu0moZlGXZrZna8pu2ZbqPtunNdu8EZl6GlS8PUtWKdUO6VaXt6nlGPQU64R+Eac08gb+pfjDzp6cEKk94/26EsE2b9lRCpBwBqxBjhJEENxNbgDBz4nMXcm5IlhSLP8EvOmPf0l73b7baxbTZYtgS2aZrAdIH0iTlZnur9k2ozjiO6YLt1ACmjBMGE/IEK1AUWKxZrfrJkGRGr9QehLWCZKrSBC2Qgy6GnOnhNUKL7YqQDkBmHBl9Bqwo2wQucYYqwdj2Jevrp1ya42zvLIOULlq350frvIGG6wQlLcWzwqrIK3dcjvtOu/hlGXkRRknOywZeKJilEmGtXGV6QYkS4JF/MtXL8WsHlj1Qsw+hvxnIG9rFK6OCd7oRkibn4PzPbn9cuyg1Mcty/eNxMJ87ttSl+0nHRZvMiuIr+FETcd3slhH3nHah63C/rY7LW3HrZNI9cF/wE3ftktJyP8OU/bXdxS8PQoeDm25/tt8Hd9+Zlepc/RMP1DxJsnfy6GfjZozkLHXx7E1zeF7PlxWBMJ7Pmic0CwNB2vGCge4u6BTPz9t1dOxw+0+BX4D6RqLi6zqJJgS34/Ow+rAZBOr3hP/zv5k/HvnsQxSNJry5aYA7mJ+JcXI830fBxPF9Ouuk17Sx7rzXt13BorCRhmt8/YCSqpaJHFGpDOS8oPpcXZSGxsShdvVRpFBeYCr2vdilp8XIpQCT25DB36/PBMGj5tm8O3XDguu1z0zGtoembLddtOn5YadAOxRHEgNEFUbmUyu748zlAtPY4pjHOjA3L0Qpz/ZOIIRRQi+hEHg5GOZ4xpeLmudtsdtqW1QnCjn3eCs1zu2W7bbc5bDr2QNcumRjTceYvBM4OFNwyDxR8ghFJCVYyr3jOJdG5kC15gptcJFZjAxsU5/IiyJQWe7bTbQFO1mmCFWCwZnGe4Ea6SssGAb77tw2IeGkdjfzp1e9g+tsuj+GHVR5/qxoifWKiHLgqaYDlUPGbG8nyWlU9H9TdPrq5qvB+HhN12mR3RUbQDsnhp1fSKLbUjHktrEJebzg2HAQHx3XV+eINQTX762tbqr7UhH41nCfYeGrkm01ejqNjmjbIZHhgAbMDphjlUrSeZ+wRU1CHAF+6M2rUR5lr+yG+XKzoVECB15I8Wrn8woNhirl6MESS/MVXXyMHKWXfBC7Ee7Ygke8KhfjTpwfykPKT5iv5t2VZ/Dqud2Lt5ZF1yleCIHSpVup2eP6AG4jJsETKGcv2g78X4L3kh8a6yTUWIdl0nwv88RdN6VRPhwixnIoo1EvDvnaWOMVzir1XpzdhSn1+uXAL/uGF++tiNJUqtoZ67Uv+29kgJV0Q1tW9XmLp6YV8P8rkdLmn1S8A38i1JXU5bHUHwbBby3XHdVtDP6gbeFBJ/435rWWvp8fnof8v</con:value></con:property><con:property><con:name>SAMLBAU1_1</con:name><con:value>pVZbc9o6EH7vr/C4jxnjK/gygRkHQuIQmhaHlOSlIyQBKrZELZmQ/vrKJnaAkJy0J5MZRuvV7rcXfbunHKSJFYSc40wQRpWo11Z/OC3DNF3gaMC2Tc1xENZ8p+lo0EbG1LE9DK2mqkSc5ziiXAAq2qplmLZmmprVvDXcwPICu9lwXONBVe5wxqVpqdIwVGWTJpQHpdu2mmc0YIATHlCQYh4IGMTh8DqQmgGoMKmd0y3K0mHWWQixCnQdNhCGOElgA7JUP9X3dE4RD2Iyp0DkGX72iXhbfb77+PjYeLQbLJvrlmEYuuHrUgdxMv+sdj5VlzGK6Ixtz11AGSUQJOQ3KEANsVgwpITJnGVELNI3TJu6aRSmNbyBGjQd+lnVXxyU6D5oaQ9kxoHGF8CsjI3wDGeYQqyMR1Fb/fyxCm7v3maA8hnLUn5w/jtImK5xwlYYabyKrEL3cYtH0tU5xTCIKExyTtb4S9EmKwAxV75meEY214TL5kNcKcuvbLj8J1WXYfg3ZTnVd7FK6PqR7PTIHHPxLzXbrdfWyh1IctyZ6ReT5O7Ks5Lbh3CQ3uD+vTe5+43WYtwuIewqb0HV5X4+HzZr3VvPly6bOWpC6OHV2GtF97PR6FtvmifDB4SWbLyMe62fFwP3ck69b+B82FpO4OWs+8RIBPHl0h5FfsLG/YmFW/Db+BON0X28PpteeVNzcnXCpvTJ7XlmxJY5XbSc8cViMrkY/qatTb4k6fdeZAwemoPB3Q2y/buTE3QSLwaekX235k/JJzIfmHNETxx0f5abIRyOwvZLTLsx7AsrSojz6U8MRXUs2iPqKX1ZLyDep5dCQpA2K1WDVcFRXGAq1E5xq6CWIJcERFAgi7k9n5/1u47XNPqhe+Y6vnFuOIbZN0LD9X2n1WpWHLRFcQCxy+iMFL4Klt32z/sAYRpwTBHOtDXL4QJz9R2LPSCAEtGRfByMcnzLJIv7ru23vDPD9EPb7Pc9y3btbs9s9bqh2ZN/qvKFiRt6k4UzgbM9BjeNPQYfYUhWBBc0X/Q5l43OhUzJL7DORWI21qBBcS4HQVZwcWDJJOmcpKsEF4D1lKE8wY3VYlUmSOfbX0sDkJfS0flt+f7eDO/wW5UJqYNIocCLWM6wrCY+MoqsKpBXATtHR1ZlPswRKZ6ZTKvICNwi2f/00i1Fm9St0rsO468V6Fr3L+7+6MY/zH80cP1/Dch6vL6pv5MT/bActSO0Jjtuq5Eup5TksE7VTL9A41cjX6/zsn1cw7D0TJrXTd1w9RjDXJLs0y1bYqrXJvQPzbga9YHnWr6PLxcLGgsgcCqbXSmPH1hwYsyLBSeSj3Xz0e1pz6XMm8AbcUzWTeQeVCB+d1WCASz0pPir/HlkGXop1xFbO35knHKrEYTOi1MxzZ7eaArIpFki6Zdlu8aPGTjmfF9YJ7nGImQ3TXOB3/6iFLzaVgGELKciKvhLCna5vsQpnlY4eFF6ZaacJ88Lwoa/uSBMhtexZN0UqLUu+W9ljZTtArFa7CEllra6kfuudE7nO7PlGeCr8SIZ2uhboe+4zXq8NH2/5ZhWncC9SDqvxK8lOzk9fA+dPw==</con:value></con:property><con:property><con:name>SAML</con:name><con:value>pVZbc6JKEP4rFnncQkDQCBWtUtEcz5qrJpv1JTUZGh0DM8gMavLrzwwqq8bkuLtP1DQ9X399me6+4CiOKl6Lc0gFYbS0iiPKvVza0LKUegxxwj2KYuCewN6wdTXwKmXTQ9srWqnvN7Tnum1j9xxXdGSCqTvVsK6jOoBeDwGwYwaWiwOpynkGfcoFoqKhVUyrqps13aqOTNdzqp7tll3TGWulR0i5xJYqZVPbkFrxhjYVIvEMY7lclpd2maUTo2KalvF0NRjiKcRIa16sPcoNpc2NPi4HgCGKcBmz2Lgw9nQuAu4NyYQikaWwsRV8Zss0TNeQOgEnkzOtuAtBn4YsP3YQZZRgFJF3pOJzBWLKglIrmrCUiGn8qROWqYB1WGEdWw4904x9aicC7TFMOdL5FFkbrHsIIQWKofRw329oZ6dlLb86ShHlIUtjvn/8PT5AFxCxBAKdb93aUDsd8EikmheAvT7FUcbJAq5VsSYIA99kE/DpUKXbFEKyGhAuC3TFFTtjl97BcR0Nn0yAiz9J0E5y1iCPKMqgeefTH5ev9Idz/+4vO4Y/TWfoBvuDles0cgK7yrmgSO36eFCURRGtb7Dx9BH/U31s13r8slYddB96Nw/n4XdRfxl9W87brMaMa/epP7ZF62c0+wbXd1cvrZ8/VpX3CWHuuBadp/Zd1H57wXbkPwBBs3g2gLRNX+103Luqvc0SOhkug+sFGl3ab0ZvPp4Mp8GloA5duYt/k9XwaeFMb8Vi3O137Wg5qH1jD8lTP7y+RWCP5peu+RS26/7PRuHODv992fbND7OXGWCxPaoy6PulnswSEl83MyUhgR7mql6img8XQIXWVLdU7/Ay2e5I4Mkcrs9Wvd6xzFat63bq3bbT65pV2/Zd1+qZrbbt29sms2ZxQLHDaEiULdVy12XzNUEcexxoAKm+YJnsdFz7AtFHApX69F4+AkY5jJhsz4y5y8Tk5CXIZlZUx7PzEDmv7/FUK10zcUNv0lYoIN3ryVZlryffAyYJAdW4VV1zWdhcyFjM0SITkVVeoDKFTLb2VHVZr+LUqwYncRKBYmrELMgiKCfTJI+Mwddf2Xowz6X33VH+2j716/DfNgRSJyBKgStf2iDTCEeGS2XryAeHa0eH0Ba+lQVEPSwZT5ESvGay/+tXmaj6KGrEH7SGt1vShe5v3H3uDJ+tPwQY/IXxwd8al7n8eNP4Ip7GYSoLQ8GC7Jjdbh1yfsmO19wW4hxZ5Xk5WyyyvPYcxzZSCW+oIjDMijEEnMme/DZir0CNAsU4aQAWxA+MF/J9ipmY0qFAAmL5Vkr58YSNZwhcbTx9+chXp65TeyZl6ASsxDFZJ5LbmmL85UKHPaz0pPhWfpYs/eX4MawdO9JPufAIQifqpIbf2yd1gZmEJbJts3QX/BjAMeP7wiLIBRchC+olE/D5n5Lqxw0NYcwyKvq+lgt2Z0TOU7wl4P1S+gCTj6FiLyX/v5jqJC8BDHKb5STHV+uFp54AnezMmY3RT0bN+VejZp9d84P4o2QnToc13vwP</con:value></con:property><con:property><con:name>runTeardown</con:name><con:value>false</con:value></con:property><con:property><con:name>Rights_CID</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_196237681.txt</con:value></con:property><con:property><con:name>Rights_APID</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt%3A828402846</con:value></con:property><con:property><con:name>Rights_ALID</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_233695895.txt</con:value></con:property><con:property><con:name>Query_HostName</con:name><con:value>https://qa1.q.uvvu.com</con:value></con:property><con:property><con:name>QC_user</con:name><con:value>sravan</con:value></con:property><con:property><con:name>QC_URL</con:name><con:value>http://stprqc01.va.neustar.com:8080/qcbin</con:value></con:property><con:property><con:name>QC_TestType</con:name><con:value>MANUAL</con:value></con:property><con:property><con:name>QC_TestSet</con:name><con:value>StreamRenew</con:value></con:property><con:property><con:name>QC_TestPlanDirectory</con:name><con:value>Subject\DECE_1.0_Release\DECE_API\APIs\StreamRenew</con:value></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value>Root\DECE_API\DECE_API_1.0.1.10.B</con:value></con:property><con:property><con:name>QC_soapUI_ARGS</con:name><con:value/></con:property><con:property><con:name>QC_RunName</con:name><con:value/></con:property><con:property><con:name>QC_ResultExportLevel</con:name><con:value>on</con:value></con:property><con:property><con:name>QC_ReExport</con:name><con:value>enabled</con:value></con:property><con:property><con:name>QC_ProjectPath</con:name><con:value/></con:property><con:property><con:name>QC_Project</con:name><con:value>DECE</con:value></con:property><con:property><con:name>QC_password</con:name><con:value>@1vijaya</con:value></con:property><con:property><con:name>QC_Domain</con:name><con:value>DEFAULT</con:value></con:property><con:property><con:name>QC_BulkUpdate</con:name><con:value>enabled</con:value></con:property><con:property><con:name>QC_AutoMapping</con:name><con:value>enabled</con:value></con:property><con:property><con:name>Provision_HostName</con:name><con:value>https://qa1.p.uvvu.com</con:value></con:property><con:property><con:name>primaryemail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>portalnodeid</con:name><con:value>10</con:value></con:property><con:property><con:name>policy_TOU</con:name><con:value>https://qa1.c.uvvu.com/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20140811/html</con:value></con:property><con:property><con:name>OrgID</con:name><con:value>ISC_R1</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>NODEUSERIDSAU2_3</con:name><con:value>urn:dece:userid:org:dece:EBFC5A2A1756B996E0401F0A059934AD</con:value></con:property><con:property><con:name>NODEUSERIDSAU2_2</con:name><con:value>urn:dece:userid:org:dece:EBFC5A2A1756B996E0401F0A059934AD</con:value></con:property><con:property><con:name>NODEUSERIDSAU2_1</con:name><con:value>urn:dece:userid:org:dece:EBFC513F93D1E093E0401F0A05991966</con:value></con:property><con:property><con:name>NODEUSERIDSAU1_3</con:name><con:value>urn:dece:userid:org:dece:EBFC5A2571701DF3E0401F0A059934AB</con:value></con:property><con:property><con:name>NODEUSERIDSAU1_2</con:name><con:value>urn:dece:userid:org:dece:EBFC5A2571701DF3E0401F0A059934AB</con:value></con:property><con:property><con:name>NODEUSERIDSAU1_1</con:name><con:value>urn:dece:userid:org:dece:EBFC48B71B3A2352E0401F0A07994661</con:value></con:property><con:property><con:name>NODEUSERIDFULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE461D82DF0911A0CE0401F0A059929E3</con:value></con:property><con:property><con:name>NODEUSERIDFAU2_3</con:name><con:value>urn:dece:userid:org:dece:EBFC5B2EF6817BB7E0401F0A07997706</con:value></con:property><con:property><con:name>NODEUSERIDFAU2_2</con:name><con:value>urn:dece:userid:org:dece:EBFC5B2EF6817BB7E0401F0A07997706</con:value></con:property><con:property><con:name>NODEUSERIDFAU2_1</con:name><con:value>urn:dece:userid:org:dece:EBFC4861FEE1F058E0401F0A05997ECC</con:value></con:property><con:property><con:name>NODEUSERIDFAU1_3</con:name><con:value/></con:property><con:property><con:name>NODEUSERIDFAU1_2</con:name><con:value/></con:property><con:property><con:name>NODEUSERIDFAU1_1</con:name><con:value>urn:dece:userid:org:dece:188C10A6E9C8EB4FE0533D991F0AB3D3</con:value></con:property><con:property><con:name>NODEUSERIDBAU2_3</con:name><con:value>urn:dece:userid:org:dece:EBFC5A2A176DB996E0401F0A059934AD</con:value></con:property><con:property><con:name>NODEUSERIDBAU2_2</con:name><con:value>urn:dece:userid:org:dece:EBFC5A2A176DB996E0401F0A059934AD</con:value></con:property><con:property><con:name>NODEUSERIDBAU2_1</con:name><con:value>urn:dece:userid:org:dece:EBFC514ADCC4BCF8E0401F0A07995FAC</con:value></con:property><con:property><con:name>NODEUSERIDBAU1_3</con:name><con:value>urn:dece:userid:org:dece:EBFC5A2A0F9DB996E0401F0A059934AD</con:value></con:property><con:property><con:name>NODEUSERIDBAU1_2</con:name><con:value>urn:dece:userid:org:dece:EBFC5A2A0F9DB996E0401F0A059934AD</con:value></con:property><con:property><con:name>NODEUSERIDBAU1_1</con:name><con:value>urn:dece:userid:org:dece:EBFC4850FA7B7490E0401F0A07994665</con:value></con:property><con:property><con:name>NODEUSERID</con:name><con:value/></con:property><con:property><con:name>nodeoid31</con:name><con:value>3711</con:value></con:property><con:property><con:name>nodeoid30</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeoid21</con:name><con:value>3611</con:value></con:property><con:property><con:name>nodeoid20</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeoid14</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeoid13</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeoid12</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeoid11</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeoid10</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdRTLCS2</con:name><con:value>RET_CS_2</con:value></con:property><con:property><con:name>nodeIdRTLCS</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdRTL2</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>nodeIdRTL</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdportalCS2</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdportalCS</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdportal2</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdportal</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdNotProvisioned</con:name><con:value>notprovisioned</con:value></con:property><con:property><con:name>nodeIdLLASPCS2</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdLLASPCS</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdLLASP2</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>nodeIdLLASP</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeIdDSPCS2</con:name><con:value>DSP_CS_2</con:value></con:property><con:property><con:name>nodeIdDSPCS</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>nodeIdDSP2</con:name><con:value>DSP_2</con:value></con:property><con:property><con:name>nodeIdDSP</con:name><con:value>DSP</con:value></con:property><con:property><con:name>nodeIdDLASPCS2</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdDLASPCS</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdDLASP2</con:name><con:value>DLASP_2</con:value></con:property><con:property><con:name>nodeIdDLASP</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeIdDEVCS2</con:name><con:value>DEV_CS_2</con:value></con:property><con:property><con:name>nodeIdDEVCS</con:name><con:value>DEV_CS_1</con:value></con:property><con:property><con:name>nodeIdDEV2</con:name><con:value>DEV_2</con:value></con:property><con:property><con:name>nodeIdDEV</con:name><con:value>DEV</con:value></con:property><con:property><con:name>nodeIdDECECS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>nodeIdDECE</con:name><con:value>DECE</con:value></con:property><con:property><con:name>nodeIdCoordCS2</con:name><con:value/></con:property><con:property><con:name>nodeIdCoordCS</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>nodeIdCoo2</con:name><con:value>COO_2</con:value></con:property><con:property><con:name>nodeIdCoo</con:name><con:value>COO</con:value></con:property><con:property><con:name>nodeIdCONCS2</con:name><con:value>CON_CS_2</con:value></con:property><con:property><con:name>nodeIdCONCS</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>nodeIdCON2</con:name><con:value>CON_2</con:value></con:property><con:property><con:name>nodeIdCON</con:name><con:value>CON</con:value></con:property><con:property><con:name>nodeIdAccportalCS2</con:name><con:value>ACCESSCS_2</con:value></con:property><con:property><con:name>nodeIdAccportalCS</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>nodeIdAccportal2</con:name><con:value>ACCESS_2</con:value></con:property><con:property><con:name>nodeIdAccportal</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>nodeDeviceDefault</con:name><con:value>0200</con:value></con:property><con:property><con:name>NODEACCOUNTID_3</con:name><con:value/></con:property><con:property><con:name>NODEACCOUNTID_2</con:name><con:value/></con:property><con:property><con:name>NODEACCOUNTID_1</con:name><con:value>urn:dece:accountid:org:dece:188C10A6E9C7EB4FE0533D991F0AB3D3</con:value></con:property><con:property><con:name>NODEACCOUNTID</con:name><con:value/></con:property><con:property><con:name>microService</con:name><con:value>ON</con:value></con:property><con:property><con:name>loop</con:name><con:value>3</con:value></con:property><con:property><con:name>JKSPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>JKSAliasName</con:name><con:value>qalp1</con:value></con:property><con:property><con:name>JDBCConnStr</con:name><con:value>jdbc:oracle:thin:@stdeqp-clu2-scan.va.neustar.com:2115/stdecqa.neustar.com</con:value></con:property><con:property><con:name>idempotentdelaymillisecs</con:name><con:value>60000</con:value></con:property><con:property><con:name>Flaky_Disabled</con:name><con:value>true</con:value></con:property><con:property><con:name>ExpirationDateTime</con:name><con:value>2015-04-24T17:42:31.905Z</con:value></con:property><con:property><con:name>ExecutionMachine</con:name><con:value>localmachine</con:value></con:property><con:property><con:name>ETag</con:name><con:value>*</con:value></con:property><con:property><con:name>envIdentifier</con:name><con:value>LP1</con:value></con:property><con:property><con:name>ENV</con:name><con:value>QALP1</con:value></con:property><con:property><con:name>enablePriorityScript</con:name><con:value>false</con:value></con:property><con:property><con:name>enableFlakyScript</con:name><con:value>false</con:value></con:property><con:property><con:name>DMR_CID</con:name><con:value>urn:dece:cid:org:200002</con:value></con:property><con:property><con:name>DMR_BID</con:name><con:value>urn:dece:bid:org:200002</con:value></con:property><con:property><con:name>DMR_APID</con:name><con:value>urn:dece:apid:org:200002</con:value></con:property><con:property><con:name>DMR_ALID</con:name><con:value>urn:dece:alid:org:200002</con:value></con:property><con:property><con:name>disablePriority</con:name><con:value>P3,CHILD,CLG</con:value></con:property><con:property><con:name>Device_HostName</con:name><con:value>https://qa.d.uvvu.com</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>DBUsername</con:name><con:value>DEQA1_APP</con:value></con:property><con:property><con:name>DBPassword</con:name><con:value>lp1db_23</con:value></con:property><con:property><con:name>DBIdentifier</con:name><con:value>LP1</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>count</con:name><con:value>3</con:value></con:property><con:property><con:name>coords</con:name><con:value>FALKY,COORD-10000,COORD-3034,COORD-2999,COORD-2509,COORD-627,UV-135,UV-340,Coord-2180</con:value></con:property><con:property><con:name>coordinatorSchema_21</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_11</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_07</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_06</con:name><con:value>http://www.decellc.org/schema/2012/12/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_02</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>clusterNumber</con:name><con:value>1</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_596034053.txt</con:value></con:property><con:property><con:name>certsPath_Windows</con:name><con:value>../../Certs/QALP1/</con:value></con:property><con:property><con:name>certsPath_Linux</con:name><con:value>../../Certs/QALP1/</con:value></con:property><con:property><con:name>CertMatchesNodeName</con:name><con:value>YES</con:value></con:property><con:property><con:name>CertMatchesNodeID</con:name><con:value>YES</con:value></con:property><con:property><con:name>cacheDuration</con:name><con:value>86400</con:value></con:property><con:property><con:name>Batch_HostName</con:name><con:value>https://qa1.b.uvvu.com</con:value></con:property><con:property><con:name>audiencelist3</con:name><con:value>urn:dece:org:org:dece:DLASP_CS_2</con:value></con:property><con:property><con:name>audiencelist2</con:name><con:value>urn:dece:org:org:dece:LLASP_CS_2</con:value></con:property><con:property><con:name>audiencelist1</con:name><con:value>urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:DLASP_CS_2</con:value></con:property><con:property><con:name>APItestSuite</con:name><con:value>Test Cases Containing APIs</con:value></con:property><con:property><con:name>apid</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt%3A487811501</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_368915851.txt</con:value></con:property><con:property><con:name>ACCOUNTID_1</con:name><con:value>188C10A6E9C7EB4FE0533D991F0AB3D3</con:value></con:property><con:property><con:name>ACCOUNTID</con:name><con:value/></con:property><con:property><con:name>AccountDisplayName</con:name><con:value>Ashwin_Acc_Create_20150615_031857</con:value></con:property><con:property><con:name>ï»¿CID</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_729880294.txt</con:value></con:property><con:property><con:name>expectHTTPcontenttype</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>FLAKYSELECTOR</con:name><con:value>without_flaky</con:value></con:property></con:properties><con:wssContainer/><con:databaseConnectionContainer/><con:reporting><con:xmlTemplates/><con:parameters/></con:reporting><con:eventHandlers type="TestRunListener.afterRun" name="TestRunListener.afterRun"><con:script>if(testStepResult.getTestStep().config.type.toString() == "restrequest")
{
                byte [] tempByteArrRequest = testStepResult.getRawRequestData();
                String tempRequest = new String(tempByteArrRequest);

                log.info("-----------------------------&lt;" + testStepResult.getTestStep().getName() + " Request>--------------------------------");
                log.info(tempRequest);
                log.info("-----------------------------&lt;/" + testStepResult.getTestStep().getName() + " Request>--------------------------------");

                byte [] tempByteArrResponse = testStepResult.getRawResponseData();
                String tempResponse = new String(tempByteArrResponse);


                log.info("-----------------------------&lt;" + testStepResult.getTestStep().getName() + " Response>--------------------------------");
                log.info(tempResponse);
                log.info("-----------------------------&lt;/" + testStepResult.getTestStep().getName() + " Response>--------------------------------");
}
</con:script></con:eventHandlers><con:sensitiveInformation/></con:soapui-project>